
Queue_between_two_tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800b85c  0800b85c  0001b85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9ac  0800b9ac  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9ac  0800b9ac  0001b9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9b4  0800b9b4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9b4  0800b9b4  0001b9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9b8  0800b9b8  0001b9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b9bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000052ac  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005340  20005340  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d948  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058e2  00000000  00000000  0004da0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ea0  00000000  00000000  000532f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ca0  00000000  00000000  00055190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000756d  00000000  00000000  00056e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025c4b  00000000  00000000  0005e39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de443  00000000  00000000  00083fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016242b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000851c  00000000  00000000  00162480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b844 	.word	0x0800b844

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800b844 	.word	0x0800b844

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fd18 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f844 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f940 	bl	8000758 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f8aa 	bl	8000630 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f8d6 	bl	800068c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f904 	bl	80006ec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f007 fdc8 	bl	8008078 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue_1 */
  Queue_1Handle = osMessageQueueNew (16, sizeof(uint16_t), &Queue_1_attributes);
 80004e8:	4a11      	ldr	r2, [pc, #68]	; (8000530 <main+0x68>)
 80004ea:	2102      	movs	r1, #2
 80004ec:	2010      	movs	r0, #16
 80004ee:	f007 feba 	bl	8008266 <osMessageQueueNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <main+0x6c>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f8:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <main+0x70>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	480f      	ldr	r0, [pc, #60]	; (800053c <main+0x74>)
 80004fe:	f007 fe05 	bl	800810c <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <main+0x78>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of button_task */
  button_taskHandle = osThreadNew(Start_button_task, NULL, &button_task_attributes);
 8000508:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <main+0x7c>)
 800050a:	2100      	movs	r1, #0
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <main+0x80>)
 800050e:	f007 fdfd 	bl	800810c <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <main+0x84>)
 8000516:	6013      	str	r3, [r2, #0]

  /* creation of print_task */
  print_taskHandle = osThreadNew(Start_print_task, NULL, &print_task_attributes);
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <main+0x88>)
 800051a:	2100      	movs	r1, #0
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <main+0x8c>)
 800051e:	f007 fdf5 	bl	800810c <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <main+0x90>)
 8000526:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000528:	f007 fdca 	bl	80080c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x64>
 800052e:	bf00      	nop
 8000530:	0800b91c 	.word	0x0800b91c
 8000534:	20004a94 	.word	0x20004a94
 8000538:	0800b8b0 	.word	0x0800b8b0
 800053c:	08000955 	.word	0x08000955
 8000540:	20004a90 	.word	0x20004a90
 8000544:	0800b8d4 	.word	0x0800b8d4
 8000548:	0800098d 	.word	0x0800098d
 800054c:	20004aec 	.word	0x20004aec
 8000550:	0800b8f8 	.word	0x0800b8f8
 8000554:	08000a09 	.word	0x08000a09
 8000558:	20004af0 	.word	0x20004af0

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f00b f832 	bl	800b5d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	; (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005cc:	2308      	movs	r3, #8
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005da:	2307      	movs	r3, #7
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 faf6 	bl	8003bd4 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ee:	f000 fa4f 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2105      	movs	r1, #5
 8000610:	4618      	mov	r0, r3
 8000612:	f003 fd57 	bl	80040c4 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800061c:	f000 fa38 	bl	8000a90 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2C1_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_I2C1_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_I2C1_Init+0x50>)
 800063c:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_I2C1_Init+0x58>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_I2C1_Init+0x50>)
 800064e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_I2C1_Init+0x50>)
 800066e:	f002 fccd 	bl	800300c <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 fa0a 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20004a98 	.word	0x20004a98
 8000684:	40005400 	.word	0x40005400
 8000688:	000186a0 	.word	0x000186a0

0800068c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_I2S3_Init+0x54>)
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <MX_I2S3_Init+0x58>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2S3_Init+0x54>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006b4:	4a0c      	ldr	r2, [pc, #48]	; (80006e8 <MX_I2S3_Init+0x5c>)
 80006b6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_I2S3_Init+0x54>)
 80006cc:	f002 fde2 	bl	8003294 <HAL_I2S_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006d6:	f000 f9db 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20004b4c 	.word	0x20004b4c
 80006e4:	40003c00 	.word	0x40003c00
 80006e8:	00017700 	.word	0x00017700

080006ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_SPI1_Init+0x64>)
 80006f2:	4a18      	ldr	r2, [pc, #96]	; (8000754 <MX_SPI1_Init+0x68>)
 80006f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_SPI1_Init+0x64>)
 80006f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_SPI1_Init+0x64>)
 8000718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_SPI1_Init+0x64>)
 8000738:	220a      	movs	r2, #10
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_SPI1_Init+0x64>)
 800073e:	f004 f81b 	bl	8004778 <HAL_SPI_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000748:	f000 f9a2 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20004af4 	.word	0x20004af4
 8000754:	40013000 	.word	0x40013000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b72      	ldr	r3, [pc, #456]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a71      	ldr	r2, [pc, #452]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b6f      	ldr	r3, [pc, #444]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0310 	and.w	r3, r3, #16
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b6b      	ldr	r3, [pc, #428]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a6a      	ldr	r2, [pc, #424]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b68      	ldr	r3, [pc, #416]	; (800093c <MX_GPIO_Init+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b64      	ldr	r3, [pc, #400]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a63      	ldr	r2, [pc, #396]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b61      	ldr	r3, [pc, #388]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b5d      	ldr	r3, [pc, #372]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a5c      	ldr	r2, [pc, #368]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b5a      	ldr	r3, [pc, #360]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b56      	ldr	r3, [pc, #344]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a55      	ldr	r2, [pc, #340]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b53      	ldr	r3, [pc, #332]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b4f      	ldr	r3, [pc, #316]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a4e      	ldr	r2, [pc, #312]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b4c      	ldr	r3, [pc, #304]	; (800093c <MX_GPIO_Init+0x1e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	4849      	ldr	r0, [pc, #292]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800081c:	f000 fe6c 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2101      	movs	r1, #1
 8000824:	4847      	ldr	r0, [pc, #284]	; (8000944 <MX_GPIO_Init+0x1ec>)
 8000826:	f000 fe67 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800082a:	2200      	movs	r2, #0
 800082c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000830:	4845      	ldr	r0, [pc, #276]	; (8000948 <MX_GPIO_Init+0x1f0>)
 8000832:	f000 fe61 	bl	80014f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	483c      	ldr	r0, [pc, #240]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800084e:	f000 fc9f 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4836      	ldr	r0, [pc, #216]	; (8000944 <MX_GPIO_Init+0x1ec>)
 800086a:	f000 fc91 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087e:	2305      	movs	r3, #5
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	482e      	ldr	r0, [pc, #184]	; (8000944 <MX_GPIO_Init+0x1ec>)
 800088a:	f000 fc81 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000892:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	482a      	ldr	r0, [pc, #168]	; (800094c <MX_GPIO_Init+0x1f4>)
 80008a4:	f000 fc74 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4825      	ldr	r0, [pc, #148]	; (8000950 <MX_GPIO_Init+0x1f8>)
 80008bc:	f000 fc68 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	481c      	ldr	r0, [pc, #112]	; (8000950 <MX_GPIO_Init+0x1f8>)
 80008de:	f000 fc57 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4813      	ldr	r0, [pc, #76]	; (8000948 <MX_GPIO_Init+0x1f0>)
 80008fc:	f000 fc48 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_GPIO_Init+0x1f0>)
 8000914:	f000 fc3c 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800092e:	f000 fc2f 	bl	8001190 <HAL_GPIO_Init>

}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40021000 	.word	0x40021000
 8000944:	40020800 	.word	0x40020800
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40020000 	.word	0x40020000
 8000950:	40020400 	.word	0x40020400

08000954 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800095c:	f00a faee 	bl	800af3c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000966:	4808      	ldr	r0, [pc, #32]	; (8000988 <StartDefaultTask+0x34>)
 8000968:	f000 fdc6 	bl	80014f8 <HAL_GPIO_WritePin>
	  osDelay(100);
 800096c:	2064      	movs	r0, #100	; 0x64
 800096e:	f007 fc5f 	bl	8008230 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <StartDefaultTask+0x34>)
 800097a:	f000 fdbd 	bl	80014f8 <HAL_GPIO_WritePin>
	  osDelay(900);
 800097e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000982:	f007 fc55 	bl	8008230 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000986:	e7eb      	b.n	8000960 <StartDefaultTask+0xc>
 8000988:	40020c00 	.word	0x40020c00

0800098c <Start_button_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_button_task */
void Start_button_task(void *argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_button_task */
  /* Infinite loop */
	uint8_t button_status = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	75fb      	strb	r3, [r7, #23]
	uint16_t test_val_for_queue = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	81fb      	strh	r3, [r7, #14]

	for(;;)
	{
		osDelay(300);
 800099c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009a0:	f007 fc46 	bl	8008230 <osDelay>

		button_status = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80009a4:	2101      	movs	r1, #1
 80009a6:	4815      	ldr	r0, [pc, #84]	; (80009fc <Start_button_task+0x70>)
 80009a8:	f000 fd8e 	bl	80014c8 <HAL_GPIO_ReadPin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	75fb      	strb	r3, [r7, #23]
		if(button_status == 1)
 80009b0:	7dfb      	ldrb	r3, [r7, #23]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d1f2      	bne.n	800099c <Start_button_task+0x10>
		{
			test_val_for_queue++;
 80009b6:	89fb      	ldrh	r3, [r7, #14]
 80009b8:	3301      	adds	r3, #1
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	81fb      	strh	r3, [r7, #14]

			if(test_val_for_queue >= 10)
 80009be:	89fb      	ldrh	r3, [r7, #14]
 80009c0:	2b09      	cmp	r3, #9
 80009c2:	d901      	bls.n	80009c8 <Start_button_task+0x3c>
			{
				test_val_for_queue = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	81fb      	strh	r3, [r7, #14]
			}
			status = xQueueSend (Queue_1Handle, &test_val_for_queue, 100);
 80009c8:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <Start_button_task+0x74>)
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	f107 010e 	add.w	r1, r7, #14
 80009d0:	2300      	movs	r3, #0
 80009d2:	2264      	movs	r2, #100	; 0x64
 80009d4:	f007 ff9e 	bl	8008914 <xQueueGenericSend>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <Start_button_task+0x78>)
 80009dc:	6013      	str	r3, [r2, #0]
			configASSERT(status == pdPASS);
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <Start_button_task+0x78>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d0da      	beq.n	800099c <Start_button_task+0x10>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ea:	f383 8811 	msr	BASEPRI, r3
 80009ee:	f3bf 8f6f 	isb	sy
 80009f2:	f3bf 8f4f 	dsb	sy
 80009f6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80009f8:	bf00      	nop
 80009fa:	e7fe      	b.n	80009fa <Start_button_task+0x6e>
 80009fc:	40020000 	.word	0x40020000
 8000a00:	20004a94 	.word	0x20004a94
 8000a04:	20004b94 	.word	0x20004b94

08000a08 <Start_print_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_print_task */
void Start_print_task(void *argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_print_task */
  /* Infinite loop */
	uint8_t test_value_for_read_from_queue = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]

	for(;;)
	{
		status = xQueueReceive(Queue_1Handle ,&test_value_for_read_from_queue, 10);
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <Start_print_task+0x58>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f107 010f 	add.w	r1, r7, #15
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f008 f912 	bl	8008c48 <xQueueReceive>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <Start_print_task+0x5c>)
 8000a28:	6013      	str	r3, [r2, #0]
		//configASSERT(status == pdPASS);

		while(test_value_for_read_from_queue > 0)
 8000a2a:	e015      	b.n	8000a58 <Start_print_task+0x50>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <Start_print_task+0x60>)
 8000a34:	f000 fd60 	bl	80014f8 <HAL_GPIO_WritePin>
			osDelay(100);
 8000a38:	2064      	movs	r0, #100	; 0x64
 8000a3a:	f007 fbf9 	bl	8008230 <osDelay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <Start_print_task+0x60>)
 8000a46:	f000 fd57 	bl	80014f8 <HAL_GPIO_WritePin>
			osDelay(200);
 8000a4a:	20c8      	movs	r0, #200	; 0xc8
 8000a4c:	f007 fbf0 	bl	8008230 <osDelay>

			test_value_for_read_from_queue--;
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	73fb      	strb	r3, [r7, #15]
		while(test_value_for_read_from_queue > 0)
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1e6      	bne.n	8000a2c <Start_print_task+0x24>
		status = xQueueReceive(Queue_1Handle ,&test_value_for_read_from_queue, 10);
 8000a5e:	e7d9      	b.n	8000a14 <Start_print_task+0xc>
 8000a60:	20004a94 	.word	0x20004a94
 8000a64:	20004b94 	.word	0x20004b94
 8000a68:	40020c00 	.word	0x40020c00

08000a6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d101      	bne.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a7e:	f000 fa61 	bl	8000f44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40001000 	.word	0x40001000

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_MspInit+0x54>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <HAL_MspInit+0x54>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x54>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_MspInit+0x54>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_MspInit+0x54>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_MspInit+0x54>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	210f      	movs	r1, #15
 8000ade:	f06f 0001 	mvn.w	r0, #1
 8000ae2:	f000 fb2b 	bl	800113c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12c      	bne.n	8000b70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b38:	2312      	movs	r3, #18
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b44:	2304      	movs	r3, #4
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480c      	ldr	r0, [pc, #48]	; (8000b80 <HAL_I2C_MspInit+0x8c>)
 8000b50:	f000 fb1e 	bl	8001190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	; 0x38
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <HAL_I2S_MspInit+0xf0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d15a      	bne.n	8000c6a <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bb8:	23c0      	movs	r3, #192	; 0xc0
 8000bba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 fc97 	bl	80044f8 <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bd0:	f7ff ff5e 	bl	8000a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4a26      	ldr	r2, [pc, #152]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a1f      	ldr	r2, [pc, #124]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_I2S_MspInit+0xf4>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c38:	2306      	movs	r3, #6
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	480e      	ldr	r0, [pc, #56]	; (8000c7c <HAL_I2S_MspInit+0xf8>)
 8000c44:	f000 faa4 	bl	8001190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c48:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <HAL_I2S_MspInit+0xfc>)
 8000c66:	f000 fa93 	bl	8001190 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3738      	adds	r7, #56	; 0x38
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40003c00 	.word	0x40003c00
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020800 	.word	0x40020800

08000c84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_SPI_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12b      	bne.n	8000cfe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_SPI_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cde:	23e0      	movs	r3, #224	; 0xe0
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cee:	2305      	movs	r3, #5
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_SPI_MspInit+0x8c>)
 8000cfa:	f000 fa49 	bl	8001190 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	; 0x30
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	2036      	movs	r0, #54	; 0x36
 8000d2a:	f000 fa07 	bl	800113c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d2e:	2036      	movs	r0, #54	; 0x36
 8000d30:	f000 fa20 	bl	8001174 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <HAL_InitTick+0xa4>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	4a1e      	ldr	r2, [pc, #120]	; (8000db8 <HAL_InitTick+0xa4>)
 8000d3e:	f043 0310 	orr.w	r3, r3, #16
 8000d42:	6413      	str	r3, [r2, #64]	; 0x40
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <HAL_InitTick+0xa4>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d50:	f107 0210 	add.w	r2, r7, #16
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4611      	mov	r1, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fb9a 	bl	8004494 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d60:	f003 fb84 	bl	800446c <HAL_RCC_GetPCLK1Freq>
 8000d64:	4603      	mov	r3, r0
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <HAL_InitTick+0xa8>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	0c9b      	lsrs	r3, r3, #18
 8000d74:	3b01      	subs	r3, #1
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_InitTick+0xac>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <HAL_InitTick+0xb0>)
 8000d7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_InitTick+0xac>)
 8000d80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d84:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_InitTick+0xac>)
 8000d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_InitTick+0xac>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_InitTick+0xac>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <HAL_InitTick+0xac>)
 8000d9a:	f003 fd76 	bl	800488a <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d104      	bne.n	8000dae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000da4:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <HAL_InitTick+0xac>)
 8000da6:	f003 fdc9 	bl	800493c <HAL_TIM_Base_Start_IT>
 8000daa:	4603      	mov	r3, r0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3730      	adds	r7, #48	; 0x30
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	431bde83 	.word	0x431bde83
 8000dc0:	20004b98 	.word	0x20004b98
 8000dc4:	40001000 	.word	0x40001000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <TIM6_DAC_IRQHandler+0x10>)
 8000dfa:	f003 fe0f 	bl	8004a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20004b98 	.word	0x20004b98

08000e08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <OTG_FS_IRQHandler+0x10>)
 8000e0e:	f000 fdf7 	bl	8001a00 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000502c 	.word	0x2000502c

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f00a fb78 	bl	800b540 <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20020000 	.word	0x20020000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	200000b0 	.word	0x200000b0
 8000e84:	20005340 	.word	0x20005340

08000e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eb2:	490e      	ldr	r1, [pc, #56]	; (8000eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec8:	4c0b      	ldr	r4, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ed6:	f7ff ffd7 	bl	8000e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eda:	f00a fb37 	bl	800b54c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ede:	f7ff faf3 	bl	80004c8 <main>
  bx  lr    
 8000ee2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000ef0:	0800b9bc 	.word	0x0800b9bc
  ldr r2, =_sbss
 8000ef4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000ef8:	20005340 	.word	0x20005340

08000efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_Init+0x40>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_Init+0x40>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_Init+0x40>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f8fc 	bl	8001126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	200f      	movs	r0, #15
 8000f30:	f7ff fef0 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fdb2 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20004be0 	.word	0x20004be0

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20004be0 	.word	0x20004be0

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff ffee 	bl	8000f6c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffde 	bl	8000f6c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff4c 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114e:	f7ff ff61 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f7ff ffb1 	bl	80010c0 <NVIC_EncodePriority>
 800115e:	4602      	mov	r2, r0
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff80 	bl	800106c <__NVIC_SetPriority>
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff54 	bl	8001030 <__NVIC_EnableIRQ>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e16b      	b.n	8001484 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 815a 	bne.w	800147e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80b4 	beq.w	800147e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b60      	ldr	r3, [pc, #384]	; (800149c <HAL_GPIO_Init+0x30c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a5f      	ldr	r2, [pc, #380]	; (800149c <HAL_GPIO_Init+0x30c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b5d      	ldr	r3, [pc, #372]	; (800149c <HAL_GPIO_Init+0x30c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a5b      	ldr	r2, [pc, #364]	; (80014a0 <HAL_GPIO_Init+0x310>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a52      	ldr	r2, [pc, #328]	; (80014a4 <HAL_GPIO_Init+0x314>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d02b      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a51      	ldr	r2, [pc, #324]	; (80014a8 <HAL_GPIO_Init+0x318>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d025      	beq.n	80013b2 <HAL_GPIO_Init+0x222>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a50      	ldr	r2, [pc, #320]	; (80014ac <HAL_GPIO_Init+0x31c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01f      	beq.n	80013ae <HAL_GPIO_Init+0x21e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4f      	ldr	r2, [pc, #316]	; (80014b0 <HAL_GPIO_Init+0x320>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <HAL_GPIO_Init+0x21a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4e      	ldr	r2, [pc, #312]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x216>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4d      	ldr	r2, [pc, #308]	; (80014b8 <HAL_GPIO_Init+0x328>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x212>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4c      	ldr	r2, [pc, #304]	; (80014bc <HAL_GPIO_Init+0x32c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x20e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x20a>
 8001396:	2307      	movs	r3, #7
 8001398:	e00e      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 800139a:	2308      	movs	r3, #8
 800139c:	e00c      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 800139e:	2306      	movs	r3, #6
 80013a0:	e00a      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e008      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013b6:	2300      	movs	r3, #0
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	f002 0203 	and.w	r2, r2, #3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c8:	4935      	ldr	r1, [pc, #212]	; (80014a0 <HAL_GPIO_Init+0x310>)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <HAL_GPIO_Init+0x334>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fa:	4a32      	ldr	r2, [pc, #200]	; (80014c4 <HAL_GPIO_Init+0x334>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001424:	4a27      	ldr	r2, [pc, #156]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144e:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	f67f ae90 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40013800 	.word	0x40013800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40021400 	.word	0x40021400
 80014bc:	40021800 	.word	0x40021800
 80014c0:	40021c00 	.word	0x40021c00
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e001      	b.n	80014ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800152a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152c:	b08f      	sub	sp, #60	; 0x3c
 800152e:	af0a      	add	r7, sp, #40	; 0x28
 8001530:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e054      	b.n	80015e6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d106      	bne.n	800155c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f009 fd44 	bl	800afe4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2203      	movs	r2, #3
 8001560:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fca4 	bl	8004ec8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	687e      	ldr	r6, [r7, #4]
 8001588:	466d      	mov	r5, sp
 800158a:	f106 0410 	add.w	r4, r6, #16
 800158e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001596:	e894 0003 	ldmia.w	r4, {r0, r1}
 800159a:	e885 0003 	stmia.w	r5, {r0, r1}
 800159e:	1d33      	adds	r3, r6, #4
 80015a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a2:	6838      	ldr	r0, [r7, #0]
 80015a4:	f003 fc1e 	bl	8004de4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fc9b 	bl	8004eea <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	687e      	ldr	r6, [r7, #4]
 80015bc:	466d      	mov	r5, sp
 80015be:	f106 0410 	add.w	r4, r6, #16
 80015c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80015d2:	1d33      	adds	r3, r6, #4
 80015d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f003 fe02 	bl	80051e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015ee <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015ee:	b590      	push	{r4, r7, lr}
 80015f0:	b089      	sub	sp, #36	; 0x24
 80015f2:	af04      	add	r7, sp, #16
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	4608      	mov	r0, r1
 80015f8:	4611      	mov	r1, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	70fb      	strb	r3, [r7, #3]
 8001600:	460b      	mov	r3, r1
 8001602:	70bb      	strb	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_HCD_HC_Init+0x28>
 8001612:	2302      	movs	r3, #2
 8001614:	e076      	b.n	8001704 <HAL_HCD_HC_Init+0x116>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	212c      	movs	r1, #44	; 0x2c
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	4413      	add	r3, r2
 800162a:	333d      	adds	r3, #61	; 0x3d
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	212c      	movs	r1, #44	; 0x2c
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	4413      	add	r3, r2
 800163c:	3338      	adds	r3, #56	; 0x38
 800163e:	787a      	ldrb	r2, [r7, #1]
 8001640:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	212c      	movs	r1, #44	; 0x2c
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	4413      	add	r3, r2
 800164e:	3340      	adds	r3, #64	; 0x40
 8001650:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001652:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	212c      	movs	r1, #44	; 0x2c
 800165a:	fb01 f303 	mul.w	r3, r1, r3
 800165e:	4413      	add	r3, r2
 8001660:	3339      	adds	r3, #57	; 0x39
 8001662:	78fa      	ldrb	r2, [r7, #3]
 8001664:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	212c      	movs	r1, #44	; 0x2c
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	4413      	add	r3, r2
 8001672:	333f      	adds	r3, #63	; 0x3f
 8001674:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001678:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	78ba      	ldrb	r2, [r7, #2]
 800167e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001682:	b2d0      	uxtb	r0, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	212c      	movs	r1, #44	; 0x2c
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	333a      	adds	r3, #58	; 0x3a
 8001690:	4602      	mov	r2, r0
 8001692:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001694:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001698:	2b00      	cmp	r3, #0
 800169a:	da09      	bge.n	80016b0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	333b      	adds	r3, #59	; 0x3b
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	e008      	b.n	80016c2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	212c      	movs	r1, #44	; 0x2c
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	333b      	adds	r3, #59	; 0x3b
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	212c      	movs	r1, #44	; 0x2c
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	333c      	adds	r3, #60	; 0x3c
 80016d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016d4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	787c      	ldrb	r4, [r7, #1]
 80016dc:	78ba      	ldrb	r2, [r7, #2]
 80016de:	78f9      	ldrb	r1, [r7, #3]
 80016e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4623      	mov	r3, r4
 80016f2:	f003 feef 	bl	80054d4 <USB_HC_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bd90      	pop	{r4, r7, pc}

0800170c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_HCD_HC_Halt+0x1e>
 8001726:	2302      	movs	r3, #2
 8001728:	e00f      	b.n	800174a <HAL_HCD_HC_Halt+0x3e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f004 f92b 	bl	8005996 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4603      	mov	r3, r0
 8001764:	70fb      	strb	r3, [r7, #3]
 8001766:	460b      	mov	r3, r1
 8001768:	70bb      	strb	r3, [r7, #2]
 800176a:	4613      	mov	r3, r2
 800176c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	333b      	adds	r3, #59	; 0x3b
 800177c:	78ba      	ldrb	r2, [r7, #2]
 800177e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	333f      	adds	r3, #63	; 0x3f
 800178e:	787a      	ldrb	r2, [r7, #1]
 8001790:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001792:	7c3b      	ldrb	r3, [r7, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d112      	bne.n	80017be <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	3342      	adds	r3, #66	; 0x42
 80017a6:	2203      	movs	r2, #3
 80017a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	212c      	movs	r1, #44	; 0x2c
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	333d      	adds	r3, #61	; 0x3d
 80017b8:	7f3a      	ldrb	r2, [r7, #28]
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e008      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	3342      	adds	r3, #66	; 0x42
 80017cc:	2202      	movs	r2, #2
 80017ce:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	f200 80c6 	bhi.w	8001964 <HAL_HCD_HC_SubmitRequest+0x210>
 80017d8:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017de:	bf00      	nop
 80017e0:	080017f1 	.word	0x080017f1
 80017e4:	08001951 	.word	0x08001951
 80017e8:	08001855 	.word	0x08001855
 80017ec:	080018d3 	.word	0x080018d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017f0:	7c3b      	ldrb	r3, [r7, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	f040 80b8 	bne.w	8001968 <HAL_HCD_HC_SubmitRequest+0x214>
 80017f8:	78bb      	ldrb	r3, [r7, #2]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 80b4 	bne.w	8001968 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001800:	8b3b      	ldrh	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d108      	bne.n	8001818 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	212c      	movs	r1, #44	; 0x2c
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	3355      	adds	r3, #85	; 0x55
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	3355      	adds	r3, #85	; 0x55
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3342      	adds	r3, #66	; 0x42
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800183e:	e093      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3342      	adds	r3, #66	; 0x42
 800184e:	2202      	movs	r2, #2
 8001850:	701a      	strb	r2, [r3, #0]
      break;
 8001852:	e089      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001854:	78bb      	ldrb	r3, [r7, #2]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d11d      	bne.n	8001896 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3355      	adds	r3, #85	; 0x55
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	3342      	adds	r3, #66	; 0x42
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001880:	e073      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	212c      	movs	r1, #44	; 0x2c
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	3342      	adds	r3, #66	; 0x42
 8001890:	2202      	movs	r2, #2
 8001892:	701a      	strb	r2, [r3, #0]
      break;
 8001894:	e069      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	212c      	movs	r1, #44	; 0x2c
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	3354      	adds	r3, #84	; 0x54
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	3342      	adds	r3, #66	; 0x42
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
      break;
 80018bc:	e055      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	3342      	adds	r3, #66	; 0x42
 80018cc:	2202      	movs	r2, #2
 80018ce:	701a      	strb	r2, [r3, #0]
      break;
 80018d0:	e04b      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018d2:	78bb      	ldrb	r3, [r7, #2]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d11d      	bne.n	8001914 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3355      	adds	r3, #85	; 0x55
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	3342      	adds	r3, #66	; 0x42
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018fe:	e034      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	3342      	adds	r3, #66	; 0x42
 800190e:	2202      	movs	r2, #2
 8001910:	701a      	strb	r2, [r3, #0]
      break;
 8001912:	e02a      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	3354      	adds	r3, #84	; 0x54
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3342      	adds	r3, #66	; 0x42
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
      break;
 800193a:	e016      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3342      	adds	r3, #66	; 0x42
 800194a:	2202      	movs	r2, #2
 800194c:	701a      	strb	r2, [r3, #0]
      break;
 800194e:	e00c      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3342      	adds	r3, #66	; 0x42
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
      break;
 8001962:	e002      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001964:	bf00      	nop
 8001966:	e000      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001968:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	212c      	movs	r1, #44	; 0x2c
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	3344      	adds	r3, #68	; 0x44
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	8b3a      	ldrh	r2, [r7, #24]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	202c      	movs	r0, #44	; 0x2c
 8001984:	fb00 f303 	mul.w	r3, r0, r3
 8001988:	440b      	add	r3, r1
 800198a:	334c      	adds	r3, #76	; 0x4c
 800198c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	3360      	adds	r3, #96	; 0x60
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3350      	adds	r3, #80	; 0x50
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	3339      	adds	r3, #57	; 0x39
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	212c      	movs	r1, #44	; 0x2c
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	3361      	adds	r3, #97	; 0x61
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	222c      	movs	r2, #44	; 0x2c
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	3338      	adds	r3, #56	; 0x38
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	18d1      	adds	r1, r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	f003 fe7e 	bl	80056f0 <USB_HC_StartXfer>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop

08001a00 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fba1 	bl	800515e <USB_GetMode>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	f040 80f6 	bne.w	8001c10 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 fb85 	bl	8005138 <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80ec 	beq.w	8001c0e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fb7c 	bl	8005138 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a4a:	d104      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fb6c 	bl	8005138 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a6a:	d104      	bne.n	8001a76 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 fb5c 	bl	8005138 <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a8a:	d104      	bne.n	8001a96 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fb4c 	bl	8005138 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d103      	bne.n	8001ab2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 fb3e 	bl	8005138 <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ac6:	d11c      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ad0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	6938      	ldr	r0, [r7, #16]
 8001ae6:	f003 fa4d 	bl	8004f84 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001aea:	6938      	ldr	r0, [r7, #16]
 8001aec:	f003 fa6e 	bl	8004fcc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2101      	movs	r1, #1
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fc26 	bl	8005348 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f009 faef 	bl	800b0e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fb16 	bl	8005138 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b16:	d102      	bne.n	8001b1e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f001 fa03 	bl	8002f24 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fb08 	bl	8005138 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d106      	bne.n	8001b40 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f009 fab8 	bl	800b0a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 faf7 	bl	8005138 <USB_ReadInterrupts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d101      	bne.n	8001b58 <HAL_HCD_IRQHandler+0x158>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_HCD_IRQHandler+0x15a>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d012      	beq.n	8001b84 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0210 	bic.w	r2, r2, #16
 8001b6c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f001 f906 	bl	8002d80 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0210 	orr.w	r2, r2, #16
 8001b82:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fad5 	bl	8005138 <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b98:	d13a      	bne.n	8001c10 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fee8 	bl	8005974 <USB_HC_ReadInterrupt>
 8001ba4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e025      	b.n	8001bf8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d018      	beq.n	8001bf2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd6:	d106      	bne.n	8001be6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8ab 	bl	8001d3a <HCD_HC_IN_IRQHandler>
 8001be4:	e005      	b.n	8001bf2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4619      	mov	r1, r3
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fcc6 	bl	800257e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d3d4      	bcc.n	8001bac <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0a:	615a      	str	r2, [r3, #20]
 8001c0c:	e000      	b.n	8001c10 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c0e:	bf00      	nop
    }
  }
}
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_HCD_Start+0x16>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e013      	b.n	8001c54 <HAL_HCD_Start+0x3e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fbe8 	bl	8005410 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 f92e 	bl	8004ea6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_HCD_Stop+0x16>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e00d      	b.n	8001c8e <HAL_HCD_Stop+0x32>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 ffe2 	bl	8005c48 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fb8a 	bl	80053bc <USB_ResetPort>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3360      	adds	r3, #96	; 0x60
 8001ccc:	781b      	ldrb	r3, [r3, #0]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3350      	adds	r3, #80	; 0x50
 8001cf4:	681b      	ldr	r3, [r3, #0]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fbce 	bl	80054b0 <USB_GetCurrentFrame>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 fba9 	bl	8005482 <USB_GetHostSpeed>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d119      	bne.n	8001d9e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	461a      	mov	r2, r3
 8001d78:	2304      	movs	r3, #4
 8001d7a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	0151      	lsls	r1, r2, #5
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	440a      	add	r2, r1
 8001d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	60d3      	str	r3, [r2, #12]
 8001d9c:	e101      	b.n	8001fa2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db4:	d12b      	bne.n	8001e0e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3361      	adds	r3, #97	; 0x61
 8001dd8:	2207      	movs	r2, #7
 8001dda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	0151      	lsls	r1, r2, #5
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	440a      	add	r2, r1
 8001df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001df6:	f043 0302 	orr.w	r3, r3, #2
 8001dfa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 fdc5 	bl	8005996 <USB_HC_Halt>
 8001e0c:	e0c9      	b.n	8001fa2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d109      	bne.n	8001e38 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	461a      	mov	r2, r3
 8001e32:	2320      	movs	r3, #32
 8001e34:	6093      	str	r3, [r2, #8]
 8001e36:	e0b4      	b.n	8001fa2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d133      	bne.n	8001eb6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	0151      	lsls	r1, r2, #5
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	440a      	add	r2, r1
 8001e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	212c      	movs	r1, #44	; 0x2c
 8001e74:	fb01 f303 	mul.w	r3, r1, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	3361      	adds	r3, #97	; 0x61
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2310      	movs	r3, #16
 8001e90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fd71 	bl	8005996 <USB_HC_Halt>
 8001eb4:	e075      	b.n	8001fa2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ecc:	d134      	bne.n	8001f38 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	0151      	lsls	r1, r2, #5
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	440a      	add	r2, r1
 8001ee4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3361      	adds	r3, #97	; 0x61
 8001efc:	2208      	movs	r2, #8
 8001efe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2310      	movs	r3, #16
 8001f10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f24:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 fd30 	bl	8005996 <USB_HC_Halt>
 8001f36:	e034      	b.n	8001fa2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	2b80      	cmp	r3, #128	; 0x80
 8001f4c:	d129      	bne.n	8001fa2 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	0151      	lsls	r1, r2, #5
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	440a      	add	r2, r1
 8001f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3361      	adds	r3, #97	; 0x61
 8001f7c:	2206      	movs	r2, #6
 8001f7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 fd03 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb8:	d122      	bne.n	8002000 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	0151      	lsls	r1, r2, #5
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	440a      	add	r2, r1
 8001fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 fcd6 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ffc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ffe:	e2ba      	b.n	8002576 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	f040 811b 	bne.w	800224e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d019      	beq.n	8002054 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	3348      	adds	r3, #72	; 0x48
 800202e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	0159      	lsls	r1, r3, #5
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	440b      	add	r3, r1
 8002038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002042:	1ad2      	subs	r2, r2, r3
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	202c      	movs	r0, #44	; 0x2c
 800204a:	fb00 f303 	mul.w	r3, r0, r3
 800204e:	440b      	add	r3, r1
 8002050:	3350      	adds	r3, #80	; 0x50
 8002052:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	3361      	adds	r3, #97	; 0x61
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	335c      	adds	r3, #92	; 0x5c
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002084:	461a      	mov	r2, r3
 8002086:	2301      	movs	r3, #1
 8002088:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	333f      	adds	r3, #63	; 0x3f
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	333f      	adds	r3, #63	; 0x3f
 80020ac:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d121      	bne.n	80020f6 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	0151      	lsls	r1, r2, #5
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	440a      	add	r2, r1
 80020c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 fc5a 	bl	8005996 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ee:	461a      	mov	r2, r3
 80020f0:	2310      	movs	r3, #16
 80020f2:	6093      	str	r3, [r2, #8]
 80020f4:	e066      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	333f      	adds	r3, #63	; 0x3f
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d127      	bne.n	800215a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	0151      	lsls	r1, r2, #5
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	440a      	add	r2, r1
 8002120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002128:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3360      	adds	r3, #96	; 0x60
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	b2d9      	uxtb	r1, r3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	202c      	movs	r0, #44	; 0x2c
 8002146:	fb00 f303 	mul.w	r3, r0, r3
 800214a:	4413      	add	r3, r2
 800214c:	3360      	adds	r3, #96	; 0x60
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f008 ffd2 	bl	800b0fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002158:	e034      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	212c      	movs	r1, #44	; 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	333f      	adds	r3, #63	; 0x3f
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d12a      	bne.n	80021c4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3360      	adds	r3, #96	; 0x60
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3354      	adds	r3, #84	; 0x54
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	f083 0301 	eor.w	r3, r3, #1
 8002194:	b2d8      	uxtb	r0, r3
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	3354      	adds	r3, #84	; 0x54
 80021a4:	4602      	mov	r2, r0
 80021a6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	b2d9      	uxtb	r1, r3
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	202c      	movs	r0, #44	; 0x2c
 80021b2:	fb00 f303 	mul.w	r3, r0, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	3360      	adds	r3, #96	; 0x60
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f008 ff9c 	bl	800b0fc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d12b      	bne.n	8002224 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3348      	adds	r3, #72	; 0x48
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	202c      	movs	r0, #44	; 0x2c
 80021e2:	fb00 f202 	mul.w	r2, r0, r2
 80021e6:	440a      	add	r2, r1
 80021e8:	3240      	adds	r2, #64	; 0x40
 80021ea:	8812      	ldrh	r2, [r2, #0]
 80021ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 81be 	beq.w	8002576 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3354      	adds	r3, #84	; 0x54
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	f083 0301 	eor.w	r3, r3, #1
 800220e:	b2d8      	uxtb	r0, r3
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3354      	adds	r3, #84	; 0x54
 800221e:	4602      	mov	r2, r0
 8002220:	701a      	strb	r2, [r3, #0]
}
 8002222:	e1a8      	b.n	8002576 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	212c      	movs	r1, #44	; 0x2c
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	3354      	adds	r3, #84	; 0x54
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	f083 0301 	eor.w	r3, r3, #1
 8002238:	b2d8      	uxtb	r0, r3
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	3354      	adds	r3, #84	; 0x54
 8002248:	4602      	mov	r2, r0
 800224a:	701a      	strb	r2, [r3, #0]
}
 800224c:	e193      	b.n	8002576 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4413      	add	r3, r2
 8002256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	f040 8106 	bne.w	8002472 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	0151      	lsls	r1, r2, #5
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	440a      	add	r2, r1
 800227c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002280:	f023 0302 	bic.w	r3, r3, #2
 8002284:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	3361      	adds	r3, #97	; 0x61
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d109      	bne.n	80022ae <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3360      	adds	r3, #96	; 0x60
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e0c9      	b.n	8002442 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3361      	adds	r3, #97	; 0x61
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d109      	bne.n	80022d6 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	3360      	adds	r3, #96	; 0x60
 80022d0:	2205      	movs	r2, #5
 80022d2:	701a      	strb	r2, [r3, #0]
 80022d4:	e0b5      	b.n	8002442 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	3361      	adds	r3, #97	; 0x61
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d009      	beq.n	80022fe <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	3361      	adds	r3, #97	; 0x61
 80022f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d150      	bne.n	80023a0 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	212c      	movs	r1, #44	; 0x2c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	335c      	adds	r3, #92	; 0x5c
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	202c      	movs	r0, #44	; 0x2c
 8002316:	fb00 f303 	mul.w	r3, r0, r3
 800231a:	440b      	add	r3, r1
 800231c:	335c      	adds	r3, #92	; 0x5c
 800231e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	335c      	adds	r3, #92	; 0x5c
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d912      	bls.n	800235a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	335c      	adds	r3, #92	; 0x5c
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3360      	adds	r3, #96	; 0x60
 8002354:	2204      	movs	r2, #4
 8002356:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002358:	e073      	b.n	8002442 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3360      	adds	r3, #96	; 0x60
 8002368:	2202      	movs	r2, #2
 800236a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4413      	add	r3, r2
 8002374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002382:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800238a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002398:	461a      	mov	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800239e:	e050      	b.n	8002442 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	3361      	adds	r3, #97	; 0x61
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d122      	bne.n	80023fa <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3360      	adds	r3, #96	; 0x60
 80023c2:	2202      	movs	r2, #2
 80023c4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023dc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023e4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	e023      	b.n	8002442 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	3361      	adds	r3, #97	; 0x61
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b07      	cmp	r3, #7
 800240c:	d119      	bne.n	8002442 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	335c      	adds	r3, #92	; 0x5c
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	202c      	movs	r0, #44	; 0x2c
 8002426:	fb00 f303 	mul.w	r3, r0, r3
 800242a:	440b      	add	r3, r1
 800242c:	335c      	adds	r3, #92	; 0x5c
 800242e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3360      	adds	r3, #96	; 0x60
 800243e:	2204      	movs	r2, #4
 8002440:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	461a      	mov	r2, r3
 8002450:	2302      	movs	r3, #2
 8002452:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	b2d9      	uxtb	r1, r3
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	202c      	movs	r0, #44	; 0x2c
 800245e:	fb00 f303 	mul.w	r3, r0, r3
 8002462:	4413      	add	r3, r2
 8002464:	3360      	adds	r3, #96	; 0x60
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f008 fe46 	bl	800b0fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002470:	e081      	b.n	8002576 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b10      	cmp	r3, #16
 8002486:	d176      	bne.n	8002576 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	333f      	adds	r3, #63	; 0x3f
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d121      	bne.n	80024e0 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	335c      	adds	r3, #92	; 0x5c
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	0151      	lsls	r1, r2, #5
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	440a      	add	r2, r1
 80024c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 fa5c 	bl	8005996 <USB_HC_Halt>
 80024de:	e041      	b.n	8002564 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	333f      	adds	r3, #63	; 0x3f
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	333f      	adds	r3, #63	; 0x3f
 8002502:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002504:	2b02      	cmp	r3, #2
 8002506:	d12d      	bne.n	8002564 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	335c      	adds	r3, #92	; 0x5c
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d120      	bne.n	8002564 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	212c      	movs	r1, #44	; 0x2c
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	4413      	add	r3, r2
 800252e:	3361      	adds	r3, #97	; 0x61
 8002530:	2203      	movs	r2, #3
 8002532:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	0151      	lsls	r1, r2, #5
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	440a      	add	r2, r1
 800254a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fa19 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	461a      	mov	r2, r3
 8002572:	2310      	movs	r3, #16
 8002574:	6093      	str	r3, [r2, #8]
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b088      	sub	sp, #32
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d119      	bne.n	80025e2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	461a      	mov	r2, r3
 80025bc:	2304      	movs	r3, #4
 80025be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	0151      	lsls	r1, r2, #5
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	440a      	add	r2, r1
 80025d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025da:	f043 0302 	orr.w	r3, r3, #2
 80025de:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80025e0:	e3ca      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d13e      	bne.n	8002676 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	461a      	mov	r2, r3
 8002606:	2320      	movs	r3, #32
 8002608:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	333d      	adds	r3, #61	; 0x3d
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b01      	cmp	r3, #1
 800261c:	f040 83ac 	bne.w	8002d78 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	333d      	adds	r3, #61	; 0x3d
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	3360      	adds	r3, #96	; 0x60
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	0151      	lsls	r1, r2, #5
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	440a      	add	r2, r1
 800265a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f003 f991 	bl	8005996 <USB_HC_Halt>
}
 8002674:	e380      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800268c:	d122      	bne.n	80026d4 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	0151      	lsls	r1, r2, #5
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	440a      	add	r2, r1
 80026a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 f96c 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ca:	461a      	mov	r2, r3
 80026cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026d0:	6093      	str	r3, [r2, #8]
}
 80026d2:	e351      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d150      	bne.n	800278c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	335c      	adds	r3, #92	; 0x5c
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d111      	bne.n	8002736 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	333d      	adds	r3, #61	; 0x3d
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2340      	movs	r3, #64	; 0x40
 8002734:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	0151      	lsls	r1, r2, #5
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	440a      	add	r2, r1
 800274c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f003 f918 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	461a      	mov	r2, r3
 8002774:	2301      	movs	r3, #1
 8002776:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3361      	adds	r3, #97	; 0x61
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
}
 800278a:	e2f5      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279e:	2b40      	cmp	r3, #64	; 0x40
 80027a0:	d13c      	bne.n	800281c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3361      	adds	r3, #97	; 0x61
 80027b0:	2204      	movs	r2, #4
 80027b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	333d      	adds	r3, #61	; 0x3d
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	335c      	adds	r3, #92	; 0x5c
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	0151      	lsls	r1, r2, #5
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	440a      	add	r2, r1
 80027ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027f2:	f043 0302 	orr.w	r3, r3, #2
 80027f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f003 f8c7 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	461a      	mov	r2, r3
 8002816:	2340      	movs	r3, #64	; 0x40
 8002818:	6093      	str	r3, [r2, #8]
}
 800281a:	e2ad      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b08      	cmp	r3, #8
 8002830:	d12a      	bne.n	8002888 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	461a      	mov	r2, r3
 8002840:	2308      	movs	r3, #8
 8002842:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	0151      	lsls	r1, r2, #5
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	440a      	add	r2, r1
 800285a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800285e:	f043 0302 	orr.w	r3, r3, #2
 8002862:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f003 f891 	bl	8005996 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	212c      	movs	r1, #44	; 0x2c
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	3361      	adds	r3, #97	; 0x61
 8002882:	2205      	movs	r2, #5
 8002884:	701a      	strb	r2, [r3, #0]
}
 8002886:	e277      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b10      	cmp	r3, #16
 800289c:	d150      	bne.n	8002940 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	335c      	adds	r3, #92	; 0x5c
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3361      	adds	r3, #97	; 0x61
 80028be:	2203      	movs	r2, #3
 80028c0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	333d      	adds	r3, #61	; 0x3d
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d112      	bne.n	80028fc <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	333c      	adds	r3, #60	; 0x3c
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d108      	bne.n	80028fc <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	333d      	adds	r3, #61	; 0x3d
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	0151      	lsls	r1, r2, #5
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	440a      	add	r2, r1
 8002912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002916:	f043 0302 	orr.w	r3, r3, #2
 800291a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f003 f835 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	461a      	mov	r2, r3
 800293a:	2310      	movs	r3, #16
 800293c:	6093      	str	r3, [r2, #8]
}
 800293e:	e21b      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	4413      	add	r3, r2
 8002948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b80      	cmp	r3, #128	; 0x80
 8002954:	d174      	bne.n	8002a40 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d121      	bne.n	80029a2 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3361      	adds	r3, #97	; 0x61
 800296c:	2206      	movs	r2, #6
 800296e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	0151      	lsls	r1, r2, #5
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	440a      	add	r2, r1
 8002986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800298a:	f043 0302 	orr.w	r3, r3, #2
 800298e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f002 fffb 	bl	8005996 <USB_HC_Halt>
 80029a0:	e044      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	335c      	adds	r3, #92	; 0x5c
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	202c      	movs	r0, #44	; 0x2c
 80029ba:	fb00 f303 	mul.w	r3, r0, r3
 80029be:	440b      	add	r3, r1
 80029c0:	335c      	adds	r3, #92	; 0x5c
 80029c2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	335c      	adds	r3, #92	; 0x5c
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d920      	bls.n	8002a1a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	335c      	adds	r3, #92	; 0x5c
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3360      	adds	r3, #96	; 0x60
 80029f8:	2204      	movs	r2, #4
 80029fa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	b2d9      	uxtb	r1, r3
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	202c      	movs	r0, #44	; 0x2c
 8002a06:	fb00 f303 	mul.w	r3, r0, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3360      	adds	r3, #96	; 0x60
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f008 fb72 	bl	800b0fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a18:	e008      	b.n	8002a2c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3360      	adds	r3, #96	; 0x60
 8002a28:	2202      	movs	r2, #2
 8002a2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	6093      	str	r3, [r2, #8]
}
 8002a3e:	e19b      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a56:	d134      	bne.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	0151      	lsls	r1, r2, #5
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	440a      	add	r2, r1
 8002a6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a72:	f043 0302 	orr.w	r3, r3, #2
 8002a76:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 ff87 	bl	8005996 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	461a      	mov	r2, r3
 8002a96:	2310      	movs	r3, #16
 8002a98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3361      	adds	r3, #97	; 0x61
 8002abc:	2208      	movs	r2, #8
 8002abe:	701a      	strb	r2, [r3, #0]
}
 8002ac0:	e15a      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	f040 814f 	bne.w	8002d78 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	0151      	lsls	r1, r2, #5
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	440a      	add	r2, r1
 8002af0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af4:	f023 0302 	bic.w	r3, r3, #2
 8002af8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3361      	adds	r3, #97	; 0x61
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d17d      	bne.n	8002c0a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3360      	adds	r3, #96	; 0x60
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	333f      	adds	r3, #63	; 0x3f
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d00a      	beq.n	8002b4a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	333f      	adds	r3, #63	; 0x3f
 8002b42:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	f040 8100 	bne.w	8002d4a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d113      	bne.n	8002b7a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3355      	adds	r3, #85	; 0x55
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	f083 0301 	eor.w	r3, r3, #1
 8002b66:	b2d8      	uxtb	r0, r3
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3355      	adds	r3, #85	; 0x55
 8002b76:	4602      	mov	r2, r0
 8002b78:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	f040 80e3 	bne.w	8002d4a <HCD_HC_OUT_IRQHandler+0x7cc>
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	334c      	adds	r3, #76	; 0x4c
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80d8 	beq.w	8002d4a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	334c      	adds	r3, #76	; 0x4c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	202c      	movs	r0, #44	; 0x2c
 8002bb0:	fb00 f202 	mul.w	r2, r0, r2
 8002bb4:	440a      	add	r2, r1
 8002bb6:	3240      	adds	r2, #64	; 0x40
 8002bb8:	8812      	ldrh	r2, [r2, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	202c      	movs	r0, #44	; 0x2c
 8002bc4:	fb00 f202 	mul.w	r2, r0, r2
 8002bc8:	440a      	add	r2, r1
 8002bca:	3240      	adds	r2, #64	; 0x40
 8002bcc:	8812      	ldrh	r2, [r2, #0]
 8002bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80b5 	beq.w	8002d4a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3355      	adds	r3, #85	; 0x55
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	f083 0301 	eor.w	r3, r3, #1
 8002bf4:	b2d8      	uxtb	r0, r3
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3355      	adds	r3, #85	; 0x55
 8002c04:	4602      	mov	r2, r0
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e09f      	b.n	8002d4a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3361      	adds	r3, #97	; 0x61
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d109      	bne.n	8002c32 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	3360      	adds	r3, #96	; 0x60
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e08b      	b.n	8002d4a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3361      	adds	r3, #97	; 0x61
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d109      	bne.n	8002c5a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3360      	adds	r3, #96	; 0x60
 8002c54:	2202      	movs	r2, #2
 8002c56:	701a      	strb	r2, [r3, #0]
 8002c58:	e077      	b.n	8002d4a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3361      	adds	r3, #97	; 0x61
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b05      	cmp	r3, #5
 8002c6c:	d109      	bne.n	8002c82 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3360      	adds	r3, #96	; 0x60
 8002c7c:	2205      	movs	r2, #5
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e063      	b.n	8002d4a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3361      	adds	r3, #97	; 0x61
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d009      	beq.n	8002caa <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3361      	adds	r3, #97	; 0x61
 8002ca4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d14f      	bne.n	8002d4a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	335c      	adds	r3, #92	; 0x5c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	202c      	movs	r0, #44	; 0x2c
 8002cc2:	fb00 f303 	mul.w	r3, r0, r3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	335c      	adds	r3, #92	; 0x5c
 8002cca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	335c      	adds	r3, #92	; 0x5c
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d912      	bls.n	8002d06 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	335c      	adds	r3, #92	; 0x5c
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3360      	adds	r3, #96	; 0x60
 8002d00:	2204      	movs	r2, #4
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e021      	b.n	8002d4a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3360      	adds	r3, #96	; 0x60
 8002d14:	2202      	movs	r2, #2
 8002d16:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d2e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d36:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	461a      	mov	r2, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d56:	461a      	mov	r2, r3
 8002d58:	2302      	movs	r3, #2
 8002d5a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	b2d9      	uxtb	r1, r3
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	202c      	movs	r0, #44	; 0x2c
 8002d66:	fb00 f303 	mul.w	r3, r0, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3360      	adds	r3, #96	; 0x60
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f008 f9c2 	bl	800b0fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d78:	bf00      	nop
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	0c5b      	lsrs	r3, r3, #17
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002db4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d004      	beq.n	8002dc6 <HCD_RXQLVL_IRQHandler+0x46>
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	f000 80a9 	beq.w	8002f16 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002dc4:	e0aa      	b.n	8002f1c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80a6 	beq.w	8002f1a <HCD_RXQLVL_IRQHandler+0x19a>
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3344      	adds	r3, #68	; 0x44
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 809b 	beq.w	8002f1a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3350      	adds	r3, #80	; 0x50
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	441a      	add	r2, r3
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	202c      	movs	r0, #44	; 0x2c
 8002dfe:	fb00 f303 	mul.w	r3, r0, r3
 8002e02:	440b      	add	r3, r1
 8002e04:	334c      	adds	r3, #76	; 0x4c
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d87a      	bhi.n	8002f02 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3344      	adds	r3, #68	; 0x44
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	b292      	uxth	r2, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f002 f92f 	bl	8005088 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3344      	adds	r3, #68	; 0x44
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	441a      	add	r2, r3
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	202c      	movs	r0, #44	; 0x2c
 8002e44:	fb00 f303 	mul.w	r3, r0, r3
 8002e48:	440b      	add	r3, r1
 8002e4a:	3344      	adds	r3, #68	; 0x44
 8002e4c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	3350      	adds	r3, #80	; 0x50
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	441a      	add	r2, r3
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	202c      	movs	r0, #44	; 0x2c
 8002e68:	fb00 f303 	mul.w	r3, r0, r3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3350      	adds	r3, #80	; 0x50
 8002e70:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	0cdb      	lsrs	r3, r3, #19
 8002e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e86:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	3340      	adds	r3, #64	; 0x40
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d13c      	bne.n	8002f1a <HCD_RXQLVL_IRQHandler+0x19a>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d039      	beq.n	8002f1a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ebc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ec4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3354      	adds	r3, #84	; 0x54
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	f083 0301 	eor.w	r3, r3, #1
 8002eec:	b2d8      	uxtb	r0, r3
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	212c      	movs	r1, #44	; 0x2c
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	4413      	add	r3, r2
 8002efa:	3354      	adds	r3, #84	; 0x54
 8002efc:	4602      	mov	r2, r0
 8002efe:	701a      	strb	r2, [r3, #0]
      break;
 8002f00:	e00b      	b.n	8002f1a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3360      	adds	r3, #96	; 0x60
 8002f10:	2204      	movs	r2, #4
 8002f12:	701a      	strb	r2, [r3, #0]
      break;
 8002f14:	e001      	b.n	8002f1a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f16:	bf00      	nop
 8002f18:	e000      	b.n	8002f1c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f1a:	bf00      	nop
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	3728      	adds	r7, #40	; 0x28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f50:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d10b      	bne.n	8002f74 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d102      	bne.n	8002f6c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f008 f8ac 	bl	800b0c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f043 0302 	orr.w	r3, r3, #2
 8002f72:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d132      	bne.n	8002fe4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d126      	bne.n	8002fde <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d113      	bne.n	8002fc0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fa2:	d106      	bne.n	8002fb2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2102      	movs	r1, #2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f002 f9cc 	bl	8005348 <USB_InitFSLSPClkSel>
 8002fb0:	e011      	b.n	8002fd6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f002 f9c5 	bl	8005348 <USB_InitFSLSPClkSel>
 8002fbe:	e00a      	b.n	8002fd6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d106      	bne.n	8002fd6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fd4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f008 f8a2 	bl	800b120 <HAL_HCD_PortEnabled_Callback>
 8002fdc:	e002      	b.n	8002fe4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f008 f8ac 	bl	800b13c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d103      	bne.n	8002ff6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f043 0320 	orr.w	r3, r3, #32
 8002ff4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6013      	str	r3, [r2, #0]
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e12b      	b.n	8003276 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fd5e 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	; 0x24
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800305e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800306e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003070:	f001 f9fc 	bl	800446c <HAL_RCC_GetPCLK1Freq>
 8003074:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a81      	ldr	r2, [pc, #516]	; (8003280 <HAL_I2C_Init+0x274>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d807      	bhi.n	8003090 <HAL_I2C_Init+0x84>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a80      	ldr	r2, [pc, #512]	; (8003284 <HAL_I2C_Init+0x278>)
 8003084:	4293      	cmp	r3, r2
 8003086:	bf94      	ite	ls
 8003088:	2301      	movls	r3, #1
 800308a:	2300      	movhi	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e006      	b.n	800309e <HAL_I2C_Init+0x92>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a7d      	ldr	r2, [pc, #500]	; (8003288 <HAL_I2C_Init+0x27c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	bf94      	ite	ls
 8003098:	2301      	movls	r3, #1
 800309a:	2300      	movhi	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e0e7      	b.n	8003276 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4a78      	ldr	r2, [pc, #480]	; (800328c <HAL_I2C_Init+0x280>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	0c9b      	lsrs	r3, r3, #18
 80030b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a6a      	ldr	r2, [pc, #424]	; (8003280 <HAL_I2C_Init+0x274>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d802      	bhi.n	80030e0 <HAL_I2C_Init+0xd4>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3301      	adds	r3, #1
 80030de:	e009      	b.n	80030f4 <HAL_I2C_Init+0xe8>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030e6:	fb02 f303 	mul.w	r3, r2, r3
 80030ea:	4a69      	ldr	r2, [pc, #420]	; (8003290 <HAL_I2C_Init+0x284>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	3301      	adds	r3, #1
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003106:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	495c      	ldr	r1, [pc, #368]	; (8003280 <HAL_I2C_Init+0x274>)
 8003110:	428b      	cmp	r3, r1
 8003112:	d819      	bhi.n	8003148 <HAL_I2C_Init+0x13c>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e59      	subs	r1, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003122:	1c59      	adds	r1, r3, #1
 8003124:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003128:	400b      	ands	r3, r1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_I2C_Init+0x138>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e59      	subs	r1, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fbb1 f3f3 	udiv	r3, r1, r3
 800313c:	3301      	adds	r3, #1
 800313e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003142:	e051      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 8003144:	2304      	movs	r3, #4
 8003146:	e04f      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d111      	bne.n	8003174 <HAL_I2C_Init+0x168>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1e58      	subs	r0, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e012      	b.n	800319a <HAL_I2C_Init+0x18e>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e58      	subs	r0, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	0099      	lsls	r1, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	fbb0 f3f3 	udiv	r3, r0, r3
 800318a:	3301      	adds	r3, #1
 800318c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Init+0x196>
 800319e:	2301      	movs	r3, #1
 80031a0:	e022      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10e      	bne.n	80031c8 <HAL_I2C_Init+0x1bc>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1e58      	subs	r0, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	460b      	mov	r3, r1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	440b      	add	r3, r1
 80031b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c6:	e00f      	b.n	80031e8 <HAL_I2C_Init+0x1dc>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e58      	subs	r0, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	0099      	lsls	r1, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	fbb0 f3f3 	udiv	r3, r0, r3
 80031de:	3301      	adds	r3, #1
 80031e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	6809      	ldr	r1, [r1, #0]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6911      	ldr	r1, [r2, #16]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68d2      	ldr	r2, [r2, #12]
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	430b      	orrs	r3, r1
 800322a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	000186a0 	.word	0x000186a0
 8003284:	001e847f 	.word	0x001e847f
 8003288:	003d08ff 	.word	0x003d08ff
 800328c:	431bde83 	.word	0x431bde83
 8003290:	10624dd3 	.word	0x10624dd3

08003294 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e128      	b.n	80034f8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a90      	ldr	r2, [pc, #576]	; (8003500 <HAL_I2S_Init+0x26c>)
 80032be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fd fc5f 	bl	8000b84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032dc:	f023 030f 	bic.w	r3, r3, #15
 80032e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2202      	movs	r2, #2
 80032e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d060      	beq.n	80033b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032fa:	2310      	movs	r3, #16
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	e001      	b.n	8003304 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003300:	2320      	movs	r3, #32
 8003302:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b20      	cmp	r3, #32
 800330a:	d802      	bhi.n	8003312 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003312:	2001      	movs	r0, #1
 8003314:	f001 f9d2 	bl	80046bc <HAL_RCCEx_GetPeriphCLKFreq>
 8003318:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003322:	d125      	bne.n	8003370 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d010      	beq.n	800334e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	fbb2 f2f3 	udiv	r2, r2, r3
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	3305      	adds	r3, #5
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	e01f      	b.n	800338e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	fbb2 f2f3 	udiv	r2, r2, r3
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	461a      	mov	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	3305      	adds	r3, #5
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	e00e      	b.n	800338e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	fbb2 f2f3 	udiv	r2, r2, r3
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	461a      	mov	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	fbb2 f3f3 	udiv	r3, r2, r3
 800338a:	3305      	adds	r3, #5
 800338c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4a5c      	ldr	r2, [pc, #368]	; (8003504 <HAL_I2S_Init+0x270>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	08db      	lsrs	r3, r3, #3
 8003398:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	e003      	b.n	80033bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033b4:	2302      	movs	r3, #2
 80033b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d902      	bls.n	80033c8 <HAL_I2S_Init+0x134>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2bff      	cmp	r3, #255	; 0xff
 80033c6:	d907      	bls.n	80033d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	f043 0210 	orr.w	r2, r3, #16
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e08f      	b.n	80034f8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	ea42 0103 	orr.w	r1, r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033f6:	f023 030f 	bic.w	r3, r3, #15
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6851      	ldr	r1, [r2, #4]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6892      	ldr	r2, [r2, #8]
 8003402:	4311      	orrs	r1, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	68d2      	ldr	r2, [r2, #12]
 8003408:	4311      	orrs	r1, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6992      	ldr	r2, [r2, #24]
 800340e:	430a      	orrs	r2, r1
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d161      	bne.n	80034e8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a38      	ldr	r2, [pc, #224]	; (8003508 <HAL_I2S_Init+0x274>)
 8003428:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a37      	ldr	r2, [pc, #220]	; (800350c <HAL_I2S_Init+0x278>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <HAL_I2S_Init+0x1a4>
 8003434:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_I2S_Init+0x27c>)
 8003436:	e001      	b.n	800343c <HAL_I2S_Init+0x1a8>
 8003438:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	4932      	ldr	r1, [pc, #200]	; (800350c <HAL_I2S_Init+0x278>)
 8003444:	428a      	cmp	r2, r1
 8003446:	d101      	bne.n	800344c <HAL_I2S_Init+0x1b8>
 8003448:	4a31      	ldr	r2, [pc, #196]	; (8003510 <HAL_I2S_Init+0x27c>)
 800344a:	e001      	b.n	8003450 <HAL_I2S_Init+0x1bc>
 800344c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003450:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003454:	f023 030f 	bic.w	r3, r3, #15
 8003458:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a2b      	ldr	r2, [pc, #172]	; (800350c <HAL_I2S_Init+0x278>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d101      	bne.n	8003468 <HAL_I2S_Init+0x1d4>
 8003464:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <HAL_I2S_Init+0x27c>)
 8003466:	e001      	b.n	800346c <HAL_I2S_Init+0x1d8>
 8003468:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800346c:	2202      	movs	r2, #2
 800346e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a25      	ldr	r2, [pc, #148]	; (800350c <HAL_I2S_Init+0x278>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <HAL_I2S_Init+0x1ea>
 800347a:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_I2S_Init+0x27c>)
 800347c:	e001      	b.n	8003482 <HAL_I2S_Init+0x1ee>
 800347e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348e:	d003      	beq.n	8003498 <HAL_I2S_Init+0x204>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d103      	bne.n	80034a0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	e001      	b.n	80034a4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034ae:	4313      	orrs	r3, r2
 80034b0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034c2:	4313      	orrs	r3, r2
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	897b      	ldrh	r3, [r7, #10]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034d0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a0d      	ldr	r2, [pc, #52]	; (800350c <HAL_I2S_Init+0x278>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d101      	bne.n	80034e0 <HAL_I2S_Init+0x24c>
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_I2S_Init+0x27c>)
 80034de:	e001      	b.n	80034e4 <HAL_I2S_Init+0x250>
 80034e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e4:	897a      	ldrh	r2, [r7, #10]
 80034e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	0800360b 	.word	0x0800360b
 8003504:	cccccccd 	.word	0xcccccccd
 8003508:	08003721 	.word	0x08003721
 800350c:	40003800 	.word	0x40003800
 8003510:	40003400 	.word	0x40003400

08003514 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c9a      	adds	r2, r3, #2
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10e      	bne.n	80035a4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003594:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ffb8 	bl	8003514 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	b292      	uxth	r2, r2
 80035c0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	1c9a      	adds	r2, r3, #2
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10e      	bne.n	8003602 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff93 	bl	8003528 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b04      	cmp	r3, #4
 8003624:	d13a      	bne.n	800369c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d109      	bne.n	8003644 <I2S_IRQHandler+0x3a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d102      	bne.n	8003644 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ffb4 	bl	80035ac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b40      	cmp	r3, #64	; 0x40
 800364c:	d126      	bne.n	800369c <I2S_IRQHandler+0x92>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b20      	cmp	r3, #32
 800365a:	d11f      	bne.n	800369c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800366a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ff50 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d136      	bne.n	8003716 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d109      	bne.n	80036c6 <I2S_IRQHandler+0xbc>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	2b80      	cmp	r3, #128	; 0x80
 80036be:	d102      	bne.n	80036c6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff ff45 	bl	8003550 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d122      	bne.n	8003716 <I2S_IRQHandler+0x10c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d11b      	bne.n	8003716 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	f043 0204 	orr.w	r2, r3, #4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff13 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003716:	bf00      	nop
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4aa2      	ldr	r2, [pc, #648]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800373a:	4ba2      	ldr	r3, [pc, #648]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800373c:	e001      	b.n	8003742 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800373e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a9b      	ldr	r2, [pc, #620]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d101      	bne.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003758:	4b9a      	ldr	r3, [pc, #616]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800375a:	e001      	b.n	8003760 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800375c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376c:	d004      	beq.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f040 8099 	bne.w	80038aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d107      	bne.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f925 	bl	80039dc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b01      	cmp	r3, #1
 800379a:	d107      	bne.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f9c8 	bl	8003b3c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d13a      	bne.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d035      	beq.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a7e      	ldr	r2, [pc, #504]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d101      	bne.n	80037ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037ca:	4b7e      	ldr	r3, [pc, #504]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037cc:	e001      	b.n	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4979      	ldr	r1, [pc, #484]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037da:	428b      	cmp	r3, r1
 80037dc:	d101      	bne.n	80037e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80037de:	4b79      	ldr	r3, [pc, #484]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037e0:	e001      	b.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80037e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f043 0202 	orr.w	r2, r3, #2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff fe88 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b08      	cmp	r3, #8
 8003834:	f040 80be 	bne.w	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80b8 	beq.w	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003852:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a59      	ldr	r2, [pc, #356]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800385e:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003860:	e001      	b.n	8003866 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003862:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4954      	ldr	r1, [pc, #336]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800386e:	428b      	cmp	r3, r1
 8003870:	d101      	bne.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003872:	4b54      	ldr	r3, [pc, #336]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003874:	e001      	b.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800387e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003880:	2300      	movs	r3, #0
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f043 0204 	orr.w	r2, r3, #4
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fe4a 	bl	800353c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038a8:	e084      	b.n	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d107      	bne.n	80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8be 	bl	8003a40 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d107      	bne.n	80038de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f8fd 	bl	8003ad8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d12f      	bne.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d02a      	beq.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003900:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2e      	ldr	r2, [pc, #184]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800390c:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800390e:	e001      	b.n	8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4929      	ldr	r1, [pc, #164]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800391c:	428b      	cmp	r3, r1
 800391e:	d101      	bne.n	8003924 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003920:	4b28      	ldr	r3, [pc, #160]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003922:	e001      	b.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003928:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800392c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f043 0202 	orr.w	r2, r3, #2
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fdfa 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b08      	cmp	r3, #8
 8003950:	d131      	bne.n	80039b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d02c      	beq.n	80039b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a17      	ldr	r2, [pc, #92]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d101      	bne.n	800396a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003966:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003968:	e001      	b.n	800396e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800396a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4912      	ldr	r1, [pc, #72]	; (80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003976:	428b      	cmp	r3, r1
 8003978:	d101      	bne.n	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800397c:	e001      	b.n	8003982 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800397e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003982:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003986:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003996:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fdc5 	bl	800353c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039b2:	e000      	b.n	80039b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039b4:	bf00      	nop
}
 80039b6:	bf00      	nop
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40003800 	.word	0x40003800
 80039c4:	40003400 	.word	0x40003400

080039c8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	1c99      	adds	r1, r3, #2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6251      	str	r1, [r2, #36]	; 0x24
 80039ee:	881a      	ldrh	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d113      	bne.n	8003a36 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ffc9 	bl	80039c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c99      	adds	r1, r3, #2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6251      	str	r1, [r2, #36]	; 0x24
 8003a52:	8819      	ldrh	r1, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <I2SEx_TxISR_I2SExt+0x22>
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a60:	e001      	b.n	8003a66 <I2SEx_TxISR_I2SExt+0x26>
 8003a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a66:	460a      	mov	r2, r1
 8003a68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d121      	bne.n	8003ac6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a12      	ldr	r2, [pc, #72]	; (8003ad0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <I2SEx_TxISR_I2SExt+0x50>
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <I2SEx_TxISR_I2SExt+0x94>)
 8003a8e:	e001      	b.n	8003a94 <I2SEx_TxISR_I2SExt+0x54>
 8003a90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	490d      	ldr	r1, [pc, #52]	; (8003ad0 <I2SEx_TxISR_I2SExt+0x90>)
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	d101      	bne.n	8003aa4 <I2SEx_TxISR_I2SExt+0x64>
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <I2SEx_TxISR_I2SExt+0x94>)
 8003aa2:	e001      	b.n	8003aa8 <I2SEx_TxISR_I2SExt+0x68>
 8003aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d106      	bne.n	8003ac6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff ff81 	bl	80039c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40003800 	.word	0x40003800
 8003ad4:	40003400 	.word	0x40003400

08003ad8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68d8      	ldr	r0, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	1c99      	adds	r1, r3, #2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003af0:	b282      	uxth	r2, r0
 8003af2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d113      	bne.n	8003b34 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b1a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff ff4a 	bl	80039c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a20      	ldr	r2, [pc, #128]	; (8003bcc <I2SEx_RxISR_I2SExt+0x90>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <I2SEx_RxISR_I2SExt+0x16>
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b50:	e001      	b.n	8003b56 <I2SEx_RxISR_I2SExt+0x1a>
 8003b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b56:	68d8      	ldr	r0, [r3, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	1c99      	adds	r1, r3, #2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b62:	b282      	uxth	r2, r0
 8003b64:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d121      	bne.n	8003bc2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <I2SEx_RxISR_I2SExt+0x90>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d101      	bne.n	8003b8c <I2SEx_RxISR_I2SExt+0x50>
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b8a:	e001      	b.n	8003b90 <I2SEx_RxISR_I2SExt+0x54>
 8003b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	490d      	ldr	r1, [pc, #52]	; (8003bcc <I2SEx_RxISR_I2SExt+0x90>)
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	d101      	bne.n	8003ba0 <I2SEx_RxISR_I2SExt+0x64>
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <I2SEx_RxISR_I2SExt+0x94>)
 8003b9e:	e001      	b.n	8003ba4 <I2SEx_RxISR_I2SExt+0x68>
 8003ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ba8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ff03 	bl	80039c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40003800 	.word	0x40003800
 8003bd0:	40003400 	.word	0x40003400

08003bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e264      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d075      	beq.n	8003cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bf2:	4ba3      	ldr	r3, [pc, #652]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d00c      	beq.n	8003c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfe:	4ba0      	ldr	r3, [pc, #640]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d112      	bne.n	8003c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0a:	4b9d      	ldr	r3, [pc, #628]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c16:	d10b      	bne.n	8003c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	4b99      	ldr	r3, [pc, #612]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d05b      	beq.n	8003cdc <HAL_RCC_OscConfig+0x108>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d157      	bne.n	8003cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e23f      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d106      	bne.n	8003c48 <HAL_RCC_OscConfig+0x74>
 8003c3a:	4b91      	ldr	r3, [pc, #580]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a90      	ldr	r2, [pc, #576]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e01d      	b.n	8003c84 <HAL_RCC_OscConfig+0xb0>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x98>
 8003c52:	4b8b      	ldr	r3, [pc, #556]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a8a      	ldr	r2, [pc, #552]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a87      	ldr	r2, [pc, #540]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0xb0>
 8003c6c:	4b84      	ldr	r3, [pc, #528]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a83      	ldr	r2, [pc, #524]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	4b81      	ldr	r3, [pc, #516]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a80      	ldr	r2, [pc, #512]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d013      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7fd f96e 	bl	8000f6c <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fd f96a 	bl	8000f6c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e204      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	4b76      	ldr	r3, [pc, #472]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0xc0>
 8003cb2:	e014      	b.n	8003cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd f95a 	bl	8000f6c <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cbc:	f7fd f956 	bl	8000f6c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e1f0      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cce:	4b6c      	ldr	r3, [pc, #432]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0xe8>
 8003cda:	e000      	b.n	8003cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d063      	beq.n	8003db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cea:	4b65      	ldr	r3, [pc, #404]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf6:	4b62      	ldr	r3, [pc, #392]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d11c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d02:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d116      	bne.n	8003d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0e:	4b5c      	ldr	r3, [pc, #368]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_RCC_OscConfig+0x152>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d001      	beq.n	8003d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e1c4      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	4b56      	ldr	r3, [pc, #344]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4952      	ldr	r1, [pc, #328]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3a:	e03a      	b.n	8003db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d020      	beq.n	8003d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d44:	4b4f      	ldr	r3, [pc, #316]	; (8003e84 <HAL_RCC_OscConfig+0x2b0>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fd f90f 	bl	8000f6c <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fd f90b 	bl	8000f6c <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e1a5      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d64:	4b46      	ldr	r3, [pc, #280]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d70:	4b43      	ldr	r3, [pc, #268]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4940      	ldr	r1, [pc, #256]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]
 8003d84:	e015      	b.n	8003db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d86:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <HAL_RCC_OscConfig+0x2b0>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fd f8ee 	bl	8000f6c <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d94:	f7fd f8ea 	bl	8000f6c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e184      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da6:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d030      	beq.n	8003e20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d016      	beq.n	8003df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc6:	4b30      	ldr	r3, [pc, #192]	; (8003e88 <HAL_RCC_OscConfig+0x2b4>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dcc:	f7fd f8ce 	bl	8000f6c <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd4:	f7fd f8ca 	bl	8000f6c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e164      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de6:	4b26      	ldr	r3, [pc, #152]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x200>
 8003df2:	e015      	b.n	8003e20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df4:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <HAL_RCC_OscConfig+0x2b4>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfa:	f7fd f8b7 	bl	8000f6c <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e02:	f7fd f8b3 	bl	8000f6c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e14d      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80a0 	beq.w	8003f6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a0e      	ldr	r2, [pc, #56]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCC_OscConfig+0x2b8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d121      	bne.n	8003eae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <HAL_RCC_OscConfig+0x2b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <HAL_RCC_OscConfig+0x2b8>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7fd f879 	bl	8000f6c <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	e011      	b.n	8003ea2 <HAL_RCC_OscConfig+0x2ce>
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	42470000 	.word	0x42470000
 8003e88:	42470e80 	.word	0x42470e80
 8003e8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e90:	f7fd f86c 	bl	8000f6c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e106      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea2:	4b85      	ldr	r3, [pc, #532]	; (80040b8 <HAL_RCC_OscConfig+0x4e4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x2f0>
 8003eb6:	4b81      	ldr	r3, [pc, #516]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a80      	ldr	r2, [pc, #512]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec2:	e01c      	b.n	8003efe <HAL_RCC_OscConfig+0x32a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	d10c      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x312>
 8003ecc:	4b7b      	ldr	r3, [pc, #492]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	4a7a      	ldr	r2, [pc, #488]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ed2:	f043 0304 	orr.w	r3, r3, #4
 8003ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed8:	4b78      	ldr	r3, [pc, #480]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	4a77      	ldr	r2, [pc, #476]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee4:	e00b      	b.n	8003efe <HAL_RCC_OscConfig+0x32a>
 8003ee6:	4b75      	ldr	r3, [pc, #468]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a74      	ldr	r2, [pc, #464]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef2:	4b72      	ldr	r3, [pc, #456]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	4a71      	ldr	r2, [pc, #452]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003ef8:	f023 0304 	bic.w	r3, r3, #4
 8003efc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d015      	beq.n	8003f32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f06:	f7fd f831 	bl	8000f6c <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fd f82d 	bl	8000f6c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0c5      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f24:	4b65      	ldr	r3, [pc, #404]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0ee      	beq.n	8003f0e <HAL_RCC_OscConfig+0x33a>
 8003f30:	e014      	b.n	8003f5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f32:	f7fd f81b 	bl	8000f6c <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f38:	e00a      	b.n	8003f50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f3a:	f7fd f817 	bl	8000f6c <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e0af      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f50:	4b5a      	ldr	r3, [pc, #360]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1ee      	bne.n	8003f3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d105      	bne.n	8003f6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f62:	4b56      	ldr	r3, [pc, #344]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	4a55      	ldr	r2, [pc, #340]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 809b 	beq.w	80040ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d05c      	beq.n	800403e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d141      	bne.n	8004010 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8c:	4b4c      	ldr	r3, [pc, #304]	; (80040c0 <HAL_RCC_OscConfig+0x4ec>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fc ffeb 	bl	8000f6c <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fc ffe7 	bl	8000f6c <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e081      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fac:	4b43      	ldr	r3, [pc, #268]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	019b      	lsls	r3, r3, #6
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	041b      	lsls	r3, r3, #16
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	061b      	lsls	r3, r3, #24
 8003fdc:	4937      	ldr	r1, [pc, #220]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe2:	4b37      	ldr	r3, [pc, #220]	; (80040c0 <HAL_RCC_OscConfig+0x4ec>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fc ffc0 	bl	8000f6c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fc ffbc 	bl	8000f6c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e056      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	4b2e      	ldr	r3, [pc, #184]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x41c>
 800400e:	e04e      	b.n	80040ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004010:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <HAL_RCC_OscConfig+0x4ec>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004016:	f7fc ffa9 	bl	8000f6c <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401e:	f7fc ffa5 	bl	8000f6c <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e03f      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004030:	4b22      	ldr	r3, [pc, #136]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x44a>
 800403c:	e037      	b.n	80040ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e032      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <HAL_RCC_OscConfig+0x4e8>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d028      	beq.n	80040aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d121      	bne.n	80040aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d11a      	bne.n	80040aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800407a:	4013      	ands	r3, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004080:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004082:	4293      	cmp	r3, r2
 8004084:	d111      	bne.n	80040aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	3b01      	subs	r3, #1
 8004094:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d107      	bne.n	80040aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40007000 	.word	0x40007000
 80040bc:	40023800 	.word	0x40023800
 80040c0:	42470060 	.word	0x42470060

080040c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0cc      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d8:	4b68      	ldr	r3, [pc, #416]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d90c      	bls.n	8004100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b65      	ldr	r3, [pc, #404]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b63      	ldr	r3, [pc, #396]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0b8      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004118:	4b59      	ldr	r3, [pc, #356]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a58      	ldr	r2, [pc, #352]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004130:	4b53      	ldr	r3, [pc, #332]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a52      	ldr	r2, [pc, #328]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800413a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413c:	4b50      	ldr	r3, [pc, #320]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	494d      	ldr	r1, [pc, #308]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d044      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b47      	ldr	r3, [pc, #284]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d119      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e07f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d003      	beq.n	8004182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417e:	2b03      	cmp	r3, #3
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004182:	4b3f      	ldr	r3, [pc, #252]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e06f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004192:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e067      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a2:	4b37      	ldr	r3, [pc, #220]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f023 0203 	bic.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4934      	ldr	r1, [pc, #208]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b4:	f7fc feda 	bl	8000f6c <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041bc:	f7fc fed6 	bl	8000f6c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e04f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d2:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 020c 	and.w	r2, r3, #12
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d1eb      	bne.n	80041bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d20c      	bcs.n	800420c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b22      	ldr	r3, [pc, #136]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e032      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4916      	ldr	r1, [pc, #88]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	490e      	ldr	r1, [pc, #56]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800424a:	f000 f821 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800424e:	4602      	mov	r2, r0
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	490a      	ldr	r1, [pc, #40]	; (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	5ccb      	ldrb	r3, [r1, r3]
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	4a09      	ldr	r2, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1c8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fc fd52 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40023c00 	.word	0x40023c00
 8004280:	40023800 	.word	0x40023800
 8004284:	0800b934 	.word	0x0800b934
 8004288:	20000000 	.word	0x20000000
 800428c:	20000004 	.word	0x20000004

08004290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	2300      	movs	r3, #0
 80042a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a8:	4b67      	ldr	r3, [pc, #412]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 030c 	and.w	r3, r3, #12
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d00d      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x40>
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	f200 80bd 	bhi.w	8004434 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x34>
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x3a>
 80042c2:	e0b7      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c4:	4b61      	ldr	r3, [pc, #388]	; (800444c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042c6:	60bb      	str	r3, [r7, #8]
       break;
 80042c8:	e0b7      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ca:	4b61      	ldr	r3, [pc, #388]	; (8004450 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042cc:	60bb      	str	r3, [r7, #8]
      break;
 80042ce:	e0b4      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d0:	4b5d      	ldr	r3, [pc, #372]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042da:	4b5b      	ldr	r3, [pc, #364]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d04d      	beq.n	8004382 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e6:	4b58      	ldr	r3, [pc, #352]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	099b      	lsrs	r3, r3, #6
 80042ec:	461a      	mov	r2, r3
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	ea02 0800 	and.w	r8, r2, r0
 80042fe:	ea03 0901 	and.w	r9, r3, r1
 8004302:	4640      	mov	r0, r8
 8004304:	4649      	mov	r1, r9
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	014b      	lsls	r3, r1, #5
 8004310:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004314:	0142      	lsls	r2, r0, #5
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	ebb0 0008 	subs.w	r0, r0, r8
 800431e:	eb61 0109 	sbc.w	r1, r1, r9
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	018b      	lsls	r3, r1, #6
 800432c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004330:	0182      	lsls	r2, r0, #6
 8004332:	1a12      	subs	r2, r2, r0
 8004334:	eb63 0301 	sbc.w	r3, r3, r1
 8004338:	f04f 0000 	mov.w	r0, #0
 800433c:	f04f 0100 	mov.w	r1, #0
 8004340:	00d9      	lsls	r1, r3, #3
 8004342:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004346:	00d0      	lsls	r0, r2, #3
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	eb12 0208 	adds.w	r2, r2, r8
 8004350:	eb43 0309 	adc.w	r3, r3, r9
 8004354:	f04f 0000 	mov.w	r0, #0
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	0259      	lsls	r1, r3, #9
 800435e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004362:	0250      	lsls	r0, r2, #9
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	461a      	mov	r2, r3
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	f7fb ff2c 	bl	80001d0 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4613      	mov	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e04a      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004382:	4b31      	ldr	r3, [pc, #196]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	099b      	lsrs	r3, r3, #6
 8004388:	461a      	mov	r2, r3
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	ea02 0400 	and.w	r4, r2, r0
 800439a:	ea03 0501 	and.w	r5, r3, r1
 800439e:	4620      	mov	r0, r4
 80043a0:	4629      	mov	r1, r5
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	014b      	lsls	r3, r1, #5
 80043ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043b0:	0142      	lsls	r2, r0, #5
 80043b2:	4610      	mov	r0, r2
 80043b4:	4619      	mov	r1, r3
 80043b6:	1b00      	subs	r0, r0, r4
 80043b8:	eb61 0105 	sbc.w	r1, r1, r5
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	018b      	lsls	r3, r1, #6
 80043c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043ca:	0182      	lsls	r2, r0, #6
 80043cc:	1a12      	subs	r2, r2, r0
 80043ce:	eb63 0301 	sbc.w	r3, r3, r1
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f04f 0100 	mov.w	r1, #0
 80043da:	00d9      	lsls	r1, r3, #3
 80043dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043e0:	00d0      	lsls	r0, r2, #3
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	1912      	adds	r2, r2, r4
 80043e8:	eb45 0303 	adc.w	r3, r5, r3
 80043ec:	f04f 0000 	mov.w	r0, #0
 80043f0:	f04f 0100 	mov.w	r1, #0
 80043f4:	0299      	lsls	r1, r3, #10
 80043f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043fa:	0290      	lsls	r0, r2, #10
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	461a      	mov	r2, r3
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	f7fb fee0 	bl	80001d0 <__aeabi_uldivmod>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4613      	mov	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	3301      	adds	r3, #1
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004430:	60bb      	str	r3, [r7, #8]
      break;
 8004432:	e002      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004436:	60bb      	str	r3, [r7, #8]
      break;
 8004438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800443a:	68bb      	ldr	r3, [r7, #8]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
 800444c:	00f42400 	.word	0x00f42400
 8004450:	007a1200 	.word	0x007a1200

08004454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HAL_RCC_GetHCLKFreq+0x14>)
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000000 	.word	0x20000000

0800446c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004470:	f7ff fff0 	bl	8004454 <HAL_RCC_GetHCLKFreq>
 8004474:	4602      	mov	r2, r0
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	0a9b      	lsrs	r3, r3, #10
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	4903      	ldr	r1, [pc, #12]	; (8004490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004482:	5ccb      	ldrb	r3, [r1, r3]
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004488:	4618      	mov	r0, r3
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40023800 	.word	0x40023800
 8004490:	0800b944 	.word	0x0800b944

08004494 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	220f      	movs	r2, #15
 80044a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_RCC_GetClockConfig+0x5c>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0203 	and.w	r2, r3, #3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044b0:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <HAL_RCC_GetClockConfig+0x5c>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <HAL_RCC_GetClockConfig+0x5c>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <HAL_RCC_GetClockConfig+0x5c>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	08db      	lsrs	r3, r3, #3
 80044ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <HAL_RCC_GetClockConfig+0x60>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0207 	and.w	r2, r3, #7
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	601a      	str	r2, [r3, #0]
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40023c00 	.word	0x40023c00

080044f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d105      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800451c:	2b00      	cmp	r3, #0
 800451e:	d035      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004520:	4b62      	ldr	r3, [pc, #392]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004526:	f7fc fd21 	bl	8000f6c <HAL_GetTick>
 800452a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800452e:	f7fc fd1d 	bl	8000f6c <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e0b0      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004540:	4b5b      	ldr	r3, [pc, #364]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f0      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	019a      	lsls	r2, r3, #6
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	071b      	lsls	r3, r3, #28
 8004558:	4955      	ldr	r1, [pc, #340]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004560:	4b52      	ldr	r3, [pc, #328]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004566:	f7fc fd01 	bl	8000f6c <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800456e:	f7fc fcfd 	bl	8000f6c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e090      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004580:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8083 	beq.w	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	4b44      	ldr	r3, [pc, #272]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	4a43      	ldr	r2, [pc, #268]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a8:	6413      	str	r3, [r2, #64]	; 0x40
 80045aa:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045b6:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a3e      	ldr	r2, [pc, #248]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045c2:	f7fc fcd3 	bl	8000f6c <HAL_GetTick>
 80045c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045ca:	f7fc fccf 	bl	8000f6c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e062      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045dc:	4b35      	ldr	r3, [pc, #212]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045e8:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d02f      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	429a      	cmp	r2, r3
 8004604:	d028      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004606:	4b2a      	ldr	r3, [pc, #168]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004610:	4b29      	ldr	r3, [pc, #164]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004616:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800461c:	4a24      	ldr	r2, [pc, #144]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004622:	4b23      	ldr	r3, [pc, #140]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b01      	cmp	r3, #1
 800462c:	d114      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800462e:	f7fc fc9d 	bl	8000f6c <HAL_GetTick>
 8004632:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	e00a      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fc fc99 	bl	8000f6c <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	; 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d901      	bls.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e02a      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464c:	4b18      	ldr	r3, [pc, #96]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ee      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004664:	d10d      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467a:	490d      	ldr	r1, [pc, #52]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467c:	4313      	orrs	r3, r2
 800467e:	608b      	str	r3, [r1, #8]
 8004680:	e005      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004682:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004688:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800468c:	6093      	str	r3, [r2, #8]
 800468e:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004690:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800469a:	4905      	ldr	r1, [pc, #20]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469c:	4313      	orrs	r3, r2
 800469e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	42470068 	.word	0x42470068
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40007000 	.word	0x40007000
 80046b8:	42470e40 	.word	0x42470e40

080046bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d13e      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046da:	4b23      	ldr	r3, [pc, #140]	; (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d12f      	bne.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046f0:	4b1e      	ldr	r3, [pc, #120]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046f2:	617b      	str	r3, [r7, #20]
          break;
 80046f4:	e02f      	b.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046f6:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004702:	d108      	bne.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004704:	4b18      	ldr	r3, [pc, #96]	; (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800470c:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	e007      	b.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004716:	4b14      	ldr	r3, [pc, #80]	; (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472c:	099b      	lsrs	r3, r3, #6
 800472e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	fb02 f303 	mul.w	r3, r2, r3
 8004738:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800473c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004740:	0f1b      	lsrs	r3, r3, #28
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	617b      	str	r3, [r7, #20]
          break;
 800474e:	e002      	b.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
          break;
 8004754:	bf00      	nop
        }
      }
      break;
 8004756:	bf00      	nop
    }
  }
  return frequency;
 8004758:	697b      	ldr	r3, [r7, #20]
}
 800475a:	4618      	mov	r0, r3
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800
 800476c:	00bb8000 	.word	0x00bb8000
 8004770:	007a1200 	.word	0x007a1200
 8004774:	00f42400 	.word	0x00f42400

08004778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e07b      	b.n	8004882 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	2b00      	cmp	r3, #0
 8004790:	d108      	bne.n	80047a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479a:	d009      	beq.n	80047b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	61da      	str	r2, [r3, #28]
 80047a2:	e005      	b.n	80047b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fc fa5a 	bl	8000c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	ea42 0103 	orr.w	r1, r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	f003 0104 	and.w	r1, r3, #4
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	f003 0210 	and.w	r2, r3, #16
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004870:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e041      	b.n	8004920 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f839 	bl	8004928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f000 f9d7 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b01      	cmp	r3, #1
 800494e:	d001      	beq.n	8004954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e04e      	b.n	80049f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a23      	ldr	r2, [pc, #140]	; (8004a00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d022      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497e:	d01d      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d018      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1e      	ldr	r2, [pc, #120]	; (8004a08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1c      	ldr	r2, [pc, #112]	; (8004a0c <HAL_TIM_Base_Start_IT+0xd0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1b      	ldr	r2, [pc, #108]	; (8004a10 <HAL_TIM_Base_Start_IT+0xd4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <HAL_TIM_Base_Start_IT+0xd8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x80>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <HAL_TIM_Base_Start_IT+0xdc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d111      	bne.n	80049e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d010      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0201 	orr.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049de:	e007      	b.n	80049f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800
 8004a0c:	40000c00 	.word	0x40000c00
 8004a10:	40010400 	.word	0x40010400
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40001800 	.word	0x40001800

08004a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d122      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d11b      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0202 	mvn.w	r2, #2
 8004a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f8ee 	bl	8004c40 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f8e0 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f8f1 	bl	8004c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d122      	bne.n	8004acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d11b      	bne.n	8004acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0204 	mvn.w	r2, #4
 8004a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8c4 	bl	8004c40 <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8b6 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f8c7 	bl	8004c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d122      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d11b      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0208 	mvn.w	r2, #8
 8004af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2204      	movs	r2, #4
 8004af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f89a 	bl	8004c40 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e005      	b.n	8004b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f88c 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f89d 	bl	8004c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d122      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d11b      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0210 	mvn.w	r2, #16
 8004b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f870 	bl	8004c40 <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f862 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f873 	bl	8004c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d10e      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d107      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0201 	mvn.w	r2, #1
 8004b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fb ff66 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	d10e      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	d107      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f902 	bl	8004dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f838 	bl	8004c68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d10e      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d107      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0220 	mvn.w	r2, #32
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f8cc 	bl	8004dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a40      	ldr	r2, [pc, #256]	; (8004d90 <TIM_Base_SetConfig+0x114>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9a:	d00f      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a3d      	ldr	r2, [pc, #244]	; (8004d94 <TIM_Base_SetConfig+0x118>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00b      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a3c      	ldr	r2, [pc, #240]	; (8004d98 <TIM_Base_SetConfig+0x11c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d007      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a3b      	ldr	r2, [pc, #236]	; (8004d9c <TIM_Base_SetConfig+0x120>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a3a      	ldr	r2, [pc, #232]	; (8004da0 <TIM_Base_SetConfig+0x124>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d108      	bne.n	8004cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2f      	ldr	r2, [pc, #188]	; (8004d90 <TIM_Base_SetConfig+0x114>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d02b      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cdc:	d027      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2c      	ldr	r2, [pc, #176]	; (8004d94 <TIM_Base_SetConfig+0x118>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d023      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2b      	ldr	r2, [pc, #172]	; (8004d98 <TIM_Base_SetConfig+0x11c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01f      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <TIM_Base_SetConfig+0x120>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01b      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a29      	ldr	r2, [pc, #164]	; (8004da0 <TIM_Base_SetConfig+0x124>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d017      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a28      	ldr	r2, [pc, #160]	; (8004da4 <TIM_Base_SetConfig+0x128>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a27      	ldr	r2, [pc, #156]	; (8004da8 <TIM_Base_SetConfig+0x12c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00f      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a26      	ldr	r2, [pc, #152]	; (8004dac <TIM_Base_SetConfig+0x130>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a25      	ldr	r2, [pc, #148]	; (8004db0 <TIM_Base_SetConfig+0x134>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d007      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a24      	ldr	r2, [pc, #144]	; (8004db4 <TIM_Base_SetConfig+0x138>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a23      	ldr	r2, [pc, #140]	; (8004db8 <TIM_Base_SetConfig+0x13c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d108      	bne.n	8004d40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a0a      	ldr	r2, [pc, #40]	; (8004d90 <TIM_Base_SetConfig+0x114>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <TIM_Base_SetConfig+0xf8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a0c      	ldr	r2, [pc, #48]	; (8004da0 <TIM_Base_SetConfig+0x124>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d103      	bne.n	8004d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	615a      	str	r2, [r3, #20]
}
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	40000c00 	.word	0x40000c00
 8004da0:	40010400 	.word	0x40010400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40014400 	.word	0x40014400
 8004dac:	40014800 	.word	0x40014800
 8004db0:	40001800 	.word	0x40001800
 8004db4:	40001c00 	.word	0x40001c00
 8004db8:	40002000 	.word	0x40002000

08004dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004de4:	b084      	sub	sp, #16
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	f107 001c 	add.w	r0, r7, #28
 8004df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d122      	bne.n	8004e42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d105      	bne.n	8004e36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f9a0 	bl	800517c <USB_CoreReset>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	73fb      	strb	r3, [r7, #15]
 8004e40:	e01a      	b.n	8004e78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f994 	bl	800517c <USB_CoreReset>
 8004e54:	4603      	mov	r3, r0
 8004e56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38
 8004e6a:	e005      	b.n	8004e78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d10b      	bne.n	8004e96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f043 0206 	orr.w	r2, r3, #6
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f043 0220 	orr.w	r2, r3, #32
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ea2:	b004      	add	sp, #16
 8004ea4:	4770      	bx	lr

08004ea6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f043 0201 	orr.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f023 0201 	bic.w	r2, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d115      	bne.n	8004f38 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f18:	2001      	movs	r0, #1
 8004f1a:	f7fc f833 	bl	8000f84 <HAL_Delay>
      ms++;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f91a 	bl	800515e <USB_GetMode>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d01e      	beq.n	8004f6e <USB_SetCurrentMode+0x84>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b31      	cmp	r3, #49	; 0x31
 8004f34:	d9f0      	bls.n	8004f18 <USB_SetCurrentMode+0x2e>
 8004f36:	e01a      	b.n	8004f6e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d115      	bne.n	8004f6a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f7fc f81a 	bl	8000f84 <HAL_Delay>
      ms++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3301      	adds	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f901 	bl	800515e <USB_GetMode>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <USB_SetCurrentMode+0x84>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b31      	cmp	r3, #49	; 0x31
 8004f66:	d9f0      	bls.n	8004f4a <USB_SetCurrentMode+0x60>
 8004f68:	e001      	b.n	8004f6e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e005      	b.n	8004f7a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b32      	cmp	r3, #50	; 0x32
 8004f72:	d101      	bne.n	8004f78 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	019b      	lsls	r3, r3, #6
 8004f96:	f043 0220 	orr.w	r2, r3, #32
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	4a08      	ldr	r2, [pc, #32]	; (8004fc8 <USB_FlushTxFifo+0x44>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d901      	bls.n	8004fae <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e006      	b.n	8004fbc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d0f1      	beq.n	8004f9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	00030d40 	.word	0x00030d40

08004fcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2210      	movs	r2, #16
 8004fdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	4a08      	ldr	r2, [pc, #32]	; (8005008 <USB_FlushRxFifo+0x3c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e006      	b.n	8004ffc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d0f1      	beq.n	8004fde <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	00030d40 	.word	0x00030d40

0800500c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	4611      	mov	r1, r2
 8005018:	461a      	mov	r2, r3
 800501a:	460b      	mov	r3, r1
 800501c:	71fb      	strb	r3, [r7, #7]
 800501e:	4613      	mov	r3, r2
 8005020:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800502a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800502e:	2b00      	cmp	r3, #0
 8005030:	d123      	bne.n	800507a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005032:	88bb      	ldrh	r3, [r7, #4]
 8005034:	3303      	adds	r3, #3
 8005036:	089b      	lsrs	r3, r3, #2
 8005038:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	e018      	b.n	8005072 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	031a      	lsls	r2, r3, #12
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4413      	add	r3, r2
 8005048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504c:	461a      	mov	r2, r3
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	3301      	adds	r3, #1
 8005058:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	3301      	adds	r3, #1
 800505e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	3301      	adds	r3, #1
 8005064:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	3301      	adds	r3, #1
 800506a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	3301      	adds	r3, #1
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	429a      	cmp	r2, r3
 8005078:	d3e2      	bcc.n	8005040 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3724      	adds	r7, #36	; 0x24
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005088:	b480      	push	{r7}
 800508a:	b08b      	sub	sp, #44	; 0x2c
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	4613      	mov	r3, r2
 8005094:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800509e:	88fb      	ldrh	r3, [r7, #6]
 80050a0:	089b      	lsrs	r3, r3, #2
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	623b      	str	r3, [r7, #32]
 80050b2:	e014      	b.n	80050de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	601a      	str	r2, [r3, #0]
    pDest++;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	3301      	adds	r3, #1
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	3301      	adds	r3, #1
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	3301      	adds	r3, #1
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	3301      	adds	r3, #1
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	3301      	adds	r3, #1
 80050dc:	623b      	str	r3, [r7, #32]
 80050de:	6a3a      	ldr	r2, [r7, #32]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d3e6      	bcc.n	80050b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050e6:	8bfb      	ldrh	r3, [r7, #30]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01e      	beq.n	800512a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f6:	461a      	mov	r2, r3
 80050f8:	f107 0310 	add.w	r3, r7, #16
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	fa22 f303 	lsr.w	r3, r2, r3
 800510c:	b2da      	uxtb	r2, r3
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	701a      	strb	r2, [r3, #0]
      i++;
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	3301      	adds	r3, #1
 8005116:	623b      	str	r3, [r7, #32]
      pDest++;
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	3301      	adds	r3, #1
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800511e:	8bfb      	ldrh	r3, [r7, #30]
 8005120:	3b01      	subs	r3, #1
 8005122:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005124:	8bfb      	ldrh	r3, [r7, #30]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1ea      	bne.n	8005100 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800512c:	4618      	mov	r0, r3
 800512e:	372c      	adds	r7, #44	; 0x2c
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4013      	ands	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005150:	68fb      	ldr	r3, [r7, #12]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f003 0301 	and.w	r3, r3, #1
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	4a13      	ldr	r2, [pc, #76]	; (80051dc <USB_CoreReset+0x60>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d901      	bls.n	8005198 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e01a      	b.n	80051ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	daf3      	bge.n	8005188 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f043 0201 	orr.w	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3301      	adds	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	4a09      	ldr	r2, [pc, #36]	; (80051dc <USB_CoreReset+0x60>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d901      	bls.n	80051c0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e006      	b.n	80051ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d0f1      	beq.n	80051b0 <USB_CoreReset+0x34>

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	00030d40 	.word	0x00030d40

080051e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051e0:	b084      	sub	sp, #16
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	f107 001c 	add.w	r0, r7, #28
 80051ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051fc:	461a      	mov	r2, r3
 80051fe:	2300      	movs	r3, #0
 8005200:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d018      	beq.n	8005264 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	2b01      	cmp	r3, #1
 8005236:	d10a      	bne.n	800524e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005246:	f043 0304 	orr.w	r3, r3, #4
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e014      	b.n	8005278 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800525c:	f023 0304 	bic.w	r3, r3, #4
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	e009      	b.n	8005278 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005272:	f023 0304 	bic.w	r3, r3, #4
 8005276:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005278:	2110      	movs	r1, #16
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff fe82 	bl	8004f84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff fea3 	bl	8004fcc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e015      	b.n	80052b8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4413      	add	r3, r2
 8005294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005298:	461a      	mov	r2, r3
 800529a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800529e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ac:	461a      	mov	r2, r3
 80052ae:	2300      	movs	r3, #0
 80052b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3301      	adds	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d3e5      	bcc.n	800528c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a13      	ldr	r2, [pc, #76]	; (8005334 <USB_HostInit+0x154>)
 80052e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a13      	ldr	r2, [pc, #76]	; (8005338 <USB_HostInit+0x158>)
 80052ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80052f0:	e009      	b.n	8005306 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2280      	movs	r2, #128	; 0x80
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a10      	ldr	r2, [pc, #64]	; (800533c <USB_HostInit+0x15c>)
 80052fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <USB_HostInit+0x160>)
 8005302:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	2b00      	cmp	r3, #0
 800530a:	d105      	bne.n	8005318 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f043 0210 	orr.w	r2, r3, #16
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699a      	ldr	r2, [r3, #24]
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <USB_HostInit+0x164>)
 800531e:	4313      	orrs	r3, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005330:	b004      	add	sp, #16
 8005332:	4770      	bx	lr
 8005334:	01000200 	.word	0x01000200
 8005338:	00e00300 	.word	0x00e00300
 800533c:	00600080 	.word	0x00600080
 8005340:	004000e0 	.word	0x004000e0
 8005344:	a3200008 	.word	0xa3200008

08005348 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	68f9      	ldr	r1, [r7, #12]
 800537c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005380:	4313      	orrs	r3, r2
 8005382:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d107      	bne.n	800539a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005390:	461a      	mov	r2, r3
 8005392:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005396:	6053      	str	r3, [r2, #4]
 8005398:	e009      	b.n	80053ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d106      	bne.n	80053ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a6:	461a      	mov	r2, r3
 80053a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80053ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80053ec:	2064      	movs	r0, #100	; 0x64
 80053ee:	f7fb fdc9 	bl	8000f84 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005400:	200a      	movs	r0, #10
 8005402:	f7fb fdbf 	bl	8000f84 <HAL_Delay>

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005434:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d109      	bne.n	8005454 <USB_DriveVbus+0x44>
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d106      	bne.n	8005454 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800544e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005452:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800545a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545e:	d109      	bne.n	8005474 <USB_DriveVbus+0x64>
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800546e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005472:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	0c5b      	lsrs	r3, r3, #17
 80054a0:	f003 0303 	and.w	r3, r3, #3
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	b29b      	uxth	r3, r3
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	4608      	mov	r0, r1
 80054de:	4611      	mov	r1, r2
 80054e0:	461a      	mov	r2, r3
 80054e2:	4603      	mov	r3, r0
 80054e4:	70fb      	strb	r3, [r7, #3]
 80054e6:	460b      	mov	r3, r1
 80054e8:	70bb      	strb	r3, [r7, #2]
 80054ea:	4613      	mov	r3, r2
 80054ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	461a      	mov	r2, r3
 8005504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005508:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800550a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800550e:	2b03      	cmp	r3, #3
 8005510:	d87e      	bhi.n	8005610 <USB_HC_Init+0x13c>
 8005512:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <USB_HC_Init+0x44>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	08005529 	.word	0x08005529
 800551c:	080055d3 	.word	0x080055d3
 8005520:	08005529 	.word	0x08005529
 8005524:	08005595 	.word	0x08005595
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4413      	add	r3, r2
 8005530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005534:	461a      	mov	r2, r3
 8005536:	f240 439d 	movw	r3, #1181	; 0x49d
 800553a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800553c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005540:	2b00      	cmp	r3, #0
 8005542:	da10      	bge.n	8005566 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4413      	add	r3, r2
 800554c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	0151      	lsls	r1, r2, #5
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	440a      	add	r2, r1
 800555a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800555e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005562:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005564:	e057      	b.n	8005616 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d051      	beq.n	8005616 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4413      	add	r3, r2
 800557a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	440a      	add	r2, r1
 8005588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800558c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005590:	60d3      	str	r3, [r2, #12]
      break;
 8005592:	e040      	b.n	8005616 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a0:	461a      	mov	r2, r3
 80055a2:	f240 639d 	movw	r3, #1693	; 0x69d
 80055a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	da34      	bge.n	800561a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ce:	60d3      	str	r3, [r2, #12]
      }

      break;
 80055d0:	e023      	b.n	800561a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055d2:	78fb      	ldrb	r3, [r7, #3]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055de:	461a      	mov	r2, r3
 80055e0:	f240 2325 	movw	r3, #549	; 0x225
 80055e4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	da17      	bge.n	800561e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	440a      	add	r2, r1
 8005604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005608:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800560c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800560e:	e006      	b.n	800561e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	77fb      	strb	r3, [r7, #31]
      break;
 8005614:	e004      	b.n	8005620 <USB_HC_Init+0x14c>
      break;
 8005616:	bf00      	nop
 8005618:	e002      	b.n	8005620 <USB_HC_Init+0x14c>
      break;
 800561a:	bf00      	nop
 800561c:	e000      	b.n	8005620 <USB_HC_Init+0x14c>
      break;
 800561e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005626:	699a      	ldr	r2, [r3, #24]
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	2101      	movs	r1, #1
 8005630:	fa01 f303 	lsl.w	r3, r1, r3
 8005634:	6939      	ldr	r1, [r7, #16]
 8005636:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800563a:	4313      	orrs	r3, r2
 800563c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800564a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800564e:	2b00      	cmp	r3, #0
 8005650:	da03      	bge.n	800565a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	e001      	b.n	800565e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff ff0f 	bl	8005482 <USB_GetHostSpeed>
 8005664:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005666:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800566a:	2b02      	cmp	r3, #2
 800566c:	d106      	bne.n	800567c <USB_HC_Init+0x1a8>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d003      	beq.n	800567c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	e001      	b.n	8005680 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005680:	787b      	ldrb	r3, [r7, #1]
 8005682:	059b      	lsls	r3, r3, #22
 8005684:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005688:	78bb      	ldrb	r3, [r7, #2]
 800568a:	02db      	lsls	r3, r3, #11
 800568c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005690:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005692:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005696:	049b      	lsls	r3, r3, #18
 8005698:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800569c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800569e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80056a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80056a4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	0159      	lsls	r1, r3, #5
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	440b      	add	r3, r1
 80056b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056bc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80056be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d10f      	bne.n	80056e6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	78fa      	ldrb	r2, [r7, #3]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80056e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3720      	adds	r7, #32
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08c      	sub	sp, #48	; 0x30
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	785b      	ldrb	r3, [r3, #1]
 8005706:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800570c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d02d      	beq.n	8005776 <USB_HC_StartXfer+0x86>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	791b      	ldrb	r3, [r3, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d129      	bne.n	8005776 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d117      	bne.n	8005758 <USB_HC_StartXfer+0x68>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	79db      	ldrb	r3, [r3, #7]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <USB_HC_StartXfer+0x48>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	79db      	ldrb	r3, [r3, #7]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d10f      	bne.n	8005758 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	4413      	add	r3, r2
 8005740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	6a3a      	ldr	r2, [r7, #32]
 800574c:	440a      	add	r2, r1
 800574e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <USB_HC_StartXfer+0x86>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	795b      	ldrb	r3, [r3, #5]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d107      	bne.n	8005776 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	4619      	mov	r1, r3
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 fa2f 	bl	8005bd0 <USB_DoPing>
      return HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	e0f8      	b.n	8005968 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d018      	beq.n	80057b0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	8912      	ldrh	r2, [r2, #8]
 8005786:	4413      	add	r3, r2
 8005788:	3b01      	subs	r3, #1
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	8912      	ldrh	r2, [r2, #8]
 800578e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005792:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005794:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005796:	8b7b      	ldrh	r3, [r7, #26]
 8005798:	429a      	cmp	r2, r3
 800579a:	d90b      	bls.n	80057b4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800579c:	8b7b      	ldrh	r3, [r7, #26]
 800579e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	8912      	ldrh	r2, [r2, #8]
 80057a6:	fb02 f203 	mul.w	r2, r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	611a      	str	r2, [r3, #16]
 80057ae:	e001      	b.n	80057b4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80057b0:	2301      	movs	r3, #1
 80057b2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	78db      	ldrb	r3, [r3, #3]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d007      	beq.n	80057cc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	8912      	ldrh	r2, [r2, #8]
 80057c2:	fb02 f203 	mul.w	r2, r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	611a      	str	r2, [r3, #16]
 80057ca:	e003      	b.n	80057d4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80057dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057de:	04d9      	lsls	r1, r3, #19
 80057e0:	4b63      	ldr	r3, [pc, #396]	; (8005970 <USB_HC_StartXfer+0x280>)
 80057e2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057e4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	7a9b      	ldrb	r3, [r3, #10]
 80057ea:	075b      	lsls	r3, r3, #29
 80057ec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057f0:	69f9      	ldr	r1, [r7, #28]
 80057f2:	0148      	lsls	r0, r1, #5
 80057f4:	6a39      	ldr	r1, [r7, #32]
 80057f6:	4401      	add	r1, r0
 80057f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80057fc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057fe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	68d9      	ldr	r1, [r3, #12]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	460a      	mov	r2, r1
 8005818:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	bf0c      	ite	eq
 800582a:	2301      	moveq	r3, #1
 800582c:	2300      	movne	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	6a3a      	ldr	r2, [r7, #32]
 8005846:	440a      	add	r2, r1
 8005848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800584c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005850:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	4413      	add	r3, r2
 800585a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	7e7b      	ldrb	r3, [r7, #25]
 8005862:	075b      	lsls	r3, r3, #29
 8005864:	69f9      	ldr	r1, [r7, #28]
 8005866:	0148      	lsls	r0, r1, #5
 8005868:	6a39      	ldr	r1, [r7, #32]
 800586a:	4401      	add	r1, r0
 800586c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005870:	4313      	orrs	r3, r2
 8005872:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800588a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	78db      	ldrb	r3, [r3, #3]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	e003      	b.n	80058a6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058a4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058ac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ba:	461a      	mov	r2, r3
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e04e      	b.n	8005968 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	78db      	ldrb	r3, [r3, #3]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d149      	bne.n	8005966 <USB_HC_StartXfer+0x276>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d045      	beq.n	8005966 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	79db      	ldrb	r3, [r3, #7]
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d830      	bhi.n	8005944 <USB_HC_StartXfer+0x254>
 80058e2:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <USB_HC_StartXfer+0x1f8>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	080058f9 	.word	0x080058f9
 80058ec:	0800591d 	.word	0x0800591d
 80058f0:	080058f9 	.word	0x080058f9
 80058f4:	0800591d 	.word	0x0800591d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	3303      	adds	r3, #3
 80058fe:	089b      	lsrs	r3, r3, #2
 8005900:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005902:	8afa      	ldrh	r2, [r7, #22]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	b29b      	uxth	r3, r3
 800590a:	429a      	cmp	r2, r3
 800590c:	d91c      	bls.n	8005948 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f043 0220 	orr.w	r2, r3, #32
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	619a      	str	r2, [r3, #24]
        }
        break;
 800591a:	e015      	b.n	8005948 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	3303      	adds	r3, #3
 8005922:	089b      	lsrs	r3, r3, #2
 8005924:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005926:	8afa      	ldrh	r2, [r7, #22]
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	b29b      	uxth	r3, r3
 8005932:	429a      	cmp	r2, r3
 8005934:	d90a      	bls.n	800594c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	619a      	str	r2, [r3, #24]
        }
        break;
 8005942:	e003      	b.n	800594c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005944:	bf00      	nop
 8005946:	e002      	b.n	800594e <USB_HC_StartXfer+0x25e>
        break;
 8005948:	bf00      	nop
 800594a:	e000      	b.n	800594e <USB_HC_StartXfer+0x25e>
        break;
 800594c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	68d9      	ldr	r1, [r3, #12]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	785a      	ldrb	r2, [r3, #1]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	b29b      	uxth	r3, r3
 800595c:	2000      	movs	r0, #0
 800595e:	9000      	str	r0, [sp, #0]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f7ff fb53 	bl	800500c <USB_WritePacket>
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3728      	adds	r7, #40	; 0x28
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	1ff80000 	.word	0x1ff80000

08005974 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	b29b      	uxth	r3, r3
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005996:	b480      	push	{r7}
 8005998:	b089      	sub	sp, #36	; 0x24
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80059a6:	78fb      	ldrb	r3, [r7, #3]
 80059a8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	0c9b      	lsrs	r3, r3, #18
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	0fdb      	lsrs	r3, r3, #31
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d104      	bne.n	80059f0 <USB_HC_Halt+0x5a>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e0e8      	b.n	8005bc2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <USB_HC_Halt+0x66>
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d173      	bne.n	8005ae4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a1a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f040 80cb 	bne.w	8005bc0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d143      	bne.n	8005abe <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a54:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a74:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a94:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aa2:	d81d      	bhi.n	8005ae0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aba:	d0ec      	beq.n	8005a96 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005abc:	e080      	b.n	8005bc0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005adc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ade:	e06f      	b.n	8005bc0 <USB_HC_Halt+0x22a>
            break;
 8005ae0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ae2:	e06d      	b.n	8005bc0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005afe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b02:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d143      	bne.n	8005b9c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	0151      	lsls	r1, r2, #5
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b32:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b72:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	3301      	adds	r3, #1
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b80:	d81d      	bhi.n	8005bbe <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b98:	d0ec      	beq.n	8005b74 <USB_HC_Halt+0x1de>
 8005b9a:	e011      	b.n	8005bc0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	e000      	b.n	8005bc0 <USB_HC_Halt+0x22a>
          break;
 8005bbe:	bf00      	nop
    }
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3724      	adds	r7, #36	; 0x24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005be4:	2301      	movs	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	04da      	lsls	r2, r3, #19
 8005bec:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <USB_DoPing+0x74>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c00:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c18:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c20:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	1ff80000 	.word	0x1ff80000

08005c48 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff f935 	bl	8004ec8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005c5e:	2110      	movs	r1, #16
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff f98f 	bl	8004f84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff f9b0 	bl	8004fcc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	e01f      	b.n	8005cb2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c88:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c90:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c98:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b0f      	cmp	r3, #15
 8005cb6:	d9dc      	bls.n	8005c72 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	e034      	b.n	8005d28 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cd4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cdc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ce4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d04:	d80c      	bhi.n	8005d20 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d1c:	d0ec      	beq.n	8005cf8 <USB_StopHost+0xb0>
 8005d1e:	e000      	b.n	8005d22 <USB_StopHost+0xda>
        break;
 8005d20:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	3301      	adds	r3, #1
 8005d26:	613b      	str	r3, [r7, #16]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2b0f      	cmp	r3, #15
 8005d2c:	d9c7      	bls.n	8005cbe <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d34:	461a      	mov	r2, r3
 8005d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d3a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d42:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff f8ae 	bl	8004ea6 <USB_EnableGlobalInt>

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005d54:	b590      	push	{r4, r7, lr}
 8005d56:	b089      	sub	sp, #36	; 0x24
 8005d58:	af04      	add	r7, sp, #16
 8005d5a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	2202      	movs	r2, #2
 8005d60:	2102      	movs	r1, #2
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fcb2 	bl	80066cc <USBH_FindInterface>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	2bff      	cmp	r3, #255	; 0xff
 8005d70:	d002      	beq.n	8005d78 <USBH_CDC_InterfaceInit+0x24>
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d901      	bls.n	8005d7c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e13d      	b.n	8005ff8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fc87 	bl	8006694 <USBH_SelectInterface>
 8005d86:	4603      	mov	r3, r0
 8005d88:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005d8a:	7bbb      	ldrb	r3, [r7, #14]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005d90:	2302      	movs	r3, #2
 8005d92:	e131      	b.n	8005ff8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005d9a:	2050      	movs	r0, #80	; 0x50
 8005d9c:	f005 fbfc 	bl	800b598 <malloc>
 8005da0:	4603      	mov	r3, r0
 8005da2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005db4:	2302      	movs	r3, #2
 8005db6:	e11f      	b.n	8005ff8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005db8:	2250      	movs	r2, #80	; 0x50
 8005dba:	2100      	movs	r1, #0
 8005dbc:	68b8      	ldr	r0, [r7, #8]
 8005dbe:	f005 fc09 	bl	800b5d4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	211a      	movs	r1, #26
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	4413      	add	r3, r2
 8005dce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	b25b      	sxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	da15      	bge.n	8005e06 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	211a      	movs	r1, #26
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	4413      	add	r3, r2
 8005de6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dea:	781a      	ldrb	r2, [r3, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	211a      	movs	r1, #26
 8005df6:	fb01 f303 	mul.w	r3, r1, r3
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e00:	881a      	ldrh	r2, [r3, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f002 f88c 	bl	8007f2a <USBH_AllocPipe>
 8005e12:	4603      	mov	r3, r0
 8005e14:	461a      	mov	r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	7819      	ldrb	r1, [r3, #0]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	7858      	ldrb	r0, [r3, #1]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	8952      	ldrh	r2, [r2, #10]
 8005e32:	9202      	str	r2, [sp, #8]
 8005e34:	2203      	movs	r2, #3
 8005e36:	9201      	str	r2, [sp, #4]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	4623      	mov	r3, r4
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f002 f844 	bl	8007ecc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f005 faf3 	bl	800b438 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005e52:	2300      	movs	r3, #0
 8005e54:	2200      	movs	r2, #0
 8005e56:	210a      	movs	r1, #10
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fc37 	bl	80066cc <USBH_FindInterface>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	2bff      	cmp	r3, #255	; 0xff
 8005e66:	d002      	beq.n	8005e6e <USBH_CDC_InterfaceInit+0x11a>
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d901      	bls.n	8005e72 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e0c2      	b.n	8005ff8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	211a      	movs	r1, #26
 8005e78:	fb01 f303 	mul.w	r3, r1, r3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	b25b      	sxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	da16      	bge.n	8005eb8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	211a      	movs	r1, #26
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	4413      	add	r3, r2
 8005e96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	211a      	movs	r1, #26
 8005ea6:	fb01 f303 	mul.w	r3, r1, r3
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005eb0:	881a      	ldrh	r2, [r3, #0]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	835a      	strh	r2, [r3, #26]
 8005eb6:	e015      	b.n	8005ee4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	211a      	movs	r1, #26
 8005ebe:	fb01 f303 	mul.w	r3, r1, r3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	211a      	movs	r1, #26
 8005ed4:	fb01 f303 	mul.w	r3, r1, r3
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ede:	881a      	ldrh	r2, [r3, #0]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	211a      	movs	r1, #26
 8005eea:	fb01 f303 	mul.w	r3, r1, r3
 8005eee:	4413      	add	r3, r2
 8005ef0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	b25b      	sxtb	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	da16      	bge.n	8005f2a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	211a      	movs	r1, #26
 8005f02:	fb01 f303 	mul.w	r3, r1, r3
 8005f06:	4413      	add	r3, r2
 8005f08:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	211a      	movs	r1, #26
 8005f18:	fb01 f303 	mul.w	r3, r1, r3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f22:	881a      	ldrh	r2, [r3, #0]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	835a      	strh	r2, [r3, #26]
 8005f28:	e015      	b.n	8005f56 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	211a      	movs	r1, #26
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	4413      	add	r3, r2
 8005f36:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f3a:	781a      	ldrb	r2, [r3, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	211a      	movs	r1, #26
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f50:	881a      	ldrh	r2, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	7b9b      	ldrb	r3, [r3, #14]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 ffe4 	bl	8007f2a <USBH_AllocPipe>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	7bdb      	ldrb	r3, [r3, #15]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 ffda 	bl	8007f2a <USBH_AllocPipe>
 8005f76:	4603      	mov	r3, r0
 8005f78:	461a      	mov	r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	7b59      	ldrb	r1, [r3, #13]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	7b98      	ldrb	r0, [r3, #14]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	8b12      	ldrh	r2, [r2, #24]
 8005f96:	9202      	str	r2, [sp, #8]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	9201      	str	r2, [sp, #4]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	4623      	mov	r3, r4
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 ff92 	bl	8007ecc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	7b19      	ldrb	r1, [r3, #12]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	7bd8      	ldrb	r0, [r3, #15]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	8b52      	ldrh	r2, [r2, #26]
 8005fc0:	9202      	str	r2, [sp, #8]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	9201      	str	r2, [sp, #4]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	4623      	mov	r3, r4
 8005fca:	4602      	mov	r2, r0
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 ff7d 	bl	8007ecc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	7b5b      	ldrb	r3, [r3, #13]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f005 fa28 	bl	800b438 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	7b1b      	ldrb	r3, [r3, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f005 fa21 	bl	800b438 <USBH_LL_SetToggle>

  return USBH_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd90      	pop	{r4, r7, pc}

08006000 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00e      	beq.n	8006038 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 ff72 	bl	8007f0a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 ff9d 	bl	8007f6c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	7b1b      	ldrb	r3, [r3, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00e      	beq.n	800605e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	7b1b      	ldrb	r3, [r3, #12]
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 ff5f 	bl	8007f0a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	7b1b      	ldrb	r3, [r3, #12]
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f001 ff8a 	bl	8007f6c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	7b5b      	ldrb	r3, [r3, #13]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00e      	beq.n	8006084 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	7b5b      	ldrb	r3, [r3, #13]
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f001 ff4c 	bl	8007f0a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	7b5b      	ldrb	r3, [r3, #13]
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 ff77 	bl	8007f6c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	4618      	mov	r0, r3
 800609a:	f005 fa85 	bl	800b5a8 <free>
    phost->pActiveClass->pData = 0U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060a4:	2200      	movs	r2, #0
 80060a6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3340      	adds	r3, #64	; 0x40
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f8b1 	bl	8006232 <GetLineCoding>
 80060d0:	4603      	mov	r3, r0
 80060d2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80060d4:	7afb      	ldrb	r3, [r7, #11]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d105      	bne.n	80060e6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060e0:	2102      	movs	r1, #2
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80060e6:	7afb      	ldrb	r3, [r7, #11]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80060f8:	2301      	movs	r3, #1
 80060fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006110:	2b04      	cmp	r3, #4
 8006112:	d877      	bhi.n	8006204 <USBH_CDC_Process+0x114>
 8006114:	a201      	add	r2, pc, #4	; (adr r2, 800611c <USBH_CDC_Process+0x2c>)
 8006116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611a:	bf00      	nop
 800611c:	08006131 	.word	0x08006131
 8006120:	08006137 	.word	0x08006137
 8006124:	08006167 	.word	0x08006167
 8006128:	080061db 	.word	0x080061db
 800612c:	080061e9 	.word	0x080061e9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	73fb      	strb	r3, [r7, #15]
      break;
 8006134:	e06d      	b.n	8006212 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f897 	bl	8006270 <SetLineCoding>
 8006142:	4603      	mov	r3, r0
 8006144:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006146:	7bbb      	ldrb	r3, [r7, #14]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d104      	bne.n	8006156 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006154:	e058      	b.n	8006208 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006156:	7bbb      	ldrb	r3, [r7, #14]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d055      	beq.n	8006208 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2204      	movs	r2, #4
 8006160:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006164:	e050      	b.n	8006208 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	3340      	adds	r3, #64	; 0x40
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f860 	bl	8006232 <GetLineCoding>
 8006172:	4603      	mov	r3, r0
 8006174:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d126      	bne.n	80061ca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800618e:	791b      	ldrb	r3, [r3, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d13b      	bne.n	800620c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d133      	bne.n	800620c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d12b      	bne.n	800620c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061bc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061be:	429a      	cmp	r2, r3
 80061c0:	d124      	bne.n	800620c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f982 	bl	80064cc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80061c8:	e020      	b.n	800620c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d01d      	beq.n	800620c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2204      	movs	r2, #4
 80061d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80061d8:	e018      	b.n	800620c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f867 	bl	80062ae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f8f6 	bl	80063d2 <CDC_ProcessReception>
      break;
 80061e6:	e014      	b.n	8006212 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80061e8:	2100      	movs	r1, #0
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f001 f94d 	bl	800748a <USBH_ClrFeature>
 80061f0:	4603      	mov	r3, r0
 80061f2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006202:	e005      	b.n	8006210 <USBH_CDC_Process+0x120>

    default:
      break;
 8006204:	bf00      	nop
 8006206:	e004      	b.n	8006212 <USBH_CDC_Process+0x122>
      break;
 8006208:	bf00      	nop
 800620a:	e002      	b.n	8006212 <USBH_CDC_Process+0x122>
      break;
 800620c:	bf00      	nop
 800620e:	e000      	b.n	8006212 <USBH_CDC_Process+0x122>
      break;
 8006210:	bf00      	nop

  }

  return status;
 8006212:	7bfb      	ldrb	r3, [r7, #15]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	22a1      	movs	r2, #161	; 0xa1
 8006240:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2221      	movs	r2, #33	; 0x21
 8006246:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2207      	movs	r2, #7
 8006258:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2207      	movs	r2, #7
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 faf2 	bl	800784a <USBH_CtlReq>
 8006266:	4603      	mov	r3, r0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2221      	movs	r2, #33	; 0x21
 800627e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2207      	movs	r2, #7
 8006296:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2207      	movs	r2, #7
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 fad3 	bl	800784a <USBH_CtlReq>
 80062a4:	4603      	mov	r3, r0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b086      	sub	sp, #24
 80062b2:	af02      	add	r7, sp, #8
 80062b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062c0:	2300      	movs	r3, #0
 80062c2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d002      	beq.n	80062d4 <CDC_ProcessTransmission+0x26>
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d023      	beq.n	800631a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80062d2:	e07a      	b.n	80063ca <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	8b12      	ldrh	r2, [r2, #24]
 80062dc:	4293      	cmp	r3, r2
 80062de:	d90b      	bls.n	80062f8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	69d9      	ldr	r1, [r3, #28]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8b1a      	ldrh	r2, [r3, #24]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	7b5b      	ldrb	r3, [r3, #13]
 80062ec:	2001      	movs	r0, #1
 80062ee:	9000      	str	r0, [sp, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fda8 	bl	8007e46 <USBH_BulkSendData>
 80062f6:	e00b      	b.n	8006310 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	7b5b      	ldrb	r3, [r3, #13]
 8006306:	2001      	movs	r0, #1
 8006308:	9000      	str	r0, [sp, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f001 fd9b 	bl	8007e46 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006318:	e057      	b.n	80063ca <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	7b5b      	ldrb	r3, [r3, #13]
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f005 f85f 	bl	800b3e4 <USBH_LL_GetURBState>
 8006326:	4603      	mov	r3, r0
 8006328:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800632a:	7afb      	ldrb	r3, [r7, #11]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d136      	bne.n	800639e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	8b12      	ldrh	r2, [r2, #24]
 8006338:	4293      	cmp	r3, r2
 800633a:	d90e      	bls.n	800635a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	8b12      	ldrh	r2, [r2, #24]
 8006344:	1a9a      	subs	r2, r3, r2
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	8b12      	ldrh	r2, [r2, #24]
 8006352:	441a      	add	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	61da      	str	r2, [r3, #28]
 8006358:	e002      	b.n	8006360 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006370:	e006      	b.n	8006380 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f892 	bl	80064a4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2204      	movs	r2, #4
 8006384:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006394:	2300      	movs	r3, #0
 8006396:	2200      	movs	r2, #0
 8006398:	f001 ffd8 	bl	800834c <osMessageQueuePut>
      break;
 800639c:	e014      	b.n	80063c8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800639e:	7afb      	ldrb	r3, [r7, #11]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d111      	bne.n	80063c8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2204      	movs	r2, #4
 80063b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80063c0:	2300      	movs	r3, #0
 80063c2:	2200      	movs	r2, #0
 80063c4:	f001 ffc2 	bl	800834c <osMessageQueuePut>
      break;
 80063c8:	bf00      	nop
  }
}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b086      	sub	sp, #24
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063e4:	2300      	movs	r3, #0
 80063e6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d002      	beq.n	80063f8 <CDC_ProcessReception+0x26>
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d00e      	beq.n	8006414 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80063f6:	e051      	b.n	800649c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	6a19      	ldr	r1, [r3, #32]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	8b5a      	ldrh	r2, [r3, #26]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	7b1b      	ldrb	r3, [r3, #12]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 fd43 	bl	8007e90 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2204      	movs	r2, #4
 800640e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006412:	e043      	b.n	800649c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	7b1b      	ldrb	r3, [r3, #12]
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f004 ffe2 	bl	800b3e4 <USBH_LL_GetURBState>
 8006420:	4603      	mov	r3, r0
 8006422:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006424:	7cfb      	ldrb	r3, [r7, #19]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d137      	bne.n	800649a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	7b1b      	ldrb	r3, [r3, #12]
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f004 ff45 	bl	800b2c0 <USBH_LL_GetLastXferSize>
 8006436:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	429a      	cmp	r2, r3
 8006440:	d016      	beq.n	8006470 <CDC_ProcessReception+0x9e>
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	8b5b      	ldrh	r3, [r3, #26]
 8006446:	461a      	mov	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4293      	cmp	r3, r2
 800644c:	d910      	bls.n	8006470 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1ad2      	subs	r2, r2, r3
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	6a1a      	ldr	r2, [r3, #32]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	441a      	add	r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2203      	movs	r2, #3
 800646a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800646e:	e006      	b.n	800647e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f81d 	bl	80064b8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2204      	movs	r2, #4
 8006482:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006492:	2300      	movs	r3, #0
 8006494:	2200      	movs	r2, #0
 8006496:	f001 ff59 	bl	800834c <osMessageQueuePut>
      break;
 800649a:	bf00      	nop
  }
}
 800649c:	bf00      	nop
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80064f4:	2302      	movs	r3, #2
 80064f6:	e044      	b.n	8006582 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	79fa      	ldrb	r2, [r7, #7]
 80064fc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f841 	bl	8006598 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006544:	2200      	movs	r2, #0
 8006546:	2104      	movs	r1, #4
 8006548:	2010      	movs	r0, #16
 800654a:	f001 fe8c 	bl	8008266 <osMessageQueueNew>
 800654e:	4602      	mov	r2, r0
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006556:	4b0d      	ldr	r3, [pc, #52]	; (800658c <USBH_Init+0xac>)
 8006558:	4a0d      	ldr	r2, [pc, #52]	; (8006590 <USBH_Init+0xb0>)
 800655a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800655c:	4b0b      	ldr	r3, [pc, #44]	; (800658c <USBH_Init+0xac>)
 800655e:	2280      	movs	r2, #128	; 0x80
 8006560:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <USBH_Init+0xac>)
 8006564:	2218      	movs	r2, #24
 8006566:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006568:	4a08      	ldr	r2, [pc, #32]	; (800658c <USBH_Init+0xac>)
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	4809      	ldr	r0, [pc, #36]	; (8006594 <USBH_Init+0xb4>)
 800656e:	f001 fdcd 	bl	800810c <osThreadNew>
 8006572:	4602      	mov	r2, r0
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f004 fdec 	bl	800b158 <USBH_LL_Init>

  return USBH_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20004be4 	.word	0x20004be4
 8006590:	0800b88c 	.word	0x0800b88c
 8006594:	08007201 	.word	0x08007201

08006598 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e009      	b.n	80065be <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	33e0      	adds	r3, #224	; 0xe0
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	2200      	movs	r2, #0
 80065b6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3301      	adds	r3, #1
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b0e      	cmp	r3, #14
 80065c2:	d9f2      	bls.n	80065aa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	e009      	b.n	80065de <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065d4:	2200      	movs	r2, #0
 80065d6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3301      	adds	r3, #1
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e4:	d3f1      	bcc.n	80065ca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2240      	movs	r2, #64	; 0x40
 800660a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d016      	beq.n	8006682 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10e      	bne.n	800667c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006664:	1c59      	adds	r1, r3, #1
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	33de      	adds	r3, #222	; 0xde
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]
 800667a:	e004      	b.n	8006686 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800667c:	2302      	movs	r3, #2
 800667e:	73fb      	strb	r3, [r7, #15]
 8006680:	e001      	b.n	8006686 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006682:	2302      	movs	r3, #2
 8006684:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006686:	7bfb      	ldrb	r3, [r7, #15]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d204      	bcs.n	80066ba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80066b8:	e001      	b.n	80066be <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80066ba:	2302      	movs	r3, #2
 80066bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066be:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	4608      	mov	r0, r1
 80066d6:	4611      	mov	r1, r2
 80066d8:	461a      	mov	r2, r3
 80066da:	4603      	mov	r3, r0
 80066dc:	70fb      	strb	r3, [r7, #3]
 80066de:	460b      	mov	r3, r1
 80066e0:	70bb      	strb	r3, [r7, #2]
 80066e2:	4613      	mov	r3, r2
 80066e4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80066f4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80066f6:	e025      	b.n	8006744 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	221a      	movs	r2, #26
 80066fc:	fb02 f303 	mul.w	r3, r2, r3
 8006700:	3308      	adds	r3, #8
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	3302      	adds	r3, #2
 8006708:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	795b      	ldrb	r3, [r3, #5]
 800670e:	78fa      	ldrb	r2, [r7, #3]
 8006710:	429a      	cmp	r2, r3
 8006712:	d002      	beq.n	800671a <USBH_FindInterface+0x4e>
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	2bff      	cmp	r3, #255	; 0xff
 8006718:	d111      	bne.n	800673e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800671e:	78ba      	ldrb	r2, [r7, #2]
 8006720:	429a      	cmp	r2, r3
 8006722:	d002      	beq.n	800672a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006724:	78bb      	ldrb	r3, [r7, #2]
 8006726:	2bff      	cmp	r3, #255	; 0xff
 8006728:	d109      	bne.n	800673e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800672e:	787a      	ldrb	r2, [r7, #1]
 8006730:	429a      	cmp	r2, r3
 8006732:	d002      	beq.n	800673a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006734:	787b      	ldrb	r3, [r7, #1]
 8006736:	2bff      	cmp	r3, #255	; 0xff
 8006738:	d101      	bne.n	800673e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	e006      	b.n	800674c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	3301      	adds	r3, #1
 8006742:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006744:	7dfb      	ldrb	r3, [r7, #23]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d9d6      	bls.n	80066f8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800674a:	23ff      	movs	r3, #255	; 0xff
}
 800674c:	4618      	mov	r0, r3
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f004 fd35 	bl	800b1d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006766:	2101      	movs	r1, #1
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f004 fe4e 	bl	800b40a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af04      	add	r7, sp, #16
 800677e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006780:	2302      	movs	r3, #2
 8006782:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b01      	cmp	r3, #1
 8006792:	d102      	bne.n	800679a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2203      	movs	r2, #3
 8006798:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b0b      	cmp	r3, #11
 80067a2:	f200 823c 	bhi.w	8006c1e <USBH_Process+0x4a6>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <USBH_Process+0x34>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067dd 	.word	0x080067dd
 80067b0:	0800682b 	.word	0x0800682b
 80067b4:	080068af 	.word	0x080068af
 80067b8:	08006b9d 	.word	0x08006b9d
 80067bc:	08006c1f 	.word	0x08006c1f
 80067c0:	0800696f 	.word	0x0800696f
 80067c4:	08006b27 	.word	0x08006b27
 80067c8:	080069c1 	.word	0x080069c1
 80067cc:	080069fd 	.word	0x080069fd
 80067d0:	08006a37 	.word	0x08006a37
 80067d4:	08006a7f 	.word	0x08006a7f
 80067d8:	08006b85 	.word	0x08006b85
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 821c 	beq.w	8006c22 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80067f0:	20c8      	movs	r0, #200	; 0xc8
 80067f2:	f004 fe51 	bl	800b498 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f004 fd47 	bl	800b28a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006820:	2300      	movs	r3, #0
 8006822:	2200      	movs	r2, #0
 8006824:	f001 fd92 	bl	800834c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006828:	e1fb      	b.n	8006c22 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006830:	2b01      	cmp	r3, #1
 8006832:	d107      	bne.n	8006844 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	e025      	b.n	8006890 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800684a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800684e:	d914      	bls.n	800687a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006856:	3301      	adds	r3, #1
 8006858:	b2da      	uxtb	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006866:	2b03      	cmp	r3, #3
 8006868:	d903      	bls.n	8006872 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	220d      	movs	r2, #13
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	e00e      	b.n	8006890 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	e00a      	b.n	8006890 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006880:	f103 020a 	add.w	r2, r3, #10
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800688a:	200a      	movs	r0, #10
 800688c:	f004 fe04 	bl	800b498 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068a4:	2300      	movs	r3, #0
 80068a6:	2200      	movs	r2, #0
 80068a8:	f001 fd50 	bl	800834c <osMessageQueuePut>
#endif
#endif
      break;
 80068ac:	e1c0      	b.n	8006c30 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068be:	2104      	movs	r1, #4
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80068c4:	2064      	movs	r0, #100	; 0x64
 80068c6:	f004 fde7 	bl	800b498 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f004 fcb6 	bl	800b23c <USBH_LL_GetSpeed>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2205      	movs	r2, #5
 80068de:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80068e0:	2100      	movs	r1, #0
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 fb21 	bl	8007f2a <USBH_AllocPipe>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80068f0:	2180      	movs	r1, #128	; 0x80
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 fb19 	bl	8007f2a <USBH_AllocPipe>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	7919      	ldrb	r1, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006914:	b292      	uxth	r2, r2
 8006916:	9202      	str	r2, [sp, #8]
 8006918:	2200      	movs	r2, #0
 800691a:	9201      	str	r2, [sp, #4]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	4603      	mov	r3, r0
 8006920:	2280      	movs	r2, #128	; 0x80
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f001 fad2 	bl	8007ecc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	7959      	ldrb	r1, [r3, #5]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800693c:	b292      	uxth	r2, r2
 800693e:	9202      	str	r2, [sp, #8]
 8006940:	2200      	movs	r2, #0
 8006942:	9201      	str	r2, [sp, #4]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	4603      	mov	r3, r0
 8006948:	2200      	movs	r2, #0
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 fabe 	bl	8007ecc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006964:	2300      	movs	r3, #0
 8006966:	2200      	movs	r2, #0
 8006968:	f001 fcf0 	bl	800834c <osMessageQueuePut>
#endif
#endif
      break;
 800696c:	e160      	b.n	8006c30 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f964 	bl	8006c3c <USBH_HandleEnum>
 8006974:	4603      	mov	r3, r0
 8006976:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 8152 	bne.w	8006c26 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006990:	2b01      	cmp	r3, #1
 8006992:	d103      	bne.n	800699c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2208      	movs	r2, #8
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	e002      	b.n	80069a2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2207      	movs	r2, #7
 80069a0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2205      	movs	r2, #5
 80069a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80069b6:	2300      	movs	r3, #0
 80069b8:	2200      	movs	r2, #0
 80069ba:	f001 fcc7 	bl	800834c <osMessageQueuePut>
#endif
#endif
      }
      break;
 80069be:	e132      	b.n	8006c26 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 812f 	beq.w	8006c2a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069d2:	2101      	movs	r1, #1
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2208      	movs	r2, #8
 80069dc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2205      	movs	r2, #5
 80069e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80069f2:	2300      	movs	r3, #0
 80069f4:	2200      	movs	r2, #0
 80069f6:	f001 fca9 	bl	800834c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80069fa:	e116      	b.n	8006c2a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fcf8 	bl	80073fc <USBH_SetCfg>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d102      	bne.n	8006a18 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2209      	movs	r2, #9
 8006a16:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f001 fc8c 	bl	800834c <osMessageQueuePut>
#endif
#endif
      break;
 8006a34:	e0fc      	b.n	8006c30 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006a44:	2101      	movs	r1, #1
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fcfb 	bl	8007442 <USBH_SetFeature>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	220a      	movs	r2, #10
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	e002      	b.n	8006a60 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	220a      	movs	r2, #10
 8006a5e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006a74:	2300      	movs	r3, #0
 8006a76:	2200      	movs	r2, #0
 8006a78:	f001 fc68 	bl	800834c <osMessageQueuePut>
#endif
#endif
      break;
 8006a7c:	e0d8      	b.n	8006c30 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d03f      	beq.n	8006b08 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a90:	2300      	movs	r3, #0
 8006a92:	73fb      	strb	r3, [r7, #15]
 8006a94:	e016      	b.n	8006ac4 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a96:	7bfa      	ldrb	r2, [r7, #15]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	32de      	adds	r2, #222	; 0xde
 8006a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa0:	791a      	ldrb	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d108      	bne.n	8006abe <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006aac:	7bfa      	ldrb	r2, [r7, #15]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	32de      	adds	r2, #222	; 0xde
 8006ab2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006abc:	e005      	b.n	8006aca <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	73fb      	strb	r3, [r7, #15]
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0e5      	beq.n	8006a96 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d016      	beq.n	8006b02 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2206      	movs	r2, #6
 8006aea:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006af2:	2103      	movs	r1, #3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
 8006af8:	e006      	b.n	8006b08 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	220d      	movs	r2, #13
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	e002      	b.n	8006b08 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	220d      	movs	r2, #13
 8006b06:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2205      	movs	r2, #5
 8006b0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f001 fc14 	bl	800834c <osMessageQueuePut>
#endif
#endif
      break;
 8006b24:	e084      	b.n	8006c30 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d017      	beq.n	8006b60 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d103      	bne.n	8006b50 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	220b      	movs	r2, #11
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	e00a      	b.n	8006b66 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d106      	bne.n	8006b66 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	220d      	movs	r2, #13
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	e002      	b.n	8006b66 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	220d      	movs	r2, #13
 8006b64:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2205      	movs	r2, #5
 8006b6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f001 fbe5 	bl	800834c <osMessageQueuePut>
#endif
#endif
      break;
 8006b82:	e055      	b.n	8006c30 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d04f      	beq.n	8006c2e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	4798      	blx	r3
      }
      break;
 8006b9a:	e048      	b.n	8006c2e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff fcf7 	bl	8006598 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d009      	beq.n	8006bc8 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d005      	beq.n	8006bde <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bd8:	2105      	movs	r1, #5
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d107      	bne.n	8006bfa <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fdb0 	bl	8006758 <USBH_Start>
 8006bf8:	e002      	b.n	8006c00 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f004 fae8 	bl	800b1d0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006c14:	2300      	movs	r3, #0
 8006c16:	2200      	movs	r2, #0
 8006c18:	f001 fb98 	bl	800834c <osMessageQueuePut>
#endif
#endif
      break;
 8006c1c:	e008      	b.n	8006c30 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8006c1e:	bf00      	nop
 8006c20:	e006      	b.n	8006c30 <USBH_Process+0x4b8>
      break;
 8006c22:	bf00      	nop
 8006c24:	e004      	b.n	8006c30 <USBH_Process+0x4b8>
      break;
 8006c26:	bf00      	nop
 8006c28:	e002      	b.n	8006c30 <USBH_Process+0x4b8>
    break;
 8006c2a:	bf00      	nop
 8006c2c:	e000      	b.n	8006c30 <USBH_Process+0x4b8>
      break;
 8006c2e:	bf00      	nop
  }
  return USBH_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop

08006c3c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af04      	add	r7, sp, #16
 8006c42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006c44:	2301      	movs	r3, #1
 8006c46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b07      	cmp	r3, #7
 8006c52:	f200 8208 	bhi.w	8007066 <USBH_HandleEnum+0x42a>
 8006c56:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <USBH_HandleEnum+0x20>)
 8006c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5c:	08006c7d 	.word	0x08006c7d
 8006c60:	08006d3b 	.word	0x08006d3b
 8006c64:	08006da5 	.word	0x08006da5
 8006c68:	08006e33 	.word	0x08006e33
 8006c6c:	08006e9d 	.word	0x08006e9d
 8006c70:	08006f0d 	.word	0x08006f0d
 8006c74:	08006fa9 	.word	0x08006fa9
 8006c78:	08007027 	.word	0x08007027
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006c7c:	2108      	movs	r1, #8
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 faec 	bl	800725c <USBH_Get_DevDesc>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d130      	bne.n	8006cf0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	7919      	ldrb	r1, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006cb2:	b292      	uxth	r2, r2
 8006cb4:	9202      	str	r2, [sp, #8]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	9201      	str	r2, [sp, #4]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2280      	movs	r2, #128	; 0x80
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 f903 	bl	8007ecc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	7959      	ldrb	r1, [r3, #5]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cda:	b292      	uxth	r2, r2
 8006cdc:	9202      	str	r2, [sp, #8]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	9201      	str	r2, [sp, #4]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 f8ef 	bl	8007ecc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006cee:	e1bc      	b.n	800706a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	f040 81b9 	bne.w	800706a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cfe:	3301      	adds	r3, #1
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d903      	bls.n	8006d1a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	220d      	movs	r2, #13
 8006d16:	701a      	strb	r2, [r3, #0]
      break;
 8006d18:	e1a7      	b.n	800706a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	795b      	ldrb	r3, [r3, #5]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 f923 	bl	8007f6c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	791b      	ldrb	r3, [r3, #4]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 f91d 	bl	8007f6c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	701a      	strb	r2, [r3, #0]
      break;
 8006d38:	e197      	b.n	800706a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006d3a:	2112      	movs	r1, #18
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fa8d 	bl	800725c <USBH_Get_DevDesc>
 8006d42:	4603      	mov	r3, r0
 8006d44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d103      	bne.n	8006d54 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d52:	e18c      	b.n	800706e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	f040 8189 	bne.w	800706e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d62:	3301      	adds	r3, #1
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d903      	bls.n	8006d7e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	220d      	movs	r2, #13
 8006d7a:	701a      	strb	r2, [r3, #0]
      break;
 8006d7c:	e177      	b.n	800706e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	795b      	ldrb	r3, [r3, #5]
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 f8f1 	bl	8007f6c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	791b      	ldrb	r3, [r3, #4]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 f8eb 	bl	8007f6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	701a      	strb	r2, [r3, #0]
      break;
 8006da2:	e164      	b.n	800706e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006da4:	2101      	movs	r1, #1
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fb04 	bl	80073b4 <USBH_SetAddress>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d132      	bne.n	8006e1c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006db6:	2002      	movs	r0, #2
 8006db8:	f004 fb6e 	bl	800b498 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2203      	movs	r2, #3
 8006dc8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	7919      	ldrb	r1, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006dde:	b292      	uxth	r2, r2
 8006de0:	9202      	str	r2, [sp, #8]
 8006de2:	2200      	movs	r2, #0
 8006de4:	9201      	str	r2, [sp, #4]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	4603      	mov	r3, r0
 8006dea:	2280      	movs	r2, #128	; 0x80
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 f86d 	bl	8007ecc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7959      	ldrb	r1, [r3, #5]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e06:	b292      	uxth	r2, r2
 8006e08:	9202      	str	r2, [sp, #8]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	9201      	str	r2, [sp, #4]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	4603      	mov	r3, r0
 8006e12:	2200      	movs	r2, #0
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 f859 	bl	8007ecc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e1a:	e12a      	b.n	8007072 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	f040 8127 	bne.w	8007072 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	220d      	movs	r2, #13
 8006e28:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	705a      	strb	r2, [r3, #1]
      break;
 8006e30:	e11f      	b.n	8007072 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006e32:	2109      	movs	r1, #9
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fa39 	bl	80072ac <USBH_Get_CfgDesc>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d103      	bne.n	8006e4c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2204      	movs	r2, #4
 8006e48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e4a:	e114      	b.n	8007076 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	f040 8111 	bne.w	8007076 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d903      	bls.n	8006e76 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	220d      	movs	r2, #13
 8006e72:	701a      	strb	r2, [r3, #0]
      break;
 8006e74:	e0ff      	b.n	8007076 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	795b      	ldrb	r3, [r3, #5]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 f875 	bl	8007f6c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	791b      	ldrb	r3, [r3, #4]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 f86f 	bl	8007f6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	701a      	strb	r2, [r3, #0]
      break;
 8006e9a:	e0ec      	b.n	8007076 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fa01 	bl	80072ac <USBH_Get_CfgDesc>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2205      	movs	r2, #5
 8006eb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006eba:	e0de      	b.n	800707a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	f040 80db 	bne.w	800707a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006eca:	3301      	adds	r3, #1
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d903      	bls.n	8006ee6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	220d      	movs	r2, #13
 8006ee2:	701a      	strb	r2, [r3, #0]
      break;
 8006ee4:	e0c9      	b.n	800707a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	795b      	ldrb	r3, [r3, #5]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 f83d 	bl	8007f6c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	791b      	ldrb	r3, [r3, #4]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 f837 	bl	8007f6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	701a      	strb	r2, [r3, #0]
      break;
 8006f0a:	e0b6      	b.n	800707a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d036      	beq.n	8006f84 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f22:	23ff      	movs	r3, #255	; 0xff
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f9e5 	bl	80072f4 <USBH_Get_StringDesc>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d111      	bne.n	8006f58 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2206      	movs	r2, #6
 8006f38:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2205      	movs	r2, #5
 8006f3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2200      	movs	r2, #0
 8006f52:	f001 f9fb 	bl	800834c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f56:	e092      	b.n	800707e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	f040 808f 	bne.w	800707e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2206      	movs	r2, #6
 8006f64:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2205      	movs	r2, #5
 8006f6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f001 f9e5 	bl	800834c <osMessageQueuePut>
      break;
 8006f82:	e07c      	b.n	800707e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2206      	movs	r2, #6
 8006f88:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2205      	movs	r2, #5
 8006f8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f001 f9d3 	bl	800834c <osMessageQueuePut>
      break;
 8006fa6:	e06a      	b.n	800707e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d027      	beq.n	8007002 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006fbe:	23ff      	movs	r3, #255	; 0xff
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f997 	bl	80072f4 <USBH_Get_StringDesc>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d103      	bne.n	8006fd8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2207      	movs	r2, #7
 8006fd4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fd6:	e054      	b.n	8007082 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d151      	bne.n	8007082 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2207      	movs	r2, #7
 8006fe2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2205      	movs	r2, #5
 8006fe8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f001 f9a6 	bl	800834c <osMessageQueuePut>
      break;
 8007000:	e03f      	b.n	8007082 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2207      	movs	r2, #7
 8007006:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2205      	movs	r2, #5
 800700c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800701c:	2300      	movs	r3, #0
 800701e:	2200      	movs	r2, #0
 8007020:	f001 f994 	bl	800834c <osMessageQueuePut>
      break;
 8007024:	e02d      	b.n	8007082 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800702c:	2b00      	cmp	r3, #0
 800702e:	d017      	beq.n	8007060 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800703c:	23ff      	movs	r3, #255	; 0xff
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f958 	bl	80072f4 <USBH_Get_StringDesc>
 8007044:	4603      	mov	r3, r0
 8007046:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d102      	bne.n	8007054 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007052:	e018      	b.n	8007086 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007054:	7bbb      	ldrb	r3, [r7, #14]
 8007056:	2b03      	cmp	r3, #3
 8007058:	d115      	bne.n	8007086 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]
      break;
 800705e:	e012      	b.n	8007086 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	73fb      	strb	r3, [r7, #15]
      break;
 8007064:	e00f      	b.n	8007086 <USBH_HandleEnum+0x44a>

    default:
      break;
 8007066:	bf00      	nop
 8007068:	e00e      	b.n	8007088 <USBH_HandleEnum+0x44c>
      break;
 800706a:	bf00      	nop
 800706c:	e00c      	b.n	8007088 <USBH_HandleEnum+0x44c>
      break;
 800706e:	bf00      	nop
 8007070:	e00a      	b.n	8007088 <USBH_HandleEnum+0x44c>
      break;
 8007072:	bf00      	nop
 8007074:	e008      	b.n	8007088 <USBH_HandleEnum+0x44c>
      break;
 8007076:	bf00      	nop
 8007078:	e006      	b.n	8007088 <USBH_HandleEnum+0x44c>
      break;
 800707a:	bf00      	nop
 800707c:	e004      	b.n	8007088 <USBH_HandleEnum+0x44c>
      break;
 800707e:	bf00      	nop
 8007080:	e002      	b.n	8007088 <USBH_HandleEnum+0x44c>
      break;
 8007082:	bf00      	nop
 8007084:	e000      	b.n	8007088 <USBH_HandleEnum+0x44c>
      break;
 8007086:	bf00      	nop
  }
  return Status;
 8007088:	7bfb      	ldrb	r3, [r7, #15]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop

08007094 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f804 	bl	80070d6 <USBH_HandleSof>
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b0b      	cmp	r3, #11
 80070e6:	d10a      	bne.n	80070fe <USBH_HandleSof+0x28>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	4798      	blx	r3
  }
}
 80070fe:	bf00      	nop
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800712a:	2300      	movs	r3, #0
 800712c:	2200      	movs	r2, #0
 800712e:	f001 f90d 	bl	800834c <osMessageQueuePut>
#endif
#endif

  return;
 8007132:	bf00      	nop
}
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800714a:	bf00      	nop
}
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800718a:	2300      	movs	r3, #0
 800718c:	2200      	movs	r2, #0
 800718e:	f001 f8dd 	bl	800834c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f004 f822 	bl	800b206 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	791b      	ldrb	r3, [r3, #4]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fecf 	bl	8007f6c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	795b      	ldrb	r3, [r3, #5]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fec9 	bl	8007f6c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80071ee:	2300      	movs	r3, #0
 80071f0:	2200      	movs	r2, #0
 80071f2:	f001 f8ab 	bl	800834c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007218:	2200      	movs	r2, #0
 800721a:	f001 f8f7 	bl	800840c <osMessageQueueGet>
 800721e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f0      	bne.n	8007208 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff faa6 	bl	8006778 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800722c:	e7ec      	b.n	8007208 <USBH_Process_OS+0x8>

0800722e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800724a:	2300      	movs	r3, #0
 800724c:	2200      	movs	r2, #0
 800724e:	f001 f87d 	bl	800834c <osMessageQueuePut>
#endif

  return USBH_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af02      	add	r7, sp, #8
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	b29b      	uxth	r3, r3
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	4613      	mov	r3, r2
 8007276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800727a:	2100      	movs	r1, #0
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f864 	bl	800734a <USBH_GetDescriptor>
 8007282:	4603      	mov	r3, r0
 8007284:	73fb      	strb	r3, [r7, #15]
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007298:	78fa      	ldrb	r2, [r7, #3]
 800729a:	b292      	uxth	r2, r2
 800729c:	4619      	mov	r1, r3
 800729e:	f000 f918 	bl	80074d2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	331c      	adds	r3, #28
 80072bc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80072be:	887b      	ldrh	r3, [r7, #2]
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072c8:	2100      	movs	r1, #0
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f83d 	bl	800734a <USBH_GetDescriptor>
 80072d0:	4603      	mov	r3, r0
 80072d2:	72fb      	strb	r3, [r7, #11]
 80072d4:	7afb      	ldrb	r3, [r7, #11]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d107      	bne.n	80072ea <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80072e0:	887a      	ldrh	r2, [r7, #2]
 80072e2:	68f9      	ldr	r1, [r7, #12]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 f964 	bl	80075b2 <USBH_ParseCfgDesc>
  }

  return status;
 80072ea:	7afb      	ldrb	r3, [r7, #11]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b088      	sub	sp, #32
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	607a      	str	r2, [r7, #4]
 80072fe:	461a      	mov	r2, r3
 8007300:	460b      	mov	r3, r1
 8007302:	72fb      	strb	r3, [r7, #11]
 8007304:	4613      	mov	r3, r2
 8007306:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007308:	7afb      	ldrb	r3, [r7, #11]
 800730a:	b29b      	uxth	r3, r3
 800730c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007310:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007318:	893b      	ldrh	r3, [r7, #8]
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	460b      	mov	r3, r1
 800731e:	2100      	movs	r1, #0
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 f812 	bl	800734a <USBH_GetDescriptor>
 8007326:	4603      	mov	r3, r0
 8007328:	75fb      	strb	r3, [r7, #23]
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d107      	bne.n	8007340 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007336:	893a      	ldrh	r2, [r7, #8]
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fa37 	bl	80077ae <USBH_ParseStringDesc>
  }

  return status;
 8007340:	7dfb      	ldrb	r3, [r7, #23]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	607b      	str	r3, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	72fb      	strb	r3, [r7, #11]
 8007358:	4613      	mov	r3, r2
 800735a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	789b      	ldrb	r3, [r3, #2]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d11c      	bne.n	800739e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800736a:	b2da      	uxtb	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2206      	movs	r2, #6
 8007374:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	893a      	ldrh	r2, [r7, #8]
 800737a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800737c:	893b      	ldrh	r3, [r7, #8]
 800737e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007386:	d104      	bne.n	8007392 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f240 4209 	movw	r2, #1033	; 0x409
 800738e:	829a      	strh	r2, [r3, #20]
 8007390:	e002      	b.n	8007398 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8b3a      	ldrh	r2, [r7, #24]
 800739c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800739e:	8b3b      	ldrh	r3, [r7, #24]
 80073a0:	461a      	mov	r2, r3
 80073a2:	6879      	ldr	r1, [r7, #4]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fa50 	bl	800784a <USBH_CtlReq>
 80073aa:	4603      	mov	r3, r0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	789b      	ldrb	r3, [r3, #2]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d10f      	bne.n	80073e8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2205      	movs	r2, #5
 80073d2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80073e8:	2200      	movs	r2, #0
 80073ea:	2100      	movs	r1, #0
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fa2c 	bl	800784a <USBH_CtlReq>
 80073f2:	4603      	mov	r3, r0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	789b      	ldrb	r3, [r3, #2]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d10e      	bne.n	800742e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2209      	movs	r2, #9
 800741a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	887a      	ldrh	r2, [r7, #2]
 8007420:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800742e:	2200      	movs	r2, #0
 8007430:	2100      	movs	r1, #0
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fa09 	bl	800784a <USBH_CtlReq>
 8007438:	4603      	mov	r3, r0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	789b      	ldrb	r3, [r3, #2]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d10f      	bne.n	8007476 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2203      	movs	r2, #3
 8007460:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	b29a      	uxth	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007476:	2200      	movs	r2, #0
 8007478:	2100      	movs	r1, #0
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f9e5 	bl	800784a <USBH_CtlReq>
 8007480:	4603      	mov	r3, r0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	789b      	ldrb	r3, [r3, #2]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d10f      	bne.n	80074be <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2202      	movs	r2, #2
 80074a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80074be:	2200      	movs	r2, #0
 80074c0:	2100      	movs	r1, #0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f9c1 	bl	800784a <USBH_CtlReq>
 80074c8:	4603      	mov	r3, r0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	4613      	mov	r3, r2
 80074de:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	781a      	ldrb	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	785a      	ldrb	r2, [r3, #1]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	3302      	adds	r3, #2
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	3303      	adds	r3, #3
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	021b      	lsls	r3, r3, #8
 8007502:	b29b      	uxth	r3, r3
 8007504:	4313      	orrs	r3, r2
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	791a      	ldrb	r2, [r3, #4]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	795a      	ldrb	r2, [r3, #5]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	799a      	ldrb	r2, [r3, #6]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	79da      	ldrb	r2, [r3, #7]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800752c:	88fb      	ldrh	r3, [r7, #6]
 800752e:	2b08      	cmp	r3, #8
 8007530:	d939      	bls.n	80075a6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	3308      	adds	r3, #8
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	b29a      	uxth	r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	3309      	adds	r3, #9
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	b29b      	uxth	r3, r3
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	b29b      	uxth	r3, r3
 8007546:	4313      	orrs	r3, r2
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	330a      	adds	r3, #10
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	b29a      	uxth	r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	330b      	adds	r3, #11
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	021b      	lsls	r3, r3, #8
 8007560:	b29b      	uxth	r3, r3
 8007562:	4313      	orrs	r3, r2
 8007564:	b29a      	uxth	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	330c      	adds	r3, #12
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	b29a      	uxth	r2, r3
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	330d      	adds	r3, #13
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	021b      	lsls	r3, r3, #8
 800757c:	b29b      	uxth	r3, r3
 800757e:	4313      	orrs	r3, r2
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	7b9a      	ldrb	r2, [r3, #14]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	7bda      	ldrb	r2, [r3, #15]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	7c1a      	ldrb	r2, [r3, #16]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	7c5a      	ldrb	r2, [r3, #17]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	745a      	strb	r2, [r3, #17]
  }
}
 80075a6:	bf00      	nop
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b08a      	sub	sp, #40	; 0x28
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	4613      	mov	r3, r2
 80075be:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	781a      	ldrb	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	785a      	ldrb	r2, [r3, #1]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	3302      	adds	r3, #2
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	3303      	adds	r3, #3
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	4313      	orrs	r3, r2
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	791a      	ldrb	r2, [r3, #4]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	795a      	ldrb	r2, [r3, #5]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	799a      	ldrb	r2, [r3, #6]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	79da      	ldrb	r2, [r3, #7]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	7a1a      	ldrb	r2, [r3, #8]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007628:	88fb      	ldrh	r3, [r7, #6]
 800762a:	2b09      	cmp	r3, #9
 800762c:	d95f      	bls.n	80076ee <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800762e:	2309      	movs	r3, #9
 8007630:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007632:	2300      	movs	r3, #0
 8007634:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007636:	e051      	b.n	80076dc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007638:	f107 0316 	add.w	r3, r7, #22
 800763c:	4619      	mov	r1, r3
 800763e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007640:	f000 f8e8 	bl	8007814 <USBH_GetNextDesc>
 8007644:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b04      	cmp	r3, #4
 800764c:	d146      	bne.n	80076dc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800764e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007652:	221a      	movs	r2, #26
 8007654:	fb02 f303 	mul.w	r3, r2, r3
 8007658:	3308      	adds	r3, #8
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	3302      	adds	r3, #2
 8007660:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007664:	69f8      	ldr	r0, [r7, #28]
 8007666:	f000 f846 	bl	80076f6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007670:	2300      	movs	r3, #0
 8007672:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007674:	e022      	b.n	80076bc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007676:	f107 0316 	add.w	r3, r7, #22
 800767a:	4619      	mov	r1, r3
 800767c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800767e:	f000 f8c9 	bl	8007814 <USBH_GetNextDesc>
 8007682:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	2b05      	cmp	r3, #5
 800768a:	d117      	bne.n	80076bc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800768c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007690:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007694:	3201      	adds	r2, #1
 8007696:	00d2      	lsls	r2, r2, #3
 8007698:	211a      	movs	r1, #26
 800769a:	fb01 f303 	mul.w	r3, r1, r3
 800769e:	4413      	add	r3, r2
 80076a0:	3308      	adds	r3, #8
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	3304      	adds	r3, #4
 80076a8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80076aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ac:	69b8      	ldr	r0, [r7, #24]
 80076ae:	f000 f851 	bl	8007754 <USBH_ParseEPDesc>
            ep_ix++;
 80076b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80076b6:	3301      	adds	r3, #1
 80076b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	791b      	ldrb	r3, [r3, #4]
 80076c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d204      	bcs.n	80076d2 <USBH_ParseCfgDesc+0x120>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	885a      	ldrh	r2, [r3, #2]
 80076cc:	8afb      	ldrh	r3, [r7, #22]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d8d1      	bhi.n	8007676 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80076d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076d6:	3301      	adds	r3, #1
 80076d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d804      	bhi.n	80076ee <USBH_ParseCfgDesc+0x13c>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	885a      	ldrh	r2, [r3, #2]
 80076e8:	8afb      	ldrh	r3, [r7, #22]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d8a4      	bhi.n	8007638 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80076ee:	bf00      	nop
 80076f0:	3728      	adds	r7, #40	; 0x28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b083      	sub	sp, #12
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781a      	ldrb	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	785a      	ldrb	r2, [r3, #1]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	789a      	ldrb	r2, [r3, #2]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	78da      	ldrb	r2, [r3, #3]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	791a      	ldrb	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	795a      	ldrb	r2, [r3, #5]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	799a      	ldrb	r2, [r3, #6]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	79da      	ldrb	r2, [r3, #7]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	7a1a      	ldrb	r2, [r3, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	721a      	strb	r2, [r3, #8]
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781a      	ldrb	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	785a      	ldrb	r2, [r3, #1]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	789a      	ldrb	r2, [r3, #2]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	78da      	ldrb	r2, [r3, #3]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	3304      	adds	r3, #4
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b29a      	uxth	r2, r3
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	3305      	adds	r3, #5
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	b29b      	uxth	r3, r3
 8007792:	4313      	orrs	r3, r2
 8007794:	b29a      	uxth	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	799a      	ldrb	r2, [r3, #6]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	719a      	strb	r2, [r3, #6]
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b087      	sub	sp, #28
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	4613      	mov	r3, r2
 80077ba:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3301      	adds	r3, #1
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d120      	bne.n	8007808 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	1e9a      	subs	r2, r3, #2
 80077cc:	88fb      	ldrh	r3, [r7, #6]
 80077ce:	4293      	cmp	r3, r2
 80077d0:	bf28      	it	cs
 80077d2:	4613      	movcs	r3, r2
 80077d4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3302      	adds	r3, #2
 80077da:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077dc:	2300      	movs	r3, #0
 80077de:	82fb      	strh	r3, [r7, #22]
 80077e0:	e00b      	b.n	80077fa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077e2:	8afb      	ldrh	r3, [r7, #22]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	781a      	ldrb	r2, [r3, #0]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	3301      	adds	r3, #1
 80077f2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80077f4:	8afb      	ldrh	r3, [r7, #22]
 80077f6:	3302      	adds	r3, #2
 80077f8:	82fb      	strh	r3, [r7, #22]
 80077fa:	8afa      	ldrh	r2, [r7, #22]
 80077fc:	8abb      	ldrh	r3, [r7, #20]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d3ef      	bcc.n	80077e2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]
  }
}
 8007808:	bf00      	nop
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	881a      	ldrh	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	4413      	add	r3, r2
 800782a:	b29a      	uxth	r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4413      	add	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800783c:	68fb      	ldr	r3, [r7, #12]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b086      	sub	sp, #24
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	4613      	mov	r3, r2
 8007856:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007858:	2301      	movs	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	789b      	ldrb	r3, [r3, #2]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d002      	beq.n	800786a <USBH_CtlReq+0x20>
 8007864:	2b02      	cmp	r3, #2
 8007866:	d01d      	beq.n	80078a4 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8007868:	e043      	b.n	80078f2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	88fa      	ldrh	r2, [r7, #6]
 8007874:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2202      	movs	r2, #2
 8007880:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007882:	2301      	movs	r3, #1
 8007884:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2203      	movs	r2, #3
 800788a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800789a:	2300      	movs	r3, #0
 800789c:	2200      	movs	r2, #0
 800789e:	f000 fd55 	bl	800834c <osMessageQueuePut>
      break;
 80078a2:	e026      	b.n	80078f2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f829 	bl	80078fc <USBH_HandleControl>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <USBH_CtlReq+0x70>
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d106      	bne.n	80078c8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	761a      	strb	r2, [r3, #24]
 80078c6:	e005      	b.n	80078d4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d102      	bne.n	80078d4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2203      	movs	r2, #3
 80078d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80078e8:	2300      	movs	r3, #0
 80078ea:	2200      	movs	r2, #0
 80078ec:	f000 fd2e 	bl	800834c <osMessageQueuePut>
      break;
 80078f0:	bf00      	nop
  }
  return status;
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af02      	add	r7, sp, #8
 8007902:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007904:	2301      	movs	r3, #1
 8007906:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007908:	2300      	movs	r3, #0
 800790a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7e1b      	ldrb	r3, [r3, #24]
 8007910:	3b01      	subs	r3, #1
 8007912:	2b0a      	cmp	r3, #10
 8007914:	f200 8229 	bhi.w	8007d6a <USBH_HandleControl+0x46e>
 8007918:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <USBH_HandleControl+0x24>)
 800791a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791e:	bf00      	nop
 8007920:	0800794d 	.word	0x0800794d
 8007924:	08007967 	.word	0x08007967
 8007928:	08007a09 	.word	0x08007a09
 800792c:	08007a2f 	.word	0x08007a2f
 8007930:	08007abb 	.word	0x08007abb
 8007934:	08007ae5 	.word	0x08007ae5
 8007938:	08007ba7 	.word	0x08007ba7
 800793c:	08007bc9 	.word	0x08007bc9
 8007940:	08007c5b 	.word	0x08007c5b
 8007944:	08007c81 	.word	0x08007c81
 8007948:	08007d13 	.word	0x08007d13
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f103 0110 	add.w	r1, r3, #16
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	795b      	ldrb	r3, [r3, #5]
 8007956:	461a      	mov	r2, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fa17 	bl	8007d8c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2202      	movs	r2, #2
 8007962:	761a      	strb	r2, [r3, #24]
      break;
 8007964:	e20c      	b.n	8007d80 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	795b      	ldrb	r3, [r3, #5]
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f003 fd39 	bl	800b3e4 <USBH_LL_GetURBState>
 8007972:	4603      	mov	r3, r0
 8007974:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d12c      	bne.n	80079d6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	7c1b      	ldrb	r3, [r3, #16]
 8007980:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007984:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	8adb      	ldrh	r3, [r3, #22]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800798e:	7b7b      	ldrb	r3, [r7, #13]
 8007990:	2b80      	cmp	r3, #128	; 0x80
 8007992:	d103      	bne.n	800799c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2203      	movs	r2, #3
 8007998:	761a      	strb	r2, [r3, #24]
 800799a:	e00d      	b.n	80079b8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2205      	movs	r2, #5
 80079a0:	761a      	strb	r2, [r3, #24]
 80079a2:	e009      	b.n	80079b8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80079a4:	7b7b      	ldrb	r3, [r7, #13]
 80079a6:	2b80      	cmp	r3, #128	; 0x80
 80079a8:	d103      	bne.n	80079b2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2209      	movs	r2, #9
 80079ae:	761a      	strb	r2, [r3, #24]
 80079b0:	e002      	b.n	80079b8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2207      	movs	r2, #7
 80079b6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2203      	movs	r2, #3
 80079bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80079cc:	2300      	movs	r3, #0
 80079ce:	2200      	movs	r2, #0
 80079d0:	f000 fcbc 	bl	800834c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079d4:	e1cb      	b.n	8007d6e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d003      	beq.n	80079e4 <USBH_HandleControl+0xe8>
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	f040 81c5 	bne.w	8007d6e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	220b      	movs	r2, #11
 80079e8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2203      	movs	r2, #3
 80079ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80079fe:	2300      	movs	r3, #0
 8007a00:	2200      	movs	r2, #0
 8007a02:	f000 fca3 	bl	800834c <osMessageQueuePut>
      break;
 8007a06:	e1b2      	b.n	8007d6e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6899      	ldr	r1, [r3, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	899a      	ldrh	r2, [r3, #12]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	791b      	ldrb	r3, [r3, #4]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f9f2 	bl	8007e0a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2204      	movs	r2, #4
 8007a2a:	761a      	strb	r2, [r3, #24]
      break;
 8007a2c:	e1a8      	b.n	8007d80 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	791b      	ldrb	r3, [r3, #4]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f003 fcd5 	bl	800b3e4 <USBH_LL_GetURBState>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d110      	bne.n	8007a66 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2209      	movs	r2, #9
 8007a48:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2203      	movs	r2, #3
 8007a4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a5e:	2300      	movs	r3, #0
 8007a60:	2200      	movs	r2, #0
 8007a62:	f000 fc73 	bl	800834c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b05      	cmp	r3, #5
 8007a6a:	d110      	bne.n	8007a8e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2203      	movs	r2, #3
 8007a74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a84:	2300      	movs	r3, #0
 8007a86:	2200      	movs	r2, #0
 8007a88:	f000 fc60 	bl	800834c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a8c:	e171      	b.n	8007d72 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	f040 816e 	bne.w	8007d72 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	220b      	movs	r2, #11
 8007a9a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2203      	movs	r2, #3
 8007aa0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f000 fc4a 	bl	800834c <osMessageQueuePut>
      break;
 8007ab8:	e15b      	b.n	8007d72 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6899      	ldr	r1, [r3, #8]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	899a      	ldrh	r2, [r3, #12]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	795b      	ldrb	r3, [r3, #5]
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	9000      	str	r0, [sp, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f978 	bl	8007dc0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2206      	movs	r2, #6
 8007ae0:	761a      	strb	r2, [r3, #24]
      break;
 8007ae2:	e14d      	b.n	8007d80 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	795b      	ldrb	r3, [r3, #5]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f003 fc7a 	bl	800b3e4 <USBH_LL_GetURBState>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d111      	bne.n	8007b1e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2207      	movs	r2, #7
 8007afe:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2203      	movs	r2, #3
 8007b04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b14:	2300      	movs	r3, #0
 8007b16:	2200      	movs	r2, #0
 8007b18:	f000 fc18 	bl	800834c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b1c:	e12b      	b.n	8007d76 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b05      	cmp	r3, #5
 8007b22:	d113      	bne.n	8007b4c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	220c      	movs	r2, #12
 8007b28:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2203      	movs	r2, #3
 8007b32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b42:	2300      	movs	r3, #0
 8007b44:	2200      	movs	r2, #0
 8007b46:	f000 fc01 	bl	800834c <osMessageQueuePut>
      break;
 8007b4a:	e114      	b.n	8007d76 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d111      	bne.n	8007b76 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2205      	movs	r2, #5
 8007b56:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2203      	movs	r2, #3
 8007b5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f000 fbec 	bl	800834c <osMessageQueuePut>
      break;
 8007b74:	e0ff      	b.n	8007d76 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	f040 80fc 	bne.w	8007d76 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	220b      	movs	r2, #11
 8007b82:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007b84:	2302      	movs	r3, #2
 8007b86:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f000 fbd4 	bl	800834c <osMessageQueuePut>
      break;
 8007ba4:	e0e7      	b.n	8007d76 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	791b      	ldrb	r3, [r3, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	2100      	movs	r1, #0
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f92b 	bl	8007e0a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2208      	movs	r2, #8
 8007bc4:	761a      	strb	r2, [r3, #24]

      break;
 8007bc6:	e0db      	b.n	8007d80 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	791b      	ldrb	r3, [r3, #4]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f003 fc08 	bl	800b3e4 <USBH_LL_GetURBState>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d113      	bne.n	8007c06 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	220d      	movs	r2, #13
 8007be2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2203      	movs	r2, #3
 8007bec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f000 fba4 	bl	800834c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c04:	e0b9      	b.n	8007d7a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d111      	bne.n	8007c30 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	220b      	movs	r2, #11
 8007c10:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2203      	movs	r2, #3
 8007c16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c26:	2300      	movs	r3, #0
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f000 fb8f 	bl	800834c <osMessageQueuePut>
      break;
 8007c2e:	e0a4      	b.n	8007d7a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	2b05      	cmp	r3, #5
 8007c34:	f040 80a1 	bne.w	8007d7a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2203      	movs	r2, #3
 8007c40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c50:	2300      	movs	r3, #0
 8007c52:	2200      	movs	r2, #0
 8007c54:	f000 fb7a 	bl	800834c <osMessageQueuePut>
      break;
 8007c58:	e08f      	b.n	8007d7a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	795b      	ldrb	r3, [r3, #5]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	9200      	str	r2, [sp, #0]
 8007c62:	2200      	movs	r2, #0
 8007c64:	2100      	movs	r1, #0
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f8aa 	bl	8007dc0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	220a      	movs	r2, #10
 8007c7c:	761a      	strb	r2, [r3, #24]
      break;
 8007c7e:	e07f      	b.n	8007d80 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	795b      	ldrb	r3, [r3, #5]
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f003 fbac 	bl	800b3e4 <USBH_LL_GetURBState>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d113      	bne.n	8007cbe <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	220d      	movs	r2, #13
 8007c9e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2203      	movs	r2, #3
 8007ca4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f000 fb48 	bl	800834c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007cbc:	e05f      	b.n	8007d7e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d111      	bne.n	8007ce8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2209      	movs	r2, #9
 8007cc8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2203      	movs	r2, #3
 8007cce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007cde:	2300      	movs	r3, #0
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f000 fb33 	bl	800834c <osMessageQueuePut>
      break;
 8007ce6:	e04a      	b.n	8007d7e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d147      	bne.n	8007d7e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	220b      	movs	r2, #11
 8007cf2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2203      	movs	r2, #3
 8007cf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d08:	2300      	movs	r3, #0
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f000 fb1e 	bl	800834c <osMessageQueuePut>
      break;
 8007d10:	e035      	b.n	8007d7e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7e5b      	ldrb	r3, [r3, #25]
 8007d16:	3301      	adds	r3, #1
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	765a      	strb	r2, [r3, #25]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7e5b      	ldrb	r3, [r3, #25]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d806      	bhi.n	8007d34 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007d32:	e025      	b.n	8007d80 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d3a:	2106      	movs	r1, #6
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	795b      	ldrb	r3, [r3, #5]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f90d 	bl	8007f6c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	791b      	ldrb	r3, [r3, #4]
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f907 	bl	8007f6c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007d64:	2302      	movs	r3, #2
 8007d66:	73fb      	strb	r3, [r7, #15]
      break;
 8007d68:	e00a      	b.n	8007d80 <USBH_HandleControl+0x484>

    default:
      break;
 8007d6a:	bf00      	nop
 8007d6c:	e008      	b.n	8007d80 <USBH_HandleControl+0x484>
      break;
 8007d6e:	bf00      	nop
 8007d70:	e006      	b.n	8007d80 <USBH_HandleControl+0x484>
      break;
 8007d72:	bf00      	nop
 8007d74:	e004      	b.n	8007d80 <USBH_HandleControl+0x484>
      break;
 8007d76:	bf00      	nop
 8007d78:	e002      	b.n	8007d80 <USBH_HandleControl+0x484>
      break;
 8007d7a:	bf00      	nop
 8007d7c:	e000      	b.n	8007d80 <USBH_HandleControl+0x484>
      break;
 8007d7e:	bf00      	nop
  }

  return status;
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop

08007d8c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af04      	add	r7, sp, #16
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	4613      	mov	r3, r2
 8007d98:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d9a:	79f9      	ldrb	r1, [r7, #7]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	9303      	str	r3, [sp, #12]
 8007da0:	2308      	movs	r3, #8
 8007da2:	9302      	str	r3, [sp, #8]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	2300      	movs	r3, #0
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	2300      	movs	r3, #0
 8007dae:	2200      	movs	r2, #0
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f003 fae6 	bl	800b382 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af04      	add	r7, sp, #16
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4611      	mov	r1, r2
 8007dcc:	461a      	mov	r2, r3
 8007dce:	460b      	mov	r3, r1
 8007dd0:	80fb      	strh	r3, [r7, #6]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007de4:	7979      	ldrb	r1, [r7, #5]
 8007de6:	7e3b      	ldrb	r3, [r7, #24]
 8007de8:	9303      	str	r3, [sp, #12]
 8007dea:	88fb      	ldrh	r3, [r7, #6]
 8007dec:	9302      	str	r3, [sp, #8]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	2301      	movs	r3, #1
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	2300      	movs	r3, #0
 8007df8:	2200      	movs	r2, #0
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f003 fac1 	bl	800b382 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b088      	sub	sp, #32
 8007e0e:	af04      	add	r7, sp, #16
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	4611      	mov	r1, r2
 8007e16:	461a      	mov	r2, r3
 8007e18:	460b      	mov	r3, r1
 8007e1a:	80fb      	strh	r3, [r7, #6]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e20:	7979      	ldrb	r1, [r7, #5]
 8007e22:	2300      	movs	r3, #0
 8007e24:	9303      	str	r3, [sp, #12]
 8007e26:	88fb      	ldrh	r3, [r7, #6]
 8007e28:	9302      	str	r3, [sp, #8]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	2301      	movs	r3, #1
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	2300      	movs	r3, #0
 8007e34:	2201      	movs	r2, #1
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f003 faa3 	bl	800b382 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007e3c:	2300      	movs	r3, #0

}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b088      	sub	sp, #32
 8007e4a:	af04      	add	r7, sp, #16
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	4611      	mov	r1, r2
 8007e52:	461a      	mov	r2, r3
 8007e54:	460b      	mov	r3, r1
 8007e56:	80fb      	strh	r3, [r7, #6]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e6a:	7979      	ldrb	r1, [r7, #5]
 8007e6c:	7e3b      	ldrb	r3, [r7, #24]
 8007e6e:	9303      	str	r3, [sp, #12]
 8007e70:	88fb      	ldrh	r3, [r7, #6]
 8007e72:	9302      	str	r3, [sp, #8]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	9301      	str	r3, [sp, #4]
 8007e78:	2301      	movs	r3, #1
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f003 fa7e 	bl	800b382 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af04      	add	r7, sp, #16
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	80fb      	strh	r3, [r7, #6]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ea6:	7979      	ldrb	r1, [r7, #5]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	9303      	str	r3, [sp, #12]
 8007eac:	88fb      	ldrh	r3, [r7, #6]
 8007eae:	9302      	str	r3, [sp, #8]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	9301      	str	r3, [sp, #4]
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	2302      	movs	r3, #2
 8007eba:	2201      	movs	r2, #1
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f003 fa60 	bl	800b382 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af04      	add	r7, sp, #16
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	4608      	mov	r0, r1
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	461a      	mov	r2, r3
 8007eda:	4603      	mov	r3, r0
 8007edc:	70fb      	strb	r3, [r7, #3]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	70bb      	strb	r3, [r7, #2]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007ee6:	7878      	ldrb	r0, [r7, #1]
 8007ee8:	78ba      	ldrb	r2, [r7, #2]
 8007eea:	78f9      	ldrb	r1, [r7, #3]
 8007eec:	8b3b      	ldrh	r3, [r7, #24]
 8007eee:	9302      	str	r3, [sp, #8]
 8007ef0:	7d3b      	ldrb	r3, [r7, #20]
 8007ef2:	9301      	str	r3, [sp, #4]
 8007ef4:	7c3b      	ldrb	r3, [r7, #16]
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	4603      	mov	r3, r0
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f003 f9f3 	bl	800b2e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f003 fa12 	bl	800b344 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f836 	bl	8007fa8 <USBH_GetFreePipe>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007f40:	89fb      	ldrh	r3, [r7, #14]
 8007f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00a      	beq.n	8007f60 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007f4a:	78fa      	ldrb	r2, [r7, #3]
 8007f4c:	89fb      	ldrh	r3, [r7, #14]
 8007f4e:	f003 030f 	and.w	r3, r3, #15
 8007f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	33e0      	adds	r3, #224	; 0xe0
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	440b      	add	r3, r1
 8007f5e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007f60:	89fb      	ldrh	r3, [r7, #14]
 8007f62:	b2db      	uxtb	r3, r3
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	2b0a      	cmp	r3, #10
 8007f7c:	d80d      	bhi.n	8007f9a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007f7e:	78fb      	ldrb	r3, [r7, #3]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	33e0      	adds	r3, #224	; 0xe0
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	33e0      	adds	r3, #224	; 0xe0
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	440b      	add	r3, r1
 8007f98:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73fb      	strb	r3, [r7, #15]
 8007fb8:	e00f      	b.n	8007fda <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	33e0      	adds	r3, #224	; 0xe0
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d102      	bne.n	8007fd4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	e007      	b.n	8007fe4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	73fb      	strb	r3, [r7, #15]
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
 8007fdc:	2b0a      	cmp	r3, #10
 8007fde:	d9ec      	bls.n	8007fba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <__NVIC_SetPriority>:
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	6039      	str	r1, [r7, #0]
 8007ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008000:	2b00      	cmp	r3, #0
 8008002:	db0a      	blt.n	800801a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	b2da      	uxtb	r2, r3
 8008008:	490c      	ldr	r1, [pc, #48]	; (800803c <__NVIC_SetPriority+0x4c>)
 800800a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800800e:	0112      	lsls	r2, r2, #4
 8008010:	b2d2      	uxtb	r2, r2
 8008012:	440b      	add	r3, r1
 8008014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008018:	e00a      	b.n	8008030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	b2da      	uxtb	r2, r3
 800801e:	4908      	ldr	r1, [pc, #32]	; (8008040 <__NVIC_SetPriority+0x50>)
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	f003 030f 	and.w	r3, r3, #15
 8008026:	3b04      	subs	r3, #4
 8008028:	0112      	lsls	r2, r2, #4
 800802a:	b2d2      	uxtb	r2, r2
 800802c:	440b      	add	r3, r1
 800802e:	761a      	strb	r2, [r3, #24]
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	e000e100 	.word	0xe000e100
 8008040:	e000ed00 	.word	0xe000ed00

08008044 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008048:	4b05      	ldr	r3, [pc, #20]	; (8008060 <SysTick_Handler+0x1c>)
 800804a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800804c:	f001 ff12 	bl	8009e74 <xTaskGetSchedulerState>
 8008050:	4603      	mov	r3, r0
 8008052:	2b01      	cmp	r3, #1
 8008054:	d001      	beq.n	800805a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008056:	f002 fcf7 	bl	800aa48 <xPortSysTickHandler>
  }
}
 800805a:	bf00      	nop
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	e000e010 	.word	0xe000e010

08008064 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008064:	b580      	push	{r7, lr}
 8008066:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008068:	2100      	movs	r1, #0
 800806a:	f06f 0004 	mvn.w	r0, #4
 800806e:	f7ff ffbf 	bl	8007ff0 <__NVIC_SetPriority>
#endif
}
 8008072:	bf00      	nop
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800807e:	f3ef 8305 	mrs	r3, IPSR
 8008082:	603b      	str	r3, [r7, #0]
  return(result);
 8008084:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800808a:	f06f 0305 	mvn.w	r3, #5
 800808e:	607b      	str	r3, [r7, #4]
 8008090:	e00c      	b.n	80080ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008092:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <osKernelInitialize+0x44>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d105      	bne.n	80080a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800809a:	4b08      	ldr	r3, [pc, #32]	; (80080bc <osKernelInitialize+0x44>)
 800809c:	2201      	movs	r2, #1
 800809e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	607b      	str	r3, [r7, #4]
 80080a4:	e002      	b.n	80080ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80080a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080ac:	687b      	ldr	r3, [r7, #4]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	200000b4 	.word	0x200000b4

080080c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080c6:	f3ef 8305 	mrs	r3, IPSR
 80080ca:	603b      	str	r3, [r7, #0]
  return(result);
 80080cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <osKernelStart+0x1a>
    stat = osErrorISR;
 80080d2:	f06f 0305 	mvn.w	r3, #5
 80080d6:	607b      	str	r3, [r7, #4]
 80080d8:	e010      	b.n	80080fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80080da:	4b0b      	ldr	r3, [pc, #44]	; (8008108 <osKernelStart+0x48>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d109      	bne.n	80080f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80080e2:	f7ff ffbf 	bl	8008064 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80080e6:	4b08      	ldr	r3, [pc, #32]	; (8008108 <osKernelStart+0x48>)
 80080e8:	2202      	movs	r2, #2
 80080ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80080ec:	f001 fa66 	bl	80095bc <vTaskStartScheduler>
      stat = osOK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	607b      	str	r3, [r7, #4]
 80080f4:	e002      	b.n	80080fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80080f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080fc:	687b      	ldr	r3, [r7, #4]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	200000b4 	.word	0x200000b4

0800810c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800810c:	b580      	push	{r7, lr}
 800810e:	b08e      	sub	sp, #56	; 0x38
 8008110:	af04      	add	r7, sp, #16
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008118:	2300      	movs	r3, #0
 800811a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800811c:	f3ef 8305 	mrs	r3, IPSR
 8008120:	617b      	str	r3, [r7, #20]
  return(result);
 8008122:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008124:	2b00      	cmp	r3, #0
 8008126:	d17e      	bne.n	8008226 <osThreadNew+0x11a>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d07b      	beq.n	8008226 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800812e:	2380      	movs	r3, #128	; 0x80
 8008130:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008132:	2318      	movs	r3, #24
 8008134:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008136:	2300      	movs	r3, #0
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800813a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800813e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d045      	beq.n	80081d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <osThreadNew+0x48>
        name = attr->name;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d008      	beq.n	800817a <osThreadNew+0x6e>
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	2b38      	cmp	r3, #56	; 0x38
 800816c:	d805      	bhi.n	800817a <osThreadNew+0x6e>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <osThreadNew+0x72>
        return (NULL);
 800817a:	2300      	movs	r3, #0
 800817c:	e054      	b.n	8008228 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	089b      	lsrs	r3, r3, #2
 800818c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00e      	beq.n	80081b4 <osThreadNew+0xa8>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	2bbb      	cmp	r3, #187	; 0xbb
 800819c:	d90a      	bls.n	80081b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d006      	beq.n	80081b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <osThreadNew+0xa8>
        mem = 1;
 80081ae:	2301      	movs	r3, #1
 80081b0:	61bb      	str	r3, [r7, #24]
 80081b2:	e010      	b.n	80081d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10c      	bne.n	80081d6 <osThreadNew+0xca>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d108      	bne.n	80081d6 <osThreadNew+0xca>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d104      	bne.n	80081d6 <osThreadNew+0xca>
          mem = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61bb      	str	r3, [r7, #24]
 80081d0:	e001      	b.n	80081d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d110      	bne.n	80081fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081e4:	9202      	str	r2, [sp, #8]
 80081e6:	9301      	str	r3, [sp, #4]
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	6a3a      	ldr	r2, [r7, #32]
 80081f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 fff6 	bl	80091e4 <xTaskCreateStatic>
 80081f8:	4603      	mov	r3, r0
 80081fa:	613b      	str	r3, [r7, #16]
 80081fc:	e013      	b.n	8008226 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d110      	bne.n	8008226 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	b29a      	uxth	r2, r3
 8008208:	f107 0310 	add.w	r3, r7, #16
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f001 f841 	bl	800929e <xTaskCreate>
 800821c:	4603      	mov	r3, r0
 800821e:	2b01      	cmp	r3, #1
 8008220:	d001      	beq.n	8008226 <osThreadNew+0x11a>
            hTask = NULL;
 8008222:	2300      	movs	r3, #0
 8008224:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008226:	693b      	ldr	r3, [r7, #16]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3728      	adds	r7, #40	; 0x28
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008238:	f3ef 8305 	mrs	r3, IPSR
 800823c:	60bb      	str	r3, [r7, #8]
  return(result);
 800823e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008240:	2b00      	cmp	r3, #0
 8008242:	d003      	beq.n	800824c <osDelay+0x1c>
    stat = osErrorISR;
 8008244:	f06f 0305 	mvn.w	r3, #5
 8008248:	60fb      	str	r3, [r7, #12]
 800824a:	e007      	b.n	800825c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800824c:	2300      	movs	r3, #0
 800824e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 f97c 	bl	8009554 <vTaskDelay>
    }
  }

  return (stat);
 800825c:	68fb      	ldr	r3, [r7, #12]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008266:	b580      	push	{r7, lr}
 8008268:	b08a      	sub	sp, #40	; 0x28
 800826a:	af02      	add	r7, sp, #8
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008276:	f3ef 8305 	mrs	r3, IPSR
 800827a:	613b      	str	r3, [r7, #16]
  return(result);
 800827c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800827e:	2b00      	cmp	r3, #0
 8008280:	d15f      	bne.n	8008342 <osMessageQueueNew+0xdc>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d05c      	beq.n	8008342 <osMessageQueueNew+0xdc>
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d059      	beq.n	8008342 <osMessageQueueNew+0xdc>
    mem = -1;
 800828e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008292:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d029      	beq.n	80082ee <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d012      	beq.n	80082c8 <osMessageQueueNew+0x62>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	2b4f      	cmp	r3, #79	; 0x4f
 80082a8:	d90e      	bls.n	80082c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00a      	beq.n	80082c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	695a      	ldr	r2, [r3, #20]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	68b9      	ldr	r1, [r7, #8]
 80082ba:	fb01 f303 	mul.w	r3, r1, r3
 80082be:	429a      	cmp	r2, r3
 80082c0:	d302      	bcc.n	80082c8 <osMessageQueueNew+0x62>
        mem = 1;
 80082c2:	2301      	movs	r3, #1
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	e014      	b.n	80082f2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d110      	bne.n	80082f2 <osMessageQueueNew+0x8c>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10c      	bne.n	80082f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d108      	bne.n	80082f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <osMessageQueueNew+0x8c>
          mem = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	61bb      	str	r3, [r7, #24]
 80082ec:	e001      	b.n	80082f2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d10b      	bne.n	8008310 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	2100      	movs	r1, #0
 8008302:	9100      	str	r1, [sp, #0]
 8008304:	68b9      	ldr	r1, [r7, #8]
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fa2e 	bl	8008768 <xQueueGenericCreateStatic>
 800830c:	61f8      	str	r0, [r7, #28]
 800830e:	e008      	b.n	8008322 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d105      	bne.n	8008322 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008316:	2200      	movs	r2, #0
 8008318:	68b9      	ldr	r1, [r7, #8]
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 fa9c 	bl	8008858 <xQueueGenericCreate>
 8008320:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00c      	beq.n	8008342 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <osMessageQueueNew+0xd0>
        name = attr->name;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	617b      	str	r3, [r7, #20]
 8008334:	e001      	b.n	800833a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800833a:	6979      	ldr	r1, [r7, #20]
 800833c:	69f8      	ldr	r0, [r7, #28]
 800833e:	f000 fef3 	bl	8009128 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008342:	69fb      	ldr	r3, [r7, #28]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3720      	adds	r7, #32
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	603b      	str	r3, [r7, #0]
 8008358:	4613      	mov	r3, r2
 800835a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008360:	2300      	movs	r3, #0
 8008362:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008364:	f3ef 8305 	mrs	r3, IPSR
 8008368:	617b      	str	r3, [r7, #20]
  return(result);
 800836a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800836c:	2b00      	cmp	r3, #0
 800836e:	d028      	beq.n	80083c2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <osMessageQueuePut+0x36>
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <osMessageQueuePut+0x36>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008382:	f06f 0303 	mvn.w	r3, #3
 8008386:	61fb      	str	r3, [r7, #28]
 8008388:	e038      	b.n	80083fc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800838a:	2300      	movs	r3, #0
 800838c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800838e:	f107 0210 	add.w	r2, r7, #16
 8008392:	2300      	movs	r3, #0
 8008394:	68b9      	ldr	r1, [r7, #8]
 8008396:	69b8      	ldr	r0, [r7, #24]
 8008398:	f000 fbba 	bl	8008b10 <xQueueGenericSendFromISR>
 800839c:	4603      	mov	r3, r0
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d003      	beq.n	80083aa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80083a2:	f06f 0302 	mvn.w	r3, #2
 80083a6:	61fb      	str	r3, [r7, #28]
 80083a8:	e028      	b.n	80083fc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d025      	beq.n	80083fc <osMessageQueuePut+0xb0>
 80083b0:	4b15      	ldr	r3, [pc, #84]	; (8008408 <osMessageQueuePut+0xbc>)
 80083b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	e01c      	b.n	80083fc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <osMessageQueuePut+0x82>
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d103      	bne.n	80083d6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80083ce:	f06f 0303 	mvn.w	r3, #3
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	e012      	b.n	80083fc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80083d6:	2300      	movs	r3, #0
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	69b8      	ldr	r0, [r7, #24]
 80083de:	f000 fa99 	bl	8008914 <xQueueGenericSend>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d009      	beq.n	80083fc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80083ee:	f06f 0301 	mvn.w	r3, #1
 80083f2:	61fb      	str	r3, [r7, #28]
 80083f4:	e002      	b.n	80083fc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80083f6:	f06f 0302 	mvn.w	r3, #2
 80083fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80083fc:	69fb      	ldr	r3, [r7, #28]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3720      	adds	r7, #32
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800841e:	2300      	movs	r3, #0
 8008420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008422:	f3ef 8305 	mrs	r3, IPSR
 8008426:	617b      	str	r3, [r7, #20]
  return(result);
 8008428:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800842a:	2b00      	cmp	r3, #0
 800842c:	d028      	beq.n	8008480 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d005      	beq.n	8008440 <osMessageQueueGet+0x34>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d002      	beq.n	8008440 <osMessageQueueGet+0x34>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008440:	f06f 0303 	mvn.w	r3, #3
 8008444:	61fb      	str	r3, [r7, #28]
 8008446:	e037      	b.n	80084b8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008448:	2300      	movs	r3, #0
 800844a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800844c:	f107 0310 	add.w	r3, r7, #16
 8008450:	461a      	mov	r2, r3
 8008452:	68b9      	ldr	r1, [r7, #8]
 8008454:	69b8      	ldr	r0, [r7, #24]
 8008456:	f000 fcd7 	bl	8008e08 <xQueueReceiveFromISR>
 800845a:	4603      	mov	r3, r0
 800845c:	2b01      	cmp	r3, #1
 800845e:	d003      	beq.n	8008468 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008460:	f06f 0302 	mvn.w	r3, #2
 8008464:	61fb      	str	r3, [r7, #28]
 8008466:	e027      	b.n	80084b8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d024      	beq.n	80084b8 <osMessageQueueGet+0xac>
 800846e:	4b15      	ldr	r3, [pc, #84]	; (80084c4 <osMessageQueueGet+0xb8>)
 8008470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	e01b      	b.n	80084b8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <osMessageQueueGet+0x80>
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d103      	bne.n	8008494 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800848c:	f06f 0303 	mvn.w	r3, #3
 8008490:	61fb      	str	r3, [r7, #28]
 8008492:	e011      	b.n	80084b8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	68b9      	ldr	r1, [r7, #8]
 8008498:	69b8      	ldr	r0, [r7, #24]
 800849a:	f000 fbd5 	bl	8008c48 <xQueueReceive>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d009      	beq.n	80084b8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80084aa:	f06f 0301 	mvn.w	r3, #1
 80084ae:	61fb      	str	r3, [r7, #28]
 80084b0:	e002      	b.n	80084b8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80084b2:	f06f 0302 	mvn.w	r3, #2
 80084b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80084b8:	69fb      	ldr	r3, [r7, #28]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3720      	adds	r7, #32
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	e000ed04 	.word	0xe000ed04

080084c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4a07      	ldr	r2, [pc, #28]	; (80084f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80084d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4a06      	ldr	r2, [pc, #24]	; (80084f8 <vApplicationGetIdleTaskMemory+0x30>)
 80084de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2280      	movs	r2, #128	; 0x80
 80084e4:	601a      	str	r2, [r3, #0]
}
 80084e6:	bf00      	nop
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	200000b8 	.word	0x200000b8
 80084f8:	20000174 	.word	0x20000174

080084fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4a07      	ldr	r2, [pc, #28]	; (8008528 <vApplicationGetTimerTaskMemory+0x2c>)
 800850c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	4a06      	ldr	r2, [pc, #24]	; (800852c <vApplicationGetTimerTaskMemory+0x30>)
 8008512:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800851a:	601a      	str	r2, [r3, #0]
}
 800851c:	bf00      	nop
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	20000374 	.word	0x20000374
 800852c:	20000430 	.word	0x20000430

08008530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f103 0208 	add.w	r2, r3, #8
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f103 0208 	add.w	r2, r3, #8
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f103 0208 	add.w	r2, r3, #8
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	601a      	str	r2, [r3, #0]
}
 80085c6:	bf00      	nop
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085d2:	b480      	push	{r7}
 80085d4:	b085      	sub	sp, #20
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085e8:	d103      	bne.n	80085f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	60fb      	str	r3, [r7, #12]
 80085f0:	e00c      	b.n	800860c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3308      	adds	r3, #8
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	e002      	b.n	8008600 <vListInsert+0x2e>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	429a      	cmp	r2, r3
 800860a:	d2f6      	bcs.n	80085fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	601a      	str	r2, [r3, #0]
}
 8008638:	bf00      	nop
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	6892      	ldr	r2, [r2, #8]
 800865a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6852      	ldr	r2, [r2, #4]
 8008664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	429a      	cmp	r2, r3
 800866e:	d103      	bne.n	8008678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	1e5a      	subs	r2, r3, #1
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10a      	bne.n	80086c2 <xQueueGenericReset+0x2a>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	60bb      	str	r3, [r7, #8]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80086c2:	f002 f92f 	bl	800a924 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ce:	68f9      	ldr	r1, [r7, #12]
 80086d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086d2:	fb01 f303 	mul.w	r3, r1, r3
 80086d6:	441a      	add	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f2:	3b01      	subs	r3, #1
 80086f4:	68f9      	ldr	r1, [r7, #12]
 80086f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086f8:	fb01 f303 	mul.w	r3, r1, r3
 80086fc:	441a      	add	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	22ff      	movs	r2, #255	; 0xff
 8008706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	22ff      	movs	r2, #255	; 0xff
 800870e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d114      	bne.n	8008742 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01a      	beq.n	8008756 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3310      	adds	r3, #16
 8008724:	4618      	mov	r0, r3
 8008726:	f001 f9e3 	bl	8009af0 <xTaskRemoveFromEventList>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d012      	beq.n	8008756 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008730:	4b0c      	ldr	r3, [pc, #48]	; (8008764 <xQueueGenericReset+0xcc>)
 8008732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	e009      	b.n	8008756 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3310      	adds	r3, #16
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff fef2 	bl	8008530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3324      	adds	r3, #36	; 0x24
 8008750:	4618      	mov	r0, r3
 8008752:	f7ff feed 	bl	8008530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008756:	f002 f915 	bl	800a984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800875a:	2301      	movs	r3, #1
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	e000ed04 	.word	0xe000ed04

08008768 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08e      	sub	sp, #56	; 0x38
 800876c:	af02      	add	r7, sp, #8
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10a      	bne.n	8008792 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10a      	bne.n	80087ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087aa:	bf00      	nop
 80087ac:	e7fe      	b.n	80087ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <xQueueGenericCreateStatic+0x52>
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <xQueueGenericCreateStatic+0x56>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <xQueueGenericCreateStatic+0x58>
 80087be:	2300      	movs	r3, #0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	623b      	str	r3, [r7, #32]
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d102      	bne.n	80087e6 <xQueueGenericCreateStatic+0x7e>
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <xQueueGenericCreateStatic+0x82>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e000      	b.n	80087ec <xQueueGenericCreateStatic+0x84>
 80087ea:	2300      	movs	r3, #0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	61fb      	str	r3, [r7, #28]
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008806:	2350      	movs	r3, #80	; 0x50
 8008808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2b50      	cmp	r3, #80	; 0x50
 800880e:	d00a      	beq.n	8008826 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	61bb      	str	r3, [r7, #24]
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008826:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00d      	beq.n	800884e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800883a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	4613      	mov	r3, r2
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f83f 	bl	80088cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008850:	4618      	mov	r0, r3
 8008852:	3730      	adds	r7, #48	; 0x30
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008858:	b580      	push	{r7, lr}
 800885a:	b08a      	sub	sp, #40	; 0x28
 800885c:	af02      	add	r7, sp, #8
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	4613      	mov	r3, r2
 8008864:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10a      	bne.n	8008882 <xQueueGenericCreate+0x2a>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	613b      	str	r3, [r7, #16]
}
 800887e:	bf00      	nop
 8008880:	e7fe      	b.n	8008880 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	fb02 f303 	mul.w	r3, r2, r3
 800888a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	3350      	adds	r3, #80	; 0x50
 8008890:	4618      	mov	r0, r3
 8008892:	f002 f969 	bl	800ab68 <pvPortMalloc>
 8008896:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d011      	beq.n	80088c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	3350      	adds	r3, #80	; 0x50
 80088a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088b0:	79fa      	ldrb	r2, [r7, #7]
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	4613      	mov	r3, r2
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	68b9      	ldr	r1, [r7, #8]
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 f805 	bl	80088cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088c2:	69bb      	ldr	r3, [r7, #24]
	}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3720      	adds	r7, #32
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
 80088d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d103      	bne.n	80088e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	e002      	b.n	80088ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088fa:	2101      	movs	r1, #1
 80088fc:	69b8      	ldr	r0, [r7, #24]
 80088fe:	f7ff fecb 	bl	8008698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	78fa      	ldrb	r2, [r7, #3]
 8008906:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800890a:	bf00      	nop
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08e      	sub	sp, #56	; 0x38
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
 8008920:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008922:	2300      	movs	r3, #0
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <xQueueGenericSend+0x32>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008942:	bf00      	nop
 8008944:	e7fe      	b.n	8008944 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d103      	bne.n	8008954 <xQueueGenericSend+0x40>
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <xQueueGenericSend+0x44>
 8008954:	2301      	movs	r3, #1
 8008956:	e000      	b.n	800895a <xQueueGenericSend+0x46>
 8008958:	2300      	movs	r3, #0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <xQueueGenericSend+0x60>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2b02      	cmp	r3, #2
 8008978:	d103      	bne.n	8008982 <xQueueGenericSend+0x6e>
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897e:	2b01      	cmp	r3, #1
 8008980:	d101      	bne.n	8008986 <xQueueGenericSend+0x72>
 8008982:	2301      	movs	r3, #1
 8008984:	e000      	b.n	8008988 <xQueueGenericSend+0x74>
 8008986:	2300      	movs	r3, #0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10a      	bne.n	80089a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	623b      	str	r3, [r7, #32]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089a2:	f001 fa67 	bl	8009e74 <xTaskGetSchedulerState>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d102      	bne.n	80089b2 <xQueueGenericSend+0x9e>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <xQueueGenericSend+0xa2>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e000      	b.n	80089b8 <xQueueGenericSend+0xa4>
 80089b6:	2300      	movs	r3, #0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	61fb      	str	r3, [r7, #28]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089d2:	f001 ffa7 	bl	800a924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089de:	429a      	cmp	r2, r3
 80089e0:	d302      	bcc.n	80089e8 <xQueueGenericSend+0xd4>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d129      	bne.n	8008a3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	68b9      	ldr	r1, [r7, #8]
 80089ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ee:	f000 fa8b 	bl	8008f08 <prvCopyDataToQueue>
 80089f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d010      	beq.n	8008a1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	3324      	adds	r3, #36	; 0x24
 8008a00:	4618      	mov	r0, r3
 8008a02:	f001 f875 	bl	8009af0 <xTaskRemoveFromEventList>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d013      	beq.n	8008a34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a0c:	4b3f      	ldr	r3, [pc, #252]	; (8008b0c <xQueueGenericSend+0x1f8>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	e00a      	b.n	8008a34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d007      	beq.n	8008a34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a24:	4b39      	ldr	r3, [pc, #228]	; (8008b0c <xQueueGenericSend+0x1f8>)
 8008a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a34:	f001 ffa6 	bl	800a984 <vPortExitCritical>
				return pdPASS;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e063      	b.n	8008b04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d103      	bne.n	8008a4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a42:	f001 ff9f 	bl	800a984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	e05c      	b.n	8008b04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d106      	bne.n	8008a5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a50:	f107 0314 	add.w	r3, r7, #20
 8008a54:	4618      	mov	r0, r3
 8008a56:	f001 f8af 	bl	8009bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a5e:	f001 ff91 	bl	800a984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a62:	f000 fe1b 	bl	800969c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a66:	f001 ff5d 	bl	800a924 <vPortEnterCritical>
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a70:	b25b      	sxtb	r3, r3
 8008a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a76:	d103      	bne.n	8008a80 <xQueueGenericSend+0x16c>
 8008a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a86:	b25b      	sxtb	r3, r3
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a8c:	d103      	bne.n	8008a96 <xQueueGenericSend+0x182>
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a96:	f001 ff75 	bl	800a984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a9a:	1d3a      	adds	r2, r7, #4
 8008a9c:	f107 0314 	add.w	r3, r7, #20
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f001 f89e 	bl	8009be4 <xTaskCheckForTimeOut>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d124      	bne.n	8008af8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008aae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ab0:	f000 fb22 	bl	80090f8 <prvIsQueueFull>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d018      	beq.n	8008aec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	3310      	adds	r3, #16
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 ffc4 	bl	8009a50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aca:	f000 faad 	bl	8009028 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ace:	f000 fdf3 	bl	80096b8 <xTaskResumeAll>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f47f af7c 	bne.w	80089d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008ada:	4b0c      	ldr	r3, [pc, #48]	; (8008b0c <xQueueGenericSend+0x1f8>)
 8008adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	e772      	b.n	80089d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aee:	f000 fa9b 	bl	8009028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008af2:	f000 fde1 	bl	80096b8 <xTaskResumeAll>
 8008af6:	e76c      	b.n	80089d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008afa:	f000 fa95 	bl	8009028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008afe:	f000 fddb 	bl	80096b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3738      	adds	r7, #56	; 0x38
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	e000ed04 	.word	0xe000ed04

08008b10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b090      	sub	sp, #64	; 0x40
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
 8008b1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d103      	bne.n	8008b4c <xQueueGenericSendFromISR+0x3c>
 8008b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <xQueueGenericSendFromISR+0x40>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e000      	b.n	8008b52 <xQueueGenericSendFromISR+0x42>
 8008b50:	2300      	movs	r3, #0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b68:	bf00      	nop
 8008b6a:	e7fe      	b.n	8008b6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d103      	bne.n	8008b7a <xQueueGenericSendFromISR+0x6a>
 8008b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <xQueueGenericSendFromISR+0x6e>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e000      	b.n	8008b80 <xQueueGenericSendFromISR+0x70>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	623b      	str	r3, [r7, #32]
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b9a:	f001 ffa5 	bl	800aae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b9e:	f3ef 8211 	mrs	r2, BASEPRI
 8008ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	61fa      	str	r2, [r7, #28]
 8008bb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008bb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d302      	bcc.n	8008bcc <xQueueGenericSendFromISR+0xbc>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d12f      	bne.n	8008c2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	68b9      	ldr	r1, [r7, #8]
 8008be0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008be2:	f000 f991 	bl	8008f08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008be6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bee:	d112      	bne.n	8008c16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d016      	beq.n	8008c26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfa:	3324      	adds	r3, #36	; 0x24
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 ff77 	bl	8009af0 <xTaskRemoveFromEventList>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00e      	beq.n	8008c26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00b      	beq.n	8008c26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	e007      	b.n	8008c26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	b25a      	sxtb	r2, r3
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c26:	2301      	movs	r3, #1
 8008c28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008c2a:	e001      	b.n	8008c30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3740      	adds	r7, #64	; 0x40
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
	...

08008c48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08c      	sub	sp, #48	; 0x30
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c54:	2300      	movs	r3, #0
 8008c56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10a      	bne.n	8008c78 <xQueueReceive+0x30>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	623b      	str	r3, [r7, #32]
}
 8008c74:	bf00      	nop
 8008c76:	e7fe      	b.n	8008c76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d103      	bne.n	8008c86 <xQueueReceive+0x3e>
 8008c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <xQueueReceive+0x42>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e000      	b.n	8008c8c <xQueueReceive+0x44>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10a      	bne.n	8008ca6 <xQueueReceive+0x5e>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	61fb      	str	r3, [r7, #28]
}
 8008ca2:	bf00      	nop
 8008ca4:	e7fe      	b.n	8008ca4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ca6:	f001 f8e5 	bl	8009e74 <xTaskGetSchedulerState>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d102      	bne.n	8008cb6 <xQueueReceive+0x6e>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <xQueueReceive+0x72>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e000      	b.n	8008cbc <xQueueReceive+0x74>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <xQueueReceive+0x8e>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	61bb      	str	r3, [r7, #24]
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cd6:	f001 fe25 	bl	800a924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d01f      	beq.n	8008d26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cea:	f000 f977 	bl	8008fdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf0:	1e5a      	subs	r2, r3, #1
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00f      	beq.n	8008d1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d00:	3310      	adds	r3, #16
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fef4 	bl	8009af0 <xTaskRemoveFromEventList>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d007      	beq.n	8008d1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d0e:	4b3d      	ldr	r3, [pc, #244]	; (8008e04 <xQueueReceive+0x1bc>)
 8008d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d1e:	f001 fe31 	bl	800a984 <vPortExitCritical>
				return pdPASS;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e069      	b.n	8008dfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d103      	bne.n	8008d34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d2c:	f001 fe2a 	bl	800a984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d30:	2300      	movs	r3, #0
 8008d32:	e062      	b.n	8008dfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d106      	bne.n	8008d48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d3a:	f107 0310 	add.w	r3, r7, #16
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 ff3a 	bl	8009bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d44:	2301      	movs	r3, #1
 8008d46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d48:	f001 fe1c 	bl	800a984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d4c:	f000 fca6 	bl	800969c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d50:	f001 fde8 	bl	800a924 <vPortEnterCritical>
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d5a:	b25b      	sxtb	r3, r3
 8008d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d60:	d103      	bne.n	8008d6a <xQueueReceive+0x122>
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d70:	b25b      	sxtb	r3, r3
 8008d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d76:	d103      	bne.n	8008d80 <xQueueReceive+0x138>
 8008d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d80:	f001 fe00 	bl	800a984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d84:	1d3a      	adds	r2, r7, #4
 8008d86:	f107 0310 	add.w	r3, r7, #16
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 ff29 	bl	8009be4 <xTaskCheckForTimeOut>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d123      	bne.n	8008de0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d9a:	f000 f997 	bl	80090cc <prvIsQueueEmpty>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d017      	beq.n	8008dd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	3324      	adds	r3, #36	; 0x24
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	4611      	mov	r1, r2
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 fe4f 	bl	8009a50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008db4:	f000 f938 	bl	8009028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008db8:	f000 fc7e 	bl	80096b8 <xTaskResumeAll>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d189      	bne.n	8008cd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008dc2:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <xQueueReceive+0x1bc>)
 8008dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	e780      	b.n	8008cd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd6:	f000 f927 	bl	8009028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dda:	f000 fc6d 	bl	80096b8 <xTaskResumeAll>
 8008dde:	e77a      	b.n	8008cd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008de2:	f000 f921 	bl	8009028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008de6:	f000 fc67 	bl	80096b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dec:	f000 f96e 	bl	80090cc <prvIsQueueEmpty>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f43f af6f 	beq.w	8008cd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008df8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3730      	adds	r7, #48	; 0x30
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	e000ed04 	.word	0xe000ed04

08008e08 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08e      	sub	sp, #56	; 0x38
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10a      	bne.n	8008e34 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	623b      	str	r3, [r7, #32]
}
 8008e30:	bf00      	nop
 8008e32:	e7fe      	b.n	8008e32 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d103      	bne.n	8008e42 <xQueueReceiveFromISR+0x3a>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <xQueueReceiveFromISR+0x3e>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e000      	b.n	8008e48 <xQueueReceiveFromISR+0x40>
 8008e46:	2300      	movs	r3, #0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	61fb      	str	r3, [r7, #28]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e62:	f001 fe41 	bl	800aae8 <vPortValidateInterruptPriority>
	__asm volatile
 8008e66:	f3ef 8211 	mrs	r2, BASEPRI
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	61ba      	str	r2, [r7, #24]
 8008e7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008e7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d02f      	beq.n	8008eee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e98:	68b9      	ldr	r1, [r7, #8]
 8008e9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e9c:	f000 f89e 	bl	8008fdc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea2:	1e5a      	subs	r2, r3, #1
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008ea8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eb0:	d112      	bne.n	8008ed8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d016      	beq.n	8008ee8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	3310      	adds	r3, #16
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fe16 	bl	8009af0 <xTaskRemoveFromEventList>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00e      	beq.n	8008ee8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	e007      	b.n	8008ee8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008edc:	3301      	adds	r3, #1
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	b25a      	sxtb	r2, r3
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	637b      	str	r3, [r7, #52]	; 0x34
 8008eec:	e001      	b.n	8008ef2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f383 8811 	msr	BASEPRI, r3
}
 8008efc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3738      	adds	r7, #56	; 0x38
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f14:	2300      	movs	r3, #0
 8008f16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10d      	bne.n	8008f42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d14d      	bne.n	8008fca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 ffbc 	bl	8009eb0 <xTaskPriorityDisinherit>
 8008f38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	609a      	str	r2, [r3, #8]
 8008f40:	e043      	b.n	8008fca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d119      	bne.n	8008f7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6858      	ldr	r0, [r3, #4]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f50:	461a      	mov	r2, r3
 8008f52:	68b9      	ldr	r1, [r7, #8]
 8008f54:	f002 fb30 	bl	800b5b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f60:	441a      	add	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d32b      	bcc.n	8008fca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	605a      	str	r2, [r3, #4]
 8008f7a:	e026      	b.n	8008fca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	68d8      	ldr	r0, [r3, #12]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f84:	461a      	mov	r2, r3
 8008f86:	68b9      	ldr	r1, [r7, #8]
 8008f88:	f002 fb16 	bl	800b5b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	68da      	ldr	r2, [r3, #12]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	425b      	negs	r3, r3
 8008f96:	441a      	add	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d207      	bcs.n	8008fb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	689a      	ldr	r2, [r3, #8]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb0:	425b      	negs	r3, r3
 8008fb2:	441a      	add	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d105      	bne.n	8008fca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008fd2:	697b      	ldr	r3, [r7, #20]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d018      	beq.n	8009020 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff6:	441a      	add	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	429a      	cmp	r2, r3
 8009006:	d303      	bcc.n	8009010 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68d9      	ldr	r1, [r3, #12]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009018:	461a      	mov	r2, r3
 800901a:	6838      	ldr	r0, [r7, #0]
 800901c:	f002 facc 	bl	800b5b8 <memcpy>
	}
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009030:	f001 fc78 	bl	800a924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800903a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800903c:	e011      	b.n	8009062 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	2b00      	cmp	r3, #0
 8009044:	d012      	beq.n	800906c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	3324      	adds	r3, #36	; 0x24
 800904a:	4618      	mov	r0, r3
 800904c:	f000 fd50 	bl	8009af0 <xTaskRemoveFromEventList>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009056:	f000 fe27 	bl	8009ca8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	3b01      	subs	r3, #1
 800905e:	b2db      	uxtb	r3, r3
 8009060:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009066:	2b00      	cmp	r3, #0
 8009068:	dce9      	bgt.n	800903e <prvUnlockQueue+0x16>
 800906a:	e000      	b.n	800906e <prvUnlockQueue+0x46>
					break;
 800906c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	22ff      	movs	r2, #255	; 0xff
 8009072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009076:	f001 fc85 	bl	800a984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800907a:	f001 fc53 	bl	800a924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009084:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009086:	e011      	b.n	80090ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d012      	beq.n	80090b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	3310      	adds	r3, #16
 8009094:	4618      	mov	r0, r3
 8009096:	f000 fd2b 	bl	8009af0 <xTaskRemoveFromEventList>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090a0:	f000 fe02 	bl	8009ca8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	dce9      	bgt.n	8009088 <prvUnlockQueue+0x60>
 80090b4:	e000      	b.n	80090b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	22ff      	movs	r2, #255	; 0xff
 80090bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80090c0:	f001 fc60 	bl	800a984 <vPortExitCritical>
}
 80090c4:	bf00      	nop
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090d4:	f001 fc26 	bl	800a924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d102      	bne.n	80090e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090e0:	2301      	movs	r3, #1
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	e001      	b.n	80090ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090ea:	f001 fc4b 	bl	800a984 <vPortExitCritical>

	return xReturn;
 80090ee:	68fb      	ldr	r3, [r7, #12]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009100:	f001 fc10 	bl	800a924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910c:	429a      	cmp	r2, r3
 800910e:	d102      	bne.n	8009116 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009110:	2301      	movs	r3, #1
 8009112:	60fb      	str	r3, [r7, #12]
 8009114:	e001      	b.n	800911a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009116:	2300      	movs	r3, #0
 8009118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800911a:	f001 fc33 	bl	800a984 <vPortExitCritical>

	return xReturn;
 800911e:	68fb      	ldr	r3, [r7, #12]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009132:	2300      	movs	r3, #0
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	e014      	b.n	8009162 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009138:	4a0f      	ldr	r2, [pc, #60]	; (8009178 <vQueueAddToRegistry+0x50>)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10b      	bne.n	800915c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009144:	490c      	ldr	r1, [pc, #48]	; (8009178 <vQueueAddToRegistry+0x50>)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800914e:	4a0a      	ldr	r2, [pc, #40]	; (8009178 <vQueueAddToRegistry+0x50>)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	4413      	add	r3, r2
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800915a:	e006      	b.n	800916a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3301      	adds	r3, #1
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b07      	cmp	r3, #7
 8009166:	d9e7      	bls.n	8009138 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009168:	bf00      	nop
 800916a:	bf00      	nop
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	20004c08 	.word	0x20004c08

0800917c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800918c:	f001 fbca 	bl	800a924 <vPortEnterCritical>
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009196:	b25b      	sxtb	r3, r3
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800919c:	d103      	bne.n	80091a6 <vQueueWaitForMessageRestricted+0x2a>
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091ac:	b25b      	sxtb	r3, r3
 80091ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091b2:	d103      	bne.n	80091bc <vQueueWaitForMessageRestricted+0x40>
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091bc:	f001 fbe2 	bl	800a984 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d106      	bne.n	80091d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	3324      	adds	r3, #36	; 0x24
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	68b9      	ldr	r1, [r7, #8]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fc61 	bl	8009a98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80091d6:	6978      	ldr	r0, [r7, #20]
 80091d8:	f7ff ff26 	bl	8009028 <prvUnlockQueue>
	}
 80091dc:	bf00      	nop
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08e      	sub	sp, #56	; 0x38
 80091e8:	af04      	add	r7, sp, #16
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <xTaskCreateStatic+0x2a>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	623b      	str	r3, [r7, #32]
}
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800920e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10a      	bne.n	800922a <xTaskCreateStatic+0x46>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	61fb      	str	r3, [r7, #28]
}
 8009226:	bf00      	nop
 8009228:	e7fe      	b.n	8009228 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800922a:	23bc      	movs	r3, #188	; 0xbc
 800922c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	2bbc      	cmp	r3, #188	; 0xbc
 8009232:	d00a      	beq.n	800924a <xTaskCreateStatic+0x66>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	61bb      	str	r3, [r7, #24]
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800924a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800924c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924e:	2b00      	cmp	r3, #0
 8009250:	d01e      	beq.n	8009290 <xTaskCreateStatic+0xac>
 8009252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009254:	2b00      	cmp	r3, #0
 8009256:	d01b      	beq.n	8009290 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009260:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	2202      	movs	r2, #2
 8009266:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800926a:	2300      	movs	r3, #0
 800926c:	9303      	str	r3, [sp, #12]
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	9302      	str	r3, [sp, #8]
 8009272:	f107 0314 	add.w	r3, r7, #20
 8009276:	9301      	str	r3, [sp, #4]
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	68b9      	ldr	r1, [r7, #8]
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 f850 	bl	8009328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800928a:	f000 f8f3 	bl	8009474 <prvAddNewTaskToReadyList>
 800928e:	e001      	b.n	8009294 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009290:	2300      	movs	r3, #0
 8009292:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009294:	697b      	ldr	r3, [r7, #20]
	}
 8009296:	4618      	mov	r0, r3
 8009298:	3728      	adds	r7, #40	; 0x28
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b08c      	sub	sp, #48	; 0x30
 80092a2:	af04      	add	r7, sp, #16
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	4613      	mov	r3, r2
 80092ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092ae:	88fb      	ldrh	r3, [r7, #6]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 fc58 	bl	800ab68 <pvPortMalloc>
 80092b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00e      	beq.n	80092de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092c0:	20bc      	movs	r0, #188	; 0xbc
 80092c2:	f001 fc51 	bl	800ab68 <pvPortMalloc>
 80092c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	631a      	str	r2, [r3, #48]	; 0x30
 80092d4:	e005      	b.n	80092e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092d6:	6978      	ldr	r0, [r7, #20]
 80092d8:	f001 fd12 	bl	800ad00 <vPortFree>
 80092dc:	e001      	b.n	80092e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d017      	beq.n	8009318 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092f0:	88fa      	ldrh	r2, [r7, #6]
 80092f2:	2300      	movs	r3, #0
 80092f4:	9303      	str	r3, [sp, #12]
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	9302      	str	r3, [sp, #8]
 80092fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	68b9      	ldr	r1, [r7, #8]
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f000 f80e 	bl	8009328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800930c:	69f8      	ldr	r0, [r7, #28]
 800930e:	f000 f8b1 	bl	8009474 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009312:	2301      	movs	r3, #1
 8009314:	61bb      	str	r3, [r7, #24]
 8009316:	e002      	b.n	800931e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800931c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800931e:	69bb      	ldr	r3, [r7, #24]
	}
 8009320:	4618      	mov	r0, r3
 8009322:	3720      	adds	r7, #32
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	461a      	mov	r2, r3
 8009340:	21a5      	movs	r1, #165	; 0xa5
 8009342:	f002 f947 	bl	800b5d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009350:	3b01      	subs	r3, #1
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	f023 0307 	bic.w	r3, r3, #7
 800935e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <prvInitialiseNewTask+0x58>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	617b      	str	r3, [r7, #20]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d01f      	beq.n	80093c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009386:	2300      	movs	r3, #0
 8009388:	61fb      	str	r3, [r7, #28]
 800938a:	e012      	b.n	80093b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	4413      	add	r3, r2
 8009392:	7819      	ldrb	r1, [r3, #0]
 8009394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	4413      	add	r3, r2
 800939a:	3334      	adds	r3, #52	; 0x34
 800939c:	460a      	mov	r2, r1
 800939e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	4413      	add	r3, r2
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d006      	beq.n	80093ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	3301      	adds	r3, #1
 80093b0:	61fb      	str	r3, [r7, #28]
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	2b0f      	cmp	r3, #15
 80093b6:	d9e9      	bls.n	800938c <prvInitialiseNewTask+0x64>
 80093b8:	e000      	b.n	80093bc <prvInitialiseNewTask+0x94>
			{
				break;
 80093ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093c4:	e003      	b.n	80093ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	2b37      	cmp	r3, #55	; 0x37
 80093d2:	d901      	bls.n	80093d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093d4:	2337      	movs	r3, #55	; 0x37
 80093d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80093e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e6:	2200      	movs	r2, #0
 80093e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	3304      	adds	r3, #4
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff f8be 	bl	8008570 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f6:	3318      	adds	r3, #24
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7ff f8b9 	bl	8008570 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009402:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009412:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800941c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941e:	2200      	movs	r2, #0
 8009420:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	3354      	adds	r3, #84	; 0x54
 8009428:	2260      	movs	r2, #96	; 0x60
 800942a:	2100      	movs	r1, #0
 800942c:	4618      	mov	r0, r3
 800942e:	f002 f8d1 	bl	800b5d4 <memset>
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	4a0c      	ldr	r2, [pc, #48]	; (8009468 <prvInitialiseNewTask+0x140>)
 8009436:	659a      	str	r2, [r3, #88]	; 0x58
 8009438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943a:	4a0c      	ldr	r2, [pc, #48]	; (800946c <prvInitialiseNewTask+0x144>)
 800943c:	65da      	str	r2, [r3, #92]	; 0x5c
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	4a0b      	ldr	r2, [pc, #44]	; (8009470 <prvInitialiseNewTask+0x148>)
 8009442:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	68f9      	ldr	r1, [r7, #12]
 8009448:	69b8      	ldr	r0, [r7, #24]
 800944a:	f001 f941 	bl	800a6d0 <pxPortInitialiseStack>
 800944e:	4602      	mov	r2, r0
 8009450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009452:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009456:	2b00      	cmp	r3, #0
 8009458:	d002      	beq.n	8009460 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800945a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800945e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009460:	bf00      	nop
 8009462:	3720      	adds	r7, #32
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	0800b96c 	.word	0x0800b96c
 800946c:	0800b98c 	.word	0x0800b98c
 8009470:	0800b94c 	.word	0x0800b94c

08009474 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800947c:	f001 fa52 	bl	800a924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009480:	4b2d      	ldr	r3, [pc, #180]	; (8009538 <prvAddNewTaskToReadyList+0xc4>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3301      	adds	r3, #1
 8009486:	4a2c      	ldr	r2, [pc, #176]	; (8009538 <prvAddNewTaskToReadyList+0xc4>)
 8009488:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800948a:	4b2c      	ldr	r3, [pc, #176]	; (800953c <prvAddNewTaskToReadyList+0xc8>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d109      	bne.n	80094a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009492:	4a2a      	ldr	r2, [pc, #168]	; (800953c <prvAddNewTaskToReadyList+0xc8>)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009498:	4b27      	ldr	r3, [pc, #156]	; (8009538 <prvAddNewTaskToReadyList+0xc4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d110      	bne.n	80094c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094a0:	f000 fc26 	bl	8009cf0 <prvInitialiseTaskLists>
 80094a4:	e00d      	b.n	80094c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094a6:	4b26      	ldr	r3, [pc, #152]	; (8009540 <prvAddNewTaskToReadyList+0xcc>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d109      	bne.n	80094c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094ae:	4b23      	ldr	r3, [pc, #140]	; (800953c <prvAddNewTaskToReadyList+0xc8>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d802      	bhi.n	80094c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094bc:	4a1f      	ldr	r2, [pc, #124]	; (800953c <prvAddNewTaskToReadyList+0xc8>)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094c2:	4b20      	ldr	r3, [pc, #128]	; (8009544 <prvAddNewTaskToReadyList+0xd0>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3301      	adds	r3, #1
 80094c8:	4a1e      	ldr	r2, [pc, #120]	; (8009544 <prvAddNewTaskToReadyList+0xd0>)
 80094ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80094cc:	4b1d      	ldr	r3, [pc, #116]	; (8009544 <prvAddNewTaskToReadyList+0xd0>)
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d8:	4b1b      	ldr	r3, [pc, #108]	; (8009548 <prvAddNewTaskToReadyList+0xd4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d903      	bls.n	80094e8 <prvAddNewTaskToReadyList+0x74>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e4:	4a18      	ldr	r2, [pc, #96]	; (8009548 <prvAddNewTaskToReadyList+0xd4>)
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ec:	4613      	mov	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4a15      	ldr	r2, [pc, #84]	; (800954c <prvAddNewTaskToReadyList+0xd8>)
 80094f6:	441a      	add	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4619      	mov	r1, r3
 80094fe:	4610      	mov	r0, r2
 8009500:	f7ff f843 	bl	800858a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009504:	f001 fa3e 	bl	800a984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009508:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <prvAddNewTaskToReadyList+0xcc>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00e      	beq.n	800952e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009510:	4b0a      	ldr	r3, [pc, #40]	; (800953c <prvAddNewTaskToReadyList+0xc8>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	429a      	cmp	r2, r3
 800951c:	d207      	bcs.n	800952e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800951e:	4b0c      	ldr	r3, [pc, #48]	; (8009550 <prvAddNewTaskToReadyList+0xdc>)
 8009520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	20000d04 	.word	0x20000d04
 800953c:	20000830 	.word	0x20000830
 8009540:	20000d10 	.word	0x20000d10
 8009544:	20000d20 	.word	0x20000d20
 8009548:	20000d0c 	.word	0x20000d0c
 800954c:	20000834 	.word	0x20000834
 8009550:	e000ed04 	.word	0xe000ed04

08009554 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d017      	beq.n	8009596 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009566:	4b13      	ldr	r3, [pc, #76]	; (80095b4 <vTaskDelay+0x60>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <vTaskDelay+0x30>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	60bb      	str	r3, [r7, #8]
}
 8009580:	bf00      	nop
 8009582:	e7fe      	b.n	8009582 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009584:	f000 f88a 	bl	800969c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009588:	2100      	movs	r1, #0
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fcfe 	bl	8009f8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009590:	f000 f892 	bl	80096b8 <xTaskResumeAll>
 8009594:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d107      	bne.n	80095ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800959c:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <vTaskDelay+0x64>)
 800959e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095ac:	bf00      	nop
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20000d2c 	.word	0x20000d2c
 80095b8:	e000ed04 	.word	0xe000ed04

080095bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08a      	sub	sp, #40	; 0x28
 80095c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095c2:	2300      	movs	r3, #0
 80095c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095ca:	463a      	mov	r2, r7
 80095cc:	1d39      	adds	r1, r7, #4
 80095ce:	f107 0308 	add.w	r3, r7, #8
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe ff78 	bl	80084c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	9202      	str	r2, [sp, #8]
 80095e0:	9301      	str	r3, [sp, #4]
 80095e2:	2300      	movs	r3, #0
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	2300      	movs	r3, #0
 80095e8:	460a      	mov	r2, r1
 80095ea:	4924      	ldr	r1, [pc, #144]	; (800967c <vTaskStartScheduler+0xc0>)
 80095ec:	4824      	ldr	r0, [pc, #144]	; (8009680 <vTaskStartScheduler+0xc4>)
 80095ee:	f7ff fdf9 	bl	80091e4 <xTaskCreateStatic>
 80095f2:	4603      	mov	r3, r0
 80095f4:	4a23      	ldr	r2, [pc, #140]	; (8009684 <vTaskStartScheduler+0xc8>)
 80095f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095f8:	4b22      	ldr	r3, [pc, #136]	; (8009684 <vTaskStartScheduler+0xc8>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009600:	2301      	movs	r3, #1
 8009602:	617b      	str	r3, [r7, #20]
 8009604:	e001      	b.n	800960a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009606:	2300      	movs	r3, #0
 8009608:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d102      	bne.n	8009616 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009610:	f000 fd10 	bl	800a034 <xTimerCreateTimerTask>
 8009614:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d11b      	bne.n	8009654 <vTaskStartScheduler+0x98>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	613b      	str	r3, [r7, #16]
}
 800962e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009630:	4b15      	ldr	r3, [pc, #84]	; (8009688 <vTaskStartScheduler+0xcc>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3354      	adds	r3, #84	; 0x54
 8009636:	4a15      	ldr	r2, [pc, #84]	; (800968c <vTaskStartScheduler+0xd0>)
 8009638:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800963a:	4b15      	ldr	r3, [pc, #84]	; (8009690 <vTaskStartScheduler+0xd4>)
 800963c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009640:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009642:	4b14      	ldr	r3, [pc, #80]	; (8009694 <vTaskStartScheduler+0xd8>)
 8009644:	2201      	movs	r2, #1
 8009646:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009648:	4b13      	ldr	r3, [pc, #76]	; (8009698 <vTaskStartScheduler+0xdc>)
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800964e:	f001 f8c7 	bl	800a7e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009652:	e00e      	b.n	8009672 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800965a:	d10a      	bne.n	8009672 <vTaskStartScheduler+0xb6>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	60fb      	str	r3, [r7, #12]
}
 800966e:	bf00      	nop
 8009670:	e7fe      	b.n	8009670 <vTaskStartScheduler+0xb4>
}
 8009672:	bf00      	nop
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	0800b898 	.word	0x0800b898
 8009680:	08009cc1 	.word	0x08009cc1
 8009684:	20000d28 	.word	0x20000d28
 8009688:	20000830 	.word	0x20000830
 800968c:	20000030 	.word	0x20000030
 8009690:	20000d24 	.word	0x20000d24
 8009694:	20000d10 	.word	0x20000d10
 8009698:	20000d08 	.word	0x20000d08

0800969c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096a0:	4b04      	ldr	r3, [pc, #16]	; (80096b4 <vTaskSuspendAll+0x18>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3301      	adds	r3, #1
 80096a6:	4a03      	ldr	r2, [pc, #12]	; (80096b4 <vTaskSuspendAll+0x18>)
 80096a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80096aa:	bf00      	nop
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	20000d2c 	.word	0x20000d2c

080096b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096c2:	2300      	movs	r3, #0
 80096c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096c6:	4b42      	ldr	r3, [pc, #264]	; (80097d0 <xTaskResumeAll+0x118>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10a      	bne.n	80096e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	603b      	str	r3, [r7, #0]
}
 80096e0:	bf00      	nop
 80096e2:	e7fe      	b.n	80096e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096e4:	f001 f91e 	bl	800a924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096e8:	4b39      	ldr	r3, [pc, #228]	; (80097d0 <xTaskResumeAll+0x118>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	4a38      	ldr	r2, [pc, #224]	; (80097d0 <xTaskResumeAll+0x118>)
 80096f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096f2:	4b37      	ldr	r3, [pc, #220]	; (80097d0 <xTaskResumeAll+0x118>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d162      	bne.n	80097c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096fa:	4b36      	ldr	r3, [pc, #216]	; (80097d4 <xTaskResumeAll+0x11c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d05e      	beq.n	80097c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009702:	e02f      	b.n	8009764 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009704:	4b34      	ldr	r3, [pc, #208]	; (80097d8 <xTaskResumeAll+0x120>)
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3318      	adds	r3, #24
 8009710:	4618      	mov	r0, r3
 8009712:	f7fe ff97 	bl	8008644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	3304      	adds	r3, #4
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe ff92 	bl	8008644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009724:	4b2d      	ldr	r3, [pc, #180]	; (80097dc <xTaskResumeAll+0x124>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	429a      	cmp	r2, r3
 800972a:	d903      	bls.n	8009734 <xTaskResumeAll+0x7c>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009730:	4a2a      	ldr	r2, [pc, #168]	; (80097dc <xTaskResumeAll+0x124>)
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009738:	4613      	mov	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4a27      	ldr	r2, [pc, #156]	; (80097e0 <xTaskResumeAll+0x128>)
 8009742:	441a      	add	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3304      	adds	r3, #4
 8009748:	4619      	mov	r1, r3
 800974a:	4610      	mov	r0, r2
 800974c:	f7fe ff1d 	bl	800858a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009754:	4b23      	ldr	r3, [pc, #140]	; (80097e4 <xTaskResumeAll+0x12c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975a:	429a      	cmp	r2, r3
 800975c:	d302      	bcc.n	8009764 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800975e:	4b22      	ldr	r3, [pc, #136]	; (80097e8 <xTaskResumeAll+0x130>)
 8009760:	2201      	movs	r2, #1
 8009762:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009764:	4b1c      	ldr	r3, [pc, #112]	; (80097d8 <xTaskResumeAll+0x120>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1cb      	bne.n	8009704 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009772:	f000 fb5f 	bl	8009e34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009776:	4b1d      	ldr	r3, [pc, #116]	; (80097ec <xTaskResumeAll+0x134>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d010      	beq.n	80097a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009782:	f000 f847 	bl	8009814 <xTaskIncrementTick>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d002      	beq.n	8009792 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800978c:	4b16      	ldr	r3, [pc, #88]	; (80097e8 <xTaskResumeAll+0x130>)
 800978e:	2201      	movs	r2, #1
 8009790:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3b01      	subs	r3, #1
 8009796:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1f1      	bne.n	8009782 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800979e:	4b13      	ldr	r3, [pc, #76]	; (80097ec <xTaskResumeAll+0x134>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097a4:	4b10      	ldr	r3, [pc, #64]	; (80097e8 <xTaskResumeAll+0x130>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d009      	beq.n	80097c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097ac:	2301      	movs	r3, #1
 80097ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097b0:	4b0f      	ldr	r3, [pc, #60]	; (80097f0 <xTaskResumeAll+0x138>)
 80097b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b6:	601a      	str	r2, [r3, #0]
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097c0:	f001 f8e0 	bl	800a984 <vPortExitCritical>

	return xAlreadyYielded;
 80097c4:	68bb      	ldr	r3, [r7, #8]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	20000d2c 	.word	0x20000d2c
 80097d4:	20000d04 	.word	0x20000d04
 80097d8:	20000cc4 	.word	0x20000cc4
 80097dc:	20000d0c 	.word	0x20000d0c
 80097e0:	20000834 	.word	0x20000834
 80097e4:	20000830 	.word	0x20000830
 80097e8:	20000d18 	.word	0x20000d18
 80097ec:	20000d14 	.word	0x20000d14
 80097f0:	e000ed04 	.word	0xe000ed04

080097f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097fa:	4b05      	ldr	r3, [pc, #20]	; (8009810 <xTaskGetTickCount+0x1c>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009800:	687b      	ldr	r3, [r7, #4]
}
 8009802:	4618      	mov	r0, r3
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	20000d08 	.word	0x20000d08

08009814 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800981a:	2300      	movs	r3, #0
 800981c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800981e:	4b4f      	ldr	r3, [pc, #316]	; (800995c <xTaskIncrementTick+0x148>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	f040 808f 	bne.w	8009946 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009828:	4b4d      	ldr	r3, [pc, #308]	; (8009960 <xTaskIncrementTick+0x14c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	3301      	adds	r3, #1
 800982e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009830:	4a4b      	ldr	r2, [pc, #300]	; (8009960 <xTaskIncrementTick+0x14c>)
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d120      	bne.n	800987e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800983c:	4b49      	ldr	r3, [pc, #292]	; (8009964 <xTaskIncrementTick+0x150>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00a      	beq.n	800985c <xTaskIncrementTick+0x48>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	603b      	str	r3, [r7, #0]
}
 8009858:	bf00      	nop
 800985a:	e7fe      	b.n	800985a <xTaskIncrementTick+0x46>
 800985c:	4b41      	ldr	r3, [pc, #260]	; (8009964 <xTaskIncrementTick+0x150>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	60fb      	str	r3, [r7, #12]
 8009862:	4b41      	ldr	r3, [pc, #260]	; (8009968 <xTaskIncrementTick+0x154>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a3f      	ldr	r2, [pc, #252]	; (8009964 <xTaskIncrementTick+0x150>)
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	4a3f      	ldr	r2, [pc, #252]	; (8009968 <xTaskIncrementTick+0x154>)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	4b3e      	ldr	r3, [pc, #248]	; (800996c <xTaskIncrementTick+0x158>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3301      	adds	r3, #1
 8009876:	4a3d      	ldr	r2, [pc, #244]	; (800996c <xTaskIncrementTick+0x158>)
 8009878:	6013      	str	r3, [r2, #0]
 800987a:	f000 fadb 	bl	8009e34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800987e:	4b3c      	ldr	r3, [pc, #240]	; (8009970 <xTaskIncrementTick+0x15c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	429a      	cmp	r2, r3
 8009886:	d349      	bcc.n	800991c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009888:	4b36      	ldr	r3, [pc, #216]	; (8009964 <xTaskIncrementTick+0x150>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d104      	bne.n	800989c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009892:	4b37      	ldr	r3, [pc, #220]	; (8009970 <xTaskIncrementTick+0x15c>)
 8009894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009898:	601a      	str	r2, [r3, #0]
					break;
 800989a:	e03f      	b.n	800991c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800989c:	4b31      	ldr	r3, [pc, #196]	; (8009964 <xTaskIncrementTick+0x150>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d203      	bcs.n	80098bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098b4:	4a2e      	ldr	r2, [pc, #184]	; (8009970 <xTaskIncrementTick+0x15c>)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098ba:	e02f      	b.n	800991c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	3304      	adds	r3, #4
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fe febf 	bl	8008644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d004      	beq.n	80098d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	3318      	adds	r3, #24
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fe feb6 	bl	8008644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098dc:	4b25      	ldr	r3, [pc, #148]	; (8009974 <xTaskIncrementTick+0x160>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d903      	bls.n	80098ec <xTaskIncrementTick+0xd8>
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	4a22      	ldr	r2, [pc, #136]	; (8009974 <xTaskIncrementTick+0x160>)
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f0:	4613      	mov	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4a1f      	ldr	r2, [pc, #124]	; (8009978 <xTaskIncrementTick+0x164>)
 80098fa:	441a      	add	r2, r3
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	3304      	adds	r3, #4
 8009900:	4619      	mov	r1, r3
 8009902:	4610      	mov	r0, r2
 8009904:	f7fe fe41 	bl	800858a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990c:	4b1b      	ldr	r3, [pc, #108]	; (800997c <xTaskIncrementTick+0x168>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	429a      	cmp	r2, r3
 8009914:	d3b8      	bcc.n	8009888 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009916:	2301      	movs	r3, #1
 8009918:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800991a:	e7b5      	b.n	8009888 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800991c:	4b17      	ldr	r3, [pc, #92]	; (800997c <xTaskIncrementTick+0x168>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009922:	4915      	ldr	r1, [pc, #84]	; (8009978 <xTaskIncrementTick+0x164>)
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	440b      	add	r3, r1
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d901      	bls.n	8009938 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009934:	2301      	movs	r3, #1
 8009936:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009938:	4b11      	ldr	r3, [pc, #68]	; (8009980 <xTaskIncrementTick+0x16c>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d007      	beq.n	8009950 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009940:	2301      	movs	r3, #1
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	e004      	b.n	8009950 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009946:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <xTaskIncrementTick+0x170>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3301      	adds	r3, #1
 800994c:	4a0d      	ldr	r2, [pc, #52]	; (8009984 <xTaskIncrementTick+0x170>)
 800994e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009950:	697b      	ldr	r3, [r7, #20]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	20000d2c 	.word	0x20000d2c
 8009960:	20000d08 	.word	0x20000d08
 8009964:	20000cbc 	.word	0x20000cbc
 8009968:	20000cc0 	.word	0x20000cc0
 800996c:	20000d1c 	.word	0x20000d1c
 8009970:	20000d24 	.word	0x20000d24
 8009974:	20000d0c 	.word	0x20000d0c
 8009978:	20000834 	.word	0x20000834
 800997c:	20000830 	.word	0x20000830
 8009980:	20000d18 	.word	0x20000d18
 8009984:	20000d14 	.word	0x20000d14

08009988 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800998e:	4b2a      	ldr	r3, [pc, #168]	; (8009a38 <vTaskSwitchContext+0xb0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009996:	4b29      	ldr	r3, [pc, #164]	; (8009a3c <vTaskSwitchContext+0xb4>)
 8009998:	2201      	movs	r2, #1
 800999a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800999c:	e046      	b.n	8009a2c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800999e:	4b27      	ldr	r3, [pc, #156]	; (8009a3c <vTaskSwitchContext+0xb4>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a4:	4b26      	ldr	r3, [pc, #152]	; (8009a40 <vTaskSwitchContext+0xb8>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60fb      	str	r3, [r7, #12]
 80099aa:	e010      	b.n	80099ce <vTaskSwitchContext+0x46>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	607b      	str	r3, [r7, #4]
}
 80099c4:	bf00      	nop
 80099c6:	e7fe      	b.n	80099c6 <vTaskSwitchContext+0x3e>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	60fb      	str	r3, [r7, #12]
 80099ce:	491d      	ldr	r1, [pc, #116]	; (8009a44 <vTaskSwitchContext+0xbc>)
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	4613      	mov	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	440b      	add	r3, r1
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0e4      	beq.n	80099ac <vTaskSwitchContext+0x24>
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	4613      	mov	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4a15      	ldr	r2, [pc, #84]	; (8009a44 <vTaskSwitchContext+0xbc>)
 80099ee:	4413      	add	r3, r2
 80099f0:	60bb      	str	r3, [r7, #8]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	605a      	str	r2, [r3, #4]
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	3308      	adds	r3, #8
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d104      	bne.n	8009a12 <vTaskSwitchContext+0x8a>
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	685a      	ldr	r2, [r3, #4]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	605a      	str	r2, [r3, #4]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	4a0b      	ldr	r2, [pc, #44]	; (8009a48 <vTaskSwitchContext+0xc0>)
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	4a08      	ldr	r2, [pc, #32]	; (8009a40 <vTaskSwitchContext+0xb8>)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a22:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <vTaskSwitchContext+0xc0>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3354      	adds	r3, #84	; 0x54
 8009a28:	4a08      	ldr	r2, [pc, #32]	; (8009a4c <vTaskSwitchContext+0xc4>)
 8009a2a:	6013      	str	r3, [r2, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	20000d2c 	.word	0x20000d2c
 8009a3c:	20000d18 	.word	0x20000d18
 8009a40:	20000d0c 	.word	0x20000d0c
 8009a44:	20000834 	.word	0x20000834
 8009a48:	20000830 	.word	0x20000830
 8009a4c:	20000030 	.word	0x20000030

08009a50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10a      	bne.n	8009a76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	60fb      	str	r3, [r7, #12]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a76:	4b07      	ldr	r3, [pc, #28]	; (8009a94 <vTaskPlaceOnEventList+0x44>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3318      	adds	r3, #24
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7fe fda7 	bl	80085d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a84:	2101      	movs	r1, #1
 8009a86:	6838      	ldr	r0, [r7, #0]
 8009a88:	f000 fa80 	bl	8009f8c <prvAddCurrentTaskToDelayedList>
}
 8009a8c:	bf00      	nop
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	20000830 	.word	0x20000830

08009a98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10a      	bne.n	8009ac0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	617b      	str	r3, [r7, #20]
}
 8009abc:	bf00      	nop
 8009abe:	e7fe      	b.n	8009abe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ac0:	4b0a      	ldr	r3, [pc, #40]	; (8009aec <vTaskPlaceOnEventListRestricted+0x54>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3318      	adds	r3, #24
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f7fe fd5e 	bl	800858a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ad8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	68b8      	ldr	r0, [r7, #8]
 8009ade:	f000 fa55 	bl	8009f8c <prvAddCurrentTaskToDelayedList>
	}
 8009ae2:	bf00      	nop
 8009ae4:	3718      	adds	r7, #24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20000830 	.word	0x20000830

08009af0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10a      	bne.n	8009b1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	60fb      	str	r3, [r7, #12]
}
 8009b18:	bf00      	nop
 8009b1a:	e7fe      	b.n	8009b1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	3318      	adds	r3, #24
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fe fd8f 	bl	8008644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b26:	4b1e      	ldr	r3, [pc, #120]	; (8009ba0 <xTaskRemoveFromEventList+0xb0>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d11d      	bne.n	8009b6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	3304      	adds	r3, #4
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fd86 	bl	8008644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3c:	4b19      	ldr	r3, [pc, #100]	; (8009ba4 <xTaskRemoveFromEventList+0xb4>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d903      	bls.n	8009b4c <xTaskRemoveFromEventList+0x5c>
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b48:	4a16      	ldr	r2, [pc, #88]	; (8009ba4 <xTaskRemoveFromEventList+0xb4>)
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b50:	4613      	mov	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4a13      	ldr	r2, [pc, #76]	; (8009ba8 <xTaskRemoveFromEventList+0xb8>)
 8009b5a:	441a      	add	r2, r3
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	4619      	mov	r1, r3
 8009b62:	4610      	mov	r0, r2
 8009b64:	f7fe fd11 	bl	800858a <vListInsertEnd>
 8009b68:	e005      	b.n	8009b76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	3318      	adds	r3, #24
 8009b6e:	4619      	mov	r1, r3
 8009b70:	480e      	ldr	r0, [pc, #56]	; (8009bac <xTaskRemoveFromEventList+0xbc>)
 8009b72:	f7fe fd0a 	bl	800858a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7a:	4b0d      	ldr	r3, [pc, #52]	; (8009bb0 <xTaskRemoveFromEventList+0xc0>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d905      	bls.n	8009b90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b84:	2301      	movs	r3, #1
 8009b86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b88:	4b0a      	ldr	r3, [pc, #40]	; (8009bb4 <xTaskRemoveFromEventList+0xc4>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	e001      	b.n	8009b94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b90:	2300      	movs	r3, #0
 8009b92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b94:	697b      	ldr	r3, [r7, #20]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3718      	adds	r7, #24
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20000d2c 	.word	0x20000d2c
 8009ba4:	20000d0c 	.word	0x20000d0c
 8009ba8:	20000834 	.word	0x20000834
 8009bac:	20000cc4 	.word	0x20000cc4
 8009bb0:	20000830 	.word	0x20000830
 8009bb4:	20000d18 	.word	0x20000d18

08009bb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009bc0:	4b06      	ldr	r3, [pc, #24]	; (8009bdc <vTaskInternalSetTimeOutState+0x24>)
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009bc8:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <vTaskInternalSetTimeOutState+0x28>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	605a      	str	r2, [r3, #4]
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	20000d1c 	.word	0x20000d1c
 8009be0:	20000d08 	.word	0x20000d08

08009be4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10a      	bne.n	8009c0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	613b      	str	r3, [r7, #16]
}
 8009c06:	bf00      	nop
 8009c08:	e7fe      	b.n	8009c08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10a      	bne.n	8009c26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	60fb      	str	r3, [r7, #12]
}
 8009c22:	bf00      	nop
 8009c24:	e7fe      	b.n	8009c24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009c26:	f000 fe7d 	bl	800a924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c2a:	4b1d      	ldr	r3, [pc, #116]	; (8009ca0 <xTaskCheckForTimeOut+0xbc>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	69ba      	ldr	r2, [r7, #24]
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c42:	d102      	bne.n	8009c4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c44:	2300      	movs	r3, #0
 8009c46:	61fb      	str	r3, [r7, #28]
 8009c48:	e023      	b.n	8009c92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	4b15      	ldr	r3, [pc, #84]	; (8009ca4 <xTaskCheckForTimeOut+0xc0>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d007      	beq.n	8009c66 <xTaskCheckForTimeOut+0x82>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	69ba      	ldr	r2, [r7, #24]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d302      	bcc.n	8009c66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c60:	2301      	movs	r3, #1
 8009c62:	61fb      	str	r3, [r7, #28]
 8009c64:	e015      	b.n	8009c92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	697a      	ldr	r2, [r7, #20]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d20b      	bcs.n	8009c88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	1ad2      	subs	r2, r2, r3
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7ff ff9b 	bl	8009bb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c82:	2300      	movs	r3, #0
 8009c84:	61fb      	str	r3, [r7, #28]
 8009c86:	e004      	b.n	8009c92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c92:	f000 fe77 	bl	800a984 <vPortExitCritical>

	return xReturn;
 8009c96:	69fb      	ldr	r3, [r7, #28]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3720      	adds	r7, #32
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	20000d08 	.word	0x20000d08
 8009ca4:	20000d1c 	.word	0x20000d1c

08009ca8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ca8:	b480      	push	{r7}
 8009caa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009cac:	4b03      	ldr	r3, [pc, #12]	; (8009cbc <vTaskMissedYield+0x14>)
 8009cae:	2201      	movs	r2, #1
 8009cb0:	601a      	str	r2, [r3, #0]
}
 8009cb2:	bf00      	nop
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	20000d18 	.word	0x20000d18

08009cc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009cc8:	f000 f852 	bl	8009d70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ccc:	4b06      	ldr	r3, [pc, #24]	; (8009ce8 <prvIdleTask+0x28>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d9f9      	bls.n	8009cc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009cd4:	4b05      	ldr	r3, [pc, #20]	; (8009cec <prvIdleTask+0x2c>)
 8009cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ce4:	e7f0      	b.n	8009cc8 <prvIdleTask+0x8>
 8009ce6:	bf00      	nop
 8009ce8:	20000834 	.word	0x20000834
 8009cec:	e000ed04 	.word	0xe000ed04

08009cf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	607b      	str	r3, [r7, #4]
 8009cfa:	e00c      	b.n	8009d16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4a12      	ldr	r2, [pc, #72]	; (8009d50 <prvInitialiseTaskLists+0x60>)
 8009d08:	4413      	add	r3, r2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fe fc10 	bl	8008530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3301      	adds	r3, #1
 8009d14:	607b      	str	r3, [r7, #4]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b37      	cmp	r3, #55	; 0x37
 8009d1a:	d9ef      	bls.n	8009cfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d1c:	480d      	ldr	r0, [pc, #52]	; (8009d54 <prvInitialiseTaskLists+0x64>)
 8009d1e:	f7fe fc07 	bl	8008530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d22:	480d      	ldr	r0, [pc, #52]	; (8009d58 <prvInitialiseTaskLists+0x68>)
 8009d24:	f7fe fc04 	bl	8008530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d28:	480c      	ldr	r0, [pc, #48]	; (8009d5c <prvInitialiseTaskLists+0x6c>)
 8009d2a:	f7fe fc01 	bl	8008530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d2e:	480c      	ldr	r0, [pc, #48]	; (8009d60 <prvInitialiseTaskLists+0x70>)
 8009d30:	f7fe fbfe 	bl	8008530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d34:	480b      	ldr	r0, [pc, #44]	; (8009d64 <prvInitialiseTaskLists+0x74>)
 8009d36:	f7fe fbfb 	bl	8008530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d3a:	4b0b      	ldr	r3, [pc, #44]	; (8009d68 <prvInitialiseTaskLists+0x78>)
 8009d3c:	4a05      	ldr	r2, [pc, #20]	; (8009d54 <prvInitialiseTaskLists+0x64>)
 8009d3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <prvInitialiseTaskLists+0x7c>)
 8009d42:	4a05      	ldr	r2, [pc, #20]	; (8009d58 <prvInitialiseTaskLists+0x68>)
 8009d44:	601a      	str	r2, [r3, #0]
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20000834 	.word	0x20000834
 8009d54:	20000c94 	.word	0x20000c94
 8009d58:	20000ca8 	.word	0x20000ca8
 8009d5c:	20000cc4 	.word	0x20000cc4
 8009d60:	20000cd8 	.word	0x20000cd8
 8009d64:	20000cf0 	.word	0x20000cf0
 8009d68:	20000cbc 	.word	0x20000cbc
 8009d6c:	20000cc0 	.word	0x20000cc0

08009d70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d76:	e019      	b.n	8009dac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d78:	f000 fdd4 	bl	800a924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d7c:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <prvCheckTasksWaitingTermination+0x50>)
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	3304      	adds	r3, #4
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fe fc5b 	bl	8008644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d8e:	4b0d      	ldr	r3, [pc, #52]	; (8009dc4 <prvCheckTasksWaitingTermination+0x54>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	4a0b      	ldr	r2, [pc, #44]	; (8009dc4 <prvCheckTasksWaitingTermination+0x54>)
 8009d96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d98:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <prvCheckTasksWaitingTermination+0x58>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	4a0a      	ldr	r2, [pc, #40]	; (8009dc8 <prvCheckTasksWaitingTermination+0x58>)
 8009da0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009da2:	f000 fdef 	bl	800a984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f810 	bl	8009dcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dac:	4b06      	ldr	r3, [pc, #24]	; (8009dc8 <prvCheckTasksWaitingTermination+0x58>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1e1      	bne.n	8009d78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	20000cd8 	.word	0x20000cd8
 8009dc4:	20000d04 	.word	0x20000d04
 8009dc8:	20000cec 	.word	0x20000cec

08009dcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3354      	adds	r3, #84	; 0x54
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f001 fcbb 	bl	800b754 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d108      	bne.n	8009dfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 ff87 	bl	800ad00 <vPortFree>
				vPortFree( pxTCB );
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 ff84 	bl	800ad00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009df8:	e018      	b.n	8009e2c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d103      	bne.n	8009e0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 ff7b 	bl	800ad00 <vPortFree>
	}
 8009e0a:	e00f      	b.n	8009e2c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d00a      	beq.n	8009e2c <prvDeleteTCB+0x60>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	60fb      	str	r3, [r7, #12]
}
 8009e28:	bf00      	nop
 8009e2a:	e7fe      	b.n	8009e2a <prvDeleteTCB+0x5e>
	}
 8009e2c:	bf00      	nop
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e3a:	4b0c      	ldr	r3, [pc, #48]	; (8009e6c <prvResetNextTaskUnblockTime+0x38>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d104      	bne.n	8009e4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e44:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <prvResetNextTaskUnblockTime+0x3c>)
 8009e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e4c:	e008      	b.n	8009e60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e4e:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <prvResetNextTaskUnblockTime+0x38>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	4a04      	ldr	r2, [pc, #16]	; (8009e70 <prvResetNextTaskUnblockTime+0x3c>)
 8009e5e:	6013      	str	r3, [r2, #0]
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	20000cbc 	.word	0x20000cbc
 8009e70:	20000d24 	.word	0x20000d24

08009e74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ea8 <xTaskGetSchedulerState+0x34>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d102      	bne.n	8009e88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e82:	2301      	movs	r3, #1
 8009e84:	607b      	str	r3, [r7, #4]
 8009e86:	e008      	b.n	8009e9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e88:	4b08      	ldr	r3, [pc, #32]	; (8009eac <xTaskGetSchedulerState+0x38>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d102      	bne.n	8009e96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e90:	2302      	movs	r3, #2
 8009e92:	607b      	str	r3, [r7, #4]
 8009e94:	e001      	b.n	8009e9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e96:	2300      	movs	r3, #0
 8009e98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e9a:	687b      	ldr	r3, [r7, #4]
	}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	20000d10 	.word	0x20000d10
 8009eac:	20000d2c 	.word	0x20000d2c

08009eb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d056      	beq.n	8009f74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ec6:	4b2e      	ldr	r3, [pc, #184]	; (8009f80 <xTaskPriorityDisinherit+0xd0>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d00a      	beq.n	8009ee6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	60fb      	str	r3, [r7, #12]
}
 8009ee2:	bf00      	nop
 8009ee4:	e7fe      	b.n	8009ee4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d10a      	bne.n	8009f04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	60bb      	str	r3, [r7, #8]
}
 8009f00:	bf00      	nop
 8009f02:	e7fe      	b.n	8009f02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f08:	1e5a      	subs	r2, r3, #1
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d02c      	beq.n	8009f74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d128      	bne.n	8009f74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fb8c 	bl	8008644 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f44:	4b0f      	ldr	r3, [pc, #60]	; (8009f84 <xTaskPriorityDisinherit+0xd4>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d903      	bls.n	8009f54 <xTaskPriorityDisinherit+0xa4>
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f50:	4a0c      	ldr	r2, [pc, #48]	; (8009f84 <xTaskPriorityDisinherit+0xd4>)
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f58:	4613      	mov	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4413      	add	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4a09      	ldr	r2, [pc, #36]	; (8009f88 <xTaskPriorityDisinherit+0xd8>)
 8009f62:	441a      	add	r2, r3
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	3304      	adds	r3, #4
 8009f68:	4619      	mov	r1, r3
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	f7fe fb0d 	bl	800858a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f70:	2301      	movs	r3, #1
 8009f72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f74:	697b      	ldr	r3, [r7, #20]
	}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20000830 	.word	0x20000830
 8009f84:	20000d0c 	.word	0x20000d0c
 8009f88:	20000834 	.word	0x20000834

08009f8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f96:	4b21      	ldr	r3, [pc, #132]	; (800a01c <prvAddCurrentTaskToDelayedList+0x90>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f9c:	4b20      	ldr	r3, [pc, #128]	; (800a020 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fe fb4e 	bl	8008644 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fae:	d10a      	bne.n	8009fc6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d007      	beq.n	8009fc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fb6:	4b1a      	ldr	r3, [pc, #104]	; (800a020 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	3304      	adds	r3, #4
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	4819      	ldr	r0, [pc, #100]	; (800a024 <prvAddCurrentTaskToDelayedList+0x98>)
 8009fc0:	f7fe fae3 	bl	800858a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fc4:	e026      	b.n	800a014 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4413      	add	r3, r2
 8009fcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fce:	4b14      	ldr	r3, [pc, #80]	; (800a020 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d209      	bcs.n	8009ff2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fde:	4b12      	ldr	r3, [pc, #72]	; (800a028 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	4b0f      	ldr	r3, [pc, #60]	; (800a020 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4610      	mov	r0, r2
 8009fec:	f7fe faf1 	bl	80085d2 <vListInsert>
}
 8009ff0:	e010      	b.n	800a014 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ff2:	4b0e      	ldr	r3, [pc, #56]	; (800a02c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	4b0a      	ldr	r3, [pc, #40]	; (800a020 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	4610      	mov	r0, r2
 800a000:	f7fe fae7 	bl	80085d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a004:	4b0a      	ldr	r3, [pc, #40]	; (800a030 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d202      	bcs.n	800a014 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a00e:	4a08      	ldr	r2, [pc, #32]	; (800a030 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	6013      	str	r3, [r2, #0]
}
 800a014:	bf00      	nop
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20000d08 	.word	0x20000d08
 800a020:	20000830 	.word	0x20000830
 800a024:	20000cf0 	.word	0x20000cf0
 800a028:	20000cc0 	.word	0x20000cc0
 800a02c:	20000cbc 	.word	0x20000cbc
 800a030:	20000d24 	.word	0x20000d24

0800a034 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b08a      	sub	sp, #40	; 0x28
 800a038:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a03a:	2300      	movs	r3, #0
 800a03c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a03e:	f000 fb07 	bl	800a650 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a042:	4b1c      	ldr	r3, [pc, #112]	; (800a0b4 <xTimerCreateTimerTask+0x80>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d021      	beq.n	800a08e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a04a:	2300      	movs	r3, #0
 800a04c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a052:	1d3a      	adds	r2, r7, #4
 800a054:	f107 0108 	add.w	r1, r7, #8
 800a058:	f107 030c 	add.w	r3, r7, #12
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fe fa4d 	bl	80084fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a062:	6879      	ldr	r1, [r7, #4]
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	9202      	str	r2, [sp, #8]
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	2302      	movs	r3, #2
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	2300      	movs	r3, #0
 800a072:	460a      	mov	r2, r1
 800a074:	4910      	ldr	r1, [pc, #64]	; (800a0b8 <xTimerCreateTimerTask+0x84>)
 800a076:	4811      	ldr	r0, [pc, #68]	; (800a0bc <xTimerCreateTimerTask+0x88>)
 800a078:	f7ff f8b4 	bl	80091e4 <xTaskCreateStatic>
 800a07c:	4603      	mov	r3, r0
 800a07e:	4a10      	ldr	r2, [pc, #64]	; (800a0c0 <xTimerCreateTimerTask+0x8c>)
 800a080:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a082:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <xTimerCreateTimerTask+0x8c>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a08a:	2301      	movs	r3, #1
 800a08c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10a      	bne.n	800a0aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	613b      	str	r3, [r7, #16]
}
 800a0a6:	bf00      	nop
 800a0a8:	e7fe      	b.n	800a0a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a0aa:	697b      	ldr	r3, [r7, #20]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20000d60 	.word	0x20000d60
 800a0b8:	0800b8a0 	.word	0x0800b8a0
 800a0bc:	0800a1f9 	.word	0x0800a1f9
 800a0c0:	20000d64 	.word	0x20000d64

0800a0c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08a      	sub	sp, #40	; 0x28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10a      	bne.n	800a0f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	623b      	str	r3, [r7, #32]
}
 800a0ee:	bf00      	nop
 800a0f0:	e7fe      	b.n	800a0f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0f2:	4b1a      	ldr	r3, [pc, #104]	; (800a15c <xTimerGenericCommand+0x98>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d02a      	beq.n	800a150 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b05      	cmp	r3, #5
 800a10a:	dc18      	bgt.n	800a13e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a10c:	f7ff feb2 	bl	8009e74 <xTaskGetSchedulerState>
 800a110:	4603      	mov	r3, r0
 800a112:	2b02      	cmp	r3, #2
 800a114:	d109      	bne.n	800a12a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a116:	4b11      	ldr	r3, [pc, #68]	; (800a15c <xTimerGenericCommand+0x98>)
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	f107 0110 	add.w	r1, r7, #16
 800a11e:	2300      	movs	r3, #0
 800a120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a122:	f7fe fbf7 	bl	8008914 <xQueueGenericSend>
 800a126:	6278      	str	r0, [r7, #36]	; 0x24
 800a128:	e012      	b.n	800a150 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a12a:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <xTimerGenericCommand+0x98>)
 800a12c:	6818      	ldr	r0, [r3, #0]
 800a12e:	f107 0110 	add.w	r1, r7, #16
 800a132:	2300      	movs	r3, #0
 800a134:	2200      	movs	r2, #0
 800a136:	f7fe fbed 	bl	8008914 <xQueueGenericSend>
 800a13a:	6278      	str	r0, [r7, #36]	; 0x24
 800a13c:	e008      	b.n	800a150 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a13e:	4b07      	ldr	r3, [pc, #28]	; (800a15c <xTimerGenericCommand+0x98>)
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	f107 0110 	add.w	r1, r7, #16
 800a146:	2300      	movs	r3, #0
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	f7fe fce1 	bl	8008b10 <xQueueGenericSendFromISR>
 800a14e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a152:	4618      	mov	r0, r3
 800a154:	3728      	adds	r7, #40	; 0x28
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20000d60 	.word	0x20000d60

0800a160 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af02      	add	r7, sp, #8
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a16a:	4b22      	ldr	r3, [pc, #136]	; (800a1f4 <prvProcessExpiredTimer+0x94>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	3304      	adds	r3, #4
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fe fa63 	bl	8008644 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a184:	f003 0304 	and.w	r3, r3, #4
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d022      	beq.n	800a1d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	699a      	ldr	r2, [r3, #24]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	18d1      	adds	r1, r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	6978      	ldr	r0, [r7, #20]
 800a19a:	f000 f8d1 	bl	800a340 <prvInsertTimerInActiveList>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d01f      	beq.n	800a1e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	6978      	ldr	r0, [r7, #20]
 800a1b0:	f7ff ff88 	bl	800a0c4 <xTimerGenericCommand>
 800a1b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d113      	bne.n	800a1e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	60fb      	str	r3, [r7, #12]
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1d8:	f023 0301 	bic.w	r3, r3, #1
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	6978      	ldr	r0, [r7, #20]
 800a1ea:	4798      	blx	r3
}
 800a1ec:	bf00      	nop
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	20000d58 	.word	0x20000d58

0800a1f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a200:	f107 0308 	add.w	r3, r7, #8
 800a204:	4618      	mov	r0, r3
 800a206:	f000 f857 	bl	800a2b8 <prvGetNextExpireTime>
 800a20a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	4619      	mov	r1, r3
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 f803 	bl	800a21c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a216:	f000 f8d5 	bl	800a3c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a21a:	e7f1      	b.n	800a200 <prvTimerTask+0x8>

0800a21c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a226:	f7ff fa39 	bl	800969c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a22a:	f107 0308 	add.w	r3, r7, #8
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 f866 	bl	800a300 <prvSampleTimeNow>
 800a234:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d130      	bne.n	800a29e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10a      	bne.n	800a258 <prvProcessTimerOrBlockTask+0x3c>
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	429a      	cmp	r2, r3
 800a248:	d806      	bhi.n	800a258 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a24a:	f7ff fa35 	bl	80096b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a24e:	68f9      	ldr	r1, [r7, #12]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7ff ff85 	bl	800a160 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a256:	e024      	b.n	800a2a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d008      	beq.n	800a270 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a25e:	4b13      	ldr	r3, [pc, #76]	; (800a2ac <prvProcessTimerOrBlockTask+0x90>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <prvProcessTimerOrBlockTask+0x50>
 800a268:	2301      	movs	r3, #1
 800a26a:	e000      	b.n	800a26e <prvProcessTimerOrBlockTask+0x52>
 800a26c:	2300      	movs	r3, #0
 800a26e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a270:	4b0f      	ldr	r3, [pc, #60]	; (800a2b0 <prvProcessTimerOrBlockTask+0x94>)
 800a272:	6818      	ldr	r0, [r3, #0]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4619      	mov	r1, r3
 800a27e:	f7fe ff7d 	bl	800917c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a282:	f7ff fa19 	bl	80096b8 <xTaskResumeAll>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10a      	bne.n	800a2a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a28c:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <prvProcessTimerOrBlockTask+0x98>)
 800a28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	f3bf 8f6f 	isb	sy
}
 800a29c:	e001      	b.n	800a2a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a29e:	f7ff fa0b 	bl	80096b8 <xTaskResumeAll>
}
 800a2a2:	bf00      	nop
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20000d5c 	.word	0x20000d5c
 800a2b0:	20000d60 	.word	0x20000d60
 800a2b4:	e000ed04 	.word	0xe000ed04

0800a2b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2c0:	4b0e      	ldr	r3, [pc, #56]	; (800a2fc <prvGetNextExpireTime+0x44>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d101      	bne.n	800a2ce <prvGetNextExpireTime+0x16>
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	e000      	b.n	800a2d0 <prvGetNextExpireTime+0x18>
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d105      	bne.n	800a2e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2dc:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <prvGetNextExpireTime+0x44>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	e001      	b.n	800a2ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	20000d58 	.word	0x20000d58

0800a300 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a308:	f7ff fa74 	bl	80097f4 <xTaskGetTickCount>
 800a30c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a30e:	4b0b      	ldr	r3, [pc, #44]	; (800a33c <prvSampleTimeNow+0x3c>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	429a      	cmp	r2, r3
 800a316:	d205      	bcs.n	800a324 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a318:	f000 f936 	bl	800a588 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	e002      	b.n	800a32a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a32a:	4a04      	ldr	r2, [pc, #16]	; (800a33c <prvSampleTimeNow+0x3c>)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a330:	68fb      	ldr	r3, [r7, #12]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20000d68 	.word	0x20000d68

0800a340 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a34e:	2300      	movs	r3, #0
 800a350:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	429a      	cmp	r2, r3
 800a364:	d812      	bhi.n	800a38c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	1ad2      	subs	r2, r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	429a      	cmp	r2, r3
 800a372:	d302      	bcc.n	800a37a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a374:	2301      	movs	r3, #1
 800a376:	617b      	str	r3, [r7, #20]
 800a378:	e01b      	b.n	800a3b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a37a:	4b10      	ldr	r3, [pc, #64]	; (800a3bc <prvInsertTimerInActiveList+0x7c>)
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3304      	adds	r3, #4
 800a382:	4619      	mov	r1, r3
 800a384:	4610      	mov	r0, r2
 800a386:	f7fe f924 	bl	80085d2 <vListInsert>
 800a38a:	e012      	b.n	800a3b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	429a      	cmp	r2, r3
 800a392:	d206      	bcs.n	800a3a2 <prvInsertTimerInActiveList+0x62>
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d302      	bcc.n	800a3a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a39c:	2301      	movs	r3, #1
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	e007      	b.n	800a3b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3a2:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <prvInsertTimerInActiveList+0x80>)
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	4610      	mov	r0, r2
 800a3ae:	f7fe f910 	bl	80085d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a3b2:	697b      	ldr	r3, [r7, #20]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3718      	adds	r7, #24
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	20000d5c 	.word	0x20000d5c
 800a3c0:	20000d58 	.word	0x20000d58

0800a3c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b08e      	sub	sp, #56	; 0x38
 800a3c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3ca:	e0ca      	b.n	800a562 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	da18      	bge.n	800a404 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a3d2:	1d3b      	adds	r3, r7, #4
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10a      	bne.n	800a3f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	61fb      	str	r3, [r7, #28]
}
 800a3f0:	bf00      	nop
 800a3f2:	e7fe      	b.n	800a3f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3fa:	6850      	ldr	r0, [r2, #4]
 800a3fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3fe:	6892      	ldr	r2, [r2, #8]
 800a400:	4611      	mov	r1, r2
 800a402:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	f2c0 80aa 	blt.w	800a560 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d004      	beq.n	800a422 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	3304      	adds	r3, #4
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fe f911 	bl	8008644 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a422:	463b      	mov	r3, r7
 800a424:	4618      	mov	r0, r3
 800a426:	f7ff ff6b 	bl	800a300 <prvSampleTimeNow>
 800a42a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b09      	cmp	r3, #9
 800a430:	f200 8097 	bhi.w	800a562 <prvProcessReceivedCommands+0x19e>
 800a434:	a201      	add	r2, pc, #4	; (adr r2, 800a43c <prvProcessReceivedCommands+0x78>)
 800a436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43a:	bf00      	nop
 800a43c:	0800a465 	.word	0x0800a465
 800a440:	0800a465 	.word	0x0800a465
 800a444:	0800a465 	.word	0x0800a465
 800a448:	0800a4d9 	.word	0x0800a4d9
 800a44c:	0800a4ed 	.word	0x0800a4ed
 800a450:	0800a537 	.word	0x0800a537
 800a454:	0800a465 	.word	0x0800a465
 800a458:	0800a465 	.word	0x0800a465
 800a45c:	0800a4d9 	.word	0x0800a4d9
 800a460:	0800a4ed 	.word	0x0800a4ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a46a:	f043 0301 	orr.w	r3, r3, #1
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	18d1      	adds	r1, r2, r3
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a484:	f7ff ff5c 	bl	800a340 <prvInsertTimerInActiveList>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d069      	beq.n	800a562 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a494:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d05e      	beq.n	800a562 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	441a      	add	r2, r3
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b6:	f7ff fe05 	bl	800a0c4 <xTimerGenericCommand>
 800a4ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d14f      	bne.n	800a562 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	61bb      	str	r3, [r7, #24]
}
 800a4d4:	bf00      	nop
 800a4d6:	e7fe      	b.n	800a4d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4de:	f023 0301 	bic.w	r3, r3, #1
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a4ea:	e03a      	b.n	800a562 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4f2:	f043 0301 	orr.w	r3, r3, #1
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10a      	bne.n	800a522 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	617b      	str	r3, [r7, #20]
}
 800a51e:	bf00      	nop
 800a520:	e7fe      	b.n	800a520 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	699a      	ldr	r2, [r3, #24]
 800a526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a528:	18d1      	adds	r1, r2, r3
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a530:	f7ff ff06 	bl	800a340 <prvInsertTimerInActiveList>
					break;
 800a534:	e015      	b.n	800a562 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a53c:	f003 0302 	and.w	r3, r3, #2
 800a540:	2b00      	cmp	r3, #0
 800a542:	d103      	bne.n	800a54c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a546:	f000 fbdb 	bl	800ad00 <vPortFree>
 800a54a:	e00a      	b.n	800a562 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a552:	f023 0301 	bic.w	r3, r3, #1
 800a556:	b2da      	uxtb	r2, r3
 800a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a55e:	e000      	b.n	800a562 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a560:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a562:	4b08      	ldr	r3, [pc, #32]	; (800a584 <prvProcessReceivedCommands+0x1c0>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	1d39      	adds	r1, r7, #4
 800a568:	2200      	movs	r2, #0
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fb6c 	bl	8008c48 <xQueueReceive>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	f47f af2a 	bne.w	800a3cc <prvProcessReceivedCommands+0x8>
	}
}
 800a578:	bf00      	nop
 800a57a:	bf00      	nop
 800a57c:	3730      	adds	r7, #48	; 0x30
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	20000d60 	.word	0x20000d60

0800a588 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a58e:	e048      	b.n	800a622 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a590:	4b2d      	ldr	r3, [pc, #180]	; (800a648 <prvSwitchTimerLists+0xc0>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a59a:	4b2b      	ldr	r3, [pc, #172]	; (800a648 <prvSwitchTimerLists+0xc0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe f84b 	bl	8008644 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d02e      	beq.n	800a622 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d90e      	bls.n	800a5f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5e2:	4b19      	ldr	r3, [pc, #100]	; (800a648 <prvSwitchTimerLists+0xc0>)
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	f7fd fff0 	bl	80085d2 <vListInsert>
 800a5f2:	e016      	b.n	800a622 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f7ff fd60 	bl	800a0c4 <xTimerGenericCommand>
 800a604:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	603b      	str	r3, [r7, #0]
}
 800a61e:	bf00      	nop
 800a620:	e7fe      	b.n	800a620 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a622:	4b09      	ldr	r3, [pc, #36]	; (800a648 <prvSwitchTimerLists+0xc0>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1b1      	bne.n	800a590 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a62c:	4b06      	ldr	r3, [pc, #24]	; (800a648 <prvSwitchTimerLists+0xc0>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a632:	4b06      	ldr	r3, [pc, #24]	; (800a64c <prvSwitchTimerLists+0xc4>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a04      	ldr	r2, [pc, #16]	; (800a648 <prvSwitchTimerLists+0xc0>)
 800a638:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a63a:	4a04      	ldr	r2, [pc, #16]	; (800a64c <prvSwitchTimerLists+0xc4>)
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	6013      	str	r3, [r2, #0]
}
 800a640:	bf00      	nop
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20000d58 	.word	0x20000d58
 800a64c:	20000d5c 	.word	0x20000d5c

0800a650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a656:	f000 f965 	bl	800a924 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a65a:	4b15      	ldr	r3, [pc, #84]	; (800a6b0 <prvCheckForValidListAndQueue+0x60>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d120      	bne.n	800a6a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a662:	4814      	ldr	r0, [pc, #80]	; (800a6b4 <prvCheckForValidListAndQueue+0x64>)
 800a664:	f7fd ff64 	bl	8008530 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a668:	4813      	ldr	r0, [pc, #76]	; (800a6b8 <prvCheckForValidListAndQueue+0x68>)
 800a66a:	f7fd ff61 	bl	8008530 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a66e:	4b13      	ldr	r3, [pc, #76]	; (800a6bc <prvCheckForValidListAndQueue+0x6c>)
 800a670:	4a10      	ldr	r2, [pc, #64]	; (800a6b4 <prvCheckForValidListAndQueue+0x64>)
 800a672:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a674:	4b12      	ldr	r3, [pc, #72]	; (800a6c0 <prvCheckForValidListAndQueue+0x70>)
 800a676:	4a10      	ldr	r2, [pc, #64]	; (800a6b8 <prvCheckForValidListAndQueue+0x68>)
 800a678:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a67a:	2300      	movs	r3, #0
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	4b11      	ldr	r3, [pc, #68]	; (800a6c4 <prvCheckForValidListAndQueue+0x74>)
 800a680:	4a11      	ldr	r2, [pc, #68]	; (800a6c8 <prvCheckForValidListAndQueue+0x78>)
 800a682:	2110      	movs	r1, #16
 800a684:	200a      	movs	r0, #10
 800a686:	f7fe f86f 	bl	8008768 <xQueueGenericCreateStatic>
 800a68a:	4603      	mov	r3, r0
 800a68c:	4a08      	ldr	r2, [pc, #32]	; (800a6b0 <prvCheckForValidListAndQueue+0x60>)
 800a68e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a690:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <prvCheckForValidListAndQueue+0x60>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d005      	beq.n	800a6a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a698:	4b05      	ldr	r3, [pc, #20]	; (800a6b0 <prvCheckForValidListAndQueue+0x60>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	490b      	ldr	r1, [pc, #44]	; (800a6cc <prvCheckForValidListAndQueue+0x7c>)
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fe fd42 	bl	8009128 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6a4:	f000 f96e 	bl	800a984 <vPortExitCritical>
}
 800a6a8:	bf00      	nop
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20000d60 	.word	0x20000d60
 800a6b4:	20000d30 	.word	0x20000d30
 800a6b8:	20000d44 	.word	0x20000d44
 800a6bc:	20000d58 	.word	0x20000d58
 800a6c0:	20000d5c 	.word	0x20000d5c
 800a6c4:	20000e0c 	.word	0x20000e0c
 800a6c8:	20000d6c 	.word	0x20000d6c
 800a6cc:	0800b8a8 	.word	0x0800b8a8

0800a6d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3b04      	subs	r3, #4
 800a6e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3b04      	subs	r3, #4
 800a6ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	f023 0201 	bic.w	r2, r3, #1
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3b04      	subs	r3, #4
 800a6fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a700:	4a0c      	ldr	r2, [pc, #48]	; (800a734 <pxPortInitialiseStack+0x64>)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3b14      	subs	r3, #20
 800a70a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3b04      	subs	r3, #4
 800a716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f06f 0202 	mvn.w	r2, #2
 800a71e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3b20      	subs	r3, #32
 800a724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a726:	68fb      	ldr	r3, [r7, #12]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	0800a739 	.word	0x0800a739

0800a738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a742:	4b12      	ldr	r3, [pc, #72]	; (800a78c <prvTaskExitError+0x54>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a74a:	d00a      	beq.n	800a762 <prvTaskExitError+0x2a>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	60fb      	str	r3, [r7, #12]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <prvTaskExitError+0x28>
	__asm volatile
 800a762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	60bb      	str	r3, [r7, #8]
}
 800a774:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a776:	bf00      	nop
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0fc      	beq.n	800a778 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a77e:	bf00      	nop
 800a780:	bf00      	nop
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	2000002c 	.word	0x2000002c

0800a790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a790:	4b07      	ldr	r3, [pc, #28]	; (800a7b0 <pxCurrentTCBConst2>)
 800a792:	6819      	ldr	r1, [r3, #0]
 800a794:	6808      	ldr	r0, [r1, #0]
 800a796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79a:	f380 8809 	msr	PSP, r0
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f04f 0000 	mov.w	r0, #0
 800a7a6:	f380 8811 	msr	BASEPRI, r0
 800a7aa:	4770      	bx	lr
 800a7ac:	f3af 8000 	nop.w

0800a7b0 <pxCurrentTCBConst2>:
 800a7b0:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7b4:	bf00      	nop
 800a7b6:	bf00      	nop

0800a7b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7b8:	4808      	ldr	r0, [pc, #32]	; (800a7dc <prvPortStartFirstTask+0x24>)
 800a7ba:	6800      	ldr	r0, [r0, #0]
 800a7bc:	6800      	ldr	r0, [r0, #0]
 800a7be:	f380 8808 	msr	MSP, r0
 800a7c2:	f04f 0000 	mov.w	r0, #0
 800a7c6:	f380 8814 	msr	CONTROL, r0
 800a7ca:	b662      	cpsie	i
 800a7cc:	b661      	cpsie	f
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	df00      	svc	0
 800a7d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7da:	bf00      	nop
 800a7dc:	e000ed08 	.word	0xe000ed08

0800a7e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7e6:	4b46      	ldr	r3, [pc, #280]	; (800a900 <xPortStartScheduler+0x120>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a46      	ldr	r2, [pc, #280]	; (800a904 <xPortStartScheduler+0x124>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d10a      	bne.n	800a806 <xPortStartScheduler+0x26>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	613b      	str	r3, [r7, #16]
}
 800a802:	bf00      	nop
 800a804:	e7fe      	b.n	800a804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a806:	4b3e      	ldr	r3, [pc, #248]	; (800a900 <xPortStartScheduler+0x120>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a3f      	ldr	r2, [pc, #252]	; (800a908 <xPortStartScheduler+0x128>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d10a      	bne.n	800a826 <xPortStartScheduler+0x46>
	__asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	60fb      	str	r3, [r7, #12]
}
 800a822:	bf00      	nop
 800a824:	e7fe      	b.n	800a824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a826:	4b39      	ldr	r3, [pc, #228]	; (800a90c <xPortStartScheduler+0x12c>)
 800a828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	22ff      	movs	r2, #255	; 0xff
 800a836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	b2db      	uxtb	r3, r3
 800a844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a848:	b2da      	uxtb	r2, r3
 800a84a:	4b31      	ldr	r3, [pc, #196]	; (800a910 <xPortStartScheduler+0x130>)
 800a84c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a84e:	4b31      	ldr	r3, [pc, #196]	; (800a914 <xPortStartScheduler+0x134>)
 800a850:	2207      	movs	r2, #7
 800a852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a854:	e009      	b.n	800a86a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a856:	4b2f      	ldr	r3, [pc, #188]	; (800a914 <xPortStartScheduler+0x134>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	4a2d      	ldr	r2, [pc, #180]	; (800a914 <xPortStartScheduler+0x134>)
 800a85e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a860:	78fb      	ldrb	r3, [r7, #3]
 800a862:	b2db      	uxtb	r3, r3
 800a864:	005b      	lsls	r3, r3, #1
 800a866:	b2db      	uxtb	r3, r3
 800a868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a86a:	78fb      	ldrb	r3, [r7, #3]
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a872:	2b80      	cmp	r3, #128	; 0x80
 800a874:	d0ef      	beq.n	800a856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a876:	4b27      	ldr	r3, [pc, #156]	; (800a914 <xPortStartScheduler+0x134>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f1c3 0307 	rsb	r3, r3, #7
 800a87e:	2b04      	cmp	r3, #4
 800a880:	d00a      	beq.n	800a898 <xPortStartScheduler+0xb8>
	__asm volatile
 800a882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	60bb      	str	r3, [r7, #8]
}
 800a894:	bf00      	nop
 800a896:	e7fe      	b.n	800a896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a898:	4b1e      	ldr	r3, [pc, #120]	; (800a914 <xPortStartScheduler+0x134>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	021b      	lsls	r3, r3, #8
 800a89e:	4a1d      	ldr	r2, [pc, #116]	; (800a914 <xPortStartScheduler+0x134>)
 800a8a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8a2:	4b1c      	ldr	r3, [pc, #112]	; (800a914 <xPortStartScheduler+0x134>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8aa:	4a1a      	ldr	r2, [pc, #104]	; (800a914 <xPortStartScheduler+0x134>)
 800a8ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8b6:	4b18      	ldr	r3, [pc, #96]	; (800a918 <xPortStartScheduler+0x138>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a17      	ldr	r2, [pc, #92]	; (800a918 <xPortStartScheduler+0x138>)
 800a8bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8c2:	4b15      	ldr	r3, [pc, #84]	; (800a918 <xPortStartScheduler+0x138>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a14      	ldr	r2, [pc, #80]	; (800a918 <xPortStartScheduler+0x138>)
 800a8c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8ce:	f000 f8dd 	bl	800aa8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8d2:	4b12      	ldr	r3, [pc, #72]	; (800a91c <xPortStartScheduler+0x13c>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8d8:	f000 f8fc 	bl	800aad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8dc:	4b10      	ldr	r3, [pc, #64]	; (800a920 <xPortStartScheduler+0x140>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a0f      	ldr	r2, [pc, #60]	; (800a920 <xPortStartScheduler+0x140>)
 800a8e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8e8:	f7ff ff66 	bl	800a7b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8ec:	f7ff f84c 	bl	8009988 <vTaskSwitchContext>
	prvTaskExitError();
 800a8f0:	f7ff ff22 	bl	800a738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3718      	adds	r7, #24
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	e000ed00 	.word	0xe000ed00
 800a904:	410fc271 	.word	0x410fc271
 800a908:	410fc270 	.word	0x410fc270
 800a90c:	e000e400 	.word	0xe000e400
 800a910:	20000e5c 	.word	0x20000e5c
 800a914:	20000e60 	.word	0x20000e60
 800a918:	e000ed20 	.word	0xe000ed20
 800a91c:	2000002c 	.word	0x2000002c
 800a920:	e000ef34 	.word	0xe000ef34

0800a924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	607b      	str	r3, [r7, #4]
}
 800a93c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a93e:	4b0f      	ldr	r3, [pc, #60]	; (800a97c <vPortEnterCritical+0x58>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	3301      	adds	r3, #1
 800a944:	4a0d      	ldr	r2, [pc, #52]	; (800a97c <vPortEnterCritical+0x58>)
 800a946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a948:	4b0c      	ldr	r3, [pc, #48]	; (800a97c <vPortEnterCritical+0x58>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d10f      	bne.n	800a970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a950:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <vPortEnterCritical+0x5c>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	b2db      	uxtb	r3, r3
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00a      	beq.n	800a970 <vPortEnterCritical+0x4c>
	__asm volatile
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	603b      	str	r3, [r7, #0]
}
 800a96c:	bf00      	nop
 800a96e:	e7fe      	b.n	800a96e <vPortEnterCritical+0x4a>
	}
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	2000002c 	.word	0x2000002c
 800a980:	e000ed04 	.word	0xe000ed04

0800a984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a98a:	4b12      	ldr	r3, [pc, #72]	; (800a9d4 <vPortExitCritical+0x50>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10a      	bne.n	800a9a8 <vPortExitCritical+0x24>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	607b      	str	r3, [r7, #4]
}
 800a9a4:	bf00      	nop
 800a9a6:	e7fe      	b.n	800a9a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9a8:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <vPortExitCritical+0x50>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	4a09      	ldr	r2, [pc, #36]	; (800a9d4 <vPortExitCritical+0x50>)
 800a9b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9b2:	4b08      	ldr	r3, [pc, #32]	; (800a9d4 <vPortExitCritical+0x50>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d105      	bne.n	800a9c6 <vPortExitCritical+0x42>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	f383 8811 	msr	BASEPRI, r3
}
 800a9c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9c6:	bf00      	nop
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	2000002c 	.word	0x2000002c
	...

0800a9e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9e0:	f3ef 8009 	mrs	r0, PSP
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <pxCurrentTCBConst>)
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	f01e 0f10 	tst.w	lr, #16
 800a9f0:	bf08      	it	eq
 800a9f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fa:	6010      	str	r0, [r2, #0]
 800a9fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa04:	f380 8811 	msr	BASEPRI, r0
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f7fe ffba 	bl	8009988 <vTaskSwitchContext>
 800aa14:	f04f 0000 	mov.w	r0, #0
 800aa18:	f380 8811 	msr	BASEPRI, r0
 800aa1c:	bc09      	pop	{r0, r3}
 800aa1e:	6819      	ldr	r1, [r3, #0]
 800aa20:	6808      	ldr	r0, [r1, #0]
 800aa22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa26:	f01e 0f10 	tst.w	lr, #16
 800aa2a:	bf08      	it	eq
 800aa2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa30:	f380 8809 	msr	PSP, r0
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	f3af 8000 	nop.w

0800aa40 <pxCurrentTCBConst>:
 800aa40:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop

0800aa48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	607b      	str	r3, [r7, #4]
}
 800aa60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa62:	f7fe fed7 	bl	8009814 <xTaskIncrementTick>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d003      	beq.n	800aa74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa6c:	4b06      	ldr	r3, [pc, #24]	; (800aa88 <xPortSysTickHandler+0x40>)
 800aa6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	2300      	movs	r3, #0
 800aa76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	f383 8811 	msr	BASEPRI, r3
}
 800aa7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	e000ed04 	.word	0xe000ed04

0800aa8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa90:	4b0b      	ldr	r3, [pc, #44]	; (800aac0 <vPortSetupTimerInterrupt+0x34>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa96:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <vPortSetupTimerInterrupt+0x38>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	; (800aac8 <vPortSetupTimerInterrupt+0x3c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a0a      	ldr	r2, [pc, #40]	; (800aacc <vPortSetupTimerInterrupt+0x40>)
 800aaa2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa6:	099b      	lsrs	r3, r3, #6
 800aaa8:	4a09      	ldr	r2, [pc, #36]	; (800aad0 <vPortSetupTimerInterrupt+0x44>)
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aaae:	4b04      	ldr	r3, [pc, #16]	; (800aac0 <vPortSetupTimerInterrupt+0x34>)
 800aab0:	2207      	movs	r2, #7
 800aab2:	601a      	str	r2, [r3, #0]
}
 800aab4:	bf00      	nop
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	e000e010 	.word	0xe000e010
 800aac4:	e000e018 	.word	0xe000e018
 800aac8:	20000000 	.word	0x20000000
 800aacc:	10624dd3 	.word	0x10624dd3
 800aad0:	e000e014 	.word	0xe000e014

0800aad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aae4 <vPortEnableVFP+0x10>
 800aad8:	6801      	ldr	r1, [r0, #0]
 800aada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aade:	6001      	str	r1, [r0, #0]
 800aae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aae2:	bf00      	nop
 800aae4:	e000ed88 	.word	0xe000ed88

0800aae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aaee:	f3ef 8305 	mrs	r3, IPSR
 800aaf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b0f      	cmp	r3, #15
 800aaf8:	d914      	bls.n	800ab24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aafa:	4a17      	ldr	r2, [pc, #92]	; (800ab58 <vPortValidateInterruptPriority+0x70>)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	4413      	add	r3, r2
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab04:	4b15      	ldr	r3, [pc, #84]	; (800ab5c <vPortValidateInterruptPriority+0x74>)
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	7afa      	ldrb	r2, [r7, #11]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d20a      	bcs.n	800ab24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	607b      	str	r3, [r7, #4]
}
 800ab20:	bf00      	nop
 800ab22:	e7fe      	b.n	800ab22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab24:	4b0e      	ldr	r3, [pc, #56]	; (800ab60 <vPortValidateInterruptPriority+0x78>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab2c:	4b0d      	ldr	r3, [pc, #52]	; (800ab64 <vPortValidateInterruptPriority+0x7c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d90a      	bls.n	800ab4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	603b      	str	r3, [r7, #0]
}
 800ab46:	bf00      	nop
 800ab48:	e7fe      	b.n	800ab48 <vPortValidateInterruptPriority+0x60>
	}
 800ab4a:	bf00      	nop
 800ab4c:	3714      	adds	r7, #20
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	e000e3f0 	.word	0xe000e3f0
 800ab5c:	20000e5c 	.word	0x20000e5c
 800ab60:	e000ed0c 	.word	0xe000ed0c
 800ab64:	20000e60 	.word	0x20000e60

0800ab68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08a      	sub	sp, #40	; 0x28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab70:	2300      	movs	r3, #0
 800ab72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab74:	f7fe fd92 	bl	800969c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab78:	4b5b      	ldr	r3, [pc, #364]	; (800ace8 <pvPortMalloc+0x180>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab80:	f000 f920 	bl	800adc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab84:	4b59      	ldr	r3, [pc, #356]	; (800acec <pvPortMalloc+0x184>)
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f040 8093 	bne.w	800acb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d01d      	beq.n	800abd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ab98:	2208      	movs	r2, #8
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f003 0307 	and.w	r3, r3, #7
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d014      	beq.n	800abd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f023 0307 	bic.w	r3, r3, #7
 800abb0:	3308      	adds	r3, #8
 800abb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f003 0307 	and.w	r3, r3, #7
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00a      	beq.n	800abd4 <pvPortMalloc+0x6c>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	617b      	str	r3, [r7, #20]
}
 800abd0:	bf00      	nop
 800abd2:	e7fe      	b.n	800abd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d06e      	beq.n	800acb8 <pvPortMalloc+0x150>
 800abda:	4b45      	ldr	r3, [pc, #276]	; (800acf0 <pvPortMalloc+0x188>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d869      	bhi.n	800acb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abe4:	4b43      	ldr	r3, [pc, #268]	; (800acf4 <pvPortMalloc+0x18c>)
 800abe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abe8:	4b42      	ldr	r3, [pc, #264]	; (800acf4 <pvPortMalloc+0x18c>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abee:	e004      	b.n	800abfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d903      	bls.n	800ac0c <pvPortMalloc+0xa4>
 800ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1f1      	bne.n	800abf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac0c:	4b36      	ldr	r3, [pc, #216]	; (800ace8 <pvPortMalloc+0x180>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d050      	beq.n	800acb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac16:	6a3b      	ldr	r3, [r7, #32]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2208      	movs	r2, #8
 800ac1c:	4413      	add	r3, r2
 800ac1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	1ad2      	subs	r2, r2, r3
 800ac30:	2308      	movs	r3, #8
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d91f      	bls.n	800ac78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	f003 0307 	and.w	r3, r3, #7
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <pvPortMalloc+0xf8>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	613b      	str	r3, [r7, #16]
}
 800ac5c:	bf00      	nop
 800ac5e:	e7fe      	b.n	800ac5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	1ad2      	subs	r2, r2, r3
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac72:	69b8      	ldr	r0, [r7, #24]
 800ac74:	f000 f908 	bl	800ae88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac78:	4b1d      	ldr	r3, [pc, #116]	; (800acf0 <pvPortMalloc+0x188>)
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	4a1b      	ldr	r2, [pc, #108]	; (800acf0 <pvPortMalloc+0x188>)
 800ac84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac86:	4b1a      	ldr	r3, [pc, #104]	; (800acf0 <pvPortMalloc+0x188>)
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	4b1b      	ldr	r3, [pc, #108]	; (800acf8 <pvPortMalloc+0x190>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d203      	bcs.n	800ac9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac92:	4b17      	ldr	r3, [pc, #92]	; (800acf0 <pvPortMalloc+0x188>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a18      	ldr	r2, [pc, #96]	; (800acf8 <pvPortMalloc+0x190>)
 800ac98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	4b13      	ldr	r3, [pc, #76]	; (800acec <pvPortMalloc+0x184>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	431a      	orrs	r2, r3
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acaa:	2200      	movs	r2, #0
 800acac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acae:	4b13      	ldr	r3, [pc, #76]	; (800acfc <pvPortMalloc+0x194>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3301      	adds	r3, #1
 800acb4:	4a11      	ldr	r2, [pc, #68]	; (800acfc <pvPortMalloc+0x194>)
 800acb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acb8:	f7fe fcfe 	bl	80096b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	f003 0307 	and.w	r3, r3, #7
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00a      	beq.n	800acdc <pvPortMalloc+0x174>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	60fb      	str	r3, [r7, #12]
}
 800acd8:	bf00      	nop
 800acda:	e7fe      	b.n	800acda <pvPortMalloc+0x172>
	return pvReturn;
 800acdc:	69fb      	ldr	r3, [r7, #28]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3728      	adds	r7, #40	; 0x28
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20004a6c 	.word	0x20004a6c
 800acec:	20004a80 	.word	0x20004a80
 800acf0:	20004a70 	.word	0x20004a70
 800acf4:	20004a64 	.word	0x20004a64
 800acf8:	20004a74 	.word	0x20004a74
 800acfc:	20004a78 	.word	0x20004a78

0800ad00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d04d      	beq.n	800adae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad12:	2308      	movs	r3, #8
 800ad14:	425b      	negs	r3, r3
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	4413      	add	r3, r2
 800ad1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	685a      	ldr	r2, [r3, #4]
 800ad24:	4b24      	ldr	r3, [pc, #144]	; (800adb8 <vPortFree+0xb8>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4013      	ands	r3, r2
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10a      	bne.n	800ad44 <vPortFree+0x44>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	60fb      	str	r3, [r7, #12]
}
 800ad40:	bf00      	nop
 800ad42:	e7fe      	b.n	800ad42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00a      	beq.n	800ad62 <vPortFree+0x62>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	60bb      	str	r3, [r7, #8]
}
 800ad5e:	bf00      	nop
 800ad60:	e7fe      	b.n	800ad60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	4b14      	ldr	r3, [pc, #80]	; (800adb8 <vPortFree+0xb8>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d01e      	beq.n	800adae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d11a      	bne.n	800adae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	4b0e      	ldr	r3, [pc, #56]	; (800adb8 <vPortFree+0xb8>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	43db      	mvns	r3, r3
 800ad82:	401a      	ands	r2, r3
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad88:	f7fe fc88 	bl	800969c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <vPortFree+0xbc>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4413      	add	r3, r2
 800ad96:	4a09      	ldr	r2, [pc, #36]	; (800adbc <vPortFree+0xbc>)
 800ad98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad9a:	6938      	ldr	r0, [r7, #16]
 800ad9c:	f000 f874 	bl	800ae88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ada0:	4b07      	ldr	r3, [pc, #28]	; (800adc0 <vPortFree+0xc0>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	3301      	adds	r3, #1
 800ada6:	4a06      	ldr	r2, [pc, #24]	; (800adc0 <vPortFree+0xc0>)
 800ada8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adaa:	f7fe fc85 	bl	80096b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adae:	bf00      	nop
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	20004a80 	.word	0x20004a80
 800adbc:	20004a70 	.word	0x20004a70
 800adc0:	20004a7c 	.word	0x20004a7c

0800adc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800adce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800add0:	4b27      	ldr	r3, [pc, #156]	; (800ae70 <prvHeapInit+0xac>)
 800add2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f003 0307 	and.w	r3, r3, #7
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00c      	beq.n	800adf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3307      	adds	r3, #7
 800ade2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 0307 	bic.w	r3, r3, #7
 800adea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	4a1f      	ldr	r2, [pc, #124]	; (800ae70 <prvHeapInit+0xac>)
 800adf4:	4413      	add	r3, r2
 800adf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adfc:	4a1d      	ldr	r2, [pc, #116]	; (800ae74 <prvHeapInit+0xb0>)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae02:	4b1c      	ldr	r3, [pc, #112]	; (800ae74 <prvHeapInit+0xb0>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae10:	2208      	movs	r2, #8
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	1a9b      	subs	r3, r3, r2
 800ae16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f023 0307 	bic.w	r3, r3, #7
 800ae1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	4a15      	ldr	r2, [pc, #84]	; (800ae78 <prvHeapInit+0xb4>)
 800ae24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae26:	4b14      	ldr	r3, [pc, #80]	; (800ae78 <prvHeapInit+0xb4>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae2e:	4b12      	ldr	r3, [pc, #72]	; (800ae78 <prvHeapInit+0xb4>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	1ad2      	subs	r2, r2, r3
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae44:	4b0c      	ldr	r3, [pc, #48]	; (800ae78 <prvHeapInit+0xb4>)
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	4a0a      	ldr	r2, [pc, #40]	; (800ae7c <prvHeapInit+0xb8>)
 800ae52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	4a09      	ldr	r2, [pc, #36]	; (800ae80 <prvHeapInit+0xbc>)
 800ae5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae5c:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <prvHeapInit+0xc0>)
 800ae5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae62:	601a      	str	r2, [r3, #0]
}
 800ae64:	bf00      	nop
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	20000e64 	.word	0x20000e64
 800ae74:	20004a64 	.word	0x20004a64
 800ae78:	20004a6c 	.word	0x20004a6c
 800ae7c:	20004a74 	.word	0x20004a74
 800ae80:	20004a70 	.word	0x20004a70
 800ae84:	20004a80 	.word	0x20004a80

0800ae88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae90:	4b28      	ldr	r3, [pc, #160]	; (800af34 <prvInsertBlockIntoFreeList+0xac>)
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	e002      	b.n	800ae9c <prvInsertBlockIntoFreeList+0x14>
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d8f7      	bhi.n	800ae96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d108      	bne.n	800aeca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	441a      	add	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	68ba      	ldr	r2, [r7, #8]
 800aed4:	441a      	add	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d118      	bne.n	800af10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	4b15      	ldr	r3, [pc, #84]	; (800af38 <prvInsertBlockIntoFreeList+0xb0>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d00d      	beq.n	800af06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	441a      	add	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	e008      	b.n	800af18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af06:	4b0c      	ldr	r3, [pc, #48]	; (800af38 <prvInsertBlockIntoFreeList+0xb0>)
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	e003      	b.n	800af18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d002      	beq.n	800af26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af26:	bf00      	nop
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	20004a64 	.word	0x20004a64
 800af38:	20004a6c 	.word	0x20004a6c

0800af3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800af40:	2201      	movs	r2, #1
 800af42:	490e      	ldr	r1, [pc, #56]	; (800af7c <MX_USB_HOST_Init+0x40>)
 800af44:	480e      	ldr	r0, [pc, #56]	; (800af80 <MX_USB_HOST_Init+0x44>)
 800af46:	f7fb facb 	bl	80064e0 <USBH_Init>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800af50:	f7f5 fd9e 	bl	8000a90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800af54:	490b      	ldr	r1, [pc, #44]	; (800af84 <MX_USB_HOST_Init+0x48>)
 800af56:	480a      	ldr	r0, [pc, #40]	; (800af80 <MX_USB_HOST_Init+0x44>)
 800af58:	f7fb fb72 	bl	8006640 <USBH_RegisterClass>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800af62:	f7f5 fd95 	bl	8000a90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800af66:	4806      	ldr	r0, [pc, #24]	; (800af80 <MX_USB_HOST_Init+0x44>)
 800af68:	f7fb fbf6 	bl	8006758 <USBH_Start>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800af72:	f7f5 fd8d 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800af76:	bf00      	nop
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	0800af89 	.word	0x0800af89
 800af80:	20004c48 	.word	0x20004c48
 800af84:	2000000c 	.word	0x2000000c

0800af88 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	460b      	mov	r3, r1
 800af92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800af94:	78fb      	ldrb	r3, [r7, #3]
 800af96:	3b01      	subs	r3, #1
 800af98:	2b04      	cmp	r3, #4
 800af9a:	d819      	bhi.n	800afd0 <USBH_UserProcess+0x48>
 800af9c:	a201      	add	r2, pc, #4	; (adr r2, 800afa4 <USBH_UserProcess+0x1c>)
 800af9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa2:	bf00      	nop
 800afa4:	0800afd1 	.word	0x0800afd1
 800afa8:	0800afc1 	.word	0x0800afc1
 800afac:	0800afd1 	.word	0x0800afd1
 800afb0:	0800afc9 	.word	0x0800afc9
 800afb4:	0800afb9 	.word	0x0800afb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800afb8:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <USBH_UserProcess+0x58>)
 800afba:	2203      	movs	r2, #3
 800afbc:	701a      	strb	r2, [r3, #0]
  break;
 800afbe:	e008      	b.n	800afd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800afc0:	4b07      	ldr	r3, [pc, #28]	; (800afe0 <USBH_UserProcess+0x58>)
 800afc2:	2202      	movs	r2, #2
 800afc4:	701a      	strb	r2, [r3, #0]
  break;
 800afc6:	e004      	b.n	800afd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800afc8:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <USBH_UserProcess+0x58>)
 800afca:	2201      	movs	r2, #1
 800afcc:	701a      	strb	r2, [r3, #0]
  break;
 800afce:	e000      	b.n	800afd2 <USBH_UserProcess+0x4a>

  default:
  break;
 800afd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800afd2:	bf00      	nop
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	20004a84 	.word	0x20004a84

0800afe4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b08a      	sub	sp, #40	; 0x28
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afec:	f107 0314 	add.w	r3, r7, #20
 800aff0:	2200      	movs	r2, #0
 800aff2:	601a      	str	r2, [r3, #0]
 800aff4:	605a      	str	r2, [r3, #4]
 800aff6:	609a      	str	r2, [r3, #8]
 800aff8:	60da      	str	r2, [r3, #12]
 800affa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b004:	d147      	bne.n	800b096 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b006:	2300      	movs	r3, #0
 800b008:	613b      	str	r3, [r7, #16]
 800b00a:	4b25      	ldr	r3, [pc, #148]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00e:	4a24      	ldr	r2, [pc, #144]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b010:	f043 0301 	orr.w	r3, r3, #1
 800b014:	6313      	str	r3, [r2, #48]	; 0x30
 800b016:	4b22      	ldr	r3, [pc, #136]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01a:	f003 0301 	and.w	r3, r3, #1
 800b01e:	613b      	str	r3, [r7, #16]
 800b020:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b022:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b028:	2300      	movs	r3, #0
 800b02a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b030:	f107 0314 	add.w	r3, r7, #20
 800b034:	4619      	mov	r1, r3
 800b036:	481b      	ldr	r0, [pc, #108]	; (800b0a4 <HAL_HCD_MspInit+0xc0>)
 800b038:	f7f6 f8aa 	bl	8001190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b03c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b042:	2302      	movs	r3, #2
 800b044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b046:	2300      	movs	r3, #0
 800b048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b04a:	2300      	movs	r3, #0
 800b04c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b04e:	230a      	movs	r3, #10
 800b050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b052:	f107 0314 	add.w	r3, r7, #20
 800b056:	4619      	mov	r1, r3
 800b058:	4812      	ldr	r0, [pc, #72]	; (800b0a4 <HAL_HCD_MspInit+0xc0>)
 800b05a:	f7f6 f899 	bl	8001190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b05e:	4b10      	ldr	r3, [pc, #64]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b062:	4a0f      	ldr	r2, [pc, #60]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b068:	6353      	str	r3, [r2, #52]	; 0x34
 800b06a:	2300      	movs	r3, #0
 800b06c:	60fb      	str	r3, [r7, #12]
 800b06e:	4b0c      	ldr	r3, [pc, #48]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b072:	4a0b      	ldr	r2, [pc, #44]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b078:	6453      	str	r3, [r2, #68]	; 0x44
 800b07a:	4b09      	ldr	r3, [pc, #36]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b082:	60fb      	str	r3, [r7, #12]
 800b084:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b086:	2200      	movs	r2, #0
 800b088:	2105      	movs	r1, #5
 800b08a:	2043      	movs	r0, #67	; 0x43
 800b08c:	f7f6 f856 	bl	800113c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b090:	2043      	movs	r0, #67	; 0x43
 800b092:	f7f6 f86f 	bl	8001174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b096:	bf00      	nop
 800b098:	3728      	adds	r7, #40	; 0x28
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	40023800 	.word	0x40023800
 800b0a4:	40020000 	.word	0x40020000

0800b0a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fb fffb 	bl	80070b2 <USBH_LL_IncTimer>
}
 800b0bc:	bf00      	nop
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fc f83f 	bl	8007156 <USBH_LL_Connect>
}
 800b0d8:	bf00      	nop
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fc f854 	bl	800719c <USBH_LL_Disconnect>
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	70fb      	strb	r3, [r7, #3]
 800b108:	4613      	mov	r3, r2
 800b10a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b112:	4618      	mov	r0, r3
 800b114:	f7fc f88b 	bl	800722e <USBH_LL_NotifyURBChange>
#endif
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fb ffe9 	bl	8007106 <USBH_LL_PortEnabled>
}
 800b134:	bf00      	nop
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fb fff5 	bl	800713a <USBH_LL_PortDisabled>
}
 800b150:	bf00      	nop
 800b152:	3708      	adds	r7, #8
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b166:	2b01      	cmp	r3, #1
 800b168:	d12a      	bne.n	800b1c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b16a:	4a18      	ldr	r2, [pc, #96]	; (800b1cc <USBH_LL_Init+0x74>)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a15      	ldr	r2, [pc, #84]	; (800b1cc <USBH_LL_Init+0x74>)
 800b176:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b17a:	4b14      	ldr	r3, [pc, #80]	; (800b1cc <USBH_LL_Init+0x74>)
 800b17c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b180:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b182:	4b12      	ldr	r3, [pc, #72]	; (800b1cc <USBH_LL_Init+0x74>)
 800b184:	2208      	movs	r2, #8
 800b186:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b188:	4b10      	ldr	r3, [pc, #64]	; (800b1cc <USBH_LL_Init+0x74>)
 800b18a:	2201      	movs	r2, #1
 800b18c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b18e:	4b0f      	ldr	r3, [pc, #60]	; (800b1cc <USBH_LL_Init+0x74>)
 800b190:	2200      	movs	r2, #0
 800b192:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b194:	4b0d      	ldr	r3, [pc, #52]	; (800b1cc <USBH_LL_Init+0x74>)
 800b196:	2202      	movs	r2, #2
 800b198:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b19a:	4b0c      	ldr	r3, [pc, #48]	; (800b1cc <USBH_LL_Init+0x74>)
 800b19c:	2200      	movs	r2, #0
 800b19e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b1a0:	480a      	ldr	r0, [pc, #40]	; (800b1cc <USBH_LL_Init+0x74>)
 800b1a2:	f7f6 f9c2 	bl	800152a <HAL_HCD_Init>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d001      	beq.n	800b1b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b1ac:	f7f5 fc70 	bl	8000a90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b1b0:	4806      	ldr	r0, [pc, #24]	; (800b1cc <USBH_LL_Init+0x74>)
 800b1b2:	f7f6 fda6 	bl	8001d02 <HAL_HCD_GetCurrentFrame>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7fb ff6a 	bl	8007094 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	2000502c 	.word	0x2000502c

0800b1d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7f6 fd15 	bl	8001c16 <HAL_HCD_Start>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 f95c 	bl	800b4b0 <USBH_Get_USB_Status>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b084      	sub	sp, #16
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7f6 fd1d 	bl	8001c5c <HAL_HCD_Stop>
 800b222:	4603      	mov	r3, r0
 800b224:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 f941 	bl	800b4b0 <USBH_Get_USB_Status>
 800b22e:	4603      	mov	r3, r0
 800b230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b232:	7bbb      	ldrb	r3, [r7, #14]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b244:	2301      	movs	r3, #1
 800b246:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b24e:	4618      	mov	r0, r3
 800b250:	f7f6 fd65 	bl	8001d1e <HAL_HCD_GetCurrentSpeed>
 800b254:	4603      	mov	r3, r0
 800b256:	2b02      	cmp	r3, #2
 800b258:	d00c      	beq.n	800b274 <USBH_LL_GetSpeed+0x38>
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d80d      	bhi.n	800b27a <USBH_LL_GetSpeed+0x3e>
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d002      	beq.n	800b268 <USBH_LL_GetSpeed+0x2c>
 800b262:	2b01      	cmp	r3, #1
 800b264:	d003      	beq.n	800b26e <USBH_LL_GetSpeed+0x32>
 800b266:	e008      	b.n	800b27a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b268:	2300      	movs	r3, #0
 800b26a:	73fb      	strb	r3, [r7, #15]
    break;
 800b26c:	e008      	b.n	800b280 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b26e:	2301      	movs	r3, #1
 800b270:	73fb      	strb	r3, [r7, #15]
    break;
 800b272:	e005      	b.n	800b280 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b274:	2302      	movs	r3, #2
 800b276:	73fb      	strb	r3, [r7, #15]
    break;
 800b278:	e002      	b.n	800b280 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b27a:	2301      	movs	r3, #1
 800b27c:	73fb      	strb	r3, [r7, #15]
    break;
 800b27e:	bf00      	nop
  }
  return  speed;
 800b280:	7bfb      	ldrb	r3, [r7, #15]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7f6 fcf8 	bl	8001c96 <HAL_HCD_ResetPort>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2aa:	7bfb      	ldrb	r3, [r7, #15]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f000 f8ff 	bl	800b4b0 <USBH_Get_USB_Status>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2d2:	78fa      	ldrb	r2, [r7, #3]
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7f6 fcff 	bl	8001cda <HAL_HCD_HC_GetXferCount>
 800b2dc:	4603      	mov	r3, r0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b2e6:	b590      	push	{r4, r7, lr}
 800b2e8:	b089      	sub	sp, #36	; 0x24
 800b2ea:	af04      	add	r7, sp, #16
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	4608      	mov	r0, r1
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	70fb      	strb	r3, [r7, #3]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	70bb      	strb	r3, [r7, #2]
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b300:	2300      	movs	r3, #0
 800b302:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b30e:	787c      	ldrb	r4, [r7, #1]
 800b310:	78ba      	ldrb	r2, [r7, #2]
 800b312:	78f9      	ldrb	r1, [r7, #3]
 800b314:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b316:	9302      	str	r3, [sp, #8]
 800b318:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	4623      	mov	r3, r4
 800b326:	f7f6 f962 	bl	80015ee <HAL_HCD_HC_Init>
 800b32a:	4603      	mov	r3, r0
 800b32c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
 800b330:	4618      	mov	r0, r3
 800b332:	f000 f8bd 	bl	800b4b0 <USBH_Get_USB_Status>
 800b336:	4603      	mov	r3, r0
 800b338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b33a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	bd90      	pop	{r4, r7, pc}

0800b344 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	460b      	mov	r3, r1
 800b34e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b350:	2300      	movs	r3, #0
 800b352:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b354:	2300      	movs	r3, #0
 800b356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b35e:	78fa      	ldrb	r2, [r7, #3]
 800b360:	4611      	mov	r1, r2
 800b362:	4618      	mov	r0, r3
 800b364:	f7f6 f9d2 	bl	800170c <HAL_HCD_HC_Halt>
 800b368:	4603      	mov	r3, r0
 800b36a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 f89e 	bl	800b4b0 <USBH_Get_USB_Status>
 800b374:	4603      	mov	r3, r0
 800b376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b378:	7bbb      	ldrb	r3, [r7, #14]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b382:	b590      	push	{r4, r7, lr}
 800b384:	b089      	sub	sp, #36	; 0x24
 800b386:	af04      	add	r7, sp, #16
 800b388:	6078      	str	r0, [r7, #4]
 800b38a:	4608      	mov	r0, r1
 800b38c:	4611      	mov	r1, r2
 800b38e:	461a      	mov	r2, r3
 800b390:	4603      	mov	r3, r0
 800b392:	70fb      	strb	r3, [r7, #3]
 800b394:	460b      	mov	r3, r1
 800b396:	70bb      	strb	r3, [r7, #2]
 800b398:	4613      	mov	r3, r2
 800b39a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b3aa:	787c      	ldrb	r4, [r7, #1]
 800b3ac:	78ba      	ldrb	r2, [r7, #2]
 800b3ae:	78f9      	ldrb	r1, [r7, #3]
 800b3b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b3b4:	9303      	str	r3, [sp, #12]
 800b3b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3b8:	9302      	str	r3, [sp, #8]
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	4623      	mov	r3, r4
 800b3c6:	f7f6 f9c5 	bl	8001754 <HAL_HCD_HC_SubmitRequest>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b3ce:	7bfb      	ldrb	r3, [r7, #15]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 f86d 	bl	800b4b0 <USBH_Get_USB_Status>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd90      	pop	{r4, r7, pc}

0800b3e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3f6:	78fa      	ldrb	r2, [r7, #3]
 800b3f8:	4611      	mov	r1, r2
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7f6 fc59 	bl	8001cb2 <HAL_HCD_HC_GetURBState>
 800b400:	4603      	mov	r3, r0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b082      	sub	sp, #8
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	460b      	mov	r3, r1
 800b414:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d103      	bne.n	800b428 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b420:	78fb      	ldrb	r3, [r7, #3]
 800b422:	4618      	mov	r0, r3
 800b424:	f000 f870 	bl	800b508 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b428:	20c8      	movs	r0, #200	; 0xc8
 800b42a:	f7f5 fdab 	bl	8000f84 <HAL_Delay>
  return USBH_OK;
 800b42e:	2300      	movs	r3, #0
}
 800b430:	4618      	mov	r0, r3
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	460b      	mov	r3, r1
 800b442:	70fb      	strb	r3, [r7, #3]
 800b444:	4613      	mov	r3, r2
 800b446:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b44e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b450:	78fb      	ldrb	r3, [r7, #3]
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	212c      	movs	r1, #44	; 0x2c
 800b456:	fb01 f303 	mul.w	r3, r1, r3
 800b45a:	4413      	add	r3, r2
 800b45c:	333b      	adds	r3, #59	; 0x3b
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d009      	beq.n	800b478 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b464:	78fb      	ldrb	r3, [r7, #3]
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	212c      	movs	r1, #44	; 0x2c
 800b46a:	fb01 f303 	mul.w	r3, r1, r3
 800b46e:	4413      	add	r3, r2
 800b470:	3354      	adds	r3, #84	; 0x54
 800b472:	78ba      	ldrb	r2, [r7, #2]
 800b474:	701a      	strb	r2, [r3, #0]
 800b476:	e008      	b.n	800b48a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b478:	78fb      	ldrb	r3, [r7, #3]
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	212c      	movs	r1, #44	; 0x2c
 800b47e:	fb01 f303 	mul.w	r3, r1, r3
 800b482:	4413      	add	r3, r2
 800b484:	3355      	adds	r3, #85	; 0x55
 800b486:	78ba      	ldrb	r2, [r7, #2]
 800b488:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7f5 fd6f 	bl	8000f84 <HAL_Delay>
}
 800b4a6:	bf00      	nop
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b4be:	79fb      	ldrb	r3, [r7, #7]
 800b4c0:	2b03      	cmp	r3, #3
 800b4c2:	d817      	bhi.n	800b4f4 <USBH_Get_USB_Status+0x44>
 800b4c4:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <USBH_Get_USB_Status+0x1c>)
 800b4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ca:	bf00      	nop
 800b4cc:	0800b4dd 	.word	0x0800b4dd
 800b4d0:	0800b4e3 	.word	0x0800b4e3
 800b4d4:	0800b4e9 	.word	0x0800b4e9
 800b4d8:	0800b4ef 	.word	0x0800b4ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e0:	e00b      	b.n	800b4fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b4e2:	2302      	movs	r3, #2
 800b4e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e6:	e008      	b.n	800b4fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ec:	e005      	b.n	800b4fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b4ee:	2302      	movs	r3, #2
 800b4f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f2:	e002      	b.n	800b4fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f8:	bf00      	nop
  }
  return usb_status;
 800b4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	4603      	mov	r3, r0
 800b510:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b516:	79fb      	ldrb	r3, [r7, #7]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d102      	bne.n	800b522 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b51c:	2300      	movs	r3, #0
 800b51e:	73fb      	strb	r3, [r7, #15]
 800b520:	e001      	b.n	800b526 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b522:	2301      	movs	r3, #1
 800b524:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b526:	7bfb      	ldrb	r3, [r7, #15]
 800b528:	461a      	mov	r2, r3
 800b52a:	2101      	movs	r1, #1
 800b52c:	4803      	ldr	r0, [pc, #12]	; (800b53c <MX_DriverVbusFS+0x34>)
 800b52e:	f7f5 ffe3 	bl	80014f8 <HAL_GPIO_WritePin>
}
 800b532:	bf00      	nop
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	40020800 	.word	0x40020800

0800b540 <__errno>:
 800b540:	4b01      	ldr	r3, [pc, #4]	; (800b548 <__errno+0x8>)
 800b542:	6818      	ldr	r0, [r3, #0]
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	20000030 	.word	0x20000030

0800b54c <__libc_init_array>:
 800b54c:	b570      	push	{r4, r5, r6, lr}
 800b54e:	4d0d      	ldr	r5, [pc, #52]	; (800b584 <__libc_init_array+0x38>)
 800b550:	4c0d      	ldr	r4, [pc, #52]	; (800b588 <__libc_init_array+0x3c>)
 800b552:	1b64      	subs	r4, r4, r5
 800b554:	10a4      	asrs	r4, r4, #2
 800b556:	2600      	movs	r6, #0
 800b558:	42a6      	cmp	r6, r4
 800b55a:	d109      	bne.n	800b570 <__libc_init_array+0x24>
 800b55c:	4d0b      	ldr	r5, [pc, #44]	; (800b58c <__libc_init_array+0x40>)
 800b55e:	4c0c      	ldr	r4, [pc, #48]	; (800b590 <__libc_init_array+0x44>)
 800b560:	f000 f970 	bl	800b844 <_init>
 800b564:	1b64      	subs	r4, r4, r5
 800b566:	10a4      	asrs	r4, r4, #2
 800b568:	2600      	movs	r6, #0
 800b56a:	42a6      	cmp	r6, r4
 800b56c:	d105      	bne.n	800b57a <__libc_init_array+0x2e>
 800b56e:	bd70      	pop	{r4, r5, r6, pc}
 800b570:	f855 3b04 	ldr.w	r3, [r5], #4
 800b574:	4798      	blx	r3
 800b576:	3601      	adds	r6, #1
 800b578:	e7ee      	b.n	800b558 <__libc_init_array+0xc>
 800b57a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b57e:	4798      	blx	r3
 800b580:	3601      	adds	r6, #1
 800b582:	e7f2      	b.n	800b56a <__libc_init_array+0x1e>
 800b584:	0800b9b4 	.word	0x0800b9b4
 800b588:	0800b9b4 	.word	0x0800b9b4
 800b58c:	0800b9b4 	.word	0x0800b9b4
 800b590:	0800b9b8 	.word	0x0800b9b8

0800b594 <__retarget_lock_acquire_recursive>:
 800b594:	4770      	bx	lr

0800b596 <__retarget_lock_release_recursive>:
 800b596:	4770      	bx	lr

0800b598 <malloc>:
 800b598:	4b02      	ldr	r3, [pc, #8]	; (800b5a4 <malloc+0xc>)
 800b59a:	4601      	mov	r1, r0
 800b59c:	6818      	ldr	r0, [r3, #0]
 800b59e:	f000 b871 	b.w	800b684 <_malloc_r>
 800b5a2:	bf00      	nop
 800b5a4:	20000030 	.word	0x20000030

0800b5a8 <free>:
 800b5a8:	4b02      	ldr	r3, [pc, #8]	; (800b5b4 <free+0xc>)
 800b5aa:	4601      	mov	r1, r0
 800b5ac:	6818      	ldr	r0, [r3, #0]
 800b5ae:	f000 b819 	b.w	800b5e4 <_free_r>
 800b5b2:	bf00      	nop
 800b5b4:	20000030 	.word	0x20000030

0800b5b8 <memcpy>:
 800b5b8:	440a      	add	r2, r1
 800b5ba:	4291      	cmp	r1, r2
 800b5bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b5c0:	d100      	bne.n	800b5c4 <memcpy+0xc>
 800b5c2:	4770      	bx	lr
 800b5c4:	b510      	push	{r4, lr}
 800b5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ce:	4291      	cmp	r1, r2
 800b5d0:	d1f9      	bne.n	800b5c6 <memcpy+0xe>
 800b5d2:	bd10      	pop	{r4, pc}

0800b5d4 <memset>:
 800b5d4:	4402      	add	r2, r0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d100      	bne.n	800b5de <memset+0xa>
 800b5dc:	4770      	bx	lr
 800b5de:	f803 1b01 	strb.w	r1, [r3], #1
 800b5e2:	e7f9      	b.n	800b5d8 <memset+0x4>

0800b5e4 <_free_r>:
 800b5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5e6:	2900      	cmp	r1, #0
 800b5e8:	d048      	beq.n	800b67c <_free_r+0x98>
 800b5ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ee:	9001      	str	r0, [sp, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f1a1 0404 	sub.w	r4, r1, #4
 800b5f6:	bfb8      	it	lt
 800b5f8:	18e4      	addlt	r4, r4, r3
 800b5fa:	f000 f917 	bl	800b82c <__malloc_lock>
 800b5fe:	4a20      	ldr	r2, [pc, #128]	; (800b680 <_free_r+0x9c>)
 800b600:	9801      	ldr	r0, [sp, #4]
 800b602:	6813      	ldr	r3, [r2, #0]
 800b604:	4615      	mov	r5, r2
 800b606:	b933      	cbnz	r3, 800b616 <_free_r+0x32>
 800b608:	6063      	str	r3, [r4, #4]
 800b60a:	6014      	str	r4, [r2, #0]
 800b60c:	b003      	add	sp, #12
 800b60e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b612:	f000 b911 	b.w	800b838 <__malloc_unlock>
 800b616:	42a3      	cmp	r3, r4
 800b618:	d90b      	bls.n	800b632 <_free_r+0x4e>
 800b61a:	6821      	ldr	r1, [r4, #0]
 800b61c:	1862      	adds	r2, r4, r1
 800b61e:	4293      	cmp	r3, r2
 800b620:	bf04      	itt	eq
 800b622:	681a      	ldreq	r2, [r3, #0]
 800b624:	685b      	ldreq	r3, [r3, #4]
 800b626:	6063      	str	r3, [r4, #4]
 800b628:	bf04      	itt	eq
 800b62a:	1852      	addeq	r2, r2, r1
 800b62c:	6022      	streq	r2, [r4, #0]
 800b62e:	602c      	str	r4, [r5, #0]
 800b630:	e7ec      	b.n	800b60c <_free_r+0x28>
 800b632:	461a      	mov	r2, r3
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	b10b      	cbz	r3, 800b63c <_free_r+0x58>
 800b638:	42a3      	cmp	r3, r4
 800b63a:	d9fa      	bls.n	800b632 <_free_r+0x4e>
 800b63c:	6811      	ldr	r1, [r2, #0]
 800b63e:	1855      	adds	r5, r2, r1
 800b640:	42a5      	cmp	r5, r4
 800b642:	d10b      	bne.n	800b65c <_free_r+0x78>
 800b644:	6824      	ldr	r4, [r4, #0]
 800b646:	4421      	add	r1, r4
 800b648:	1854      	adds	r4, r2, r1
 800b64a:	42a3      	cmp	r3, r4
 800b64c:	6011      	str	r1, [r2, #0]
 800b64e:	d1dd      	bne.n	800b60c <_free_r+0x28>
 800b650:	681c      	ldr	r4, [r3, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	6053      	str	r3, [r2, #4]
 800b656:	4421      	add	r1, r4
 800b658:	6011      	str	r1, [r2, #0]
 800b65a:	e7d7      	b.n	800b60c <_free_r+0x28>
 800b65c:	d902      	bls.n	800b664 <_free_r+0x80>
 800b65e:	230c      	movs	r3, #12
 800b660:	6003      	str	r3, [r0, #0]
 800b662:	e7d3      	b.n	800b60c <_free_r+0x28>
 800b664:	6825      	ldr	r5, [r4, #0]
 800b666:	1961      	adds	r1, r4, r5
 800b668:	428b      	cmp	r3, r1
 800b66a:	bf04      	itt	eq
 800b66c:	6819      	ldreq	r1, [r3, #0]
 800b66e:	685b      	ldreq	r3, [r3, #4]
 800b670:	6063      	str	r3, [r4, #4]
 800b672:	bf04      	itt	eq
 800b674:	1949      	addeq	r1, r1, r5
 800b676:	6021      	streq	r1, [r4, #0]
 800b678:	6054      	str	r4, [r2, #4]
 800b67a:	e7c7      	b.n	800b60c <_free_r+0x28>
 800b67c:	b003      	add	sp, #12
 800b67e:	bd30      	pop	{r4, r5, pc}
 800b680:	20004a88 	.word	0x20004a88

0800b684 <_malloc_r>:
 800b684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b686:	1ccd      	adds	r5, r1, #3
 800b688:	f025 0503 	bic.w	r5, r5, #3
 800b68c:	3508      	adds	r5, #8
 800b68e:	2d0c      	cmp	r5, #12
 800b690:	bf38      	it	cc
 800b692:	250c      	movcc	r5, #12
 800b694:	2d00      	cmp	r5, #0
 800b696:	4606      	mov	r6, r0
 800b698:	db01      	blt.n	800b69e <_malloc_r+0x1a>
 800b69a:	42a9      	cmp	r1, r5
 800b69c:	d903      	bls.n	800b6a6 <_malloc_r+0x22>
 800b69e:	230c      	movs	r3, #12
 800b6a0:	6033      	str	r3, [r6, #0]
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6a6:	f000 f8c1 	bl	800b82c <__malloc_lock>
 800b6aa:	4921      	ldr	r1, [pc, #132]	; (800b730 <_malloc_r+0xac>)
 800b6ac:	680a      	ldr	r2, [r1, #0]
 800b6ae:	4614      	mov	r4, r2
 800b6b0:	b99c      	cbnz	r4, 800b6da <_malloc_r+0x56>
 800b6b2:	4f20      	ldr	r7, [pc, #128]	; (800b734 <_malloc_r+0xb0>)
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	b923      	cbnz	r3, 800b6c2 <_malloc_r+0x3e>
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f000 f8a6 	bl	800b80c <_sbrk_r>
 800b6c0:	6038      	str	r0, [r7, #0]
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f000 f8a1 	bl	800b80c <_sbrk_r>
 800b6ca:	1c43      	adds	r3, r0, #1
 800b6cc:	d123      	bne.n	800b716 <_malloc_r+0x92>
 800b6ce:	230c      	movs	r3, #12
 800b6d0:	6033      	str	r3, [r6, #0]
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f000 f8b0 	bl	800b838 <__malloc_unlock>
 800b6d8:	e7e3      	b.n	800b6a2 <_malloc_r+0x1e>
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	1b5b      	subs	r3, r3, r5
 800b6de:	d417      	bmi.n	800b710 <_malloc_r+0x8c>
 800b6e0:	2b0b      	cmp	r3, #11
 800b6e2:	d903      	bls.n	800b6ec <_malloc_r+0x68>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	441c      	add	r4, r3
 800b6e8:	6025      	str	r5, [r4, #0]
 800b6ea:	e004      	b.n	800b6f6 <_malloc_r+0x72>
 800b6ec:	6863      	ldr	r3, [r4, #4]
 800b6ee:	42a2      	cmp	r2, r4
 800b6f0:	bf0c      	ite	eq
 800b6f2:	600b      	streq	r3, [r1, #0]
 800b6f4:	6053      	strne	r3, [r2, #4]
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f000 f89e 	bl	800b838 <__malloc_unlock>
 800b6fc:	f104 000b 	add.w	r0, r4, #11
 800b700:	1d23      	adds	r3, r4, #4
 800b702:	f020 0007 	bic.w	r0, r0, #7
 800b706:	1ac2      	subs	r2, r0, r3
 800b708:	d0cc      	beq.n	800b6a4 <_malloc_r+0x20>
 800b70a:	1a1b      	subs	r3, r3, r0
 800b70c:	50a3      	str	r3, [r4, r2]
 800b70e:	e7c9      	b.n	800b6a4 <_malloc_r+0x20>
 800b710:	4622      	mov	r2, r4
 800b712:	6864      	ldr	r4, [r4, #4]
 800b714:	e7cc      	b.n	800b6b0 <_malloc_r+0x2c>
 800b716:	1cc4      	adds	r4, r0, #3
 800b718:	f024 0403 	bic.w	r4, r4, #3
 800b71c:	42a0      	cmp	r0, r4
 800b71e:	d0e3      	beq.n	800b6e8 <_malloc_r+0x64>
 800b720:	1a21      	subs	r1, r4, r0
 800b722:	4630      	mov	r0, r6
 800b724:	f000 f872 	bl	800b80c <_sbrk_r>
 800b728:	3001      	adds	r0, #1
 800b72a:	d1dd      	bne.n	800b6e8 <_malloc_r+0x64>
 800b72c:	e7cf      	b.n	800b6ce <_malloc_r+0x4a>
 800b72e:	bf00      	nop
 800b730:	20004a88 	.word	0x20004a88
 800b734:	20004a8c 	.word	0x20004a8c

0800b738 <cleanup_glue>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	460c      	mov	r4, r1
 800b73c:	6809      	ldr	r1, [r1, #0]
 800b73e:	4605      	mov	r5, r0
 800b740:	b109      	cbz	r1, 800b746 <cleanup_glue+0xe>
 800b742:	f7ff fff9 	bl	800b738 <cleanup_glue>
 800b746:	4621      	mov	r1, r4
 800b748:	4628      	mov	r0, r5
 800b74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b74e:	f7ff bf49 	b.w	800b5e4 <_free_r>
	...

0800b754 <_reclaim_reent>:
 800b754:	4b2c      	ldr	r3, [pc, #176]	; (800b808 <_reclaim_reent+0xb4>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4283      	cmp	r3, r0
 800b75a:	b570      	push	{r4, r5, r6, lr}
 800b75c:	4604      	mov	r4, r0
 800b75e:	d051      	beq.n	800b804 <_reclaim_reent+0xb0>
 800b760:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b762:	b143      	cbz	r3, 800b776 <_reclaim_reent+0x22>
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d14a      	bne.n	800b800 <_reclaim_reent+0xac>
 800b76a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b76c:	6819      	ldr	r1, [r3, #0]
 800b76e:	b111      	cbz	r1, 800b776 <_reclaim_reent+0x22>
 800b770:	4620      	mov	r0, r4
 800b772:	f7ff ff37 	bl	800b5e4 <_free_r>
 800b776:	6961      	ldr	r1, [r4, #20]
 800b778:	b111      	cbz	r1, 800b780 <_reclaim_reent+0x2c>
 800b77a:	4620      	mov	r0, r4
 800b77c:	f7ff ff32 	bl	800b5e4 <_free_r>
 800b780:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b782:	b111      	cbz	r1, 800b78a <_reclaim_reent+0x36>
 800b784:	4620      	mov	r0, r4
 800b786:	f7ff ff2d 	bl	800b5e4 <_free_r>
 800b78a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b78c:	b111      	cbz	r1, 800b794 <_reclaim_reent+0x40>
 800b78e:	4620      	mov	r0, r4
 800b790:	f7ff ff28 	bl	800b5e4 <_free_r>
 800b794:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b796:	b111      	cbz	r1, 800b79e <_reclaim_reent+0x4a>
 800b798:	4620      	mov	r0, r4
 800b79a:	f7ff ff23 	bl	800b5e4 <_free_r>
 800b79e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b7a0:	b111      	cbz	r1, 800b7a8 <_reclaim_reent+0x54>
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f7ff ff1e 	bl	800b5e4 <_free_r>
 800b7a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b7aa:	b111      	cbz	r1, 800b7b2 <_reclaim_reent+0x5e>
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f7ff ff19 	bl	800b5e4 <_free_r>
 800b7b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b7b4:	b111      	cbz	r1, 800b7bc <_reclaim_reent+0x68>
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7ff ff14 	bl	800b5e4 <_free_r>
 800b7bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7be:	b111      	cbz	r1, 800b7c6 <_reclaim_reent+0x72>
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f7ff ff0f 	bl	800b5e4 <_free_r>
 800b7c6:	69a3      	ldr	r3, [r4, #24]
 800b7c8:	b1e3      	cbz	r3, 800b804 <_reclaim_reent+0xb0>
 800b7ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	4798      	blx	r3
 800b7d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b7d2:	b1b9      	cbz	r1, 800b804 <_reclaim_reent+0xb0>
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7da:	f7ff bfad 	b.w	800b738 <cleanup_glue>
 800b7de:	5949      	ldr	r1, [r1, r5]
 800b7e0:	b941      	cbnz	r1, 800b7f4 <_reclaim_reent+0xa0>
 800b7e2:	3504      	adds	r5, #4
 800b7e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7e6:	2d80      	cmp	r5, #128	; 0x80
 800b7e8:	68d9      	ldr	r1, [r3, #12]
 800b7ea:	d1f8      	bne.n	800b7de <_reclaim_reent+0x8a>
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f7ff fef9 	bl	800b5e4 <_free_r>
 800b7f2:	e7ba      	b.n	800b76a <_reclaim_reent+0x16>
 800b7f4:	680e      	ldr	r6, [r1, #0]
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f7ff fef4 	bl	800b5e4 <_free_r>
 800b7fc:	4631      	mov	r1, r6
 800b7fe:	e7ef      	b.n	800b7e0 <_reclaim_reent+0x8c>
 800b800:	2500      	movs	r5, #0
 800b802:	e7ef      	b.n	800b7e4 <_reclaim_reent+0x90>
 800b804:	bd70      	pop	{r4, r5, r6, pc}
 800b806:	bf00      	nop
 800b808:	20000030 	.word	0x20000030

0800b80c <_sbrk_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	4d06      	ldr	r5, [pc, #24]	; (800b828 <_sbrk_r+0x1c>)
 800b810:	2300      	movs	r3, #0
 800b812:	4604      	mov	r4, r0
 800b814:	4608      	mov	r0, r1
 800b816:	602b      	str	r3, [r5, #0]
 800b818:	f7f5 fb00 	bl	8000e1c <_sbrk>
 800b81c:	1c43      	adds	r3, r0, #1
 800b81e:	d102      	bne.n	800b826 <_sbrk_r+0x1a>
 800b820:	682b      	ldr	r3, [r5, #0]
 800b822:	b103      	cbz	r3, 800b826 <_sbrk_r+0x1a>
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	bd38      	pop	{r3, r4, r5, pc}
 800b828:	2000533c 	.word	0x2000533c

0800b82c <__malloc_lock>:
 800b82c:	4801      	ldr	r0, [pc, #4]	; (800b834 <__malloc_lock+0x8>)
 800b82e:	f7ff beb1 	b.w	800b594 <__retarget_lock_acquire_recursive>
 800b832:	bf00      	nop
 800b834:	20005334 	.word	0x20005334

0800b838 <__malloc_unlock>:
 800b838:	4801      	ldr	r0, [pc, #4]	; (800b840 <__malloc_unlock+0x8>)
 800b83a:	f7ff beac 	b.w	800b596 <__retarget_lock_release_recursive>
 800b83e:	bf00      	nop
 800b840:	20005334 	.word	0x20005334

0800b844 <_init>:
 800b844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b846:	bf00      	nop
 800b848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b84a:	bc08      	pop	{r3}
 800b84c:	469e      	mov	lr, r3
 800b84e:	4770      	bx	lr

0800b850 <_fini>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	bf00      	nop
 800b854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b856:	bc08      	pop	{r3}
 800b858:	469e      	mov	lr, r3
 800b85a:	4770      	bx	lr
