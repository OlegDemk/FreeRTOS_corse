
UART_menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b58c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800b71c  0800b71c  0001b71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7ec  0800b7ec  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7ec  0800b7ec  0001b7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7f4  0800b7f4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7f4  0800b7f4  0001b7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7f8  0800b7f8  0001b7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b7fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          0000529c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005330  20005330  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d78c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058a6  00000000  00000000  0004d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e90  00000000  00000000  000530f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c90  00000000  00000000  00054f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007572  00000000  00000000  00056c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025ba3  00000000  00000000  0005e18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de3a3  00000000  00000000  00083d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001620d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084dc  00000000  00000000  00162124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b704 	.word	0x0800b704

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800b704 	.word	0x0800b704

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc76 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f81c 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f918 	bl	8000708 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f882 	bl	80005e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f8ae 	bl	800063c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f8dc 	bl	800069c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f007 fd28 	bl	8007f38 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <main+0x38>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <main+0x3c>)
 80004ee:	f007 fd6d 	bl	8007fcc <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <main+0x40>)
 80004f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f8:	f007 fd42 	bl	8007f80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x34>
 80004fe:	bf00      	nop
 8000500:	0800b750 	.word	0x0800b750
 8000504:	08000905 	.word	0x08000905
 8000508:	20004a90 	.word	0x20004a90

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f00a ffba 	bl	800b494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <SystemClock_Config+0xcc>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xd0>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000580:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058a:	2307      	movs	r3, #7
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	4618      	mov	r0, r3
 8000594:	f003 fa7e 	bl	8003a94 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059e:	f000 f9d5 	bl	800094c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2105      	movs	r1, #5
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 fcdf 	bl	8003f84 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005cc:	f000 f9be 	bl	800094c <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	; 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C1_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <MX_I2C1_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C1_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_I2C1_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2C1_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2C1_Init+0x50>)
 800061e:	f002 fc55 	bl	8002ecc <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 f990 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20004a94 	.word	0x20004a94
 8000634:	40005400 	.word	0x40005400
 8000638:	000186a0 	.word	0x000186a0

0800063c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_I2S3_Init+0x54>)
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <MX_I2S3_Init+0x58>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2S3_Init+0x54>)
 8000648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800064c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_I2S3_Init+0x54>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2S3_Init+0x54>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_I2S3_Init+0x54>)
 800065c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000660:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_I2S3_Init+0x54>)
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <MX_I2S3_Init+0x5c>)
 8000666:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_I2S3_Init+0x54>)
 800067c:	f002 fd6a 	bl	8003154 <HAL_I2S_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000686:	f000 f961 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20004b40 	.word	0x20004b40
 8000694:	40003c00 	.word	0x40003c00
 8000698:	00017700 	.word	0x00017700

0800069c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_SPI1_Init+0x64>)
 80006a2:	4a18      	ldr	r2, [pc, #96]	; (8000704 <MX_SPI1_Init+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_SPI1_Init+0x64>)
 80006a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_SPI1_Init+0x64>)
 80006e8:	220a      	movs	r2, #10
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_SPI1_Init+0x64>)
 80006ee:	f003 ffa3 	bl	8004638 <HAL_SPI_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f8:	f000 f928 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20004ae8 	.word	0x20004ae8
 8000704:	40013000 	.word	0x40013000

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	; 0x30
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	4b72      	ldr	r3, [pc, #456]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a71      	ldr	r2, [pc, #452]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b6f      	ldr	r3, [pc, #444]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0310 	and.w	r3, r3, #16
 8000736:	61bb      	str	r3, [r7, #24]
 8000738:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	4b6b      	ldr	r3, [pc, #428]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a6a      	ldr	r2, [pc, #424]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b68      	ldr	r3, [pc, #416]	; (80008ec <MX_GPIO_Init+0x1e4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b64      	ldr	r3, [pc, #400]	; (80008ec <MX_GPIO_Init+0x1e4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a63      	ldr	r2, [pc, #396]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b61      	ldr	r3, [pc, #388]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b5d      	ldr	r3, [pc, #372]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a5c      	ldr	r2, [pc, #368]	; (80008ec <MX_GPIO_Init+0x1e4>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b5a      	ldr	r3, [pc, #360]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b56      	ldr	r3, [pc, #344]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a55      	ldr	r2, [pc, #340]	; (80008ec <MX_GPIO_Init+0x1e4>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b53      	ldr	r3, [pc, #332]	; (80008ec <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b4f      	ldr	r3, [pc, #316]	; (80008ec <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a4e      	ldr	r2, [pc, #312]	; (80008ec <MX_GPIO_Init+0x1e4>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b4c      	ldr	r3, [pc, #304]	; (80008ec <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2108      	movs	r1, #8
 80007ca:	4849      	ldr	r0, [pc, #292]	; (80008f0 <MX_GPIO_Init+0x1e8>)
 80007cc:	f000 fdda 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2101      	movs	r1, #1
 80007d4:	4847      	ldr	r0, [pc, #284]	; (80008f4 <MX_GPIO_Init+0x1ec>)
 80007d6:	f000 fdd5 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007da:	2200      	movs	r2, #0
 80007dc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007e0:	4845      	ldr	r0, [pc, #276]	; (80008f8 <MX_GPIO_Init+0x1f0>)
 80007e2:	f000 fdcf 	bl	8001384 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007e6:	2308      	movs	r3, #8
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	483c      	ldr	r0, [pc, #240]	; (80008f0 <MX_GPIO_Init+0x1e8>)
 80007fe:	f000 fc25 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000802:	2301      	movs	r3, #1
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4836      	ldr	r0, [pc, #216]	; (80008f4 <MX_GPIO_Init+0x1ec>)
 800081a:	f000 fc17 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800081e:	2308      	movs	r3, #8
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800082e:	2305      	movs	r3, #5
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	482e      	ldr	r0, [pc, #184]	; (80008f4 <MX_GPIO_Init+0x1ec>)
 800083a:	f000 fc07 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083e:	2301      	movs	r3, #1
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000842:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	482a      	ldr	r0, [pc, #168]	; (80008fc <MX_GPIO_Init+0x1f4>)
 8000854:	f000 fbfa 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000858:	2304      	movs	r3, #4
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4825      	ldr	r0, [pc, #148]	; (8000900 <MX_GPIO_Init+0x1f8>)
 800086c:	f000 fbee 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000882:	2305      	movs	r3, #5
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	481c      	ldr	r0, [pc, #112]	; (8000900 <MX_GPIO_Init+0x1f8>)
 800088e:	f000 fbdd 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000892:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000896:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	4813      	ldr	r0, [pc, #76]	; (80008f8 <MX_GPIO_Init+0x1f0>)
 80008ac:	f000 fbce 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008b0:	2320      	movs	r3, #32
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <MX_GPIO_Init+0x1f0>)
 80008c4:	f000 fbc2 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_GPIO_Init+0x1e8>)
 80008de:	f000 fbb5 	bl	800104c <HAL_GPIO_Init>

}
 80008e2:	bf00      	nop
 80008e4:	3730      	adds	r7, #48	; 0x30
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40020800 	.word	0x40020800
 80008f8:	40020c00 	.word	0x40020c00
 80008fc:	40020000 	.word	0x40020000
 8000900:	40020400 	.word	0x40020400

08000904 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800090c:	f00a fa76 	bl	800adfc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, LED1);
 8000910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <StartDefaultTask+0x20>)
 8000916:	f000 fd4e 	bl	80013b6 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 800091a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091e:	f007 fbe7 	bl	80080f0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, LED1);
 8000922:	e7f5      	b.n	8000910 <StartDefaultTask+0xc>
 8000924:	40020c00 	.word	0x40020c00

08000928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d101      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093a:	f000 fa61 	bl	8000e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40001000 	.word	0x40001000

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_MspInit+0x54>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <HAL_MspInit+0x54>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x54>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_MspInit+0x54>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_MspInit+0x54>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_MspInit+0x54>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	210f      	movs	r1, #15
 800099a:	f06f 0001 	mvn.w	r0, #1
 800099e:	f000 fb2b 	bl	8000ff8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <HAL_I2C_MspInit+0x84>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12c      	bne.n	8000a2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f4:	2312      	movs	r3, #18
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a00:	2304      	movs	r3, #4
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <HAL_I2C_MspInit+0x8c>)
 8000a0c:	f000 fb1e 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 8000a1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_I2C_MspInit+0x88>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40005400 	.word	0x40005400
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020400 	.word	0x40020400

08000a40 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	; 0x38
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <HAL_I2S_MspInit+0xf0>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d15a      	bne.n	8000b26 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a70:	2301      	movs	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a74:	23c0      	movs	r3, #192	; 0xc0
 8000a76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 fc99 	bl	80043b8 <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a8c:	f7ff ff5e 	bl	800094c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a26      	ldr	r2, [pc, #152]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_I2S_MspInit+0xf4>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000af4:	2306      	movs	r3, #6
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	480e      	ldr	r0, [pc, #56]	; (8000b38 <HAL_I2S_MspInit+0xf8>)
 8000b00:	f000 faa4 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b04:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b16:	2306      	movs	r3, #6
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4806      	ldr	r0, [pc, #24]	; (8000b3c <HAL_I2S_MspInit+0xfc>)
 8000b22:	f000 fa93 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b26:	bf00      	nop
 8000b28:	3738      	adds	r7, #56	; 0x38
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40003c00 	.word	0x40003c00
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40020800 	.word	0x40020800

08000b40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_SPI_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12b      	bne.n	8000bba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b9a:	23e0      	movs	r3, #224	; 0xe0
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000baa:	2305      	movs	r3, #5
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_SPI_MspInit+0x8c>)
 8000bb6:	f000 fa49 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40013000 	.word	0x40013000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	2036      	movs	r0, #54	; 0x36
 8000be6:	f000 fa07 	bl	8000ff8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bea:	2036      	movs	r0, #54	; 0x36
 8000bec:	f000 fa20 	bl	8001030 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <HAL_InitTick+0xa4>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <HAL_InitTick+0xa4>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <HAL_InitTick+0xa4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c0c:	f107 0210 	add.w	r2, r7, #16
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fb9c 	bl	8004354 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c1c:	f003 fb86 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8000c20:	4603      	mov	r3, r0
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c28:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <HAL_InitTick+0xa8>)
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	0c9b      	lsrs	r3, r3, #18
 8000c30:	3b01      	subs	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_InitTick+0xac>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <HAL_InitTick+0xb0>)
 8000c38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_InitTick+0xac>)
 8000c3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c40:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_InitTick+0xac>)
 8000c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c46:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_InitTick+0xac>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_InitTick+0xac>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c54:	4809      	ldr	r0, [pc, #36]	; (8000c7c <HAL_InitTick+0xac>)
 8000c56:	f003 fd78 	bl	800474a <HAL_TIM_Base_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d104      	bne.n	8000c6a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <HAL_InitTick+0xac>)
 8000c62:	f003 fdcb 	bl	80047fc <HAL_TIM_Base_Start_IT>
 8000c66:	4603      	mov	r3, r0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3730      	adds	r7, #48	; 0x30
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	431bde83 	.word	0x431bde83
 8000c7c:	20004b88 	.word	0x20004b88
 8000c80:	40001000 	.word	0x40001000

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <TIM6_DAC_IRQHandler+0x10>)
 8000cb6:	f003 fe11 	bl	80048dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20004b88 	.word	0x20004b88

08000cc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <OTG_FS_IRQHandler+0x10>)
 8000cca:	f000 fdf9 	bl	80018c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000501c 	.word	0x2000501c

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f00a fb7a 	bl	800b400 <__errno>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20020000 	.word	0x20020000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	200000b0 	.word	0x200000b0
 8000d40:	20005330 	.word	0x20005330

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d6e:	490e      	ldr	r1, [pc, #56]	; (8000da8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d84:	4c0b      	ldr	r4, [pc, #44]	; (8000db4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d92:	f7ff ffd7 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f00a fb39 	bl	800b40c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fb95 	bl	80004c8 <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000dac:	0800b7fc 	.word	0x0800b7fc
  ldr r2, =_sbss
 8000db0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000db4:	20005330 	.word	0x20005330

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <HAL_Init+0x40>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_Init+0x40>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x40>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f8fc 	bl	8000fe2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	200f      	movs	r0, #15
 8000dec:	f7ff fef0 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fdb2 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20004bd0 	.word	0x20004bd0

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20004bd0 	.word	0x20004bd0

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff ffee 	bl	8000e28 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffde 	bl	8000e28 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	; (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ff4c 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100a:	f7ff ff61 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 800100e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	6978      	ldr	r0, [r7, #20]
 8001016:	f7ff ffb1 	bl	8000f7c <NVIC_EncodePriority>
 800101a:	4602      	mov	r2, r0
 800101c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001020:	4611      	mov	r1, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff80 	bl	8000f28 <__NVIC_SetPriority>
}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff54 	bl	8000eec <__NVIC_EnableIRQ>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	e16b      	b.n	8001340 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 815a 	bne.w	800133a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d005      	beq.n	800109e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	2b02      	cmp	r3, #2
 800109c:	d130      	bne.n	8001100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	f003 0201 	and.w	r2, r3, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b03      	cmp	r3, #3
 800110a:	d017      	beq.n	800113c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d123      	bne.n	8001190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80b4 	beq.w	800133a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b60      	ldr	r3, [pc, #384]	; (8001358 <HAL_GPIO_Init+0x30c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a5f      	ldr	r2, [pc, #380]	; (8001358 <HAL_GPIO_Init+0x30c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b5d      	ldr	r3, [pc, #372]	; (8001358 <HAL_GPIO_Init+0x30c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ee:	4a5b      	ldr	r2, [pc, #364]	; (800135c <HAL_GPIO_Init+0x310>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a52      	ldr	r2, [pc, #328]	; (8001360 <HAL_GPIO_Init+0x314>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d02b      	beq.n	8001272 <HAL_GPIO_Init+0x226>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a51      	ldr	r2, [pc, #324]	; (8001364 <HAL_GPIO_Init+0x318>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x222>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a50      	ldr	r2, [pc, #320]	; (8001368 <HAL_GPIO_Init+0x31c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x21e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4f      	ldr	r2, [pc, #316]	; (800136c <HAL_GPIO_Init+0x320>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x21a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4e      	ldr	r2, [pc, #312]	; (8001370 <HAL_GPIO_Init+0x324>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x216>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4d      	ldr	r2, [pc, #308]	; (8001374 <HAL_GPIO_Init+0x328>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x212>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4c      	ldr	r2, [pc, #304]	; (8001378 <HAL_GPIO_Init+0x32c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x20e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4b      	ldr	r2, [pc, #300]	; (800137c <HAL_GPIO_Init+0x330>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x20a>
 8001252:	2307      	movs	r3, #7
 8001254:	e00e      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001256:	2308      	movs	r3, #8
 8001258:	e00c      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800125a:	2306      	movs	r3, #6
 800125c:	e00a      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800125e:	2305      	movs	r3, #5
 8001260:	e008      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001262:	2304      	movs	r3, #4
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001266:	2303      	movs	r3, #3
 8001268:	e004      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800126a:	2302      	movs	r3, #2
 800126c:	e002      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001272:	2300      	movs	r3, #0
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	f002 0203 	and.w	r2, r2, #3
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4093      	lsls	r3, r2
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001284:	4935      	ldr	r1, [pc, #212]	; (800135c <HAL_GPIO_Init+0x310>)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <HAL_GPIO_Init+0x334>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b6:	4a32      	ldr	r2, [pc, #200]	; (8001380 <HAL_GPIO_Init+0x334>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_GPIO_Init+0x334>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e0:	4a27      	ldr	r2, [pc, #156]	; (8001380 <HAL_GPIO_Init+0x334>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_GPIO_Init+0x334>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130a:	4a1d      	ldr	r2, [pc, #116]	; (8001380 <HAL_GPIO_Init+0x334>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <HAL_GPIO_Init+0x334>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <HAL_GPIO_Init+0x334>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b0f      	cmp	r3, #15
 8001344:	f67f ae90 	bls.w	8001068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40013800 	.word	0x40013800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020400 	.word	0x40020400
 8001368:	40020800 	.word	0x40020800
 800136c:	40020c00 	.word	0x40020c00
 8001370:	40021000 	.word	0x40021000
 8001374:	40021400 	.word	0x40021400
 8001378:	40021800 	.word	0x40021800
 800137c:	40021c00 	.word	0x40021c00
 8001380:	40013c00 	.word	0x40013c00

08001384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c8:	887a      	ldrh	r2, [r7, #2]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4013      	ands	r3, r2
 80013ce:	041a      	lsls	r2, r3, #16
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	400b      	ands	r3, r1
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ec:	b08f      	sub	sp, #60	; 0x3c
 80013ee:	af0a      	add	r7, sp, #40	; 0x28
 80013f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e054      	b.n	80014a6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f009 fd44 	bl	800aea4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2203      	movs	r2, #3
 8001420:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fca4 	bl	8004d88 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	687e      	ldr	r6, [r7, #4]
 8001448:	466d      	mov	r5, sp
 800144a:	f106 0410 	add.w	r4, r6, #16
 800144e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001456:	e894 0003 	ldmia.w	r4, {r0, r1}
 800145a:	e885 0003 	stmia.w	r5, {r0, r1}
 800145e:	1d33      	adds	r3, r6, #4
 8001460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001462:	6838      	ldr	r0, [r7, #0]
 8001464:	f003 fc1e 	bl	8004ca4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fc9b 	bl	8004daa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	687e      	ldr	r6, [r7, #4]
 800147c:	466d      	mov	r5, sp
 800147e:	f106 0410 	add.w	r4, r6, #16
 8001482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800148e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001492:	1d33      	adds	r3, r6, #4
 8001494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f003 fe02 	bl	80050a0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ae <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014ae:	b590      	push	{r4, r7, lr}
 80014b0:	b089      	sub	sp, #36	; 0x24
 80014b2:	af04      	add	r7, sp, #16
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	4608      	mov	r0, r1
 80014b8:	4611      	mov	r1, r2
 80014ba:	461a      	mov	r2, r3
 80014bc:	4603      	mov	r3, r0
 80014be:	70fb      	strb	r3, [r7, #3]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70bb      	strb	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_HCD_HC_Init+0x28>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e076      	b.n	80015c4 <HAL_HCD_HC_Init+0x116>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	212c      	movs	r1, #44	; 0x2c
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	333d      	adds	r3, #61	; 0x3d
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	212c      	movs	r1, #44	; 0x2c
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	4413      	add	r3, r2
 80014fc:	3338      	adds	r3, #56	; 0x38
 80014fe:	787a      	ldrb	r2, [r7, #1]
 8001500:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	212c      	movs	r1, #44	; 0x2c
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	4413      	add	r3, r2
 800150e:	3340      	adds	r3, #64	; 0x40
 8001510:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001512:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	212c      	movs	r1, #44	; 0x2c
 800151a:	fb01 f303 	mul.w	r3, r1, r3
 800151e:	4413      	add	r3, r2
 8001520:	3339      	adds	r3, #57	; 0x39
 8001522:	78fa      	ldrb	r2, [r7, #3]
 8001524:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	212c      	movs	r1, #44	; 0x2c
 800152c:	fb01 f303 	mul.w	r3, r1, r3
 8001530:	4413      	add	r3, r2
 8001532:	333f      	adds	r3, #63	; 0x3f
 8001534:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001538:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	78ba      	ldrb	r2, [r7, #2]
 800153e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001542:	b2d0      	uxtb	r0, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	212c      	movs	r1, #44	; 0x2c
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	4413      	add	r3, r2
 800154e:	333a      	adds	r3, #58	; 0x3a
 8001550:	4602      	mov	r2, r0
 8001552:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001554:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001558:	2b00      	cmp	r3, #0
 800155a:	da09      	bge.n	8001570 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	212c      	movs	r1, #44	; 0x2c
 8001562:	fb01 f303 	mul.w	r3, r1, r3
 8001566:	4413      	add	r3, r2
 8001568:	333b      	adds	r3, #59	; 0x3b
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e008      	b.n	8001582 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	212c      	movs	r1, #44	; 0x2c
 8001576:	fb01 f303 	mul.w	r3, r1, r3
 800157a:	4413      	add	r3, r2
 800157c:	333b      	adds	r3, #59	; 0x3b
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	212c      	movs	r1, #44	; 0x2c
 8001588:	fb01 f303 	mul.w	r3, r1, r3
 800158c:	4413      	add	r3, r2
 800158e:	333c      	adds	r3, #60	; 0x3c
 8001590:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001594:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	787c      	ldrb	r4, [r7, #1]
 800159c:	78ba      	ldrb	r2, [r7, #2]
 800159e:	78f9      	ldrb	r1, [r7, #3]
 80015a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015a2:	9302      	str	r3, [sp, #8]
 80015a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	4623      	mov	r3, r4
 80015b2:	f003 feef 	bl	8005394 <USB_HC_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}

080015cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_HCD_HC_Halt+0x1e>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e00f      	b.n	800160a <HAL_HCD_HC_Halt+0x3e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 f92b 	bl	8005856 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	4608      	mov	r0, r1
 800161e:	4611      	mov	r1, r2
 8001620:	461a      	mov	r2, r3
 8001622:	4603      	mov	r3, r0
 8001624:	70fb      	strb	r3, [r7, #3]
 8001626:	460b      	mov	r3, r1
 8001628:	70bb      	strb	r3, [r7, #2]
 800162a:	4613      	mov	r3, r2
 800162c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	212c      	movs	r1, #44	; 0x2c
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	333b      	adds	r3, #59	; 0x3b
 800163c:	78ba      	ldrb	r2, [r7, #2]
 800163e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	212c      	movs	r1, #44	; 0x2c
 8001646:	fb01 f303 	mul.w	r3, r1, r3
 800164a:	4413      	add	r3, r2
 800164c:	333f      	adds	r3, #63	; 0x3f
 800164e:	787a      	ldrb	r2, [r7, #1]
 8001650:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001652:	7c3b      	ldrb	r3, [r7, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d112      	bne.n	800167e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	212c      	movs	r1, #44	; 0x2c
 800165e:	fb01 f303 	mul.w	r3, r1, r3
 8001662:	4413      	add	r3, r2
 8001664:	3342      	adds	r3, #66	; 0x42
 8001666:	2203      	movs	r2, #3
 8001668:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	212c      	movs	r1, #44	; 0x2c
 8001670:	fb01 f303 	mul.w	r3, r1, r3
 8001674:	4413      	add	r3, r2
 8001676:	333d      	adds	r3, #61	; 0x3d
 8001678:	7f3a      	ldrb	r2, [r7, #28]
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	e008      	b.n	8001690 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	212c      	movs	r1, #44	; 0x2c
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	4413      	add	r3, r2
 800168a:	3342      	adds	r3, #66	; 0x42
 800168c:	2202      	movs	r2, #2
 800168e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b03      	cmp	r3, #3
 8001694:	f200 80c6 	bhi.w	8001824 <HAL_HCD_HC_SubmitRequest+0x210>
 8001698:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800169a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169e:	bf00      	nop
 80016a0:	080016b1 	.word	0x080016b1
 80016a4:	08001811 	.word	0x08001811
 80016a8:	08001715 	.word	0x08001715
 80016ac:	08001793 	.word	0x08001793
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016b0:	7c3b      	ldrb	r3, [r7, #16]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	f040 80b8 	bne.w	8001828 <HAL_HCD_HC_SubmitRequest+0x214>
 80016b8:	78bb      	ldrb	r3, [r7, #2]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 80b4 	bne.w	8001828 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016c0:	8b3b      	ldrh	r3, [r7, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d108      	bne.n	80016d8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	212c      	movs	r1, #44	; 0x2c
 80016cc:	fb01 f303 	mul.w	r3, r1, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	3355      	adds	r3, #85	; 0x55
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	212c      	movs	r1, #44	; 0x2c
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	3355      	adds	r3, #85	; 0x55
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	212c      	movs	r1, #44	; 0x2c
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	3342      	adds	r3, #66	; 0x42
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016fe:	e093      	b.n	8001828 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	212c      	movs	r1, #44	; 0x2c
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	3342      	adds	r3, #66	; 0x42
 800170e:	2202      	movs	r2, #2
 8001710:	701a      	strb	r2, [r3, #0]
      break;
 8001712:	e089      	b.n	8001828 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001714:	78bb      	ldrb	r3, [r7, #2]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d11d      	bne.n	8001756 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	212c      	movs	r1, #44	; 0x2c
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	4413      	add	r3, r2
 8001726:	3355      	adds	r3, #85	; 0x55
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	212c      	movs	r1, #44	; 0x2c
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	4413      	add	r3, r2
 800173a:	3342      	adds	r3, #66	; 0x42
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001740:	e073      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	212c      	movs	r1, #44	; 0x2c
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	4413      	add	r3, r2
 800174e:	3342      	adds	r3, #66	; 0x42
 8001750:	2202      	movs	r2, #2
 8001752:	701a      	strb	r2, [r3, #0]
      break;
 8001754:	e069      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	212c      	movs	r1, #44	; 0x2c
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	4413      	add	r3, r2
 8001762:	3354      	adds	r3, #84	; 0x54
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	3342      	adds	r3, #66	; 0x42
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
      break;
 800177c:	e055      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	212c      	movs	r1, #44	; 0x2c
 8001784:	fb01 f303 	mul.w	r3, r1, r3
 8001788:	4413      	add	r3, r2
 800178a:	3342      	adds	r3, #66	; 0x42
 800178c:	2202      	movs	r2, #2
 800178e:	701a      	strb	r2, [r3, #0]
      break;
 8001790:	e04b      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001792:	78bb      	ldrb	r3, [r7, #2]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d11d      	bne.n	80017d4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	3355      	adds	r3, #85	; 0x55
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	212c      	movs	r1, #44	; 0x2c
 80017b2:	fb01 f303 	mul.w	r3, r1, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	3342      	adds	r3, #66	; 0x42
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017be:	e034      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	212c      	movs	r1, #44	; 0x2c
 80017c6:	fb01 f303 	mul.w	r3, r1, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	3342      	adds	r3, #66	; 0x42
 80017ce:	2202      	movs	r2, #2
 80017d0:	701a      	strb	r2, [r3, #0]
      break;
 80017d2:	e02a      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	212c      	movs	r1, #44	; 0x2c
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	4413      	add	r3, r2
 80017e0:	3354      	adds	r3, #84	; 0x54
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d109      	bne.n	80017fc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	212c      	movs	r1, #44	; 0x2c
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	3342      	adds	r3, #66	; 0x42
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
      break;
 80017fa:	e016      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	212c      	movs	r1, #44	; 0x2c
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	3342      	adds	r3, #66	; 0x42
 800180a:	2202      	movs	r2, #2
 800180c:	701a      	strb	r2, [r3, #0]
      break;
 800180e:	e00c      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	212c      	movs	r1, #44	; 0x2c
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	3342      	adds	r3, #66	; 0x42
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
      break;
 8001822:	e002      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001824:	bf00      	nop
 8001826:	e000      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001828:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	212c      	movs	r1, #44	; 0x2c
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	4413      	add	r3, r2
 8001836:	3344      	adds	r3, #68	; 0x44
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	8b3a      	ldrh	r2, [r7, #24]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	202c      	movs	r0, #44	; 0x2c
 8001844:	fb00 f303 	mul.w	r3, r0, r3
 8001848:	440b      	add	r3, r1
 800184a:	334c      	adds	r3, #76	; 0x4c
 800184c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	212c      	movs	r1, #44	; 0x2c
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	4413      	add	r3, r2
 800185a:	3360      	adds	r3, #96	; 0x60
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	212c      	movs	r1, #44	; 0x2c
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	4413      	add	r3, r2
 800186c:	3350      	adds	r3, #80	; 0x50
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	212c      	movs	r1, #44	; 0x2c
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	3339      	adds	r3, #57	; 0x39
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	212c      	movs	r1, #44	; 0x2c
 800188a:	fb01 f303 	mul.w	r3, r1, r3
 800188e:	4413      	add	r3, r2
 8001890:	3361      	adds	r3, #97	; 0x61
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	222c      	movs	r2, #44	; 0x2c
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	3338      	adds	r3, #56	; 0x38
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	18d1      	adds	r1, r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	f003 fe7e 	bl	80055b0 <USB_HC_StartXfer>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop

080018c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 fba1 	bl	800501e <USB_GetMode>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b01      	cmp	r3, #1
 80018e0:	f040 80f6 	bne.w	8001ad0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 fb85 	bl	8004ff8 <USB_ReadInterrupts>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80ec 	beq.w	8001ace <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 fb7c 	bl	8004ff8 <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001906:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800190a:	d104      	bne.n	8001916 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001914:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f003 fb6c 	bl	8004ff8 <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800192a:	d104      	bne.n	8001936 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001934:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f003 fb5c 	bl	8004ff8 <USB_ReadInterrupts>
 8001940:	4603      	mov	r3, r0
 8001942:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001946:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800194a:	d104      	bne.n	8001956 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001954:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fb4c 	bl	8004ff8 <USB_ReadInterrupts>
 8001960:	4603      	mov	r3, r0
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d103      	bne.n	8001972 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2202      	movs	r2, #2
 8001970:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fb3e 	bl	8004ff8 <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001986:	d11c      	bne.n	80019c2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001990:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10f      	bne.n	80019c2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019a2:	2110      	movs	r1, #16
 80019a4:	6938      	ldr	r0, [r7, #16]
 80019a6:	f003 fa4d 	bl	8004e44 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019aa:	6938      	ldr	r0, [r7, #16]
 80019ac:	f003 fa6e 	bl	8004e8c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 fc26 	bl	8005208 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f009 faef 	bl	800afa0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 fb16 	bl	8004ff8 <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d6:	d102      	bne.n	80019de <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f001 fa03 	bl	8002de4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 fb08 	bl	8004ff8 <USB_ReadInterrupts>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d106      	bne.n	8001a00 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f009 fab8 	bl	800af68 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2208      	movs	r2, #8
 80019fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 faf7 	bl	8004ff8 <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b10      	cmp	r3, #16
 8001a12:	d101      	bne.n	8001a18 <HAL_HCD_IRQHandler+0x158>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_HCD_IRQHandler+0x15a>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d012      	beq.n	8001a44 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0210 	bic.w	r2, r2, #16
 8001a2c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f001 f906 	bl	8002c40 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699a      	ldr	r2, [r3, #24]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0210 	orr.w	r2, r2, #16
 8001a42:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fad5 	bl	8004ff8 <USB_ReadInterrupts>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a58:	d13a      	bne.n	8001ad0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 fee8 	bl	8005834 <USB_HC_ReadInterrupt>
 8001a64:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e025      	b.n	8001ab8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d018      	beq.n	8001ab2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	015a      	lsls	r2, r3, #5
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a96:	d106      	bne.n	8001aa6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8ab 	bl	8001bfa <HCD_HC_IN_IRQHandler>
 8001aa4:	e005      	b.n	8001ab2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 fcc6 	bl	800243e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d3d4      	bcc.n	8001a6c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	e000      	b.n	8001ad0 <HAL_HCD_IRQHandler+0x210>
      return;
 8001ace:	bf00      	nop
    }
  }
}
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_HCD_Start+0x16>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e013      	b.n	8001b14 <HAL_HCD_Start+0x3e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fbe8 	bl	80052d0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f003 f92e 	bl	8004d66 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_HCD_Stop+0x16>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e00d      	b.n	8001b4e <HAL_HCD_Stop+0x32>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 ffe2 	bl	8005b08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fb8a 	bl	800527c <USB_ResetPort>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	212c      	movs	r1, #44	; 0x2c
 8001b84:	fb01 f303 	mul.w	r3, r1, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	3360      	adds	r3, #96	; 0x60
 8001b8c:	781b      	ldrb	r3, [r3, #0]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3350      	adds	r3, #80	; 0x50
 8001bb4:	681b      	ldr	r3, [r3, #0]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fbce 	bl	8005370 <USB_GetCurrentFrame>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fba9 	bl	8005342 <USB_GetHostSpeed>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	015a      	lsls	r2, r3, #5
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d119      	bne.n	8001c5e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c36:	461a      	mov	r2, r3
 8001c38:	2304      	movs	r3, #4
 8001c3a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	0151      	lsls	r1, r2, #5
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	440a      	add	r2, r1
 8001c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	60d3      	str	r3, [r2, #12]
 8001c5c:	e101      	b.n	8001e62 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	015a      	lsls	r2, r3, #5
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c74:	d12b      	bne.n	8001cce <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c82:	461a      	mov	r2, r3
 8001c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	212c      	movs	r1, #44	; 0x2c
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	3361      	adds	r3, #97	; 0x61
 8001c98:	2207      	movs	r2, #7
 8001c9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	0151      	lsls	r1, r2, #5
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	440a      	add	r2, r1
 8001cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fdc5 	bl	8005856 <USB_HC_Halt>
 8001ccc:	e0c9      	b.n	8001e62 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	2b20      	cmp	r3, #32
 8001ce2:	d109      	bne.n	8001cf8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	015a      	lsls	r2, r3, #5
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	6093      	str	r3, [r2, #8]
 8001cf6:	e0b4      	b.n	8001e62 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d133      	bne.n	8001d76 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	0151      	lsls	r1, r2, #5
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	440a      	add	r2, r1
 8001d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	212c      	movs	r1, #44	; 0x2c
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	3361      	adds	r3, #97	; 0x61
 8001d3c:	2205      	movs	r2, #5
 8001d3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2310      	movs	r3, #16
 8001d50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2308      	movs	r3, #8
 8001d62:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fd71 	bl	8005856 <USB_HC_Halt>
 8001d74:	e075      	b.n	8001e62 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8c:	d134      	bne.n	8001df8 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	0151      	lsls	r1, r2, #5
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	440a      	add	r2, r1
 8001da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3361      	adds	r3, #97	; 0x61
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2310      	movs	r3, #16
 8001dd0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	461a      	mov	r2, r3
 8001de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 fd30 	bl	8005856 <USB_HC_Halt>
 8001df6:	e034      	b.n	8001e62 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	2b80      	cmp	r3, #128	; 0x80
 8001e0c:	d129      	bne.n	8001e62 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	0151      	lsls	r1, r2, #5
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	440a      	add	r2, r1
 8001e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	212c      	movs	r1, #44	; 0x2c
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	3361      	adds	r3, #97	; 0x61
 8001e3c:	2206      	movs	r2, #6
 8001e3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fd03 	bl	8005856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e78:	d122      	bne.n	8001ec0 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	0151      	lsls	r1, r2, #5
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	440a      	add	r2, r1
 8001e90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 fcd6 	bl	8005856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ebe:	e2ba      	b.n	8002436 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	f040 811b 	bne.w	800210e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d019      	beq.n	8001f14 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	212c      	movs	r1, #44	; 0x2c
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	3348      	adds	r3, #72	; 0x48
 8001eee:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	0159      	lsls	r1, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f02:	1ad2      	subs	r2, r2, r3
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	202c      	movs	r0, #44	; 0x2c
 8001f0a:	fb00 f303 	mul.w	r3, r0, r3
 8001f0e:	440b      	add	r3, r1
 8001f10:	3350      	adds	r3, #80	; 0x50
 8001f12:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3361      	adds	r3, #97	; 0x61
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	212c      	movs	r1, #44	; 0x2c
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	335c      	adds	r3, #92	; 0x5c
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	461a      	mov	r2, r3
 8001f46:	2301      	movs	r3, #1
 8001f48:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	212c      	movs	r1, #44	; 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	333f      	adds	r3, #63	; 0x3f
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	212c      	movs	r1, #44	; 0x2c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	333f      	adds	r3, #63	; 0x3f
 8001f6c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d121      	bne.n	8001fb6 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	0151      	lsls	r1, r2, #5
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	440a      	add	r2, r1
 8001f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f003 fc5a 	bl	8005856 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2310      	movs	r3, #16
 8001fb2:	6093      	str	r3, [r2, #8]
 8001fb4:	e066      	b.n	8002084 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	333f      	adds	r3, #63	; 0x3f
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d127      	bne.n	800201a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	0151      	lsls	r1, r2, #5
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	440a      	add	r2, r1
 8001fe0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fe4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fe8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3360      	adds	r3, #96	; 0x60
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	b2d9      	uxtb	r1, r3
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	202c      	movs	r0, #44	; 0x2c
 8002006:	fb00 f303 	mul.w	r3, r0, r3
 800200a:	4413      	add	r3, r2
 800200c:	3360      	adds	r3, #96	; 0x60
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f008 ffd2 	bl	800afbc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002018:	e034      	b.n	8002084 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	333f      	adds	r3, #63	; 0x3f
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d12a      	bne.n	8002084 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3360      	adds	r3, #96	; 0x60
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3354      	adds	r3, #84	; 0x54
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	f083 0301 	eor.w	r3, r3, #1
 8002054:	b2d8      	uxtb	r0, r3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3354      	adds	r3, #84	; 0x54
 8002064:	4602      	mov	r2, r0
 8002066:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	b2d9      	uxtb	r1, r3
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	202c      	movs	r0, #44	; 0x2c
 8002072:	fb00 f303 	mul.w	r3, r0, r3
 8002076:	4413      	add	r3, r2
 8002078:	3360      	adds	r3, #96	; 0x60
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f008 ff9c 	bl	800afbc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d12b      	bne.n	80020e4 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3348      	adds	r3, #72	; 0x48
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	202c      	movs	r0, #44	; 0x2c
 80020a2:	fb00 f202 	mul.w	r2, r0, r2
 80020a6:	440a      	add	r2, r1
 80020a8:	3240      	adds	r2, #64	; 0x40
 80020aa:	8812      	ldrh	r2, [r2, #0]
 80020ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 81be 	beq.w	8002436 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	3354      	adds	r3, #84	; 0x54
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	f083 0301 	eor.w	r3, r3, #1
 80020ce:	b2d8      	uxtb	r0, r3
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3354      	adds	r3, #84	; 0x54
 80020de:	4602      	mov	r2, r0
 80020e0:	701a      	strb	r2, [r3, #0]
}
 80020e2:	e1a8      	b.n	8002436 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	3354      	adds	r3, #84	; 0x54
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	b2d8      	uxtb	r0, r3
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	3354      	adds	r3, #84	; 0x54
 8002108:	4602      	mov	r2, r0
 800210a:	701a      	strb	r2, [r3, #0]
}
 800210c:	e193      	b.n	8002436 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b02      	cmp	r3, #2
 8002122:	f040 8106 	bne.w	8002332 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	0151      	lsls	r1, r2, #5
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	440a      	add	r2, r1
 800213c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002140:	f023 0302 	bic.w	r3, r3, #2
 8002144:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	3361      	adds	r3, #97	; 0x61
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d109      	bne.n	800216e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	212c      	movs	r1, #44	; 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	3360      	adds	r3, #96	; 0x60
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
 800216c:	e0c9      	b.n	8002302 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3361      	adds	r3, #97	; 0x61
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b05      	cmp	r3, #5
 8002180:	d109      	bne.n	8002196 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	212c      	movs	r1, #44	; 0x2c
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	3360      	adds	r3, #96	; 0x60
 8002190:	2205      	movs	r2, #5
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	e0b5      	b.n	8002302 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	3361      	adds	r3, #97	; 0x61
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d009      	beq.n	80021be <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	212c      	movs	r1, #44	; 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	3361      	adds	r3, #97	; 0x61
 80021b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d150      	bne.n	8002260 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	335c      	adds	r3, #92	; 0x5c
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	202c      	movs	r0, #44	; 0x2c
 80021d6:	fb00 f303 	mul.w	r3, r0, r3
 80021da:	440b      	add	r3, r1
 80021dc:	335c      	adds	r3, #92	; 0x5c
 80021de:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	335c      	adds	r3, #92	; 0x5c
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d912      	bls.n	800221a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	335c      	adds	r3, #92	; 0x5c
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	3360      	adds	r3, #96	; 0x60
 8002214:	2204      	movs	r2, #4
 8002216:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002218:	e073      	b.n	8002302 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	3360      	adds	r3, #96	; 0x60
 8002228:	2202      	movs	r2, #2
 800222a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002242:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800224a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002258:	461a      	mov	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800225e:	e050      	b.n	8002302 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3361      	adds	r3, #97	; 0x61
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d122      	bne.n	80022ba <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3360      	adds	r3, #96	; 0x60
 8002282:	2202      	movs	r2, #2
 8002284:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800229c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022a4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e023      	b.n	8002302 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3361      	adds	r3, #97	; 0x61
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b07      	cmp	r3, #7
 80022cc:	d119      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	335c      	adds	r3, #92	; 0x5c
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	202c      	movs	r0, #44	; 0x2c
 80022e6:	fb00 f303 	mul.w	r3, r0, r3
 80022ea:	440b      	add	r3, r1
 80022ec:	335c      	adds	r3, #92	; 0x5c
 80022ee:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	3360      	adds	r3, #96	; 0x60
 80022fe:	2204      	movs	r2, #4
 8002300:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	461a      	mov	r2, r3
 8002310:	2302      	movs	r3, #2
 8002312:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	b2d9      	uxtb	r1, r3
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	202c      	movs	r0, #44	; 0x2c
 800231e:	fb00 f303 	mul.w	r3, r0, r3
 8002322:	4413      	add	r3, r2
 8002324:	3360      	adds	r3, #96	; 0x60
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f008 fe46 	bl	800afbc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002330:	e081      	b.n	8002436 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b10      	cmp	r3, #16
 8002346:	d176      	bne.n	8002436 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	333f      	adds	r3, #63	; 0x3f
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d121      	bne.n	80023a0 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	335c      	adds	r3, #92	; 0x5c
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	0151      	lsls	r1, r2, #5
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	440a      	add	r2, r1
 8002384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002388:	f043 0302 	orr.w	r3, r3, #2
 800238c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f003 fa5c 	bl	8005856 <USB_HC_Halt>
 800239e:	e041      	b.n	8002424 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	333f      	adds	r3, #63	; 0x3f
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	333f      	adds	r3, #63	; 0x3f
 80023c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d12d      	bne.n	8002424 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	335c      	adds	r3, #92	; 0x5c
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d120      	bne.n	8002424 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	3361      	adds	r3, #97	; 0x61
 80023f0:	2203      	movs	r2, #3
 80023f2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	0151      	lsls	r1, r2, #5
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	440a      	add	r2, r1
 800240a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800240e:	f043 0302 	orr.w	r3, r3, #2
 8002412:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f003 fa19 	bl	8005856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002430:	461a      	mov	r2, r3
 8002432:	2310      	movs	r3, #16
 8002434:	6093      	str	r3, [r2, #8]
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b088      	sub	sp, #32
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b04      	cmp	r3, #4
 800246c:	d119      	bne.n	80024a2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	461a      	mov	r2, r3
 800247c:	2304      	movs	r3, #4
 800247e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	0151      	lsls	r1, r2, #5
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	440a      	add	r2, r1
 8002496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249a:	f043 0302 	orr.w	r3, r3, #2
 800249e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80024a0:	e3ca      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d13e      	bne.n	8002536 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	461a      	mov	r2, r3
 80024c6:	2320      	movs	r3, #32
 80024c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	333d      	adds	r3, #61	; 0x3d
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	f040 83ac 	bne.w	8002c38 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	333d      	adds	r3, #61	; 0x3d
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	3360      	adds	r3, #96	; 0x60
 8002500:	2202      	movs	r2, #2
 8002502:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	0151      	lsls	r1, r2, #5
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	440a      	add	r2, r1
 800251a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f003 f991 	bl	8005856 <USB_HC_Halt>
}
 8002534:	e380      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254c:	d122      	bne.n	8002594 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4413      	add	r3, r2
 8002556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	0151      	lsls	r1, r2, #5
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	440a      	add	r2, r1
 8002564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f003 f96c 	bl	8005856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	461a      	mov	r2, r3
 800258c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002590:	6093      	str	r3, [r2, #8]
}
 8002592:	e351      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d150      	bne.n	800264c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	335c      	adds	r3, #92	; 0x5c
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d111      	bne.n	80025f6 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	333d      	adds	r3, #61	; 0x3d
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	461a      	mov	r2, r3
 80025f2:	2340      	movs	r3, #64	; 0x40
 80025f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	0151      	lsls	r1, r2, #5
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	440a      	add	r2, r1
 800260c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f003 f918 	bl	8005856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	461a      	mov	r2, r3
 8002634:	2301      	movs	r3, #1
 8002636:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	212c      	movs	r1, #44	; 0x2c
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	4413      	add	r3, r2
 8002644:	3361      	adds	r3, #97	; 0x61
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
}
 800264a:	e2f5      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b40      	cmp	r3, #64	; 0x40
 8002660:	d13c      	bne.n	80026dc <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	3361      	adds	r3, #97	; 0x61
 8002670:	2204      	movs	r2, #4
 8002672:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	333d      	adds	r3, #61	; 0x3d
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	335c      	adds	r3, #92	; 0x5c
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	0151      	lsls	r1, r2, #5
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	440a      	add	r2, r1
 80026ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 f8c7 	bl	8005856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	461a      	mov	r2, r3
 80026d6:	2340      	movs	r3, #64	; 0x40
 80026d8:	6093      	str	r3, [r2, #8]
}
 80026da:	e2ad      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d12a      	bne.n	8002748 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	461a      	mov	r2, r3
 8002700:	2308      	movs	r3, #8
 8002702:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	0151      	lsls	r1, r2, #5
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	440a      	add	r2, r1
 800271a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f003 f891 	bl	8005856 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3361      	adds	r3, #97	; 0x61
 8002742:	2205      	movs	r2, #5
 8002744:	701a      	strb	r2, [r3, #0]
}
 8002746:	e277      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b10      	cmp	r3, #16
 800275c:	d150      	bne.n	8002800 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	335c      	adds	r3, #92	; 0x5c
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3361      	adds	r3, #97	; 0x61
 800277e:	2203      	movs	r2, #3
 8002780:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	333d      	adds	r3, #61	; 0x3d
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d112      	bne.n	80027bc <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	333c      	adds	r3, #60	; 0x3c
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	333d      	adds	r3, #61	; 0x3d
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	0151      	lsls	r1, r2, #5
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	440a      	add	r2, r1
 80027d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d6:	f043 0302 	orr.w	r3, r3, #2
 80027da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 f835 	bl	8005856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	461a      	mov	r2, r3
 80027fa:	2310      	movs	r3, #16
 80027fc:	6093      	str	r3, [r2, #8]
}
 80027fe:	e21b      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b80      	cmp	r3, #128	; 0x80
 8002814:	d174      	bne.n	8002900 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d121      	bne.n	8002862 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	3361      	adds	r3, #97	; 0x61
 800282c:	2206      	movs	r2, #6
 800282e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	0151      	lsls	r1, r2, #5
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	440a      	add	r2, r1
 8002846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f002 fffb 	bl	8005856 <USB_HC_Halt>
 8002860:	e044      	b.n	80028ec <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	335c      	adds	r3, #92	; 0x5c
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	202c      	movs	r0, #44	; 0x2c
 800287a:	fb00 f303 	mul.w	r3, r0, r3
 800287e:	440b      	add	r3, r1
 8002880:	335c      	adds	r3, #92	; 0x5c
 8002882:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	335c      	adds	r3, #92	; 0x5c
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d920      	bls.n	80028da <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	335c      	adds	r3, #92	; 0x5c
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3360      	adds	r3, #96	; 0x60
 80028b8:	2204      	movs	r2, #4
 80028ba:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	b2d9      	uxtb	r1, r3
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	202c      	movs	r0, #44	; 0x2c
 80028c6:	fb00 f303 	mul.w	r3, r0, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	3360      	adds	r3, #96	; 0x60
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f008 fb72 	bl	800afbc <HAL_HCD_HC_NotifyURBChange_Callback>
 80028d8:	e008      	b.n	80028ec <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	3360      	adds	r3, #96	; 0x60
 80028e8:	2202      	movs	r2, #2
 80028ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	461a      	mov	r2, r3
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	6093      	str	r3, [r2, #8]
}
 80028fe:	e19b      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002916:	d134      	bne.n	8002982 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	0151      	lsls	r1, r2, #5
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	440a      	add	r2, r1
 800292e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f002 ff87 	bl	8005856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	461a      	mov	r2, r3
 8002956:	2310      	movs	r3, #16
 8002958:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800296c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3361      	adds	r3, #97	; 0x61
 800297c:	2208      	movs	r2, #8
 800297e:	701a      	strb	r2, [r3, #0]
}
 8002980:	e15a      	b.n	8002c38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b02      	cmp	r3, #2
 8002996:	f040 814f 	bne.w	8002c38 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	0151      	lsls	r1, r2, #5
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	440a      	add	r2, r1
 80029b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b4:	f023 0302 	bic.w	r3, r3, #2
 80029b8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3361      	adds	r3, #97	; 0x61
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d17d      	bne.n	8002aca <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3360      	adds	r3, #96	; 0x60
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	333f      	adds	r3, #63	; 0x3f
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d00a      	beq.n	8002a0a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	333f      	adds	r3, #63	; 0x3f
 8002a02:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	f040 8100 	bne.w	8002c0a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d113      	bne.n	8002a3a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3355      	adds	r3, #85	; 0x55
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	f083 0301 	eor.w	r3, r3, #1
 8002a26:	b2d8      	uxtb	r0, r3
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3355      	adds	r3, #85	; 0x55
 8002a36:	4602      	mov	r2, r0
 8002a38:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	f040 80e3 	bne.w	8002c0a <HCD_HC_OUT_IRQHandler+0x7cc>
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	334c      	adds	r3, #76	; 0x4c
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80d8 	beq.w	8002c0a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	334c      	adds	r3, #76	; 0x4c
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	202c      	movs	r0, #44	; 0x2c
 8002a70:	fb00 f202 	mul.w	r2, r0, r2
 8002a74:	440a      	add	r2, r1
 8002a76:	3240      	adds	r2, #64	; 0x40
 8002a78:	8812      	ldrh	r2, [r2, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	202c      	movs	r0, #44	; 0x2c
 8002a84:	fb00 f202 	mul.w	r2, r0, r2
 8002a88:	440a      	add	r2, r1
 8002a8a:	3240      	adds	r2, #64	; 0x40
 8002a8c:	8812      	ldrh	r2, [r2, #0]
 8002a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80b5 	beq.w	8002c0a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3355      	adds	r3, #85	; 0x55
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	f083 0301 	eor.w	r3, r3, #1
 8002ab4:	b2d8      	uxtb	r0, r3
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3355      	adds	r3, #85	; 0x55
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e09f      	b.n	8002c0a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3361      	adds	r3, #97	; 0x61
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d109      	bne.n	8002af2 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3360      	adds	r3, #96	; 0x60
 8002aec:	2202      	movs	r2, #2
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e08b      	b.n	8002c0a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	3361      	adds	r3, #97	; 0x61
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d109      	bne.n	8002b1a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	3360      	adds	r3, #96	; 0x60
 8002b14:	2202      	movs	r2, #2
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	e077      	b.n	8002c0a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3361      	adds	r3, #97	; 0x61
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d109      	bne.n	8002b42 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3360      	adds	r3, #96	; 0x60
 8002b3c:	2205      	movs	r2, #5
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e063      	b.n	8002c0a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3361      	adds	r3, #97	; 0x61
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d009      	beq.n	8002b6a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3361      	adds	r3, #97	; 0x61
 8002b64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d14f      	bne.n	8002c0a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	335c      	adds	r3, #92	; 0x5c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	202c      	movs	r0, #44	; 0x2c
 8002b82:	fb00 f303 	mul.w	r3, r0, r3
 8002b86:	440b      	add	r3, r1
 8002b88:	335c      	adds	r3, #92	; 0x5c
 8002b8a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	335c      	adds	r3, #92	; 0x5c
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d912      	bls.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	335c      	adds	r3, #92	; 0x5c
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3360      	adds	r3, #96	; 0x60
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	701a      	strb	r2, [r3, #0]
 8002bc4:	e021      	b.n	8002c0a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3360      	adds	r3, #96	; 0x60
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bee:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bf6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	461a      	mov	r2, r3
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	461a      	mov	r2, r3
 8002c18:	2302      	movs	r3, #2
 8002c1a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	b2d9      	uxtb	r1, r3
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	202c      	movs	r0, #44	; 0x2c
 8002c26:	fb00 f303 	mul.w	r3, r0, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3360      	adds	r3, #96	; 0x60
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f008 f9c2 	bl	800afbc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c38:	bf00      	nop
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	0c5b      	lsrs	r3, r3, #17
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c74:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d004      	beq.n	8002c86 <HCD_RXQLVL_IRQHandler+0x46>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	f000 80a9 	beq.w	8002dd6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c84:	e0aa      	b.n	8002ddc <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80a6 	beq.w	8002dda <HCD_RXQLVL_IRQHandler+0x19a>
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3344      	adds	r3, #68	; 0x44
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 809b 	beq.w	8002dda <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3350      	adds	r3, #80	; 0x50
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	202c      	movs	r0, #44	; 0x2c
 8002cbe:	fb00 f303 	mul.w	r3, r0, r3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	334c      	adds	r3, #76	; 0x4c
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d87a      	bhi.n	8002dc2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3344      	adds	r3, #68	; 0x44
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	b292      	uxth	r2, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f002 f92f 	bl	8004f48 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3344      	adds	r3, #68	; 0x44
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	441a      	add	r2, r3
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	202c      	movs	r0, #44	; 0x2c
 8002d04:	fb00 f303 	mul.w	r3, r0, r3
 8002d08:	440b      	add	r3, r1
 8002d0a:	3344      	adds	r3, #68	; 0x44
 8002d0c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3350      	adds	r3, #80	; 0x50
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	441a      	add	r2, r3
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	202c      	movs	r0, #44	; 0x2c
 8002d28:	fb00 f303 	mul.w	r3, r0, r3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3350      	adds	r3, #80	; 0x50
 8002d30:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	0cdb      	lsrs	r3, r3, #19
 8002d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d46:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	3340      	adds	r3, #64	; 0x40
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d13c      	bne.n	8002dda <HCD_RXQLVL_IRQHandler+0x19a>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d039      	beq.n	8002dda <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d7c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d84:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	461a      	mov	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3354      	adds	r3, #84	; 0x54
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	f083 0301 	eor.w	r3, r3, #1
 8002dac:	b2d8      	uxtb	r0, r3
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	3354      	adds	r3, #84	; 0x54
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	701a      	strb	r2, [r3, #0]
      break;
 8002dc0:	e00b      	b.n	8002dda <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3360      	adds	r3, #96	; 0x60
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	701a      	strb	r2, [r3, #0]
      break;
 8002dd4:	e001      	b.n	8002dda <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002dda:	bf00      	nop
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3728      	adds	r7, #40	; 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e10:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d10b      	bne.n	8002e34 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d102      	bne.n	8002e2c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f008 f8ac 	bl	800af84 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f043 0302 	orr.w	r3, r3, #2
 8002e32:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d132      	bne.n	8002ea4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f043 0308 	orr.w	r3, r3, #8
 8002e44:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d126      	bne.n	8002e9e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d113      	bne.n	8002e80 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e62:	d106      	bne.n	8002e72 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2102      	movs	r1, #2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f002 f9cc 	bl	8005208 <USB_InitFSLSPClkSel>
 8002e70:	e011      	b.n	8002e96 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2101      	movs	r1, #1
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f002 f9c5 	bl	8005208 <USB_InitFSLSPClkSel>
 8002e7e:	e00a      	b.n	8002e96 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e94:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f008 f8a2 	bl	800afe0 <HAL_HCD_PortEnabled_Callback>
 8002e9c:	e002      	b.n	8002ea4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f008 f8ac 	bl	800affc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d103      	bne.n	8002eb6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f043 0320 	orr.w	r3, r3, #32
 8002eb4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	6013      	str	r3, [r2, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e12b      	b.n	8003136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fd fd5c 	bl	80009b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f30:	f001 f9fc 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8002f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4a81      	ldr	r2, [pc, #516]	; (8003140 <HAL_I2C_Init+0x274>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d807      	bhi.n	8002f50 <HAL_I2C_Init+0x84>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a80      	ldr	r2, [pc, #512]	; (8003144 <HAL_I2C_Init+0x278>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	bf94      	ite	ls
 8002f48:	2301      	movls	r3, #1
 8002f4a:	2300      	movhi	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e006      	b.n	8002f5e <HAL_I2C_Init+0x92>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a7d      	ldr	r2, [pc, #500]	; (8003148 <HAL_I2C_Init+0x27c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	bf94      	ite	ls
 8002f58:	2301      	movls	r3, #1
 8002f5a:	2300      	movhi	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0e7      	b.n	8003136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4a78      	ldr	r2, [pc, #480]	; (800314c <HAL_I2C_Init+0x280>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0c9b      	lsrs	r3, r3, #18
 8002f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a6a      	ldr	r2, [pc, #424]	; (8003140 <HAL_I2C_Init+0x274>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d802      	bhi.n	8002fa0 <HAL_I2C_Init+0xd4>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	e009      	b.n	8002fb4 <HAL_I2C_Init+0xe8>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	4a69      	ldr	r2, [pc, #420]	; (8003150 <HAL_I2C_Init+0x284>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	495c      	ldr	r1, [pc, #368]	; (8003140 <HAL_I2C_Init+0x274>)
 8002fd0:	428b      	cmp	r3, r1
 8002fd2:	d819      	bhi.n	8003008 <HAL_I2C_Init+0x13c>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e59      	subs	r1, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe2:	1c59      	adds	r1, r3, #1
 8002fe4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fe8:	400b      	ands	r3, r1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_I2C_Init+0x138>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1e59      	subs	r1, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003002:	e051      	b.n	80030a8 <HAL_I2C_Init+0x1dc>
 8003004:	2304      	movs	r3, #4
 8003006:	e04f      	b.n	80030a8 <HAL_I2C_Init+0x1dc>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d111      	bne.n	8003034 <HAL_I2C_Init+0x168>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e58      	subs	r0, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	440b      	add	r3, r1
 800301e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003022:	3301      	adds	r3, #1
 8003024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e012      	b.n	800305a <HAL_I2C_Init+0x18e>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1e58      	subs	r0, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	0099      	lsls	r1, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	fbb0 f3f3 	udiv	r3, r0, r3
 800304a:	3301      	adds	r3, #1
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Init+0x196>
 800305e:	2301      	movs	r3, #1
 8003060:	e022      	b.n	80030a8 <HAL_I2C_Init+0x1dc>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10e      	bne.n	8003088 <HAL_I2C_Init+0x1bc>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1e58      	subs	r0, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6859      	ldr	r1, [r3, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	440b      	add	r3, r1
 8003078:	fbb0 f3f3 	udiv	r3, r0, r3
 800307c:	3301      	adds	r3, #1
 800307e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003086:	e00f      	b.n	80030a8 <HAL_I2C_Init+0x1dc>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1e58      	subs	r0, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	0099      	lsls	r1, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	fbb0 f3f3 	udiv	r3, r0, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	6809      	ldr	r1, [r1, #0]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6911      	ldr	r1, [r2, #16]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68d2      	ldr	r2, [r2, #12]
 80030e2:	4311      	orrs	r1, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	000186a0 	.word	0x000186a0
 8003144:	001e847f 	.word	0x001e847f
 8003148:	003d08ff 	.word	0x003d08ff
 800314c:	431bde83 	.word	0x431bde83
 8003150:	10624dd3 	.word	0x10624dd3

08003154 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e128      	b.n	80033b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a90      	ldr	r2, [pc, #576]	; (80033c0 <HAL_I2S_Init+0x26c>)
 800317e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7fd fc5d 	bl	8000a40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800319c:	f023 030f 	bic.w	r3, r3, #15
 80031a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2202      	movs	r2, #2
 80031a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d060      	beq.n	8003274 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031ba:	2310      	movs	r3, #16
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e001      	b.n	80031c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031c0:	2320      	movs	r3, #32
 80031c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d802      	bhi.n	80031d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031d2:	2001      	movs	r0, #1
 80031d4:	f001 f9d2 	bl	800457c <HAL_RCCEx_GetPeriphCLKFreq>
 80031d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e2:	d125      	bne.n	8003230 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d010      	beq.n	800320e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	461a      	mov	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	3305      	adds	r3, #5
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	e01f      	b.n	800324e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	fbb2 f2f3 	udiv	r2, r2, r3
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	461a      	mov	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	3305      	adds	r3, #5
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	e00e      	b.n	800324e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	fbb2 f2f3 	udiv	r2, r2, r3
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	461a      	mov	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	3305      	adds	r3, #5
 800324c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4a5c      	ldr	r2, [pc, #368]	; (80033c4 <HAL_I2S_Init+0x270>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	08db      	lsrs	r3, r3, #3
 8003258:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	e003      	b.n	800327c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003274:	2302      	movs	r3, #2
 8003276:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d902      	bls.n	8003288 <HAL_I2S_Init+0x134>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	2bff      	cmp	r3, #255	; 0xff
 8003286:	d907      	bls.n	8003298 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f043 0210 	orr.w	r2, r3, #16
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e08f      	b.n	80033b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	ea42 0103 	orr.w	r1, r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032b6:	f023 030f 	bic.w	r3, r3, #15
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6851      	ldr	r1, [r2, #4]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6892      	ldr	r2, [r2, #8]
 80032c2:	4311      	orrs	r1, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68d2      	ldr	r2, [r2, #12]
 80032c8:	4311      	orrs	r1, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6992      	ldr	r2, [r2, #24]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d161      	bne.n	80033a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a38      	ldr	r2, [pc, #224]	; (80033c8 <HAL_I2S_Init+0x274>)
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a37      	ldr	r2, [pc, #220]	; (80033cc <HAL_I2S_Init+0x278>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d101      	bne.n	80032f8 <HAL_I2S_Init+0x1a4>
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <HAL_I2S_Init+0x27c>)
 80032f6:	e001      	b.n	80032fc <HAL_I2S_Init+0x1a8>
 80032f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	4932      	ldr	r1, [pc, #200]	; (80033cc <HAL_I2S_Init+0x278>)
 8003304:	428a      	cmp	r2, r1
 8003306:	d101      	bne.n	800330c <HAL_I2S_Init+0x1b8>
 8003308:	4a31      	ldr	r2, [pc, #196]	; (80033d0 <HAL_I2S_Init+0x27c>)
 800330a:	e001      	b.n	8003310 <HAL_I2S_Init+0x1bc>
 800330c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003310:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003314:	f023 030f 	bic.w	r3, r3, #15
 8003318:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <HAL_I2S_Init+0x278>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_I2S_Init+0x1d4>
 8003324:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_I2S_Init+0x27c>)
 8003326:	e001      	b.n	800332c <HAL_I2S_Init+0x1d8>
 8003328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800332c:	2202      	movs	r2, #2
 800332e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a25      	ldr	r2, [pc, #148]	; (80033cc <HAL_I2S_Init+0x278>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d101      	bne.n	800333e <HAL_I2S_Init+0x1ea>
 800333a:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_I2S_Init+0x27c>)
 800333c:	e001      	b.n	8003342 <HAL_I2S_Init+0x1ee>
 800333e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334e:	d003      	beq.n	8003358 <HAL_I2S_Init+0x204>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	e001      	b.n	8003364 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800336e:	4313      	orrs	r3, r2
 8003370:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003378:	4313      	orrs	r3, r2
 800337a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003382:	4313      	orrs	r3, r2
 8003384:	b29a      	uxth	r2, r3
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	4313      	orrs	r3, r2
 800338a:	b29b      	uxth	r3, r3
 800338c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003390:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a0d      	ldr	r2, [pc, #52]	; (80033cc <HAL_I2S_Init+0x278>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d101      	bne.n	80033a0 <HAL_I2S_Init+0x24c>
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <HAL_I2S_Init+0x27c>)
 800339e:	e001      	b.n	80033a4 <HAL_I2S_Init+0x250>
 80033a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a4:	897a      	ldrh	r2, [r7, #10]
 80033a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	080034cb 	.word	0x080034cb
 80033c4:	cccccccd 	.word	0xcccccccd
 80033c8:	080035e1 	.word	0x080035e1
 80033cc:	40003800 	.word	0x40003800
 80033d0:	40003400 	.word	0x40003400

080033d4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	881a      	ldrh	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	1c9a      	adds	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10e      	bne.n	8003464 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003454:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ffb8 	bl	80033d4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	b292      	uxth	r2, r2
 8003480:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	1c9a      	adds	r2, r3, #2
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10e      	bne.n	80034c2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff93 	bl	80033e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d13a      	bne.n	800355c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d109      	bne.n	8003504 <I2S_IRQHandler+0x3a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d102      	bne.n	8003504 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffb4 	bl	800346c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d126      	bne.n	800355c <I2S_IRQHandler+0x92>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b20      	cmp	r3, #32
 800351a:	d11f      	bne.n	800355c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800352a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	f043 0202 	orr.w	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ff50 	bl	80033fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b03      	cmp	r3, #3
 8003566:	d136      	bne.n	80035d6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d109      	bne.n	8003586 <I2S_IRQHandler+0xbc>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357c:	2b80      	cmp	r3, #128	; 0x80
 800357e:	d102      	bne.n	8003586 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff45 	bl	8003410 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d122      	bne.n	80035d6 <I2S_IRQHandler+0x10c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b20      	cmp	r3, #32
 800359c:	d11b      	bne.n	80035d6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	f043 0204 	orr.w	r2, r3, #4
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ff13 	bl	80033fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4aa2      	ldr	r2, [pc, #648]	; (8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035fa:	4ba2      	ldr	r3, [pc, #648]	; (8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035fc:	e001      	b.n	8003602 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a9b      	ldr	r2, [pc, #620]	; (8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d101      	bne.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003618:	4b9a      	ldr	r3, [pc, #616]	; (8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800361a:	e001      	b.n	8003620 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800361c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362c:	d004      	beq.n	8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f040 8099 	bne.w	800376a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b02      	cmp	r3, #2
 8003640:	d107      	bne.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f925 	bl	800389c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d107      	bne.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f9c8 	bl	80039fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	d13a      	bne.n	80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d035      	beq.n	80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a7e      	ldr	r2, [pc, #504]	; (8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800368a:	4b7e      	ldr	r3, [pc, #504]	; (8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800368c:	e001      	b.n	8003692 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800368e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4979      	ldr	r1, [pc, #484]	; (8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800369a:	428b      	cmp	r3, r1
 800369c:	d101      	bne.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800369e:	4b79      	ldr	r3, [pc, #484]	; (8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036a0:	e001      	b.n	80036a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80036a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	f043 0202 	orr.w	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff fe88 	bl	80033fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	f040 80be 	bne.w	8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80b8 	beq.w	8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003712:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a59      	ldr	r2, [pc, #356]	; (8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800371e:	4b59      	ldr	r3, [pc, #356]	; (8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003720:	e001      	b.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003722:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4954      	ldr	r1, [pc, #336]	; (8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800372e:	428b      	cmp	r3, r1
 8003730:	d101      	bne.n	8003736 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003732:	4b54      	ldr	r3, [pc, #336]	; (8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003734:	e001      	b.n	800373a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003736:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800373e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003740:	2300      	movs	r3, #0
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f043 0204 	orr.w	r2, r3, #4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff fe4a 	bl	80033fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003768:	e084      	b.n	8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b02      	cmp	r3, #2
 8003772:	d107      	bne.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8be 	bl	8003900 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b01      	cmp	r3, #1
 800378c:	d107      	bne.n	800379e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f8fd 	bl	8003998 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d12f      	bne.n	8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d02a      	beq.n	8003808 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a2e      	ldr	r2, [pc, #184]	; (8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037cc:	4b2d      	ldr	r3, [pc, #180]	; (8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037ce:	e001      	b.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4929      	ldr	r1, [pc, #164]	; (8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037dc:	428b      	cmp	r3, r1
 80037de:	d101      	bne.n	80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037e0:	4b28      	ldr	r3, [pc, #160]	; (8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037e2:	e001      	b.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	f043 0202 	orr.w	r2, r3, #2
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fdfa 	bl	80033fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b08      	cmp	r3, #8
 8003810:	d131      	bne.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d02c      	beq.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a17      	ldr	r2, [pc, #92]	; (8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003826:	4b17      	ldr	r3, [pc, #92]	; (8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003828:	e001      	b.n	800382e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800382a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4912      	ldr	r1, [pc, #72]	; (8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003836:	428b      	cmp	r3, r1
 8003838:	d101      	bne.n	800383e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800383c:	e001      	b.n	8003842 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800383e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003842:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003846:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003856:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	f043 0204 	orr.w	r2, r3, #4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff fdc5 	bl	80033fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003872:	e000      	b.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003874:	bf00      	nop
}
 8003876:	bf00      	nop
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40003800 	.word	0x40003800
 8003884:	40003400 	.word	0x40003400

08003888 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	1c99      	adds	r1, r3, #2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6251      	str	r1, [r2, #36]	; 0x24
 80038ae:	881a      	ldrh	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d113      	bne.n	80038f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ffc9 	bl	8003888 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	1c99      	adds	r1, r3, #2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6251      	str	r1, [r2, #36]	; 0x24
 8003912:	8819      	ldrh	r1, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <I2SEx_TxISR_I2SExt+0x90>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d101      	bne.n	8003922 <I2SEx_TxISR_I2SExt+0x22>
 800391e:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <I2SEx_TxISR_I2SExt+0x94>)
 8003920:	e001      	b.n	8003926 <I2SEx_TxISR_I2SExt+0x26>
 8003922:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003926:	460a      	mov	r2, r1
 8003928:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d121      	bne.n	8003986 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a12      	ldr	r2, [pc, #72]	; (8003990 <I2SEx_TxISR_I2SExt+0x90>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <I2SEx_TxISR_I2SExt+0x50>
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <I2SEx_TxISR_I2SExt+0x94>)
 800394e:	e001      	b.n	8003954 <I2SEx_TxISR_I2SExt+0x54>
 8003950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	490d      	ldr	r1, [pc, #52]	; (8003990 <I2SEx_TxISR_I2SExt+0x90>)
 800395c:	428b      	cmp	r3, r1
 800395e:	d101      	bne.n	8003964 <I2SEx_TxISR_I2SExt+0x64>
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <I2SEx_TxISR_I2SExt+0x94>)
 8003962:	e001      	b.n	8003968 <I2SEx_TxISR_I2SExt+0x68>
 8003964:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003968:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800396c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d106      	bne.n	8003986 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ff81 	bl	8003888 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40003800 	.word	0x40003800
 8003994:	40003400 	.word	0x40003400

08003998 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68d8      	ldr	r0, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	1c99      	adds	r1, r3, #2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039b0:	b282      	uxth	r2, r0
 80039b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d113      	bne.n	80039f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff ff4a 	bl	8003888 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <I2SEx_RxISR_I2SExt+0x90>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <I2SEx_RxISR_I2SExt+0x16>
 8003a0e:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <I2SEx_RxISR_I2SExt+0x94>)
 8003a10:	e001      	b.n	8003a16 <I2SEx_RxISR_I2SExt+0x1a>
 8003a12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a16:	68d8      	ldr	r0, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	1c99      	adds	r1, r3, #2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a22:	b282      	uxth	r2, r0
 8003a24:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d121      	bne.n	8003a82 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <I2SEx_RxISR_I2SExt+0x90>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d101      	bne.n	8003a4c <I2SEx_RxISR_I2SExt+0x50>
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <I2SEx_RxISR_I2SExt+0x94>)
 8003a4a:	e001      	b.n	8003a50 <I2SEx_RxISR_I2SExt+0x54>
 8003a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	490d      	ldr	r1, [pc, #52]	; (8003a8c <I2SEx_RxISR_I2SExt+0x90>)
 8003a58:	428b      	cmp	r3, r1
 8003a5a:	d101      	bne.n	8003a60 <I2SEx_RxISR_I2SExt+0x64>
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <I2SEx_RxISR_I2SExt+0x94>)
 8003a5e:	e001      	b.n	8003a64 <I2SEx_RxISR_I2SExt+0x68>
 8003a60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a68:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff03 	bl	8003888 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40003800 	.word	0x40003800
 8003a90:	40003400 	.word	0x40003400

08003a94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e264      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d075      	beq.n	8003b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ab2:	4ba3      	ldr	r3, [pc, #652]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d00c      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003abe:	4ba0      	ldr	r3, [pc, #640]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d112      	bne.n	8003af0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aca:	4b9d      	ldr	r3, [pc, #628]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad6:	d10b      	bne.n	8003af0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad8:	4b99      	ldr	r3, [pc, #612]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d05b      	beq.n	8003b9c <HAL_RCC_OscConfig+0x108>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d157      	bne.n	8003b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e23f      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af8:	d106      	bne.n	8003b08 <HAL_RCC_OscConfig+0x74>
 8003afa:	4b91      	ldr	r3, [pc, #580]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a90      	ldr	r2, [pc, #576]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e01d      	b.n	8003b44 <HAL_RCC_OscConfig+0xb0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x98>
 8003b12:	4b8b      	ldr	r3, [pc, #556]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a8a      	ldr	r2, [pc, #552]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b88      	ldr	r3, [pc, #544]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a87      	ldr	r2, [pc, #540]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCC_OscConfig+0xb0>
 8003b2c:	4b84      	ldr	r3, [pc, #528]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a83      	ldr	r2, [pc, #524]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b81      	ldr	r3, [pc, #516]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a80      	ldr	r2, [pc, #512]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d013      	beq.n	8003b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fd f96c 	bl	8000e28 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fd f968 	bl	8000e28 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	; 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e204      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b76      	ldr	r3, [pc, #472]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0xc0>
 8003b72:	e014      	b.n	8003b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fd f958 	bl	8000e28 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7fd f954 	bl	8000e28 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e1f0      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8e:	4b6c      	ldr	r3, [pc, #432]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0xe8>
 8003b9a:	e000      	b.n	8003b9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d063      	beq.n	8003c72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003baa:	4b65      	ldr	r3, [pc, #404]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb6:	4b62      	ldr	r3, [pc, #392]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d11c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc2:	4b5f      	ldr	r3, [pc, #380]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d116      	bne.n	8003bfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bce:	4b5c      	ldr	r3, [pc, #368]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_RCC_OscConfig+0x152>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d001      	beq.n	8003be6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e1c4      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be6:	4b56      	ldr	r3, [pc, #344]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4952      	ldr	r1, [pc, #328]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfa:	e03a      	b.n	8003c72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d020      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c04:	4b4f      	ldr	r3, [pc, #316]	; (8003d44 <HAL_RCC_OscConfig+0x2b0>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fd f90d 	bl	8000e28 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c12:	f7fd f909 	bl	8000e28 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e1a5      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c24:	4b46      	ldr	r3, [pc, #280]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c30:	4b43      	ldr	r3, [pc, #268]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4940      	ldr	r1, [pc, #256]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
 8003c44:	e015      	b.n	8003c72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c46:	4b3f      	ldr	r3, [pc, #252]	; (8003d44 <HAL_RCC_OscConfig+0x2b0>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fd f8ec 	bl	8000e28 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c54:	f7fd f8e8 	bl	8000e28 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e184      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c66:	4b36      	ldr	r3, [pc, #216]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d030      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c86:	4b30      	ldr	r3, [pc, #192]	; (8003d48 <HAL_RCC_OscConfig+0x2b4>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fd f8cc 	bl	8000e28 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c94:	f7fd f8c8 	bl	8000e28 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e164      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0x200>
 8003cb2:	e015      	b.n	8003ce0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb4:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <HAL_RCC_OscConfig+0x2b4>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cba:	f7fd f8b5 	bl	8000e28 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fd f8b1 	bl	8000e28 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e14d      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f0      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80a0 	beq.w	8003e2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf2:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10f      	bne.n	8003d1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_RCC_OscConfig+0x2b8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d121      	bne.n	8003d6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2a:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <HAL_RCC_OscConfig+0x2b8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <HAL_RCC_OscConfig+0x2b8>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d36:	f7fd f877 	bl	8000e28 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	e011      	b.n	8003d62 <HAL_RCC_OscConfig+0x2ce>
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	42470000 	.word	0x42470000
 8003d48:	42470e80 	.word	0x42470e80
 8003d4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d50:	f7fd f86a 	bl	8000e28 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e106      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d62:	4b85      	ldr	r3, [pc, #532]	; (8003f78 <HAL_RCC_OscConfig+0x4e4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d106      	bne.n	8003d84 <HAL_RCC_OscConfig+0x2f0>
 8003d76:	4b81      	ldr	r3, [pc, #516]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	4a80      	ldr	r2, [pc, #512]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	6713      	str	r3, [r2, #112]	; 0x70
 8003d82:	e01c      	b.n	8003dbe <HAL_RCC_OscConfig+0x32a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b05      	cmp	r3, #5
 8003d8a:	d10c      	bne.n	8003da6 <HAL_RCC_OscConfig+0x312>
 8003d8c:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	4a7a      	ldr	r2, [pc, #488]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	6713      	str	r3, [r2, #112]	; 0x70
 8003d98:	4b78      	ldr	r3, [pc, #480]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a77      	ldr	r2, [pc, #476]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
 8003da4:	e00b      	b.n	8003dbe <HAL_RCC_OscConfig+0x32a>
 8003da6:	4b75      	ldr	r3, [pc, #468]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a74      	ldr	r2, [pc, #464]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6713      	str	r3, [r2, #112]	; 0x70
 8003db2:	4b72      	ldr	r3, [pc, #456]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	4a71      	ldr	r2, [pc, #452]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d015      	beq.n	8003df2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fd f82f 	bl	8000e28 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fd f82b 	bl	8000e28 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0c5      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ee      	beq.n	8003dce <HAL_RCC_OscConfig+0x33a>
 8003df0:	e014      	b.n	8003e1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df2:	f7fd f819 	bl	8000e28 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fd f815 	bl	8000e28 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e0af      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e10:	4b5a      	ldr	r3, [pc, #360]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ee      	bne.n	8003dfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d105      	bne.n	8003e2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4b56      	ldr	r3, [pc, #344]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	4a55      	ldr	r2, [pc, #340]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 809b 	beq.w	8003f6e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e38:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 030c 	and.w	r3, r3, #12
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d05c      	beq.n	8003efe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d141      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4c:	4b4c      	ldr	r3, [pc, #304]	; (8003f80 <HAL_RCC_OscConfig+0x4ec>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fc ffe9 	bl	8000e28 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fc ffe5 	bl	8000e28 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e081      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6c:	4b43      	ldr	r3, [pc, #268]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f0      	bne.n	8003e5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	019b      	lsls	r3, r3, #6
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	3b01      	subs	r3, #1
 8003e92:	041b      	lsls	r3, r3, #16
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	4937      	ldr	r1, [pc, #220]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea2:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <HAL_RCC_OscConfig+0x4ec>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fc ffbe 	bl	8000e28 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fc ffba 	bl	8000e28 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e056      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec2:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x41c>
 8003ece:	e04e      	b.n	8003f6e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_RCC_OscConfig+0x4ec>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fc ffa7 	bl	8000e28 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ede:	f7fc ffa3 	bl	8000e28 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e03f      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef0:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f0      	bne.n	8003ede <HAL_RCC_OscConfig+0x44a>
 8003efc:	e037      	b.n	8003f6e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e032      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f0a:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <HAL_RCC_OscConfig+0x4e8>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d028      	beq.n	8003f6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d121      	bne.n	8003f6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d11a      	bne.n	8003f6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d111      	bne.n	8003f6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	3b01      	subs	r3, #1
 8003f54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d001      	beq.n	8003f6e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40007000 	.word	0x40007000
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	42470060 	.word	0x42470060

08003f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0cc      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	4b68      	ldr	r3, [pc, #416]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d90c      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b65      	ldr	r3, [pc, #404]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b63      	ldr	r3, [pc, #396]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0b8      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd8:	4b59      	ldr	r3, [pc, #356]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a58      	ldr	r2, [pc, #352]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff0:	4b53      	ldr	r3, [pc, #332]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4a52      	ldr	r2, [pc, #328]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffc:	4b50      	ldr	r3, [pc, #320]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	494d      	ldr	r1, [pc, #308]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d044      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b47      	ldr	r3, [pc, #284]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d119      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e07f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d003      	beq.n	8004042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800403e:	2b03      	cmp	r3, #3
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	4b3f      	ldr	r3, [pc, #252]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e06f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004052:	4b3b      	ldr	r3, [pc, #236]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e067      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004062:	4b37      	ldr	r3, [pc, #220]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f023 0203 	bic.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4934      	ldr	r1, [pc, #208]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	4313      	orrs	r3, r2
 8004072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004074:	f7fc fed8 	bl	8000e28 <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	e00a      	b.n	8004092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407c:	f7fc fed4 	bl	8000e28 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e04f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 020c 	and.w	r2, r3, #12
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d1eb      	bne.n	800407c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d20c      	bcs.n	80040cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b22      	ldr	r3, [pc, #136]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b20      	ldr	r3, [pc, #128]	; (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e032      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d8:	4b19      	ldr	r3, [pc, #100]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4916      	ldr	r1, [pc, #88]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	490e      	ldr	r1, [pc, #56]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800410a:	f000 f821 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800410e:	4602      	mov	r2, r0
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	490a      	ldr	r1, [pc, #40]	; (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	5ccb      	ldrb	r3, [r1, r3]
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	4a09      	ldr	r2, [pc, #36]	; (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fc fd50 	bl	8000bd0 <HAL_InitTick>

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40023c00 	.word	0x40023c00
 8004140:	40023800 	.word	0x40023800
 8004144:	0800b774 	.word	0x0800b774
 8004148:	20000000 	.word	0x20000000
 800414c:	20000004 	.word	0x20000004

08004150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004150:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	2300      	movs	r3, #0
 8004162:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004168:	4b67      	ldr	r3, [pc, #412]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b08      	cmp	r3, #8
 8004172:	d00d      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0x40>
 8004174:	2b08      	cmp	r3, #8
 8004176:	f200 80bd 	bhi.w	80042f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x34>
 800417e:	2b04      	cmp	r3, #4
 8004180:	d003      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0x3a>
 8004182:	e0b7      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004184:	4b61      	ldr	r3, [pc, #388]	; (800430c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004186:	60bb      	str	r3, [r7, #8]
       break;
 8004188:	e0b7      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418a:	4b61      	ldr	r3, [pc, #388]	; (8004310 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800418c:	60bb      	str	r3, [r7, #8]
      break;
 800418e:	e0b4      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004190:	4b5d      	ldr	r3, [pc, #372]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004198:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800419a:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d04d      	beq.n	8004242 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a6:	4b58      	ldr	r3, [pc, #352]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	099b      	lsrs	r3, r3, #6
 80041ac:	461a      	mov	r2, r3
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	ea02 0800 	and.w	r8, r2, r0
 80041be:	ea03 0901 	and.w	r9, r3, r1
 80041c2:	4640      	mov	r0, r8
 80041c4:	4649      	mov	r1, r9
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	014b      	lsls	r3, r1, #5
 80041d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041d4:	0142      	lsls	r2, r0, #5
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	ebb0 0008 	subs.w	r0, r0, r8
 80041de:	eb61 0109 	sbc.w	r1, r1, r9
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	018b      	lsls	r3, r1, #6
 80041ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041f0:	0182      	lsls	r2, r0, #6
 80041f2:	1a12      	subs	r2, r2, r0
 80041f4:	eb63 0301 	sbc.w	r3, r3, r1
 80041f8:	f04f 0000 	mov.w	r0, #0
 80041fc:	f04f 0100 	mov.w	r1, #0
 8004200:	00d9      	lsls	r1, r3, #3
 8004202:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004206:	00d0      	lsls	r0, r2, #3
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	eb12 0208 	adds.w	r2, r2, r8
 8004210:	eb43 0309 	adc.w	r3, r3, r9
 8004214:	f04f 0000 	mov.w	r0, #0
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	0259      	lsls	r1, r3, #9
 800421e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004222:	0250      	lsls	r0, r2, #9
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	461a      	mov	r2, r3
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	f7fb ffcc 	bl	80001d0 <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4613      	mov	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	e04a      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004242:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	461a      	mov	r2, r3
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004252:	f04f 0100 	mov.w	r1, #0
 8004256:	ea02 0400 	and.w	r4, r2, r0
 800425a:	ea03 0501 	and.w	r5, r3, r1
 800425e:	4620      	mov	r0, r4
 8004260:	4629      	mov	r1, r5
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	014b      	lsls	r3, r1, #5
 800426c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004270:	0142      	lsls	r2, r0, #5
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	1b00      	subs	r0, r0, r4
 8004278:	eb61 0105 	sbc.w	r1, r1, r5
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	018b      	lsls	r3, r1, #6
 8004286:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800428a:	0182      	lsls	r2, r0, #6
 800428c:	1a12      	subs	r2, r2, r0
 800428e:	eb63 0301 	sbc.w	r3, r3, r1
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	00d9      	lsls	r1, r3, #3
 800429c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042a0:	00d0      	lsls	r0, r2, #3
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	1912      	adds	r2, r2, r4
 80042a8:	eb45 0303 	adc.w	r3, r5, r3
 80042ac:	f04f 0000 	mov.w	r0, #0
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	0299      	lsls	r1, r3, #10
 80042b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042ba:	0290      	lsls	r0, r2, #10
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4610      	mov	r0, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	f7fb ff80 	bl	80001d0 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4613      	mov	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	3301      	adds	r3, #1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	60bb      	str	r3, [r7, #8]
      break;
 80042f2:	e002      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042f6:	60bb      	str	r3, [r7, #8]
      break;
 80042f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fa:	68bb      	ldr	r3, [r7, #8]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	00f42400 	.word	0x00f42400
 8004310:	007a1200 	.word	0x007a1200

08004314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <HAL_RCC_GetHCLKFreq+0x14>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000000 	.word	0x20000000

0800432c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004330:	f7ff fff0 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0a9b      	lsrs	r3, r3, #10
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4903      	ldr	r1, [pc, #12]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	0800b784 	.word	0x0800b784

08004354 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	220f      	movs	r2, #15
 8004362:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004364:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0203 	and.w	r2, r3, #3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <HAL_RCC_GetClockConfig+0x5c>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_RCC_GetClockConfig+0x5c>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	08db      	lsrs	r3, r3, #3
 800438e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <HAL_RCC_GetClockConfig+0x60>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0207 	and.w	r2, r3, #7
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	601a      	str	r2, [r3, #0]
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40023c00 	.word	0x40023c00

080043b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d035      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043e0:	4b62      	ldr	r3, [pc, #392]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043e6:	f7fc fd1f 	bl	8000e28 <HAL_GetTick>
 80043ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043ee:	f7fc fd1b 	bl	8000e28 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e0b0      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004400:	4b5b      	ldr	r3, [pc, #364]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f0      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	019a      	lsls	r2, r3, #6
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	071b      	lsls	r3, r3, #28
 8004418:	4955      	ldr	r1, [pc, #340]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004420:	4b52      	ldr	r3, [pc, #328]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004426:	f7fc fcff 	bl	8000e28 <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800442e:	f7fc fcfb 	bl	8000e28 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e090      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004440:	4b4b      	ldr	r3, [pc, #300]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8083 	beq.w	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	4b44      	ldr	r3, [pc, #272]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4a43      	ldr	r2, [pc, #268]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	; 0x40
 800446a:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004476:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a3e      	ldr	r2, [pc, #248]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004480:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004482:	f7fc fcd1 	bl	8000e28 <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004488:	e008      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800448a:	f7fc fccd 	bl	8000e28 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e062      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044a8:	4b31      	ldr	r3, [pc, #196]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d02f      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d028      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044c6:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044d0:	4b29      	ldr	r3, [pc, #164]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044d6:	4b28      	ldr	r3, [pc, #160]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044dc:	4a24      	ldr	r2, [pc, #144]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044e2:	4b23      	ldr	r3, [pc, #140]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d114      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044ee:	f7fc fc9b 	bl	8000e28 <HAL_GetTick>
 80044f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f4:	e00a      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f6:	f7fc fc97 	bl	8000e28 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f241 3288 	movw	r2, #5000	; 0x1388
 8004504:	4293      	cmp	r3, r2
 8004506:	d901      	bls.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e02a      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	4b18      	ldr	r3, [pc, #96]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ee      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004524:	d10d      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453a:	490d      	ldr	r1, [pc, #52]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800453c:	4313      	orrs	r3, r2
 800453e:	608b      	str	r3, [r1, #8]
 8004540:	e005      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004542:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004548:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800454c:	6093      	str	r3, [r2, #8]
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800455a:	4905      	ldr	r1, [pc, #20]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800455c:	4313      	orrs	r3, r2
 800455e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	42470068 	.word	0x42470068
 8004570:	40023800 	.word	0x40023800
 8004574:	40007000 	.word	0x40007000
 8004578:	42470e40 	.word	0x42470e40

0800457c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d13e      	bne.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800459a:	4b23      	ldr	r3, [pc, #140]	; (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d12f      	bne.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045b0:	4b1e      	ldr	r3, [pc, #120]	; (800462c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045b2:	617b      	str	r3, [r7, #20]
          break;
 80045b4:	e02f      	b.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045b6:	4b1c      	ldr	r3, [pc, #112]	; (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c2:	d108      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045c4:	4b18      	ldr	r3, [pc, #96]	; (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045cc:	4a18      	ldr	r2, [pc, #96]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80045ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	e007      	b.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045de:	4a15      	ldr	r2, [pc, #84]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ec:	099b      	lsrs	r3, r3, #6
 80045ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	fb02 f303 	mul.w	r3, r2, r3
 80045f8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004600:	0f1b      	lsrs	r3, r3, #28
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	617b      	str	r3, [r7, #20]
          break;
 800460e:	e002      	b.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
          break;
 8004614:	bf00      	nop
        }
      }
      break;
 8004616:	bf00      	nop
    }
  }
  return frequency;
 8004618:	697b      	ldr	r3, [r7, #20]
}
 800461a:	4618      	mov	r0, r3
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40023800 	.word	0x40023800
 800462c:	00bb8000 	.word	0x00bb8000
 8004630:	007a1200 	.word	0x007a1200
 8004634:	00f42400 	.word	0x00f42400

08004638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e07b      	b.n	8004742 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	2b00      	cmp	r3, #0
 8004650:	d108      	bne.n	8004664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465a:	d009      	beq.n	8004670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	61da      	str	r2, [r3, #28]
 8004662:	e005      	b.n	8004670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fc fa58 	bl	8000b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f4:	ea42 0103 	orr.w	r1, r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	f003 0104 	and.w	r1, r3, #4
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f003 0210 	and.w	r2, r3, #16
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004730:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e041      	b.n	80047e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f839 	bl	80047e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3304      	adds	r3, #4
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f000 f9d7 	bl	8004b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d001      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e04e      	b.n	80048b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a23      	ldr	r2, [pc, #140]	; (80048c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d022      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483e:	d01d      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d018      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d013      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <HAL_TIM_Base_Start_IT+0xd0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00e      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1b      	ldr	r2, [pc, #108]	; (80048d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d009      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a19      	ldr	r2, [pc, #100]	; (80048d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d111      	bne.n	80048a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b06      	cmp	r3, #6
 800488c:	d010      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489e:	e007      	b.n	80048b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40010400 	.word	0x40010400
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40001800 	.word	0x40001800

080048dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d122      	bne.n	8004938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d11b      	bne.n	8004938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0202 	mvn.w	r2, #2
 8004908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8ee 	bl	8004b00 <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8e0 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f8f1 	bl	8004b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b04      	cmp	r3, #4
 8004944:	d122      	bne.n	800498c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b04      	cmp	r3, #4
 8004952:	d11b      	bne.n	800498c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0204 	mvn.w	r2, #4
 800495c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f8c4 	bl	8004b00 <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8b6 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f8c7 	bl	8004b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b08      	cmp	r3, #8
 8004998:	d122      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d11b      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0208 	mvn.w	r2, #8
 80049b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2204      	movs	r2, #4
 80049b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f89a 	bl	8004b00 <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f88c 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f89d 	bl	8004b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d122      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d11b      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0210 	mvn.w	r2, #16
 8004a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2208      	movs	r2, #8
 8004a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f870 	bl	8004b00 <HAL_TIM_IC_CaptureCallback>
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f862 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f873 	bl	8004b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d10e      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d107      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0201 	mvn.w	r2, #1
 8004a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fb ff64 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b80      	cmp	r3, #128	; 0x80
 8004a6c:	d10e      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a78:	2b80      	cmp	r3, #128	; 0x80
 8004a7a:	d107      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f902 	bl	8004c90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a96:	2b40      	cmp	r3, #64	; 0x40
 8004a98:	d10e      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d107      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f838 	bl	8004b28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d10e      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d107      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0220 	mvn.w	r2, #32
 8004adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f8cc 	bl	8004c7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a40      	ldr	r2, [pc, #256]	; (8004c50 <TIM_Base_SetConfig+0x114>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <TIM_Base_SetConfig+0x40>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5a:	d00f      	beq.n	8004b7c <TIM_Base_SetConfig+0x40>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a3d      	ldr	r2, [pc, #244]	; (8004c54 <TIM_Base_SetConfig+0x118>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <TIM_Base_SetConfig+0x40>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a3c      	ldr	r2, [pc, #240]	; (8004c58 <TIM_Base_SetConfig+0x11c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_Base_SetConfig+0x40>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a3b      	ldr	r2, [pc, #236]	; (8004c5c <TIM_Base_SetConfig+0x120>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0x40>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a3a      	ldr	r2, [pc, #232]	; (8004c60 <TIM_Base_SetConfig+0x124>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d108      	bne.n	8004b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a2f      	ldr	r2, [pc, #188]	; (8004c50 <TIM_Base_SetConfig+0x114>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d02b      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d027      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a2c      	ldr	r2, [pc, #176]	; (8004c54 <TIM_Base_SetConfig+0x118>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d023      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a2b      	ldr	r2, [pc, #172]	; (8004c58 <TIM_Base_SetConfig+0x11c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01f      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a2a      	ldr	r2, [pc, #168]	; (8004c5c <TIM_Base_SetConfig+0x120>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01b      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a29      	ldr	r2, [pc, #164]	; (8004c60 <TIM_Base_SetConfig+0x124>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d017      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a28      	ldr	r2, [pc, #160]	; (8004c64 <TIM_Base_SetConfig+0x128>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a27      	ldr	r2, [pc, #156]	; (8004c68 <TIM_Base_SetConfig+0x12c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00f      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a26      	ldr	r2, [pc, #152]	; (8004c6c <TIM_Base_SetConfig+0x130>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a25      	ldr	r2, [pc, #148]	; (8004c70 <TIM_Base_SetConfig+0x134>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d007      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a24      	ldr	r2, [pc, #144]	; (8004c74 <TIM_Base_SetConfig+0x138>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a23      	ldr	r2, [pc, #140]	; (8004c78 <TIM_Base_SetConfig+0x13c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d108      	bne.n	8004c00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <TIM_Base_SetConfig+0x114>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d003      	beq.n	8004c34 <TIM_Base_SetConfig+0xf8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a0c      	ldr	r2, [pc, #48]	; (8004c60 <TIM_Base_SetConfig+0x124>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d103      	bne.n	8004c3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	615a      	str	r2, [r3, #20]
}
 8004c42:	bf00      	nop
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40010000 	.word	0x40010000
 8004c54:	40000400 	.word	0x40000400
 8004c58:	40000800 	.word	0x40000800
 8004c5c:	40000c00 	.word	0x40000c00
 8004c60:	40010400 	.word	0x40010400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40014400 	.word	0x40014400
 8004c6c:	40014800 	.word	0x40014800
 8004c70:	40001800 	.word	0x40001800
 8004c74:	40001c00 	.word	0x40001c00
 8004c78:	40002000 	.word	0x40002000

08004c7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	f107 001c 	add.w	r0, r7, #28
 8004cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d122      	bne.n	8004d02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d105      	bne.n	8004cf6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f9a0 	bl	800503c <USB_CoreReset>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	73fb      	strb	r3, [r7, #15]
 8004d00:	e01a      	b.n	8004d38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f994 	bl	800503c <USB_CoreReset>
 8004d14:	4603      	mov	r3, r0
 8004d16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
 8004d2a:	e005      	b.n	8004d38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d10b      	bne.n	8004d56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f043 0206 	orr.w	r2, r3, #6
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f043 0220 	orr.w	r2, r3, #32
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d62:	b004      	add	sp, #16
 8004d64:	4770      	bx	lr

08004d66 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f043 0201 	orr.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f023 0201 	bic.w	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	460b      	mov	r3, r1
 8004db4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d115      	bne.n	8004df8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dd8:	2001      	movs	r0, #1
 8004dda:	f7fc f831 	bl	8000e40 <HAL_Delay>
      ms++;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3301      	adds	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f91a 	bl	800501e <USB_GetMode>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d01e      	beq.n	8004e2e <USB_SetCurrentMode+0x84>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b31      	cmp	r3, #49	; 0x31
 8004df4:	d9f0      	bls.n	8004dd8 <USB_SetCurrentMode+0x2e>
 8004df6:	e01a      	b.n	8004e2e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d115      	bne.n	8004e2a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e0a:	2001      	movs	r0, #1
 8004e0c:	f7fc f818 	bl	8000e40 <HAL_Delay>
      ms++;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3301      	adds	r3, #1
 8004e14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f901 	bl	800501e <USB_GetMode>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <USB_SetCurrentMode+0x84>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b31      	cmp	r3, #49	; 0x31
 8004e26:	d9f0      	bls.n	8004e0a <USB_SetCurrentMode+0x60>
 8004e28:	e001      	b.n	8004e2e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e005      	b.n	8004e3a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b32      	cmp	r3, #50	; 0x32
 8004e32:	d101      	bne.n	8004e38 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	019b      	lsls	r3, r3, #6
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3301      	adds	r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <USB_FlushTxFifo+0x44>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e006      	b.n	8004e7c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d0f1      	beq.n	8004e5e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	00030d40 	.word	0x00030d40

08004e8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2210      	movs	r2, #16
 8004e9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	4a08      	ldr	r2, [pc, #32]	; (8004ec8 <USB_FlushRxFifo+0x3c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e006      	b.n	8004ebc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b10      	cmp	r3, #16
 8004eb8:	d0f1      	beq.n	8004e9e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	00030d40 	.word	0x00030d40

08004ecc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b089      	sub	sp, #36	; 0x24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	460b      	mov	r3, r1
 8004edc:	71fb      	strb	r3, [r7, #7]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004eea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d123      	bne.n	8004f3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ef2:	88bb      	ldrh	r3, [r7, #4]
 8004ef4:	3303      	adds	r3, #3
 8004ef6:	089b      	lsrs	r3, r3, #2
 8004ef8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	e018      	b.n	8004f32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	031a      	lsls	r2, r3, #12
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	3301      	adds	r3, #1
 8004f18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	3301      	adds	r3, #1
 8004f24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d3e2      	bcc.n	8004f00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3724      	adds	r7, #36	; 0x24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b08b      	sub	sp, #44	; 0x2c
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	4613      	mov	r3, r2
 8004f54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	089b      	lsrs	r3, r3, #2
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	623b      	str	r3, [r7, #32]
 8004f72:	e014      	b.n	8004f9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	3301      	adds	r3, #1
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	3301      	adds	r3, #1
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	3301      	adds	r3, #1
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	3301      	adds	r3, #1
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	623b      	str	r3, [r7, #32]
 8004f9e:	6a3a      	ldr	r2, [r7, #32]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d3e6      	bcc.n	8004f74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004fa6:	8bfb      	ldrh	r3, [r7, #30]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01e      	beq.n	8004fea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f107 0310 	add.w	r3, r7, #16
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	701a      	strb	r2, [r3, #0]
      i++;
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	3301      	adds	r3, #1
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fde:	8bfb      	ldrh	r3, [r7, #30]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fe4:	8bfb      	ldrh	r3, [r7, #30]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1ea      	bne.n	8004fc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	372c      	adds	r7, #44	; 0x2c
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4013      	ands	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005010:	68fb      	ldr	r3, [r7, #12]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0301 	and.w	r3, r3, #1
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3301      	adds	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	4a13      	ldr	r2, [pc, #76]	; (800509c <USB_CoreReset+0x60>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d901      	bls.n	8005058 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e01a      	b.n	800508e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	daf3      	bge.n	8005048 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	f043 0201 	orr.w	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3301      	adds	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <USB_CoreReset+0x60>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e006      	b.n	800508e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b01      	cmp	r3, #1
 800508a:	d0f1      	beq.n	8005070 <USB_CoreReset+0x34>

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	00030d40 	.word	0x00030d40

080050a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050a0:	b084      	sub	sp, #16
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	f107 001c 	add.w	r0, r7, #28
 80050ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050bc:	461a      	mov	r2, r3
 80050be:	2300      	movs	r3, #0
 80050c0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d018      	beq.n	8005124 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d10a      	bne.n	800510e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005106:	f043 0304 	orr.w	r3, r3, #4
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	e014      	b.n	8005138 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800511c:	f023 0304 	bic.w	r3, r3, #4
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e009      	b.n	8005138 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005132:	f023 0304 	bic.w	r3, r3, #4
 8005136:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005138:	2110      	movs	r1, #16
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff fe82 	bl	8004e44 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff fea3 	bl	8004e8c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e015      	b.n	8005178 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005158:	461a      	mov	r2, r3
 800515a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800515e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4413      	add	r3, r2
 8005168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516c:	461a      	mov	r2, r3
 800516e:	2300      	movs	r3, #0
 8005170:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3301      	adds	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	429a      	cmp	r2, r3
 800517e:	d3e5      	bcc.n	800514c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800518c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <USB_HostInit+0x154>)
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <USB_HostInit+0x158>)
 80051ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80051b0:	e009      	b.n	80051c6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2280      	movs	r2, #128	; 0x80
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a10      	ldr	r2, [pc, #64]	; (80051fc <USB_HostInit+0x15c>)
 80051bc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a0f      	ldr	r2, [pc, #60]	; (8005200 <USB_HostInit+0x160>)
 80051c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f043 0210 	orr.w	r2, r3, #16
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <USB_HostInit+0x164>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051f0:	b004      	add	sp, #16
 80051f2:	4770      	bx	lr
 80051f4:	01000200 	.word	0x01000200
 80051f8:	00e00300 	.word	0x00e00300
 80051fc:	00600080 	.word	0x00600080
 8005200:	004000e0 	.word	0x004000e0
 8005204:	a3200008 	.word	0xa3200008

08005208 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	68f9      	ldr	r1, [r7, #12]
 800523c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005240:	4313      	orrs	r3, r2
 8005242:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d107      	bne.n	800525a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005250:	461a      	mov	r2, r3
 8005252:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005256:	6053      	str	r3, [r2, #4]
 8005258:	e009      	b.n	800526e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d106      	bne.n	800526e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005266:	461a      	mov	r2, r3
 8005268:	f241 7370 	movw	r3, #6000	; 0x1770
 800526c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800529c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80052ac:	2064      	movs	r0, #100	; 0x64
 80052ae:	f7fb fdc7 	bl	8000e40 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80052ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052be:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80052c0:	200a      	movs	r0, #10
 80052c2:	f7fb fdbd 	bl	8000e40 <HAL_Delay>

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d109      	bne.n	8005314 <USB_DriveVbus+0x44>
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d106      	bne.n	8005314 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800530e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005312:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531e:	d109      	bne.n	8005334 <USB_DriveVbus+0x64>
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800532e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005332:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	0c5b      	lsrs	r3, r3, #17
 8005360:	f003 0303 	and.w	r3, r3, #3
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	b29b      	uxth	r3, r3
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	4608      	mov	r0, r1
 800539e:	4611      	mov	r1, r2
 80053a0:	461a      	mov	r2, r3
 80053a2:	4603      	mov	r3, r0
 80053a4:	70fb      	strb	r3, [r7, #3]
 80053a6:	460b      	mov	r3, r1
 80053a8:	70bb      	strb	r3, [r7, #2]
 80053aa:	4613      	mov	r3, r2
 80053ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80053b6:	78fb      	ldrb	r3, [r7, #3]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c2:	461a      	mov	r2, r3
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80053ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d87e      	bhi.n	80054d0 <USB_HC_Init+0x13c>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <USB_HC_Init+0x44>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080053e9 	.word	0x080053e9
 80053dc:	08005493 	.word	0x08005493
 80053e0:	080053e9 	.word	0x080053e9
 80053e4:	08005455 	.word	0x08005455
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f4:	461a      	mov	r2, r3
 80053f6:	f240 439d 	movw	r3, #1181	; 0x49d
 80053fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80053fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005400:	2b00      	cmp	r3, #0
 8005402:	da10      	bge.n	8005426 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	4413      	add	r3, r2
 800540c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	440a      	add	r2, r1
 800541a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800541e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005422:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005424:	e057      	b.n	80054d6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542e:	2b00      	cmp	r3, #0
 8005430:	d051      	beq.n	80054d6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005432:	78fb      	ldrb	r3, [r7, #3]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4413      	add	r3, r2
 800543a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	78fa      	ldrb	r2, [r7, #3]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	440a      	add	r2, r1
 8005448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800544c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005450:	60d3      	str	r3, [r2, #12]
      break;
 8005452:	e040      	b.n	80054d6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	4413      	add	r3, r2
 800545c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005460:	461a      	mov	r2, r3
 8005462:	f240 639d 	movw	r3, #1693	; 0x69d
 8005466:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005468:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800546c:	2b00      	cmp	r3, #0
 800546e:	da34      	bge.n	80054da <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4413      	add	r3, r2
 8005478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	78fa      	ldrb	r2, [r7, #3]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	440a      	add	r2, r1
 8005486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800548a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800548e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005490:	e023      	b.n	80054da <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4413      	add	r3, r2
 800549a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549e:	461a      	mov	r2, r3
 80054a0:	f240 2325 	movw	r3, #549	; 0x225
 80054a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	da17      	bge.n	80054de <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80054ae:	78fb      	ldrb	r3, [r7, #3]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	78fa      	ldrb	r2, [r7, #3]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054c8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80054cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80054ce:	e006      	b.n	80054de <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	77fb      	strb	r3, [r7, #31]
      break;
 80054d4:	e004      	b.n	80054e0 <USB_HC_Init+0x14c>
      break;
 80054d6:	bf00      	nop
 80054d8:	e002      	b.n	80054e0 <USB_HC_Init+0x14c>
      break;
 80054da:	bf00      	nop
 80054dc:	e000      	b.n	80054e0 <USB_HC_Init+0x14c>
      break;
 80054de:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	2101      	movs	r1, #1
 80054f0:	fa01 f303 	lsl.w	r3, r1, r3
 80054f4:	6939      	ldr	r1, [r7, #16]
 80054f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054fa:	4313      	orrs	r3, r2
 80054fc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800550a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800550e:	2b00      	cmp	r3, #0
 8005510:	da03      	bge.n	800551a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	e001      	b.n	800551e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff ff0f 	bl	8005342 <USB_GetHostSpeed>
 8005524:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800552a:	2b02      	cmp	r3, #2
 800552c:	d106      	bne.n	800553c <USB_HC_Init+0x1a8>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d003      	beq.n	800553c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	e001      	b.n	8005540 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005540:	787b      	ldrb	r3, [r7, #1]
 8005542:	059b      	lsls	r3, r3, #22
 8005544:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005548:	78bb      	ldrb	r3, [r7, #2]
 800554a:	02db      	lsls	r3, r3, #11
 800554c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005550:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005552:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005556:	049b      	lsls	r3, r3, #18
 8005558:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800555c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800555e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005560:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005564:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	0159      	lsls	r1, r3, #5
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	440b      	add	r3, r1
 8005572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005576:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800557c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800557e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005582:	2b03      	cmp	r3, #3
 8005584:	d10f      	bne.n	80055a6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	440a      	add	r2, r1
 800559c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055a4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80055a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08c      	sub	sp, #48	; 0x30
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	4613      	mov	r3, r2
 80055bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80055c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d02d      	beq.n	8005636 <USB_HC_StartXfer+0x86>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	791b      	ldrb	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d129      	bne.n	8005636 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d117      	bne.n	8005618 <USB_HC_StartXfer+0x68>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	79db      	ldrb	r3, [r3, #7]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <USB_HC_StartXfer+0x48>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	79db      	ldrb	r3, [r3, #7]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d10f      	bne.n	8005618 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	6a3a      	ldr	r2, [r7, #32]
 800560c:	440a      	add	r2, r1
 800560e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005618:	79fb      	ldrb	r3, [r7, #7]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <USB_HC_StartXfer+0x86>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	795b      	ldrb	r3, [r3, #5]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d107      	bne.n	8005636 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	4619      	mov	r1, r3
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 fa2f 	bl	8005a90 <USB_DoPing>
      return HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	e0f8      	b.n	8005828 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d018      	beq.n	8005670 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	8912      	ldrh	r2, [r2, #8]
 8005646:	4413      	add	r3, r2
 8005648:	3b01      	subs	r3, #1
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	8912      	ldrh	r2, [r2, #8]
 800564e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005652:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005654:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005656:	8b7b      	ldrh	r3, [r7, #26]
 8005658:	429a      	cmp	r2, r3
 800565a:	d90b      	bls.n	8005674 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800565c:	8b7b      	ldrh	r3, [r7, #26]
 800565e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005660:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	8912      	ldrh	r2, [r2, #8]
 8005666:	fb02 f203 	mul.w	r2, r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	611a      	str	r2, [r3, #16]
 800566e:	e001      	b.n	8005674 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005670:	2301      	movs	r3, #1
 8005672:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	78db      	ldrb	r3, [r3, #3]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800567c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	8912      	ldrh	r2, [r2, #8]
 8005682:	fb02 f203 	mul.w	r2, r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	611a      	str	r2, [r3, #16]
 800568a:	e003      	b.n	8005694 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	695a      	ldr	r2, [r3, #20]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800569c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800569e:	04d9      	lsls	r1, r3, #19
 80056a0:	4b63      	ldr	r3, [pc, #396]	; (8005830 <USB_HC_StartXfer+0x280>)
 80056a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	7a9b      	ldrb	r3, [r3, #10]
 80056aa:	075b      	lsls	r3, r3, #29
 80056ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056b0:	69f9      	ldr	r1, [r7, #28]
 80056b2:	0148      	lsls	r0, r1, #5
 80056b4:	6a39      	ldr	r1, [r7, #32]
 80056b6:	4401      	add	r1, r0
 80056b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d009      	beq.n	80056da <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	68d9      	ldr	r1, [r3, #12]
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d6:	460a      	mov	r2, r1
 80056d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	440a      	add	r2, r1
 8005708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800570c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005710:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	4413      	add	r3, r2
 800571a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	7e7b      	ldrb	r3, [r7, #25]
 8005722:	075b      	lsls	r3, r3, #29
 8005724:	69f9      	ldr	r1, [r7, #28]
 8005726:	0148      	lsls	r0, r1, #5
 8005728:	6a39      	ldr	r1, [r7, #32]
 800572a:	4401      	add	r1, r0
 800572c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005730:	4313      	orrs	r3, r2
 8005732:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	4413      	add	r3, r2
 800573c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800574a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	78db      	ldrb	r3, [r3, #3]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	e003      	b.n	8005766 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005764:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800576c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577a:	461a      	mov	r2, r3
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	e04e      	b.n	8005828 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	78db      	ldrb	r3, [r3, #3]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d149      	bne.n	8005826 <USB_HC_StartXfer+0x276>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d045      	beq.n	8005826 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	79db      	ldrb	r3, [r3, #7]
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d830      	bhi.n	8005804 <USB_HC_StartXfer+0x254>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <USB_HC_StartXfer+0x1f8>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057b9 	.word	0x080057b9
 80057ac:	080057dd 	.word	0x080057dd
 80057b0:	080057b9 	.word	0x080057b9
 80057b4:	080057dd 	.word	0x080057dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	3303      	adds	r3, #3
 80057be:	089b      	lsrs	r3, r3, #2
 80057c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80057c2:	8afa      	ldrh	r2, [r7, #22]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d91c      	bls.n	8005808 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f043 0220 	orr.w	r2, r3, #32
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80057da:	e015      	b.n	8005808 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	3303      	adds	r3, #3
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80057e6:	8afa      	ldrh	r2, [r7, #22]
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d90a      	bls.n	800580c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	619a      	str	r2, [r3, #24]
        }
        break;
 8005802:	e003      	b.n	800580c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005804:	bf00      	nop
 8005806:	e002      	b.n	800580e <USB_HC_StartXfer+0x25e>
        break;
 8005808:	bf00      	nop
 800580a:	e000      	b.n	800580e <USB_HC_StartXfer+0x25e>
        break;
 800580c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	68d9      	ldr	r1, [r3, #12]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	785a      	ldrb	r2, [r3, #1]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	b29b      	uxth	r3, r3
 800581c:	2000      	movs	r0, #0
 800581e:	9000      	str	r0, [sp, #0]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff fb53 	bl	8004ecc <USB_WritePacket>
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3728      	adds	r7, #40	; 0x28
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	1ff80000 	.word	0x1ff80000

08005834 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	b29b      	uxth	r3, r3
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005856:	b480      	push	{r7}
 8005858:	b089      	sub	sp, #36	; 0x24
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	460b      	mov	r3, r1
 8005860:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	4413      	add	r3, r2
 8005876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	0c9b      	lsrs	r3, r3, #18
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	4413      	add	r3, r2
 800588c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	0fdb      	lsrs	r3, r3, #31
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d104      	bne.n	80058b0 <USB_HC_Halt+0x5a>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e0e8      	b.n	8005a82 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <USB_HC_Halt+0x66>
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d173      	bne.n	80059a4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f040 80cb 	bne.w	8005a80 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d143      	bne.n	800597e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	440a      	add	r2, r1
 800590c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005910:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005914:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	440a      	add	r2, r1
 800592c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005934:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	440a      	add	r2, r1
 800594c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005950:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005954:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	3301      	adds	r3, #1
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005962:	d81d      	bhi.n	80059a0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005976:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800597a:	d0ec      	beq.n	8005956 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800597c:	e080      	b.n	8005a80 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	440a      	add	r2, r1
 8005994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005998:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800599c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800599e:	e06f      	b.n	8005a80 <USB_HC_Halt+0x22a>
            break;
 80059a0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059a2:	e06d      	b.n	8005a80 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059c2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d143      	bne.n	8005a5c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a32:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	3301      	adds	r3, #1
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a40:	d81d      	bhi.n	8005a7e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a58:	d0ec      	beq.n	8005a34 <USB_HC_Halt+0x1de>
 8005a5a:	e011      	b.n	8005a80 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	0151      	lsls	r1, r2, #5
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	e000      	b.n	8005a80 <USB_HC_Halt+0x22a>
          break;
 8005a7e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3724      	adds	r7, #36	; 0x24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	04da      	lsls	r2, r3, #19
 8005aac:	4b15      	ldr	r3, [pc, #84]	; (8005b04 <USB_DoPing+0x74>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ac0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ad8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ae0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aee:	461a      	mov	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	1ff80000 	.word	0x1ff80000

08005b08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff f935 	bl	8004d88 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005b1e:	2110      	movs	r1, #16
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff f98f 	bl	8004e44 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff f9b0 	bl	8004e8c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	e01f      	b.n	8005b72 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b50:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b58:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b66:	461a      	mov	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b0f      	cmp	r3, #15
 8005b76:	d9dc      	bls.n	8005b32 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	e034      	b.n	8005be8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b94:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b9c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ba4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bc4:	d80c      	bhi.n	8005be0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bdc:	d0ec      	beq.n	8005bb8 <USB_StopHost+0xb0>
 8005bde:	e000      	b.n	8005be2 <USB_StopHost+0xda>
        break;
 8005be0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3301      	adds	r3, #1
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b0f      	cmp	r3, #15
 8005bec:	d9c7      	bls.n	8005b7e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bfa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c02:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff f8ae 	bl	8004d66 <USB_EnableGlobalInt>

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c14:	b590      	push	{r4, r7, lr}
 8005c16:	b089      	sub	sp, #36	; 0x24
 8005c18:	af04      	add	r7, sp, #16
 8005c1a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	2202      	movs	r2, #2
 8005c20:	2102      	movs	r1, #2
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fcb2 	bl	800658c <USBH_FindInterface>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	2bff      	cmp	r3, #255	; 0xff
 8005c30:	d002      	beq.n	8005c38 <USBH_CDC_InterfaceInit+0x24>
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d901      	bls.n	8005c3c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e13d      	b.n	8005eb8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fc87 	bl	8006554 <USBH_SelectInterface>
 8005c46:	4603      	mov	r3, r0
 8005c48:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005c4a:	7bbb      	ldrb	r3, [r7, #14]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005c50:	2302      	movs	r3, #2
 8005c52:	e131      	b.n	8005eb8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005c5a:	2050      	movs	r0, #80	; 0x50
 8005c5c:	f005 fbfc 	bl	800b458 <malloc>
 8005c60:	4603      	mov	r3, r0
 8005c62:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005c74:	2302      	movs	r3, #2
 8005c76:	e11f      	b.n	8005eb8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005c78:	2250      	movs	r2, #80	; 0x50
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	68b8      	ldr	r0, [r7, #8]
 8005c7e:	f005 fc09 	bl	800b494 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	211a      	movs	r1, #26
 8005c88:	fb01 f303 	mul.w	r3, r1, r3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	b25b      	sxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	da15      	bge.n	8005cc6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	211a      	movs	r1, #26
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005caa:	781a      	ldrb	r2, [r3, #0]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	211a      	movs	r1, #26
 8005cb6:	fb01 f303 	mul.w	r3, r1, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005cc0:	881a      	ldrh	r2, [r3, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f002 f88c 	bl	8007dea <USBH_AllocPipe>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	7819      	ldrb	r1, [r3, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	7858      	ldrb	r0, [r3, #1]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	8952      	ldrh	r2, [r2, #10]
 8005cf2:	9202      	str	r2, [sp, #8]
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	9201      	str	r2, [sp, #4]
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	4623      	mov	r3, r4
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f002 f844 	bl	8007d8c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f005 faf3 	bl	800b2f8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005d12:	2300      	movs	r3, #0
 8005d14:	2200      	movs	r2, #0
 8005d16:	210a      	movs	r1, #10
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fc37 	bl	800658c <USBH_FindInterface>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2bff      	cmp	r3, #255	; 0xff
 8005d26:	d002      	beq.n	8005d2e <USBH_CDC_InterfaceInit+0x11a>
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d901      	bls.n	8005d32 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e0c2      	b.n	8005eb8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	211a      	movs	r1, #26
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b25b      	sxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	da16      	bge.n	8005d78 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	211a      	movs	r1, #26
 8005d50:	fb01 f303 	mul.w	r3, r1, r3
 8005d54:	4413      	add	r3, r2
 8005d56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d5a:	781a      	ldrb	r2, [r3, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	211a      	movs	r1, #26
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d70:	881a      	ldrh	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	835a      	strh	r2, [r3, #26]
 8005d76:	e015      	b.n	8005da4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	211a      	movs	r1, #26
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
 8005d82:	4413      	add	r3, r2
 8005d84:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d88:	781a      	ldrb	r2, [r3, #0]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	211a      	movs	r1, #26
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d9e:	881a      	ldrh	r2, [r3, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	211a      	movs	r1, #26
 8005daa:	fb01 f303 	mul.w	r3, r1, r3
 8005dae:	4413      	add	r3, r2
 8005db0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	b25b      	sxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	da16      	bge.n	8005dea <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	211a      	movs	r1, #26
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	211a      	movs	r1, #26
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005de2:	881a      	ldrh	r2, [r3, #0]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	835a      	strh	r2, [r3, #26]
 8005de8:	e015      	b.n	8005e16 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	211a      	movs	r1, #26
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005dfa:	781a      	ldrb	r2, [r3, #0]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	211a      	movs	r1, #26
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e10:	881a      	ldrh	r2, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	7b9b      	ldrb	r3, [r3, #14]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f001 ffe4 	bl	8007dea <USBH_AllocPipe>
 8005e22:	4603      	mov	r3, r0
 8005e24:	461a      	mov	r2, r3
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	7bdb      	ldrb	r3, [r3, #15]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f001 ffda 	bl	8007dea <USBH_AllocPipe>
 8005e36:	4603      	mov	r3, r0
 8005e38:	461a      	mov	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	7b59      	ldrb	r1, [r3, #13]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	7b98      	ldrb	r0, [r3, #14]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	8b12      	ldrh	r2, [r2, #24]
 8005e56:	9202      	str	r2, [sp, #8]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	9201      	str	r2, [sp, #4]
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	4623      	mov	r3, r4
 8005e60:	4602      	mov	r2, r0
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f001 ff92 	bl	8007d8c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	7b19      	ldrb	r1, [r3, #12]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	7bd8      	ldrb	r0, [r3, #15]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	8b52      	ldrh	r2, [r2, #26]
 8005e80:	9202      	str	r2, [sp, #8]
 8005e82:	2202      	movs	r2, #2
 8005e84:	9201      	str	r2, [sp, #4]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	4623      	mov	r3, r4
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f001 ff7d 	bl	8007d8c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	7b5b      	ldrb	r3, [r3, #13]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f005 fa28 	bl	800b2f8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	7b1b      	ldrb	r3, [r3, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f005 fa21 	bl	800b2f8 <USBH_LL_SetToggle>

  return USBH_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd90      	pop	{r4, r7, pc}

08005ec0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00e      	beq.n	8005ef8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f001 ff72 	bl	8007dca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 ff9d 	bl	8007e2c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	7b1b      	ldrb	r3, [r3, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00e      	beq.n	8005f1e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	7b1b      	ldrb	r3, [r3, #12]
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 ff5f 	bl	8007dca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	7b1b      	ldrb	r3, [r3, #12]
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 ff8a 	bl	8007e2c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	7b5b      	ldrb	r3, [r3, #13]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00e      	beq.n	8005f44 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	7b5b      	ldrb	r3, [r3, #13]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 ff4c 	bl	8007dca <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	7b5b      	ldrb	r3, [r3, #13]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 ff77 	bl	8007e2c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f005 fa85 	bl	800b468 <free>
    phost->pActiveClass->pData = 0U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f64:	2200      	movs	r2, #0
 8005f66:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3340      	adds	r3, #64	; 0x40
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f8b1 	bl	80060f2 <GetLineCoding>
 8005f90:	4603      	mov	r3, r0
 8005f92:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005f94:	7afb      	ldrb	r3, [r7, #11]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d105      	bne.n	8005fa6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d877      	bhi.n	80060c4 <USBH_CDC_Process+0x114>
 8005fd4:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <USBH_CDC_Process+0x2c>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08005ff1 	.word	0x08005ff1
 8005fe0:	08005ff7 	.word	0x08005ff7
 8005fe4:	08006027 	.word	0x08006027
 8005fe8:	0800609b 	.word	0x0800609b
 8005fec:	080060a9 	.word	0x080060a9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff4:	e06d      	b.n	80060d2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f897 	bl	8006130 <SetLineCoding>
 8006002:	4603      	mov	r3, r0
 8006004:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006014:	e058      	b.n	80060c8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006016:	7bbb      	ldrb	r3, [r7, #14]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d055      	beq.n	80060c8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2204      	movs	r2, #4
 8006020:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006024:	e050      	b.n	80060c8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	3340      	adds	r3, #64	; 0x40
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f860 	bl	80060f2 <GetLineCoding>
 8006032:	4603      	mov	r3, r0
 8006034:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d126      	bne.n	800608a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604e:	791b      	ldrb	r3, [r3, #4]
 8006050:	429a      	cmp	r2, r3
 8006052:	d13b      	bne.n	80060cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006060:	429a      	cmp	r2, r3
 8006062:	d133      	bne.n	80060cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006070:	429a      	cmp	r2, r3
 8006072:	d12b      	bne.n	80060cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800607c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800607e:	429a      	cmp	r2, r3
 8006080:	d124      	bne.n	80060cc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f982 	bl	800638c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006088:	e020      	b.n	80060cc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800608a:	7bbb      	ldrb	r3, [r7, #14]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d01d      	beq.n	80060cc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2204      	movs	r2, #4
 8006094:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006098:	e018      	b.n	80060cc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f867 	bl	800616e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f8f6 	bl	8006292 <CDC_ProcessReception>
      break;
 80060a6:	e014      	b.n	80060d2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80060a8:	2100      	movs	r1, #0
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 f94d 	bl	800734a <USBH_ClrFeature>
 80060b0:	4603      	mov	r3, r0
 80060b2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80060c2:	e005      	b.n	80060d0 <USBH_CDC_Process+0x120>

    default:
      break;
 80060c4:	bf00      	nop
 80060c6:	e004      	b.n	80060d2 <USBH_CDC_Process+0x122>
      break;
 80060c8:	bf00      	nop
 80060ca:	e002      	b.n	80060d2 <USBH_CDC_Process+0x122>
      break;
 80060cc:	bf00      	nop
 80060ce:	e000      	b.n	80060d2 <USBH_CDC_Process+0x122>
      break;
 80060d0:	bf00      	nop

  }

  return status;
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b082      	sub	sp, #8
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	22a1      	movs	r2, #161	; 0xa1
 8006100:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2221      	movs	r2, #33	; 0x21
 8006106:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2207      	movs	r2, #7
 8006118:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2207      	movs	r2, #7
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 faf2 	bl	800770a <USBH_CtlReq>
 8006126:	4603      	mov	r3, r0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2221      	movs	r2, #33	; 0x21
 800613e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2207      	movs	r2, #7
 8006156:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2207      	movs	r2, #7
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f001 fad3 	bl	800770a <USBH_CtlReq>
 8006164:	4603      	mov	r3, r0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b086      	sub	sp, #24
 8006172:	af02      	add	r7, sp, #8
 8006174:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006180:	2300      	movs	r3, #0
 8006182:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800618a:	2b01      	cmp	r3, #1
 800618c:	d002      	beq.n	8006194 <CDC_ProcessTransmission+0x26>
 800618e:	2b02      	cmp	r3, #2
 8006190:	d023      	beq.n	80061da <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006192:	e07a      	b.n	800628a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	8b12      	ldrh	r2, [r2, #24]
 800619c:	4293      	cmp	r3, r2
 800619e:	d90b      	bls.n	80061b8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	69d9      	ldr	r1, [r3, #28]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8b1a      	ldrh	r2, [r3, #24]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	7b5b      	ldrb	r3, [r3, #13]
 80061ac:	2001      	movs	r0, #1
 80061ae:	9000      	str	r0, [sp, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fda8 	bl	8007d06 <USBH_BulkSendData>
 80061b6:	e00b      	b.n	80061d0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	7b5b      	ldrb	r3, [r3, #13]
 80061c6:	2001      	movs	r0, #1
 80061c8:	9000      	str	r0, [sp, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 fd9b 	bl	8007d06 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80061d8:	e057      	b.n	800628a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	7b5b      	ldrb	r3, [r3, #13]
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f005 f85f 	bl	800b2a4 <USBH_LL_GetURBState>
 80061e6:	4603      	mov	r3, r0
 80061e8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d136      	bne.n	800625e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	8b12      	ldrh	r2, [r2, #24]
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d90e      	bls.n	800621a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	8b12      	ldrh	r2, [r2, #24]
 8006204:	1a9a      	subs	r2, r3, r2
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	8b12      	ldrh	r2, [r2, #24]
 8006212:	441a      	add	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	61da      	str	r2, [r3, #28]
 8006218:	e002      	b.n	8006220 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006230:	e006      	b.n	8006240 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f892 	bl	8006364 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2204      	movs	r2, #4
 8006244:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006254:	2300      	movs	r3, #0
 8006256:	2200      	movs	r2, #0
 8006258:	f001 ffd8 	bl	800820c <osMessageQueuePut>
      break;
 800625c:	e014      	b.n	8006288 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800625e:	7afb      	ldrb	r3, [r7, #11]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d111      	bne.n	8006288 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2204      	movs	r2, #4
 8006270:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006280:	2300      	movs	r3, #0
 8006282:	2200      	movs	r2, #0
 8006284:	f001 ffc2 	bl	800820c <osMessageQueuePut>
      break;
 8006288:	bf00      	nop
  }
}
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b086      	sub	sp, #24
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062a4:	2300      	movs	r3, #0
 80062a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d002      	beq.n	80062b8 <CDC_ProcessReception+0x26>
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d00e      	beq.n	80062d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80062b6:	e051      	b.n	800635c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	6a19      	ldr	r1, [r3, #32]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	8b5a      	ldrh	r2, [r3, #26]
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	7b1b      	ldrb	r3, [r3, #12]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f001 fd43 	bl	8007d50 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2204      	movs	r2, #4
 80062ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80062d2:	e043      	b.n	800635c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	7b1b      	ldrb	r3, [r3, #12]
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f004 ffe2 	bl	800b2a4 <USBH_LL_GetURBState>
 80062e0:	4603      	mov	r3, r0
 80062e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80062e4:	7cfb      	ldrb	r3, [r7, #19]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d137      	bne.n	800635a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	7b1b      	ldrb	r3, [r3, #12]
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f004 ff45 	bl	800b180 <USBH_LL_GetLastXferSize>
 80062f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d016      	beq.n	8006330 <CDC_ProcessReception+0x9e>
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	8b5b      	ldrh	r3, [r3, #26]
 8006306:	461a      	mov	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4293      	cmp	r3, r2
 800630c:	d910      	bls.n	8006330 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1ad2      	subs	r2, r2, r3
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	6a1a      	ldr	r2, [r3, #32]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	441a      	add	r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2203      	movs	r2, #3
 800632a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800632e:	e006      	b.n	800633e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f81d 	bl	8006378 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2204      	movs	r2, #4
 8006342:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006352:	2300      	movs	r3, #0
 8006354:	2200      	movs	r2, #0
 8006356:	f001 ff59 	bl	800820c <osMessageQueuePut>
      break;
 800635a:	bf00      	nop
  }
}
 800635c:	bf00      	nop
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80063b4:	2302      	movs	r3, #2
 80063b6:	e044      	b.n	8006442 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	79fa      	ldrb	r2, [r7, #7]
 80063bc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f841 	bl	8006458 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006404:	2200      	movs	r2, #0
 8006406:	2104      	movs	r1, #4
 8006408:	2010      	movs	r0, #16
 800640a:	f001 fe8c 	bl	8008126 <osMessageQueueNew>
 800640e:	4602      	mov	r2, r0
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006416:	4b0d      	ldr	r3, [pc, #52]	; (800644c <USBH_Init+0xac>)
 8006418:	4a0d      	ldr	r2, [pc, #52]	; (8006450 <USBH_Init+0xb0>)
 800641a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800641c:	4b0b      	ldr	r3, [pc, #44]	; (800644c <USBH_Init+0xac>)
 800641e:	2280      	movs	r2, #128	; 0x80
 8006420:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006422:	4b0a      	ldr	r3, [pc, #40]	; (800644c <USBH_Init+0xac>)
 8006424:	2218      	movs	r2, #24
 8006426:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006428:	4a08      	ldr	r2, [pc, #32]	; (800644c <USBH_Init+0xac>)
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	4809      	ldr	r0, [pc, #36]	; (8006454 <USBH_Init+0xb4>)
 800642e:	f001 fdcd 	bl	8007fcc <osThreadNew>
 8006432:	4602      	mov	r2, r0
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f004 fdec 	bl	800b018 <USBH_LL_Init>

  return USBH_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20004bd4 	.word	0x20004bd4
 8006450:	0800b72c 	.word	0x0800b72c
 8006454:	080070c1 	.word	0x080070c1

08006458 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006464:	2300      	movs	r3, #0
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	e009      	b.n	800647e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	33e0      	adds	r3, #224	; 0xe0
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	2200      	movs	r2, #0
 8006476:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b0e      	cmp	r3, #14
 8006482:	d9f2      	bls.n	800646a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006484:	2300      	movs	r3, #0
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	e009      	b.n	800649e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006494:	2200      	movs	r2, #0
 8006496:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a4:	d3f1      	bcc.n	800648a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2240      	movs	r2, #64	; 0x40
 80064ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d016      	beq.n	8006542 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10e      	bne.n	800653c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006524:	1c59      	adds	r1, r3, #1
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	33de      	adds	r3, #222	; 0xde
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	73fb      	strb	r3, [r7, #15]
 800653a:	e004      	b.n	8006546 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800653c:	2302      	movs	r3, #2
 800653e:	73fb      	strb	r3, [r7, #15]
 8006540:	e001      	b.n	8006546 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006542:	2302      	movs	r3, #2
 8006544:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006546:	7bfb      	ldrb	r3, [r7, #15]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800656a:	78fa      	ldrb	r2, [r7, #3]
 800656c:	429a      	cmp	r2, r3
 800656e:	d204      	bcs.n	800657a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	78fa      	ldrb	r2, [r7, #3]
 8006574:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006578:	e001      	b.n	800657e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800657a:	2302      	movs	r3, #2
 800657c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	4608      	mov	r0, r1
 8006596:	4611      	mov	r1, r2
 8006598:	461a      	mov	r2, r3
 800659a:	4603      	mov	r3, r0
 800659c:	70fb      	strb	r3, [r7, #3]
 800659e:	460b      	mov	r3, r1
 80065a0:	70bb      	strb	r3, [r7, #2]
 80065a2:	4613      	mov	r3, r2
 80065a4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80065b4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065b6:	e025      	b.n	8006604 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80065b8:	7dfb      	ldrb	r3, [r7, #23]
 80065ba:	221a      	movs	r2, #26
 80065bc:	fb02 f303 	mul.w	r3, r2, r3
 80065c0:	3308      	adds	r3, #8
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4413      	add	r3, r2
 80065c6:	3302      	adds	r3, #2
 80065c8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	795b      	ldrb	r3, [r3, #5]
 80065ce:	78fa      	ldrb	r2, [r7, #3]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d002      	beq.n	80065da <USBH_FindInterface+0x4e>
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	2bff      	cmp	r3, #255	; 0xff
 80065d8:	d111      	bne.n	80065fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065de:	78ba      	ldrb	r2, [r7, #2]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d002      	beq.n	80065ea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065e4:	78bb      	ldrb	r3, [r7, #2]
 80065e6:	2bff      	cmp	r3, #255	; 0xff
 80065e8:	d109      	bne.n	80065fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065ee:	787a      	ldrb	r2, [r7, #1]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d002      	beq.n	80065fa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065f4:	787b      	ldrb	r3, [r7, #1]
 80065f6:	2bff      	cmp	r3, #255	; 0xff
 80065f8:	d101      	bne.n	80065fe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	e006      	b.n	800660c <USBH_FindInterface+0x80>
    }
    if_ix++;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	3301      	adds	r3, #1
 8006602:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006604:	7dfb      	ldrb	r3, [r7, #23]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d9d6      	bls.n	80065b8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800660a:	23ff      	movs	r3, #255	; 0xff
}
 800660c:	4618      	mov	r0, r3
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f004 fd35 	bl	800b090 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006626:	2101      	movs	r1, #1
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f004 fe4e 	bl	800b2ca <USBH_LL_DriverVBUS>

  return USBH_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af04      	add	r7, sp, #16
 800663e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006640:	2302      	movs	r3, #2
 8006642:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	d102      	bne.n	800665a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2203      	movs	r2, #3
 8006658:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b0b      	cmp	r3, #11
 8006662:	f200 823c 	bhi.w	8006ade <USBH_Process+0x4a6>
 8006666:	a201      	add	r2, pc, #4	; (adr r2, 800666c <USBH_Process+0x34>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	0800669d 	.word	0x0800669d
 8006670:	080066eb 	.word	0x080066eb
 8006674:	0800676f 	.word	0x0800676f
 8006678:	08006a5d 	.word	0x08006a5d
 800667c:	08006adf 	.word	0x08006adf
 8006680:	0800682f 	.word	0x0800682f
 8006684:	080069e7 	.word	0x080069e7
 8006688:	08006881 	.word	0x08006881
 800668c:	080068bd 	.word	0x080068bd
 8006690:	080068f7 	.word	0x080068f7
 8006694:	0800693f 	.word	0x0800693f
 8006698:	08006a45 	.word	0x08006a45
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 821c 	beq.w	8006ae2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80066b0:	20c8      	movs	r0, #200	; 0xc8
 80066b2:	f004 fe51 	bl	800b358 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f004 fd47 	bl	800b14a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80066e0:	2300      	movs	r3, #0
 80066e2:	2200      	movs	r2, #0
 80066e4:	f001 fd92 	bl	800820c <osMessageQueuePut>
#endif
#endif
      }
      break;
 80066e8:	e1fb      	b.n	8006ae2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d107      	bne.n	8006704 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	701a      	strb	r2, [r3, #0]
 8006702:	e025      	b.n	8006750 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800670a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800670e:	d914      	bls.n	800673a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006716:	3301      	adds	r3, #1
 8006718:	b2da      	uxtb	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006726:	2b03      	cmp	r3, #3
 8006728:	d903      	bls.n	8006732 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	220d      	movs	r2, #13
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	e00e      	b.n	8006750 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	e00a      	b.n	8006750 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006740:	f103 020a 	add.w	r2, r3, #10
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800674a:	200a      	movs	r0, #10
 800674c:	f004 fe04 	bl	800b358 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006764:	2300      	movs	r3, #0
 8006766:	2200      	movs	r2, #0
 8006768:	f001 fd50 	bl	800820c <osMessageQueuePut>
#endif
#endif
      break;
 800676c:	e1c0      	b.n	8006af0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800677e:	2104      	movs	r1, #4
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006784:	2064      	movs	r0, #100	; 0x64
 8006786:	f004 fde7 	bl	800b358 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f004 fcb6 	bl	800b0fc <USBH_LL_GetSpeed>
 8006790:	4603      	mov	r3, r0
 8006792:	461a      	mov	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2205      	movs	r2, #5
 800679e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80067a0:	2100      	movs	r1, #0
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 fb21 	bl	8007dea <USBH_AllocPipe>
 80067a8:	4603      	mov	r3, r0
 80067aa:	461a      	mov	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 fb19 	bl	8007dea <USBH_AllocPipe>
 80067b8:	4603      	mov	r3, r0
 80067ba:	461a      	mov	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	7919      	ldrb	r1, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80067d4:	b292      	uxth	r2, r2
 80067d6:	9202      	str	r2, [sp, #8]
 80067d8:	2200      	movs	r2, #0
 80067da:	9201      	str	r2, [sp, #4]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	4603      	mov	r3, r0
 80067e0:	2280      	movs	r2, #128	; 0x80
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f001 fad2 	bl	8007d8c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	7959      	ldrb	r1, [r3, #5]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80067fc:	b292      	uxth	r2, r2
 80067fe:	9202      	str	r2, [sp, #8]
 8006800:	2200      	movs	r2, #0
 8006802:	9201      	str	r2, [sp, #4]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	4603      	mov	r3, r0
 8006808:	2200      	movs	r2, #0
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 fabe 	bl	8007d8c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006824:	2300      	movs	r3, #0
 8006826:	2200      	movs	r2, #0
 8006828:	f001 fcf0 	bl	800820c <osMessageQueuePut>
#endif
#endif
      break;
 800682c:	e160      	b.n	8006af0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f964 	bl	8006afc <USBH_HandleEnum>
 8006834:	4603      	mov	r3, r0
 8006836:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006838:	7bbb      	ldrb	r3, [r7, #14]
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	f040 8152 	bne.w	8006ae6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006850:	2b01      	cmp	r3, #1
 8006852:	d103      	bne.n	800685c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2208      	movs	r2, #8
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	e002      	b.n	8006862 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2207      	movs	r2, #7
 8006860:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2205      	movs	r2, #5
 8006866:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006876:	2300      	movs	r3, #0
 8006878:	2200      	movs	r2, #0
 800687a:	f001 fcc7 	bl	800820c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800687e:	e132      	b.n	8006ae6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 812f 	beq.w	8006aea <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006892:	2101      	movs	r1, #1
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2208      	movs	r2, #8
 800689c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2205      	movs	r2, #5
 80068a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068b2:	2300      	movs	r3, #0
 80068b4:	2200      	movs	r2, #0
 80068b6:	f001 fca9 	bl	800820c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80068ba:	e116      	b.n	8006aea <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fcf8 	bl	80072bc <USBH_SetCfg>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d102      	bne.n	80068d8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2209      	movs	r2, #9
 80068d6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80068ec:	2300      	movs	r3, #0
 80068ee:	2200      	movs	r2, #0
 80068f0:	f001 fc8c 	bl	800820c <osMessageQueuePut>
#endif
#endif
      break;
 80068f4:	e0fc      	b.n	8006af0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00a      	beq.n	800691a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006904:	2101      	movs	r1, #1
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fcfb 	bl	8007302 <USBH_SetFeature>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	220a      	movs	r2, #10
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	e002      	b.n	8006920 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	220a      	movs	r2, #10
 800691e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006934:	2300      	movs	r3, #0
 8006936:	2200      	movs	r2, #0
 8006938:	f001 fc68 	bl	800820c <osMessageQueuePut>
#endif
#endif
      break;
 800693c:	e0d8      	b.n	8006af0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006944:	2b00      	cmp	r3, #0
 8006946:	d03f      	beq.n	80069c8 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006950:	2300      	movs	r3, #0
 8006952:	73fb      	strb	r3, [r7, #15]
 8006954:	e016      	b.n	8006984 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006956:	7bfa      	ldrb	r2, [r7, #15]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	32de      	adds	r2, #222	; 0xde
 800695c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006960:	791a      	ldrb	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006968:	429a      	cmp	r2, r3
 800696a:	d108      	bne.n	800697e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800696c:	7bfa      	ldrb	r2, [r7, #15]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	32de      	adds	r2, #222	; 0xde
 8006972:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800697c:	e005      	b.n	800698a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	3301      	adds	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0e5      	beq.n	8006956 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d016      	beq.n	80069c2 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	4798      	blx	r3
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d109      	bne.n	80069ba <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2206      	movs	r2, #6
 80069aa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069b2:	2103      	movs	r1, #3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
 80069b8:	e006      	b.n	80069c8 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	220d      	movs	r2, #13
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	e002      	b.n	80069c8 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	220d      	movs	r2, #13
 80069c6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2205      	movs	r2, #5
 80069cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80069dc:	2300      	movs	r3, #0
 80069de:	2200      	movs	r2, #0
 80069e0:	f001 fc14 	bl	800820c <osMessageQueuePut>
#endif
#endif
      break;
 80069e4:	e084      	b.n	8006af0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d017      	beq.n	8006a20 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	4798      	blx	r3
 80069fc:	4603      	mov	r3, r0
 80069fe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d103      	bne.n	8006a10 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	220b      	movs	r2, #11
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	e00a      	b.n	8006a26 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d106      	bne.n	8006a26 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	220d      	movs	r2, #13
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	e002      	b.n	8006a26 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	220d      	movs	r2, #13
 8006a24:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2205      	movs	r2, #5
 8006a2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f001 fbe5 	bl	800820c <osMessageQueuePut>
#endif
#endif
      break;
 8006a42:	e055      	b.n	8006af0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d04f      	beq.n	8006aee <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	4798      	blx	r3
      }
      break;
 8006a5a:	e048      	b.n	8006aee <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff fcf7 	bl	8006458 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d009      	beq.n	8006a88 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a98:	2105      	movs	r1, #5
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d107      	bne.n	8006aba <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff fdb0 	bl	8006618 <USBH_Start>
 8006ab8:	e002      	b.n	8006ac0 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f004 fae8 	bl	800b090 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f001 fb98 	bl	800820c <osMessageQueuePut>
#endif
#endif
      break;
 8006adc:	e008      	b.n	8006af0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ade:	bf00      	nop
 8006ae0:	e006      	b.n	8006af0 <USBH_Process+0x4b8>
      break;
 8006ae2:	bf00      	nop
 8006ae4:	e004      	b.n	8006af0 <USBH_Process+0x4b8>
      break;
 8006ae6:	bf00      	nop
 8006ae8:	e002      	b.n	8006af0 <USBH_Process+0x4b8>
    break;
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <USBH_Process+0x4b8>
      break;
 8006aee:	bf00      	nop
  }
  return USBH_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop

08006afc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af04      	add	r7, sp, #16
 8006b02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b04:	2301      	movs	r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b07      	cmp	r3, #7
 8006b12:	f200 8208 	bhi.w	8006f26 <USBH_HandleEnum+0x42a>
 8006b16:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <USBH_HandleEnum+0x20>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b3d 	.word	0x08006b3d
 8006b20:	08006bfb 	.word	0x08006bfb
 8006b24:	08006c65 	.word	0x08006c65
 8006b28:	08006cf3 	.word	0x08006cf3
 8006b2c:	08006d5d 	.word	0x08006d5d
 8006b30:	08006dcd 	.word	0x08006dcd
 8006b34:	08006e69 	.word	0x08006e69
 8006b38:	08006ee7 	.word	0x08006ee7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006b3c:	2108      	movs	r1, #8
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 faec 	bl	800711c <USBH_Get_DevDesc>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d130      	bne.n	8006bb0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7919      	ldrb	r1, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b72:	b292      	uxth	r2, r2
 8006b74:	9202      	str	r2, [sp, #8]
 8006b76:	2200      	movs	r2, #0
 8006b78:	9201      	str	r2, [sp, #4]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2280      	movs	r2, #128	; 0x80
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f903 	bl	8007d8c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	7959      	ldrb	r1, [r3, #5]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b9a:	b292      	uxth	r2, r2
 8006b9c:	9202      	str	r2, [sp, #8]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	9201      	str	r2, [sp, #4]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 f8ef 	bl	8007d8c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006bae:	e1bc      	b.n	8006f2a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	f040 81b9 	bne.w	8006f2a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d903      	bls.n	8006bda <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	220d      	movs	r2, #13
 8006bd6:	701a      	strb	r2, [r3, #0]
      break;
 8006bd8:	e1a7      	b.n	8006f2a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	795b      	ldrb	r3, [r3, #5]
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f923 	bl	8007e2c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	791b      	ldrb	r3, [r3, #4]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 f91d 	bl	8007e2c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
      break;
 8006bf8:	e197      	b.n	8006f2a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006bfa:	2112      	movs	r1, #18
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa8d 	bl	800711c <USBH_Get_DevDesc>
 8006c02:	4603      	mov	r3, r0
 8006c04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d103      	bne.n	8006c14 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c12:	e18c      	b.n	8006f2e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	f040 8189 	bne.w	8006f2e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c22:	3301      	adds	r3, #1
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d903      	bls.n	8006c3e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	220d      	movs	r2, #13
 8006c3a:	701a      	strb	r2, [r3, #0]
      break;
 8006c3c:	e177      	b.n	8006f2e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	795b      	ldrb	r3, [r3, #5]
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 f8f1 	bl	8007e2c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	791b      	ldrb	r3, [r3, #4]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 f8eb 	bl	8007e2c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
      break;
 8006c62:	e164      	b.n	8006f2e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006c64:	2101      	movs	r1, #1
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fb04 	bl	8007274 <USBH_SetAddress>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d132      	bne.n	8006cdc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006c76:	2002      	movs	r0, #2
 8006c78:	f004 fb6e 	bl	800b358 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2203      	movs	r2, #3
 8006c88:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	7919      	ldrb	r1, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c9e:	b292      	uxth	r2, r2
 8006ca0:	9202      	str	r2, [sp, #8]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	9201      	str	r2, [sp, #4]
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2280      	movs	r2, #128	; 0x80
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 f86d 	bl	8007d8c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	7959      	ldrb	r1, [r3, #5]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cc6:	b292      	uxth	r2, r2
 8006cc8:	9202      	str	r2, [sp, #8]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	9201      	str	r2, [sp, #4]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 f859 	bl	8007d8c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006cda:	e12a      	b.n	8006f32 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	f040 8127 	bne.w	8006f32 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	220d      	movs	r2, #13
 8006ce8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	705a      	strb	r2, [r3, #1]
      break;
 8006cf0:	e11f      	b.n	8006f32 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006cf2:	2109      	movs	r1, #9
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fa39 	bl	800716c <USBH_Get_CfgDesc>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cfe:	7bbb      	ldrb	r3, [r7, #14]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d103      	bne.n	8006d0c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2204      	movs	r2, #4
 8006d08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d0a:	e114      	b.n	8006f36 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	f040 8111 	bne.w	8006f36 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d903      	bls.n	8006d36 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	220d      	movs	r2, #13
 8006d32:	701a      	strb	r2, [r3, #0]
      break;
 8006d34:	e0ff      	b.n	8006f36 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	795b      	ldrb	r3, [r3, #5]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 f875 	bl	8007e2c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	791b      	ldrb	r3, [r3, #4]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 f86f 	bl	8007e2c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	701a      	strb	r2, [r3, #0]
      break;
 8006d5a:	e0ec      	b.n	8006f36 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fa01 	bl	800716c <USBH_Get_CfgDesc>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d103      	bne.n	8006d7c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2205      	movs	r2, #5
 8006d78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d7a:	e0de      	b.n	8006f3a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	f040 80db 	bne.w	8006f3a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d903      	bls.n	8006da6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	220d      	movs	r2, #13
 8006da2:	701a      	strb	r2, [r3, #0]
      break;
 8006da4:	e0c9      	b.n	8006f3a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	795b      	ldrb	r3, [r3, #5]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 f83d 	bl	8007e2c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	791b      	ldrb	r3, [r3, #4]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 f837 	bl	8007e2c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
      break;
 8006dca:	e0b6      	b.n	8006f3a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d036      	beq.n	8006e44 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006de2:	23ff      	movs	r3, #255	; 0xff
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f9e5 	bl	80071b4 <USBH_Get_StringDesc>
 8006dea:	4603      	mov	r3, r0
 8006dec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d111      	bne.n	8006e18 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2206      	movs	r2, #6
 8006df8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2205      	movs	r2, #5
 8006dfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2200      	movs	r2, #0
 8006e12:	f001 f9fb 	bl	800820c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e16:	e092      	b.n	8006f3e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	f040 808f 	bne.w	8006f3e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2206      	movs	r2, #6
 8006e24:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2205      	movs	r2, #5
 8006e2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f001 f9e5 	bl	800820c <osMessageQueuePut>
      break;
 8006e42:	e07c      	b.n	8006f3e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2206      	movs	r2, #6
 8006e48:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2205      	movs	r2, #5
 8006e4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2200      	movs	r2, #0
 8006e62:	f001 f9d3 	bl	800820c <osMessageQueuePut>
      break;
 8006e66:	e06a      	b.n	8006f3e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d027      	beq.n	8006ec2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e7e:	23ff      	movs	r3, #255	; 0xff
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f997 	bl	80071b4 <USBH_Get_StringDesc>
 8006e86:	4603      	mov	r3, r0
 8006e88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d103      	bne.n	8006e98 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2207      	movs	r2, #7
 8006e94:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e96:	e054      	b.n	8006f42 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d151      	bne.n	8006f42 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2207      	movs	r2, #7
 8006ea2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2205      	movs	r2, #5
 8006ea8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006eb8:	2300      	movs	r3, #0
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f001 f9a6 	bl	800820c <osMessageQueuePut>
      break;
 8006ec0:	e03f      	b.n	8006f42 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2205      	movs	r2, #5
 8006ecc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006edc:	2300      	movs	r3, #0
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f001 f994 	bl	800820c <osMessageQueuePut>
      break;
 8006ee4:	e02d      	b.n	8006f42 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d017      	beq.n	8006f20 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006efc:	23ff      	movs	r3, #255	; 0xff
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f958 	bl	80071b4 <USBH_Get_StringDesc>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d102      	bne.n	8006f14 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006f12:	e018      	b.n	8006f46 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d115      	bne.n	8006f46 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f1e:	e012      	b.n	8006f46 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	73fb      	strb	r3, [r7, #15]
      break;
 8006f24:	e00f      	b.n	8006f46 <USBH_HandleEnum+0x44a>

    default:
      break;
 8006f26:	bf00      	nop
 8006f28:	e00e      	b.n	8006f48 <USBH_HandleEnum+0x44c>
      break;
 8006f2a:	bf00      	nop
 8006f2c:	e00c      	b.n	8006f48 <USBH_HandleEnum+0x44c>
      break;
 8006f2e:	bf00      	nop
 8006f30:	e00a      	b.n	8006f48 <USBH_HandleEnum+0x44c>
      break;
 8006f32:	bf00      	nop
 8006f34:	e008      	b.n	8006f48 <USBH_HandleEnum+0x44c>
      break;
 8006f36:	bf00      	nop
 8006f38:	e006      	b.n	8006f48 <USBH_HandleEnum+0x44c>
      break;
 8006f3a:	bf00      	nop
 8006f3c:	e004      	b.n	8006f48 <USBH_HandleEnum+0x44c>
      break;
 8006f3e:	bf00      	nop
 8006f40:	e002      	b.n	8006f48 <USBH_HandleEnum+0x44c>
      break;
 8006f42:	bf00      	nop
 8006f44:	e000      	b.n	8006f48 <USBH_HandleEnum+0x44c>
      break;
 8006f46:	bf00      	nop
  }
  return Status;
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop

08006f54 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f804 	bl	8006f96 <USBH_HandleSof>
}
 8006f8e:	bf00      	nop
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b0b      	cmp	r3, #11
 8006fa6:	d10a      	bne.n	8006fbe <USBH_HandleSof+0x28>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	4798      	blx	r3
  }
}
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b082      	sub	sp, #8
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006fea:	2300      	movs	r3, #0
 8006fec:	2200      	movs	r2, #0
 8006fee:	f001 f90d 	bl	800820c <osMessageQueuePut>
#endif
#endif

  return;
 8006ff2:	bf00      	nop
}
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800700a:	bf00      	nop
}
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800704a:	2300      	movs	r3, #0
 800704c:	2200      	movs	r2, #0
 800704e:	f001 f8dd 	bl	800820c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f004 f822 	bl	800b0c6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	791b      	ldrb	r3, [r3, #4]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fecf 	bl	8007e2c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	795b      	ldrb	r3, [r3, #5]
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fec9 	bl	8007e2c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80070ae:	2300      	movs	r3, #0
 80070b0:	2200      	movs	r2, #0
 80070b2:	f001 f8ab 	bl	800820c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80070d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070d8:	2200      	movs	r2, #0
 80070da:	f001 f8f7 	bl	80082cc <osMessageQueueGet>
 80070de:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f0      	bne.n	80070c8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff faa6 	bl	8006638 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80070ec:	e7ec      	b.n	80070c8 <USBH_Process_OS+0x8>

080070ee <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800710a:	2300      	movs	r3, #0
 800710c:	2200      	movs	r2, #0
 800710e:	f001 f87d 	bl	800820c <osMessageQueuePut>
#endif

  return USBH_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af02      	add	r7, sp, #8
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	b29b      	uxth	r3, r3
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	4613      	mov	r3, r2
 8007136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800713a:	2100      	movs	r1, #0
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f864 	bl	800720a <USBH_GetDescriptor>
 8007142:	4603      	mov	r3, r0
 8007144:	73fb      	strb	r3, [r7, #15]
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007158:	78fa      	ldrb	r2, [r7, #3]
 800715a:	b292      	uxth	r2, r2
 800715c:	4619      	mov	r1, r3
 800715e:	f000 f918 	bl	8007392 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af02      	add	r7, sp, #8
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	331c      	adds	r3, #28
 800717c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800717e:	887b      	ldrh	r3, [r7, #2]
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007188:	2100      	movs	r1, #0
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f83d 	bl	800720a <USBH_GetDescriptor>
 8007190:	4603      	mov	r3, r0
 8007192:	72fb      	strb	r3, [r7, #11]
 8007194:	7afb      	ldrb	r3, [r7, #11]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d107      	bne.n	80071aa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071a0:	887a      	ldrh	r2, [r7, #2]
 80071a2:	68f9      	ldr	r1, [r7, #12]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 f964 	bl	8007472 <USBH_ParseCfgDesc>
  }

  return status;
 80071aa:	7afb      	ldrb	r3, [r7, #11]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	607a      	str	r2, [r7, #4]
 80071be:	461a      	mov	r2, r3
 80071c0:	460b      	mov	r3, r1
 80071c2:	72fb      	strb	r3, [r7, #11]
 80071c4:	4613      	mov	r3, r2
 80071c6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80071d0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80071d8:	893b      	ldrh	r3, [r7, #8]
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	460b      	mov	r3, r1
 80071de:	2100      	movs	r1, #0
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 f812 	bl	800720a <USBH_GetDescriptor>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d107      	bne.n	8007200 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071f6:	893a      	ldrh	r2, [r7, #8]
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fa37 	bl	800766e <USBH_ParseStringDesc>
  }

  return status;
 8007200:	7dfb      	ldrb	r3, [r7, #23]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	72fb      	strb	r3, [r7, #11]
 8007218:	4613      	mov	r3, r2
 800721a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	789b      	ldrb	r3, [r3, #2]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d11c      	bne.n	800725e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800722a:	b2da      	uxtb	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2206      	movs	r2, #6
 8007234:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	893a      	ldrh	r2, [r7, #8]
 800723a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800723c:	893b      	ldrh	r3, [r7, #8]
 800723e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007246:	d104      	bne.n	8007252 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f240 4209 	movw	r2, #1033	; 0x409
 800724e:	829a      	strh	r2, [r3, #20]
 8007250:	e002      	b.n	8007258 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8b3a      	ldrh	r2, [r7, #24]
 800725c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800725e:	8b3b      	ldrh	r3, [r7, #24]
 8007260:	461a      	mov	r2, r3
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 fa50 	bl	800770a <USBH_CtlReq>
 800726a:	4603      	mov	r3, r0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	789b      	ldrb	r3, [r3, #2]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d10f      	bne.n	80072a8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2205      	movs	r2, #5
 8007292:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	b29a      	uxth	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80072a8:	2200      	movs	r2, #0
 80072aa:	2100      	movs	r1, #0
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fa2c 	bl	800770a <USBH_CtlReq>
 80072b2:	4603      	mov	r3, r0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	789b      	ldrb	r3, [r3, #2]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d10e      	bne.n	80072ee <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2209      	movs	r2, #9
 80072da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	887a      	ldrh	r2, [r7, #2]
 80072e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80072ee:	2200      	movs	r2, #0
 80072f0:	2100      	movs	r1, #0
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fa09 	bl	800770a <USBH_CtlReq>
 80072f8:	4603      	mov	r3, r0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	460b      	mov	r3, r1
 800730c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	789b      	ldrb	r3, [r3, #2]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d10f      	bne.n	8007336 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2203      	movs	r2, #3
 8007320:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	b29a      	uxth	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007336:	2200      	movs	r2, #0
 8007338:	2100      	movs	r1, #0
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f9e5 	bl	800770a <USBH_CtlReq>
 8007340:	4603      	mov	r3, r0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	789b      	ldrb	r3, [r3, #2]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d10f      	bne.n	800737e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2202      	movs	r2, #2
 8007362:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	b29a      	uxth	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800737e:	2200      	movs	r2, #0
 8007380:	2100      	movs	r1, #0
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f9c1 	bl	800770a <USBH_CtlReq>
 8007388:	4603      	mov	r3, r0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	4613      	mov	r3, r2
 800739e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	785a      	ldrb	r2, [r3, #1]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	3302      	adds	r3, #2
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	3303      	adds	r3, #3
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	4313      	orrs	r3, r2
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	791a      	ldrb	r2, [r3, #4]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	795a      	ldrb	r2, [r3, #5]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	799a      	ldrb	r2, [r3, #6]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	79da      	ldrb	r2, [r3, #7]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	2b08      	cmp	r3, #8
 80073f0:	d939      	bls.n	8007466 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	3308      	adds	r3, #8
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	3309      	adds	r3, #9
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	021b      	lsls	r3, r3, #8
 8007404:	b29b      	uxth	r3, r3
 8007406:	4313      	orrs	r3, r2
 8007408:	b29a      	uxth	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	330a      	adds	r3, #10
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	b29a      	uxth	r2, r3
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	330b      	adds	r3, #11
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	b29b      	uxth	r3, r3
 8007422:	4313      	orrs	r3, r2
 8007424:	b29a      	uxth	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	330c      	adds	r3, #12
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	b29a      	uxth	r2, r3
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	330d      	adds	r3, #13
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	b29b      	uxth	r3, r3
 800743e:	4313      	orrs	r3, r2
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	7b9a      	ldrb	r2, [r3, #14]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	7bda      	ldrb	r2, [r3, #15]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	7c1a      	ldrb	r2, [r3, #16]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	7c5a      	ldrb	r2, [r3, #17]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	745a      	strb	r2, [r3, #17]
  }
}
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b08a      	sub	sp, #40	; 0x28
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	4613      	mov	r3, r2
 800747e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	781a      	ldrb	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	785a      	ldrb	r2, [r3, #1]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	3302      	adds	r3, #2
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	3303      	adds	r3, #3
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	021b      	lsls	r3, r3, #8
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	4313      	orrs	r3, r2
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	791a      	ldrb	r2, [r3, #4]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	795a      	ldrb	r2, [r3, #5]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	799a      	ldrb	r2, [r3, #6]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	79da      	ldrb	r2, [r3, #7]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	7a1a      	ldrb	r2, [r3, #8]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80074e8:	88fb      	ldrh	r3, [r7, #6]
 80074ea:	2b09      	cmp	r3, #9
 80074ec:	d95f      	bls.n	80075ae <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80074ee:	2309      	movs	r3, #9
 80074f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80074f6:	e051      	b.n	800759c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074f8:	f107 0316 	add.w	r3, r7, #22
 80074fc:	4619      	mov	r1, r3
 80074fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007500:	f000 f8e8 	bl	80076d4 <USBH_GetNextDesc>
 8007504:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	2b04      	cmp	r3, #4
 800750c:	d146      	bne.n	800759c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800750e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007512:	221a      	movs	r2, #26
 8007514:	fb02 f303 	mul.w	r3, r2, r3
 8007518:	3308      	adds	r3, #8
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4413      	add	r3, r2
 800751e:	3302      	adds	r3, #2
 8007520:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007524:	69f8      	ldr	r0, [r7, #28]
 8007526:	f000 f846 	bl	80075b6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007530:	2300      	movs	r3, #0
 8007532:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007534:	e022      	b.n	800757c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007536:	f107 0316 	add.w	r3, r7, #22
 800753a:	4619      	mov	r1, r3
 800753c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800753e:	f000 f8c9 	bl	80076d4 <USBH_GetNextDesc>
 8007542:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	785b      	ldrb	r3, [r3, #1]
 8007548:	2b05      	cmp	r3, #5
 800754a:	d117      	bne.n	800757c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800754c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007550:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007554:	3201      	adds	r2, #1
 8007556:	00d2      	lsls	r2, r2, #3
 8007558:	211a      	movs	r1, #26
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	4413      	add	r3, r2
 8007560:	3308      	adds	r3, #8
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4413      	add	r3, r2
 8007566:	3304      	adds	r3, #4
 8007568:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800756a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800756c:	69b8      	ldr	r0, [r7, #24]
 800756e:	f000 f851 	bl	8007614 <USBH_ParseEPDesc>
            ep_ix++;
 8007572:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007576:	3301      	adds	r3, #1
 8007578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	791b      	ldrb	r3, [r3, #4]
 8007580:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007584:	429a      	cmp	r2, r3
 8007586:	d204      	bcs.n	8007592 <USBH_ParseCfgDesc+0x120>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	885a      	ldrh	r2, [r3, #2]
 800758c:	8afb      	ldrh	r3, [r7, #22]
 800758e:	429a      	cmp	r2, r3
 8007590:	d8d1      	bhi.n	8007536 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007592:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007596:	3301      	adds	r3, #1
 8007598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800759c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d804      	bhi.n	80075ae <USBH_ParseCfgDesc+0x13c>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	885a      	ldrh	r2, [r3, #2]
 80075a8:	8afb      	ldrh	r3, [r7, #22]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d8a4      	bhi.n	80074f8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80075ae:	bf00      	nop
 80075b0:	3728      	adds	r7, #40	; 0x28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	785a      	ldrb	r2, [r3, #1]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	789a      	ldrb	r2, [r3, #2]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	78da      	ldrb	r2, [r3, #3]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	791a      	ldrb	r2, [r3, #4]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	795a      	ldrb	r2, [r3, #5]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	799a      	ldrb	r2, [r3, #6]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	79da      	ldrb	r2, [r3, #7]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	7a1a      	ldrb	r2, [r3, #8]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	721a      	strb	r2, [r3, #8]
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	785a      	ldrb	r2, [r3, #1]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	789a      	ldrb	r2, [r3, #2]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	78da      	ldrb	r2, [r3, #3]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	3304      	adds	r3, #4
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	b29a      	uxth	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	3305      	adds	r3, #5
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	b29b      	uxth	r3, r3
 800764e:	021b      	lsls	r3, r3, #8
 8007650:	b29b      	uxth	r3, r3
 8007652:	4313      	orrs	r3, r2
 8007654:	b29a      	uxth	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	799a      	ldrb	r2, [r3, #6]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	719a      	strb	r2, [r3, #6]
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800766e:	b480      	push	{r7}
 8007670:	b087      	sub	sp, #28
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	60b9      	str	r1, [r7, #8]
 8007678:	4613      	mov	r3, r2
 800767a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3301      	adds	r3, #1
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b03      	cmp	r3, #3
 8007684:	d120      	bne.n	80076c8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	1e9a      	subs	r2, r3, #2
 800768c:	88fb      	ldrh	r3, [r7, #6]
 800768e:	4293      	cmp	r3, r2
 8007690:	bf28      	it	cs
 8007692:	4613      	movcs	r3, r2
 8007694:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3302      	adds	r3, #2
 800769a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800769c:	2300      	movs	r3, #0
 800769e:	82fb      	strh	r3, [r7, #22]
 80076a0:	e00b      	b.n	80076ba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80076a2:	8afb      	ldrh	r3, [r7, #22]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	781a      	ldrb	r2, [r3, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	701a      	strb	r2, [r3, #0]
      pdest++;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	3301      	adds	r3, #1
 80076b2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80076b4:	8afb      	ldrh	r3, [r7, #22]
 80076b6:	3302      	adds	r3, #2
 80076b8:	82fb      	strh	r3, [r7, #22]
 80076ba:	8afa      	ldrh	r2, [r7, #22]
 80076bc:	8abb      	ldrh	r3, [r7, #20]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d3ef      	bcc.n	80076a2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2200      	movs	r2, #0
 80076c6:	701a      	strb	r2, [r3, #0]
  }
}
 80076c8:	bf00      	nop
 80076ca:	371c      	adds	r7, #28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	881a      	ldrh	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	4413      	add	r3, r2
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4413      	add	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076fc:	68fb      	ldr	r3, [r7, #12]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b086      	sub	sp, #24
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	4613      	mov	r3, r2
 8007716:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007718:	2301      	movs	r3, #1
 800771a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	789b      	ldrb	r3, [r3, #2]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d002      	beq.n	800772a <USBH_CtlReq+0x20>
 8007724:	2b02      	cmp	r3, #2
 8007726:	d01d      	beq.n	8007764 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8007728:	e043      	b.n	80077b2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	88fa      	ldrh	r2, [r7, #6]
 8007734:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2201      	movs	r2, #1
 800773a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2202      	movs	r2, #2
 8007740:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007742:	2301      	movs	r3, #1
 8007744:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2203      	movs	r2, #3
 800774a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800775a:	2300      	movs	r3, #0
 800775c:	2200      	movs	r2, #0
 800775e:	f000 fd55 	bl	800820c <osMessageQueuePut>
      break;
 8007762:	e026      	b.n	80077b2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 f829 	bl	80077bc <USBH_HandleControl>
 800776a:	4603      	mov	r3, r0
 800776c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <USBH_CtlReq+0x70>
 8007774:	7dfb      	ldrb	r3, [r7, #23]
 8007776:	2b03      	cmp	r3, #3
 8007778:	d106      	bne.n	8007788 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	761a      	strb	r2, [r3, #24]
 8007786:	e005      	b.n	8007794 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b02      	cmp	r3, #2
 800778c:	d102      	bne.n	8007794 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2203      	movs	r2, #3
 8007798:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80077a8:	2300      	movs	r3, #0
 80077aa:	2200      	movs	r2, #0
 80077ac:	f000 fd2e 	bl	800820c <osMessageQueuePut>
      break;
 80077b0:	bf00      	nop
  }
  return status;
 80077b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	7e1b      	ldrb	r3, [r3, #24]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	2b0a      	cmp	r3, #10
 80077d4:	f200 8229 	bhi.w	8007c2a <USBH_HandleControl+0x46e>
 80077d8:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <USBH_HandleControl+0x24>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	0800780d 	.word	0x0800780d
 80077e4:	08007827 	.word	0x08007827
 80077e8:	080078c9 	.word	0x080078c9
 80077ec:	080078ef 	.word	0x080078ef
 80077f0:	0800797b 	.word	0x0800797b
 80077f4:	080079a5 	.word	0x080079a5
 80077f8:	08007a67 	.word	0x08007a67
 80077fc:	08007a89 	.word	0x08007a89
 8007800:	08007b1b 	.word	0x08007b1b
 8007804:	08007b41 	.word	0x08007b41
 8007808:	08007bd3 	.word	0x08007bd3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f103 0110 	add.w	r1, r3, #16
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	795b      	ldrb	r3, [r3, #5]
 8007816:	461a      	mov	r2, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fa17 	bl	8007c4c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2202      	movs	r2, #2
 8007822:	761a      	strb	r2, [r3, #24]
      break;
 8007824:	e20c      	b.n	8007c40 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	795b      	ldrb	r3, [r3, #5]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f003 fd39 	bl	800b2a4 <USBH_LL_GetURBState>
 8007832:	4603      	mov	r3, r0
 8007834:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d12c      	bne.n	8007896 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7c1b      	ldrb	r3, [r3, #16]
 8007840:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007844:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8adb      	ldrh	r3, [r3, #22]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800784e:	7b7b      	ldrb	r3, [r7, #13]
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d103      	bne.n	800785c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2203      	movs	r2, #3
 8007858:	761a      	strb	r2, [r3, #24]
 800785a:	e00d      	b.n	8007878 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2205      	movs	r2, #5
 8007860:	761a      	strb	r2, [r3, #24]
 8007862:	e009      	b.n	8007878 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007864:	7b7b      	ldrb	r3, [r7, #13]
 8007866:	2b80      	cmp	r3, #128	; 0x80
 8007868:	d103      	bne.n	8007872 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2209      	movs	r2, #9
 800786e:	761a      	strb	r2, [r3, #24]
 8007870:	e002      	b.n	8007878 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2207      	movs	r2, #7
 8007876:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2203      	movs	r2, #3
 800787c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800788c:	2300      	movs	r3, #0
 800788e:	2200      	movs	r2, #0
 8007890:	f000 fcbc 	bl	800820c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007894:	e1cb      	b.n	8007c2e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b04      	cmp	r3, #4
 800789a:	d003      	beq.n	80078a4 <USBH_HandleControl+0xe8>
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	f040 81c5 	bne.w	8007c2e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	220b      	movs	r2, #11
 80078a8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2203      	movs	r2, #3
 80078ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80078be:	2300      	movs	r3, #0
 80078c0:	2200      	movs	r2, #0
 80078c2:	f000 fca3 	bl	800820c <osMessageQueuePut>
      break;
 80078c6:	e1b2      	b.n	8007c2e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6899      	ldr	r1, [r3, #8]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	899a      	ldrh	r2, [r3, #12]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	791b      	ldrb	r3, [r3, #4]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f9f2 	bl	8007cca <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2204      	movs	r2, #4
 80078ea:	761a      	strb	r2, [r3, #24]
      break;
 80078ec:	e1a8      	b.n	8007c40 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	791b      	ldrb	r3, [r3, #4]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f003 fcd5 	bl	800b2a4 <USBH_LL_GetURBState>
 80078fa:	4603      	mov	r3, r0
 80078fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d110      	bne.n	8007926 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2209      	movs	r2, #9
 8007908:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2203      	movs	r2, #3
 800790e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800791e:	2300      	movs	r3, #0
 8007920:	2200      	movs	r2, #0
 8007922:	f000 fc73 	bl	800820c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	2b05      	cmp	r3, #5
 800792a:	d110      	bne.n	800794e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800792c:	2303      	movs	r3, #3
 800792e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2203      	movs	r2, #3
 8007934:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007944:	2300      	movs	r3, #0
 8007946:	2200      	movs	r2, #0
 8007948:	f000 fc60 	bl	800820c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800794c:	e171      	b.n	8007c32 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b04      	cmp	r3, #4
 8007952:	f040 816e 	bne.w	8007c32 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	220b      	movs	r2, #11
 800795a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2203      	movs	r2, #3
 8007960:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007970:	2300      	movs	r3, #0
 8007972:	2200      	movs	r2, #0
 8007974:	f000 fc4a 	bl	800820c <osMessageQueuePut>
      break;
 8007978:	e15b      	b.n	8007c32 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6899      	ldr	r1, [r3, #8]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	899a      	ldrh	r2, [r3, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	795b      	ldrb	r3, [r3, #5]
 8007986:	2001      	movs	r0, #1
 8007988:	9000      	str	r0, [sp, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f978 	bl	8007c80 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007996:	b29a      	uxth	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2206      	movs	r2, #6
 80079a0:	761a      	strb	r2, [r3, #24]
      break;
 80079a2:	e14d      	b.n	8007c40 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	795b      	ldrb	r3, [r3, #5]
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f003 fc7a 	bl	800b2a4 <USBH_LL_GetURBState>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d111      	bne.n	80079de <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2207      	movs	r2, #7
 80079be:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2203      	movs	r2, #3
 80079c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80079d4:	2300      	movs	r3, #0
 80079d6:	2200      	movs	r2, #0
 80079d8:	f000 fc18 	bl	800820c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079dc:	e12b      	b.n	8007c36 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b05      	cmp	r3, #5
 80079e2:	d113      	bne.n	8007a0c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	220c      	movs	r2, #12
 80079e8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80079ea:	2303      	movs	r3, #3
 80079ec:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2203      	movs	r2, #3
 80079f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a02:	2300      	movs	r3, #0
 8007a04:	2200      	movs	r2, #0
 8007a06:	f000 fc01 	bl	800820c <osMessageQueuePut>
      break;
 8007a0a:	e114      	b.n	8007c36 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d111      	bne.n	8007a36 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2205      	movs	r2, #5
 8007a16:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f000 fbec 	bl	800820c <osMessageQueuePut>
      break;
 8007a34:	e0ff      	b.n	8007c36 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	f040 80fc 	bne.w	8007c36 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	220b      	movs	r2, #11
 8007a42:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a44:	2302      	movs	r3, #2
 8007a46:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f000 fbd4 	bl	800820c <osMessageQueuePut>
      break;
 8007a64:	e0e7      	b.n	8007c36 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	791b      	ldrb	r3, [r3, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f92b 	bl	8007cca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2208      	movs	r2, #8
 8007a84:	761a      	strb	r2, [r3, #24]

      break;
 8007a86:	e0db      	b.n	8007c40 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	791b      	ldrb	r3, [r3, #4]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f003 fc08 	bl	800b2a4 <USBH_LL_GetURBState>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d113      	bne.n	8007ac6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	220d      	movs	r2, #13
 8007aa2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2203      	movs	r2, #3
 8007aac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007abc:	2300      	movs	r3, #0
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f000 fba4 	bl	800820c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ac4:	e0b9      	b.n	8007c3a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d111      	bne.n	8007af0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	220b      	movs	r2, #11
 8007ad0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f000 fb8f 	bl	800820c <osMessageQueuePut>
      break;
 8007aee:	e0a4      	b.n	8007c3a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	2b05      	cmp	r3, #5
 8007af4:	f040 80a1 	bne.w	8007c3a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8007af8:	2303      	movs	r3, #3
 8007afa:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2203      	movs	r2, #3
 8007b00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b10:	2300      	movs	r3, #0
 8007b12:	2200      	movs	r2, #0
 8007b14:	f000 fb7a 	bl	800820c <osMessageQueuePut>
      break;
 8007b18:	e08f      	b.n	8007c3a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	795b      	ldrb	r3, [r3, #5]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	9200      	str	r2, [sp, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	2100      	movs	r1, #0
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f8aa 	bl	8007c80 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	220a      	movs	r2, #10
 8007b3c:	761a      	strb	r2, [r3, #24]
      break;
 8007b3e:	e07f      	b.n	8007c40 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	795b      	ldrb	r3, [r3, #5]
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f003 fbac 	bl	800b2a4 <USBH_LL_GetURBState>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d113      	bne.n	8007b7e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	220d      	movs	r2, #13
 8007b5e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2203      	movs	r2, #3
 8007b64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b74:	2300      	movs	r3, #0
 8007b76:	2200      	movs	r2, #0
 8007b78:	f000 fb48 	bl	800820c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b7c:	e05f      	b.n	8007c3e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d111      	bne.n	8007ba8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2209      	movs	r2, #9
 8007b88:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2203      	movs	r2, #3
 8007b8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f000 fb33 	bl	800820c <osMessageQueuePut>
      break;
 8007ba6:	e04a      	b.n	8007c3e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d147      	bne.n	8007c3e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	220b      	movs	r2, #11
 8007bb2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2203      	movs	r2, #3
 8007bb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bc8:	2300      	movs	r3, #0
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f000 fb1e 	bl	800820c <osMessageQueuePut>
      break;
 8007bd0:	e035      	b.n	8007c3e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7e5b      	ldrb	r3, [r3, #25]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	765a      	strb	r2, [r3, #25]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	7e5b      	ldrb	r3, [r3, #25]
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d806      	bhi.n	8007bf4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007bf2:	e025      	b.n	8007c40 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bfa:	2106      	movs	r1, #6
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	795b      	ldrb	r3, [r3, #5]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f90d 	bl	8007e2c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	791b      	ldrb	r3, [r3, #4]
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f907 	bl	8007e2c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007c24:	2302      	movs	r3, #2
 8007c26:	73fb      	strb	r3, [r7, #15]
      break;
 8007c28:	e00a      	b.n	8007c40 <USBH_HandleControl+0x484>

    default:
      break;
 8007c2a:	bf00      	nop
 8007c2c:	e008      	b.n	8007c40 <USBH_HandleControl+0x484>
      break;
 8007c2e:	bf00      	nop
 8007c30:	e006      	b.n	8007c40 <USBH_HandleControl+0x484>
      break;
 8007c32:	bf00      	nop
 8007c34:	e004      	b.n	8007c40 <USBH_HandleControl+0x484>
      break;
 8007c36:	bf00      	nop
 8007c38:	e002      	b.n	8007c40 <USBH_HandleControl+0x484>
      break;
 8007c3a:	bf00      	nop
 8007c3c:	e000      	b.n	8007c40 <USBH_HandleControl+0x484>
      break;
 8007c3e:	bf00      	nop
  }

  return status;
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop

08007c4c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af04      	add	r7, sp, #16
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	4613      	mov	r3, r2
 8007c58:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c5a:	79f9      	ldrb	r1, [r7, #7]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9303      	str	r3, [sp, #12]
 8007c60:	2308      	movs	r3, #8
 8007c62:	9302      	str	r3, [sp, #8]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	2300      	movs	r3, #0
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	2200      	movs	r2, #0
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f003 fae6 	bl	800b242 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af04      	add	r7, sp, #16
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	460b      	mov	r3, r1
 8007c90:	80fb      	strh	r3, [r7, #6]
 8007c92:	4613      	mov	r3, r2
 8007c94:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ca4:	7979      	ldrb	r1, [r7, #5]
 8007ca6:	7e3b      	ldrb	r3, [r7, #24]
 8007ca8:	9303      	str	r3, [sp, #12]
 8007caa:	88fb      	ldrh	r3, [r7, #6]
 8007cac:	9302      	str	r3, [sp, #8]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	9301      	str	r3, [sp, #4]
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	2200      	movs	r2, #0
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f003 fac1 	bl	800b242 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b088      	sub	sp, #32
 8007cce:	af04      	add	r7, sp, #16
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	460b      	mov	r3, r1
 8007cda:	80fb      	strh	r3, [r7, #6]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ce0:	7979      	ldrb	r1, [r7, #5]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	9303      	str	r3, [sp, #12]
 8007ce6:	88fb      	ldrh	r3, [r7, #6]
 8007ce8:	9302      	str	r3, [sp, #8]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	2301      	movs	r3, #1
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f003 faa3 	bl	800b242 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007cfc:	2300      	movs	r3, #0

}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b088      	sub	sp, #32
 8007d0a:	af04      	add	r7, sp, #16
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	4611      	mov	r1, r2
 8007d12:	461a      	mov	r2, r3
 8007d14:	460b      	mov	r3, r1
 8007d16:	80fb      	strh	r3, [r7, #6]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d2a:	7979      	ldrb	r1, [r7, #5]
 8007d2c:	7e3b      	ldrb	r3, [r7, #24]
 8007d2e:	9303      	str	r3, [sp, #12]
 8007d30:	88fb      	ldrh	r3, [r7, #6]
 8007d32:	9302      	str	r3, [sp, #8]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	2301      	movs	r3, #1
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	2200      	movs	r2, #0
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f003 fa7e 	bl	800b242 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af04      	add	r7, sp, #16
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	460b      	mov	r3, r1
 8007d60:	80fb      	strh	r3, [r7, #6]
 8007d62:	4613      	mov	r3, r2
 8007d64:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d66:	7979      	ldrb	r1, [r7, #5]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	9303      	str	r3, [sp, #12]
 8007d6c:	88fb      	ldrh	r3, [r7, #6]
 8007d6e:	9302      	str	r3, [sp, #8]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	9301      	str	r3, [sp, #4]
 8007d74:	2301      	movs	r3, #1
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	2302      	movs	r3, #2
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f003 fa60 	bl	800b242 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af04      	add	r7, sp, #16
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	4608      	mov	r0, r1
 8007d96:	4611      	mov	r1, r2
 8007d98:	461a      	mov	r2, r3
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	70fb      	strb	r3, [r7, #3]
 8007d9e:	460b      	mov	r3, r1
 8007da0:	70bb      	strb	r3, [r7, #2]
 8007da2:	4613      	mov	r3, r2
 8007da4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007da6:	7878      	ldrb	r0, [r7, #1]
 8007da8:	78ba      	ldrb	r2, [r7, #2]
 8007daa:	78f9      	ldrb	r1, [r7, #3]
 8007dac:	8b3b      	ldrh	r3, [r7, #24]
 8007dae:	9302      	str	r3, [sp, #8]
 8007db0:	7d3b      	ldrb	r3, [r7, #20]
 8007db2:	9301      	str	r3, [sp, #4]
 8007db4:	7c3b      	ldrb	r3, [r7, #16]
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	4603      	mov	r3, r0
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f003 f9f3 	bl	800b1a6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f003 fa12 	bl	800b204 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	460b      	mov	r3, r1
 8007df4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f836 	bl	8007e68 <USBH_GetFreePipe>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007e00:	89fb      	ldrh	r3, [r7, #14]
 8007e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00a      	beq.n	8007e20 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007e0a:	78fa      	ldrb	r2, [r7, #3]
 8007e0c:	89fb      	ldrh	r3, [r7, #14]
 8007e0e:	f003 030f 	and.w	r3, r3, #15
 8007e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	33e0      	adds	r3, #224	; 0xe0
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007e20:	89fb      	ldrh	r3, [r7, #14]
 8007e22:	b2db      	uxtb	r3, r3
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	2b0a      	cmp	r3, #10
 8007e3c:	d80d      	bhi.n	8007e5a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007e3e:	78fb      	ldrb	r3, [r7, #3]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	33e0      	adds	r3, #224	; 0xe0
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	78fb      	ldrb	r3, [r7, #3]
 8007e4c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	33e0      	adds	r3, #224	; 0xe0
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	440b      	add	r3, r1
 8007e58:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
 8007e78:	e00f      	b.n	8007e9a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	33e0      	adds	r3, #224	; 0xe0
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d102      	bne.n	8007e94 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	e007      	b.n	8007ea4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	3301      	adds	r3, #1
 8007e98:	73fb      	strb	r3, [r7, #15]
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b0a      	cmp	r3, #10
 8007e9e:	d9ec      	bls.n	8007e7a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <__NVIC_SetPriority>:
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	6039      	str	r1, [r7, #0]
 8007eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	db0a      	blt.n	8007eda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	490c      	ldr	r1, [pc, #48]	; (8007efc <__NVIC_SetPriority+0x4c>)
 8007eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ece:	0112      	lsls	r2, r2, #4
 8007ed0:	b2d2      	uxtb	r2, r2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ed8:	e00a      	b.n	8007ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	4908      	ldr	r1, [pc, #32]	; (8007f00 <__NVIC_SetPriority+0x50>)
 8007ee0:	79fb      	ldrb	r3, [r7, #7]
 8007ee2:	f003 030f 	and.w	r3, r3, #15
 8007ee6:	3b04      	subs	r3, #4
 8007ee8:	0112      	lsls	r2, r2, #4
 8007eea:	b2d2      	uxtb	r2, r2
 8007eec:	440b      	add	r3, r1
 8007eee:	761a      	strb	r2, [r3, #24]
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	e000e100 	.word	0xe000e100
 8007f00:	e000ed00 	.word	0xe000ed00

08007f04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007f08:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <SysTick_Handler+0x1c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f0c:	f001 ff12 	bl	8009d34 <xTaskGetSchedulerState>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d001      	beq.n	8007f1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f16:	f002 fcf7 	bl	800a908 <xPortSysTickHandler>
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	e000e010 	.word	0xe000e010

08007f24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f28:	2100      	movs	r1, #0
 8007f2a:	f06f 0004 	mvn.w	r0, #4
 8007f2e:	f7ff ffbf 	bl	8007eb0 <__NVIC_SetPriority>
#endif
}
 8007f32:	bf00      	nop
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f3e:	f3ef 8305 	mrs	r3, IPSR
 8007f42:	603b      	str	r3, [r7, #0]
  return(result);
 8007f44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f4a:	f06f 0305 	mvn.w	r3, #5
 8007f4e:	607b      	str	r3, [r7, #4]
 8007f50:	e00c      	b.n	8007f6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f52:	4b0a      	ldr	r3, [pc, #40]	; (8007f7c <osKernelInitialize+0x44>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f5a:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <osKernelInitialize+0x44>)
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	607b      	str	r3, [r7, #4]
 8007f64:	e002      	b.n	8007f6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f6c:	687b      	ldr	r3, [r7, #4]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	200000b4 	.word	0x200000b4

08007f80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f86:	f3ef 8305 	mrs	r3, IPSR
 8007f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8007f8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f92:	f06f 0305 	mvn.w	r3, #5
 8007f96:	607b      	str	r3, [r7, #4]
 8007f98:	e010      	b.n	8007fbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f9a:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <osKernelStart+0x48>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d109      	bne.n	8007fb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007fa2:	f7ff ffbf 	bl	8007f24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007fa6:	4b08      	ldr	r3, [pc, #32]	; (8007fc8 <osKernelStart+0x48>)
 8007fa8:	2202      	movs	r2, #2
 8007faa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007fac:	f001 fa66 	bl	800947c <vTaskStartScheduler>
      stat = osOK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	607b      	str	r3, [r7, #4]
 8007fb4:	e002      	b.n	8007fbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fbc:	687b      	ldr	r3, [r7, #4]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	200000b4 	.word	0x200000b4

08007fcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08e      	sub	sp, #56	; 0x38
 8007fd0:	af04      	add	r7, sp, #16
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fdc:	f3ef 8305 	mrs	r3, IPSR
 8007fe0:	617b      	str	r3, [r7, #20]
  return(result);
 8007fe2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d17e      	bne.n	80080e6 <osThreadNew+0x11a>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d07b      	beq.n	80080e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007fee:	2380      	movs	r3, #128	; 0x80
 8007ff0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ff2:	2318      	movs	r3, #24
 8007ff4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ffe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d045      	beq.n	8008092 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <osThreadNew+0x48>
        name = attr->name;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d008      	beq.n	800803a <osThreadNew+0x6e>
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	2b38      	cmp	r3, #56	; 0x38
 800802c:	d805      	bhi.n	800803a <osThreadNew+0x6e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <osThreadNew+0x72>
        return (NULL);
 800803a:	2300      	movs	r3, #0
 800803c:	e054      	b.n	80080e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	089b      	lsrs	r3, r3, #2
 800804c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00e      	beq.n	8008074 <osThreadNew+0xa8>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	2bbb      	cmp	r3, #187	; 0xbb
 800805c:	d90a      	bls.n	8008074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008062:	2b00      	cmp	r3, #0
 8008064:	d006      	beq.n	8008074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <osThreadNew+0xa8>
        mem = 1;
 800806e:	2301      	movs	r3, #1
 8008070:	61bb      	str	r3, [r7, #24]
 8008072:	e010      	b.n	8008096 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10c      	bne.n	8008096 <osThreadNew+0xca>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d108      	bne.n	8008096 <osThreadNew+0xca>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d104      	bne.n	8008096 <osThreadNew+0xca>
          mem = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	61bb      	str	r3, [r7, #24]
 8008090:	e001      	b.n	8008096 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d110      	bne.n	80080be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080a4:	9202      	str	r2, [sp, #8]
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6a3a      	ldr	r2, [r7, #32]
 80080b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 fff6 	bl	80090a4 <xTaskCreateStatic>
 80080b8:	4603      	mov	r3, r0
 80080ba:	613b      	str	r3, [r7, #16]
 80080bc:	e013      	b.n	80080e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d110      	bne.n	80080e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f107 0310 	add.w	r3, r7, #16
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f001 f841 	bl	800915e <xTaskCreate>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d001      	beq.n	80080e6 <osThreadNew+0x11a>
            hTask = NULL;
 80080e2:	2300      	movs	r3, #0
 80080e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080e6:	693b      	ldr	r3, [r7, #16]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3728      	adds	r7, #40	; 0x28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080f8:	f3ef 8305 	mrs	r3, IPSR
 80080fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80080fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <osDelay+0x1c>
    stat = osErrorISR;
 8008104:	f06f 0305 	mvn.w	r3, #5
 8008108:	60fb      	str	r3, [r7, #12]
 800810a:	e007      	b.n	800811c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800810c:	2300      	movs	r3, #0
 800810e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 f97c 	bl	8009414 <vTaskDelay>
    }
  }

  return (stat);
 800811c:	68fb      	ldr	r3, [r7, #12]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008126:	b580      	push	{r7, lr}
 8008128:	b08a      	sub	sp, #40	; 0x28
 800812a:	af02      	add	r7, sp, #8
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008132:	2300      	movs	r3, #0
 8008134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008136:	f3ef 8305 	mrs	r3, IPSR
 800813a:	613b      	str	r3, [r7, #16]
  return(result);
 800813c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800813e:	2b00      	cmp	r3, #0
 8008140:	d15f      	bne.n	8008202 <osMessageQueueNew+0xdc>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d05c      	beq.n	8008202 <osMessageQueueNew+0xdc>
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d059      	beq.n	8008202 <osMessageQueueNew+0xdc>
    mem = -1;
 800814e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008152:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d029      	beq.n	80081ae <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d012      	beq.n	8008188 <osMessageQueueNew+0x62>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	2b4f      	cmp	r3, #79	; 0x4f
 8008168:	d90e      	bls.n	8008188 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	695a      	ldr	r2, [r3, #20]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	68b9      	ldr	r1, [r7, #8]
 800817a:	fb01 f303 	mul.w	r3, r1, r3
 800817e:	429a      	cmp	r2, r3
 8008180:	d302      	bcc.n	8008188 <osMessageQueueNew+0x62>
        mem = 1;
 8008182:	2301      	movs	r3, #1
 8008184:	61bb      	str	r3, [r7, #24]
 8008186:	e014      	b.n	80081b2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d110      	bne.n	80081b2 <osMessageQueueNew+0x8c>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10c      	bne.n	80081b2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800819c:	2b00      	cmp	r3, #0
 800819e:	d108      	bne.n	80081b2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d104      	bne.n	80081b2 <osMessageQueueNew+0x8c>
          mem = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	61bb      	str	r3, [r7, #24]
 80081ac:	e001      	b.n	80081b2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80081ae:	2300      	movs	r3, #0
 80081b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d10b      	bne.n	80081d0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	2100      	movs	r1, #0
 80081c2:	9100      	str	r1, [sp, #0]
 80081c4:	68b9      	ldr	r1, [r7, #8]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 fa2e 	bl	8008628 <xQueueGenericCreateStatic>
 80081cc:	61f8      	str	r0, [r7, #28]
 80081ce:	e008      	b.n	80081e2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d105      	bne.n	80081e2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80081d6:	2200      	movs	r2, #0
 80081d8:	68b9      	ldr	r1, [r7, #8]
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fa9c 	bl	8008718 <xQueueGenericCreate>
 80081e0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00c      	beq.n	8008202 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	e001      	b.n	80081fa <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80081fa:	6979      	ldr	r1, [r7, #20]
 80081fc:	69f8      	ldr	r0, [r7, #28]
 80081fe:	f000 fef3 	bl	8008fe8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008202:	69fb      	ldr	r3, [r7, #28]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3720      	adds	r7, #32
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	603b      	str	r3, [r7, #0]
 8008218:	4613      	mov	r3, r2
 800821a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008220:	2300      	movs	r3, #0
 8008222:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008224:	f3ef 8305 	mrs	r3, IPSR
 8008228:	617b      	str	r3, [r7, #20]
  return(result);
 800822a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800822c:	2b00      	cmp	r3, #0
 800822e:	d028      	beq.n	8008282 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <osMessageQueuePut+0x36>
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <osMessageQueuePut+0x36>
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008242:	f06f 0303 	mvn.w	r3, #3
 8008246:	61fb      	str	r3, [r7, #28]
 8008248:	e038      	b.n	80082bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800824e:	f107 0210 	add.w	r2, r7, #16
 8008252:	2300      	movs	r3, #0
 8008254:	68b9      	ldr	r1, [r7, #8]
 8008256:	69b8      	ldr	r0, [r7, #24]
 8008258:	f000 fbba 	bl	80089d0 <xQueueGenericSendFromISR>
 800825c:	4603      	mov	r3, r0
 800825e:	2b01      	cmp	r3, #1
 8008260:	d003      	beq.n	800826a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008262:	f06f 0302 	mvn.w	r3, #2
 8008266:	61fb      	str	r3, [r7, #28]
 8008268:	e028      	b.n	80082bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d025      	beq.n	80082bc <osMessageQueuePut+0xb0>
 8008270:	4b15      	ldr	r3, [pc, #84]	; (80082c8 <osMessageQueuePut+0xbc>)
 8008272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	e01c      	b.n	80082bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <osMessageQueuePut+0x82>
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800828e:	f06f 0303 	mvn.w	r3, #3
 8008292:	61fb      	str	r3, [r7, #28]
 8008294:	e012      	b.n	80082bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008296:	2300      	movs	r3, #0
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	69b8      	ldr	r0, [r7, #24]
 800829e:	f000 fa99 	bl	80087d4 <xQueueGenericSend>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d009      	beq.n	80082bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80082ae:	f06f 0301 	mvn.w	r3, #1
 80082b2:	61fb      	str	r3, [r7, #28]
 80082b4:	e002      	b.n	80082bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80082b6:	f06f 0302 	mvn.w	r3, #2
 80082ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80082bc:	69fb      	ldr	r3, [r7, #28]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3720      	adds	r7, #32
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80082de:	2300      	movs	r3, #0
 80082e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082e2:	f3ef 8305 	mrs	r3, IPSR
 80082e6:	617b      	str	r3, [r7, #20]
  return(result);
 80082e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d028      	beq.n	8008340 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <osMessageQueueGet+0x34>
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <osMessageQueueGet+0x34>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d003      	beq.n	8008308 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008300:	f06f 0303 	mvn.w	r3, #3
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	e037      	b.n	8008378 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008308:	2300      	movs	r3, #0
 800830a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800830c:	f107 0310 	add.w	r3, r7, #16
 8008310:	461a      	mov	r2, r3
 8008312:	68b9      	ldr	r1, [r7, #8]
 8008314:	69b8      	ldr	r0, [r7, #24]
 8008316:	f000 fcd7 	bl	8008cc8 <xQueueReceiveFromISR>
 800831a:	4603      	mov	r3, r0
 800831c:	2b01      	cmp	r3, #1
 800831e:	d003      	beq.n	8008328 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008320:	f06f 0302 	mvn.w	r3, #2
 8008324:	61fb      	str	r3, [r7, #28]
 8008326:	e027      	b.n	8008378 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d024      	beq.n	8008378 <osMessageQueueGet+0xac>
 800832e:	4b15      	ldr	r3, [pc, #84]	; (8008384 <osMessageQueueGet+0xb8>)
 8008330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	e01b      	b.n	8008378 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <osMessageQueueGet+0x80>
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d103      	bne.n	8008354 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800834c:	f06f 0303 	mvn.w	r3, #3
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	e011      	b.n	8008378 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	69b8      	ldr	r0, [r7, #24]
 800835a:	f000 fbd5 	bl	8008b08 <xQueueReceive>
 800835e:	4603      	mov	r3, r0
 8008360:	2b01      	cmp	r3, #1
 8008362:	d009      	beq.n	8008378 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800836a:	f06f 0301 	mvn.w	r3, #1
 800836e:	61fb      	str	r3, [r7, #28]
 8008370:	e002      	b.n	8008378 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008372:	f06f 0302 	mvn.w	r3, #2
 8008376:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008378:	69fb      	ldr	r3, [r7, #28]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	e000ed04 	.word	0xe000ed04

08008388 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4a07      	ldr	r2, [pc, #28]	; (80083b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008398:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	4a06      	ldr	r2, [pc, #24]	; (80083b8 <vApplicationGetIdleTaskMemory+0x30>)
 800839e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2280      	movs	r2, #128	; 0x80
 80083a4:	601a      	str	r2, [r3, #0]
}
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	200000b8 	.word	0x200000b8
 80083b8:	20000174 	.word	0x20000174

080083bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4a07      	ldr	r2, [pc, #28]	; (80083e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80083cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	4a06      	ldr	r2, [pc, #24]	; (80083ec <vApplicationGetTimerTaskMemory+0x30>)
 80083d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083da:	601a      	str	r2, [r3, #0]
}
 80083dc:	bf00      	nop
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	20000374 	.word	0x20000374
 80083ec:	20000430 	.word	0x20000430

080083f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f103 0208 	add.w	r2, r3, #8
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008408:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f103 0208 	add.w	r2, r3, #8
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f103 0208 	add.w	r2, r3, #8
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	601a      	str	r2, [r3, #0]
}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008492:	b480      	push	{r7}
 8008494:	b085      	sub	sp, #20
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a8:	d103      	bne.n	80084b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	e00c      	b.n	80084cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	3308      	adds	r3, #8
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	e002      	b.n	80084c0 <vListInsert+0x2e>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d2f6      	bcs.n	80084ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	601a      	str	r2, [r3, #0]
}
 80084f8:	bf00      	nop
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6892      	ldr	r2, [r2, #8]
 800851a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6852      	ldr	r2, [r2, #4]
 8008524:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	429a      	cmp	r2, r3
 800852e:	d103      	bne.n	8008538 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	1e5a      	subs	r2, r3, #1
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10a      	bne.n	8008582 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008582:	f002 f92f 	bl	800a7e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858e:	68f9      	ldr	r1, [r7, #12]
 8008590:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008592:	fb01 f303 	mul.w	r3, r1, r3
 8008596:	441a      	add	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b2:	3b01      	subs	r3, #1
 80085b4:	68f9      	ldr	r1, [r7, #12]
 80085b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085b8:	fb01 f303 	mul.w	r3, r1, r3
 80085bc:	441a      	add	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	22ff      	movs	r2, #255	; 0xff
 80085c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	22ff      	movs	r2, #255	; 0xff
 80085ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d114      	bne.n	8008602 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01a      	beq.n	8008616 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3310      	adds	r3, #16
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 f9e3 	bl	80099b0 <xTaskRemoveFromEventList>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d012      	beq.n	8008616 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085f0:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <xQueueGenericReset+0xcc>)
 80085f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	e009      	b.n	8008616 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3310      	adds	r3, #16
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff fef2 	bl	80083f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3324      	adds	r3, #36	; 0x24
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff feed 	bl	80083f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008616:	f002 f915 	bl	800a844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800861a:	2301      	movs	r3, #1
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	e000ed04 	.word	0xe000ed04

08008628 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08e      	sub	sp, #56	; 0x38
 800862c:	af02      	add	r7, sp, #8
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10a      	bne.n	8008652 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	627b      	str	r3, [r7, #36]	; 0x24
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <xQueueGenericCreateStatic+0x52>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <xQueueGenericCreateStatic+0x56>
 800867a:	2301      	movs	r3, #1
 800867c:	e000      	b.n	8008680 <xQueueGenericCreateStatic+0x58>
 800867e:	2300      	movs	r3, #0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10a      	bne.n	800869a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	623b      	str	r3, [r7, #32]
}
 8008696:	bf00      	nop
 8008698:	e7fe      	b.n	8008698 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <xQueueGenericCreateStatic+0x7e>
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <xQueueGenericCreateStatic+0x82>
 80086a6:	2301      	movs	r3, #1
 80086a8:	e000      	b.n	80086ac <xQueueGenericCreateStatic+0x84>
 80086aa:	2300      	movs	r3, #0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10a      	bne.n	80086c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	61fb      	str	r3, [r7, #28]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086c6:	2350      	movs	r3, #80	; 0x50
 80086c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b50      	cmp	r3, #80	; 0x50
 80086ce:	d00a      	beq.n	80086e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	61bb      	str	r3, [r7, #24]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00d      	beq.n	800870e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	4613      	mov	r3, r2
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 f83f 	bl	800878c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008710:	4618      	mov	r0, r3
 8008712:	3730      	adds	r7, #48	; 0x30
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08a      	sub	sp, #40	; 0x28
 800871c:	af02      	add	r7, sp, #8
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10a      	bne.n	8008742 <xQueueGenericCreate+0x2a>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	613b      	str	r3, [r7, #16]
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	fb02 f303 	mul.w	r3, r2, r3
 800874a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	3350      	adds	r3, #80	; 0x50
 8008750:	4618      	mov	r0, r3
 8008752:	f002 f969 	bl	800aa28 <pvPortMalloc>
 8008756:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d011      	beq.n	8008782 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	3350      	adds	r3, #80	; 0x50
 8008766:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008770:	79fa      	ldrb	r2, [r7, #7]
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	4613      	mov	r3, r2
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	68b9      	ldr	r1, [r7, #8]
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 f805 	bl	800878c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008782:	69bb      	ldr	r3, [r7, #24]
	}
 8008784:	4618      	mov	r0, r3
 8008786:	3720      	adds	r7, #32
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d103      	bne.n	80087a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	e002      	b.n	80087ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087ba:	2101      	movs	r1, #1
 80087bc:	69b8      	ldr	r0, [r7, #24]
 80087be:	f7ff fecb 	bl	8008558 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	78fa      	ldrb	r2, [r7, #3]
 80087c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087ca:	bf00      	nop
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08e      	sub	sp, #56	; 0x38
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087e2:	2300      	movs	r3, #0
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <xQueueGenericSend+0x32>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d103      	bne.n	8008814 <xQueueGenericSend+0x40>
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <xQueueGenericSend+0x44>
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <xQueueGenericSend+0x46>
 8008818:	2300      	movs	r3, #0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10a      	bne.n	8008834 <xQueueGenericSend+0x60>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008830:	bf00      	nop
 8008832:	e7fe      	b.n	8008832 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b02      	cmp	r3, #2
 8008838:	d103      	bne.n	8008842 <xQueueGenericSend+0x6e>
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883e:	2b01      	cmp	r3, #1
 8008840:	d101      	bne.n	8008846 <xQueueGenericSend+0x72>
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <xQueueGenericSend+0x74>
 8008846:	2300      	movs	r3, #0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <xQueueGenericSend+0x8e>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	623b      	str	r3, [r7, #32]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008862:	f001 fa67 	bl	8009d34 <xTaskGetSchedulerState>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <xQueueGenericSend+0x9e>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <xQueueGenericSend+0xa2>
 8008872:	2301      	movs	r3, #1
 8008874:	e000      	b.n	8008878 <xQueueGenericSend+0xa4>
 8008876:	2300      	movs	r3, #0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10a      	bne.n	8008892 <xQueueGenericSend+0xbe>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	61fb      	str	r3, [r7, #28]
}
 800888e:	bf00      	nop
 8008890:	e7fe      	b.n	8008890 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008892:	f001 ffa7 	bl	800a7e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889e:	429a      	cmp	r2, r3
 80088a0:	d302      	bcc.n	80088a8 <xQueueGenericSend+0xd4>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d129      	bne.n	80088fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088ae:	f000 fa8b 	bl	8008dc8 <prvCopyDataToQueue>
 80088b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d010      	beq.n	80088de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	3324      	adds	r3, #36	; 0x24
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 f875 	bl	80099b0 <xTaskRemoveFromEventList>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d013      	beq.n	80088f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088cc:	4b3f      	ldr	r3, [pc, #252]	; (80089cc <xQueueGenericSend+0x1f8>)
 80088ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	e00a      	b.n	80088f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d007      	beq.n	80088f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088e4:	4b39      	ldr	r3, [pc, #228]	; (80089cc <xQueueGenericSend+0x1f8>)
 80088e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088f4:	f001 ffa6 	bl	800a844 <vPortExitCritical>
				return pdPASS;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e063      	b.n	80089c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d103      	bne.n	800890a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008902:	f001 ff9f 	bl	800a844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008906:	2300      	movs	r3, #0
 8008908:	e05c      	b.n	80089c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800890a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890c:	2b00      	cmp	r3, #0
 800890e:	d106      	bne.n	800891e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008910:	f107 0314 	add.w	r3, r7, #20
 8008914:	4618      	mov	r0, r3
 8008916:	f001 f8af 	bl	8009a78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800891a:	2301      	movs	r3, #1
 800891c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800891e:	f001 ff91 	bl	800a844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008922:	f000 fe1b 	bl	800955c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008926:	f001 ff5d 	bl	800a7e4 <vPortEnterCritical>
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008930:	b25b      	sxtb	r3, r3
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008936:	d103      	bne.n	8008940 <xQueueGenericSend+0x16c>
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008946:	b25b      	sxtb	r3, r3
 8008948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800894c:	d103      	bne.n	8008956 <xQueueGenericSend+0x182>
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008956:	f001 ff75 	bl	800a844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800895a:	1d3a      	adds	r2, r7, #4
 800895c:	f107 0314 	add.w	r3, r7, #20
 8008960:	4611      	mov	r1, r2
 8008962:	4618      	mov	r0, r3
 8008964:	f001 f89e 	bl	8009aa4 <xTaskCheckForTimeOut>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d124      	bne.n	80089b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800896e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008970:	f000 fb22 	bl	8008fb8 <prvIsQueueFull>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d018      	beq.n	80089ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	3310      	adds	r3, #16
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	4611      	mov	r1, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f000 ffc4 	bl	8009910 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800898a:	f000 faad 	bl	8008ee8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800898e:	f000 fdf3 	bl	8009578 <xTaskResumeAll>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	f47f af7c 	bne.w	8008892 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800899a:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <xQueueGenericSend+0x1f8>)
 800899c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	e772      	b.n	8008892 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ae:	f000 fa9b 	bl	8008ee8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089b2:	f000 fde1 	bl	8009578 <xTaskResumeAll>
 80089b6:	e76c      	b.n	8008892 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ba:	f000 fa95 	bl	8008ee8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089be:	f000 fddb 	bl	8009578 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3738      	adds	r7, #56	; 0x38
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	e000ed04 	.word	0xe000ed04

080089d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b090      	sub	sp, #64	; 0x40
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80089e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10a      	bne.n	80089fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d103      	bne.n	8008a0c <xQueueGenericSendFromISR+0x3c>
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <xQueueGenericSendFromISR+0x40>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e000      	b.n	8008a12 <xQueueGenericSendFromISR+0x42>
 8008a10:	2300      	movs	r3, #0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10a      	bne.n	8008a2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a28:	bf00      	nop
 8008a2a:	e7fe      	b.n	8008a2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d103      	bne.n	8008a3a <xQueueGenericSendFromISR+0x6a>
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d101      	bne.n	8008a3e <xQueueGenericSendFromISR+0x6e>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e000      	b.n	8008a40 <xQueueGenericSendFromISR+0x70>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	623b      	str	r3, [r7, #32]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a5a:	f001 ffa5 	bl	800a9a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a5e:	f3ef 8211 	mrs	r2, BASEPRI
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	61fa      	str	r2, [r7, #28]
 8008a74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d302      	bcc.n	8008a8c <xQueueGenericSendFromISR+0xbc>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d12f      	bne.n	8008aec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008aa2:	f000 f991 	bl	8008dc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008aa6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aae:	d112      	bne.n	8008ad6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d016      	beq.n	8008ae6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	3324      	adds	r3, #36	; 0x24
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 ff77 	bl	80099b0 <xTaskRemoveFromEventList>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00e      	beq.n	8008ae6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00b      	beq.n	8008ae6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	e007      	b.n	8008ae6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ad6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ada:	3301      	adds	r3, #1
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	b25a      	sxtb	r2, r3
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008aea:	e001      	b.n	8008af0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008afa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3740      	adds	r7, #64	; 0x40
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08c      	sub	sp, #48	; 0x30
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10a      	bne.n	8008b38 <xQueueReceive+0x30>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	623b      	str	r3, [r7, #32]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d103      	bne.n	8008b46 <xQueueReceive+0x3e>
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <xQueueReceive+0x42>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e000      	b.n	8008b4c <xQueueReceive+0x44>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <xQueueReceive+0x5e>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	61fb      	str	r3, [r7, #28]
}
 8008b62:	bf00      	nop
 8008b64:	e7fe      	b.n	8008b64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b66:	f001 f8e5 	bl	8009d34 <xTaskGetSchedulerState>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d102      	bne.n	8008b76 <xQueueReceive+0x6e>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <xQueueReceive+0x72>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <xQueueReceive+0x74>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10a      	bne.n	8008b96 <xQueueReceive+0x8e>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	61bb      	str	r3, [r7, #24]
}
 8008b92:	bf00      	nop
 8008b94:	e7fe      	b.n	8008b94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b96:	f001 fe25 	bl	800a7e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01f      	beq.n	8008be6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008baa:	f000 f977 	bl	8008e9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	1e5a      	subs	r2, r3, #1
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00f      	beq.n	8008bde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc0:	3310      	adds	r3, #16
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fef4 	bl	80099b0 <xTaskRemoveFromEventList>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d007      	beq.n	8008bde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bce:	4b3d      	ldr	r3, [pc, #244]	; (8008cc4 <xQueueReceive+0x1bc>)
 8008bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bde:	f001 fe31 	bl	800a844 <vPortExitCritical>
				return pdPASS;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e069      	b.n	8008cba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d103      	bne.n	8008bf4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bec:	f001 fe2a 	bl	800a844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	e062      	b.n	8008cba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d106      	bne.n	8008c08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bfa:	f107 0310 	add.w	r3, r7, #16
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 ff3a 	bl	8009a78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c04:	2301      	movs	r3, #1
 8008c06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c08:	f001 fe1c 	bl	800a844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c0c:	f000 fca6 	bl	800955c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c10:	f001 fde8 	bl	800a7e4 <vPortEnterCritical>
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c1a:	b25b      	sxtb	r3, r3
 8008c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c20:	d103      	bne.n	8008c2a <xQueueReceive+0x122>
 8008c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c30:	b25b      	sxtb	r3, r3
 8008c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c36:	d103      	bne.n	8008c40 <xQueueReceive+0x138>
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c40:	f001 fe00 	bl	800a844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c44:	1d3a      	adds	r2, r7, #4
 8008c46:	f107 0310 	add.w	r3, r7, #16
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 ff29 	bl	8009aa4 <xTaskCheckForTimeOut>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d123      	bne.n	8008ca0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c5a:	f000 f997 	bl	8008f8c <prvIsQueueEmpty>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d017      	beq.n	8008c94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	3324      	adds	r3, #36	; 0x24
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 fe4f 	bl	8009910 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c74:	f000 f938 	bl	8008ee8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c78:	f000 fc7e 	bl	8009578 <xTaskResumeAll>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d189      	bne.n	8008b96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008c82:	4b10      	ldr	r3, [pc, #64]	; (8008cc4 <xQueueReceive+0x1bc>)
 8008c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	e780      	b.n	8008b96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c96:	f000 f927 	bl	8008ee8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c9a:	f000 fc6d 	bl	8009578 <xTaskResumeAll>
 8008c9e:	e77a      	b.n	8008b96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ca2:	f000 f921 	bl	8008ee8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ca6:	f000 fc67 	bl	8009578 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cac:	f000 f96e 	bl	8008f8c <prvIsQueueEmpty>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f43f af6f 	beq.w	8008b96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008cb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3730      	adds	r7, #48	; 0x30
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	e000ed04 	.word	0xe000ed04

08008cc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08e      	sub	sp, #56	; 0x38
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	623b      	str	r3, [r7, #32]
}
 8008cf0:	bf00      	nop
 8008cf2:	e7fe      	b.n	8008cf2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d103      	bne.n	8008d02 <xQueueReceiveFromISR+0x3a>
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d101      	bne.n	8008d06 <xQueueReceiveFromISR+0x3e>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e000      	b.n	8008d08 <xQueueReceiveFromISR+0x40>
 8008d06:	2300      	movs	r3, #0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10a      	bne.n	8008d22 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	61fb      	str	r3, [r7, #28]
}
 8008d1e:	bf00      	nop
 8008d20:	e7fe      	b.n	8008d20 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d22:	f001 fe41 	bl	800a9a8 <vPortValidateInterruptPriority>
	__asm volatile
 8008d26:	f3ef 8211 	mrs	r2, BASEPRI
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	61ba      	str	r2, [r7, #24]
 8008d3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d02f      	beq.n	8008dae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d5c:	f000 f89e 	bl	8008e9c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	1e5a      	subs	r2, r3, #1
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008d68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d70:	d112      	bne.n	8008d98 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d016      	beq.n	8008da8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	3310      	adds	r3, #16
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fe16 	bl	80099b0 <xTaskRemoveFromEventList>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00e      	beq.n	8008da8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00b      	beq.n	8008da8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	e007      	b.n	8008da8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	b25a      	sxtb	r2, r3
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008da8:	2301      	movs	r3, #1
 8008daa:	637b      	str	r3, [r7, #52]	; 0x34
 8008dac:	e001      	b.n	8008db2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	637b      	str	r3, [r7, #52]	; 0x34
 8008db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f383 8811 	msr	BASEPRI, r3
}
 8008dbc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3738      	adds	r7, #56	; 0x38
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ddc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10d      	bne.n	8008e02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d14d      	bne.n	8008e8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 ffbc 	bl	8009d70 <xTaskPriorityDisinherit>
 8008df8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	609a      	str	r2, [r3, #8]
 8008e00:	e043      	b.n	8008e8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d119      	bne.n	8008e3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6858      	ldr	r0, [r3, #4]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e10:	461a      	mov	r2, r3
 8008e12:	68b9      	ldr	r1, [r7, #8]
 8008e14:	f002 fb30 	bl	800b478 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e20:	441a      	add	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d32b      	bcc.n	8008e8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	605a      	str	r2, [r3, #4]
 8008e3a:	e026      	b.n	8008e8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	68d8      	ldr	r0, [r3, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e44:	461a      	mov	r2, r3
 8008e46:	68b9      	ldr	r1, [r7, #8]
 8008e48:	f002 fb16 	bl	800b478 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	68da      	ldr	r2, [r3, #12]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e54:	425b      	negs	r3, r3
 8008e56:	441a      	add	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d207      	bcs.n	8008e78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	689a      	ldr	r2, [r3, #8]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e70:	425b      	negs	r3, r3
 8008e72:	441a      	add	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d105      	bne.n	8008e8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e92:	697b      	ldr	r3, [r7, #20]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d018      	beq.n	8008ee0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68da      	ldr	r2, [r3, #12]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	441a      	add	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d303      	bcc.n	8008ed0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68d9      	ldr	r1, [r3, #12]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed8:	461a      	mov	r2, r3
 8008eda:	6838      	ldr	r0, [r7, #0]
 8008edc:	f002 facc 	bl	800b478 <memcpy>
	}
}
 8008ee0:	bf00      	nop
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ef0:	f001 fc78 	bl	800a7e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008efa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008efc:	e011      	b.n	8008f22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d012      	beq.n	8008f2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	3324      	adds	r3, #36	; 0x24
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fd50 	bl	80099b0 <xTaskRemoveFromEventList>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f16:	f000 fe27 	bl	8009b68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	dce9      	bgt.n	8008efe <prvUnlockQueue+0x16>
 8008f2a:	e000      	b.n	8008f2e <prvUnlockQueue+0x46>
					break;
 8008f2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	22ff      	movs	r2, #255	; 0xff
 8008f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008f36:	f001 fc85 	bl	800a844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f3a:	f001 fc53 	bl	800a7e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f46:	e011      	b.n	8008f6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d012      	beq.n	8008f76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3310      	adds	r3, #16
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fd2b 	bl	80099b0 <xTaskRemoveFromEventList>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f60:	f000 fe02 	bl	8009b68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	dce9      	bgt.n	8008f48 <prvUnlockQueue+0x60>
 8008f74:	e000      	b.n	8008f78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	22ff      	movs	r2, #255	; 0xff
 8008f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f80:	f001 fc60 	bl	800a844 <vPortExitCritical>
}
 8008f84:	bf00      	nop
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f94:	f001 fc26 	bl	800a7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d102      	bne.n	8008fa6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	e001      	b.n	8008faa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008faa:	f001 fc4b 	bl	800a844 <vPortExitCritical>

	return xReturn;
 8008fae:	68fb      	ldr	r3, [r7, #12]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fc0:	f001 fc10 	bl	800a7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d102      	bne.n	8008fd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	e001      	b.n	8008fda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fda:	f001 fc33 	bl	800a844 <vPortExitCritical>

	return xReturn;
 8008fde:	68fb      	ldr	r3, [r7, #12]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]
 8008ff6:	e014      	b.n	8009022 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ff8:	4a0f      	ldr	r2, [pc, #60]	; (8009038 <vQueueAddToRegistry+0x50>)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10b      	bne.n	800901c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009004:	490c      	ldr	r1, [pc, #48]	; (8009038 <vQueueAddToRegistry+0x50>)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800900e:	4a0a      	ldr	r2, [pc, #40]	; (8009038 <vQueueAddToRegistry+0x50>)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	00db      	lsls	r3, r3, #3
 8009014:	4413      	add	r3, r2
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800901a:	e006      	b.n	800902a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	3301      	adds	r3, #1
 8009020:	60fb      	str	r3, [r7, #12]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b07      	cmp	r3, #7
 8009026:	d9e7      	bls.n	8008ff8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	20004bf8 	.word	0x20004bf8

0800903c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800904c:	f001 fbca 	bl	800a7e4 <vPortEnterCritical>
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009056:	b25b      	sxtb	r3, r3
 8009058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800905c:	d103      	bne.n	8009066 <vQueueWaitForMessageRestricted+0x2a>
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800906c:	b25b      	sxtb	r3, r3
 800906e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009072:	d103      	bne.n	800907c <vQueueWaitForMessageRestricted+0x40>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800907c:	f001 fbe2 	bl	800a844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	3324      	adds	r3, #36	; 0x24
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	4618      	mov	r0, r3
 8009092:	f000 fc61 	bl	8009958 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009096:	6978      	ldr	r0, [r7, #20]
 8009098:	f7ff ff26 	bl	8008ee8 <prvUnlockQueue>
	}
 800909c:	bf00      	nop
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b08e      	sub	sp, #56	; 0x38
 80090a8:	af04      	add	r7, sp, #16
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
 80090b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80090b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80090b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090bc:	f383 8811 	msr	BASEPRI, r3
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	623b      	str	r3, [r7, #32]
}
 80090ca:	bf00      	nop
 80090cc:	e7fe      	b.n	80090cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80090ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10a      	bne.n	80090ea <xTaskCreateStatic+0x46>
	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	61fb      	str	r3, [r7, #28]
}
 80090e6:	bf00      	nop
 80090e8:	e7fe      	b.n	80090e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090ea:	23bc      	movs	r3, #188	; 0xbc
 80090ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2bbc      	cmp	r3, #188	; 0xbc
 80090f2:	d00a      	beq.n	800910a <xTaskCreateStatic+0x66>
	__asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	61bb      	str	r3, [r7, #24]
}
 8009106:	bf00      	nop
 8009108:	e7fe      	b.n	8009108 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800910a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800910c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910e:	2b00      	cmp	r3, #0
 8009110:	d01e      	beq.n	8009150 <xTaskCreateStatic+0xac>
 8009112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01b      	beq.n	8009150 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009120:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	2202      	movs	r2, #2
 8009126:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800912a:	2300      	movs	r3, #0
 800912c:	9303      	str	r3, [sp, #12]
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	9302      	str	r3, [sp, #8]
 8009132:	f107 0314 	add.w	r3, r7, #20
 8009136:	9301      	str	r3, [sp, #4]
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 f850 	bl	80091e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800914a:	f000 f8f3 	bl	8009334 <prvAddNewTaskToReadyList>
 800914e:	e001      	b.n	8009154 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009150:	2300      	movs	r3, #0
 8009152:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009154:	697b      	ldr	r3, [r7, #20]
	}
 8009156:	4618      	mov	r0, r3
 8009158:	3728      	adds	r7, #40	; 0x28
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800915e:	b580      	push	{r7, lr}
 8009160:	b08c      	sub	sp, #48	; 0x30
 8009162:	af04      	add	r7, sp, #16
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	603b      	str	r3, [r7, #0]
 800916a:	4613      	mov	r3, r2
 800916c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800916e:	88fb      	ldrh	r3, [r7, #6]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4618      	mov	r0, r3
 8009174:	f001 fc58 	bl	800aa28 <pvPortMalloc>
 8009178:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00e      	beq.n	800919e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009180:	20bc      	movs	r0, #188	; 0xbc
 8009182:	f001 fc51 	bl	800aa28 <pvPortMalloc>
 8009186:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	631a      	str	r2, [r3, #48]	; 0x30
 8009194:	e005      	b.n	80091a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009196:	6978      	ldr	r0, [r7, #20]
 8009198:	f001 fd12 	bl	800abc0 <vPortFree>
 800919c:	e001      	b.n	80091a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d017      	beq.n	80091d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091b0:	88fa      	ldrh	r2, [r7, #6]
 80091b2:	2300      	movs	r3, #0
 80091b4:	9303      	str	r3, [sp, #12]
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	9302      	str	r3, [sp, #8]
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	68b9      	ldr	r1, [r7, #8]
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 f80e 	bl	80091e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091cc:	69f8      	ldr	r0, [r7, #28]
 80091ce:	f000 f8b1 	bl	8009334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091d2:	2301      	movs	r3, #1
 80091d4:	61bb      	str	r3, [r7, #24]
 80091d6:	e002      	b.n	80091de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80091de:	69bb      	ldr	r3, [r7, #24]
	}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3720      	adds	r7, #32
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b088      	sub	sp, #32
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	461a      	mov	r2, r3
 8009200:	21a5      	movs	r1, #165	; 0xa5
 8009202:	f002 f947 	bl	800b494 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009210:	3b01      	subs	r3, #1
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	f023 0307 	bic.w	r3, r3, #7
 800921e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00a      	beq.n	8009240 <prvInitialiseNewTask+0x58>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	617b      	str	r3, [r7, #20]
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d01f      	beq.n	8009286 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009246:	2300      	movs	r3, #0
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	e012      	b.n	8009272 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	4413      	add	r3, r2
 8009252:	7819      	ldrb	r1, [r3, #0]
 8009254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	4413      	add	r3, r2
 800925a:	3334      	adds	r3, #52	; 0x34
 800925c:	460a      	mov	r2, r1
 800925e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	4413      	add	r3, r2
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d006      	beq.n	800927a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	3301      	adds	r3, #1
 8009270:	61fb      	str	r3, [r7, #28]
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	2b0f      	cmp	r3, #15
 8009276:	d9e9      	bls.n	800924c <prvInitialiseNewTask+0x64>
 8009278:	e000      	b.n	800927c <prvInitialiseNewTask+0x94>
			{
				break;
 800927a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927e:	2200      	movs	r2, #0
 8009280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009284:	e003      	b.n	800928e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009290:	2b37      	cmp	r3, #55	; 0x37
 8009292:	d901      	bls.n	8009298 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009294:	2337      	movs	r3, #55	; 0x37
 8009296:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800929c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	2200      	movs	r2, #0
 80092a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ac:	3304      	adds	r3, #4
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff f8be 	bl	8008430 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	3318      	adds	r3, #24
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7ff f8b9 	bl	8008430 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80092d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	3354      	adds	r3, #84	; 0x54
 80092e8:	2260      	movs	r2, #96	; 0x60
 80092ea:	2100      	movs	r1, #0
 80092ec:	4618      	mov	r0, r3
 80092ee:	f002 f8d1 	bl	800b494 <memset>
 80092f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f4:	4a0c      	ldr	r2, [pc, #48]	; (8009328 <prvInitialiseNewTask+0x140>)
 80092f6:	659a      	str	r2, [r3, #88]	; 0x58
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	4a0c      	ldr	r2, [pc, #48]	; (800932c <prvInitialiseNewTask+0x144>)
 80092fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	4a0b      	ldr	r2, [pc, #44]	; (8009330 <prvInitialiseNewTask+0x148>)
 8009302:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	68f9      	ldr	r1, [r7, #12]
 8009308:	69b8      	ldr	r0, [r7, #24]
 800930a:	f001 f941 	bl	800a590 <pxPortInitialiseStack>
 800930e:	4602      	mov	r2, r0
 8009310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009312:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800931a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800931e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009320:	bf00      	nop
 8009322:	3720      	adds	r7, #32
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	0800b7ac 	.word	0x0800b7ac
 800932c:	0800b7cc 	.word	0x0800b7cc
 8009330:	0800b78c 	.word	0x0800b78c

08009334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800933c:	f001 fa52 	bl	800a7e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009340:	4b2d      	ldr	r3, [pc, #180]	; (80093f8 <prvAddNewTaskToReadyList+0xc4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3301      	adds	r3, #1
 8009346:	4a2c      	ldr	r2, [pc, #176]	; (80093f8 <prvAddNewTaskToReadyList+0xc4>)
 8009348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800934a:	4b2c      	ldr	r3, [pc, #176]	; (80093fc <prvAddNewTaskToReadyList+0xc8>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d109      	bne.n	8009366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009352:	4a2a      	ldr	r2, [pc, #168]	; (80093fc <prvAddNewTaskToReadyList+0xc8>)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009358:	4b27      	ldr	r3, [pc, #156]	; (80093f8 <prvAddNewTaskToReadyList+0xc4>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d110      	bne.n	8009382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009360:	f000 fc26 	bl	8009bb0 <prvInitialiseTaskLists>
 8009364:	e00d      	b.n	8009382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009366:	4b26      	ldr	r3, [pc, #152]	; (8009400 <prvAddNewTaskToReadyList+0xcc>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d109      	bne.n	8009382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800936e:	4b23      	ldr	r3, [pc, #140]	; (80093fc <prvAddNewTaskToReadyList+0xc8>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009378:	429a      	cmp	r2, r3
 800937a:	d802      	bhi.n	8009382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800937c:	4a1f      	ldr	r2, [pc, #124]	; (80093fc <prvAddNewTaskToReadyList+0xc8>)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009382:	4b20      	ldr	r3, [pc, #128]	; (8009404 <prvAddNewTaskToReadyList+0xd0>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3301      	adds	r3, #1
 8009388:	4a1e      	ldr	r2, [pc, #120]	; (8009404 <prvAddNewTaskToReadyList+0xd0>)
 800938a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800938c:	4b1d      	ldr	r3, [pc, #116]	; (8009404 <prvAddNewTaskToReadyList+0xd0>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009398:	4b1b      	ldr	r3, [pc, #108]	; (8009408 <prvAddNewTaskToReadyList+0xd4>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d903      	bls.n	80093a8 <prvAddNewTaskToReadyList+0x74>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a4:	4a18      	ldr	r2, [pc, #96]	; (8009408 <prvAddNewTaskToReadyList+0xd4>)
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4a15      	ldr	r2, [pc, #84]	; (800940c <prvAddNewTaskToReadyList+0xd8>)
 80093b6:	441a      	add	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	3304      	adds	r3, #4
 80093bc:	4619      	mov	r1, r3
 80093be:	4610      	mov	r0, r2
 80093c0:	f7ff f843 	bl	800844a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093c4:	f001 fa3e 	bl	800a844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093c8:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <prvAddNewTaskToReadyList+0xcc>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00e      	beq.n	80093ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093d0:	4b0a      	ldr	r3, [pc, #40]	; (80093fc <prvAddNewTaskToReadyList+0xc8>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093da:	429a      	cmp	r2, r3
 80093dc:	d207      	bcs.n	80093ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093de:	4b0c      	ldr	r3, [pc, #48]	; (8009410 <prvAddNewTaskToReadyList+0xdc>)
 80093e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ee:	bf00      	nop
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20000d04 	.word	0x20000d04
 80093fc:	20000830 	.word	0x20000830
 8009400:	20000d10 	.word	0x20000d10
 8009404:	20000d20 	.word	0x20000d20
 8009408:	20000d0c 	.word	0x20000d0c
 800940c:	20000834 	.word	0x20000834
 8009410:	e000ed04 	.word	0xe000ed04

08009414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800941c:	2300      	movs	r3, #0
 800941e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d017      	beq.n	8009456 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009426:	4b13      	ldr	r3, [pc, #76]	; (8009474 <vTaskDelay+0x60>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <vTaskDelay+0x30>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	60bb      	str	r3, [r7, #8]
}
 8009440:	bf00      	nop
 8009442:	e7fe      	b.n	8009442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009444:	f000 f88a 	bl	800955c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009448:	2100      	movs	r1, #0
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fcfe 	bl	8009e4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009450:	f000 f892 	bl	8009578 <xTaskResumeAll>
 8009454:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d107      	bne.n	800946c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800945c:	4b06      	ldr	r3, [pc, #24]	; (8009478 <vTaskDelay+0x64>)
 800945e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800946c:	bf00      	nop
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20000d2c 	.word	0x20000d2c
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b08a      	sub	sp, #40	; 0x28
 8009480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009482:	2300      	movs	r3, #0
 8009484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009486:	2300      	movs	r3, #0
 8009488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800948a:	463a      	mov	r2, r7
 800948c:	1d39      	adds	r1, r7, #4
 800948e:	f107 0308 	add.w	r3, r7, #8
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe ff78 	bl	8008388 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	9202      	str	r2, [sp, #8]
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	2300      	movs	r3, #0
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	2300      	movs	r3, #0
 80094a8:	460a      	mov	r2, r1
 80094aa:	4924      	ldr	r1, [pc, #144]	; (800953c <vTaskStartScheduler+0xc0>)
 80094ac:	4824      	ldr	r0, [pc, #144]	; (8009540 <vTaskStartScheduler+0xc4>)
 80094ae:	f7ff fdf9 	bl	80090a4 <xTaskCreateStatic>
 80094b2:	4603      	mov	r3, r0
 80094b4:	4a23      	ldr	r2, [pc, #140]	; (8009544 <vTaskStartScheduler+0xc8>)
 80094b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80094b8:	4b22      	ldr	r3, [pc, #136]	; (8009544 <vTaskStartScheduler+0xc8>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80094c0:	2301      	movs	r3, #1
 80094c2:	617b      	str	r3, [r7, #20]
 80094c4:	e001      	b.n	80094ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d102      	bne.n	80094d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80094d0:	f000 fd10 	bl	8009ef4 <xTimerCreateTimerTask>
 80094d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d11b      	bne.n	8009514 <vTaskStartScheduler+0x98>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	613b      	str	r3, [r7, #16]
}
 80094ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80094f0:	4b15      	ldr	r3, [pc, #84]	; (8009548 <vTaskStartScheduler+0xcc>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3354      	adds	r3, #84	; 0x54
 80094f6:	4a15      	ldr	r2, [pc, #84]	; (800954c <vTaskStartScheduler+0xd0>)
 80094f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094fa:	4b15      	ldr	r3, [pc, #84]	; (8009550 <vTaskStartScheduler+0xd4>)
 80094fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009500:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009502:	4b14      	ldr	r3, [pc, #80]	; (8009554 <vTaskStartScheduler+0xd8>)
 8009504:	2201      	movs	r2, #1
 8009506:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009508:	4b13      	ldr	r3, [pc, #76]	; (8009558 <vTaskStartScheduler+0xdc>)
 800950a:	2200      	movs	r2, #0
 800950c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800950e:	f001 f8c7 	bl	800a6a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009512:	e00e      	b.n	8009532 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800951a:	d10a      	bne.n	8009532 <vTaskStartScheduler+0xb6>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	60fb      	str	r3, [r7, #12]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <vTaskStartScheduler+0xb4>
}
 8009532:	bf00      	nop
 8009534:	3718      	adds	r7, #24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	0800b738 	.word	0x0800b738
 8009540:	08009b81 	.word	0x08009b81
 8009544:	20000d28 	.word	0x20000d28
 8009548:	20000830 	.word	0x20000830
 800954c:	20000030 	.word	0x20000030
 8009550:	20000d24 	.word	0x20000d24
 8009554:	20000d10 	.word	0x20000d10
 8009558:	20000d08 	.word	0x20000d08

0800955c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009560:	4b04      	ldr	r3, [pc, #16]	; (8009574 <vTaskSuspendAll+0x18>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3301      	adds	r3, #1
 8009566:	4a03      	ldr	r2, [pc, #12]	; (8009574 <vTaskSuspendAll+0x18>)
 8009568:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800956a:	bf00      	nop
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	20000d2c 	.word	0x20000d2c

08009578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800957e:	2300      	movs	r3, #0
 8009580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009582:	2300      	movs	r3, #0
 8009584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009586:	4b42      	ldr	r3, [pc, #264]	; (8009690 <xTaskResumeAll+0x118>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10a      	bne.n	80095a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	603b      	str	r3, [r7, #0]
}
 80095a0:	bf00      	nop
 80095a2:	e7fe      	b.n	80095a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095a4:	f001 f91e 	bl	800a7e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095a8:	4b39      	ldr	r3, [pc, #228]	; (8009690 <xTaskResumeAll+0x118>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	4a38      	ldr	r2, [pc, #224]	; (8009690 <xTaskResumeAll+0x118>)
 80095b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b2:	4b37      	ldr	r3, [pc, #220]	; (8009690 <xTaskResumeAll+0x118>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d162      	bne.n	8009680 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095ba:	4b36      	ldr	r3, [pc, #216]	; (8009694 <xTaskResumeAll+0x11c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d05e      	beq.n	8009680 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095c2:	e02f      	b.n	8009624 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c4:	4b34      	ldr	r3, [pc, #208]	; (8009698 <xTaskResumeAll+0x120>)
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	3318      	adds	r3, #24
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe ff97 	bl	8008504 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3304      	adds	r3, #4
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe ff92 	bl	8008504 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e4:	4b2d      	ldr	r3, [pc, #180]	; (800969c <xTaskResumeAll+0x124>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d903      	bls.n	80095f4 <xTaskResumeAll+0x7c>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f0:	4a2a      	ldr	r2, [pc, #168]	; (800969c <xTaskResumeAll+0x124>)
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f8:	4613      	mov	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4413      	add	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4a27      	ldr	r2, [pc, #156]	; (80096a0 <xTaskResumeAll+0x128>)
 8009602:	441a      	add	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3304      	adds	r3, #4
 8009608:	4619      	mov	r1, r3
 800960a:	4610      	mov	r0, r2
 800960c:	f7fe ff1d 	bl	800844a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009614:	4b23      	ldr	r3, [pc, #140]	; (80096a4 <xTaskResumeAll+0x12c>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961a:	429a      	cmp	r2, r3
 800961c:	d302      	bcc.n	8009624 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800961e:	4b22      	ldr	r3, [pc, #136]	; (80096a8 <xTaskResumeAll+0x130>)
 8009620:	2201      	movs	r2, #1
 8009622:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009624:	4b1c      	ldr	r3, [pc, #112]	; (8009698 <xTaskResumeAll+0x120>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1cb      	bne.n	80095c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009632:	f000 fb5f 	bl	8009cf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009636:	4b1d      	ldr	r3, [pc, #116]	; (80096ac <xTaskResumeAll+0x134>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d010      	beq.n	8009664 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009642:	f000 f847 	bl	80096d4 <xTaskIncrementTick>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800964c:	4b16      	ldr	r3, [pc, #88]	; (80096a8 <xTaskResumeAll+0x130>)
 800964e:	2201      	movs	r2, #1
 8009650:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	3b01      	subs	r3, #1
 8009656:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1f1      	bne.n	8009642 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800965e:	4b13      	ldr	r3, [pc, #76]	; (80096ac <xTaskResumeAll+0x134>)
 8009660:	2200      	movs	r2, #0
 8009662:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009664:	4b10      	ldr	r3, [pc, #64]	; (80096a8 <xTaskResumeAll+0x130>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d009      	beq.n	8009680 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800966c:	2301      	movs	r3, #1
 800966e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009670:	4b0f      	ldr	r3, [pc, #60]	; (80096b0 <xTaskResumeAll+0x138>)
 8009672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009680:	f001 f8e0 	bl	800a844 <vPortExitCritical>

	return xAlreadyYielded;
 8009684:	68bb      	ldr	r3, [r7, #8]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20000d2c 	.word	0x20000d2c
 8009694:	20000d04 	.word	0x20000d04
 8009698:	20000cc4 	.word	0x20000cc4
 800969c:	20000d0c 	.word	0x20000d0c
 80096a0:	20000834 	.word	0x20000834
 80096a4:	20000830 	.word	0x20000830
 80096a8:	20000d18 	.word	0x20000d18
 80096ac:	20000d14 	.word	0x20000d14
 80096b0:	e000ed04 	.word	0xe000ed04

080096b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80096ba:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <xTaskGetTickCount+0x1c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80096c0:	687b      	ldr	r3, [r7, #4]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	20000d08 	.word	0x20000d08

080096d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80096da:	2300      	movs	r3, #0
 80096dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096de:	4b4f      	ldr	r3, [pc, #316]	; (800981c <xTaskIncrementTick+0x148>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f040 808f 	bne.w	8009806 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096e8:	4b4d      	ldr	r3, [pc, #308]	; (8009820 <xTaskIncrementTick+0x14c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3301      	adds	r3, #1
 80096ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096f0:	4a4b      	ldr	r2, [pc, #300]	; (8009820 <xTaskIncrementTick+0x14c>)
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d120      	bne.n	800973e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80096fc:	4b49      	ldr	r3, [pc, #292]	; (8009824 <xTaskIncrementTick+0x150>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00a      	beq.n	800971c <xTaskIncrementTick+0x48>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	603b      	str	r3, [r7, #0]
}
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <xTaskIncrementTick+0x46>
 800971c:	4b41      	ldr	r3, [pc, #260]	; (8009824 <xTaskIncrementTick+0x150>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	4b41      	ldr	r3, [pc, #260]	; (8009828 <xTaskIncrementTick+0x154>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a3f      	ldr	r2, [pc, #252]	; (8009824 <xTaskIncrementTick+0x150>)
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	4a3f      	ldr	r2, [pc, #252]	; (8009828 <xTaskIncrementTick+0x154>)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	4b3e      	ldr	r3, [pc, #248]	; (800982c <xTaskIncrementTick+0x158>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3301      	adds	r3, #1
 8009736:	4a3d      	ldr	r2, [pc, #244]	; (800982c <xTaskIncrementTick+0x158>)
 8009738:	6013      	str	r3, [r2, #0]
 800973a:	f000 fadb 	bl	8009cf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800973e:	4b3c      	ldr	r3, [pc, #240]	; (8009830 <xTaskIncrementTick+0x15c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	429a      	cmp	r2, r3
 8009746:	d349      	bcc.n	80097dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009748:	4b36      	ldr	r3, [pc, #216]	; (8009824 <xTaskIncrementTick+0x150>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d104      	bne.n	800975c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009752:	4b37      	ldr	r3, [pc, #220]	; (8009830 <xTaskIncrementTick+0x15c>)
 8009754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009758:	601a      	str	r2, [r3, #0]
					break;
 800975a:	e03f      	b.n	80097dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975c:	4b31      	ldr	r3, [pc, #196]	; (8009824 <xTaskIncrementTick+0x150>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d203      	bcs.n	800977c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009774:	4a2e      	ldr	r2, [pc, #184]	; (8009830 <xTaskIncrementTick+0x15c>)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800977a:	e02f      	b.n	80097dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	3304      	adds	r3, #4
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe febf 	bl	8008504 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	2b00      	cmp	r3, #0
 800978c:	d004      	beq.n	8009798 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	3318      	adds	r3, #24
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe feb6 	bl	8008504 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979c:	4b25      	ldr	r3, [pc, #148]	; (8009834 <xTaskIncrementTick+0x160>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d903      	bls.n	80097ac <xTaskIncrementTick+0xd8>
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a8:	4a22      	ldr	r2, [pc, #136]	; (8009834 <xTaskIncrementTick+0x160>)
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b0:	4613      	mov	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4a1f      	ldr	r2, [pc, #124]	; (8009838 <xTaskIncrementTick+0x164>)
 80097ba:	441a      	add	r2, r3
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	3304      	adds	r3, #4
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f7fe fe41 	bl	800844a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097cc:	4b1b      	ldr	r3, [pc, #108]	; (800983c <xTaskIncrementTick+0x168>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d3b8      	bcc.n	8009748 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80097d6:	2301      	movs	r3, #1
 80097d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097da:	e7b5      	b.n	8009748 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097dc:	4b17      	ldr	r3, [pc, #92]	; (800983c <xTaskIncrementTick+0x168>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e2:	4915      	ldr	r1, [pc, #84]	; (8009838 <xTaskIncrementTick+0x164>)
 80097e4:	4613      	mov	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	440b      	add	r3, r1
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d901      	bls.n	80097f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80097f4:	2301      	movs	r3, #1
 80097f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80097f8:	4b11      	ldr	r3, [pc, #68]	; (8009840 <xTaskIncrementTick+0x16c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d007      	beq.n	8009810 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009800:	2301      	movs	r3, #1
 8009802:	617b      	str	r3, [r7, #20]
 8009804:	e004      	b.n	8009810 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009806:	4b0f      	ldr	r3, [pc, #60]	; (8009844 <xTaskIncrementTick+0x170>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3301      	adds	r3, #1
 800980c:	4a0d      	ldr	r2, [pc, #52]	; (8009844 <xTaskIncrementTick+0x170>)
 800980e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009810:	697b      	ldr	r3, [r7, #20]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	20000d2c 	.word	0x20000d2c
 8009820:	20000d08 	.word	0x20000d08
 8009824:	20000cbc 	.word	0x20000cbc
 8009828:	20000cc0 	.word	0x20000cc0
 800982c:	20000d1c 	.word	0x20000d1c
 8009830:	20000d24 	.word	0x20000d24
 8009834:	20000d0c 	.word	0x20000d0c
 8009838:	20000834 	.word	0x20000834
 800983c:	20000830 	.word	0x20000830
 8009840:	20000d18 	.word	0x20000d18
 8009844:	20000d14 	.word	0x20000d14

08009848 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800984e:	4b2a      	ldr	r3, [pc, #168]	; (80098f8 <vTaskSwitchContext+0xb0>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d003      	beq.n	800985e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009856:	4b29      	ldr	r3, [pc, #164]	; (80098fc <vTaskSwitchContext+0xb4>)
 8009858:	2201      	movs	r2, #1
 800985a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800985c:	e046      	b.n	80098ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800985e:	4b27      	ldr	r3, [pc, #156]	; (80098fc <vTaskSwitchContext+0xb4>)
 8009860:	2200      	movs	r2, #0
 8009862:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009864:	4b26      	ldr	r3, [pc, #152]	; (8009900 <vTaskSwitchContext+0xb8>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	60fb      	str	r3, [r7, #12]
 800986a:	e010      	b.n	800988e <vTaskSwitchContext+0x46>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10a      	bne.n	8009888 <vTaskSwitchContext+0x40>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	607b      	str	r3, [r7, #4]
}
 8009884:	bf00      	nop
 8009886:	e7fe      	b.n	8009886 <vTaskSwitchContext+0x3e>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3b01      	subs	r3, #1
 800988c:	60fb      	str	r3, [r7, #12]
 800988e:	491d      	ldr	r1, [pc, #116]	; (8009904 <vTaskSwitchContext+0xbc>)
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	440b      	add	r3, r1
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0e4      	beq.n	800986c <vTaskSwitchContext+0x24>
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	4613      	mov	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4a15      	ldr	r2, [pc, #84]	; (8009904 <vTaskSwitchContext+0xbc>)
 80098ae:	4413      	add	r3, r2
 80098b0:	60bb      	str	r3, [r7, #8]
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	605a      	str	r2, [r3, #4]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	3308      	adds	r3, #8
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d104      	bne.n	80098d2 <vTaskSwitchContext+0x8a>
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	605a      	str	r2, [r3, #4]
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	4a0b      	ldr	r2, [pc, #44]	; (8009908 <vTaskSwitchContext+0xc0>)
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	4a08      	ldr	r2, [pc, #32]	; (8009900 <vTaskSwitchContext+0xb8>)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <vTaskSwitchContext+0xc0>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3354      	adds	r3, #84	; 0x54
 80098e8:	4a08      	ldr	r2, [pc, #32]	; (800990c <vTaskSwitchContext+0xc4>)
 80098ea:	6013      	str	r3, [r2, #0]
}
 80098ec:	bf00      	nop
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	20000d2c 	.word	0x20000d2c
 80098fc:	20000d18 	.word	0x20000d18
 8009900:	20000d0c 	.word	0x20000d0c
 8009904:	20000834 	.word	0x20000834
 8009908:	20000830 	.word	0x20000830
 800990c:	20000030 	.word	0x20000030

08009910 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10a      	bne.n	8009936 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	60fb      	str	r3, [r7, #12]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009936:	4b07      	ldr	r3, [pc, #28]	; (8009954 <vTaskPlaceOnEventList+0x44>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3318      	adds	r3, #24
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7fe fda7 	bl	8008492 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009944:	2101      	movs	r1, #1
 8009946:	6838      	ldr	r0, [r7, #0]
 8009948:	f000 fa80 	bl	8009e4c <prvAddCurrentTaskToDelayedList>
}
 800994c:	bf00      	nop
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20000830 	.word	0x20000830

08009958 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10a      	bne.n	8009980 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	617b      	str	r3, [r7, #20]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009980:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <vTaskPlaceOnEventListRestricted+0x54>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3318      	adds	r3, #24
 8009986:	4619      	mov	r1, r3
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f7fe fd5e 	bl	800844a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009998:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	68b8      	ldr	r0, [r7, #8]
 800999e:	f000 fa55 	bl	8009e4c <prvAddCurrentTaskToDelayedList>
	}
 80099a2:	bf00      	nop
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20000830 	.word	0x20000830

080099b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10a      	bne.n	80099dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	60fb      	str	r3, [r7, #12]
}
 80099d8:	bf00      	nop
 80099da:	e7fe      	b.n	80099da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	3318      	adds	r3, #24
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fe fd8f 	bl	8008504 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099e6:	4b1e      	ldr	r3, [pc, #120]	; (8009a60 <xTaskRemoveFromEventList+0xb0>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d11d      	bne.n	8009a2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	3304      	adds	r3, #4
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe fd86 	bl	8008504 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fc:	4b19      	ldr	r3, [pc, #100]	; (8009a64 <xTaskRemoveFromEventList+0xb4>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d903      	bls.n	8009a0c <xTaskRemoveFromEventList+0x5c>
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a08:	4a16      	ldr	r2, [pc, #88]	; (8009a64 <xTaskRemoveFromEventList+0xb4>)
 8009a0a:	6013      	str	r3, [r2, #0]
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a10:	4613      	mov	r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4a13      	ldr	r2, [pc, #76]	; (8009a68 <xTaskRemoveFromEventList+0xb8>)
 8009a1a:	441a      	add	r2, r3
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	4619      	mov	r1, r3
 8009a22:	4610      	mov	r0, r2
 8009a24:	f7fe fd11 	bl	800844a <vListInsertEnd>
 8009a28:	e005      	b.n	8009a36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	3318      	adds	r3, #24
 8009a2e:	4619      	mov	r1, r3
 8009a30:	480e      	ldr	r0, [pc, #56]	; (8009a6c <xTaskRemoveFromEventList+0xbc>)
 8009a32:	f7fe fd0a 	bl	800844a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3a:	4b0d      	ldr	r3, [pc, #52]	; (8009a70 <xTaskRemoveFromEventList+0xc0>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d905      	bls.n	8009a50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a44:	2301      	movs	r3, #1
 8009a46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a48:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <xTaskRemoveFromEventList+0xc4>)
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	e001      	b.n	8009a54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009a50:	2300      	movs	r3, #0
 8009a52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a54:	697b      	ldr	r3, [r7, #20]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20000d2c 	.word	0x20000d2c
 8009a64:	20000d0c 	.word	0x20000d0c
 8009a68:	20000834 	.word	0x20000834
 8009a6c:	20000cc4 	.word	0x20000cc4
 8009a70:	20000830 	.word	0x20000830
 8009a74:	20000d18 	.word	0x20000d18

08009a78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a80:	4b06      	ldr	r3, [pc, #24]	; (8009a9c <vTaskInternalSetTimeOutState+0x24>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a88:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <vTaskInternalSetTimeOutState+0x28>)
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	605a      	str	r2, [r3, #4]
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	20000d1c 	.word	0x20000d1c
 8009aa0:	20000d08 	.word	0x20000d08

08009aa4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b088      	sub	sp, #32
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10a      	bne.n	8009aca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	613b      	str	r3, [r7, #16]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10a      	bne.n	8009ae6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	60fb      	str	r3, [r7, #12]
}
 8009ae2:	bf00      	nop
 8009ae4:	e7fe      	b.n	8009ae4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009ae6:	f000 fe7d 	bl	800a7e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009aea:	4b1d      	ldr	r3, [pc, #116]	; (8009b60 <xTaskCheckForTimeOut+0xbc>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b02:	d102      	bne.n	8009b0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b04:	2300      	movs	r3, #0
 8009b06:	61fb      	str	r3, [r7, #28]
 8009b08:	e023      	b.n	8009b52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	4b15      	ldr	r3, [pc, #84]	; (8009b64 <xTaskCheckForTimeOut+0xc0>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d007      	beq.n	8009b26 <xTaskCheckForTimeOut+0x82>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	69ba      	ldr	r2, [r7, #24]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d302      	bcc.n	8009b26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b20:	2301      	movs	r3, #1
 8009b22:	61fb      	str	r3, [r7, #28]
 8009b24:	e015      	b.n	8009b52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d20b      	bcs.n	8009b48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	1ad2      	subs	r2, r2, r3
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff ff9b 	bl	8009a78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	61fb      	str	r3, [r7, #28]
 8009b46:	e004      	b.n	8009b52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b52:	f000 fe77 	bl	800a844 <vPortExitCritical>

	return xReturn;
 8009b56:	69fb      	ldr	r3, [r7, #28]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20000d08 	.word	0x20000d08
 8009b64:	20000d1c 	.word	0x20000d1c

08009b68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b6c:	4b03      	ldr	r3, [pc, #12]	; (8009b7c <vTaskMissedYield+0x14>)
 8009b6e:	2201      	movs	r2, #1
 8009b70:	601a      	str	r2, [r3, #0]
}
 8009b72:	bf00      	nop
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	20000d18 	.word	0x20000d18

08009b80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b88:	f000 f852 	bl	8009c30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b8c:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <prvIdleTask+0x28>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d9f9      	bls.n	8009b88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b94:	4b05      	ldr	r3, [pc, #20]	; (8009bac <prvIdleTask+0x2c>)
 8009b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ba4:	e7f0      	b.n	8009b88 <prvIdleTask+0x8>
 8009ba6:	bf00      	nop
 8009ba8:	20000834 	.word	0x20000834
 8009bac:	e000ed04 	.word	0xe000ed04

08009bb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	607b      	str	r3, [r7, #4]
 8009bba:	e00c      	b.n	8009bd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4a12      	ldr	r2, [pc, #72]	; (8009c10 <prvInitialiseTaskLists+0x60>)
 8009bc8:	4413      	add	r3, r2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fe fc10 	bl	80083f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	607b      	str	r3, [r7, #4]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b37      	cmp	r3, #55	; 0x37
 8009bda:	d9ef      	bls.n	8009bbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009bdc:	480d      	ldr	r0, [pc, #52]	; (8009c14 <prvInitialiseTaskLists+0x64>)
 8009bde:	f7fe fc07 	bl	80083f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009be2:	480d      	ldr	r0, [pc, #52]	; (8009c18 <prvInitialiseTaskLists+0x68>)
 8009be4:	f7fe fc04 	bl	80083f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009be8:	480c      	ldr	r0, [pc, #48]	; (8009c1c <prvInitialiseTaskLists+0x6c>)
 8009bea:	f7fe fc01 	bl	80083f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009bee:	480c      	ldr	r0, [pc, #48]	; (8009c20 <prvInitialiseTaskLists+0x70>)
 8009bf0:	f7fe fbfe 	bl	80083f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009bf4:	480b      	ldr	r0, [pc, #44]	; (8009c24 <prvInitialiseTaskLists+0x74>)
 8009bf6:	f7fe fbfb 	bl	80083f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009bfa:	4b0b      	ldr	r3, [pc, #44]	; (8009c28 <prvInitialiseTaskLists+0x78>)
 8009bfc:	4a05      	ldr	r2, [pc, #20]	; (8009c14 <prvInitialiseTaskLists+0x64>)
 8009bfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c00:	4b0a      	ldr	r3, [pc, #40]	; (8009c2c <prvInitialiseTaskLists+0x7c>)
 8009c02:	4a05      	ldr	r2, [pc, #20]	; (8009c18 <prvInitialiseTaskLists+0x68>)
 8009c04:	601a      	str	r2, [r3, #0]
}
 8009c06:	bf00      	nop
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	20000834 	.word	0x20000834
 8009c14:	20000c94 	.word	0x20000c94
 8009c18:	20000ca8 	.word	0x20000ca8
 8009c1c:	20000cc4 	.word	0x20000cc4
 8009c20:	20000cd8 	.word	0x20000cd8
 8009c24:	20000cf0 	.word	0x20000cf0
 8009c28:	20000cbc 	.word	0x20000cbc
 8009c2c:	20000cc0 	.word	0x20000cc0

08009c30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c36:	e019      	b.n	8009c6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c38:	f000 fdd4 	bl	800a7e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c3c:	4b10      	ldr	r3, [pc, #64]	; (8009c80 <prvCheckTasksWaitingTermination+0x50>)
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	3304      	adds	r3, #4
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fe fc5b 	bl	8008504 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c4e:	4b0d      	ldr	r3, [pc, #52]	; (8009c84 <prvCheckTasksWaitingTermination+0x54>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	4a0b      	ldr	r2, [pc, #44]	; (8009c84 <prvCheckTasksWaitingTermination+0x54>)
 8009c56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c58:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <prvCheckTasksWaitingTermination+0x58>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	4a0a      	ldr	r2, [pc, #40]	; (8009c88 <prvCheckTasksWaitingTermination+0x58>)
 8009c60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c62:	f000 fdef 	bl	800a844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f810 	bl	8009c8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c6c:	4b06      	ldr	r3, [pc, #24]	; (8009c88 <prvCheckTasksWaitingTermination+0x58>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e1      	bne.n	8009c38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	20000cd8 	.word	0x20000cd8
 8009c84:	20000d04 	.word	0x20000d04
 8009c88:	20000cec 	.word	0x20000cec

08009c8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3354      	adds	r3, #84	; 0x54
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f001 fcbb 	bl	800b614 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d108      	bne.n	8009cba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 ff87 	bl	800abc0 <vPortFree>
				vPortFree( pxTCB );
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 ff84 	bl	800abc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cb8:	e018      	b.n	8009cec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d103      	bne.n	8009ccc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 ff7b 	bl	800abc0 <vPortFree>
	}
 8009cca:	e00f      	b.n	8009cec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d00a      	beq.n	8009cec <prvDeleteTCB+0x60>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	60fb      	str	r3, [r7, #12]
}
 8009ce8:	bf00      	nop
 8009cea:	e7fe      	b.n	8009cea <prvDeleteTCB+0x5e>
	}
 8009cec:	bf00      	nop
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cfa:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <prvResetNextTaskUnblockTime+0x38>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d104      	bne.n	8009d0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d04:	4b0a      	ldr	r3, [pc, #40]	; (8009d30 <prvResetNextTaskUnblockTime+0x3c>)
 8009d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d0c:	e008      	b.n	8009d20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d0e:	4b07      	ldr	r3, [pc, #28]	; (8009d2c <prvResetNextTaskUnblockTime+0x38>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	4a04      	ldr	r2, [pc, #16]	; (8009d30 <prvResetNextTaskUnblockTime+0x3c>)
 8009d1e:	6013      	str	r3, [r2, #0]
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	20000cbc 	.word	0x20000cbc
 8009d30:	20000d24 	.word	0x20000d24

08009d34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d3a:	4b0b      	ldr	r3, [pc, #44]	; (8009d68 <xTaskGetSchedulerState+0x34>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d102      	bne.n	8009d48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d42:	2301      	movs	r3, #1
 8009d44:	607b      	str	r3, [r7, #4]
 8009d46:	e008      	b.n	8009d5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d48:	4b08      	ldr	r3, [pc, #32]	; (8009d6c <xTaskGetSchedulerState+0x38>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d102      	bne.n	8009d56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d50:	2302      	movs	r3, #2
 8009d52:	607b      	str	r3, [r7, #4]
 8009d54:	e001      	b.n	8009d5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d56:	2300      	movs	r3, #0
 8009d58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d5a:	687b      	ldr	r3, [r7, #4]
	}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	20000d10 	.word	0x20000d10
 8009d6c:	20000d2c 	.word	0x20000d2c

08009d70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d056      	beq.n	8009e34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d86:	4b2e      	ldr	r3, [pc, #184]	; (8009e40 <xTaskPriorityDisinherit+0xd0>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d00a      	beq.n	8009da6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	60fb      	str	r3, [r7, #12]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10a      	bne.n	8009dc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	60bb      	str	r3, [r7, #8]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dc8:	1e5a      	subs	r2, r3, #1
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d02c      	beq.n	8009e34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d128      	bne.n	8009e34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	3304      	adds	r3, #4
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe fb8c 	bl	8008504 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e04:	4b0f      	ldr	r3, [pc, #60]	; (8009e44 <xTaskPriorityDisinherit+0xd4>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d903      	bls.n	8009e14 <xTaskPriorityDisinherit+0xa4>
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e10:	4a0c      	ldr	r2, [pc, #48]	; (8009e44 <xTaskPriorityDisinherit+0xd4>)
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e18:	4613      	mov	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4413      	add	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4a09      	ldr	r2, [pc, #36]	; (8009e48 <xTaskPriorityDisinherit+0xd8>)
 8009e22:	441a      	add	r2, r3
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	3304      	adds	r3, #4
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f7fe fb0d 	bl	800844a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e30:	2301      	movs	r3, #1
 8009e32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e34:	697b      	ldr	r3, [r7, #20]
	}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3718      	adds	r7, #24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20000830 	.word	0x20000830
 8009e44:	20000d0c 	.word	0x20000d0c
 8009e48:	20000834 	.word	0x20000834

08009e4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e56:	4b21      	ldr	r3, [pc, #132]	; (8009edc <prvAddCurrentTaskToDelayedList+0x90>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e5c:	4b20      	ldr	r3, [pc, #128]	; (8009ee0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3304      	adds	r3, #4
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fe fb4e 	bl	8008504 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e6e:	d10a      	bne.n	8009e86 <prvAddCurrentTaskToDelayedList+0x3a>
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d007      	beq.n	8009e86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e76:	4b1a      	ldr	r3, [pc, #104]	; (8009ee0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4819      	ldr	r0, [pc, #100]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e80:	f7fe fae3 	bl	800844a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e84:	e026      	b.n	8009ed4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e8e:	4b14      	ldr	r3, [pc, #80]	; (8009ee0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e96:	68ba      	ldr	r2, [r7, #8]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d209      	bcs.n	8009eb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e9e:	4b12      	ldr	r3, [pc, #72]	; (8009ee8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	4b0f      	ldr	r3, [pc, #60]	; (8009ee0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7fe faf1 	bl	8008492 <vListInsert>
}
 8009eb0:	e010      	b.n	8009ed4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009eb2:	4b0e      	ldr	r3, [pc, #56]	; (8009eec <prvAddCurrentTaskToDelayedList+0xa0>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	4b0a      	ldr	r3, [pc, #40]	; (8009ee0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	f7fe fae7 	bl	8008492 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ec4:	4b0a      	ldr	r3, [pc, #40]	; (8009ef0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68ba      	ldr	r2, [r7, #8]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d202      	bcs.n	8009ed4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ece:	4a08      	ldr	r2, [pc, #32]	; (8009ef0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	6013      	str	r3, [r2, #0]
}
 8009ed4:	bf00      	nop
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	20000d08 	.word	0x20000d08
 8009ee0:	20000830 	.word	0x20000830
 8009ee4:	20000cf0 	.word	0x20000cf0
 8009ee8:	20000cc0 	.word	0x20000cc0
 8009eec:	20000cbc 	.word	0x20000cbc
 8009ef0:	20000d24 	.word	0x20000d24

08009ef4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b08a      	sub	sp, #40	; 0x28
 8009ef8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009efa:	2300      	movs	r3, #0
 8009efc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009efe:	f000 fb07 	bl	800a510 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f02:	4b1c      	ldr	r3, [pc, #112]	; (8009f74 <xTimerCreateTimerTask+0x80>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d021      	beq.n	8009f4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f12:	1d3a      	adds	r2, r7, #4
 8009f14:	f107 0108 	add.w	r1, r7, #8
 8009f18:	f107 030c 	add.w	r3, r7, #12
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe fa4d 	bl	80083bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	9202      	str	r2, [sp, #8]
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	2300      	movs	r3, #0
 8009f32:	460a      	mov	r2, r1
 8009f34:	4910      	ldr	r1, [pc, #64]	; (8009f78 <xTimerCreateTimerTask+0x84>)
 8009f36:	4811      	ldr	r0, [pc, #68]	; (8009f7c <xTimerCreateTimerTask+0x88>)
 8009f38:	f7ff f8b4 	bl	80090a4 <xTaskCreateStatic>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	4a10      	ldr	r2, [pc, #64]	; (8009f80 <xTimerCreateTimerTask+0x8c>)
 8009f40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f42:	4b0f      	ldr	r3, [pc, #60]	; (8009f80 <xTimerCreateTimerTask+0x8c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	613b      	str	r3, [r7, #16]
}
 8009f66:	bf00      	nop
 8009f68:	e7fe      	b.n	8009f68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f6a:	697b      	ldr	r3, [r7, #20]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	20000d60 	.word	0x20000d60
 8009f78:	0800b740 	.word	0x0800b740
 8009f7c:	0800a0b9 	.word	0x0800a0b9
 8009f80:	20000d64 	.word	0x20000d64

08009f84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08a      	sub	sp, #40	; 0x28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
 8009f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f92:	2300      	movs	r3, #0
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	623b      	str	r3, [r7, #32]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009fb2:	4b1a      	ldr	r3, [pc, #104]	; (800a01c <xTimerGenericCommand+0x98>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d02a      	beq.n	800a010 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2b05      	cmp	r3, #5
 8009fca:	dc18      	bgt.n	8009ffe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009fcc:	f7ff feb2 	bl	8009d34 <xTaskGetSchedulerState>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d109      	bne.n	8009fea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009fd6:	4b11      	ldr	r3, [pc, #68]	; (800a01c <xTimerGenericCommand+0x98>)
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	f107 0110 	add.w	r1, r7, #16
 8009fde:	2300      	movs	r3, #0
 8009fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fe2:	f7fe fbf7 	bl	80087d4 <xQueueGenericSend>
 8009fe6:	6278      	str	r0, [r7, #36]	; 0x24
 8009fe8:	e012      	b.n	800a010 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009fea:	4b0c      	ldr	r3, [pc, #48]	; (800a01c <xTimerGenericCommand+0x98>)
 8009fec:	6818      	ldr	r0, [r3, #0]
 8009fee:	f107 0110 	add.w	r1, r7, #16
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f7fe fbed 	bl	80087d4 <xQueueGenericSend>
 8009ffa:	6278      	str	r0, [r7, #36]	; 0x24
 8009ffc:	e008      	b.n	800a010 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ffe:	4b07      	ldr	r3, [pc, #28]	; (800a01c <xTimerGenericCommand+0x98>)
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	f107 0110 	add.w	r1, r7, #16
 800a006:	2300      	movs	r3, #0
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	f7fe fce1 	bl	80089d0 <xQueueGenericSendFromISR>
 800a00e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a012:	4618      	mov	r0, r3
 800a014:	3728      	adds	r7, #40	; 0x28
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20000d60 	.word	0x20000d60

0800a020 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b088      	sub	sp, #32
 800a024:	af02      	add	r7, sp, #8
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a02a:	4b22      	ldr	r3, [pc, #136]	; (800a0b4 <prvProcessExpiredTimer+0x94>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	3304      	adds	r3, #4
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fe fa63 	bl	8008504 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a044:	f003 0304 	and.w	r3, r3, #4
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d022      	beq.n	800a092 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	699a      	ldr	r2, [r3, #24]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	18d1      	adds	r1, r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	6978      	ldr	r0, [r7, #20]
 800a05a:	f000 f8d1 	bl	800a200 <prvInsertTimerInActiveList>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d01f      	beq.n	800a0a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a064:	2300      	movs	r3, #0
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	2300      	movs	r3, #0
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	2100      	movs	r1, #0
 800a06e:	6978      	ldr	r0, [r7, #20]
 800a070:	f7ff ff88 	bl	8009f84 <xTimerGenericCommand>
 800a074:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d113      	bne.n	800a0a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	60fb      	str	r3, [r7, #12]
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a098:	f023 0301 	bic.w	r3, r3, #1
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	6978      	ldr	r0, [r7, #20]
 800a0aa:	4798      	blx	r3
}
 800a0ac:	bf00      	nop
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20000d58 	.word	0x20000d58

0800a0b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0c0:	f107 0308 	add.w	r3, r7, #8
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 f857 	bl	800a178 <prvGetNextExpireTime>
 800a0ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 f803 	bl	800a0dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a0d6:	f000 f8d5 	bl	800a284 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0da:	e7f1      	b.n	800a0c0 <prvTimerTask+0x8>

0800a0dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a0e6:	f7ff fa39 	bl	800955c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0ea:	f107 0308 	add.w	r3, r7, #8
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 f866 	bl	800a1c0 <prvSampleTimeNow>
 800a0f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d130      	bne.n	800a15e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10a      	bne.n	800a118 <prvProcessTimerOrBlockTask+0x3c>
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	429a      	cmp	r2, r3
 800a108:	d806      	bhi.n	800a118 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a10a:	f7ff fa35 	bl	8009578 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a10e:	68f9      	ldr	r1, [r7, #12]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff ff85 	bl	800a020 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a116:	e024      	b.n	800a162 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d008      	beq.n	800a130 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a11e:	4b13      	ldr	r3, [pc, #76]	; (800a16c <prvProcessTimerOrBlockTask+0x90>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <prvProcessTimerOrBlockTask+0x50>
 800a128:	2301      	movs	r3, #1
 800a12a:	e000      	b.n	800a12e <prvProcessTimerOrBlockTask+0x52>
 800a12c:	2300      	movs	r3, #0
 800a12e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a130:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <prvProcessTimerOrBlockTask+0x94>)
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	4619      	mov	r1, r3
 800a13e:	f7fe ff7d 	bl	800903c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a142:	f7ff fa19 	bl	8009578 <xTaskResumeAll>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10a      	bne.n	800a162 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a14c:	4b09      	ldr	r3, [pc, #36]	; (800a174 <prvProcessTimerOrBlockTask+0x98>)
 800a14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	f3bf 8f6f 	isb	sy
}
 800a15c:	e001      	b.n	800a162 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a15e:	f7ff fa0b 	bl	8009578 <xTaskResumeAll>
}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000d5c 	.word	0x20000d5c
 800a170:	20000d60 	.word	0x20000d60
 800a174:	e000ed04 	.word	0xe000ed04

0800a178 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a180:	4b0e      	ldr	r3, [pc, #56]	; (800a1bc <prvGetNextExpireTime+0x44>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <prvGetNextExpireTime+0x16>
 800a18a:	2201      	movs	r2, #1
 800a18c:	e000      	b.n	800a190 <prvGetNextExpireTime+0x18>
 800a18e:	2200      	movs	r2, #0
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d105      	bne.n	800a1a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a19c:	4b07      	ldr	r3, [pc, #28]	; (800a1bc <prvGetNextExpireTime+0x44>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	60fb      	str	r3, [r7, #12]
 800a1a6:	e001      	b.n	800a1ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	20000d58 	.word	0x20000d58

0800a1c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a1c8:	f7ff fa74 	bl	80096b4 <xTaskGetTickCount>
 800a1cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a1ce:	4b0b      	ldr	r3, [pc, #44]	; (800a1fc <prvSampleTimeNow+0x3c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d205      	bcs.n	800a1e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a1d8:	f000 f936 	bl	800a448 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	e002      	b.n	800a1ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a1ea:	4a04      	ldr	r2, [pc, #16]	; (800a1fc <prvSampleTimeNow+0x3c>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000d68 	.word	0x20000d68

0800a200 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a20e:	2300      	movs	r3, #0
 800a210:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	429a      	cmp	r2, r3
 800a224:	d812      	bhi.n	800a24c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	1ad2      	subs	r2, r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	429a      	cmp	r2, r3
 800a232:	d302      	bcc.n	800a23a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a234:	2301      	movs	r3, #1
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	e01b      	b.n	800a272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a23a:	4b10      	ldr	r3, [pc, #64]	; (800a27c <prvInsertTimerInActiveList+0x7c>)
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3304      	adds	r3, #4
 800a242:	4619      	mov	r1, r3
 800a244:	4610      	mov	r0, r2
 800a246:	f7fe f924 	bl	8008492 <vListInsert>
 800a24a:	e012      	b.n	800a272 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	429a      	cmp	r2, r3
 800a252:	d206      	bcs.n	800a262 <prvInsertTimerInActiveList+0x62>
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d302      	bcc.n	800a262 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a25c:	2301      	movs	r3, #1
 800a25e:	617b      	str	r3, [r7, #20]
 800a260:	e007      	b.n	800a272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a262:	4b07      	ldr	r3, [pc, #28]	; (800a280 <prvInsertTimerInActiveList+0x80>)
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	3304      	adds	r3, #4
 800a26a:	4619      	mov	r1, r3
 800a26c:	4610      	mov	r0, r2
 800a26e:	f7fe f910 	bl	8008492 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a272:	697b      	ldr	r3, [r7, #20]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	20000d5c 	.word	0x20000d5c
 800a280:	20000d58 	.word	0x20000d58

0800a284 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b08e      	sub	sp, #56	; 0x38
 800a288:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a28a:	e0ca      	b.n	800a422 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	da18      	bge.n	800a2c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a292:	1d3b      	adds	r3, r7, #4
 800a294:	3304      	adds	r3, #4
 800a296:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10a      	bne.n	800a2b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	61fb      	str	r3, [r7, #28]
}
 800a2b0:	bf00      	nop
 800a2b2:	e7fe      	b.n	800a2b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ba:	6850      	ldr	r0, [r2, #4]
 800a2bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2be:	6892      	ldr	r2, [r2, #8]
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f2c0 80aa 	blt.w	800a420 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d004      	beq.n	800a2e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2da:	3304      	adds	r3, #4
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7fe f911 	bl	8008504 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2e2:	463b      	mov	r3, r7
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff ff6b 	bl	800a1c0 <prvSampleTimeNow>
 800a2ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b09      	cmp	r3, #9
 800a2f0:	f200 8097 	bhi.w	800a422 <prvProcessReceivedCommands+0x19e>
 800a2f4:	a201      	add	r2, pc, #4	; (adr r2, 800a2fc <prvProcessReceivedCommands+0x78>)
 800a2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fa:	bf00      	nop
 800a2fc:	0800a325 	.word	0x0800a325
 800a300:	0800a325 	.word	0x0800a325
 800a304:	0800a325 	.word	0x0800a325
 800a308:	0800a399 	.word	0x0800a399
 800a30c:	0800a3ad 	.word	0x0800a3ad
 800a310:	0800a3f7 	.word	0x0800a3f7
 800a314:	0800a325 	.word	0x0800a325
 800a318:	0800a325 	.word	0x0800a325
 800a31c:	0800a399 	.word	0x0800a399
 800a320:	0800a3ad 	.word	0x0800a3ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a32a:	f043 0301 	orr.w	r3, r3, #1
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	18d1      	adds	r1, r2, r3
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a344:	f7ff ff5c 	bl	800a200 <prvInsertTimerInActiveList>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d069      	beq.n	800a422 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a354:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a35c:	f003 0304 	and.w	r3, r3, #4
 800a360:	2b00      	cmp	r3, #0
 800a362:	d05e      	beq.n	800a422 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	441a      	add	r2, r3
 800a36c:	2300      	movs	r3, #0
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	2300      	movs	r3, #0
 800a372:	2100      	movs	r1, #0
 800a374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a376:	f7ff fe05 	bl	8009f84 <xTimerGenericCommand>
 800a37a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d14f      	bne.n	800a422 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	61bb      	str	r3, [r7, #24]
}
 800a394:	bf00      	nop
 800a396:	e7fe      	b.n	800a396 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a39e:	f023 0301 	bic.w	r3, r3, #1
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a3aa:	e03a      	b.n	800a422 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3b2:	f043 0301 	orr.w	r3, r3, #1
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10a      	bne.n	800a3e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	617b      	str	r3, [r7, #20]
}
 800a3de:	bf00      	nop
 800a3e0:	e7fe      	b.n	800a3e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	699a      	ldr	r2, [r3, #24]
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	18d1      	adds	r1, r2, r3
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f0:	f7ff ff06 	bl	800a200 <prvInsertTimerInActiveList>
					break;
 800a3f4:	e015      	b.n	800a422 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3fc:	f003 0302 	and.w	r3, r3, #2
 800a400:	2b00      	cmp	r3, #0
 800a402:	d103      	bne.n	800a40c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a406:	f000 fbdb 	bl	800abc0 <vPortFree>
 800a40a:	e00a      	b.n	800a422 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a412:	f023 0301 	bic.w	r3, r3, #1
 800a416:	b2da      	uxtb	r2, r3
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a41e:	e000      	b.n	800a422 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a420:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a422:	4b08      	ldr	r3, [pc, #32]	; (800a444 <prvProcessReceivedCommands+0x1c0>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	1d39      	adds	r1, r7, #4
 800a428:	2200      	movs	r2, #0
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe fb6c 	bl	8008b08 <xQueueReceive>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	f47f af2a 	bne.w	800a28c <prvProcessReceivedCommands+0x8>
	}
}
 800a438:	bf00      	nop
 800a43a:	bf00      	nop
 800a43c:	3730      	adds	r7, #48	; 0x30
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	20000d60 	.word	0x20000d60

0800a448 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b088      	sub	sp, #32
 800a44c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a44e:	e048      	b.n	800a4e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a450:	4b2d      	ldr	r3, [pc, #180]	; (800a508 <prvSwitchTimerLists+0xc0>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a45a:	4b2b      	ldr	r3, [pc, #172]	; (800a508 <prvSwitchTimerLists+0xc0>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3304      	adds	r3, #4
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fe f84b 	bl	8008504 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a47c:	f003 0304 	and.w	r3, r3, #4
 800a480:	2b00      	cmp	r3, #0
 800a482:	d02e      	beq.n	800a4e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	4413      	add	r3, r2
 800a48c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	429a      	cmp	r2, r3
 800a494:	d90e      	bls.n	800a4b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4a2:	4b19      	ldr	r3, [pc, #100]	; (800a508 <prvSwitchTimerLists+0xc0>)
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	f7fd fff0 	bl	8008492 <vListInsert>
 800a4b2:	e016      	b.n	800a4e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	2100      	movs	r1, #0
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f7ff fd60 	bl	8009f84 <xTimerGenericCommand>
 800a4c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10a      	bne.n	800a4e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	603b      	str	r3, [r7, #0]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4e2:	4b09      	ldr	r3, [pc, #36]	; (800a508 <prvSwitchTimerLists+0xc0>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1b1      	bne.n	800a450 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a4ec:	4b06      	ldr	r3, [pc, #24]	; (800a508 <prvSwitchTimerLists+0xc0>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a4f2:	4b06      	ldr	r3, [pc, #24]	; (800a50c <prvSwitchTimerLists+0xc4>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a04      	ldr	r2, [pc, #16]	; (800a508 <prvSwitchTimerLists+0xc0>)
 800a4f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4fa:	4a04      	ldr	r2, [pc, #16]	; (800a50c <prvSwitchTimerLists+0xc4>)
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	6013      	str	r3, [r2, #0]
}
 800a500:	bf00      	nop
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	20000d58 	.word	0x20000d58
 800a50c:	20000d5c 	.word	0x20000d5c

0800a510 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a516:	f000 f965 	bl	800a7e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a51a:	4b15      	ldr	r3, [pc, #84]	; (800a570 <prvCheckForValidListAndQueue+0x60>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d120      	bne.n	800a564 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a522:	4814      	ldr	r0, [pc, #80]	; (800a574 <prvCheckForValidListAndQueue+0x64>)
 800a524:	f7fd ff64 	bl	80083f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a528:	4813      	ldr	r0, [pc, #76]	; (800a578 <prvCheckForValidListAndQueue+0x68>)
 800a52a:	f7fd ff61 	bl	80083f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a52e:	4b13      	ldr	r3, [pc, #76]	; (800a57c <prvCheckForValidListAndQueue+0x6c>)
 800a530:	4a10      	ldr	r2, [pc, #64]	; (800a574 <prvCheckForValidListAndQueue+0x64>)
 800a532:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a534:	4b12      	ldr	r3, [pc, #72]	; (800a580 <prvCheckForValidListAndQueue+0x70>)
 800a536:	4a10      	ldr	r2, [pc, #64]	; (800a578 <prvCheckForValidListAndQueue+0x68>)
 800a538:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a53a:	2300      	movs	r3, #0
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	4b11      	ldr	r3, [pc, #68]	; (800a584 <prvCheckForValidListAndQueue+0x74>)
 800a540:	4a11      	ldr	r2, [pc, #68]	; (800a588 <prvCheckForValidListAndQueue+0x78>)
 800a542:	2110      	movs	r1, #16
 800a544:	200a      	movs	r0, #10
 800a546:	f7fe f86f 	bl	8008628 <xQueueGenericCreateStatic>
 800a54a:	4603      	mov	r3, r0
 800a54c:	4a08      	ldr	r2, [pc, #32]	; (800a570 <prvCheckForValidListAndQueue+0x60>)
 800a54e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a550:	4b07      	ldr	r3, [pc, #28]	; (800a570 <prvCheckForValidListAndQueue+0x60>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d005      	beq.n	800a564 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a558:	4b05      	ldr	r3, [pc, #20]	; (800a570 <prvCheckForValidListAndQueue+0x60>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	490b      	ldr	r1, [pc, #44]	; (800a58c <prvCheckForValidListAndQueue+0x7c>)
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe fd42 	bl	8008fe8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a564:	f000 f96e 	bl	800a844 <vPortExitCritical>
}
 800a568:	bf00      	nop
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	20000d60 	.word	0x20000d60
 800a574:	20000d30 	.word	0x20000d30
 800a578:	20000d44 	.word	0x20000d44
 800a57c:	20000d58 	.word	0x20000d58
 800a580:	20000d5c 	.word	0x20000d5c
 800a584:	20000e0c 	.word	0x20000e0c
 800a588:	20000d6c 	.word	0x20000d6c
 800a58c:	0800b748 	.word	0x0800b748

0800a590 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3b04      	subs	r3, #4
 800a5a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	3b04      	subs	r3, #4
 800a5ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f023 0201 	bic.w	r2, r3, #1
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3b04      	subs	r3, #4
 800a5be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5c0:	4a0c      	ldr	r2, [pc, #48]	; (800a5f4 <pxPortInitialiseStack+0x64>)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	3b14      	subs	r3, #20
 800a5ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3b04      	subs	r3, #4
 800a5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f06f 0202 	mvn.w	r2, #2
 800a5de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3b20      	subs	r3, #32
 800a5e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	0800a5f9 	.word	0x0800a5f9

0800a5f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a602:	4b12      	ldr	r3, [pc, #72]	; (800a64c <prvTaskExitError+0x54>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a60a:	d00a      	beq.n	800a622 <prvTaskExitError+0x2a>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	60fb      	str	r3, [r7, #12]
}
 800a61e:	bf00      	nop
 800a620:	e7fe      	b.n	800a620 <prvTaskExitError+0x28>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	60bb      	str	r3, [r7, #8]
}
 800a634:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a636:	bf00      	nop
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d0fc      	beq.n	800a638 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a63e:	bf00      	nop
 800a640:	bf00      	nop
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	2000002c 	.word	0x2000002c

0800a650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a650:	4b07      	ldr	r3, [pc, #28]	; (800a670 <pxCurrentTCBConst2>)
 800a652:	6819      	ldr	r1, [r3, #0]
 800a654:	6808      	ldr	r0, [r1, #0]
 800a656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65a:	f380 8809 	msr	PSP, r0
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f04f 0000 	mov.w	r0, #0
 800a666:	f380 8811 	msr	BASEPRI, r0
 800a66a:	4770      	bx	lr
 800a66c:	f3af 8000 	nop.w

0800a670 <pxCurrentTCBConst2>:
 800a670:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop

0800a678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a678:	4808      	ldr	r0, [pc, #32]	; (800a69c <prvPortStartFirstTask+0x24>)
 800a67a:	6800      	ldr	r0, [r0, #0]
 800a67c:	6800      	ldr	r0, [r0, #0]
 800a67e:	f380 8808 	msr	MSP, r0
 800a682:	f04f 0000 	mov.w	r0, #0
 800a686:	f380 8814 	msr	CONTROL, r0
 800a68a:	b662      	cpsie	i
 800a68c:	b661      	cpsie	f
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	df00      	svc	0
 800a698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a69a:	bf00      	nop
 800a69c:	e000ed08 	.word	0xe000ed08

0800a6a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6a6:	4b46      	ldr	r3, [pc, #280]	; (800a7c0 <xPortStartScheduler+0x120>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a46      	ldr	r2, [pc, #280]	; (800a7c4 <xPortStartScheduler+0x124>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d10a      	bne.n	800a6c6 <xPortStartScheduler+0x26>
	__asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	613b      	str	r3, [r7, #16]
}
 800a6c2:	bf00      	nop
 800a6c4:	e7fe      	b.n	800a6c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6c6:	4b3e      	ldr	r3, [pc, #248]	; (800a7c0 <xPortStartScheduler+0x120>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a3f      	ldr	r2, [pc, #252]	; (800a7c8 <xPortStartScheduler+0x128>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d10a      	bne.n	800a6e6 <xPortStartScheduler+0x46>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	60fb      	str	r3, [r7, #12]
}
 800a6e2:	bf00      	nop
 800a6e4:	e7fe      	b.n	800a6e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6e6:	4b39      	ldr	r3, [pc, #228]	; (800a7cc <xPortStartScheduler+0x12c>)
 800a6e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	22ff      	movs	r2, #255	; 0xff
 800a6f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a700:	78fb      	ldrb	r3, [r7, #3]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	4b31      	ldr	r3, [pc, #196]	; (800a7d0 <xPortStartScheduler+0x130>)
 800a70c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a70e:	4b31      	ldr	r3, [pc, #196]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a710:	2207      	movs	r2, #7
 800a712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a714:	e009      	b.n	800a72a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a716:	4b2f      	ldr	r3, [pc, #188]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3b01      	subs	r3, #1
 800a71c:	4a2d      	ldr	r2, [pc, #180]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a71e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	b2db      	uxtb	r3, r3
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	b2db      	uxtb	r3, r3
 800a728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a72a:	78fb      	ldrb	r3, [r7, #3]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a732:	2b80      	cmp	r3, #128	; 0x80
 800a734:	d0ef      	beq.n	800a716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a736:	4b27      	ldr	r3, [pc, #156]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f1c3 0307 	rsb	r3, r3, #7
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d00a      	beq.n	800a758 <xPortStartScheduler+0xb8>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	60bb      	str	r3, [r7, #8]
}
 800a754:	bf00      	nop
 800a756:	e7fe      	b.n	800a756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a758:	4b1e      	ldr	r3, [pc, #120]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	021b      	lsls	r3, r3, #8
 800a75e:	4a1d      	ldr	r2, [pc, #116]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a762:	4b1c      	ldr	r3, [pc, #112]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a76a:	4a1a      	ldr	r2, [pc, #104]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a76c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	b2da      	uxtb	r2, r3
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a776:	4b18      	ldr	r3, [pc, #96]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a17      	ldr	r2, [pc, #92]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a77c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a782:	4b15      	ldr	r3, [pc, #84]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a14      	ldr	r2, [pc, #80]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a78c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a78e:	f000 f8dd 	bl	800a94c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a792:	4b12      	ldr	r3, [pc, #72]	; (800a7dc <xPortStartScheduler+0x13c>)
 800a794:	2200      	movs	r2, #0
 800a796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a798:	f000 f8fc 	bl	800a994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a79c:	4b10      	ldr	r3, [pc, #64]	; (800a7e0 <xPortStartScheduler+0x140>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a0f      	ldr	r2, [pc, #60]	; (800a7e0 <xPortStartScheduler+0x140>)
 800a7a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7a8:	f7ff ff66 	bl	800a678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7ac:	f7ff f84c 	bl	8009848 <vTaskSwitchContext>
	prvTaskExitError();
 800a7b0:	f7ff ff22 	bl	800a5f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	e000ed00 	.word	0xe000ed00
 800a7c4:	410fc271 	.word	0x410fc271
 800a7c8:	410fc270 	.word	0x410fc270
 800a7cc:	e000e400 	.word	0xe000e400
 800a7d0:	20000e5c 	.word	0x20000e5c
 800a7d4:	20000e60 	.word	0x20000e60
 800a7d8:	e000ed20 	.word	0xe000ed20
 800a7dc:	2000002c 	.word	0x2000002c
 800a7e0:	e000ef34 	.word	0xe000ef34

0800a7e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	607b      	str	r3, [r7, #4]
}
 800a7fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7fe:	4b0f      	ldr	r3, [pc, #60]	; (800a83c <vPortEnterCritical+0x58>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	3301      	adds	r3, #1
 800a804:	4a0d      	ldr	r2, [pc, #52]	; (800a83c <vPortEnterCritical+0x58>)
 800a806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a808:	4b0c      	ldr	r3, [pc, #48]	; (800a83c <vPortEnterCritical+0x58>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d10f      	bne.n	800a830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a810:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <vPortEnterCritical+0x5c>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <vPortEnterCritical+0x4c>
	__asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	603b      	str	r3, [r7, #0]
}
 800a82c:	bf00      	nop
 800a82e:	e7fe      	b.n	800a82e <vPortEnterCritical+0x4a>
	}
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	2000002c 	.word	0x2000002c
 800a840:	e000ed04 	.word	0xe000ed04

0800a844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a84a:	4b12      	ldr	r3, [pc, #72]	; (800a894 <vPortExitCritical+0x50>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10a      	bne.n	800a868 <vPortExitCritical+0x24>
	__asm volatile
 800a852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	607b      	str	r3, [r7, #4]
}
 800a864:	bf00      	nop
 800a866:	e7fe      	b.n	800a866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a868:	4b0a      	ldr	r3, [pc, #40]	; (800a894 <vPortExitCritical+0x50>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	4a09      	ldr	r2, [pc, #36]	; (800a894 <vPortExitCritical+0x50>)
 800a870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a872:	4b08      	ldr	r3, [pc, #32]	; (800a894 <vPortExitCritical+0x50>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d105      	bne.n	800a886 <vPortExitCritical+0x42>
 800a87a:	2300      	movs	r3, #0
 800a87c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	f383 8811 	msr	BASEPRI, r3
}
 800a884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a886:	bf00      	nop
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	2000002c 	.word	0x2000002c
	...

0800a8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8a0:	f3ef 8009 	mrs	r0, PSP
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4b15      	ldr	r3, [pc, #84]	; (800a900 <pxCurrentTCBConst>)
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	f01e 0f10 	tst.w	lr, #16
 800a8b0:	bf08      	it	eq
 800a8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ba:	6010      	str	r0, [r2, #0]
 800a8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8c4:	f380 8811 	msr	BASEPRI, r0
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f7fe ffba 	bl	8009848 <vTaskSwitchContext>
 800a8d4:	f04f 0000 	mov.w	r0, #0
 800a8d8:	f380 8811 	msr	BASEPRI, r0
 800a8dc:	bc09      	pop	{r0, r3}
 800a8de:	6819      	ldr	r1, [r3, #0]
 800a8e0:	6808      	ldr	r0, [r1, #0]
 800a8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e6:	f01e 0f10 	tst.w	lr, #16
 800a8ea:	bf08      	it	eq
 800a8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8f0:	f380 8809 	msr	PSP, r0
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	f3af 8000 	nop.w

0800a900 <pxCurrentTCBConst>:
 800a900:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a904:	bf00      	nop
 800a906:	bf00      	nop

0800a908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	607b      	str	r3, [r7, #4]
}
 800a920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a922:	f7fe fed7 	bl	80096d4 <xTaskIncrementTick>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a92c:	4b06      	ldr	r3, [pc, #24]	; (800a948 <xPortSysTickHandler+0x40>)
 800a92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	2300      	movs	r3, #0
 800a936:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	f383 8811 	msr	BASEPRI, r3
}
 800a93e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a940:	bf00      	nop
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	e000ed04 	.word	0xe000ed04

0800a94c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a950:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <vPortSetupTimerInterrupt+0x34>)
 800a952:	2200      	movs	r2, #0
 800a954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a956:	4b0b      	ldr	r3, [pc, #44]	; (800a984 <vPortSetupTimerInterrupt+0x38>)
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a95c:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <vPortSetupTimerInterrupt+0x3c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a0a      	ldr	r2, [pc, #40]	; (800a98c <vPortSetupTimerInterrupt+0x40>)
 800a962:	fba2 2303 	umull	r2, r3, r2, r3
 800a966:	099b      	lsrs	r3, r3, #6
 800a968:	4a09      	ldr	r2, [pc, #36]	; (800a990 <vPortSetupTimerInterrupt+0x44>)
 800a96a:	3b01      	subs	r3, #1
 800a96c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a96e:	4b04      	ldr	r3, [pc, #16]	; (800a980 <vPortSetupTimerInterrupt+0x34>)
 800a970:	2207      	movs	r2, #7
 800a972:	601a      	str	r2, [r3, #0]
}
 800a974:	bf00      	nop
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	e000e010 	.word	0xe000e010
 800a984:	e000e018 	.word	0xe000e018
 800a988:	20000000 	.word	0x20000000
 800a98c:	10624dd3 	.word	0x10624dd3
 800a990:	e000e014 	.word	0xe000e014

0800a994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9a4 <vPortEnableVFP+0x10>
 800a998:	6801      	ldr	r1, [r0, #0]
 800a99a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a99e:	6001      	str	r1, [r0, #0]
 800a9a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9a2:	bf00      	nop
 800a9a4:	e000ed88 	.word	0xe000ed88

0800a9a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9ae:	f3ef 8305 	mrs	r3, IPSR
 800a9b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b0f      	cmp	r3, #15
 800a9b8:	d914      	bls.n	800a9e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9ba:	4a17      	ldr	r2, [pc, #92]	; (800aa18 <vPortValidateInterruptPriority+0x70>)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9c4:	4b15      	ldr	r3, [pc, #84]	; (800aa1c <vPortValidateInterruptPriority+0x74>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	7afa      	ldrb	r2, [r7, #11]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d20a      	bcs.n	800a9e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	607b      	str	r3, [r7, #4]
}
 800a9e0:	bf00      	nop
 800a9e2:	e7fe      	b.n	800a9e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9e4:	4b0e      	ldr	r3, [pc, #56]	; (800aa20 <vPortValidateInterruptPriority+0x78>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9ec:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <vPortValidateInterruptPriority+0x7c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d90a      	bls.n	800aa0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	603b      	str	r3, [r7, #0]
}
 800aa06:	bf00      	nop
 800aa08:	e7fe      	b.n	800aa08 <vPortValidateInterruptPriority+0x60>
	}
 800aa0a:	bf00      	nop
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	e000e3f0 	.word	0xe000e3f0
 800aa1c:	20000e5c 	.word	0x20000e5c
 800aa20:	e000ed0c 	.word	0xe000ed0c
 800aa24:	20000e60 	.word	0x20000e60

0800aa28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	; 0x28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa30:	2300      	movs	r3, #0
 800aa32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa34:	f7fe fd92 	bl	800955c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa38:	4b5b      	ldr	r3, [pc, #364]	; (800aba8 <pvPortMalloc+0x180>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa40:	f000 f920 	bl	800ac84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa44:	4b59      	ldr	r3, [pc, #356]	; (800abac <pvPortMalloc+0x184>)
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f040 8093 	bne.w	800ab78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d01d      	beq.n	800aa94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aa58:	2208      	movs	r2, #8
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f003 0307 	and.w	r3, r3, #7
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d014      	beq.n	800aa94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f023 0307 	bic.w	r3, r3, #7
 800aa70:	3308      	adds	r3, #8
 800aa72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f003 0307 	and.w	r3, r3, #7
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <pvPortMalloc+0x6c>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	617b      	str	r3, [r7, #20]
}
 800aa90:	bf00      	nop
 800aa92:	e7fe      	b.n	800aa92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d06e      	beq.n	800ab78 <pvPortMalloc+0x150>
 800aa9a:	4b45      	ldr	r3, [pc, #276]	; (800abb0 <pvPortMalloc+0x188>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d869      	bhi.n	800ab78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aaa4:	4b43      	ldr	r3, [pc, #268]	; (800abb4 <pvPortMalloc+0x18c>)
 800aaa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aaa8:	4b42      	ldr	r3, [pc, #264]	; (800abb4 <pvPortMalloc+0x18c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaae:	e004      	b.n	800aaba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d903      	bls.n	800aacc <pvPortMalloc+0xa4>
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1f1      	bne.n	800aab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aacc:	4b36      	ldr	r3, [pc, #216]	; (800aba8 <pvPortMalloc+0x180>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d050      	beq.n	800ab78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2208      	movs	r2, #8
 800aadc:	4413      	add	r3, r2
 800aade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	1ad2      	subs	r2, r2, r3
 800aaf0:	2308      	movs	r3, #8
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d91f      	bls.n	800ab38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aaf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4413      	add	r3, r2
 800aafe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	f003 0307 	and.w	r3, r3, #7
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00a      	beq.n	800ab20 <pvPortMalloc+0xf8>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	613b      	str	r3, [r7, #16]
}
 800ab1c:	bf00      	nop
 800ab1e:	e7fe      	b.n	800ab1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	685a      	ldr	r2, [r3, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	1ad2      	subs	r2, r2, r3
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab32:	69b8      	ldr	r0, [r7, #24]
 800ab34:	f000 f908 	bl	800ad48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab38:	4b1d      	ldr	r3, [pc, #116]	; (800abb0 <pvPortMalloc+0x188>)
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	4a1b      	ldr	r2, [pc, #108]	; (800abb0 <pvPortMalloc+0x188>)
 800ab44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab46:	4b1a      	ldr	r3, [pc, #104]	; (800abb0 <pvPortMalloc+0x188>)
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <pvPortMalloc+0x190>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d203      	bcs.n	800ab5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab52:	4b17      	ldr	r3, [pc, #92]	; (800abb0 <pvPortMalloc+0x188>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a18      	ldr	r2, [pc, #96]	; (800abb8 <pvPortMalloc+0x190>)
 800ab58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	4b13      	ldr	r3, [pc, #76]	; (800abac <pvPortMalloc+0x184>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	431a      	orrs	r2, r3
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab6e:	4b13      	ldr	r3, [pc, #76]	; (800abbc <pvPortMalloc+0x194>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	3301      	adds	r3, #1
 800ab74:	4a11      	ldr	r2, [pc, #68]	; (800abbc <pvPortMalloc+0x194>)
 800ab76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab78:	f7fe fcfe 	bl	8009578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	f003 0307 	and.w	r3, r3, #7
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00a      	beq.n	800ab9c <pvPortMalloc+0x174>
	__asm volatile
 800ab86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	60fb      	str	r3, [r7, #12]
}
 800ab98:	bf00      	nop
 800ab9a:	e7fe      	b.n	800ab9a <pvPortMalloc+0x172>
	return pvReturn;
 800ab9c:	69fb      	ldr	r3, [r7, #28]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3728      	adds	r7, #40	; 0x28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	20004a6c 	.word	0x20004a6c
 800abac:	20004a80 	.word	0x20004a80
 800abb0:	20004a70 	.word	0x20004a70
 800abb4:	20004a64 	.word	0x20004a64
 800abb8:	20004a74 	.word	0x20004a74
 800abbc:	20004a78 	.word	0x20004a78

0800abc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d04d      	beq.n	800ac6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abd2:	2308      	movs	r3, #8
 800abd4:	425b      	negs	r3, r3
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	4413      	add	r3, r2
 800abda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	685a      	ldr	r2, [r3, #4]
 800abe4:	4b24      	ldr	r3, [pc, #144]	; (800ac78 <vPortFree+0xb8>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4013      	ands	r3, r2
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10a      	bne.n	800ac04 <vPortFree+0x44>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	60fb      	str	r3, [r7, #12]
}
 800ac00:	bf00      	nop
 800ac02:	e7fe      	b.n	800ac02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00a      	beq.n	800ac22 <vPortFree+0x62>
	__asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	60bb      	str	r3, [r7, #8]
}
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	685a      	ldr	r2, [r3, #4]
 800ac26:	4b14      	ldr	r3, [pc, #80]	; (800ac78 <vPortFree+0xb8>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d01e      	beq.n	800ac6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d11a      	bne.n	800ac6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	4b0e      	ldr	r3, [pc, #56]	; (800ac78 <vPortFree+0xb8>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	43db      	mvns	r3, r3
 800ac42:	401a      	ands	r2, r3
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac48:	f7fe fc88 	bl	800955c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	4b0a      	ldr	r3, [pc, #40]	; (800ac7c <vPortFree+0xbc>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4413      	add	r3, r2
 800ac56:	4a09      	ldr	r2, [pc, #36]	; (800ac7c <vPortFree+0xbc>)
 800ac58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac5a:	6938      	ldr	r0, [r7, #16]
 800ac5c:	f000 f874 	bl	800ad48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac60:	4b07      	ldr	r3, [pc, #28]	; (800ac80 <vPortFree+0xc0>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3301      	adds	r3, #1
 800ac66:	4a06      	ldr	r2, [pc, #24]	; (800ac80 <vPortFree+0xc0>)
 800ac68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac6a:	f7fe fc85 	bl	8009578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac6e:	bf00      	nop
 800ac70:	3718      	adds	r7, #24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	20004a80 	.word	0x20004a80
 800ac7c:	20004a70 	.word	0x20004a70
 800ac80:	20004a7c 	.word	0x20004a7c

0800ac84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ac8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac90:	4b27      	ldr	r3, [pc, #156]	; (800ad30 <prvHeapInit+0xac>)
 800ac92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f003 0307 	and.w	r3, r3, #7
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00c      	beq.n	800acb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	3307      	adds	r3, #7
 800aca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f023 0307 	bic.w	r3, r3, #7
 800acaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	4a1f      	ldr	r2, [pc, #124]	; (800ad30 <prvHeapInit+0xac>)
 800acb4:	4413      	add	r3, r2
 800acb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acbc:	4a1d      	ldr	r2, [pc, #116]	; (800ad34 <prvHeapInit+0xb0>)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800acc2:	4b1c      	ldr	r3, [pc, #112]	; (800ad34 <prvHeapInit+0xb0>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	4413      	add	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acd0:	2208      	movs	r2, #8
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	1a9b      	subs	r3, r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f023 0307 	bic.w	r3, r3, #7
 800acde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4a15      	ldr	r2, [pc, #84]	; (800ad38 <prvHeapInit+0xb4>)
 800ace4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ace6:	4b14      	ldr	r3, [pc, #80]	; (800ad38 <prvHeapInit+0xb4>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2200      	movs	r2, #0
 800acec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acee:	4b12      	ldr	r3, [pc, #72]	; (800ad38 <prvHeapInit+0xb4>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	1ad2      	subs	r2, r2, r3
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad04:	4b0c      	ldr	r3, [pc, #48]	; (800ad38 <prvHeapInit+0xb4>)
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	4a0a      	ldr	r2, [pc, #40]	; (800ad3c <prvHeapInit+0xb8>)
 800ad12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	4a09      	ldr	r2, [pc, #36]	; (800ad40 <prvHeapInit+0xbc>)
 800ad1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad1c:	4b09      	ldr	r3, [pc, #36]	; (800ad44 <prvHeapInit+0xc0>)
 800ad1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad22:	601a      	str	r2, [r3, #0]
}
 800ad24:	bf00      	nop
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	20000e64 	.word	0x20000e64
 800ad34:	20004a64 	.word	0x20004a64
 800ad38:	20004a6c 	.word	0x20004a6c
 800ad3c:	20004a74 	.word	0x20004a74
 800ad40:	20004a70 	.word	0x20004a70
 800ad44:	20004a80 	.word	0x20004a80

0800ad48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad50:	4b28      	ldr	r3, [pc, #160]	; (800adf4 <prvInsertBlockIntoFreeList+0xac>)
 800ad52:	60fb      	str	r3, [r7, #12]
 800ad54:	e002      	b.n	800ad5c <prvInsertBlockIntoFreeList+0x14>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d8f7      	bhi.n	800ad56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	4413      	add	r3, r2
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d108      	bne.n	800ad8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	441a      	add	r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	441a      	add	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d118      	bne.n	800add0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	4b15      	ldr	r3, [pc, #84]	; (800adf8 <prvInsertBlockIntoFreeList+0xb0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d00d      	beq.n	800adc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	441a      	add	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	e008      	b.n	800add8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800adc6:	4b0c      	ldr	r3, [pc, #48]	; (800adf8 <prvInsertBlockIntoFreeList+0xb0>)
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	e003      	b.n	800add8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	429a      	cmp	r2, r3
 800adde:	d002      	beq.n	800ade6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ade6:	bf00      	nop
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	20004a64 	.word	0x20004a64
 800adf8:	20004a6c 	.word	0x20004a6c

0800adfc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ae00:	2201      	movs	r2, #1
 800ae02:	490e      	ldr	r1, [pc, #56]	; (800ae3c <MX_USB_HOST_Init+0x40>)
 800ae04:	480e      	ldr	r0, [pc, #56]	; (800ae40 <MX_USB_HOST_Init+0x44>)
 800ae06:	f7fb facb 	bl	80063a0 <USBH_Init>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ae10:	f7f5 fd9c 	bl	800094c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ae14:	490b      	ldr	r1, [pc, #44]	; (800ae44 <MX_USB_HOST_Init+0x48>)
 800ae16:	480a      	ldr	r0, [pc, #40]	; (800ae40 <MX_USB_HOST_Init+0x44>)
 800ae18:	f7fb fb72 	bl	8006500 <USBH_RegisterClass>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ae22:	f7f5 fd93 	bl	800094c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ae26:	4806      	ldr	r0, [pc, #24]	; (800ae40 <MX_USB_HOST_Init+0x44>)
 800ae28:	f7fb fbf6 	bl	8006618 <USBH_Start>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ae32:	f7f5 fd8b 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ae36:	bf00      	nop
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	0800ae49 	.word	0x0800ae49
 800ae40:	20004c38 	.word	0x20004c38
 800ae44:	2000000c 	.word	0x2000000c

0800ae48 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ae54:	78fb      	ldrb	r3, [r7, #3]
 800ae56:	3b01      	subs	r3, #1
 800ae58:	2b04      	cmp	r3, #4
 800ae5a:	d819      	bhi.n	800ae90 <USBH_UserProcess+0x48>
 800ae5c:	a201      	add	r2, pc, #4	; (adr r2, 800ae64 <USBH_UserProcess+0x1c>)
 800ae5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae62:	bf00      	nop
 800ae64:	0800ae91 	.word	0x0800ae91
 800ae68:	0800ae81 	.word	0x0800ae81
 800ae6c:	0800ae91 	.word	0x0800ae91
 800ae70:	0800ae89 	.word	0x0800ae89
 800ae74:	0800ae79 	.word	0x0800ae79
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ae78:	4b09      	ldr	r3, [pc, #36]	; (800aea0 <USBH_UserProcess+0x58>)
 800ae7a:	2203      	movs	r2, #3
 800ae7c:	701a      	strb	r2, [r3, #0]
  break;
 800ae7e:	e008      	b.n	800ae92 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ae80:	4b07      	ldr	r3, [pc, #28]	; (800aea0 <USBH_UserProcess+0x58>)
 800ae82:	2202      	movs	r2, #2
 800ae84:	701a      	strb	r2, [r3, #0]
  break;
 800ae86:	e004      	b.n	800ae92 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ae88:	4b05      	ldr	r3, [pc, #20]	; (800aea0 <USBH_UserProcess+0x58>)
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	701a      	strb	r2, [r3, #0]
  break;
 800ae8e:	e000      	b.n	800ae92 <USBH_UserProcess+0x4a>

  default:
  break;
 800ae90:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ae92:	bf00      	nop
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	20004a84 	.word	0x20004a84

0800aea4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b08a      	sub	sp, #40	; 0x28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aeac:	f107 0314 	add.w	r3, r7, #20
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	605a      	str	r2, [r3, #4]
 800aeb6:	609a      	str	r2, [r3, #8]
 800aeb8:	60da      	str	r2, [r3, #12]
 800aeba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aec4:	d147      	bne.n	800af56 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aec6:	2300      	movs	r3, #0
 800aec8:	613b      	str	r3, [r7, #16]
 800aeca:	4b25      	ldr	r3, [pc, #148]	; (800af60 <HAL_HCD_MspInit+0xbc>)
 800aecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aece:	4a24      	ldr	r2, [pc, #144]	; (800af60 <HAL_HCD_MspInit+0xbc>)
 800aed0:	f043 0301 	orr.w	r3, r3, #1
 800aed4:	6313      	str	r3, [r2, #48]	; 0x30
 800aed6:	4b22      	ldr	r3, [pc, #136]	; (800af60 <HAL_HCD_MspInit+0xbc>)
 800aed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeda:	f003 0301 	and.w	r3, r3, #1
 800aede:	613b      	str	r3, [r7, #16]
 800aee0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800aee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aee8:	2300      	movs	r3, #0
 800aeea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeec:	2300      	movs	r3, #0
 800aeee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800aef0:	f107 0314 	add.w	r3, r7, #20
 800aef4:	4619      	mov	r1, r3
 800aef6:	481b      	ldr	r0, [pc, #108]	; (800af64 <HAL_HCD_MspInit+0xc0>)
 800aef8:	f7f6 f8a8 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800aefc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800af00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af02:	2302      	movs	r3, #2
 800af04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af06:	2300      	movs	r3, #0
 800af08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af0a:	2300      	movs	r3, #0
 800af0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af0e:	230a      	movs	r3, #10
 800af10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af12:	f107 0314 	add.w	r3, r7, #20
 800af16:	4619      	mov	r1, r3
 800af18:	4812      	ldr	r0, [pc, #72]	; (800af64 <HAL_HCD_MspInit+0xc0>)
 800af1a:	f7f6 f897 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af1e:	4b10      	ldr	r3, [pc, #64]	; (800af60 <HAL_HCD_MspInit+0xbc>)
 800af20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af22:	4a0f      	ldr	r2, [pc, #60]	; (800af60 <HAL_HCD_MspInit+0xbc>)
 800af24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af28:	6353      	str	r3, [r2, #52]	; 0x34
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
 800af2e:	4b0c      	ldr	r3, [pc, #48]	; (800af60 <HAL_HCD_MspInit+0xbc>)
 800af30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af32:	4a0b      	ldr	r2, [pc, #44]	; (800af60 <HAL_HCD_MspInit+0xbc>)
 800af34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af38:	6453      	str	r3, [r2, #68]	; 0x44
 800af3a:	4b09      	ldr	r3, [pc, #36]	; (800af60 <HAL_HCD_MspInit+0xbc>)
 800af3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800af46:	2200      	movs	r2, #0
 800af48:	2105      	movs	r1, #5
 800af4a:	2043      	movs	r0, #67	; 0x43
 800af4c:	f7f6 f854 	bl	8000ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800af50:	2043      	movs	r0, #67	; 0x43
 800af52:	f7f6 f86d 	bl	8001030 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800af56:	bf00      	nop
 800af58:	3728      	adds	r7, #40	; 0x28
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	40023800 	.word	0x40023800
 800af64:	40020000 	.word	0x40020000

0800af68 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800af76:	4618      	mov	r0, r3
 800af78:	f7fb fffb 	bl	8006f72 <USBH_LL_IncTimer>
}
 800af7c:	bf00      	nop
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800af92:	4618      	mov	r0, r3
 800af94:	f7fc f83f 	bl	8007016 <USBH_LL_Connect>
}
 800af98:	bf00      	nop
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fc f854 	bl	800705c <USBH_LL_Disconnect>
}
 800afb4:	bf00      	nop
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	460b      	mov	r3, r1
 800afc6:	70fb      	strb	r3, [r7, #3]
 800afc8:	4613      	mov	r3, r2
 800afca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fc f88b 	bl	80070ee <USBH_LL_NotifyURBChange>
#endif
}
 800afd8:	bf00      	nop
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fb ffe9 	bl	8006fc6 <USBH_LL_PortEnabled>
}
 800aff4:	bf00      	nop
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fb fff5 	bl	8006ffa <USBH_LL_PortDisabled>
}
 800b010:	bf00      	nop
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b026:	2b01      	cmp	r3, #1
 800b028:	d12a      	bne.n	800b080 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b02a:	4a18      	ldr	r2, [pc, #96]	; (800b08c <USBH_LL_Init+0x74>)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a15      	ldr	r2, [pc, #84]	; (800b08c <USBH_LL_Init+0x74>)
 800b036:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b03a:	4b14      	ldr	r3, [pc, #80]	; (800b08c <USBH_LL_Init+0x74>)
 800b03c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b040:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b042:	4b12      	ldr	r3, [pc, #72]	; (800b08c <USBH_LL_Init+0x74>)
 800b044:	2208      	movs	r2, #8
 800b046:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b048:	4b10      	ldr	r3, [pc, #64]	; (800b08c <USBH_LL_Init+0x74>)
 800b04a:	2201      	movs	r2, #1
 800b04c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b04e:	4b0f      	ldr	r3, [pc, #60]	; (800b08c <USBH_LL_Init+0x74>)
 800b050:	2200      	movs	r2, #0
 800b052:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b054:	4b0d      	ldr	r3, [pc, #52]	; (800b08c <USBH_LL_Init+0x74>)
 800b056:	2202      	movs	r2, #2
 800b058:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b05a:	4b0c      	ldr	r3, [pc, #48]	; (800b08c <USBH_LL_Init+0x74>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b060:	480a      	ldr	r0, [pc, #40]	; (800b08c <USBH_LL_Init+0x74>)
 800b062:	f7f6 f9c2 	bl	80013ea <HAL_HCD_Init>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b06c:	f7f5 fc6e 	bl	800094c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b070:	4806      	ldr	r0, [pc, #24]	; (800b08c <USBH_LL_Init+0x74>)
 800b072:	f7f6 fda6 	bl	8001bc2 <HAL_HCD_GetCurrentFrame>
 800b076:	4603      	mov	r3, r0
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7fb ff6a 	bl	8006f54 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	2000501c 	.word	0x2000501c

0800b090 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7f6 fd15 	bl	8001ad6 <HAL_HCD_Start>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f000 f95c 	bl	800b370 <USBH_Get_USB_Status>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b084      	sub	sp, #16
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7f6 fd1d 	bl	8001b1c <HAL_HCD_Stop>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 f941 	bl	800b370 <USBH_Get_USB_Status>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b104:	2301      	movs	r3, #1
 800b106:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b10e:	4618      	mov	r0, r3
 800b110:	f7f6 fd65 	bl	8001bde <HAL_HCD_GetCurrentSpeed>
 800b114:	4603      	mov	r3, r0
 800b116:	2b02      	cmp	r3, #2
 800b118:	d00c      	beq.n	800b134 <USBH_LL_GetSpeed+0x38>
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d80d      	bhi.n	800b13a <USBH_LL_GetSpeed+0x3e>
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <USBH_LL_GetSpeed+0x2c>
 800b122:	2b01      	cmp	r3, #1
 800b124:	d003      	beq.n	800b12e <USBH_LL_GetSpeed+0x32>
 800b126:	e008      	b.n	800b13a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b128:	2300      	movs	r3, #0
 800b12a:	73fb      	strb	r3, [r7, #15]
    break;
 800b12c:	e008      	b.n	800b140 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b12e:	2301      	movs	r3, #1
 800b130:	73fb      	strb	r3, [r7, #15]
    break;
 800b132:	e005      	b.n	800b140 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b134:	2302      	movs	r3, #2
 800b136:	73fb      	strb	r3, [r7, #15]
    break;
 800b138:	e002      	b.n	800b140 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b13a:	2301      	movs	r3, #1
 800b13c:	73fb      	strb	r3, [r7, #15]
    break;
 800b13e:	bf00      	nop
  }
  return  speed;
 800b140:	7bfb      	ldrb	r3, [r7, #15]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b160:	4618      	mov	r0, r3
 800b162:	f7f6 fcf8 	bl	8001b56 <HAL_HCD_ResetPort>
 800b166:	4603      	mov	r3, r0
 800b168:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f000 f8ff 	bl	800b370 <USBH_Get_USB_Status>
 800b172:	4603      	mov	r3, r0
 800b174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b176:	7bbb      	ldrb	r3, [r7, #14]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b192:	78fa      	ldrb	r2, [r7, #3]
 800b194:	4611      	mov	r1, r2
 800b196:	4618      	mov	r0, r3
 800b198:	f7f6 fcff 	bl	8001b9a <HAL_HCD_HC_GetXferCount>
 800b19c:	4603      	mov	r3, r0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b1a6:	b590      	push	{r4, r7, lr}
 800b1a8:	b089      	sub	sp, #36	; 0x24
 800b1aa:	af04      	add	r7, sp, #16
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	4608      	mov	r0, r1
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	70fb      	strb	r3, [r7, #3]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	70bb      	strb	r3, [r7, #2]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b1ce:	787c      	ldrb	r4, [r7, #1]
 800b1d0:	78ba      	ldrb	r2, [r7, #2]
 800b1d2:	78f9      	ldrb	r1, [r7, #3]
 800b1d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1d6:	9302      	str	r3, [sp, #8]
 800b1d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	4623      	mov	r3, r4
 800b1e6:	f7f6 f962 	bl	80014ae <HAL_HCD_HC_Init>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f000 f8bd 	bl	800b370 <USBH_Get_USB_Status>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	bd90      	pop	{r4, r7, pc}

0800b204 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	460b      	mov	r3, r1
 800b20e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b214:	2300      	movs	r3, #0
 800b216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b21e:	78fa      	ldrb	r2, [r7, #3]
 800b220:	4611      	mov	r1, r2
 800b222:	4618      	mov	r0, r3
 800b224:	f7f6 f9d2 	bl	80015cc <HAL_HCD_HC_Halt>
 800b228:	4603      	mov	r3, r0
 800b22a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b22c:	7bfb      	ldrb	r3, [r7, #15]
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 f89e 	bl	800b370 <USBH_Get_USB_Status>
 800b234:	4603      	mov	r3, r0
 800b236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b238:	7bbb      	ldrb	r3, [r7, #14]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b242:	b590      	push	{r4, r7, lr}
 800b244:	b089      	sub	sp, #36	; 0x24
 800b246:	af04      	add	r7, sp, #16
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	4608      	mov	r0, r1
 800b24c:	4611      	mov	r1, r2
 800b24e:	461a      	mov	r2, r3
 800b250:	4603      	mov	r3, r0
 800b252:	70fb      	strb	r3, [r7, #3]
 800b254:	460b      	mov	r3, r1
 800b256:	70bb      	strb	r3, [r7, #2]
 800b258:	4613      	mov	r3, r2
 800b25a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b26a:	787c      	ldrb	r4, [r7, #1]
 800b26c:	78ba      	ldrb	r2, [r7, #2]
 800b26e:	78f9      	ldrb	r1, [r7, #3]
 800b270:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b274:	9303      	str	r3, [sp, #12]
 800b276:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b278:	9302      	str	r3, [sp, #8]
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	9301      	str	r3, [sp, #4]
 800b27e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	4623      	mov	r3, r4
 800b286:	f7f6 f9c5 	bl	8001614 <HAL_HCD_HC_SubmitRequest>
 800b28a:	4603      	mov	r3, r0
 800b28c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b28e:	7bfb      	ldrb	r3, [r7, #15]
 800b290:	4618      	mov	r0, r3
 800b292:	f000 f86d 	bl	800b370 <USBH_Get_USB_Status>
 800b296:	4603      	mov	r3, r0
 800b298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b29a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd90      	pop	{r4, r7, pc}

0800b2a4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2b6:	78fa      	ldrb	r2, [r7, #3]
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7f6 fc59 	bl	8001b72 <HAL_HCD_HC_GetURBState>
 800b2c0:	4603      	mov	r3, r0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b082      	sub	sp, #8
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d103      	bne.n	800b2e8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b2e0:	78fb      	ldrb	r3, [r7, #3]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 f870 	bl	800b3c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b2e8:	20c8      	movs	r0, #200	; 0xc8
 800b2ea:	f7f5 fda9 	bl	8000e40 <HAL_Delay>
  return USBH_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	460b      	mov	r3, r1
 800b302:	70fb      	strb	r3, [r7, #3]
 800b304:	4613      	mov	r3, r2
 800b306:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b30e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b310:	78fb      	ldrb	r3, [r7, #3]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	212c      	movs	r1, #44	; 0x2c
 800b316:	fb01 f303 	mul.w	r3, r1, r3
 800b31a:	4413      	add	r3, r2
 800b31c:	333b      	adds	r3, #59	; 0x3b
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d009      	beq.n	800b338 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b324:	78fb      	ldrb	r3, [r7, #3]
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	212c      	movs	r1, #44	; 0x2c
 800b32a:	fb01 f303 	mul.w	r3, r1, r3
 800b32e:	4413      	add	r3, r2
 800b330:	3354      	adds	r3, #84	; 0x54
 800b332:	78ba      	ldrb	r2, [r7, #2]
 800b334:	701a      	strb	r2, [r3, #0]
 800b336:	e008      	b.n	800b34a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b338:	78fb      	ldrb	r3, [r7, #3]
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	212c      	movs	r1, #44	; 0x2c
 800b33e:	fb01 f303 	mul.w	r3, r1, r3
 800b342:	4413      	add	r3, r2
 800b344:	3355      	adds	r3, #85	; 0x55
 800b346:	78ba      	ldrb	r2, [r7, #2]
 800b348:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3714      	adds	r7, #20
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7f5 fd6d 	bl	8000e40 <HAL_Delay>
}
 800b366:	bf00      	nop
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
	...

0800b370 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	4603      	mov	r3, r0
 800b378:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	2b03      	cmp	r3, #3
 800b382:	d817      	bhi.n	800b3b4 <USBH_Get_USB_Status+0x44>
 800b384:	a201      	add	r2, pc, #4	; (adr r2, 800b38c <USBH_Get_USB_Status+0x1c>)
 800b386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38a:	bf00      	nop
 800b38c:	0800b39d 	.word	0x0800b39d
 800b390:	0800b3a3 	.word	0x0800b3a3
 800b394:	0800b3a9 	.word	0x0800b3a9
 800b398:	0800b3af 	.word	0x0800b3af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a0:	e00b      	b.n	800b3ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b3a2:	2302      	movs	r3, #2
 800b3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a6:	e008      	b.n	800b3ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ac:	e005      	b.n	800b3ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b2:	e002      	b.n	800b3ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b3b4:	2302      	movs	r3, #2
 800b3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b8:	bf00      	nop
  }
  return usb_status;
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b3d6:	79fb      	ldrb	r3, [r7, #7]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d102      	bne.n	800b3e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
 800b3e0:	e001      	b.n	800b3e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	2101      	movs	r1, #1
 800b3ec:	4803      	ldr	r0, [pc, #12]	; (800b3fc <MX_DriverVbusFS+0x34>)
 800b3ee:	f7f5 ffc9 	bl	8001384 <HAL_GPIO_WritePin>
}
 800b3f2:	bf00      	nop
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	40020800 	.word	0x40020800

0800b400 <__errno>:
 800b400:	4b01      	ldr	r3, [pc, #4]	; (800b408 <__errno+0x8>)
 800b402:	6818      	ldr	r0, [r3, #0]
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	20000030 	.word	0x20000030

0800b40c <__libc_init_array>:
 800b40c:	b570      	push	{r4, r5, r6, lr}
 800b40e:	4d0d      	ldr	r5, [pc, #52]	; (800b444 <__libc_init_array+0x38>)
 800b410:	4c0d      	ldr	r4, [pc, #52]	; (800b448 <__libc_init_array+0x3c>)
 800b412:	1b64      	subs	r4, r4, r5
 800b414:	10a4      	asrs	r4, r4, #2
 800b416:	2600      	movs	r6, #0
 800b418:	42a6      	cmp	r6, r4
 800b41a:	d109      	bne.n	800b430 <__libc_init_array+0x24>
 800b41c:	4d0b      	ldr	r5, [pc, #44]	; (800b44c <__libc_init_array+0x40>)
 800b41e:	4c0c      	ldr	r4, [pc, #48]	; (800b450 <__libc_init_array+0x44>)
 800b420:	f000 f970 	bl	800b704 <_init>
 800b424:	1b64      	subs	r4, r4, r5
 800b426:	10a4      	asrs	r4, r4, #2
 800b428:	2600      	movs	r6, #0
 800b42a:	42a6      	cmp	r6, r4
 800b42c:	d105      	bne.n	800b43a <__libc_init_array+0x2e>
 800b42e:	bd70      	pop	{r4, r5, r6, pc}
 800b430:	f855 3b04 	ldr.w	r3, [r5], #4
 800b434:	4798      	blx	r3
 800b436:	3601      	adds	r6, #1
 800b438:	e7ee      	b.n	800b418 <__libc_init_array+0xc>
 800b43a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b43e:	4798      	blx	r3
 800b440:	3601      	adds	r6, #1
 800b442:	e7f2      	b.n	800b42a <__libc_init_array+0x1e>
 800b444:	0800b7f4 	.word	0x0800b7f4
 800b448:	0800b7f4 	.word	0x0800b7f4
 800b44c:	0800b7f4 	.word	0x0800b7f4
 800b450:	0800b7f8 	.word	0x0800b7f8

0800b454 <__retarget_lock_acquire_recursive>:
 800b454:	4770      	bx	lr

0800b456 <__retarget_lock_release_recursive>:
 800b456:	4770      	bx	lr

0800b458 <malloc>:
 800b458:	4b02      	ldr	r3, [pc, #8]	; (800b464 <malloc+0xc>)
 800b45a:	4601      	mov	r1, r0
 800b45c:	6818      	ldr	r0, [r3, #0]
 800b45e:	f000 b871 	b.w	800b544 <_malloc_r>
 800b462:	bf00      	nop
 800b464:	20000030 	.word	0x20000030

0800b468 <free>:
 800b468:	4b02      	ldr	r3, [pc, #8]	; (800b474 <free+0xc>)
 800b46a:	4601      	mov	r1, r0
 800b46c:	6818      	ldr	r0, [r3, #0]
 800b46e:	f000 b819 	b.w	800b4a4 <_free_r>
 800b472:	bf00      	nop
 800b474:	20000030 	.word	0x20000030

0800b478 <memcpy>:
 800b478:	440a      	add	r2, r1
 800b47a:	4291      	cmp	r1, r2
 800b47c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b480:	d100      	bne.n	800b484 <memcpy+0xc>
 800b482:	4770      	bx	lr
 800b484:	b510      	push	{r4, lr}
 800b486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b48a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b48e:	4291      	cmp	r1, r2
 800b490:	d1f9      	bne.n	800b486 <memcpy+0xe>
 800b492:	bd10      	pop	{r4, pc}

0800b494 <memset>:
 800b494:	4402      	add	r2, r0
 800b496:	4603      	mov	r3, r0
 800b498:	4293      	cmp	r3, r2
 800b49a:	d100      	bne.n	800b49e <memset+0xa>
 800b49c:	4770      	bx	lr
 800b49e:	f803 1b01 	strb.w	r1, [r3], #1
 800b4a2:	e7f9      	b.n	800b498 <memset+0x4>

0800b4a4 <_free_r>:
 800b4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4a6:	2900      	cmp	r1, #0
 800b4a8:	d048      	beq.n	800b53c <_free_r+0x98>
 800b4aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4ae:	9001      	str	r0, [sp, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f1a1 0404 	sub.w	r4, r1, #4
 800b4b6:	bfb8      	it	lt
 800b4b8:	18e4      	addlt	r4, r4, r3
 800b4ba:	f000 f917 	bl	800b6ec <__malloc_lock>
 800b4be:	4a20      	ldr	r2, [pc, #128]	; (800b540 <_free_r+0x9c>)
 800b4c0:	9801      	ldr	r0, [sp, #4]
 800b4c2:	6813      	ldr	r3, [r2, #0]
 800b4c4:	4615      	mov	r5, r2
 800b4c6:	b933      	cbnz	r3, 800b4d6 <_free_r+0x32>
 800b4c8:	6063      	str	r3, [r4, #4]
 800b4ca:	6014      	str	r4, [r2, #0]
 800b4cc:	b003      	add	sp, #12
 800b4ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4d2:	f000 b911 	b.w	800b6f8 <__malloc_unlock>
 800b4d6:	42a3      	cmp	r3, r4
 800b4d8:	d90b      	bls.n	800b4f2 <_free_r+0x4e>
 800b4da:	6821      	ldr	r1, [r4, #0]
 800b4dc:	1862      	adds	r2, r4, r1
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	bf04      	itt	eq
 800b4e2:	681a      	ldreq	r2, [r3, #0]
 800b4e4:	685b      	ldreq	r3, [r3, #4]
 800b4e6:	6063      	str	r3, [r4, #4]
 800b4e8:	bf04      	itt	eq
 800b4ea:	1852      	addeq	r2, r2, r1
 800b4ec:	6022      	streq	r2, [r4, #0]
 800b4ee:	602c      	str	r4, [r5, #0]
 800b4f0:	e7ec      	b.n	800b4cc <_free_r+0x28>
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	b10b      	cbz	r3, 800b4fc <_free_r+0x58>
 800b4f8:	42a3      	cmp	r3, r4
 800b4fa:	d9fa      	bls.n	800b4f2 <_free_r+0x4e>
 800b4fc:	6811      	ldr	r1, [r2, #0]
 800b4fe:	1855      	adds	r5, r2, r1
 800b500:	42a5      	cmp	r5, r4
 800b502:	d10b      	bne.n	800b51c <_free_r+0x78>
 800b504:	6824      	ldr	r4, [r4, #0]
 800b506:	4421      	add	r1, r4
 800b508:	1854      	adds	r4, r2, r1
 800b50a:	42a3      	cmp	r3, r4
 800b50c:	6011      	str	r1, [r2, #0]
 800b50e:	d1dd      	bne.n	800b4cc <_free_r+0x28>
 800b510:	681c      	ldr	r4, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	6053      	str	r3, [r2, #4]
 800b516:	4421      	add	r1, r4
 800b518:	6011      	str	r1, [r2, #0]
 800b51a:	e7d7      	b.n	800b4cc <_free_r+0x28>
 800b51c:	d902      	bls.n	800b524 <_free_r+0x80>
 800b51e:	230c      	movs	r3, #12
 800b520:	6003      	str	r3, [r0, #0]
 800b522:	e7d3      	b.n	800b4cc <_free_r+0x28>
 800b524:	6825      	ldr	r5, [r4, #0]
 800b526:	1961      	adds	r1, r4, r5
 800b528:	428b      	cmp	r3, r1
 800b52a:	bf04      	itt	eq
 800b52c:	6819      	ldreq	r1, [r3, #0]
 800b52e:	685b      	ldreq	r3, [r3, #4]
 800b530:	6063      	str	r3, [r4, #4]
 800b532:	bf04      	itt	eq
 800b534:	1949      	addeq	r1, r1, r5
 800b536:	6021      	streq	r1, [r4, #0]
 800b538:	6054      	str	r4, [r2, #4]
 800b53a:	e7c7      	b.n	800b4cc <_free_r+0x28>
 800b53c:	b003      	add	sp, #12
 800b53e:	bd30      	pop	{r4, r5, pc}
 800b540:	20004a88 	.word	0x20004a88

0800b544 <_malloc_r>:
 800b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b546:	1ccd      	adds	r5, r1, #3
 800b548:	f025 0503 	bic.w	r5, r5, #3
 800b54c:	3508      	adds	r5, #8
 800b54e:	2d0c      	cmp	r5, #12
 800b550:	bf38      	it	cc
 800b552:	250c      	movcc	r5, #12
 800b554:	2d00      	cmp	r5, #0
 800b556:	4606      	mov	r6, r0
 800b558:	db01      	blt.n	800b55e <_malloc_r+0x1a>
 800b55a:	42a9      	cmp	r1, r5
 800b55c:	d903      	bls.n	800b566 <_malloc_r+0x22>
 800b55e:	230c      	movs	r3, #12
 800b560:	6033      	str	r3, [r6, #0]
 800b562:	2000      	movs	r0, #0
 800b564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b566:	f000 f8c1 	bl	800b6ec <__malloc_lock>
 800b56a:	4921      	ldr	r1, [pc, #132]	; (800b5f0 <_malloc_r+0xac>)
 800b56c:	680a      	ldr	r2, [r1, #0]
 800b56e:	4614      	mov	r4, r2
 800b570:	b99c      	cbnz	r4, 800b59a <_malloc_r+0x56>
 800b572:	4f20      	ldr	r7, [pc, #128]	; (800b5f4 <_malloc_r+0xb0>)
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	b923      	cbnz	r3, 800b582 <_malloc_r+0x3e>
 800b578:	4621      	mov	r1, r4
 800b57a:	4630      	mov	r0, r6
 800b57c:	f000 f8a6 	bl	800b6cc <_sbrk_r>
 800b580:	6038      	str	r0, [r7, #0]
 800b582:	4629      	mov	r1, r5
 800b584:	4630      	mov	r0, r6
 800b586:	f000 f8a1 	bl	800b6cc <_sbrk_r>
 800b58a:	1c43      	adds	r3, r0, #1
 800b58c:	d123      	bne.n	800b5d6 <_malloc_r+0x92>
 800b58e:	230c      	movs	r3, #12
 800b590:	6033      	str	r3, [r6, #0]
 800b592:	4630      	mov	r0, r6
 800b594:	f000 f8b0 	bl	800b6f8 <__malloc_unlock>
 800b598:	e7e3      	b.n	800b562 <_malloc_r+0x1e>
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	1b5b      	subs	r3, r3, r5
 800b59e:	d417      	bmi.n	800b5d0 <_malloc_r+0x8c>
 800b5a0:	2b0b      	cmp	r3, #11
 800b5a2:	d903      	bls.n	800b5ac <_malloc_r+0x68>
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	441c      	add	r4, r3
 800b5a8:	6025      	str	r5, [r4, #0]
 800b5aa:	e004      	b.n	800b5b6 <_malloc_r+0x72>
 800b5ac:	6863      	ldr	r3, [r4, #4]
 800b5ae:	42a2      	cmp	r2, r4
 800b5b0:	bf0c      	ite	eq
 800b5b2:	600b      	streq	r3, [r1, #0]
 800b5b4:	6053      	strne	r3, [r2, #4]
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f000 f89e 	bl	800b6f8 <__malloc_unlock>
 800b5bc:	f104 000b 	add.w	r0, r4, #11
 800b5c0:	1d23      	adds	r3, r4, #4
 800b5c2:	f020 0007 	bic.w	r0, r0, #7
 800b5c6:	1ac2      	subs	r2, r0, r3
 800b5c8:	d0cc      	beq.n	800b564 <_malloc_r+0x20>
 800b5ca:	1a1b      	subs	r3, r3, r0
 800b5cc:	50a3      	str	r3, [r4, r2]
 800b5ce:	e7c9      	b.n	800b564 <_malloc_r+0x20>
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	6864      	ldr	r4, [r4, #4]
 800b5d4:	e7cc      	b.n	800b570 <_malloc_r+0x2c>
 800b5d6:	1cc4      	adds	r4, r0, #3
 800b5d8:	f024 0403 	bic.w	r4, r4, #3
 800b5dc:	42a0      	cmp	r0, r4
 800b5de:	d0e3      	beq.n	800b5a8 <_malloc_r+0x64>
 800b5e0:	1a21      	subs	r1, r4, r0
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f000 f872 	bl	800b6cc <_sbrk_r>
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d1dd      	bne.n	800b5a8 <_malloc_r+0x64>
 800b5ec:	e7cf      	b.n	800b58e <_malloc_r+0x4a>
 800b5ee:	bf00      	nop
 800b5f0:	20004a88 	.word	0x20004a88
 800b5f4:	20004a8c 	.word	0x20004a8c

0800b5f8 <cleanup_glue>:
 800b5f8:	b538      	push	{r3, r4, r5, lr}
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	6809      	ldr	r1, [r1, #0]
 800b5fe:	4605      	mov	r5, r0
 800b600:	b109      	cbz	r1, 800b606 <cleanup_glue+0xe>
 800b602:	f7ff fff9 	bl	800b5f8 <cleanup_glue>
 800b606:	4621      	mov	r1, r4
 800b608:	4628      	mov	r0, r5
 800b60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b60e:	f7ff bf49 	b.w	800b4a4 <_free_r>
	...

0800b614 <_reclaim_reent>:
 800b614:	4b2c      	ldr	r3, [pc, #176]	; (800b6c8 <_reclaim_reent+0xb4>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4283      	cmp	r3, r0
 800b61a:	b570      	push	{r4, r5, r6, lr}
 800b61c:	4604      	mov	r4, r0
 800b61e:	d051      	beq.n	800b6c4 <_reclaim_reent+0xb0>
 800b620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b622:	b143      	cbz	r3, 800b636 <_reclaim_reent+0x22>
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d14a      	bne.n	800b6c0 <_reclaim_reent+0xac>
 800b62a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b62c:	6819      	ldr	r1, [r3, #0]
 800b62e:	b111      	cbz	r1, 800b636 <_reclaim_reent+0x22>
 800b630:	4620      	mov	r0, r4
 800b632:	f7ff ff37 	bl	800b4a4 <_free_r>
 800b636:	6961      	ldr	r1, [r4, #20]
 800b638:	b111      	cbz	r1, 800b640 <_reclaim_reent+0x2c>
 800b63a:	4620      	mov	r0, r4
 800b63c:	f7ff ff32 	bl	800b4a4 <_free_r>
 800b640:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b642:	b111      	cbz	r1, 800b64a <_reclaim_reent+0x36>
 800b644:	4620      	mov	r0, r4
 800b646:	f7ff ff2d 	bl	800b4a4 <_free_r>
 800b64a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b64c:	b111      	cbz	r1, 800b654 <_reclaim_reent+0x40>
 800b64e:	4620      	mov	r0, r4
 800b650:	f7ff ff28 	bl	800b4a4 <_free_r>
 800b654:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b656:	b111      	cbz	r1, 800b65e <_reclaim_reent+0x4a>
 800b658:	4620      	mov	r0, r4
 800b65a:	f7ff ff23 	bl	800b4a4 <_free_r>
 800b65e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b660:	b111      	cbz	r1, 800b668 <_reclaim_reent+0x54>
 800b662:	4620      	mov	r0, r4
 800b664:	f7ff ff1e 	bl	800b4a4 <_free_r>
 800b668:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b66a:	b111      	cbz	r1, 800b672 <_reclaim_reent+0x5e>
 800b66c:	4620      	mov	r0, r4
 800b66e:	f7ff ff19 	bl	800b4a4 <_free_r>
 800b672:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b674:	b111      	cbz	r1, 800b67c <_reclaim_reent+0x68>
 800b676:	4620      	mov	r0, r4
 800b678:	f7ff ff14 	bl	800b4a4 <_free_r>
 800b67c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b67e:	b111      	cbz	r1, 800b686 <_reclaim_reent+0x72>
 800b680:	4620      	mov	r0, r4
 800b682:	f7ff ff0f 	bl	800b4a4 <_free_r>
 800b686:	69a3      	ldr	r3, [r4, #24]
 800b688:	b1e3      	cbz	r3, 800b6c4 <_reclaim_reent+0xb0>
 800b68a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b68c:	4620      	mov	r0, r4
 800b68e:	4798      	blx	r3
 800b690:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b692:	b1b9      	cbz	r1, 800b6c4 <_reclaim_reent+0xb0>
 800b694:	4620      	mov	r0, r4
 800b696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b69a:	f7ff bfad 	b.w	800b5f8 <cleanup_glue>
 800b69e:	5949      	ldr	r1, [r1, r5]
 800b6a0:	b941      	cbnz	r1, 800b6b4 <_reclaim_reent+0xa0>
 800b6a2:	3504      	adds	r5, #4
 800b6a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6a6:	2d80      	cmp	r5, #128	; 0x80
 800b6a8:	68d9      	ldr	r1, [r3, #12]
 800b6aa:	d1f8      	bne.n	800b69e <_reclaim_reent+0x8a>
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f7ff fef9 	bl	800b4a4 <_free_r>
 800b6b2:	e7ba      	b.n	800b62a <_reclaim_reent+0x16>
 800b6b4:	680e      	ldr	r6, [r1, #0]
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f7ff fef4 	bl	800b4a4 <_free_r>
 800b6bc:	4631      	mov	r1, r6
 800b6be:	e7ef      	b.n	800b6a0 <_reclaim_reent+0x8c>
 800b6c0:	2500      	movs	r5, #0
 800b6c2:	e7ef      	b.n	800b6a4 <_reclaim_reent+0x90>
 800b6c4:	bd70      	pop	{r4, r5, r6, pc}
 800b6c6:	bf00      	nop
 800b6c8:	20000030 	.word	0x20000030

0800b6cc <_sbrk_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4d06      	ldr	r5, [pc, #24]	; (800b6e8 <_sbrk_r+0x1c>)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	f7f5 fafe 	bl	8000cd8 <_sbrk>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_sbrk_r+0x1a>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_sbrk_r+0x1a>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	2000532c 	.word	0x2000532c

0800b6ec <__malloc_lock>:
 800b6ec:	4801      	ldr	r0, [pc, #4]	; (800b6f4 <__malloc_lock+0x8>)
 800b6ee:	f7ff beb1 	b.w	800b454 <__retarget_lock_acquire_recursive>
 800b6f2:	bf00      	nop
 800b6f4:	20005324 	.word	0x20005324

0800b6f8 <__malloc_unlock>:
 800b6f8:	4801      	ldr	r0, [pc, #4]	; (800b700 <__malloc_unlock+0x8>)
 800b6fa:	f7ff beac 	b.w	800b456 <__retarget_lock_release_recursive>
 800b6fe:	bf00      	nop
 800b700:	20005324 	.word	0x20005324

0800b704 <_init>:
 800b704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b706:	bf00      	nop
 800b708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b70a:	bc08      	pop	{r3}
 800b70c:	469e      	mov	lr, r3
 800b70e:	4770      	bx	lr

0800b710 <_fini>:
 800b710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b712:	bf00      	nop
 800b714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b716:	bc08      	pop	{r3}
 800b718:	469e      	mov	lr, r3
 800b71a:	4770      	bx	lr
