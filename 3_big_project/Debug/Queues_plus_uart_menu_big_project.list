
Queues_plus_uart_menu_big_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c90  0801238c  0801238c  0002238c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801501c  0801501c  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801501c  0801501c  0002501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015024  08015024  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015024  08015024  00025024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015028  08015028  00025028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801502c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a8  2**0
                  CONTENTS
 10 .bss          00005698  200000a8  200000a8  000300a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005740  20005740  000300a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000371ce  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006869  00000000  00000000  000672a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002500  00000000  00000000  0006db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022d0  00000000  00000000  00070010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028704  00000000  00000000  000722e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e3ec  00000000  00000000  0009a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7e5d  00000000  00000000  000c8dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b0c2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a1f4  00000000  00000000  001b0c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012374 	.word	0x08012374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08012374 	.word	0x08012374

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <time_i2c_write_single>:



/*function to transmit one byte of data to register_address on ds3231 (device_address: 0X68)*/
void time_i2c_write_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af04      	add	r7, sp, #16
 800059e:	4603      	mov	r3, r0
 80005a0:	603a      	str	r2, [r7, #0]
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	460b      	mov	r3, r1
 80005a6:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Write(&hi2c3, DS3231_I2C_ADDRESS<<1, DS3231_REGISTER_SECONDS_DEFAULT, 1, &seco, 1, 1000);
	//HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	HAL_I2C_Mem_Write(&hi2c3, (uint16_t)device_address<<1, register_address, 1, data_byte, 1, 1000);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	b299      	uxth	r1, r3
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b8:	9302      	str	r3, [sp, #8]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2301      	movs	r3, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <time_i2c_write_single+0x3c>)
 80005c6:	f006 fa15 	bl	80069f4 <HAL_I2C_Mem_Write>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20004b24 	.word	0x20004b24

080005d8 <time_i2c_write_multi>:

/*function to transmit an array of data to device_address, starting from start_register_address*/
void time_i2c_write_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af04      	add	r7, sp, #16
 80005de:	603a      	str	r2, [r7, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c3, device_address<<1, start_register_address, 1, data_array, data_length, 1000);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	b299      	uxth	r1, r3
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	797b      	ldrb	r3, [r7, #5]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	9002      	str	r0, [sp, #8]
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2301      	movs	r3, #1
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <time_i2c_write_multi+0x44>)
 800060e:	f006 f9f1 	bl	80069f4 <HAL_I2C_Mem_Write>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20004b24 	.word	0x20004b24

08000620 <time_i2c_read_single>:

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af04      	add	r7, sp, #16
 8000626:	4603      	mov	r3, r0
 8000628:	603a      	str	r2, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	460b      	mov	r3, r1
 800062e:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,register_address, 1, data_byte, 1, 1000);
	HAL_I2C_Mem_Read(&hi2c3, device_address<<1,register_address, 1, data_byte, 1, 1000);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	b29b      	uxth	r3, r3
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	b299      	uxth	r1, r3
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	b29a      	uxth	r2, r3
 800063c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	2301      	movs	r3, #1
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2301      	movs	r3, #1
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <time_i2c_read_single+0x3c>)
 800064e:	f006 facb 	bl	8006be8 <HAL_I2C_Mem_Read>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20004b24 	.word	0x20004b24

08000660 <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af04      	add	r7, sp, #16
 8000666:	603a      	str	r2, [r7, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	460b      	mov	r3, r1
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	4613      	mov	r3, r2
 8000674:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,start_register_address, 1, data_array, data_length, 1000);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	b29b      	uxth	r3, r3
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	b299      	uxth	r1, r3
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	b29a      	uxth	r2, r3
 8000682:	797b      	ldrb	r3, [r7, #5]
 8000684:	b29b      	uxth	r3, r3
 8000686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068a:	9002      	str	r0, [sp, #8]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <time_i2c_read_multi+0x44>)
 8000696:	f006 faa7 	bl	8006be8 <HAL_I2C_Mem_Read>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20004b24 	.word	0x20004b24

080006a8 <ds3231_I2C_init>:

/*function to initialize I2C peripheral in 100khz or 400khz*/
void ds3231_I2C_init()
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <ds3231_read>:
  }
}

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  switch (option)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b0e      	cmp	r3, #14
 80006c8:	f200 80ac 	bhi.w	8000824 <ds3231_read+0x16c>
 80006cc:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <ds3231_read+0x1c>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	08000711 	.word	0x08000711
 80006d8:	0800072d 	.word	0x0800072d
 80006dc:	08000749 	.word	0x08000749
 80006e0:	08000765 	.word	0x08000765
 80006e4:	08000781 	.word	0x08000781
 80006e8:	0800079d 	.word	0x0800079d
 80006ec:	080007b9 	.word	0x080007b9
 80006f0:	080007d5 	.word	0x080007d5
 80006f4:	080007e9 	.word	0x080007e9
 80006f8:	080007fd 	.word	0x080007fd
 80006fc:	08000825 	.word	0x08000825
 8000700:	08000825 	.word	0x08000825
 8000704:	08000825 	.word	0x08000825
 8000708:	08000825 	.word	0x08000825
 800070c:	0800080f 	.word	0x0800080f
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 8000710:	4a48      	ldr	r2, [pc, #288]	; (8000834 <ds3231_read+0x17c>)
 8000712:	2100      	movs	r1, #0
 8000714:	2068      	movs	r0, #104	; 0x68
 8000716:	f7ff ff83 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 800071a:	4b46      	ldr	r3, [pc, #280]	; (8000834 <ds3231_read+0x17c>)
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000722:	2101      	movs	r1, #1
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f000 f9cf 	bl	8000ac8 <BCD_to_HEX>
      break;
 800072a:	e07d      	b.n	8000828 <ds3231_read+0x170>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 800072c:	4a41      	ldr	r2, [pc, #260]	; (8000834 <ds3231_read+0x17c>)
 800072e:	2101      	movs	r1, #1
 8000730:	2068      	movs	r0, #104	; 0x68
 8000732:	f7ff ff75 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 8000736:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <ds3231_read+0x17c>)
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800073e:	2101      	movs	r1, #1
 8000740:	6838      	ldr	r0, [r7, #0]
 8000742:	f000 f9c1 	bl	8000ac8 <BCD_to_HEX>
      break;
 8000746:	e06f      	b.n	8000828 <ds3231_read+0x170>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 8000748:	4a3a      	ldr	r2, [pc, #232]	; (8000834 <ds3231_read+0x17c>)
 800074a:	2102      	movs	r1, #2
 800074c:	2068      	movs	r0, #104	; 0x68
 800074e:	f7ff ff67 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 8000752:	4b38      	ldr	r3, [pc, #224]	; (8000834 <ds3231_read+0x17c>)
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800075a:	2101      	movs	r1, #1
 800075c:	6838      	ldr	r0, [r7, #0]
 800075e:	f000 f9b3 	bl	8000ac8 <BCD_to_HEX>
      break;
 8000762:	e061      	b.n	8000828 <ds3231_read+0x170>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 8000764:	4a33      	ldr	r2, [pc, #204]	; (8000834 <ds3231_read+0x17c>)
 8000766:	2103      	movs	r1, #3
 8000768:	2068      	movs	r0, #104	; 0x68
 800076a:	f7ff ff59 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 800076e:	4b31      	ldr	r3, [pc, #196]	; (8000834 <ds3231_read+0x17c>)
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000776:	2101      	movs	r1, #1
 8000778:	6838      	ldr	r0, [r7, #0]
 800077a:	f000 f9a5 	bl	8000ac8 <BCD_to_HEX>
      break;
 800077e:	e053      	b.n	8000828 <ds3231_read+0x170>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 8000780:	4a2c      	ldr	r2, [pc, #176]	; (8000834 <ds3231_read+0x17c>)
 8000782:	2104      	movs	r1, #4
 8000784:	2068      	movs	r0, #104	; 0x68
 8000786:	f7ff ff4b 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <ds3231_read+0x17c>)
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000792:	2101      	movs	r1, #1
 8000794:	6838      	ldr	r0, [r7, #0]
 8000796:	f000 f997 	bl	8000ac8 <BCD_to_HEX>
      break;
 800079a:	e045      	b.n	8000828 <ds3231_read+0x170>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <ds3231_read+0x17c>)
 800079e:	2105      	movs	r1, #5
 80007a0:	2068      	movs	r0, #104	; 0x68
 80007a2:	f7ff ff3d 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <ds3231_read+0x17c>)
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80007ae:	2101      	movs	r1, #1
 80007b0:	6838      	ldr	r0, [r7, #0]
 80007b2:	f000 f989 	bl	8000ac8 <BCD_to_HEX>
      break;
 80007b6:	e037      	b.n	8000828 <ds3231_read+0x170>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <ds3231_read+0x17c>)
 80007ba:	2106      	movs	r1, #6
 80007bc:	2068      	movs	r0, #104	; 0x68
 80007be:	f7ff ff2f 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <ds3231_read+0x17c>)
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80007ca:	2101      	movs	r1, #1
 80007cc:	6838      	ldr	r0, [r7, #0]
 80007ce:	f000 f97b 	bl	8000ac8 <BCD_to_HEX>
      break;
 80007d2:	e029      	b.n	8000828 <ds3231_read+0x170>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <ds3231_read+0x17c>)
 80007d6:	210e      	movs	r1, #14
 80007d8:	2068      	movs	r0, #104	; 0x68
 80007da:	f7ff ff21 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <ds3231_read+0x17c>)
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	701a      	strb	r2, [r3, #0]
      break;
 80007e6:	e01f      	b.n	8000828 <ds3231_read+0x170>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 80007e8:	4a12      	ldr	r2, [pc, #72]	; (8000834 <ds3231_read+0x17c>)
 80007ea:	210f      	movs	r1, #15
 80007ec:	2068      	movs	r0, #104	; 0x68
 80007ee:	f7ff ff17 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <ds3231_read+0x17c>)
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	701a      	strb	r2, [r3, #0]
      break;
 80007fa:	e015      	b.n	8000828 <ds3231_read+0x170>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <ds3231_read+0x17c>)
 80007fe:	2110      	movs	r1, #16
 8000800:	2068      	movs	r0, #104	; 0x68
 8000802:	f7ff ff0d 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <ds3231_read+0x17c>)
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 800080e:	2307      	movs	r3, #7
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	2100      	movs	r1, #0
 8000814:	2068      	movs	r0, #104	; 0x68
 8000816:	f7ff ff23 	bl	8000660 <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 800081a:	2107      	movs	r1, #7
 800081c:	6838      	ldr	r0, [r7, #0]
 800081e:	f000 f953 	bl	8000ac8 <BCD_to_HEX>
      break;
 8000822:	e001      	b.n	8000828 <ds3231_read+0x170>
    default:
      return OPERATION_FAILED;
 8000824:	2300      	movs	r3, #0
 8000826:	e000      	b.n	800082a <ds3231_read+0x172>
  }
  return OPERATION_DONE;
 8000828:	2301      	movs	r3, #1
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000c4 	.word	0x200000c4

08000838 <ds3231_set>:

/*function to set internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_set(uint8_t option, uint8_t *data_array)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b0e      	cmp	r3, #14
 8000848:	f200 80d5 	bhi.w	80009f6 <ds3231_set+0x1be>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <ds3231_set+0x1c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000891 	.word	0x08000891
 8000858:	080008ad 	.word	0x080008ad
 800085c:	080008c9 	.word	0x080008c9
 8000860:	080008e5 	.word	0x080008e5
 8000864:	08000901 	.word	0x08000901
 8000868:	0800091d 	.word	0x0800091d
 800086c:	08000939 	.word	0x08000939
 8000870:	08000955 	.word	0x08000955
 8000874:	0800098d 	.word	0x0800098d
 8000878:	080009e3 	.word	0x080009e3
 800087c:	080009f7 	.word	0x080009f7
 8000880:	080009f7 	.word	0x080009f7
 8000884:	080009f7 	.word	0x080009f7
 8000888:	080009f7 	.word	0x080009f7
 800088c:	080009c5 	.word	0x080009c5
  {
    case SECOND:
      time_registers_clone[0] = *data_array;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	4b5b      	ldr	r3, [pc, #364]	; (8000a04 <ds3231_set+0x1cc>)
 8000896:	701a      	strb	r2, [r3, #0]
      HEX_to_BCD(&time_registers_clone[0], 1);
 8000898:	2101      	movs	r1, #1
 800089a:	485a      	ldr	r0, [pc, #360]	; (8000a04 <ds3231_set+0x1cc>)
 800089c:	f000 f953 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0]);
 80008a0:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <ds3231_set+0x1cc>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	2068      	movs	r0, #104	; 0x68
 80008a6:	f7ff fe77 	bl	8000598 <time_i2c_write_single>
      break;
 80008aa:	e0a6      	b.n	80009fa <ds3231_set+0x1c2>
    case MINUTE:
      time_registers_clone[1] = *data_array;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b54      	ldr	r3, [pc, #336]	; (8000a04 <ds3231_set+0x1cc>)
 80008b2:	705a      	strb	r2, [r3, #1]
      HEX_to_BCD(&time_registers_clone[1], 1);
 80008b4:	2101      	movs	r1, #1
 80008b6:	4854      	ldr	r0, [pc, #336]	; (8000a08 <ds3231_set+0x1d0>)
 80008b8:	f000 f945 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &time_registers_clone[1]);
 80008bc:	4a52      	ldr	r2, [pc, #328]	; (8000a08 <ds3231_set+0x1d0>)
 80008be:	2101      	movs	r1, #1
 80008c0:	2068      	movs	r0, #104	; 0x68
 80008c2:	f7ff fe69 	bl	8000598 <time_i2c_write_single>
      break;
 80008c6:	e098      	b.n	80009fa <ds3231_set+0x1c2>
    case HOUR:
      time_registers_clone[2] = *data_array;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <ds3231_set+0x1cc>)
 80008ce:	709a      	strb	r2, [r3, #2]
      HEX_to_BCD(&time_registers_clone[2], 1);
 80008d0:	2101      	movs	r1, #1
 80008d2:	484e      	ldr	r0, [pc, #312]	; (8000a0c <ds3231_set+0x1d4>)
 80008d4:	f000 f937 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &time_registers_clone[2]);
 80008d8:	4a4c      	ldr	r2, [pc, #304]	; (8000a0c <ds3231_set+0x1d4>)
 80008da:	2102      	movs	r1, #2
 80008dc:	2068      	movs	r0, #104	; 0x68
 80008de:	f7ff fe5b 	bl	8000598 <time_i2c_write_single>
      break;
 80008e2:	e08a      	b.n	80009fa <ds3231_set+0x1c2>
    case DAY_OF_WEEK:
      time_registers_clone[3] = *data_array;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <ds3231_set+0x1cc>)
 80008ea:	70da      	strb	r2, [r3, #3]
      HEX_to_BCD(&time_registers_clone[3], 1);
 80008ec:	2101      	movs	r1, #1
 80008ee:	4848      	ldr	r0, [pc, #288]	; (8000a10 <ds3231_set+0x1d8>)
 80008f0:	f000 f929 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &time_registers_clone[3]);
 80008f4:	4a46      	ldr	r2, [pc, #280]	; (8000a10 <ds3231_set+0x1d8>)
 80008f6:	2103      	movs	r1, #3
 80008f8:	2068      	movs	r0, #104	; 0x68
 80008fa:	f7ff fe4d 	bl	8000598 <time_i2c_write_single>
      break;
 80008fe:	e07c      	b.n	80009fa <ds3231_set+0x1c2>
    case DATE:
      time_registers_clone[4] = *data_array;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <ds3231_set+0x1cc>)
 8000906:	711a      	strb	r2, [r3, #4]
      HEX_to_BCD(&time_registers_clone[4], 1);
 8000908:	2101      	movs	r1, #1
 800090a:	4842      	ldr	r0, [pc, #264]	; (8000a14 <ds3231_set+0x1dc>)
 800090c:	f000 f91b 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &time_registers_clone[4]);
 8000910:	4a40      	ldr	r2, [pc, #256]	; (8000a14 <ds3231_set+0x1dc>)
 8000912:	2104      	movs	r1, #4
 8000914:	2068      	movs	r0, #104	; 0x68
 8000916:	f7ff fe3f 	bl	8000598 <time_i2c_write_single>
      break;
 800091a:	e06e      	b.n	80009fa <ds3231_set+0x1c2>
    case MONTH:
      time_registers_clone[5] = *data_array;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <ds3231_set+0x1cc>)
 8000922:	715a      	strb	r2, [r3, #5]
      HEX_to_BCD(&time_registers_clone[5], 1);
 8000924:	2101      	movs	r1, #1
 8000926:	483c      	ldr	r0, [pc, #240]	; (8000a18 <ds3231_set+0x1e0>)
 8000928:	f000 f90d 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &time_registers_clone[5]);
 800092c:	4a3a      	ldr	r2, [pc, #232]	; (8000a18 <ds3231_set+0x1e0>)
 800092e:	2105      	movs	r1, #5
 8000930:	2068      	movs	r0, #104	; 0x68
 8000932:	f7ff fe31 	bl	8000598 <time_i2c_write_single>
      break;
 8000936:	e060      	b.n	80009fa <ds3231_set+0x1c2>
    case YEAR:
      time_registers_clone[6] = *data_array;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <ds3231_set+0x1cc>)
 800093e:	719a      	strb	r2, [r3, #6]
      HEX_to_BCD(&time_registers_clone[6], 1);
 8000940:	2101      	movs	r1, #1
 8000942:	4836      	ldr	r0, [pc, #216]	; (8000a1c <ds3231_set+0x1e4>)
 8000944:	f000 f8ff 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &time_registers_clone[6]);
 8000948:	4a34      	ldr	r2, [pc, #208]	; (8000a1c <ds3231_set+0x1e4>)
 800094a:	2106      	movs	r1, #6
 800094c:	2068      	movs	r0, #104	; 0x68
 800094e:	f7ff fe23 	bl	8000598 <time_i2c_write_single>
      break;
 8000952:	e052      	b.n	80009fa <ds3231_set+0x1c2>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <ds3231_set+0x1e8>)
 8000956:	210e      	movs	r1, #14
 8000958:	2068      	movs	r0, #104	; 0x68
 800095a:	f7ff fe61 	bl	8000620 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (*data_array & (~(1 << DS3231_BIT_EOSC)));
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <ds3231_set+0x1e8>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b25b      	sxtb	r3, r3
 8000964:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000968:	b25a      	sxtb	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b25b      	sxtb	r3, r3
 8000970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000974:	b25b      	sxtb	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b25b      	sxtb	r3, r3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <ds3231_set+0x1ec>)
 800097e:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8000980:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <ds3231_set+0x1ec>)
 8000982:	210e      	movs	r1, #14
 8000984:	2068      	movs	r0, #104	; 0x68
 8000986:	f7ff fe07 	bl	8000598 <time_i2c_write_single>
      break;
 800098a:	e036      	b.n	80009fa <ds3231_set+0x1c2>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 800098c:	4a24      	ldr	r2, [pc, #144]	; (8000a20 <ds3231_set+0x1e8>)
 800098e:	210f      	movs	r1, #15
 8000990:	2068      	movs	r0, #104	; 0x68
 8000992:	f7ff fe45 	bl	8000620 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (*data_array & (~(1 << DS3231_BIT_OSF)));
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <ds3231_set+0x1e8>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b25b      	sxtb	r3, r3
 800099c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80009a0:	b25a      	sxtb	r2, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <ds3231_set+0x1ec>)
 80009b6:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 80009b8:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <ds3231_set+0x1ec>)
 80009ba:	210f      	movs	r1, #15
 80009bc:	2068      	movs	r0, #104	; 0x68
 80009be:	f7ff fdeb 	bl	8000598 <time_i2c_write_single>
      break;
 80009c2:	e01a      	b.n	80009fa <ds3231_set+0x1c2>
    case TIME:
      ds3231_data_clone(TIME, data_array);
 80009c4:	6839      	ldr	r1, [r7, #0]
 80009c6:	200e      	movs	r0, #14
 80009c8:	f000 f82e 	bl	8000a28 <ds3231_data_clone>
      HEX_to_BCD(&time_registers_clone[0], 7);
 80009cc:	2107      	movs	r1, #7
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <ds3231_set+0x1cc>)
 80009d0:	f000 f8b9 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);
 80009d4:	2307      	movs	r3, #7
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <ds3231_set+0x1cc>)
 80009d8:	2100      	movs	r1, #0
 80009da:	2068      	movs	r0, #104	; 0x68
 80009dc:	f7ff fdfc 	bl	80005d8 <time_i2c_write_multi>
      break;
 80009e0:	e00b      	b.n	80009fa <ds3231_set+0x1c2>
    case AGING_OFFSET:
      register_new_value = *data_array;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <ds3231_set+0x1ec>)
 80009e8:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <ds3231_set+0x1ec>)
 80009ec:	2110      	movs	r1, #16
 80009ee:	2068      	movs	r0, #104	; 0x68
 80009f0:	f7ff fdd2 	bl	8000598 <time_i2c_write_single>
      break;
 80009f4:	e001      	b.n	80009fa <ds3231_set+0x1c2>
    default:
      return OPERATION_FAILED;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <ds3231_set+0x1c4>
  }
  return OPERATION_DONE;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000c8 	.word	0x200000c8
 8000a08:	200000c9 	.word	0x200000c9
 8000a0c:	200000ca 	.word	0x200000ca
 8000a10:	200000cb 	.word	0x200000cb
 8000a14:	200000cc 	.word	0x200000cc
 8000a18:	200000cd 	.word	0x200000cd
 8000a1c:	200000ce 	.word	0x200000ce
 8000a20:	200000c4 	.word	0x200000c4
 8000a24:	200000c5 	.word	0x200000c5

08000a28 <ds3231_data_clone>:

/*to clone the desired data and prevent reconversion of BCD to HEX*/
static void ds3231_data_clone(uint8_t option, uint8_t *input_array)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b0e      	cmp	r3, #14
 8000a38:	d006      	beq.n	8000a48 <ds3231_data_clone+0x20>
 8000a3a:	2b0e      	cmp	r3, #14
 8000a3c:	dc37      	bgt.n	8000aae <ds3231_data_clone+0x86>
 8000a3e:	2b0a      	cmp	r3, #10
 8000a40:	d013      	beq.n	8000a6a <ds3231_data_clone+0x42>
 8000a42:	2b0b      	cmp	r3, #11
 8000a44:	d022      	beq.n	8000a8c <ds3231_data_clone+0x64>
      {
        alarm2_registers_clone[counter] = input_array[counter];
      }
      break;
    default:
      break;
 8000a46:	e032      	b.n	8000aae <ds3231_data_clone+0x86>
      for (uint8_t counter = 0; counter < 7; counter++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]
 8000a4c:	e009      	b.n	8000a62 <ds3231_data_clone+0x3a>
        time_registers_clone[counter] = input_array[counter];
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	441a      	add	r2, r3
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	7811      	ldrb	r1, [r2, #0]
 8000a58:	4a18      	ldr	r2, [pc, #96]	; (8000abc <ds3231_data_clone+0x94>)
 8000a5a:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 7; counter++)
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	2b06      	cmp	r3, #6
 8000a66:	d9f2      	bls.n	8000a4e <ds3231_data_clone+0x26>
      break;
 8000a68:	e022      	b.n	8000ab0 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 4; counter++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73bb      	strb	r3, [r7, #14]
 8000a6e:	e009      	b.n	8000a84 <ds3231_data_clone+0x5c>
        alarm1_registers_clone[counter] = input_array[counter];
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	683a      	ldr	r2, [r7, #0]
 8000a74:	441a      	add	r2, r3
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	7811      	ldrb	r1, [r2, #0]
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <ds3231_data_clone+0x98>)
 8000a7c:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 4; counter++)
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	3301      	adds	r3, #1
 8000a82:	73bb      	strb	r3, [r7, #14]
 8000a84:	7bbb      	ldrb	r3, [r7, #14]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d9f2      	bls.n	8000a70 <ds3231_data_clone+0x48>
      break;
 8000a8a:	e011      	b.n	8000ab0 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 3; counter++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	737b      	strb	r3, [r7, #13]
 8000a90:	e009      	b.n	8000aa6 <ds3231_data_clone+0x7e>
        alarm2_registers_clone[counter] = input_array[counter];
 8000a92:	7b7b      	ldrb	r3, [r7, #13]
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	441a      	add	r2, r3
 8000a98:	7b7b      	ldrb	r3, [r7, #13]
 8000a9a:	7811      	ldrb	r1, [r2, #0]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <ds3231_data_clone+0x9c>)
 8000a9e:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 3; counter++)
 8000aa0:	7b7b      	ldrb	r3, [r7, #13]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	737b      	strb	r3, [r7, #13]
 8000aa6:	7b7b      	ldrb	r3, [r7, #13]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d9f2      	bls.n	8000a92 <ds3231_data_clone+0x6a>
      break;
 8000aac:	e000      	b.n	8000ab0 <ds3231_data_clone+0x88>
      break;
 8000aae:	bf00      	nop
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	200000c8 	.word	0x200000c8
 8000ac0:	200000d0 	.word	0x200000d0
 8000ac4:	200000d4 	.word	0x200000d4

08000ac8 <BCD_to_HEX>:

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e028      	b.n	8000b30 <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	091b      	lsrs	r3, r3, #4
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	440b      	add	r3, r1
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	b2d9      	uxtb	r1, r3
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	f003 030f 	and.w	r3, r3, #15
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	4403      	add	r3, r0
 8000b1e:	440a      	add	r2, r1
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73fb      	strb	r3, [r7, #15]
 8000b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	dad2      	bge.n	8000ade <BCD_to_HEX+0x16>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HEX_to_BCD>:

/*internal function related to this file and not accessible from outside*/
static void HEX_to_BCD(uint8_t *data_array, uint8_t array_length)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b085      	sub	sp, #20
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
  uint8_t temporary_value;
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	73bb      	strb	r3, [r7, #14]
 8000b5a:	e02d      	b.n	8000bb8 <HEX_to_BCD+0x72>
  {
    temporary_value = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8000b60:	e00e      	b.n	8000b80 <HEX_to_BCD+0x3a>
    {
      temporary_value += 0X10;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	3310      	adds	r3, #16
 8000b66:	73fb      	strb	r3, [r7, #15]
      data_array[index] -= 0X0A;
 8000b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	440b      	add	r3, r1
 8000b7a:	3a0a      	subs	r2, #10
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	701a      	strb	r2, [r3, #0]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8000b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	dce8      	bgt.n	8000b62 <HEX_to_BCD+0x1c>
    }
    temporary_value += data_array[index];
 8000b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	73fb      	strb	r3, [r7, #15]
    data_array[index] = temporary_value;
 8000ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	73bb      	strb	r3, [r7, #14]
 8000bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dacd      	bge.n	8000b5c <HEX_to_BCD+0x16>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f003 fb8f 	bl	80042f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f8e7 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bde:	f000 faf1 	bl	80011c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000be2:	f000 f94f 	bl	8000e84 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000be6:	f000 f9a9 	bl	8000f3c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000bea:	f000 f9fd 	bl	8000fe8 <MX_SPI1_Init>
  MX_RTC_Init();
 8000bee:	f000 f9d5 	bl	8000f9c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000bf2:	f000 fabd 	bl	8001170 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000bf6:	f000 f973 	bl	8000ee0 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000bfa:	f000 fa2b 	bl	8001054 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000bfe:	f000 fa81 	bl	8001104 <MX_TIM7_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c02:	f00d f9a3 	bl	800df4c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of input_Queue */
  input_QueueHandle = osMessageQueueNew (10, sizeof(char*), &input_Queue_attributes);
 8000c06:	4a45      	ldr	r2, [pc, #276]	; (8000d1c <main+0x14c>)
 8000c08:	2104      	movs	r1, #4
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f00d fa95 	bl	800e13a <osMessageQueueNew>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a43      	ldr	r2, [pc, #268]	; (8000d20 <main+0x150>)
 8000c14:	6013      	str	r3, [r2, #0]

  /* creation of print_Queue */
  print_QueueHandle = osMessageQueueNew (10, sizeof(char*), &print_Queue_attributes);
 8000c16:	4a43      	ldr	r2, [pc, #268]	; (8000d24 <main+0x154>)
 8000c18:	2104      	movs	r1, #4
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f00d fa8d 	bl	800e13a <osMessageQueueNew>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4a41      	ldr	r2, [pc, #260]	; (8000d28 <main+0x158>)
 8000c24:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c26:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <main+0x15c>)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4841      	ldr	r0, [pc, #260]	; (8000d30 <main+0x160>)
 8000c2c:	f00d f9d8 	bl	800dfe0 <osThreadNew>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4a40      	ldr	r2, [pc, #256]	; (8000d34 <main+0x164>)
 8000c34:	6013      	str	r3, [r2, #0]

  /* creation of menu_task */
  menu_taskHandle = osThreadNew(start_menu_task, NULL, &menu_task_attributes);
 8000c36:	4a40      	ldr	r2, [pc, #256]	; (8000d38 <main+0x168>)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4840      	ldr	r0, [pc, #256]	; (8000d3c <main+0x16c>)
 8000c3c:	f00d f9d0 	bl	800dfe0 <osThreadNew>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a3f      	ldr	r2, [pc, #252]	; (8000d40 <main+0x170>)
 8000c44:	6013      	str	r3, [r2, #0]

  /* creation of led_task */
  led_taskHandle = osThreadNew(start_led_task, NULL, &led_task_attributes);
 8000c46:	4a3f      	ldr	r2, [pc, #252]	; (8000d44 <main+0x174>)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	483f      	ldr	r0, [pc, #252]	; (8000d48 <main+0x178>)
 8000c4c:	f00d f9c8 	bl	800dfe0 <osThreadNew>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4a3e      	ldr	r2, [pc, #248]	; (8000d4c <main+0x17c>)
 8000c54:	6013      	str	r3, [r2, #0]

  /* creation of rtc_task */
  rtc_taskHandle = osThreadNew(start_rtc_task, NULL, &rtc_task_attributes);
 8000c56:	4a3e      	ldr	r2, [pc, #248]	; (8000d50 <main+0x180>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	483e      	ldr	r0, [pc, #248]	; (8000d54 <main+0x184>)
 8000c5c:	f00d f9c0 	bl	800dfe0 <osThreadNew>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a3d      	ldr	r2, [pc, #244]	; (8000d58 <main+0x188>)
 8000c64:	6013      	str	r3, [r2, #0]

  /* creation of print_task */
  print_taskHandle = osThreadNew(start_print, NULL, &print_task_attributes);
 8000c66:	4a3d      	ldr	r2, [pc, #244]	; (8000d5c <main+0x18c>)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	483d      	ldr	r0, [pc, #244]	; (8000d60 <main+0x190>)
 8000c6c:	f00d f9b8 	bl	800dfe0 <osThreadNew>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a3c      	ldr	r2, [pc, #240]	; (8000d64 <main+0x194>)
 8000c74:	6013      	str	r3, [r2, #0]

  /* creation of cmd_handl_task */
  cmd_handl_taskHandle = osThreadNew(start_cmd_handl, NULL, &cmd_handl_task_attributes);
 8000c76:	4a3c      	ldr	r2, [pc, #240]	; (8000d68 <main+0x198>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	483c      	ldr	r0, [pc, #240]	; (8000d6c <main+0x19c>)
 8000c7c:	f00d f9b0 	bl	800dfe0 <osThreadNew>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a3b      	ldr	r2, [pc, #236]	; (8000d70 <main+0x1a0>)
 8000c84:	6013      	str	r3, [r2, #0]

  /* creation of OLED_RTC */
  OLED_RTCHandle = osThreadNew(StartOLED_RTC, NULL, &OLED_RTC_attributes);
 8000c86:	4a3b      	ldr	r2, [pc, #236]	; (8000d74 <main+0x1a4>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	483b      	ldr	r0, [pc, #236]	; (8000d78 <main+0x1a8>)
 8000c8c:	f00d f9a8 	bl	800dfe0 <osThreadNew>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a3a      	ldr	r2, [pc, #232]	; (8000d7c <main+0x1ac>)
 8000c94:	6013      	str	r3, [r2, #0]

  /* creation of test_task */
  test_taskHandle = osThreadNew(start_test_task, NULL, &test_task_attributes);
 8000c96:	4a3a      	ldr	r2, [pc, #232]	; (8000d80 <main+0x1b0>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	483a      	ldr	r0, [pc, #232]	; (8000d84 <main+0x1b4>)
 8000c9c:	f00d f9a0 	bl	800dfe0 <osThreadNew>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a39      	ldr	r2, [pc, #228]	; (8000d88 <main+0x1b8>)
 8000ca4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // Create software timers (Created manually)  FOr LEDs
   handler_led_timer[0] = xTimerCreate("led_timer_1", pdMS_TO_TICKS(100), pdTRUE, (void*)1, led_effect_callback);
 8000ca6:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <main+0x1bc>)
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	2201      	movs	r2, #1
 8000cae:	2164      	movs	r1, #100	; 0x64
 8000cb0:	4837      	ldr	r0, [pc, #220]	; (8000d90 <main+0x1c0>)
 8000cb2:	f00f fbb7 	bl	8010424 <xTimerCreate>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a36      	ldr	r2, [pc, #216]	; (8000d94 <main+0x1c4>)
 8000cba:	6013      	str	r3, [r2, #0]
   handler_led_timer[1] = xTimerCreate("led_timer_2", pdMS_TO_TICKS(100), pdTRUE, (void*)2, led_effect_callback);
 8000cbc:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <main+0x1bc>)
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2164      	movs	r1, #100	; 0x64
 8000cc6:	4834      	ldr	r0, [pc, #208]	; (8000d98 <main+0x1c8>)
 8000cc8:	f00f fbac 	bl	8010424 <xTimerCreate>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a31      	ldr	r2, [pc, #196]	; (8000d94 <main+0x1c4>)
 8000cd0:	6053      	str	r3, [r2, #4]
   handler_led_timer[2] = xTimerCreate("led_timer_3", pdMS_TO_TICKS(100), pdTRUE, (void*)3, led_effect_callback);
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <main+0x1bc>)
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2164      	movs	r1, #100	; 0x64
 8000cdc:	482f      	ldr	r0, [pc, #188]	; (8000d9c <main+0x1cc>)
 8000cde:	f00f fba1 	bl	8010424 <xTimerCreate>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <main+0x1c4>)
 8000ce6:	6093      	str	r3, [r2, #8]
   handler_led_timer[3] = xTimerCreate("led_timer_4", pdMS_TO_TICKS(100), pdTRUE, (void*)4, led_effect_callback);
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <main+0x1bc>)
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2304      	movs	r3, #4
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2164      	movs	r1, #100	; 0x64
 8000cf2:	482b      	ldr	r0, [pc, #172]	; (8000da0 <main+0x1d0>)
 8000cf4:	f00f fb96 	bl	8010424 <xTimerCreate>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a26      	ldr	r2, [pc, #152]	; (8000d94 <main+0x1c4>)
 8000cfc:	60d3      	str	r3, [r2, #12]

   // For write data from UART

   int uart2_init_status = HAL_UART_Receive_IT(&huart2, &user_data , 1);			// Turn on (start) receive one char in interrupt mode
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4928      	ldr	r1, [pc, #160]	; (8000da4 <main+0x1d4>)
 8000d02:	4829      	ldr	r0, [pc, #164]	; (8000da8 <main+0x1d8>)
 8000d04:	f009 f8ef 	bl	8009ee6 <HAL_UART_Receive_IT>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	607b      	str	r3, [r7, #4]
   if(uart2_init_status == HAL_ERROR)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d101      	bne.n	8000d16 <main+0x146>
   {
	   int ggg =9;
 8000d12:	2309      	movs	r3, #9
 8000d14:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d16:	f00d f93d 	bl	800df94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <main+0x14a>
 8000d1c:	08012ad8 	.word	0x08012ad8
 8000d20:	20004be4 	.word	0x20004be4
 8000d24:	08012af0 	.word	0x08012af0
 8000d28:	20004c60 	.word	0x20004c60
 8000d2c:	080129b8 	.word	0x080129b8
 8000d30:	08001a4f 	.word	0x08001a4f
 8000d34:	20004b20 	.word	0x20004b20
 8000d38:	080129dc 	.word	0x080129dc
 8000d3c:	08001a65 	.word	0x08001a65
 8000d40:	20004d04 	.word	0x20004d04
 8000d44:	08012a00 	.word	0x08012a00
 8000d48:	08001b81 	.word	0x08001b81
 8000d4c:	20004bd0 	.word	0x20004bd0
 8000d50:	08012a24 	.word	0x08012a24
 8000d54:	08001cd5 	.word	0x08001cd5
 8000d58:	20004c64 	.word	0x20004c64
 8000d5c:	08012a48 	.word	0x08012a48
 8000d60:	080020a1 	.word	0x080020a1
 8000d64:	20004bec 	.word	0x20004bec
 8000d68:	08012a6c 	.word	0x08012a6c
 8000d6c:	080020f9 	.word	0x080020f9
 8000d70:	20004bf0 	.word	0x20004bf0
 8000d74:	08012a90 	.word	0x08012a90
 8000d78:	08002125 	.word	0x08002125
 8000d7c:	20004be8 	.word	0x20004be8
 8000d80:	08012ab4 	.word	0x08012ab4
 8000d84:	080031ed 	.word	0x080031ed
 8000d88:	20004b78 	.word	0x20004b78
 8000d8c:	080016f5 	.word	0x080016f5
 8000d90:	08012424 	.word	0x08012424
 8000d94:	20004bd4 	.word	0x20004bd4
 8000d98:	08012430 	.word	0x08012430
 8000d9c:	0801243c 	.word	0x0801243c
 8000da0:	08012448 	.word	0x08012448
 8000da4:	20004c5c 	.word	0x20004c5c
 8000da8:	20004cc0 	.word	0x20004cc0

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b094      	sub	sp, #80	; 0x50
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	2230      	movs	r2, #48	; 0x30
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f010 fe3a 	bl	8011a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <SystemClock_Config+0xd0>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <SystemClock_Config+0xd0>)
 8000dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dde:	6413      	str	r3, [r2, #64]	; 0x40
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <SystemClock_Config+0xd0>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <SystemClock_Config+0xd4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <SystemClock_Config+0xd4>)
 8000df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <SystemClock_Config+0xd4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e08:	2309      	movs	r3, #9
 8000e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e12:	2301      	movs	r3, #1
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e16:	2302      	movs	r3, #2
 8000e18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e20:	2308      	movs	r3, #8
 8000e22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	f107 0320 	add.w	r3, r7, #32
 8000e36:	4618      	mov	r0, r3
 8000e38:	f007 f97a 	bl	8008130 <HAL_RCC_OscConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e42:	f002 fa97 	bl	8003374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e46:	230f      	movs	r3, #15
 8000e48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	2105      	movs	r1, #5
 8000e64:	4618      	mov	r0, r3
 8000e66:	f007 fbdb 	bl	8008620 <HAL_RCC_ClockConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000e70:	f002 fa80 	bl	8003374 <Error_Handler>
  }
}
 8000e74:	bf00      	nop
 8000e76:	3750      	adds	r7, #80	; 0x50
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40007000 	.word	0x40007000

08000e84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000e8a:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <MX_I2C1_Init+0x54>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000e90:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MX_I2C1_Init+0x58>)
 8000e92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_I2C1_Init+0x50>)
 8000ec2:	f005 fb55 	bl	8006570 <HAL_I2C_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ecc:	f002 fa52 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20004b7c 	.word	0x20004b7c
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	000186a0 	.word	0x000186a0

08000ee0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_I2C3_Init+0x50>)
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <MX_I2C3_Init+0x54>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_I2C3_Init+0x50>)
 8000eec:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <MX_I2C3_Init+0x58>)
 8000eee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_I2C3_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_I2C3_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_I2C3_Init+0x50>)
 8000efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f02:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_I2C3_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_I2C3_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <MX_I2C3_Init+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_I2C3_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_I2C3_Init+0x50>)
 8000f1e:	f005 fb27 	bl	8006570 <HAL_I2C_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f28:	f002 fa24 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20004b24 	.word	0x20004b24
 8000f34:	40005c00 	.word	0x40005c00
 8000f38:	00061a80 	.word	0x00061a80

08000f3c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_I2S3_Init+0x54>)
 8000f42:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <MX_I2S3_Init+0x58>)
 8000f44:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_I2S3_Init+0x54>)
 8000f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_I2S3_Init+0x54>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_I2S3_Init+0x54>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <MX_I2S3_Init+0x54>)
 8000f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f60:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_I2S3_Init+0x54>)
 8000f64:	4a0c      	ldr	r2, [pc, #48]	; (8000f98 <MX_I2S3_Init+0x5c>)
 8000f66:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_I2S3_Init+0x54>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_I2S3_Init+0x54>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_I2S3_Init+0x54>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_I2S3_Init+0x54>)
 8000f7c:	f006 fc38 	bl	80077f0 <HAL_I2S_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f86:	f002 f9f5 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20004d50 	.word	0x20004d50
 8000f94:	40003c00 	.word	0x40003c00
 8000f98:	00017700 	.word	0x00017700

08000f9c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_RTC_Init+0x44>)
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <MX_RTC_Init+0x48>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_RTC_Init+0x44>)
 8000fa8:	2240      	movs	r2, #64	; 0x40
 8000faa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_RTC_Init+0x44>)
 8000fae:	227f      	movs	r2, #127	; 0x7f
 8000fb0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_RTC_Init+0x44>)
 8000fb4:	22ff      	movs	r2, #255	; 0xff
 8000fb6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_RTC_Init+0x44>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_RTC_Init+0x44>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_RTC_Init+0x44>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_RTC_Init+0x44>)
 8000fcc:	f007 fe96 	bl	8008cfc <HAL_RTC_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000fd6:	f002 f9cd 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20004bf4 	.word	0x20004bf4
 8000fe4:	40002800 	.word	0x40002800

08000fe8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <MX_SPI1_Init+0x64>)
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <MX_SPI1_Init+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <MX_SPI1_Init+0x64>)
 8000ff4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_SPI1_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <MX_SPI1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_SPI1_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_SPI1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_SPI1_Init+0x64>)
 8001014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001018:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_SPI1_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <MX_SPI1_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_SPI1_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <MX_SPI1_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_SPI1_Init+0x64>)
 8001034:	220a      	movs	r2, #10
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <MX_SPI1_Init+0x64>)
 800103a:	f008 f942 	bl	80092c2 <HAL_SPI_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001044:	f002 f996 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20004c68 	.word	0x20004c68
 8001050:	40013000 	.word	0x40013000

08001054 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f010 fce6 	bl	8011a34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <MX_TIM1_Init+0xa8>)
 8001072:	4a23      	ldr	r2, [pc, #140]	; (8001100 <MX_TIM1_Init+0xac>)
 8001074:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_TIM1_Init+0xa8>)
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_TIM1_Init+0xa8>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <MX_TIM1_Init+0xa8>)
 8001084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001088:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_TIM1_Init+0xa8>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_TIM1_Init+0xa8>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_TIM1_Init+0xa8>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800109c:	2301      	movs	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a4:	2301      	movs	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b4:	2301      	movs	r3, #1
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4619      	mov	r1, r3
 80010c6:	480d      	ldr	r0, [pc, #52]	; (80010fc <MX_TIM1_Init+0xa8>)
 80010c8:	f008 fa73 	bl	80095b2 <HAL_TIM_Encoder_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80010d2:	f002 f94f 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <MX_TIM1_Init+0xa8>)
 80010e4:	f008 fd90 	bl	8009c08 <HAL_TIMEx_MasterConfigSynchronization>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80010ee:	f002 f941 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	; 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20004c14 	.word	0x20004c14
 8001100:	40010000 	.word	0x40010000

08001104 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_TIM7_Init+0x64>)
 8001114:	4a15      	ldr	r2, [pc, #84]	; (800116c <MX_TIM7_Init+0x68>)
 8001116:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_TIM7_Init+0x64>)
 800111a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800111e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_TIM7_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_TIM7_Init+0x64>)
 8001128:	2263      	movs	r2, #99	; 0x63
 800112a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_TIM7_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_TIM7_Init+0x64>)
 8001134:	f008 f94e 	bl	80093d4 <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800113e:	f002 f919 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_TIM7_Init+0x64>)
 8001150:	f008 fd5a 	bl	8009c08 <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800115a:	f002 f90b 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20004d08 	.word	0x20004d08
 800116c:	40001400 	.word	0x40001400

08001170 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_USART2_UART_Init+0x50>)
 8001178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800117c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a8:	f008 fdbe 	bl	8009d28 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011b2:	f002 f8df 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20004cc0 	.word	0x20004cc0
 80011c0:	40004400 	.word	0x40004400

080011c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	4b7d      	ldr	r3, [pc, #500]	; (80013d4 <MX_GPIO_Init+0x210>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a7c      	ldr	r2, [pc, #496]	; (80013d4 <MX_GPIO_Init+0x210>)
 80011e4:	f043 0310 	orr.w	r3, r3, #16
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b7a      	ldr	r3, [pc, #488]	; (80013d4 <MX_GPIO_Init+0x210>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0310 	and.w	r3, r3, #16
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	4b76      	ldr	r3, [pc, #472]	; (80013d4 <MX_GPIO_Init+0x210>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a75      	ldr	r2, [pc, #468]	; (80013d4 <MX_GPIO_Init+0x210>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b73      	ldr	r3, [pc, #460]	; (80013d4 <MX_GPIO_Init+0x210>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b6f      	ldr	r3, [pc, #444]	; (80013d4 <MX_GPIO_Init+0x210>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a6e      	ldr	r2, [pc, #440]	; (80013d4 <MX_GPIO_Init+0x210>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b6c      	ldr	r3, [pc, #432]	; (80013d4 <MX_GPIO_Init+0x210>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b68      	ldr	r3, [pc, #416]	; (80013d4 <MX_GPIO_Init+0x210>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a67      	ldr	r2, [pc, #412]	; (80013d4 <MX_GPIO_Init+0x210>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <MX_GPIO_Init+0x210>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b61      	ldr	r3, [pc, #388]	; (80013d4 <MX_GPIO_Init+0x210>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a60      	ldr	r2, [pc, #384]	; (80013d4 <MX_GPIO_Init+0x210>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b5e      	ldr	r3, [pc, #376]	; (80013d4 <MX_GPIO_Init+0x210>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b5a      	ldr	r3, [pc, #360]	; (80013d4 <MX_GPIO_Init+0x210>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a59      	ldr	r2, [pc, #356]	; (80013d4 <MX_GPIO_Init+0x210>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <MX_GPIO_Init+0x210>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2108      	movs	r1, #8
 8001286:	4854      	ldr	r0, [pc, #336]	; (80013d8 <MX_GPIO_Init+0x214>)
 8001288:	f003 fbc4 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2101      	movs	r1, #1
 8001290:	4852      	ldr	r0, [pc, #328]	; (80013dc <MX_GPIO_Init+0x218>)
 8001292:	f003 fbbf 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001296:	2200      	movs	r2, #0
 8001298:	f24f 0110 	movw	r1, #61456	; 0xf010
 800129c:	4850      	ldr	r0, [pc, #320]	; (80013e0 <MX_GPIO_Init+0x21c>)
 800129e:	f003 fbb9 	bl	8004a14 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012a2:	2308      	movs	r3, #8
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	4619      	mov	r1, r3
 80012b8:	4847      	ldr	r0, [pc, #284]	; (80013d8 <MX_GPIO_Init+0x214>)
 80012ba:	f003 f9f7 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012be:	2301      	movs	r3, #1
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4841      	ldr	r0, [pc, #260]	; (80013dc <MX_GPIO_Init+0x218>)
 80012d6:	f003 f9e9 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012da:	2308      	movs	r3, #8
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ea:	2305      	movs	r3, #5
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	4839      	ldr	r0, [pc, #228]	; (80013dc <MX_GPIO_Init+0x218>)
 80012f6:	f003 f9d9 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012fa:	2301      	movs	r3, #1
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	4835      	ldr	r0, [pc, #212]	; (80013e4 <MX_GPIO_Init+0x220>)
 8001310:	f003 f9cc 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001314:	2304      	movs	r3, #4
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4830      	ldr	r0, [pc, #192]	; (80013e8 <MX_GPIO_Init+0x224>)
 8001328:	f003 f9c0 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 800132c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001332:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4825      	ldr	r0, [pc, #148]	; (80013d8 <MX_GPIO_Init+0x214>)
 8001344:	f003 f9b2 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135a:	2305      	movs	r3, #5
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	4820      	ldr	r0, [pc, #128]	; (80013e8 <MX_GPIO_Init+0x224>)
 8001366:	f003 f9a1 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800136a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800136e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4817      	ldr	r0, [pc, #92]	; (80013e0 <MX_GPIO_Init+0x21c>)
 8001384:	f003 f992 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001388:	2320      	movs	r3, #32
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <MX_GPIO_Init+0x21c>)
 800139c:	f003 f986 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013a4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4808      	ldr	r0, [pc, #32]	; (80013d8 <MX_GPIO_Init+0x214>)
 80013b6:	f003 f979 	bl	80046ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2105      	movs	r1, #5
 80013be:	2028      	movs	r0, #40	; 0x28
 80013c0:	f003 f8b8 	bl	8004534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013c4:	2028      	movs	r0, #40	; 0x28
 80013c6:	f003 f8d1 	bl	800456c <HAL_NVIC_EnableIRQ>

}
 80013ca:	bf00      	nop
 80013cc:	3730      	adds	r7, #48	; 0x30
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400

080013ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/////////////////////////////////////////////////////////////////////////////
// Receive one char from UART. This function called by UART interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	6078      	str	r0, [r7, #4]
	uint8_t dummy = 0;													// Buffer for extract '\n' sign
 80013f4:	2300      	movs	r3, #0
 80013f6:	72fb      	strb	r3, [r7, #11]
	int peek_buff = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]

	if(!xQueueIsQueueFullFromISR(input_QueueHandle))
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_UART_RxCpltCallback+0x88>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f00d fe19 	bl	800f038 <xQueueIsQueueFullFromISR>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d107      	bne.n	800141c <HAL_UART_RxCpltCallback+0x30>
	{
		xQueueSendFromISR(input_QueueHandle, (void*)&user_data, NULL);		// Enqueue data byte
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_UART_RxCpltCallback+0x88>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	2300      	movs	r3, #0
 8001412:	2200      	movs	r2, #0
 8001414:	4918      	ldr	r1, [pc, #96]	; (8001478 <HAL_UART_RxCpltCallback+0x8c>)
 8001416:	f00d fae5 	bl	800e9e4 <xQueueGenericSendFromISR>
 800141a:	e013      	b.n	8001444 <HAL_UART_RxCpltCallback+0x58>
	}
	else 																	// Queue is full
	{
		if(user_data == '\r')												// Check, is user_data has '\n' sign?
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_UART_RxCpltCallback+0x8c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b0d      	cmp	r3, #13
 8001424:	d10e      	bne.n	8001444 <HAL_UART_RxCpltCallback+0x58>
		{
			xQueueReceiveFromISR(input_QueueHandle, (void*)&dummy, NULL );	// Delete '\n' sign from queue
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_UART_RxCpltCallback+0x88>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f107 010b 	add.w	r1, r7, #11
 800142e:	2200      	movs	r2, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f00d fc53 	bl	800ecdc <xQueueReceiveFromISR>
			xQueueSendFromISR(input_QueueHandle, (void*)&user_data, NULL);  // Save user_data on the place of '\n'
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_UART_RxCpltCallback+0x88>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	2200      	movs	r2, #0
 800143e:	490e      	ldr	r1, [pc, #56]	; (8001478 <HAL_UART_RxCpltCallback+0x8c>)
 8001440:	f00d fad0 	bl	800e9e4 <xQueueGenericSendFromISR>
		}
	}
	// Send notification to command task if user_data == '\n'
	if(user_data == '\r')
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_UART_RxCpltCallback+0x8c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b0d      	cmp	r3, #13
 800144c:	d108      	bne.n	8001460 <HAL_UART_RxCpltCallback+0x74>
	{
		xTaskNotifyFromISR(cmd_handl_taskHandle, 0, eNoAction, NULL);		// Send notify to start_com_handl task
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_UART_RxCpltCallback+0x90>)
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	2300      	movs	r3, #0
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2300      	movs	r3, #0
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	f00e fe62 	bl	8010124 <xTaskGenericNotifyFromISR>
		//xTaskNotify(test_taskHandle, 0, eNoAction);

	}

	//HAL_UART_Receive_IT(&huart2, &user_data , 1);							// Enable receive data over UART again
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data , 1);
 8001460:	2201      	movs	r2, #1
 8001462:	4905      	ldr	r1, [pc, #20]	; (8001478 <HAL_UART_RxCpltCallback+0x8c>)
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <HAL_UART_RxCpltCallback+0x94>)
 8001466:	f008 fd3e 	bl	8009ee6 <HAL_UART_Receive_IT>

	//HAL_GPIO_TogglePin(GPIOD, LED4);	// LED Blink for test  BLUE LED
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20004be4 	.word	0x20004be4
 8001478:	20004c5c 	.word	0x20004c5c
 800147c:	20004bf0 	.word	0x20004bf0
 8001480:	20004cc0 	.word	0x20004cc0

08001484 <led_effect_stop>:
/////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//			LEDs
void led_effect_stop(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af02      	add	r7, sp, #8
	for(int  i = 0; i < 4; i++)									// Stop all timer
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	e00e      	b.n	80014ae <led_effect_stop+0x2a>
	{
		xTimerStop(handler_led_timer[i], portMAX_DELAY);
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <led_effect_stop+0x3c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2300      	movs	r3, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	2103      	movs	r1, #3
 80014a4:	f00f f81a 	bl	80104dc <xTimerGenericCommand>
	for(int  i = 0; i < 4; i++)									// Stop all timer
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3301      	adds	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	dded      	ble.n	8001490 <led_effect_stop+0xc>
	}
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20004bd4 	.word	0x20004bd4

080014c4 <led_effect>:
/////////////////////////////////////////////////////////////////////////////
void led_effect (uint8_t effect)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
	led_effect_stop();											// Stop current led effect
 80014ce:	f7ff ffd9 	bl	8001484 <led_effect_stop>
	xTimerStart(handler_led_timer[effect-1], portMAX_DELAY);	// Start needed led timer
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <led_effect+0x38>)
 80014d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80014dc:	f00e f938 	bl	800f750 <xTaskGetTickCount>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2300      	movs	r3, #0
 80014ea:	2101      	movs	r1, #1
 80014ec:	4620      	mov	r0, r4
 80014ee:	f00e fff5 	bl	80104dc <xTimerGenericCommand>
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd90      	pop	{r4, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20004bd4 	.word	0x20004bd4

08001500 <turn_off_all_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_off_all_leds(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <turn_off_all_leds+0x38>)
 800150c:	f003 fa82 	bl	8004a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001516:	4808      	ldr	r0, [pc, #32]	; (8001538 <turn_off_all_leds+0x38>)
 8001518:	f003 fa7c 	bl	8004a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <turn_off_all_leds+0x38>)
 8001524:	f003 fa76 	bl	8004a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800152e:	4802      	ldr	r0, [pc, #8]	; (8001538 <turn_off_all_leds+0x38>)
 8001530:	f003 fa70 	bl	8004a14 <HAL_GPIO_WritePin>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40020c00 	.word	0x40020c00

0800153c <turn_on_all_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_on_all_leds(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001546:	480b      	ldr	r0, [pc, #44]	; (8001574 <turn_on_all_leds+0x38>)
 8001548:	f003 fa64 	bl	8004a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001552:	4808      	ldr	r0, [pc, #32]	; (8001574 <turn_on_all_leds+0x38>)
 8001554:	f003 fa5e 	bl	8004a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <turn_on_all_leds+0x38>)
 8001560:	f003 fa58 	bl	8004a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800156a:	4802      	ldr	r0, [pc, #8]	; (8001574 <turn_on_all_leds+0x38>)
 800156c:	f003 fa52 	bl	8004a14 <HAL_GPIO_WritePin>
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40020c00 	.word	0x40020c00

08001578 <turn_on_even_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_on_even_leds(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <turn_on_even_leds+0x38>)
 8001584:	f003 fa46 	bl	8004a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	4808      	ldr	r0, [pc, #32]	; (80015b0 <turn_on_even_leds+0x38>)
 8001590:	f003 fa40 	bl	8004a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <turn_on_even_leds+0x38>)
 800159c:	f003 fa3a 	bl	8004a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a6:	4802      	ldr	r0, [pc, #8]	; (80015b0 <turn_on_even_leds+0x38>)
 80015a8:	f003 fa34 	bl	8004a14 <HAL_GPIO_WritePin>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40020c00 	.word	0x40020c00

080015b4 <turn_on_odd_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_on_odd_leds(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015be:	480b      	ldr	r0, [pc, #44]	; (80015ec <turn_on_odd_leds+0x38>)
 80015c0:	f003 fa28 	bl	8004a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ca:	4808      	ldr	r0, [pc, #32]	; (80015ec <turn_on_odd_leds+0x38>)
 80015cc:	f003 fa22 	bl	8004a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <turn_on_odd_leds+0x38>)
 80015d8:	f003 fa1c 	bl	8004a14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e2:	4802      	ldr	r0, [pc, #8]	; (80015ec <turn_on_odd_leds+0x38>)
 80015e4:	f003 fa16 	bl	8004a14 <HAL_GPIO_WritePin>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40020c00 	.word	0x40020c00

080015f0 <LED_control>:
/////////////////////////////////////////////////////////////////////////////
void LED_control(int value)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e014      	b.n	8001628 <LED_control+0x38>
	{
		HAL_GPIO_WritePin(GPIOD, (LED1 << i), ((value >> i)& 0x1));
 80015fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	b299      	uxth	r1, r3
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	fa42 f303 	asr.w	r3, r2, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	4806      	ldr	r0, [pc, #24]	; (8001638 <LED_control+0x48>)
 800161e:	f003 f9f9 	bl	8004a14 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3301      	adds	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b03      	cmp	r3, #3
 800162c:	dde7      	ble.n	80015fe <LED_control+0xe>
	}
}
 800162e:	bf00      	nop
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40020c00 	.word	0x40020c00

0800163c <LED_effect1>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect1(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();			// Toggle LEDs
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <LED_effect1+0x28>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f083 0301 	eor.w	r3, r3, #1
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <LED_effect1+0x28>)
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <LED_effect1+0x28>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <LED_effect1+0x1e>
 8001654:	f7ff ff54 	bl	8001500 <turn_off_all_leds>
}
 8001658:	e001      	b.n	800165e <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();			// Toggle LEDs
 800165a:	f7ff ff6f 	bl	800153c <turn_on_all_leds>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000004 	.word	0x20000004

08001668 <LED_effect2>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect2(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <LED_effect2+0x28>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f083 0301 	eor.w	r3, r3, #1
 8001674:	4a06      	ldr	r2, [pc, #24]	; (8001690 <LED_effect2+0x28>)
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <LED_effect2+0x28>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <LED_effect2+0x1e>
 8001680:	f7ff ff7a 	bl	8001578 <turn_on_even_leds>
}
 8001684:	e001      	b.n	800168a <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8001686:	f7ff ff95 	bl	80015b4 <turn_on_odd_leds>
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008

08001694 <LED_effect3>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect3(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control (0x1 << (i++ % 4));  //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<, ?????????????????????????????????????????????
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <LED_effect3+0x2c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <LED_effect3+0x2c>)
 80016a0:	600a      	str	r2, [r1, #0]
 80016a2:	425a      	negs	r2, r3
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	f002 0203 	and.w	r2, r2, #3
 80016ac:	bf58      	it	pl
 80016ae:	4253      	negpl	r3, r2
 80016b0:	2201      	movs	r2, #1
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff9a 	bl	80015f0 <LED_control>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200000e0 	.word	0x200000e0

080016c4 <LED_effect4>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect4(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control(0x08 >> (i++ % 4));  //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<, ?????????????????????????????????????????????
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <LED_effect4+0x2c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <LED_effect4+0x2c>)
 80016d0:	600a      	str	r2, [r1, #0]
 80016d2:	425a      	negs	r2, r3
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	f002 0203 	and.w	r2, r2, #3
 80016dc:	bf58      	it	pl
 80016de:	4253      	negpl	r3, r2
 80016e0:	2208      	movs	r2, #8
 80016e2:	fa42 f303 	asr.w	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff82 	bl	80015f0 <LED_control>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200000e4 	.word	0x200000e4

080016f4 <led_effect_callback>:
/////////////////////////////////////////////////////////////////////////////
void led_effect_callback(TimerHandle_t xTimer)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID( xTimer );
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f00f f9f3 	bl	8010ae8 <pvTimerGetTimerID>
 8001702:	4603      	mov	r3, r0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3b01      	subs	r3, #1
 800170a:	2b03      	cmp	r3, #3
 800170c:	d816      	bhi.n	800173c <led_effect_callback+0x48>
 800170e:	a201      	add	r2, pc, #4	; (adr r2, 8001714 <led_effect_callback+0x20>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	08001725 	.word	0x08001725
 8001718:	0800172b 	.word	0x0800172b
 800171c:	08001731 	.word	0x08001731
 8001720:	08001737 	.word	0x08001737

	switch(id)
	{
		case 1:
			LED_effect1();
 8001724:	f7ff ff8a 	bl	800163c <LED_effect1>
			break;
 8001728:	e008      	b.n	800173c <led_effect_callback+0x48>
		case 2:
			LED_effect2();
 800172a:	f7ff ff9d 	bl	8001668 <LED_effect2>
			break;
 800172e:	e005      	b.n	800173c <led_effect_callback+0x48>
		case 3:
			LED_effect3();
 8001730:	f7ff ffb0 	bl	8001694 <LED_effect3>
			break;
 8001734:	e002      	b.n	800173c <led_effect_callback+0x48>
		case 4:
			LED_effect4();
 8001736:	f7ff ffc5 	bl	80016c4 <LED_effect4>
	}
}
 800173a:	e7ff      	b.n	800173c <led_effect_callback+0x48>
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <process_command>:
/////////////////////////////////////////////////////////////////////////////
// Function depends on selected menu chose(notify) needed task
void process_command(command_t *cmd)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f849 	bl	80017e4 <extract_command>

	switch(curr_state)
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <process_command+0x8c>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b09      	cmp	r3, #9
 8001758:	d836      	bhi.n	80017c8 <process_command+0x84>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <process_command+0x1c>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	08001789 	.word	0x08001789
 8001764:	08001799 	.word	0x08001799
 8001768:	080017a9 	.word	0x080017a9
 800176c:	080017a9 	.word	0x080017a9
 8001770:	080017a9 	.word	0x080017a9
 8001774:	080017a9 	.word	0x080017a9
 8001778:	080017b9 	.word	0x080017b9
 800177c:	080017b9 	.word	0x080017b9
 8001780:	080017b9 	.word	0x080017b9
 8001784:	080017b9 	.word	0x080017b9
	{
		case sMainMenu:
			xTaskNotify(menu_taskHandle,(uint32_t*) cmd, eSetValueWithOverwrite);
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <process_command+0x90>)
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	2300      	movs	r3, #0
 8001790:	2203      	movs	r2, #3
 8001792:	f00e fc09 	bl	800ffa8 <xTaskGenericNotify>
			break;
 8001796:	e017      	b.n	80017c8 <process_command+0x84>

		case sLedEffect:
	 		xTaskNotify(led_taskHandle, (uint32_t*) cmd, eSetValueWithOverwrite);
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <process_command+0x94>)
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	2300      	movs	r3, #0
 80017a0:	2203      	movs	r2, #3
 80017a2:	f00e fc01 	bl	800ffa8 <xTaskGenericNotify>
	 		break;
 80017a6:	e00f      	b.n	80017c8 <process_command+0x84>

	 	case sRtcMenu:
	 	case sRtcTimeConfig:
	 	case sRtcDateConfig:
	 	case sRtcReport:
	 		xTaskNotify(rtc_taskHandle, (uint32_t*) cmd, eSetValueWithOverwrite);
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <process_command+0x98>)
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	2300      	movs	r3, #0
 80017b0:	2203      	movs	r2, #3
 80017b2:	f00e fbf9 	bl	800ffa8 <xTaskGenericNotify>
	 		break;
 80017b6:	e007      	b.n	80017c8 <process_command+0x84>

	 	case sTestMenu:
	 	case sTestPodMenu_1:
	 	case sTestPodMenu_2:
	 	case sTestPodMenu_3:
			xTaskNotify(test_taskHandle, (uint32_t*) cmd, eSetValueWithOverwrite);
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <process_command+0x9c>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	2300      	movs	r3, #0
 80017c0:	2203      	movs	r2, #3
 80017c2:	f00e fbf1 	bl	800ffa8 <xTaskGenericNotify>
	 }
}
 80017c6:	e7ff      	b.n	80017c8 <process_command+0x84>
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200000d7 	.word	0x200000d7
 80017d4:	20004d04 	.word	0x20004d04
 80017d8:	20004bd0 	.word	0x20004bd0
 80017dc:	20004c64 	.word	0x20004c64
 80017e0:	20004b78 	.word	0x20004b78

080017e4 <extract_command>:
/////////////////////////////////////////////////////////////////////////////
// Extract every char byte from input_QueueHandle into cmd struct
int extract_command(command_t *cmd)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(input_QueueHandle);			// Waiting data on the queue
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <extract_command+0x70>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00d faf3 	bl	800eddc <uxQueueMessagesWaiting>
 80017f6:	4603      	mov	r3, r0
 80017f8:	613b      	str	r3, [r7, #16]
	if(!status)													// If no any messages on the queue (exit from where)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <extract_command+0x22>
	{
		return -1;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001804:	e022      	b.n	800184c <extract_command+0x68>
	}

	uint8_t i = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	75fb      	strb	r3, [r7, #23]
	do{
		status = xQueueReceive(input_QueueHandle, &item, 0);
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <extract_command+0x70>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f107 010f 	add.w	r1, r7, #15
 8001812:	2200      	movs	r2, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f00d f981 	bl	800eb1c <xQueueReceive>
 800181a:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d106      	bne.n	8001830 <extract_command+0x4c>
		{
			cmd -> payload[i++] = item;
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	75fa      	strb	r2, [r7, #23]
 8001828:	461a      	mov	r2, r3
 800182a:	7bf9      	ldrb	r1, [r7, #15]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	5499      	strb	r1, [r3, r2]
		}
	}while(item != '\r');    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	2b0d      	cmp	r3, #13
 8001834:	d1e9      	bne.n	800180a <extract_command+0x26>

	cmd -> payload[i - 1] = '\0';		// add '\0' sign to the end
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	3b01      	subs	r3, #1
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	2100      	movs	r1, #0
 800183e:	54d1      	strb	r1, [r2, r3]
	cmd -> len = i - 1;					// Save length in struct
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	3b01      	subs	r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	729a      	strb	r2, [r3, #10]

	return 0;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20004be4 	.word	0x20004be4

08001858 <show_time_date>:
/////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//			RTC
void show_time_date(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	; 0x30
 800185c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_time,0, sizeof(rtc_time));
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2214      	movs	r2, #20
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f010 f8e5 	bl	8011a34 <memset>
	memset(&rtc_date, 0, sizeof(rtc_date));
 800186a:	f107 0318 	add.w	r3, r7, #24
 800186e:	2204      	movs	r2, #4
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f010 f8de 	bl	8011a34 <memset>

	// Get time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	4619      	mov	r1, r3
 800187e:	4821      	ldr	r0, [pc, #132]	; (8001904 <show_time_date+0xac>)
 8001880:	f007 fb8a 	bl	8008f98 <HAL_RTC_GetTime>
	// Get date
	HAL_RTC_GetTime(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	2200      	movs	r2, #0
 800188a:	4619      	mov	r1, r3
 800188c:	481d      	ldr	r0, [pc, #116]	; (8001904 <show_time_date+0xac>)
 800188e:	f007 fb83 	bl	8008f98 <HAL_RTC_GetTime>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <show_time_date+0x44>
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <show_time_date+0xb0>)
 800189a:	e000      	b.n	800189e <show_time_date+0x46>
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <show_time_date+0xb4>)
 800189e:	61fb      	str	r3, [r7, #28]

	// Display time and data
	sprintf((char*)showtime, "%s: \t%02d:%02d:%02d [%s]", "\n Current Time&date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 80018a0:	793b      	ldrb	r3, [r7, #4]
 80018a2:	4618      	mov	r0, r3
 80018a4:	797b      	ldrb	r3, [r7, #5]
 80018a6:	461a      	mov	r2, r3
 80018a8:	79bb      	ldrb	r3, [r7, #6]
 80018aa:	4619      	mov	r1, r3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	9101      	str	r1, [sp, #4]
 80018b2:	9200      	str	r2, [sp, #0]
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a16      	ldr	r2, [pc, #88]	; (8001910 <show_time_date+0xb8>)
 80018b8:	4916      	ldr	r1, [pc, #88]	; (8001914 <show_time_date+0xbc>)
 80018ba:	4817      	ldr	r0, [pc, #92]	; (8001918 <show_time_date+0xc0>)
 80018bc:	f010 f9e6 	bl	8011c8c <siprintf>
	xQueueSend(print_QueueHandle, &time, portMAX_DELAY);		// Send to UART
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <show_time_date+0xc4>)
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	2300      	movs	r3, #0
 80018c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018ca:	4915      	ldr	r1, [pc, #84]	; (8001920 <show_time_date+0xc8>)
 80018cc:	f00c ff8c 	bl	800e7e8 <xQueueGenericSend>

	sprintf((char*)showdate, "\t%02d-%02d-%02d\n\r", rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80018d0:	7e7b      	ldrb	r3, [r7, #25]
 80018d2:	461a      	mov	r2, r3
 80018d4:	7ebb      	ldrb	r3, [r7, #26]
 80018d6:	4619      	mov	r1, r3
 80018d8:	7efb      	ldrb	r3, [r7, #27]
 80018da:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	460b      	mov	r3, r1
 80018e2:	4910      	ldr	r1, [pc, #64]	; (8001924 <show_time_date+0xcc>)
 80018e4:	4810      	ldr	r0, [pc, #64]	; (8001928 <show_time_date+0xd0>)
 80018e6:	f010 f9d1 	bl	8011c8c <siprintf>
	xQueueSend(print_QueueHandle, &date, portMAX_DELAY);
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <show_time_date+0xc4>)
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	2300      	movs	r3, #0
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f4:	490d      	ldr	r1, [pc, #52]	; (800192c <show_time_date+0xd4>)
 80018f6:	f00c ff77 	bl	800e7e8 <xQueueGenericSend>
}
 80018fa:	bf00      	nop
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20004bf4 	.word	0x20004bf4
 8001908:	08012454 	.word	0x08012454
 800190c:	08012458 	.word	0x08012458
 8001910:	0801245c 	.word	0x0801245c
 8001914:	08012470 	.word	0x08012470
 8001918:	200000e8 	.word	0x200000e8
 800191c:	20004c60 	.word	0x20004c60
 8001920:	2000000c 	.word	0x2000000c
 8001924:	0801248c 	.word	0x0801248c
 8001928:	20000110 	.word	0x20000110
 800192c:	20000010 	.word	0x20000010

08001930 <rtc_configure_time>:
/////////////////////////////////////////////////////////////////////////////
void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	time -> TimeFormat = RTC_HOURFORMAT12_AM;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	70da      	strb	r2, [r3, #3]
//	time -> DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
//	time -> StoreOperation = RTC_STOREOPERATION_RESET;

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 800193e:	2200      	movs	r2, #0
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <rtc_configure_time+0x20>)
 8001944:	f007 fa6b 	bl	8008e1e <HAL_RTC_SetTime>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20004bf4 	.word	0x20004bf4

08001954 <rtc_configure_date>:
/////////////////////////////////////////////////////////////////////////////
void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <rtc_configure_date+0x1c>)
 8001962:	f007 fb77 	bl	8009054 <HAL_RTC_SetDate>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20004bf4 	.word	0x20004bf4

08001974 <getnumber>:
/////////////////////////////////////////////////////////////////////////////
// Convert two char into two digits
uint8_t getnumber(uint8_t *p, int len)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
	int value;
	if(len > 1)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	dd0f      	ble.n	80019a4 <getnumber+0x30>
	{
		value = (((p[0] - 48)*10) + (p[1] - 48));		// Convert two chars into digits
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	461a      	mov	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3301      	adds	r3, #1
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	3b30      	subs	r3, #48	; 0x30
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	e003      	b.n	80019ac <getnumber+0x38>
	}
	else
	{
		value = p[0] - 48;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	3b30      	subs	r3, #48	; 0x30
 80019aa:	60fb      	str	r3, [r7, #12]
	}

	return value;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	b2db      	uxtb	r3, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <validate_rtc_information>:
/////////////////////////////////////////////////////////////////////////////
int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	// Validate hours, minutes and seconds
	if(((time -> Hours ) > 12) || ((time -> Hours < 0)))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	d902      	bls.n	80019d4 <validate_rtc_information+0x18>
	{
		return -1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d2:	e036      	b.n	8001a42 <validate_rtc_information+0x86>
	}
	else if(((time -> Minutes > 59) || ((time -> Minutes  < 0))))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	2b3b      	cmp	r3, #59	; 0x3b
 80019da:	d902      	bls.n	80019e2 <validate_rtc_information+0x26>
	{
		return -1;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019e0:	e02f      	b.n	8001a42 <validate_rtc_information+0x86>
	}
	else if(((time -> Seconds > 59) || ((time -> Seconds  < 0))))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	789b      	ldrb	r3, [r3, #2]
 80019e6:	2b3b      	cmp	r3, #59	; 0x3b
 80019e8:	d902      	bls.n	80019f0 <validate_rtc_information+0x34>
	{
		return -1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ee:	e028      	b.n	8001a42 <validate_rtc_information+0x86>
	}

	// Validate date, week day, year, month
	else if((date -> Date < 1 ) || (date -> Date > 31))
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	789b      	ldrb	r3, [r3, #2]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <validate_rtc_information+0x44>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	789b      	ldrb	r3, [r3, #2]
 80019fc:	2b1f      	cmp	r3, #31
 80019fe:	d902      	bls.n	8001a06 <validate_rtc_information+0x4a>
	{
		return -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a04:	e01d      	b.n	8001a42 <validate_rtc_information+0x86>
	}
	else if((date -> WeekDay < 1 ) || (date -> WeekDay > 7))
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <validate_rtc_information+0x5a>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b07      	cmp	r3, #7
 8001a14:	d902      	bls.n	8001a1c <validate_rtc_information+0x60>
	{
		return -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1a:	e012      	b.n	8001a42 <validate_rtc_information+0x86>
	}
	else if(date -> Year > 99 )
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	78db      	ldrb	r3, [r3, #3]
 8001a20:	2b63      	cmp	r3, #99	; 0x63
 8001a22:	d902      	bls.n	8001a2a <validate_rtc_information+0x6e>
	{
		return -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a28:	e00b      	b.n	8001a42 <validate_rtc_information+0x86>
	}
	else if((date -> Month < 1 ) || (date -> Month > 12))
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <validate_rtc_information+0x7e>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	785b      	ldrb	r3, [r3, #1]
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	d902      	bls.n	8001a40 <validate_rtc_information+0x84>
	{
		return -1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a3e:	e000      	b.n	8001a42 <validate_rtc_information+0x86>
	}
	return 1;
 8001a40:	2301      	movs	r3, #1
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001a56:	f00f fca1 	bl	801139c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	  osDelay(100);
 8001a5a:	2064      	movs	r0, #100	; 0x64
 8001a5c:	f00c fb52 	bl	800e104 <osDelay>
 8001a60:	e7fb      	b.n	8001a5a <StartDefaultTask+0xc>
	...

08001a64 <start_menu_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_menu_task */
void start_menu_task(void *argument)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

	uint32_t cmd_addr;
	command_t *cmd;			// Create object of command_t
	int option;
	const char* msg_manu = "=======================\n\r"
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <start_menu_task+0xfc>)
 8001a6e:	60bb      	str	r3, [r7, #8]
						   "Exit             ----> 3\n\r"
						   "Enter your choice here: \n\r";

	while(1)
	{
		int status = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
		status = xQueueSend(print_QueueHandle, &msg_manu, portMAX_DELAY);		// Send data in print
 8001a74:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <start_menu_task+0x100>)
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	f107 0108 	add.w	r1, r7, #8
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a82:	f00c feb1 	bl	800e7e8 <xQueueGenericSend>
 8001a86:	61f8      	str	r0, [r7, #28]
		if(status != pdPASS)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d002      	beq.n	8001a94 <start_menu_task+0x30>
		{
			// ERROR
			int ggg =999;
 8001a8e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001a92:	61bb      	str	r3, [r7, #24]
		}

		//xQueueSendToBack(print_QueueHandle, &msg_manu, portMAX_DELAY);
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);					// Waiting for selected menu (waiting the choise) (from 'process_command' function)
 8001a94:	f107 020c 	add.w	r2, r7, #12
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f00e fa22 	bl	800fee8 <xTaskNotifyWait>
		cmd = (command_t*)cmd_addr;										// If number selected menu are selected, save it
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)												// Checking, must be one number, not more
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	7a9b      	ldrb	r3, [r3, #10]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d146      	bne.n	8001b3e <start_menu_task+0xda>
		{
			option = cmd -> payload[0] - 48;							// Convert from char to number, and write it on struct
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	3b30      	subs	r3, #48	; 0x30
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d836      	bhi.n	8001b2c <start_menu_task+0xc8>
 8001abe:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <start_menu_task+0x60>)
 8001ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001aeb 	.word	0x08001aeb
 8001acc:	08001b01 	.word	0x08001b01
 8001ad0:	08001b17 	.word	0x08001b17

			switch (option)
			{
				case 0:													// If selected LED menu
					curr_state = sLedEffect;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <start_menu_task+0x104>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
					xTaskNotify(led_taskHandle, 0 ,eNoAction);
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <start_menu_task+0x108>)
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	f00e fa60 	bl	800ffa8 <xTaskGenericNotify>
					break;
 8001ae8:	e032      	b.n	8001b50 <start_menu_task+0xec>

				case 1:
					curr_state = sRtcMenu;								// If selected RTC menu
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <start_menu_task+0x104>)
 8001aec:	2202      	movs	r2, #2
 8001aee:	701a      	strb	r2, [r3, #0]
					xTaskNotify(rtc_taskHandle, 0, eNoAction);
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <start_menu_task+0x10c>)
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	2300      	movs	r3, #0
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	f00e fa55 	bl	800ffa8 <xTaskGenericNotify>
					break;
 8001afe:	e027      	b.n	8001b50 <start_menu_task+0xec>

				case 2:
					curr_state = sTestMenu;
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <start_menu_task+0x104>)
 8001b02:	2206      	movs	r2, #6
 8001b04:	701a      	strb	r2, [r3, #0]
					xTaskNotify(test_taskHandle, 0 ,eNoAction);
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <start_menu_task+0x110>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	f00e fa4a 	bl	800ffa8 <xTaskGenericNotify>
					break;
 8001b14:	e01c      	b.n	8001b50 <start_menu_task+0xec>

				case 3:		// EXIT   (Return to main menu and print it)
					curr_state = sMainMenu;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <start_menu_task+0x104>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
					xTaskNotify(menu_taskHandle, 0 ,eNoAction);
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <start_menu_task+0x114>)
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	2300      	movs	r3, #0
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	f00e fa3f 	bl	800ffa8 <xTaskGenericNotify>
					break;
 8001b2a:	e011      	b.n	8001b50 <start_menu_task+0xec>

				default:															// If input sign uncorrect
					xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);			// Print message: /// Invalid option ///
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <start_menu_task+0x100>)
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	2300      	movs	r3, #0
 8001b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b36:	4911      	ldr	r1, [pc, #68]	; (8001b7c <start_menu_task+0x118>)
 8001b38:	f00c fe56 	bl	800e7e8 <xQueueGenericSend>
					continue;														// Return to while(1)
 8001b3c:	e00f      	b.n	8001b5e <start_menu_task+0xfa>
			}
		}
		else															// Invalid entry (entered more than one char)
		{
			xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);		// Print message: /// Invalid option ///
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <start_menu_task+0x100>)
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	2300      	movs	r3, #0
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <start_menu_task+0x118>)
 8001b4a:	f00c fe4d 	bl	800e7e8 <xQueueGenericSend>
			continue;													// Return to while(1)
 8001b4e:	e006      	b.n	8001b5e <start_menu_task+0xfa>
		}

		// Wait to run again when some other task notifies.
		// After notify return to "while(1)" main loop again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f00e f9c5 	bl	800fee8 <xTaskNotifyWait>
	{
 8001b5e:	e787      	b.n	8001a70 <start_menu_task+0xc>
 8001b60:	080124a0 	.word	0x080124a0
 8001b64:	20004c60 	.word	0x20004c60
 8001b68:	200000d7 	.word	0x200000d7
 8001b6c:	20004bd0 	.word	0x20004bd0
 8001b70:	20004c64 	.word	0x20004c64
 8001b74:	20004b78 	.word	0x20004b78
 8001b78:	20004d04 	.word	0x20004d04
 8001b7c:	20000000 	.word	0x20000000

08001b80 <start_led_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_led_task */
void start_led_task(void *argument)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
//	{
//		osDelay(100);
//	}
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n\r"
 8001b88:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <start_led_task+0x124>)
 8001b8a:	60fb      	str	r3, [r7, #12]
						  "(none, e1, e2, e3, e4, on, off)  \n\r"
						  "Enter your choice here : \n\r";

	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);					  	// Wait for notification (selected LEDs effect)
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2000      	movs	r0, #0
 8001b96:	f00e f9a7 	bl	800fee8 <xTaskNotifyWait>
		xQueueSend(print_QueueHandle, &msg_led, portMAX_DELAY);			// Send data to print (Print LED menu)
 8001b9a:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <start_led_task+0x128>)
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	f107 010c 	add.w	r1, r7, #12
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ba8:	f00c fe1e 	bl	800e7e8 <xQueueGenericSend>

		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);				// Wait for LED command
 8001bac:	f107 0210 	add.w	r2, r7, #16
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f00e f996 	bl	800fee8 <xTaskNotifyWait>
		cmd = (command_t*) cmd_addr;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	617b      	str	r3, [r7, #20]

		if(cmd -> len <= 4)											    // Check input command (max input size must be less then 4)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	7a9b      	ldrb	r3, [r3, #10]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d859      	bhi.n	8001c7c <start_led_task+0xfc>
		{
			// Select LED effect
			if( ! strcmp((char*)cmd->payload, "none" ))
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	4938      	ldr	r1, [pc, #224]	; (8001cac <start_led_task+0x12c>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe faff 	bl	80001d0 <strcmp>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <start_led_task+0x5e>
			{
				led_effect_stop();
 8001bd8:	f7ff fc54 	bl	8001484 <led_effect_stop>
 8001bdc:	e056      	b.n	8001c8c <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e1"))
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	4933      	ldr	r1, [pc, #204]	; (8001cb0 <start_led_task+0x130>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe faf4 	bl	80001d0 <strcmp>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d103      	bne.n	8001bf6 <start_led_task+0x76>
			{
				led_effect(1);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7ff fc68 	bl	80014c4 <led_effect>
 8001bf4:	e04a      	b.n	8001c8c <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e2"))
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	492e      	ldr	r1, [pc, #184]	; (8001cb4 <start_led_task+0x134>)
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fae8 	bl	80001d0 <strcmp>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d103      	bne.n	8001c0e <start_led_task+0x8e>
			{
				led_effect(2);
 8001c06:	2002      	movs	r0, #2
 8001c08:	f7ff fc5c 	bl	80014c4 <led_effect>
 8001c0c:	e03e      	b.n	8001c8c <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e3"))
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	4929      	ldr	r1, [pc, #164]	; (8001cb8 <start_led_task+0x138>)
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fadc 	bl	80001d0 <strcmp>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d103      	bne.n	8001c26 <start_led_task+0xa6>
			{
				led_effect(3);
 8001c1e:	2003      	movs	r0, #3
 8001c20:	f7ff fc50 	bl	80014c4 <led_effect>
 8001c24:	e032      	b.n	8001c8c <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e4"))
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	4924      	ldr	r1, [pc, #144]	; (8001cbc <start_led_task+0x13c>)
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fad0 	bl	80001d0 <strcmp>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d103      	bne.n	8001c3e <start_led_task+0xbe>
			{
				led_effect(4);
 8001c36:	2004      	movs	r0, #4
 8001c38:	f7ff fc44 	bl	80014c4 <led_effect>
 8001c3c:	e026      	b.n	8001c8c <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "on"))			// Work
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	491f      	ldr	r1, [pc, #124]	; (8001cc0 <start_led_task+0x140>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fac4 	bl	80001d0 <strcmp>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <start_led_task+0xd4>
			{
				turn_on_all_leds();
 8001c4e:	f7ff fc75 	bl	800153c <turn_on_all_leds>
 8001c52:	e01b      	b.n	8001c8c <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "off"))		// Work
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	491b      	ldr	r1, [pc, #108]	; (8001cc4 <start_led_task+0x144>)
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fab9 	bl	80001d0 <strcmp>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <start_led_task+0xea>
			{
				turn_off_all_leds();
 8001c64:	f7ff fc4c 	bl	8001500 <turn_off_all_leds>
 8001c68:	e010      	b.n	8001c8c <start_led_task+0x10c>
			}
			else
			{
				xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);				// Print invalid massage
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <start_led_task+0x128>)
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c74:	4914      	ldr	r1, [pc, #80]	; (8001cc8 <start_led_task+0x148>)
 8001c76:	f00c fdb7 	bl	800e7e8 <xQueueGenericSend>
 8001c7a:	e007      	b.n	8001c8c <start_led_task+0x10c>
			}
		}
		else
		{
			xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);					// Print invalid massage
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <start_led_task+0x128>)
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	2300      	movs	r3, #0
 8001c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c86:	4910      	ldr	r1, [pc, #64]	; (8001cc8 <start_led_task+0x148>)
 8001c88:	f00c fdae 	bl	800e7e8 <xQueueGenericSend>
		}

		curr_state = sMainMenu;								// Return to mai menu
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <start_led_task+0x14c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
		xTaskNotify(menu_taskHandle, 0, eNoAction);			// Notify menu task
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <start_led_task+0x150>)
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	2300      	movs	r3, #0
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	f00e f984 	bl	800ffa8 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);					  	// Wait for notification (selected LEDs effect)
 8001ca0:	e774      	b.n	8001b8c <start_led_task+0xc>
 8001ca2:	bf00      	nop
 8001ca4:	08012574 	.word	0x08012574
 8001ca8:	20004c60 	.word	0x20004c60
 8001cac:	08012604 	.word	0x08012604
 8001cb0:	0801260c 	.word	0x0801260c
 8001cb4:	08012610 	.word	0x08012610
 8001cb8:	08012614 	.word	0x08012614
 8001cbc:	08012618 	.word	0x08012618
 8001cc0:	0801261c 	.word	0x0801261c
 8001cc4:	08012620 	.word	0x08012620
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	200000d7 	.word	0x200000d7
 8001cd0:	20004d04 	.word	0x20004d04

08001cd4 <start_rtc_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_rtc_task */
void start_rtc_task(void *argument)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b098      	sub	sp, #96	; 0x60
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_rtc_task */
  /* Infinite loop */

	const char* msg_rtc1 = "========================\n\r"
 8001cdc:	4baf      	ldr	r3, [pc, #700]	; (8001f9c <start_rtc_task+0x2c8>)
 8001cde:	647b      	str	r3, [r7, #68]	; 0x44
						   "Configure Date   ----> 1\n\r"
						   "Enable reporting ----> 2\n\r"
			               "Exit             ----> 3\n\r"
			  	  	  	   "Enter your choice here : \n\r";

	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001ce0:	4baf      	ldr	r3, [pc, #700]	; (8001fa0 <start_rtc_task+0x2cc>)
 8001ce2:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001ce4:	4baf      	ldr	r3, [pc, #700]	; (8001fa4 <start_rtc_task+0x2d0>)
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001ce8:	4baf      	ldr	r3, [pc, #700]	; (8001fa8 <start_rtc_task+0x2d4>)
 8001cea:	63bb      	str	r3, [r7, #56]	; 0x38

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001cec:	4baf      	ldr	r3, [pc, #700]	; (8001fac <start_rtc_task+0x2d8>)
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001cf0:	4baf      	ldr	r3, [pc, #700]	; (8001fb0 <start_rtc_task+0x2dc>)
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8001cf4:	4baf      	ldr	r3, [pc, #700]	; (8001fb4 <start_rtc_task+0x2e0>)
 8001cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001cf8:	4baf      	ldr	r3, [pc, #700]	; (8001fb8 <start_rtc_task+0x2e4>)
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 8001cfc:	4baf      	ldr	r3, [pc, #700]	; (8001fbc <start_rtc_task+0x2e8>)
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001d00:	4baf      	ldr	r3, [pc, #700]	; (8001fc0 <start_rtc_task+0x2ec>)
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
	#define YEAR_CONFIG		2
	#define DAY_CONFIG		3

	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);								// Notify wait (wait till someone notifies)
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f00e f8eb 	bl	800fee8 <xTaskNotifyWait>
		xQueueSend(print_QueueHandle, &msg_rtc1, portMAX_DELAY);			    // Print the menu
 8001d12:	4bac      	ldr	r3, [pc, #688]	; (8001fc4 <start_rtc_task+0x2f0>)
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d20:	f00c fd62 	bl	800e7e8 <xQueueGenericSend>
		show_time_date();														// Print the current date and time information
 8001d24:	f7ff fd98 	bl	8001858 <show_time_date>
		//osDelay(100);


		//xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
		//xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);		 			// Wait for command notification (Notify wait)
		while(curr_state != sMainMenu)
 8001d28:	bf00      	nop
 8001d2a:	e1a2      	b.n	8002072 <start_rtc_task+0x39e>
//
//			if(cmd -> len <= 4)											    // Check input command (max input size must be less then 4)
//					{

			/////////////////////////////////////////////
			int ret_status = xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);		 			// Waiting for command notification (Notify wait)
 8001d2c:	f107 0220 	add.w	r2, r7, #32
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d34:	2100      	movs	r1, #0
 8001d36:	2000      	movs	r0, #0
 8001d38:	f00e f8d6 	bl	800fee8 <xTaskNotifyWait>
 8001d3c:	65b8      	str	r0, [r7, #88]	; 0x58
			// Return 0x410908 and  cmd_addr = 0x410908
			cmd = (command_t*)cmd_addr;
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	657b      	str	r3, [r7, #84]	; 0x54


			int test_var = cmd -> len;		 	// For test   HARD FOULT <<<<<<<<<<<<<<<<<<<<<<<<<
 8001d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d44:	7a9b      	ldrb	r3, [r3, #10]
 8001d46:	653b      	str	r3, [r7, #80]	; 0x50

			switch(curr_state)
 8001d48:	4b9f      	ldr	r3, [pc, #636]	; (8001fc8 <start_rtc_task+0x2f4>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	3b02      	subs	r3, #2
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	f200 818f 	bhi.w	8002072 <start_rtc_task+0x39e>
 8001d54:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <start_rtc_task+0x88>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001e23 	.word	0x08001e23
 8001d64:	08001f15 	.word	0x08001f15
 8001d68:	08002071 	.word	0x08002071
			{
				case sRtcMenu:{
					if((cmd -> len) == 1)			// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6e:	7a9b      	ldrb	r3, [r3, #10]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d14a      	bne.n	8001e0a <start_rtc_task+0x136>
					{
						menu_code = cmd -> payload[0] - 48;
 8001d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	3b30      	subs	r3, #48	; 0x30
 8001d7a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
						switch(menu_code)
 8001d7e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d835      	bhi.n	8001df2 <start_rtc_task+0x11e>
 8001d86:	a201      	add	r2, pc, #4	; (adr r2, 8001d8c <start_rtc_task+0xb8>)
 8001d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8c:	08001d9d 	.word	0x08001d9d
 8001d90:	08001db7 	.word	0x08001db7
 8001d94:	08001dd1 	.word	0x08001dd1
 8001d98:	08001deb 	.word	0x08001deb
						{
						case 0:
							curr_state = sRtcTimeConfig;
 8001d9c:	4b8a      	ldr	r3, [pc, #552]	; (8001fc8 <start_rtc_task+0x2f4>)
 8001d9e:	2203      	movs	r2, #3
 8001da0:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_hh, portMAX_DELAY);
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <start_rtc_task+0x2f0>)
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001daa:	2300      	movs	r3, #0
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001db0:	f00c fd1a 	bl	800e7e8 <xQueueGenericSend>
							break;
 8001db4:	e034      	b.n	8001e20 <start_rtc_task+0x14c>

						case 1:
							curr_state = sRtcDateConfig;
 8001db6:	4b84      	ldr	r3, [pc, #528]	; (8001fc8 <start_rtc_task+0x2f4>)
 8001db8:	2204      	movs	r2, #4
 8001dba:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_dd, portMAX_DELAY);
 8001dbc:	4b81      	ldr	r3, [pc, #516]	; (8001fc4 <start_rtc_task+0x2f0>)
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dca:	f00c fd0d 	bl	800e7e8 <xQueueGenericSend>
							break;
 8001dce:	e027      	b.n	8001e20 <start_rtc_task+0x14c>

						case 2:
							curr_state = sRtcReport;
 8001dd0:	4b7d      	ldr	r3, [pc, #500]	; (8001fc8 <start_rtc_task+0x2f4>)
 8001dd2:	2205      	movs	r2, #5
 8001dd4:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_report, portMAX_DELAY);
 8001dd6:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <start_rtc_task+0x2f0>)
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001dde:	2300      	movs	r3, #0
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001de4:	f00c fd00 	bl	800e7e8 <xQueueGenericSend>
							break;
 8001de8:	e01a      	b.n	8001e20 <start_rtc_task+0x14c>

						case 3:
							curr_state = sMainMenu;
 8001dea:	4b77      	ldr	r3, [pc, #476]	; (8001fc8 <start_rtc_task+0x2f4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
							break;
 8001df0:	e016      	b.n	8001e20 <start_rtc_task+0x14c>
						default:
							curr_state = sMainMenu;
 8001df2:	4b75      	ldr	r3, [pc, #468]	; (8001fc8 <start_rtc_task+0x2f4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
 8001df8:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <start_rtc_task+0x2f0>)
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e02:	4972      	ldr	r1, [pc, #456]	; (8001fcc <start_rtc_task+0x2f8>)
 8001e04:	f00c fcf0 	bl	800e7e8 <xQueueGenericSend>
 8001e08:	e133      	b.n	8002072 <start_rtc_task+0x39e>
						}
					}
					else
					{
						curr_state = sMainMenu;			// Go back to the main manu
 8001e0a:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <start_rtc_task+0x2f4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
						xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);		// Send invalid message
 8001e10:	4b6c      	ldr	r3, [pc, #432]	; (8001fc4 <start_rtc_task+0x2f0>)
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	2300      	movs	r3, #0
 8001e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e1a:	496c      	ldr	r1, [pc, #432]	; (8001fcc <start_rtc_task+0x2f8>)
 8001e1c:	f00c fce4 	bl	800e7e8 <xQueueGenericSend>
					}
					break;}
 8001e20:	e127      	b.n	8002072 <start_rtc_task+0x39e>

				case sRtcTimeConfig:{
					//  get hh, mm, ss infor and configure RTC
					//rtc_configure_time();
					// take care of invalid entries
					switch (rtc_state)
 8001e22:	4b6b      	ldr	r3, [pc, #428]	; (8001fd0 <start_rtc_task+0x2fc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d03a      	beq.n	8001ea0 <start_rtc_task+0x1cc>
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	dc6e      	bgt.n	8001f0c <start_rtc_task+0x238>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <start_rtc_task+0x164>
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d01a      	beq.n	8001e6c <start_rtc_task+0x198>
 8001e36:	e069      	b.n	8001f0c <start_rtc_task+0x238>
					{
						case HH_CONFIG:{
							uint8_t hour = getnumber(cmd -> payload, cmd -> len);
 8001e38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3c:	7a9b      	ldrb	r3, [r3, #10]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4610      	mov	r0, r2
 8001e42:	f7ff fd97 	bl	8001974 <getnumber>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
							time.Hours = hour;
 8001e4c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001e50:	733b      	strb	r3, [r7, #12]
							rtc_state = MM_CONFIG;
 8001e52:	4b5f      	ldr	r3, [pc, #380]	; (8001fd0 <start_rtc_task+0x2fc>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_mm, portMAX_DELAY);
 8001e58:	4b5a      	ldr	r3, [pc, #360]	; (8001fc4 <start_rtc_task+0x2f0>)
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001e60:	2300      	movs	r3, #0
 8001e62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e66:	f00c fcbf 	bl	800e7e8 <xQueueGenericSend>
							break;}				// back to: while(curr_state != sMainMenu)
 8001e6a:	e04f      	b.n	8001f0c <start_rtc_task+0x238>

						case MM_CONFIG:{
							uint8_t minute = getnumber(cmd -> payload, cmd -> len);
 8001e6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e70:	7a9b      	ldrb	r3, [r3, #10]
 8001e72:	4619      	mov	r1, r3
 8001e74:	4610      	mov	r0, r2
 8001e76:	f7ff fd7d 	bl	8001974 <getnumber>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
							time.Minutes = minute;
 8001e80:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001e84:	737b      	strb	r3, [r7, #13]
							rtc_state = SS_CONFIG;
 8001e86:	4b52      	ldr	r3, [pc, #328]	; (8001fd0 <start_rtc_task+0x2fc>)
 8001e88:	2202      	movs	r2, #2
 8001e8a:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_ss, portMAX_DELAY);
 8001e8c:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <start_rtc_task+0x2f0>)
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e94:	2300      	movs	r3, #0
 8001e96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e9a:	f00c fca5 	bl	800e7e8 <xQueueGenericSend>
							break;}
 8001e9e:	e035      	b.n	8001f0c <start_rtc_task+0x238>
						case SS_CONFIG:{
							uint8_t second = getnumber(cmd -> payload, cmd -> len);
 8001ea0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea4:	7a9b      	ldrb	r3, [r3, #10]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f7ff fd63 	bl	8001974 <getnumber>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
							time.Seconds = second;
 8001eb4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001eb8:	73bb      	strb	r3, [r7, #14]

							if(!validate_rtc_information(&time, NULL))
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fd7b 	bl	80019bc <validate_rtc_information>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d110      	bne.n	8001eee <start_rtc_task+0x21a>
							{
								// If input data is correct
								rtc_configure_time(&time);
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fd2d 	bl	8001930 <rtc_configure_time>
								xQueueSend(print_QueueHandle, &msg_conf, portMAX_DELAY);
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <start_rtc_task+0x2f0>)
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ee4:	f00c fc80 	bl	800e7e8 <xQueueGenericSend>
								show_time_date();
 8001ee8:	f7ff fcb6 	bl	8001858 <show_time_date>
 8001eec:	e007      	b.n	8001efe <start_rtc_task+0x22a>
							}
							else
							{
								// If Input data isn't correct
								xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);		// Send invalid message
 8001eee:	4b35      	ldr	r3, [pc, #212]	; (8001fc4 <start_rtc_task+0x2f0>)
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ef8:	4934      	ldr	r1, [pc, #208]	; (8001fcc <start_rtc_task+0x2f8>)
 8001efa:	f00c fc75 	bl	800e7e8 <xQueueGenericSend>
							}
							curr_state = sMainMenu;			// Back to main menu
 8001efe:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <start_rtc_task+0x2f4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
							rtc_state = 0;					// Set first: case HH_CONFIG:{
 8001f04:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <start_rtc_task+0x2fc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
							break;}
 8001f0a:	bf00      	nop
					}

					curr_state = sMainMenu;			// Go back to the main manu
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <start_rtc_task+0x2f4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
					break;}
 8001f12:	e0ae      	b.n	8002072 <start_rtc_task+0x39e>

				case sRtcDateConfig:{
					switch (rtc_state)
 8001f14:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <start_rtc_task+0x2fc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	f200 80a5 	bhi.w	8002068 <start_rtc_task+0x394>
 8001f1e:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <start_rtc_task+0x250>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f35 	.word	0x08001f35
 8001f28:	08001fd5 	.word	0x08001fd5
 8001f2c:	08002009 	.word	0x08002009
 8001f30:	08001f69 	.word	0x08001f69
					{
						case DATE_CONFIG:{
							uint8_t d = getnumber(cmd -> payload, cmd -> len);
 8001f34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f38:	7a9b      	ldrb	r3, [r3, #10]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	f7ff fd19 	bl	8001974 <getnumber>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
							date.Date = d;
 8001f48:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001f4c:	72bb      	strb	r3, [r7, #10]
							rtc_state = DAY_CONFIG;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <start_rtc_task+0x2fc>)
 8001f50:	2203      	movs	r2, #3
 8001f52:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_mo, portMAX_DELAY);
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <start_rtc_task+0x2f0>)
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f62:	f00c fc41 	bl	800e7e8 <xQueueGenericSend>
							break;}
 8001f66:	e07f      	b.n	8002068 <start_rtc_task+0x394>

						case DAY_CONFIG:{
							uint8_t d = getnumber(cmd -> payload, cmd -> len);
 8001f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6c:	7a9b      	ldrb	r3, [r3, #10]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4610      	mov	r0, r2
 8001f72:	f7ff fcff 	bl	8001974 <getnumber>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
							date.Year = d;
 8001f7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f80:	72fb      	strb	r3, [r7, #11]
							rtc_state = MONTH_CONFIG;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <start_rtc_task+0x2fc>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_yr, portMAX_DELAY);
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <start_rtc_task+0x2f0>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001f90:	2300      	movs	r3, #0
 8001f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f96:	f00c fc27 	bl	800e7e8 <xQueueGenericSend>
							break;}
 8001f9a:	e065      	b.n	8002068 <start_rtc_task+0x394>
 8001f9c:	08012624 	.word	0x08012624
 8001fa0:	080126f8 	.word	0x080126f8
 8001fa4:	0801270c 	.word	0x0801270c
 8001fa8:	08012724 	.word	0x08012724
 8001fac:	0801273c 	.word	0x0801273c
 8001fb0:	08012750 	.word	0x08012750
 8001fb4:	08012764 	.word	0x08012764
 8001fb8:	0801277c 	.word	0x0801277c
 8001fbc:	08012790 	.word	0x08012790
 8001fc0:	080127ac 	.word	0x080127ac
 8001fc4:	20004c60 	.word	0x20004c60
 8001fc8:	200000d7 	.word	0x200000d7
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	20000138 	.word	0x20000138

						case MONTH_CONFIG:{
							uint8_t m = getnumber(cmd -> payload, cmd -> len);
 8001fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd8:	7a9b      	ldrb	r3, [r3, #10]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4610      	mov	r0, r2
 8001fde:	f7ff fcc9 	bl	8001974 <getnumber>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
							date.Month = m;
 8001fe8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fec:	727b      	strb	r3, [r7, #9]
							rtc_state = YEAR_CONFIG;
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <start_rtc_task+0x3b8>)
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_yr, portMAX_DELAY);
 8001ff4:	4b26      	ldr	r3, [pc, #152]	; (8002090 <start_rtc_task+0x3bc>)
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002002:	f00c fbf1 	bl	800e7e8 <xQueueGenericSend>
							break;}
 8002006:	e02f      	b.n	8002068 <start_rtc_task+0x394>

						case YEAR_CONFIG:{
							uint8_t y = getnumber(cmd -> payload, cmd -> len);
 8002008:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800200a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200c:	7a9b      	ldrb	r3, [r3, #10]
 800200e:	4619      	mov	r1, r3
 8002010:	4610      	mov	r0, r2
 8002012:	f7ff fcaf 	bl	8001974 <getnumber>
 8002016:	4603      	mov	r3, r0
 8002018:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
							date.Year = y;
 800201c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002020:	72fb      	strb	r3, [r7, #11]

							if(!validate_rtc_information(NULL, &date))
 8002022:	f107 0308 	add.w	r3, r7, #8
 8002026:	4619      	mov	r1, r3
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff fcc7 	bl	80019bc <validate_rtc_information>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d110      	bne.n	8002056 <start_rtc_task+0x382>
							{
								rtc_configure_date(&date);
 8002034:	f107 0308 	add.w	r3, r7, #8
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fc8b 	bl	8001954 <rtc_configure_date>
								xQueueSend(print_QueueHandle, &msg_conf, portMAX_DELAY);
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <start_rtc_task+0x3bc>)
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002046:	2300      	movs	r3, #0
 8002048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800204c:	f00c fbcc 	bl	800e7e8 <xQueueGenericSend>
								show_time_date();
 8002050:	f7ff fc02 	bl	8001858 <show_time_date>
							{
								xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
							}


							break;}
 8002054:	e007      	b.n	8002066 <start_rtc_task+0x392>
								xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <start_rtc_task+0x3bc>)
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	2300      	movs	r3, #0
 800205c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002060:	490c      	ldr	r1, [pc, #48]	; (8002094 <start_rtc_task+0x3c0>)
 8002062:	f00c fbc1 	bl	800e7e8 <xQueueGenericSend>
							break;}
 8002066:	bf00      	nop
					//rtc_configure_date();
					/*TODO: take care of invalid entries */



					curr_state = sMainMenu;			// Go back to the main manu
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <start_rtc_task+0x3c4>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
					break;}
 800206e:	e000      	b.n	8002072 <start_rtc_task+0x39e>

				case sRtcReport:{
					/*TODO: enable or disable RTC current time reporting over ITM printf */
					break;}
 8002070:	bf00      	nop
		while(curr_state != sMainMenu)
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <start_rtc_task+0x3c4>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f47f ae58 	bne.w	8001d2c <start_rtc_task+0x58>
				}// switch end
//			}


		} //while end
		xTaskNotify(menu_taskHandle, 0, eNoAction);		// Notify menu task
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <start_rtc_task+0x3c8>)
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	2300      	movs	r3, #0
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	f00d ff8f 	bl	800ffa8 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);								// Notify wait (wait till someone notifies)
 800208a:	e63b      	b.n	8001d04 <start_rtc_task+0x30>
 800208c:	20000138 	.word	0x20000138
 8002090:	20004c60 	.word	0x20004c60
 8002094:	20000000 	.word	0x20000000
 8002098:	200000d7 	.word	0x200000d7
 800209c:	20004d04 	.word	0x20004d04

080020a0 <start_print>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_print */
void start_print(void *argument)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	uint32_t *msg;

	while(1)
	{
		int status = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
		status = xQueueReceive(print_QueueHandle, &msg, portMAX_DELAY);
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <start_print+0x50>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f107 0108 	add.w	r1, r7, #8
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020b8:	4618      	mov	r0, r3
 80020ba:	f00c fd2f 	bl	800eb1c <xQueueReceive>
 80020be:	6178      	str	r0, [r7, #20]
		if(status != pdPASS)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d002      	beq.n	80020cc <start_print+0x2c>
		{
			// ERROR
			int ggg =999;
 80020c6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80020ca:	613b      	str	r3, [r7, #16]
		}
	    HAL_UART_Transmit(&huart2,(uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);					// Doesen't work =(
 80020cc:	68bc      	ldr	r4, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe f887 	bl	80001e4 <strlen>
 80020d6:	4603      	mov	r3, r0
 80020d8:	b29a      	uxth	r2, r3
 80020da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020de:	4621      	mov	r1, r4
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <start_print+0x54>)
 80020e2:	f007 fe6e 	bl	8009dc2 <HAL_UART_Transmit>
	    int ggg = 888;
 80020e6:	f44f 735e 	mov.w	r3, #888	; 0x378
 80020ea:	60fb      	str	r3, [r7, #12]
	{
 80020ec:	e7dc      	b.n	80020a8 <start_print+0x8>
 80020ee:	bf00      	nop
 80020f0:	20004c60 	.word	0x20004c60
 80020f4:	20004cc0 	.word	0x20004cc0

080020f8 <start_cmd_handl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_cmd_handl */
void start_cmd_handl(void *argument)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	command_t cmd;			// Create command variable

	for(;;)
	{
		// Waiting on notify from HAL_UART_RxCpltCallback
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002104:	2200      	movs	r2, #0
 8002106:	2100      	movs	r1, #0
 8002108:	2000      	movs	r0, #0
 800210a:	f00d feed 	bl	800fee8 <xTaskNotifyWait>
 800210e:	6178      	str	r0, [r7, #20]
		if(ret == pdTRUE)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d1f4      	bne.n	8002100 <start_cmd_handl+0x8>
		{
			process_command(&cmd);
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fb12 	bl	8001744 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002120:	e7ee      	b.n	8002100 <start_cmd_handl+0x8>
	...

08002124 <StartOLED_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLED_RTC */
void StartOLED_RTC(void *argument)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b0a0      	sub	sp, #128	; 0x80
 8002128:	af04      	add	r7, sp, #16
 800212a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLED_RTC */
  /* Infinite loop */

	osDelay(1000);
 800212c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002130:	f00b ffe8 	bl	800e104 <osDelay>

		// For resd time
		char time[20] = {0};
 8002134:	2300      	movs	r3, #0
 8002136:	65bb      	str	r3, [r7, #88]	; 0x58
 8002138:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
		char date[40] = {0};
 8002146:	2300      	movs	r3, #0
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
 800214a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800214e:	2224      	movs	r2, #36	; 0x24
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f00f fc6e 	bl	8011a34 <memset>
		char time_buf[10] = {0};
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
 800215c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	809a      	strh	r2, [r3, #4]
		char time_buf_2[10] = {0};
 8002166:	2300      	movs	r3, #0
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	809a      	strh	r2, [r3, #4]

		uint8_t seconds = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	75fb      	strb	r3, [r7, #23]
		uint8_t minutes = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	75bb      	strb	r3, [r7, #22]
		uint8_t hours = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	757b      	strb	r3, [r7, #21]
		uint8_t day = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	753b      	strb	r3, [r7, #20]
		uint8_t date_day = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	74fb      	strb	r3, [r7, #19]
		uint8_t mounth = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	74bb      	strb	r3, [r7, #18]
		uint8_t year = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	747b      	strb	r3, [r7, #17]
		uint8_t status = 9;
 8002190:	2309      	movs	r3, #9
 8002192:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		//

		oled_init();
 8002196:	f002 f813 	bl	80041c0 <oled_init>
		oled_update();
 800219a:	f001 ffbd 	bl	8004118 <oled_update>
		ds3231_I2C_init();
 800219e:	f7fe fa83 	bl	80006a8 <ds3231_I2C_init>

		// Encoder
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80021a2:	213c      	movs	r1, #60	; 0x3c
 80021a4:	48c9      	ldr	r0, [pc, #804]	; (80024cc <StartOLED_RTC+0x3a8>)
 80021a6:	f007 faaa 	bl	80096fe <HAL_TIM_Encoder_Start>
		int32_t prevCounter = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
		//

		for(;;)
		{
			switch (klick)
 80021ae:	4bc8      	ldr	r3, [pc, #800]	; (80024d0 <StartOLED_RTC+0x3ac>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	d8fb      	bhi.n	80021ae <StartOLED_RTC+0x8a>
 80021b6:	a201      	add	r2, pc, #4	; (adr r2, 80021bc <StartOLED_RTC+0x98>)
 80021b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021bc:	080021fd 	.word	0x080021fd
 80021c0:	0800282d 	.word	0x0800282d
 80021c4:	080021af 	.word	0x080021af
 80021c8:	08002997 	.word	0x08002997
 80021cc:	080021af 	.word	0x080021af
 80021d0:	08002ad3 	.word	0x08002ad3
 80021d4:	080021af 	.word	0x080021af
 80021d8:	08002c41 	.word	0x08002c41
 80021dc:	080021af 	.word	0x080021af
 80021e0:	08002d87 	.word	0x08002d87
 80021e4:	080021af 	.word	0x080021af
 80021e8:	08002ed7 	.word	0x08002ed7
 80021ec:	080021af 	.word	0x080021af
 80021f0:	08002ffd 	.word	0x08002ffd
 80021f4:	080021af 	.word	0x080021af
 80021f8:	0800314f 	.word	0x0800314f
			{
				case 0:					// Read time and data from DS3231

					strcat(time_buf, "TIME");
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	4618      	mov	r0, r3
 8002202:	f7fd ffef 	bl	80001e4 <strlen>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220e:	4413      	add	r3, r2
 8002210:	4ab0      	ldr	r2, [pc, #704]	; (80024d4 <StartOLED_RTC+0x3b0>)
 8002212:	6810      	ldr	r0, [r2, #0]
 8002214:	6018      	str	r0, [r3, #0]
 8002216:	7912      	ldrb	r2, [r2, #4]
 8002218:	711a      	strb	r2, [r3, #4]
					graphics_text(40, 10, 3, time_buf);
 800221a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221e:	2203      	movs	r2, #3
 8002220:	210a      	movs	r1, #10
 8002222:	2028      	movs	r0, #40	; 0x28
 8002224:	f001 fec4 	bl	8003fb0 <graphics_text>
					oled_update();
 8002228:	f001 ff76 	bl	8004118 <oled_update>
					osDelay(2000);
 800222c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002230:	f00b ff68 	bl	800e104 <osDelay>
					clear();
 8002234:	f001 fd08 	bl	8003c48 <clear>
					oled_update();
 8002238:	f001 ff6e 	bl	8004118 <oled_update>

					while(klick == 0)
 800223c:	e2ef      	b.n	800281e <StartOLED_RTC+0x6fa>
					{
						memset(time, 0, sizeof(time));
 800223e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002242:	2214      	movs	r2, #20
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f00f fbf4 	bl	8011a34 <memset>
						memset(date, 0, sizeof(date));
 800224c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002250:	2228      	movs	r2, #40	; 0x28
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f00f fbed 	bl	8011a34 <memset>
						memset(time_buf, 0, sizeof(time_buf));
 800225a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225e:	220a      	movs	r2, #10
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f00f fbe6 	bl	8011a34 <memset>
						memset(time_buf_2, 0, sizeof(time_buf_2));
 8002268:	f107 0318 	add.w	r3, r7, #24
 800226c:	220a      	movs	r2, #10
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f00f fbdf 	bl	8011a34 <memset>

						// 1. Read time from RTS
						// Red status (Detect DS3231)
						uint8_t buff= 0;
 8002276:	2300      	movs	r3, #0
 8002278:	72fb      	strb	r3, [r7, #11]
						status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 800227a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227e:	9302      	str	r3, [sp, #8]
 8002280:	2301      	movs	r3, #1
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	f107 030b 	add.w	r3, r7, #11
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2301      	movs	r3, #1
 800228c:	2200      	movs	r2, #0
 800228e:	21d0      	movs	r1, #208	; 0xd0
 8002290:	4891      	ldr	r0, [pc, #580]	; (80024d8 <StartOLED_RTC+0x3b4>)
 8002292:	f004 fca9 	bl	8006be8 <HAL_I2C_Mem_Read>
 8002296:	4603      	mov	r3, r0
 8002298:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if(status != HAL_OK )								// If DS3231 doesen'e detect
 800229c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d050      	beq.n	8002346 <StartOLED_RTC+0x222>
						{
							clear();
 80022a4:	f001 fcd0 	bl	8003c48 <clear>
							while(status != HAL_OK)							// If ERROR
 80022a8:	e046      	b.n	8002338 <StartOLED_RTC+0x214>
							{
								strcat(time_buf, "RTC ERROR");
 80022aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fd ff98 	bl	80001e4 <strlen>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022bc:	4413      	add	r3, r2
 80022be:	4987      	ldr	r1, [pc, #540]	; (80024dc <StartOLED_RTC+0x3b8>)
 80022c0:	461a      	mov	r2, r3
 80022c2:	460b      	mov	r3, r1
 80022c4:	cb03      	ldmia	r3!, {r0, r1}
 80022c6:	6010      	str	r0, [r2, #0]
 80022c8:	6051      	str	r1, [r2, #4]
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	8113      	strh	r3, [r2, #8]
								graphics_text(8, 5, 3, time_buf);
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	2203      	movs	r2, #3
 80022d4:	2105      	movs	r1, #5
 80022d6:	2008      	movs	r0, #8
 80022d8:	f001 fe6a 	bl	8003fb0 <graphics_text>
								oled_update();
 80022dc:	f001 ff1c 	bl	8004118 <oled_update>
								memset(time_buf, 0, sizeof(time_buf));
 80022e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e4:	220a      	movs	r2, #10
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f00f fba3 	bl	8011a34 <memset>
								osDelay(300);
 80022ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022f2:	f00b ff07 	bl	800e104 <osDelay>

								invert_rectangle(0, 0, 128, 32);
 80022f6:	2320      	movs	r3, #32
 80022f8:	2280      	movs	r2, #128	; 0x80
 80022fa:	2100      	movs	r1, #0
 80022fc:	2000      	movs	r0, #0
 80022fe:	f001 fc75 	bl	8003bec <invert_rectangle>
								oled_update();
 8002302:	f001 ff09 	bl	8004118 <oled_update>
								osDelay(300);
 8002306:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800230a:	f00b fefb 	bl	800e104 <osDelay>

								clear();
 800230e:	f001 fc9b 	bl	8003c48 <clear>
								oled_update();
 8002312:	f001 ff01 	bl	8004118 <oled_update>

								status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 8002316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231a:	9302      	str	r3, [sp, #8]
 800231c:	2301      	movs	r3, #1
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	f107 030b 	add.w	r3, r7, #11
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2301      	movs	r3, #1
 8002328:	2200      	movs	r2, #0
 800232a:	21d0      	movs	r1, #208	; 0xd0
 800232c:	486a      	ldr	r0, [pc, #424]	; (80024d8 <StartOLED_RTC+0x3b4>)
 800232e:	f004 fc5b 	bl	8006be8 <HAL_I2C_Mem_Read>
 8002332:	4603      	mov	r3, r0
 8002334:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							while(status != HAL_OK)							// If ERROR
 8002338:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1b4      	bne.n	80022aa <StartOLED_RTC+0x186>
							}
							clear();
 8002340:	f001 fc82 	bl	8003c48 <clear>
 8002344:	e26b      	b.n	800281e <StartOLED_RTC+0x6fa>
						}

						else	// If all DS3231 detected, read time and date
						{
							ds3231_read(DS3231_REGISTER_SECONDS_DEFAULT, &seconds);
 8002346:	f107 0317 	add.w	r3, r7, #23
 800234a:	4619      	mov	r1, r3
 800234c:	2000      	movs	r0, #0
 800234e:	f7fe f9b3 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_MINUTES_DEFAULT, &minutes);
 8002352:	f107 0316 	add.w	r3, r7, #22
 8002356:	4619      	mov	r1, r3
 8002358:	2001      	movs	r0, #1
 800235a:	f7fe f9ad 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_HOURS_DEFAULT, &hours);
 800235e:	f107 0315 	add.w	r3, r7, #21
 8002362:	4619      	mov	r1, r3
 8002364:	2002      	movs	r0, #2
 8002366:	f7fe f9a7 	bl	80006b8 <ds3231_read>

							ds3231_read(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &day);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	2003      	movs	r0, #3
 8002372:	f7fe f9a1 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_DATE_DEFAULT, &date_day);
 8002376:	f107 0313 	add.w	r3, r7, #19
 800237a:	4619      	mov	r1, r3
 800237c:	2004      	movs	r0, #4
 800237e:	f7fe f99b 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_MONTH_DEFAULT, &mounth);
 8002382:	f107 0312 	add.w	r3, r7, #18
 8002386:	4619      	mov	r1, r3
 8002388:	2005      	movs	r0, #5
 800238a:	f7fe f995 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_YEAR_DEFAULT, &year);
 800238e:	f107 0311 	add.w	r3, r7, #17
 8002392:	4619      	mov	r1, r3
 8002394:	2006      	movs	r0, #6
 8002396:	f7fe f98f 	bl	80006b8 <ds3231_read>

							// Convert in string
							// Print minutes on OLED
							if(hours < 10)
 800239a:	7d7b      	ldrb	r3, [r7, #21]
 800239c:	2b09      	cmp	r3, #9
 800239e:	d835      	bhi.n	800240c <StartOLED_RTC+0x2e8>
							{
								memset(time_buf, 0, sizeof(time_buf));
 80023a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a4:	220a      	movs	r2, #10
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f00f fb43 	bl	8011a34 <memset>
								sprintf(time_buf, "%c", '0');
 80023ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b2:	2230      	movs	r2, #48	; 0x30
 80023b4:	494a      	ldr	r1, [pc, #296]	; (80024e0 <StartOLED_RTC+0x3bc>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	f00f fc68 	bl	8011c8c <siprintf>
								sprintf(time_buf_2, "%d", hours);
 80023bc:	7d7b      	ldrb	r3, [r7, #21]
 80023be:	461a      	mov	r2, r3
 80023c0:	f107 0318 	add.w	r3, r7, #24
 80023c4:	4947      	ldr	r1, [pc, #284]	; (80024e4 <StartOLED_RTC+0x3c0>)
 80023c6:	4618      	mov	r0, r3
 80023c8:	f00f fc60 	bl	8011c8c <siprintf>
								strcat(time_buf, time_buf_2);
 80023cc:	f107 0218 	add.w	r2, r7, #24
 80023d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f00f fc78 	bl	8011ccc <strcat>
								strcat(time, time_buf);
 80023dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80023e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f00f fc70 	bl	8011ccc <strcat>
								strcat(time, ":");
 80023ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fd fef7 	bl	80001e4 <strlen>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023fe:	4413      	add	r3, r2
 8002400:	4939      	ldr	r1, [pc, #228]	; (80024e8 <StartOLED_RTC+0x3c4>)
 8002402:	461a      	mov	r2, r3
 8002404:	460b      	mov	r3, r1
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	8013      	strh	r3, [r2, #0]
 800240a:	e025      	b.n	8002458 <StartOLED_RTC+0x334>
							}
							else
							{
								sprintf(time_buf, "%d", hours);
 800240c:	7d7b      	ldrb	r3, [r7, #21]
 800240e:	461a      	mov	r2, r3
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	4933      	ldr	r1, [pc, #204]	; (80024e4 <StartOLED_RTC+0x3c0>)
 8002416:	4618      	mov	r0, r3
 8002418:	f00f fc38 	bl	8011c8c <siprintf>
								strcat(time, time_buf);
 800241c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002420:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f00f fc50 	bl	8011ccc <strcat>
								strcat(time, ":");
 800242c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002430:	4618      	mov	r0, r3
 8002432:	f7fd fed7 	bl	80001e4 <strlen>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800243e:	4413      	add	r3, r2
 8002440:	4929      	ldr	r1, [pc, #164]	; (80024e8 <StartOLED_RTC+0x3c4>)
 8002442:	461a      	mov	r2, r3
 8002444:	460b      	mov	r3, r1
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	8013      	strh	r3, [r2, #0]
								memset(time_buf, 0, sizeof(time_buf));
 800244a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244e:	220a      	movs	r2, #10
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f00f faee 	bl	8011a34 <memset>
							}

							// Print minutes on OLED
							if(minutes < 10)
 8002458:	7dbb      	ldrb	r3, [r7, #22]
 800245a:	2b09      	cmp	r3, #9
 800245c:	d846      	bhi.n	80024ec <StartOLED_RTC+0x3c8>
							{
								memset(time_buf, 0, sizeof(time_buf));
 800245e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002462:	220a      	movs	r2, #10
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f00f fae4 	bl	8011a34 <memset>
								sprintf(time_buf, "%c", '0');
 800246c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002470:	2230      	movs	r2, #48	; 0x30
 8002472:	491b      	ldr	r1, [pc, #108]	; (80024e0 <StartOLED_RTC+0x3bc>)
 8002474:	4618      	mov	r0, r3
 8002476:	f00f fc09 	bl	8011c8c <siprintf>
								sprintf(time_buf_2, "%d", minutes);
 800247a:	7dbb      	ldrb	r3, [r7, #22]
 800247c:	461a      	mov	r2, r3
 800247e:	f107 0318 	add.w	r3, r7, #24
 8002482:	4918      	ldr	r1, [pc, #96]	; (80024e4 <StartOLED_RTC+0x3c0>)
 8002484:	4618      	mov	r0, r3
 8002486:	f00f fc01 	bl	8011c8c <siprintf>
								strcat(time_buf, time_buf_2);
 800248a:	f107 0218 	add.w	r2, r7, #24
 800248e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f00f fc19 	bl	8011ccc <strcat>
								strcat(time, time_buf);
 800249a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800249e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f00f fc11 	bl	8011ccc <strcat>
								strcat(time, ":");
 80024aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd fe98 	bl	80001e4 <strlen>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024bc:	4413      	add	r3, r2
 80024be:	490a      	ldr	r1, [pc, #40]	; (80024e8 <StartOLED_RTC+0x3c4>)
 80024c0:	461a      	mov	r2, r3
 80024c2:	460b      	mov	r3, r1
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	8013      	strh	r3, [r2, #0]
 80024c8:	e036      	b.n	8002538 <StartOLED_RTC+0x414>
 80024ca:	bf00      	nop
 80024cc:	20004c14 	.word	0x20004c14
 80024d0:	200000dc 	.word	0x200000dc
 80024d4:	080127d0 	.word	0x080127d0
 80024d8:	20004b24 	.word	0x20004b24
 80024dc:	080127d8 	.word	0x080127d8
 80024e0:	080127e4 	.word	0x080127e4
 80024e4:	080127e8 	.word	0x080127e8
 80024e8:	080127ec 	.word	0x080127ec
							}
							else
							{
								sprintf(time_buf, "%d", minutes);
 80024ec:	7dbb      	ldrb	r3, [r7, #22]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f4:	49d7      	ldr	r1, [pc, #860]	; (8002854 <StartOLED_RTC+0x730>)
 80024f6:	4618      	mov	r0, r3
 80024f8:	f00f fbc8 	bl	8011c8c <siprintf>
								strcat(time, time_buf);
 80024fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002500:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f00f fbe0 	bl	8011ccc <strcat>
								strcat(time, ":");
 800250c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd fe67 	bl	80001e4 <strlen>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800251e:	4413      	add	r3, r2
 8002520:	49cd      	ldr	r1, [pc, #820]	; (8002858 <StartOLED_RTC+0x734>)
 8002522:	461a      	mov	r2, r3
 8002524:	460b      	mov	r3, r1
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	8013      	strh	r3, [r2, #0]
								memset(time_buf, 0, sizeof(time_buf));
 800252a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252e:	220a      	movs	r2, #10
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f00f fa7e 	bl	8011a34 <memset>
							}

							// Print seconds on OLED
							if(seconds == 0)
 8002538:	7dfb      	ldrb	r3, [r7, #23]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d103      	bne.n	8002546 <StartOLED_RTC+0x422>
							{
								clear();
 800253e:	f001 fb83 	bl	8003c48 <clear>
								oled_update();
 8002542:	f001 fde9 	bl	8004118 <oled_update>
							}
							if(seconds < 10)
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	2b09      	cmp	r3, #9
 800254a:	d826      	bhi.n	800259a <StartOLED_RTC+0x476>
							{
								memset(time_buf, 0, sizeof(time_buf));
 800254c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002550:	220a      	movs	r2, #10
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f00f fa6d 	bl	8011a34 <memset>
								sprintf(time_buf, "%c", '0');
 800255a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255e:	2230      	movs	r2, #48	; 0x30
 8002560:	49be      	ldr	r1, [pc, #760]	; (800285c <StartOLED_RTC+0x738>)
 8002562:	4618      	mov	r0, r3
 8002564:	f00f fb92 	bl	8011c8c <siprintf>
								sprintf(time_buf_2, "%d", seconds);
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	461a      	mov	r2, r3
 800256c:	f107 0318 	add.w	r3, r7, #24
 8002570:	49b8      	ldr	r1, [pc, #736]	; (8002854 <StartOLED_RTC+0x730>)
 8002572:	4618      	mov	r0, r3
 8002574:	f00f fb8a 	bl	8011c8c <siprintf>
								strcat(time_buf, time_buf_2);
 8002578:	f107 0218 	add.w	r2, r7, #24
 800257c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f00f fba2 	bl	8011ccc <strcat>
								strcat(time, time_buf);
 8002588:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800258c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f00f fb9a 	bl	8011ccc <strcat>
 8002598:	e016      	b.n	80025c8 <StartOLED_RTC+0x4a4>
							}
							else
							{
								sprintf(time_buf, "%d", seconds);
 800259a:	7dfb      	ldrb	r3, [r7, #23]
 800259c:	461a      	mov	r2, r3
 800259e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a2:	49ac      	ldr	r1, [pc, #688]	; (8002854 <StartOLED_RTC+0x730>)
 80025a4:	4618      	mov	r0, r3
 80025a6:	f00f fb71 	bl	8011c8c <siprintf>
								strcat(time, time_buf);
 80025aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f00f fb89 	bl	8011ccc <strcat>
								memset(time_buf, 0, sizeof(time_buf));
 80025ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025be:	220a      	movs	r2, #10
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f00f fa36 	bl	8011a34 <memset>
							}

							uint8_t second_line = seconds*2;
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
							line_h(5, second_line, 19, 2, add);
 80025d0:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 80025d4:	2301      	movs	r3, #1
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2302      	movs	r3, #2
 80025da:	2213      	movs	r2, #19
 80025dc:	2005      	movs	r0, #5
 80025de:	f001 fb5b 	bl	8003c98 <line_h>
	//						line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode);
							//invert_rectangle(5, 15, second_line, 5);

							// Print date
							sprintf(time_buf, "%d", date_day);
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	461a      	mov	r2, r3
 80025e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ea:	499a      	ldr	r1, [pc, #616]	; (8002854 <StartOLED_RTC+0x730>)
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00f fb4d 	bl	8011c8c <siprintf>
							strcat(date, time_buf);
 80025f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f00f fb65 	bl	8011ccc <strcat>
							strcat(date, ".");
 8002602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd fdec 	bl	80001e4 <strlen>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002614:	4413      	add	r3, r2
 8002616:	4992      	ldr	r1, [pc, #584]	; (8002860 <StartOLED_RTC+0x73c>)
 8002618:	461a      	mov	r2, r3
 800261a:	460b      	mov	r3, r1
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 8002620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002624:	220a      	movs	r2, #10
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f00f fa03 	bl	8011a34 <memset>

							sprintf(time_buf, "%d", mounth);
 800262e:	7cbb      	ldrb	r3, [r7, #18]
 8002630:	461a      	mov	r2, r3
 8002632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002636:	4987      	ldr	r1, [pc, #540]	; (8002854 <StartOLED_RTC+0x730>)
 8002638:	4618      	mov	r0, r3
 800263a:	f00f fb27 	bl	8011c8c <siprintf>
							strcat(date, time_buf);
 800263e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f00f fb3f 	bl	8011ccc <strcat>
							strcat(date, ".");
 800264e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd fdc6 	bl	80001e4 <strlen>
 8002658:	4603      	mov	r3, r0
 800265a:	461a      	mov	r2, r3
 800265c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002660:	4413      	add	r3, r2
 8002662:	497f      	ldr	r1, [pc, #508]	; (8002860 <StartOLED_RTC+0x73c>)
 8002664:	461a      	mov	r2, r3
 8002666:	460b      	mov	r3, r1
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 800266c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002670:	220a      	movs	r2, #10
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f00f f9dd 	bl	8011a34 <memset>

							sprintf(time_buf, "%d", year);
 800267a:	7c7b      	ldrb	r3, [r7, #17]
 800267c:	461a      	mov	r2, r3
 800267e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002682:	4974      	ldr	r1, [pc, #464]	; (8002854 <StartOLED_RTC+0x730>)
 8002684:	4618      	mov	r0, r3
 8002686:	f00f fb01 	bl	8011c8c <siprintf>
							strcat(date, "20");
 800268a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd fda8 	bl	80001e4 <strlen>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800269c:	4413      	add	r3, r2
 800269e:	4a71      	ldr	r2, [pc, #452]	; (8002864 <StartOLED_RTC+0x740>)
 80026a0:	8811      	ldrh	r1, [r2, #0]
 80026a2:	7892      	ldrb	r2, [r2, #2]
 80026a4:	8019      	strh	r1, [r3, #0]
 80026a6:	709a      	strb	r2, [r3, #2]
							strcat(date, time_buf);
 80026a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80026ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f00f fb0a 	bl	8011ccc <strcat>
							memset(time_buf, 0, sizeof(time_buf));
 80026b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026bc:	220a      	movs	r2, #10
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f00f f9b7 	bl	8011a34 <memset>

							// day
							switch (day)
 80026c6:	7d3b      	ldrb	r3, [r7, #20]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	f200 8093 	bhi.w	80027f6 <StartOLED_RTC+0x6d2>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <StartOLED_RTC+0x5b4>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	080026f5 	.word	0x080026f5
 80026dc:	08002717 	.word	0x08002717
 80026e0:	0800273d 	.word	0x0800273d
 80026e4:	08002767 	.word	0x08002767
 80026e8:	0800278d 	.word	0x0800278d
 80026ec:	080027af 	.word	0x080027af
 80026f0:	080027d5 	.word	0x080027d5
							{
								case 1:
									strcat(date, " Monday");
 80026f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fd73 	bl	80001e4 <strlen>
 80026fe:	4603      	mov	r3, r0
 8002700:	461a      	mov	r2, r3
 8002702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002706:	4413      	add	r3, r2
 8002708:	4957      	ldr	r1, [pc, #348]	; (8002868 <StartOLED_RTC+0x744>)
 800270a:	461a      	mov	r2, r3
 800270c:	460b      	mov	r3, r1
 800270e:	cb03      	ldmia	r3!, {r0, r1}
 8002710:	6010      	str	r0, [r2, #0]
 8002712:	6051      	str	r1, [r2, #4]
									break;
 8002714:	e06f      	b.n	80027f6 <StartOLED_RTC+0x6d2>
								case 2:
									strcat(date, " Tuesday");
 8002716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd fd62 	bl	80001e4 <strlen>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002728:	4413      	add	r3, r2
 800272a:	4950      	ldr	r1, [pc, #320]	; (800286c <StartOLED_RTC+0x748>)
 800272c:	461a      	mov	r2, r3
 800272e:	460b      	mov	r3, r1
 8002730:	cb03      	ldmia	r3!, {r0, r1}
 8002732:	6010      	str	r0, [r2, #0]
 8002734:	6051      	str	r1, [r2, #4]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	7213      	strb	r3, [r2, #8]
									break;
 800273a:	e05c      	b.n	80027f6 <StartOLED_RTC+0x6d2>
								case 3:
									strcat(date, " Wednesday");
 800273c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd fd4f 	bl	80001e4 <strlen>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800274e:	4413      	add	r3, r2
 8002750:	4947      	ldr	r1, [pc, #284]	; (8002870 <StartOLED_RTC+0x74c>)
 8002752:	461a      	mov	r2, r3
 8002754:	460b      	mov	r3, r1
 8002756:	cb03      	ldmia	r3!, {r0, r1}
 8002758:	6010      	str	r0, [r2, #0]
 800275a:	6051      	str	r1, [r2, #4]
 800275c:	8819      	ldrh	r1, [r3, #0]
 800275e:	789b      	ldrb	r3, [r3, #2]
 8002760:	8111      	strh	r1, [r2, #8]
 8002762:	7293      	strb	r3, [r2, #10]
									break;
 8002764:	e047      	b.n	80027f6 <StartOLED_RTC+0x6d2>
								case 4:
									strcat(date, " Thursday");
 8002766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fd3a 	bl	80001e4 <strlen>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002778:	4413      	add	r3, r2
 800277a:	493e      	ldr	r1, [pc, #248]	; (8002874 <StartOLED_RTC+0x750>)
 800277c:	461a      	mov	r2, r3
 800277e:	460b      	mov	r3, r1
 8002780:	cb03      	ldmia	r3!, {r0, r1}
 8002782:	6010      	str	r0, [r2, #0]
 8002784:	6051      	str	r1, [r2, #4]
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	8113      	strh	r3, [r2, #8]
									break;
 800278a:	e034      	b.n	80027f6 <StartOLED_RTC+0x6d2>
								case 5:
									strcat(date, " Friday");
 800278c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fd27 	bl	80001e4 <strlen>
 8002796:	4603      	mov	r3, r0
 8002798:	461a      	mov	r2, r3
 800279a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800279e:	4413      	add	r3, r2
 80027a0:	4935      	ldr	r1, [pc, #212]	; (8002878 <StartOLED_RTC+0x754>)
 80027a2:	461a      	mov	r2, r3
 80027a4:	460b      	mov	r3, r1
 80027a6:	cb03      	ldmia	r3!, {r0, r1}
 80027a8:	6010      	str	r0, [r2, #0]
 80027aa:	6051      	str	r1, [r2, #4]
									break;
 80027ac:	e023      	b.n	80027f6 <StartOLED_RTC+0x6d2>
								case 6:
									strcat(date, " Saturday");
 80027ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fd16 	bl	80001e4 <strlen>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027c0:	4413      	add	r3, r2
 80027c2:	492e      	ldr	r1, [pc, #184]	; (800287c <StartOLED_RTC+0x758>)
 80027c4:	461a      	mov	r2, r3
 80027c6:	460b      	mov	r3, r1
 80027c8:	cb03      	ldmia	r3!, {r0, r1}
 80027ca:	6010      	str	r0, [r2, #0]
 80027cc:	6051      	str	r1, [r2, #4]
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	8113      	strh	r3, [r2, #8]
									break;
 80027d2:	e010      	b.n	80027f6 <StartOLED_RTC+0x6d2>
								case 7:
									strcat(date, " Sunday");
 80027d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fd03 	bl	80001e4 <strlen>
 80027de:	4603      	mov	r3, r0
 80027e0:	461a      	mov	r2, r3
 80027e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027e6:	4413      	add	r3, r2
 80027e8:	4925      	ldr	r1, [pc, #148]	; (8002880 <StartOLED_RTC+0x75c>)
 80027ea:	461a      	mov	r2, r3
 80027ec:	460b      	mov	r3, r1
 80027ee:	cb03      	ldmia	r3!, {r0, r1}
 80027f0:	6010      	str	r0, [r2, #0]
 80027f2:	6051      	str	r1, [r2, #4]
									break;
 80027f4:	bf00      	nop
							}

							graphics_text(40, 0, 3, time);
 80027f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027fa:	2203      	movs	r2, #3
 80027fc:	2100      	movs	r1, #0
 80027fe:	2028      	movs	r0, #40	; 0x28
 8002800:	f001 fbd6 	bl	8003fb0 <graphics_text>
							graphics_text(0, 24, 2, date);
 8002804:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002808:	2202      	movs	r2, #2
 800280a:	2118      	movs	r1, #24
 800280c:	2000      	movs	r0, #0
 800280e:	f001 fbcf 	bl	8003fb0 <graphics_text>
							oled_update();
 8002812:	f001 fc81 	bl	8004118 <oled_update>

							osDelay(1000);
 8002816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800281a:	f00b fc73 	bl	800e104 <osDelay>
					while(klick == 0)
 800281e:	4b19      	ldr	r3, [pc, #100]	; (8002884 <StartOLED_RTC+0x760>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f43f ad0b 	beq.w	800223e <StartOLED_RTC+0x11a>
						}
					}
			  		break;
 8002828:	f000 bccd 	b.w	80031c6 <StartOLED_RTC+0x10a2>


				case 1:
					// Set yer
					graphics_text(0, 0, 1, "   SET:");
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <StartOLED_RTC+0x764>)
 800282e:	2201      	movs	r2, #1
 8002830:	2100      	movs	r1, #0
 8002832:	2000      	movs	r0, #0
 8002834:	f001 fbbc 	bl	8003fb0 <graphics_text>
					graphics_text(0, 8, 1, "YEAR   ");
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <StartOLED_RTC+0x768>)
 800283a:	2201      	movs	r2, #1
 800283c:	2108      	movs	r1, #8
 800283e:	2000      	movs	r0, #0
 8002840:	f001 fbb6 	bl	8003fb0 <graphics_text>
					oled_update();
 8002844:	f001 fc68 	bl	8004118 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);								// Start count encoder from 0
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <StartOLED_RTC+0x76c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2200      	movs	r2, #0
 800284e:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 1)
 8002850:	e071      	b.n	8002936 <StartOLED_RTC+0x812>
 8002852:	bf00      	nop
 8002854:	080127e8 	.word	0x080127e8
 8002858:	080127ec 	.word	0x080127ec
 800285c:	080127e4 	.word	0x080127e4
 8002860:	080127f0 	.word	0x080127f0
 8002864:	080127f4 	.word	0x080127f4
 8002868:	080127f8 	.word	0x080127f8
 800286c:	08012800 	.word	0x08012800
 8002870:	0801280c 	.word	0x0801280c
 8002874:	08012818 	.word	0x08012818
 8002878:	08012824 	.word	0x08012824
 800287c:	0801282c 	.word	0x0801282c
 8002880:	08012838 	.word	0x08012838
 8002884:	200000dc 	.word	0x200000dc
 8002888:	08012840 	.word	0x08012840
 800288c:	08012848 	.word	0x08012848
 8002890:	20004c14 	.word	0x20004c14
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002894:	4b99      	ldr	r3, [pc, #612]	; (8002afc <StartOLED_RTC+0x9d8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	461a      	mov	r2, r3
 800289c:	4b98      	ldr	r3, [pc, #608]	; (8002b00 <StartOLED_RTC+0x9dc>)
 800289e:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80028a0:	4b97      	ldr	r3, [pc, #604]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	0fda      	lsrs	r2, r3, #31
 80028aa:	4413      	add	r3, r2
 80028ac:	105b      	asrs	r3, r3, #1
 80028ae:	425b      	negs	r3, r3
 80028b0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80028b4:	337f      	adds	r3, #127	; 0x7f
 80028b6:	4a92      	ldr	r2, [pc, #584]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80028b8:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 80028ba:	4b91      	ldr	r3, [pc, #580]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d038      	beq.n	8002936 <StartOLED_RTC+0x812>
						{
							prevCounter = currCounter;
 80028c4:	4b8e      	ldr	r3, [pc, #568]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]
							if(currCounter > 100)									// Encoder count from 0 to 100
 80028ca:	4b8d      	ldr	r3, [pc, #564]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	dd06      	ble.n	80028e0 <StartOLED_RTC+0x7bc>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 80028d2:	4b8a      	ldr	r3, [pc, #552]	; (8002afc <StartOLED_RTC+0x9d8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 80028da:	4b89      	ldr	r3, [pc, #548]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 80028e0:	4b87      	ldr	r3, [pc, #540]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	da06      	bge.n	80028f6 <StartOLED_RTC+0x7d2>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 80028e8:	4b84      	ldr	r3, [pc, #528]	; (8002afc <StartOLED_RTC+0x9d8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2200      	movs	r2, #0
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 80028f0:	4b83      	ldr	r3, [pc, #524]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 80028f6:	4b83      	ldr	r3, [pc, #524]	; (8002b04 <StartOLED_RTC+0x9e0>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	2110      	movs	r1, #16
 80028fc:	2000      	movs	r0, #0
 80028fe:	f001 fb57 	bl	8003fb0 <graphics_text>
							oled_update();
 8002902:	f001 fc09 	bl	8004118 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002906:	4b7e      	ldr	r3, [pc, #504]	; (8002b00 <StartOLED_RTC+0x9dc>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290e:	497e      	ldr	r1, [pc, #504]	; (8002b08 <StartOLED_RTC+0x9e4>)
 8002910:	4618      	mov	r0, r3
 8002912:	f00f f9bb 	bl	8011c8c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291a:	2201      	movs	r2, #1
 800291c:	2110      	movs	r1, #16
 800291e:	2000      	movs	r0, #0
 8002920:	f001 fb46 	bl	8003fb0 <graphics_text>
							oled_update();
 8002924:	f001 fbf8 	bl	8004118 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292c:	220a      	movs	r2, #10
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f00f f87f 	bl	8011a34 <memset>
					while(klick == 1)
 8002936:	4b75      	ldr	r3, [pc, #468]	; (8002b0c <StartOLED_RTC+0x9e8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d0aa      	beq.n	8002894 <StartOLED_RTC+0x770>
						}
					}
					if(klick == 2)
 800293e:	4b73      	ldr	r3, [pc, #460]	; (8002b0c <StartOLED_RTC+0x9e8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b02      	cmp	r3, #2
 8002944:	f040 842f 	bne.w	80031a6 <StartOLED_RTC+0x1082>
					{
						// write data
						ds3231_set(DS3231_REGISTER_YEAR_DEFAULT, &prevCounter);
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	4619      	mov	r1, r3
 800294e:	2006      	movs	r0, #6
 8002950:	f7fd ff72 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002954:	4b6e      	ldr	r3, [pc, #440]	; (8002b10 <StartOLED_RTC+0x9ec>)
 8002956:	2201      	movs	r2, #1
 8002958:	2110      	movs	r1, #16
 800295a:	2000      	movs	r0, #0
 800295c:	f001 fb28 	bl	8003fb0 <graphics_text>
						oled_update();
 8002960:	f001 fbda 	bl	8004118 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002964:	4b6b      	ldr	r3, [pc, #428]	; (8002b14 <StartOLED_RTC+0x9f0>)
 8002966:	2201      	movs	r2, #1
 8002968:	2110      	movs	r1, #16
 800296a:	2000      	movs	r0, #0
 800296c:	f001 fb20 	bl	8003fb0 <graphics_text>
						oled_update();
 8002970:	f001 fbd2 	bl	8004118 <oled_update>

						osDelay(800);
 8002974:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002978:	f00b fbc4 	bl	800e104 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 800297c:	4b64      	ldr	r3, [pc, #400]	; (8002b10 <StartOLED_RTC+0x9ec>)
 800297e:	2201      	movs	r2, #1
 8002980:	2110      	movs	r1, #16
 8002982:	2000      	movs	r0, #0
 8002984:	f001 fb14 	bl	8003fb0 <graphics_text>
						oled_update();
 8002988:	f001 fbc6 	bl	8004118 <oled_update>

						klick = 3;
 800298c:	4b5f      	ldr	r3, [pc, #380]	; (8002b0c <StartOLED_RTC+0x9e8>)
 800298e:	2203      	movs	r2, #3
 8002990:	601a      	str	r2, [r3, #0]
					}
					break;
 8002992:	f000 bc08 	b.w	80031a6 <StartOLED_RTC+0x1082>

				case 3:
					// set month
					graphics_text(0, 8, 1, "MONTH");
 8002996:	4b60      	ldr	r3, [pc, #384]	; (8002b18 <StartOLED_RTC+0x9f4>)
 8002998:	2201      	movs	r2, #1
 800299a:	2108      	movs	r1, #8
 800299c:	2000      	movs	r0, #0
 800299e:	f001 fb07 	bl	8003fb0 <graphics_text>
					oled_update();
 80029a2:	f001 fbb9 	bl	8004118 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 80029a6:	4b55      	ldr	r3, [pc, #340]	; (8002afc <StartOLED_RTC+0x9d8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2201      	movs	r2, #1
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24
					currCounter = 1;
 80029ae:	4b54      	ldr	r3, [pc, #336]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

					while(klick == 3)
 80029b4:	e050      	b.n	8002a58 <StartOLED_RTC+0x934>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 80029b6:	4b51      	ldr	r3, [pc, #324]	; (8002afc <StartOLED_RTC+0x9d8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	461a      	mov	r2, r3
 80029be:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80029c0:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80029c2:	4b4f      	ldr	r3, [pc, #316]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	0fda      	lsrs	r2, r3, #31
 80029cc:	4413      	add	r3, r2
 80029ce:	105b      	asrs	r3, r3, #1
 80029d0:	425b      	negs	r3, r3
 80029d2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80029d6:	337f      	adds	r3, #127	; 0x7f
 80029d8:	4a49      	ldr	r2, [pc, #292]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80029da:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 80029dc:	4b48      	ldr	r3, [pc, #288]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d038      	beq.n	8002a58 <StartOLED_RTC+0x934>
						{
							prevCounter = currCounter;
 80029e6:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60fb      	str	r3, [r7, #12]

							if(currCounter > 12)
 80029ec:	4b44      	ldr	r3, [pc, #272]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b0c      	cmp	r3, #12
 80029f2:	dd06      	ble.n	8002a02 <StartOLED_RTC+0x8de>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 80029f4:	4b41      	ldr	r3, [pc, #260]	; (8002afc <StartOLED_RTC+0x9d8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2201      	movs	r2, #1
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 80029fc:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <StartOLED_RTC+0x9dc>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
							}

							if(currCounter < 1)
 8002a02:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <StartOLED_RTC+0x9dc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	dc06      	bgt.n	8002a18 <StartOLED_RTC+0x8f4>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <StartOLED_RTC+0x9d8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002a12:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <StartOLED_RTC+0x9dc>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
							}


							graphics_text(0, 16, 1, "           ");
 8002a18:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <StartOLED_RTC+0x9e0>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	2110      	movs	r1, #16
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f001 fac6 	bl	8003fb0 <graphics_text>
							oled_update();
 8002a24:	f001 fb78 	bl	8004118 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002a28:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <StartOLED_RTC+0x9dc>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a30:	4935      	ldr	r1, [pc, #212]	; (8002b08 <StartOLED_RTC+0x9e4>)
 8002a32:	4618      	mov	r0, r3
 8002a34:	f00f f92a 	bl	8011c8c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	2110      	movs	r1, #16
 8002a40:	2000      	movs	r0, #0
 8002a42:	f001 fab5 	bl	8003fb0 <graphics_text>
							oled_update();
 8002a46:	f001 fb67 	bl	8004118 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4e:	220a      	movs	r2, #10
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f00e ffee 	bl	8011a34 <memset>
					while(klick == 3)
 8002a58:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <StartOLED_RTC+0x9e8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d0aa      	beq.n	80029b6 <StartOLED_RTC+0x892>

						}
					}
					if(klick == 4)
 8002a60:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <StartOLED_RTC+0x9e8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	f040 83a1 	bne.w	80031ac <StartOLED_RTC+0x1088>
					{
						if((currCounter < 1) || (currCounter > 12))
 8002a6a:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <StartOLED_RTC+0x9dc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	dd03      	ble.n	8002a7a <StartOLED_RTC+0x956>
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <StartOLED_RTC+0x9dc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	dd05      	ble.n	8002a86 <StartOLED_RTC+0x962>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <StartOLED_RTC+0x9d8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 8002a82:	2301      	movs	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 8002a86:	f107 030c 	add.w	r3, r7, #12
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	2005      	movs	r0, #5
 8002a8e:	f7fd fed3 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002a92:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <StartOLED_RTC+0x9ec>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	2110      	movs	r1, #16
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f001 fa89 	bl	8003fb0 <graphics_text>
						oled_update();
 8002a9e:	f001 fb3b 	bl	8004118 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <StartOLED_RTC+0x9f0>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	2110      	movs	r1, #16
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f001 fa81 	bl	8003fb0 <graphics_text>
						oled_update();
 8002aae:	f001 fb33 	bl	8004118 <oled_update>

						osDelay(800);
 8002ab2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002ab6:	f00b fb25 	bl	800e104 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <StartOLED_RTC+0x9ec>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	2110      	movs	r1, #16
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f001 fa75 	bl	8003fb0 <graphics_text>
						oled_update();
 8002ac6:	f001 fb27 	bl	8004118 <oled_update>

						klick = 5;
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <StartOLED_RTC+0x9e8>)
 8002acc:	2205      	movs	r2, #5
 8002ace:	601a      	str	r2, [r3, #0]
					}

					break;
 8002ad0:	e36c      	b.n	80031ac <StartOLED_RTC+0x1088>

				case 5:
					// Set date

					graphics_text(0, 8, 1, "              ");
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <StartOLED_RTC+0x9f8>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	2108      	movs	r1, #8
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f001 fa69 	bl	8003fb0 <graphics_text>
					oled_update();
 8002ade:	f001 fb1b 	bl	8004118 <oled_update>
					graphics_text(0, 8, 1, "DATE");
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <StartOLED_RTC+0x9fc>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	2108      	movs	r1, #8
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f001 fa61 	bl	8003fb0 <graphics_text>
					oled_update();
 8002aee:	f001 fb13 	bl	8004118 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 8002af2:	4b02      	ldr	r3, [pc, #8]	; (8002afc <StartOLED_RTC+0x9d8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2201      	movs	r2, #1
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 5)
 8002afa:	e064      	b.n	8002bc6 <StartOLED_RTC+0xaa2>
 8002afc:	20004c14 	.word	0x20004c14
 8002b00:	200000d8 	.word	0x200000d8
 8002b04:	08012850 	.word	0x08012850
 8002b08:	080127e8 	.word	0x080127e8
 8002b0c:	200000dc 	.word	0x200000dc
 8002b10:	0801285c 	.word	0x0801285c
 8002b14:	08012870 	.word	0x08012870
 8002b18:	0801287c 	.word	0x0801287c
 8002b1c:	08012884 	.word	0x08012884
 8002b20:	08012894 	.word	0x08012894
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002b24:	4ba2      	ldr	r3, [pc, #648]	; (8002db0 <StartOLED_RTC+0xc8c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4ba1      	ldr	r3, [pc, #644]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002b2e:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002b30:	4ba0      	ldr	r3, [pc, #640]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	0fda      	lsrs	r2, r3, #31
 8002b3a:	4413      	add	r3, r2
 8002b3c:	105b      	asrs	r3, r3, #1
 8002b3e:	425b      	negs	r3, r3
 8002b40:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002b44:	337f      	adds	r3, #127	; 0x7f
 8002b46:	4a9b      	ldr	r2, [pc, #620]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002b48:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002b4a:	4b9a      	ldr	r3, [pc, #616]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d038      	beq.n	8002bc6 <StartOLED_RTC+0xaa2>
						{
							prevCounter = currCounter;
 8002b54:	4b97      	ldr	r3, [pc, #604]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]

							if(currCounter > 31)
 8002b5a:	4b96      	ldr	r3, [pc, #600]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b1f      	cmp	r3, #31
 8002b60:	dd06      	ble.n	8002b70 <StartOLED_RTC+0xa4c>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8002b62:	4b93      	ldr	r3, [pc, #588]	; (8002db0 <StartOLED_RTC+0xc8c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002b6a:	4b92      	ldr	r3, [pc, #584]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 1)
 8002b70:	4b90      	ldr	r3, [pc, #576]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	dc06      	bgt.n	8002b86 <StartOLED_RTC+0xa62>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8002b78:	4b8d      	ldr	r3, [pc, #564]	; (8002db0 <StartOLED_RTC+0xc8c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002b80:	4b8c      	ldr	r3, [pc, #560]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8002b86:	4b8c      	ldr	r3, [pc, #560]	; (8002db8 <StartOLED_RTC+0xc94>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	2110      	movs	r1, #16
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f001 fa0f 	bl	8003fb0 <graphics_text>
							oled_update();
 8002b92:	f001 fac1 	bl	8004118 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002b96:	4b87      	ldr	r3, [pc, #540]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9e:	4987      	ldr	r1, [pc, #540]	; (8002dbc <StartOLED_RTC+0xc98>)
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f00f f873 	bl	8011c8c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002baa:	2201      	movs	r2, #1
 8002bac:	2110      	movs	r1, #16
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f001 f9fe 	bl	8003fb0 <graphics_text>
							oled_update();
 8002bb4:	f001 fab0 	bl	8004118 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bbc:	220a      	movs	r2, #10
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f00e ff37 	bl	8011a34 <memset>
					while(klick == 5)
 8002bc6:	4b7e      	ldr	r3, [pc, #504]	; (8002dc0 <StartOLED_RTC+0xc9c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d0aa      	beq.n	8002b24 <StartOLED_RTC+0xa00>

						}
					}
					if(klick == 6)
 8002bce:	4b7c      	ldr	r3, [pc, #496]	; (8002dc0 <StartOLED_RTC+0xc9c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	f040 82ed 	bne.w	80031b2 <StartOLED_RTC+0x108e>
					{
						if((currCounter < 1) || (currCounter > 32))
 8002bd8:	4b76      	ldr	r3, [pc, #472]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	dd03      	ble.n	8002be8 <StartOLED_RTC+0xac4>
 8002be0:	4b74      	ldr	r3, [pc, #464]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	dd05      	ble.n	8002bf4 <StartOLED_RTC+0xad0>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002be8:	4b71      	ldr	r3, [pc, #452]	; (8002db0 <StartOLED_RTC+0xc8c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2201      	movs	r2, #1
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_DATE_DEFAULT, &prevCounter);
 8002bf4:	f107 030c 	add.w	r3, r7, #12
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	2004      	movs	r0, #4
 8002bfc:	f7fd fe1c 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002c00:	4b70      	ldr	r3, [pc, #448]	; (8002dc4 <StartOLED_RTC+0xca0>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	2110      	movs	r1, #16
 8002c06:	2000      	movs	r0, #0
 8002c08:	f001 f9d2 	bl	8003fb0 <graphics_text>
						oled_update();
 8002c0c:	f001 fa84 	bl	8004118 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002c10:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <StartOLED_RTC+0xca4>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	2110      	movs	r1, #16
 8002c16:	2000      	movs	r0, #0
 8002c18:	f001 f9ca 	bl	8003fb0 <graphics_text>
						oled_update();
 8002c1c:	f001 fa7c 	bl	8004118 <oled_update>

						osDelay(800);
 8002c20:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002c24:	f00b fa6e 	bl	800e104 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002c28:	4b66      	ldr	r3, [pc, #408]	; (8002dc4 <StartOLED_RTC+0xca0>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	2110      	movs	r1, #16
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f001 f9be 	bl	8003fb0 <graphics_text>
						oled_update();
 8002c34:	f001 fa70 	bl	8004118 <oled_update>

						klick = 7;
 8002c38:	4b61      	ldr	r3, [pc, #388]	; (8002dc0 <StartOLED_RTC+0xc9c>)
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	601a      	str	r2, [r3, #0]
					}

					break;
 8002c3e:	e2b8      	b.n	80031b2 <StartOLED_RTC+0x108e>

				case 7:
					// Set day of week

					graphics_text(0, 8, 1, "              ");
 8002c40:	4b62      	ldr	r3, [pc, #392]	; (8002dcc <StartOLED_RTC+0xca8>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	2108      	movs	r1, #8
 8002c46:	2000      	movs	r0, #0
 8002c48:	f001 f9b2 	bl	8003fb0 <graphics_text>
					oled_update();
 8002c4c:	f001 fa64 	bl	8004118 <oled_update>
					graphics_text(0, 8, 1, "DAY");
 8002c50:	4b5f      	ldr	r3, [pc, #380]	; (8002dd0 <StartOLED_RTC+0xcac>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	2108      	movs	r1, #8
 8002c56:	2000      	movs	r0, #0
 8002c58:	f001 f9aa 	bl	8003fb0 <graphics_text>
					oled_update();
 8002c5c:	f001 fa5c 	bl	8004118 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002c60:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <StartOLED_RTC+0xc8c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2201      	movs	r2, #1
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 7)
 8002c68:	e050      	b.n	8002d0c <StartOLED_RTC+0xbe8>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002c6a:	4b51      	ldr	r3, [pc, #324]	; (8002db0 <StartOLED_RTC+0xc8c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b50      	ldr	r3, [pc, #320]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002c74:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002c76:	4b4f      	ldr	r3, [pc, #316]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	0fda      	lsrs	r2, r3, #31
 8002c80:	4413      	add	r3, r2
 8002c82:	105b      	asrs	r3, r3, #1
 8002c84:	425b      	negs	r3, r3
 8002c86:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002c8a:	337f      	adds	r3, #127	; 0x7f
 8002c8c:	4a49      	ldr	r2, [pc, #292]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002c8e:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002c90:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d038      	beq.n	8002d0c <StartOLED_RTC+0xbe8>
						{
							prevCounter = currCounter;
 8002c9a:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]
							if(currCounter > 7)
 8002ca0:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b07      	cmp	r3, #7
 8002ca6:	dd06      	ble.n	8002cb6 <StartOLED_RTC+0xb92>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002ca8:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <StartOLED_RTC+0xc8c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2201      	movs	r2, #1
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002cb0:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 1)
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	dc06      	bgt.n	8002ccc <StartOLED_RTC+0xba8>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002cbe:	4b3c      	ldr	r3, [pc, #240]	; (8002db0 <StartOLED_RTC+0xc8c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002cc6:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <StartOLED_RTC+0xc94>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	2110      	movs	r1, #16
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f001 f96c 	bl	8003fb0 <graphics_text>
							oled_update();
 8002cd8:	f001 fa1e 	bl	8004118 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002cdc:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce4:	4935      	ldr	r1, [pc, #212]	; (8002dbc <StartOLED_RTC+0xc98>)
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f00e ffd0 	bl	8011c8c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	2110      	movs	r1, #16
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f001 f95b 	bl	8003fb0 <graphics_text>
							oled_update();
 8002cfa:	f001 fa0d 	bl	8004118 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d02:	220a      	movs	r2, #10
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f00e fe94 	bl	8011a34 <memset>
					while(klick == 7)
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <StartOLED_RTC+0xc9c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b07      	cmp	r3, #7
 8002d12:	d0aa      	beq.n	8002c6a <StartOLED_RTC+0xb46>

						}
					}
					if(klick == 8)
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <StartOLED_RTC+0xc9c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	f040 824d 	bne.w	80031b8 <StartOLED_RTC+0x1094>
					{
						if((currCounter < 1) || (currCounter > 7))
 8002d1e:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	dd03      	ble.n	8002d2e <StartOLED_RTC+0xc0a>
 8002d26:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <StartOLED_RTC+0xc90>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b07      	cmp	r3, #7
 8002d2c:	dd05      	ble.n	8002d3a <StartOLED_RTC+0xc16>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <StartOLED_RTC+0xc8c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2201      	movs	r2, #1
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &prevCounter);
 8002d3a:	f107 030c 	add.w	r3, r7, #12
 8002d3e:	4619      	mov	r1, r3
 8002d40:	2003      	movs	r0, #3
 8002d42:	f7fd fd79 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002d46:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <StartOLED_RTC+0xca0>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	2110      	movs	r1, #16
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f001 f92f 	bl	8003fb0 <graphics_text>
						oled_update();
 8002d52:	f001 f9e1 	bl	8004118 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <StartOLED_RTC+0xca4>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	2110      	movs	r1, #16
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f001 f927 	bl	8003fb0 <graphics_text>
						oled_update();
 8002d62:	f001 f9d9 	bl	8004118 <oled_update>

						osDelay(800);
 8002d66:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002d6a:	f00b f9cb 	bl	800e104 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <StartOLED_RTC+0xca0>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	2110      	movs	r1, #16
 8002d74:	2000      	movs	r0, #0
 8002d76:	f001 f91b 	bl	8003fb0 <graphics_text>
						oled_update();
 8002d7a:	f001 f9cd 	bl	8004118 <oled_update>

						klick = 9;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <StartOLED_RTC+0xc9c>)
 8002d80:	2209      	movs	r2, #9
 8002d82:	601a      	str	r2, [r3, #0]
					}
					break;
 8002d84:	e218      	b.n	80031b8 <StartOLED_RTC+0x1094>

				case 9:
					// Set hour

					graphics_text(0, 8, 1, "              ");
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <StartOLED_RTC+0xca8>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	2108      	movs	r1, #8
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f001 f90f 	bl	8003fb0 <graphics_text>
					oled_update();
 8002d92:	f001 f9c1 	bl	8004118 <oled_update>
					graphics_text(0, 8, 1, "HOUR");
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <StartOLED_RTC+0xcb0>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	2108      	movs	r1, #8
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f001 f907 	bl	8003fb0 <graphics_text>
					oled_update();
 8002da2:	f001 f9b9 	bl	8004118 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002da6:	4b02      	ldr	r3, [pc, #8]	; (8002db0 <StartOLED_RTC+0xc8c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2200      	movs	r2, #0
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 9)
 8002dae:	e08d      	b.n	8002ecc <StartOLED_RTC+0xda8>
 8002db0:	20004c14 	.word	0x20004c14
 8002db4:	200000d8 	.word	0x200000d8
 8002db8:	08012850 	.word	0x08012850
 8002dbc:	080127e8 	.word	0x080127e8
 8002dc0:	200000dc 	.word	0x200000dc
 8002dc4:	0801285c 	.word	0x0801285c
 8002dc8:	08012870 	.word	0x08012870
 8002dcc:	08012884 	.word	0x08012884
 8002dd0:	0801289c 	.word	0x0801289c
 8002dd4:	080128a0 	.word	0x080128a0
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002dd8:	4b93      	ldr	r3, [pc, #588]	; (8003028 <StartOLED_RTC+0xf04>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b92      	ldr	r3, [pc, #584]	; (800302c <StartOLED_RTC+0xf08>)
 8002de2:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002de4:	4b91      	ldr	r3, [pc, #580]	; (800302c <StartOLED_RTC+0xf08>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	0fda      	lsrs	r2, r3, #31
 8002dee:	4413      	add	r3, r2
 8002df0:	105b      	asrs	r3, r3, #1
 8002df2:	425b      	negs	r3, r3
 8002df4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002df8:	337f      	adds	r3, #127	; 0x7f
 8002dfa:	4a8c      	ldr	r2, [pc, #560]	; (800302c <StartOLED_RTC+0xf08>)
 8002dfc:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002dfe:	4b8b      	ldr	r3, [pc, #556]	; (800302c <StartOLED_RTC+0xf08>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d038      	beq.n	8002e7a <StartOLED_RTC+0xd56>
						{
							prevCounter = currCounter;
 8002e08:	4b88      	ldr	r3, [pc, #544]	; (800302c <StartOLED_RTC+0xf08>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]
							if(currCounter > 23)
 8002e0e:	4b87      	ldr	r3, [pc, #540]	; (800302c <StartOLED_RTC+0xf08>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b17      	cmp	r3, #23
 8002e14:	dd06      	ble.n	8002e24 <StartOLED_RTC+0xd00>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002e16:	4b84      	ldr	r3, [pc, #528]	; (8003028 <StartOLED_RTC+0xf04>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8002e1e:	4b83      	ldr	r3, [pc, #524]	; (800302c <StartOLED_RTC+0xf08>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 8002e24:	4b81      	ldr	r3, [pc, #516]	; (800302c <StartOLED_RTC+0xf08>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	da06      	bge.n	8002e3a <StartOLED_RTC+0xd16>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002e2c:	4b7e      	ldr	r3, [pc, #504]	; (8003028 <StartOLED_RTC+0xf04>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2200      	movs	r2, #0
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8002e34:	4b7d      	ldr	r3, [pc, #500]	; (800302c <StartOLED_RTC+0xf08>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8002e3a:	4b7d      	ldr	r3, [pc, #500]	; (8003030 <StartOLED_RTC+0xf0c>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	2110      	movs	r1, #16
 8002e40:	2000      	movs	r0, #0
 8002e42:	f001 f8b5 	bl	8003fb0 <graphics_text>
							oled_update();
 8002e46:	f001 f967 	bl	8004118 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002e4a:	4b78      	ldr	r3, [pc, #480]	; (800302c <StartOLED_RTC+0xf08>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e52:	4978      	ldr	r1, [pc, #480]	; (8003034 <StartOLED_RTC+0xf10>)
 8002e54:	4618      	mov	r0, r3
 8002e56:	f00e ff19 	bl	8011c8c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e5e:	2201      	movs	r2, #1
 8002e60:	2110      	movs	r1, #16
 8002e62:	2000      	movs	r0, #0
 8002e64:	f001 f8a4 	bl	8003fb0 <graphics_text>
							oled_update();
 8002e68:	f001 f956 	bl	8004118 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e70:	220a      	movs	r2, #10
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f00e fddd 	bl	8011a34 <memset>
						}

						if(klick == 10)
 8002e7a:	4b6f      	ldr	r3, [pc, #444]	; (8003038 <StartOLED_RTC+0xf14>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b0a      	cmp	r3, #10
 8002e80:	d124      	bne.n	8002ecc <StartOLED_RTC+0xda8>
						{
							// write data
							ds3231_set(DS3231_REGISTER_HOURS_DEFAULT, &prevCounter);
 8002e82:	f107 030c 	add.w	r3, r7, #12
 8002e86:	4619      	mov	r1, r3
 8002e88:	2002      	movs	r0, #2
 8002e8a:	f7fd fcd5 	bl	8000838 <ds3231_set>

							graphics_text(0, 16, 1, "                 ");
 8002e8e:	4b6b      	ldr	r3, [pc, #428]	; (800303c <StartOLED_RTC+0xf18>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	2110      	movs	r1, #16
 8002e94:	2000      	movs	r0, #0
 8002e96:	f001 f88b 	bl	8003fb0 <graphics_text>
							oled_update();
 8002e9a:	f001 f93d 	bl	8004118 <oled_update>

							graphics_text(0, 16, 1, "installed");
 8002e9e:	4b68      	ldr	r3, [pc, #416]	; (8003040 <StartOLED_RTC+0xf1c>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	2110      	movs	r1, #16
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f001 f883 	bl	8003fb0 <graphics_text>
							oled_update();
 8002eaa:	f001 f935 	bl	8004118 <oled_update>

							osDelay(800);
 8002eae:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002eb2:	f00b f927 	bl	800e104 <osDelay>

							graphics_text(0, 16, 1, "                 ");
 8002eb6:	4b61      	ldr	r3, [pc, #388]	; (800303c <StartOLED_RTC+0xf18>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	2110      	movs	r1, #16
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f001 f877 	bl	8003fb0 <graphics_text>
							oled_update();
 8002ec2:	f001 f929 	bl	8004118 <oled_update>

							klick = 11;
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <StartOLED_RTC+0xf14>)
 8002ec8:	220b      	movs	r2, #11
 8002eca:	601a      	str	r2, [r3, #0]
					while(klick == 9)
 8002ecc:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <StartOLED_RTC+0xf14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b09      	cmp	r3, #9
 8002ed2:	d081      	beq.n	8002dd8 <StartOLED_RTC+0xcb4>
						}
					}
					break;
 8002ed4:	e177      	b.n	80031c6 <StartOLED_RTC+0x10a2>

				case 11:
					// Set minutes

					graphics_text(0, 8, 1, "              ");
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <StartOLED_RTC+0xf20>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2108      	movs	r1, #8
 8002edc:	2000      	movs	r0, #0
 8002ede:	f001 f867 	bl	8003fb0 <graphics_text>
					oled_update();
 8002ee2:	f001 f919 	bl	8004118 <oled_update>
					graphics_text(0, 8, 1, "MINUTES");
 8002ee6:	4b58      	ldr	r3, [pc, #352]	; (8003048 <StartOLED_RTC+0xf24>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	2108      	movs	r1, #8
 8002eec:	2000      	movs	r0, #0
 8002eee:	f001 f85f 	bl	8003fb0 <graphics_text>
					oled_update();
 8002ef2:	f001 f911 	bl	8004118 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002ef6:	4b4c      	ldr	r3, [pc, #304]	; (8003028 <StartOLED_RTC+0xf04>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2200      	movs	r2, #0
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 11)
 8002efe:	e04e      	b.n	8002f9e <StartOLED_RTC+0xe7a>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002f00:	4b49      	ldr	r3, [pc, #292]	; (8003028 <StartOLED_RTC+0xf04>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b48      	ldr	r3, [pc, #288]	; (800302c <StartOLED_RTC+0xf08>)
 8002f0a:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002f0c:	4b47      	ldr	r3, [pc, #284]	; (800302c <StartOLED_RTC+0xf08>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	0fda      	lsrs	r2, r3, #31
 8002f16:	4413      	add	r3, r2
 8002f18:	105b      	asrs	r3, r3, #1
 8002f1a:	425b      	negs	r3, r3
 8002f1c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002f20:	337f      	adds	r3, #127	; 0x7f
 8002f22:	4a42      	ldr	r2, [pc, #264]	; (800302c <StartOLED_RTC+0xf08>)
 8002f24:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002f26:	4b41      	ldr	r3, [pc, #260]	; (800302c <StartOLED_RTC+0xf08>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d036      	beq.n	8002f9e <StartOLED_RTC+0xe7a>
						{
							prevCounter = currCounter;
 8002f30:	4b3e      	ldr	r3, [pc, #248]	; (800302c <StartOLED_RTC+0xf08>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60fb      	str	r3, [r7, #12]
							if(currCounter > 59)
 8002f36:	4b3d      	ldr	r3, [pc, #244]	; (800302c <StartOLED_RTC+0xf08>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b3b      	cmp	r3, #59	; 0x3b
 8002f3c:	dd05      	ble.n	8002f4a <StartOLED_RTC+0xe26>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	; (8003028 <StartOLED_RTC+0xf04>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2200      	movs	r2, #0
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24
								prevCounter = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
							}
							if(currCounter < 0)
 8002f4a:	4b38      	ldr	r3, [pc, #224]	; (800302c <StartOLED_RTC+0xf08>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da05      	bge.n	8002f5e <StartOLED_RTC+0xe3a>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002f52:	4b35      	ldr	r3, [pc, #212]	; (8003028 <StartOLED_RTC+0xf04>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
								prevCounter = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
							}

							graphics_text(0, 16, 1, "           ");
 8002f5e:	4b34      	ldr	r3, [pc, #208]	; (8003030 <StartOLED_RTC+0xf0c>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	2110      	movs	r1, #16
 8002f64:	2000      	movs	r0, #0
 8002f66:	f001 f823 	bl	8003fb0 <graphics_text>
							oled_update();
 8002f6a:	f001 f8d5 	bl	8004118 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002f6e:	4b2f      	ldr	r3, [pc, #188]	; (800302c <StartOLED_RTC+0xf08>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f76:	492f      	ldr	r1, [pc, #188]	; (8003034 <StartOLED_RTC+0xf10>)
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f00e fe87 	bl	8011c8c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f82:	2201      	movs	r2, #1
 8002f84:	2110      	movs	r1, #16
 8002f86:	2000      	movs	r0, #0
 8002f88:	f001 f812 	bl	8003fb0 <graphics_text>
							oled_update();
 8002f8c:	f001 f8c4 	bl	8004118 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f94:	220a      	movs	r2, #10
 8002f96:	2100      	movs	r1, #0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f00e fd4b 	bl	8011a34 <memset>
					while(klick == 11)
 8002f9e:	4b26      	ldr	r3, [pc, #152]	; (8003038 <StartOLED_RTC+0xf14>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b0b      	cmp	r3, #11
 8002fa4:	d0ac      	beq.n	8002f00 <StartOLED_RTC+0xddc>
						}
					}
					if(klick == 12)
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <StartOLED_RTC+0xf14>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	f040 8107 	bne.w	80031be <StartOLED_RTC+0x109a>
					{
						// write data
						ds3231_set(DS3231_REGISTER_MINUTES_DEFAULT, &prevCounter);
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f7fd fc3e 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <StartOLED_RTC+0xf18>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	2110      	movs	r1, #16
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f000 fff4 	bl	8003fb0 <graphics_text>
						oled_update();
 8002fc8:	f001 f8a6 	bl	8004118 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <StartOLED_RTC+0xf1c>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	2110      	movs	r1, #16
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f000 ffec 	bl	8003fb0 <graphics_text>
						oled_update();
 8002fd8:	f001 f89e 	bl	8004118 <oled_update>

						osDelay(800);
 8002fdc:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002fe0:	f00b f890 	bl	800e104 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002fe4:	4b15      	ldr	r3, [pc, #84]	; (800303c <StartOLED_RTC+0xf18>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	2110      	movs	r1, #16
 8002fea:	2000      	movs	r0, #0
 8002fec:	f000 ffe0 	bl	8003fb0 <graphics_text>
						oled_update();
 8002ff0:	f001 f892 	bl	8004118 <oled_update>

						klick = 13;
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <StartOLED_RTC+0xf14>)
 8002ff6:	220d      	movs	r2, #13
 8002ff8:	601a      	str	r2, [r3, #0]
					}
					break;
 8002ffa:	e0e0      	b.n	80031be <StartOLED_RTC+0x109a>

				case 13:
					// Set minutes

					graphics_text(0, 8, 1, "              ");
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <StartOLED_RTC+0xf20>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	2108      	movs	r1, #8
 8003002:	2000      	movs	r0, #0
 8003004:	f000 ffd4 	bl	8003fb0 <graphics_text>
					oled_update();
 8003008:	f001 f886 	bl	8004118 <oled_update>
					graphics_text(0, 8, 1, "SECONDS");
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <StartOLED_RTC+0xf28>)
 800300e:	2201      	movs	r2, #1
 8003010:	2108      	movs	r1, #8
 8003012:	2000      	movs	r0, #0
 8003014:	f000 ffcc 	bl	8003fb0 <graphics_text>
					oled_update();
 8003018:	f001 f87e 	bl	8004118 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <StartOLED_RTC+0xf04>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2200      	movs	r2, #0
 8003022:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 13)
 8003024:	e065      	b.n	80030f2 <StartOLED_RTC+0xfce>
 8003026:	bf00      	nop
 8003028:	20004c14 	.word	0x20004c14
 800302c:	200000d8 	.word	0x200000d8
 8003030:	08012850 	.word	0x08012850
 8003034:	080127e8 	.word	0x080127e8
 8003038:	200000dc 	.word	0x200000dc
 800303c:	0801285c 	.word	0x0801285c
 8003040:	08012870 	.word	0x08012870
 8003044:	08012884 	.word	0x08012884
 8003048:	080128a8 	.word	0x080128a8
 800304c:	080128b0 	.word	0x080128b0
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8003050:	4b5e      	ldr	r3, [pc, #376]	; (80031cc <StartOLED_RTC+0x10a8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	461a      	mov	r2, r3
 8003058:	4b5d      	ldr	r3, [pc, #372]	; (80031d0 <StartOLED_RTC+0x10ac>)
 800305a:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 800305c:	4b5c      	ldr	r3, [pc, #368]	; (80031d0 <StartOLED_RTC+0x10ac>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3b01      	subs	r3, #1
 8003062:	b29b      	uxth	r3, r3
 8003064:	0fda      	lsrs	r2, r3, #31
 8003066:	4413      	add	r3, r2
 8003068:	105b      	asrs	r3, r3, #1
 800306a:	425b      	negs	r3, r3
 800306c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003070:	337f      	adds	r3, #127	; 0x7f
 8003072:	4a57      	ldr	r2, [pc, #348]	; (80031d0 <StartOLED_RTC+0x10ac>)
 8003074:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8003076:	4b56      	ldr	r3, [pc, #344]	; (80031d0 <StartOLED_RTC+0x10ac>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	429a      	cmp	r2, r3
 800307e:	d038      	beq.n	80030f2 <StartOLED_RTC+0xfce>
						{
							prevCounter = currCounter;
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <StartOLED_RTC+0x10ac>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
							if(currCounter > 59)
 8003086:	4b52      	ldr	r3, [pc, #328]	; (80031d0 <StartOLED_RTC+0x10ac>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b3b      	cmp	r3, #59	; 0x3b
 800308c:	dd06      	ble.n	800309c <StartOLED_RTC+0xf78>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 800308e:	4b4f      	ldr	r3, [pc, #316]	; (80031cc <StartOLED_RTC+0x10a8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8003096:	4b4e      	ldr	r3, [pc, #312]	; (80031d0 <StartOLED_RTC+0x10ac>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 800309c:	4b4c      	ldr	r3, [pc, #304]	; (80031d0 <StartOLED_RTC+0x10ac>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	da06      	bge.n	80030b2 <StartOLED_RTC+0xf8e>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 80030a4:	4b49      	ldr	r3, [pc, #292]	; (80031cc <StartOLED_RTC+0x10a8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2200      	movs	r2, #0
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 80030ac:	4b48      	ldr	r3, [pc, #288]	; (80031d0 <StartOLED_RTC+0x10ac>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
							}
							graphics_text(0, 16, 1, "           ");
 80030b2:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <StartOLED_RTC+0x10b0>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	2110      	movs	r1, #16
 80030b8:	2000      	movs	r0, #0
 80030ba:	f000 ff79 	bl	8003fb0 <graphics_text>
							oled_update();
 80030be:	f001 f82b 	bl	8004118 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 80030c2:	4b43      	ldr	r3, [pc, #268]	; (80031d0 <StartOLED_RTC+0x10ac>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ca:	4943      	ldr	r1, [pc, #268]	; (80031d8 <StartOLED_RTC+0x10b4>)
 80030cc:	4618      	mov	r0, r3
 80030ce:	f00e fddd 	bl	8011c8c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 80030d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d6:	2201      	movs	r2, #1
 80030d8:	2110      	movs	r1, #16
 80030da:	2000      	movs	r0, #0
 80030dc:	f000 ff68 	bl	8003fb0 <graphics_text>
							oled_update();
 80030e0:	f001 f81a 	bl	8004118 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 80030e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e8:	220a      	movs	r2, #10
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f00e fca1 	bl	8011a34 <memset>
					while(klick == 13)
 80030f2:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <StartOLED_RTC+0x10b8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b0d      	cmp	r3, #13
 80030f8:	d0aa      	beq.n	8003050 <StartOLED_RTC+0xf2c>
						}
					}
					if(klick == 14)
 80030fa:	4b38      	ldr	r3, [pc, #224]	; (80031dc <StartOLED_RTC+0x10b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b0e      	cmp	r3, #14
 8003100:	d160      	bne.n	80031c4 <StartOLED_RTC+0x10a0>
					{
						// write data
						ds3231_set(DS3231_REGISTER_SECONDS_DEFAULT, &prevCounter);
 8003102:	f107 030c 	add.w	r3, r7, #12
 8003106:	4619      	mov	r1, r3
 8003108:	2000      	movs	r0, #0
 800310a:	f7fd fb95 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 800310e:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <StartOLED_RTC+0x10bc>)
 8003110:	2201      	movs	r2, #1
 8003112:	2110      	movs	r1, #16
 8003114:	2000      	movs	r0, #0
 8003116:	f000 ff4b 	bl	8003fb0 <graphics_text>
						oled_update();
 800311a:	f000 fffd 	bl	8004118 <oled_update>

						graphics_text(0, 16, 1, "installed");
 800311e:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <StartOLED_RTC+0x10c0>)
 8003120:	2201      	movs	r2, #1
 8003122:	2110      	movs	r1, #16
 8003124:	2000      	movs	r0, #0
 8003126:	f000 ff43 	bl	8003fb0 <graphics_text>
						oled_update();
 800312a:	f000 fff5 	bl	8004118 <oled_update>

						osDelay(800);
 800312e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003132:	f00a ffe7 	bl	800e104 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8003136:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <StartOLED_RTC+0x10bc>)
 8003138:	2201      	movs	r2, #1
 800313a:	2110      	movs	r1, #16
 800313c:	2000      	movs	r0, #0
 800313e:	f000 ff37 	bl	8003fb0 <graphics_text>
						oled_update();
 8003142:	f000 ffe9 	bl	8004118 <oled_update>

						klick = 15;
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <StartOLED_RTC+0x10b8>)
 8003148:	220f      	movs	r2, #15
 800314a:	601a      	str	r2, [r3, #0]
					}
					break;
 800314c:	e03a      	b.n	80031c4 <StartOLED_RTC+0x10a0>

				case 15:		// EXIT

					osDelay(500);
 800314e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003152:	f00a ffd7 	bl	800e104 <osDelay>
					clear();
 8003156:	f000 fd77 	bl	8003c48 <clear>
					oled_update();
 800315a:	f000 ffdd 	bl	8004118 <oled_update>

					for(uint8_t q = 0; q < 3; q ++)
 800315e:	2300      	movs	r3, #0
 8003160:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8003164:	e017      	b.n	8003196 <StartOLED_RTC+0x1072>
					{
						graphics_text(20, 16, 2, "THE TIME IS SET");
 8003166:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <StartOLED_RTC+0x10c4>)
 8003168:	2202      	movs	r2, #2
 800316a:	2110      	movs	r1, #16
 800316c:	2014      	movs	r0, #20
 800316e:	f000 ff1f 	bl	8003fb0 <graphics_text>
						oled_update();
 8003172:	f000 ffd1 	bl	8004118 <oled_update>
						osDelay(400);
 8003176:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800317a:	f00a ffc3 	bl	800e104 <osDelay>

						clear();
 800317e:	f000 fd63 	bl	8003c48 <clear>
						oled_update();
 8003182:	f000 ffc9 	bl	8004118 <oled_update>
						osDelay(200);
 8003186:	20c8      	movs	r0, #200	; 0xc8
 8003188:	f00a ffbc 	bl	800e104 <osDelay>
					for(uint8_t q = 0; q < 3; q ++)
 800318c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003190:	3301      	adds	r3, #1
 8003192:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8003196:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800319a:	2b02      	cmp	r3, #2
 800319c:	d9e3      	bls.n	8003166 <StartOLED_RTC+0x1042>
					}
					klick = 0;					// Return to show time
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <StartOLED_RTC+0x10b8>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

					break;
 80031a4:	e00f      	b.n	80031c6 <StartOLED_RTC+0x10a2>
					break;
 80031a6:	bf00      	nop
 80031a8:	f7ff b801 	b.w	80021ae <StartOLED_RTC+0x8a>
					break;
 80031ac:	bf00      	nop
 80031ae:	f7fe bffe 	b.w	80021ae <StartOLED_RTC+0x8a>
					break;
 80031b2:	bf00      	nop
 80031b4:	f7fe bffb 	b.w	80021ae <StartOLED_RTC+0x8a>
					break;
 80031b8:	bf00      	nop
 80031ba:	f7fe bff8 	b.w	80021ae <StartOLED_RTC+0x8a>
					break;
 80031be:	bf00      	nop
 80031c0:	f7fe bff5 	b.w	80021ae <StartOLED_RTC+0x8a>
					break;
 80031c4:	bf00      	nop
			switch (klick)
 80031c6:	f7fe bff2 	b.w	80021ae <StartOLED_RTC+0x8a>
 80031ca:	bf00      	nop
 80031cc:	20004c14 	.word	0x20004c14
 80031d0:	200000d8 	.word	0x200000d8
 80031d4:	08012850 	.word	0x08012850
 80031d8:	080127e8 	.word	0x080127e8
 80031dc:	200000dc 	.word	0x200000dc
 80031e0:	0801285c 	.word	0x0801285c
 80031e4:	08012870 	.word	0x08012870
 80031e8:	080128b8 	.word	0x080128b8

080031ec <start_test_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_test_task */
void start_test_task(void *argument)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_test_task */
  /* Infinite loop */

		const char* test_print = "===== TEST MENU ===\n\r"
 80031f4:	4b49      	ldr	r3, [pc, #292]	; (800331c <start_test_task+0x130>)
 80031f6:	61bb      	str	r3, [r7, #24]
								 "BLUE LED OFF----> 2\n\r"
								 "menu 3      ----> 3\n\r"
								 "EXIT     ----> exit\n\r"
								 "Enter your choice here : \n\r";

		const char* led_on_msg = "BLUE LED ON\n\r";
 80031f8:	4b49      	ldr	r3, [pc, #292]	; (8003320 <start_test_task+0x134>)
 80031fa:	617b      	str	r3, [r7, #20]
		const char* led_off_msg = "BLUE LED OFF\n\r";
 80031fc:	4b49      	ldr	r3, [pc, #292]	; (8003324 <start_test_task+0x138>)
 80031fe:	613b      	str	r3, [r7, #16]
		const char* nothing_msg = "Nothing\n\r";
 8003200:	4b49      	ldr	r3, [pc, #292]	; (8003328 <start_test_task+0x13c>)
 8003202:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    //osDelay(1);

	  xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8003204:	f107 0208 	add.w	r2, r7, #8
 8003208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800320c:	2100      	movs	r1, #0
 800320e:	2000      	movs	r0, #0
 8003210:	f00c fe6a 	bl	800fee8 <xTaskNotifyWait>
//	  xQueueSend(print_QueueHandle, &test_print, portMAX_DELAY);

	  while(curr_state != sMainMenu)
 8003214:	e07c      	b.n	8003310 <start_test_task+0x124>
	  {
		  xQueueSend(print_QueueHandle, &test_print, portMAX_DELAY);
 8003216:	4b45      	ldr	r3, [pc, #276]	; (800332c <start_test_task+0x140>)
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	f107 0118 	add.w	r1, r7, #24
 800321e:	2300      	movs	r3, #0
 8003220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003224:	f00b fae0 	bl	800e7e8 <xQueueGenericSend>
		  xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);				// Wait  command
 8003228:	f107 0208 	add.w	r2, r7, #8
 800322c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003230:	2100      	movs	r1, #0
 8003232:	2000      	movs	r0, #0
 8003234:	f00c fe58 	bl	800fee8 <xTaskNotifyWait>
		  cmd = (command_t*) cmd_addr;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	61fb      	str	r3, [r7, #28]

		  if(cmd -> len <= 4)											    // Check input command (max input size must be less then 4)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	7a9b      	ldrb	r3, [r3, #10]
 8003240:	2b04      	cmp	r3, #4
 8003242:	d85d      	bhi.n	8003300 <start_test_task+0x114>
		  {
			// Select LED effect
			  if( ! strcmp((char*)cmd->payload, "1" ))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	493a      	ldr	r1, [pc, #232]	; (8003330 <start_test_task+0x144>)
 8003248:	4618      	mov	r0, r3
 800324a:	f7fc ffc1 	bl	80001d0 <strcmp>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10f      	bne.n	8003274 <start_test_task+0x88>
			  {
				  HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 8003254:	2201      	movs	r2, #1
 8003256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800325a:	4836      	ldr	r0, [pc, #216]	; (8003334 <start_test_task+0x148>)
 800325c:	f001 fbda 	bl	8004a14 <HAL_GPIO_WritePin>
				  xQueueSend(print_QueueHandle, &led_on_msg, portMAX_DELAY);
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <start_test_task+0x140>)
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	f107 0114 	add.w	r1, r7, #20
 8003268:	2300      	movs	r3, #0
 800326a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800326e:	f00b fabb 	bl	800e7e8 <xQueueGenericSend>
 8003272:	e04d      	b.n	8003310 <start_test_task+0x124>

			  }
			  else if(! strcmp((char*)cmd->payload, "2" ))
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	4930      	ldr	r1, [pc, #192]	; (8003338 <start_test_task+0x14c>)
 8003278:	4618      	mov	r0, r3
 800327a:	f7fc ffa9 	bl	80001d0 <strcmp>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10f      	bne.n	80032a4 <start_test_task+0xb8>
			  {
				  HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 8003284:	2200      	movs	r2, #0
 8003286:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800328a:	482a      	ldr	r0, [pc, #168]	; (8003334 <start_test_task+0x148>)
 800328c:	f001 fbc2 	bl	8004a14 <HAL_GPIO_WritePin>
				  xQueueSend(print_QueueHandle, &led_off_msg, portMAX_DELAY);
 8003290:	4b26      	ldr	r3, [pc, #152]	; (800332c <start_test_task+0x140>)
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	f107 0110 	add.w	r1, r7, #16
 8003298:	2300      	movs	r3, #0
 800329a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800329e:	f00b faa3 	bl	800e7e8 <xQueueGenericSend>
 80032a2:	e035      	b.n	8003310 <start_test_task+0x124>
			  }
			  else if(! strcmp((char*)cmd->payload, "3" ))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	4925      	ldr	r1, [pc, #148]	; (800333c <start_test_task+0x150>)
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fc ff91 	bl	80001d0 <strcmp>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <start_test_task+0xdc>
			  {
				  xQueueSend(print_QueueHandle, &nothing_msg, portMAX_DELAY);
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <start_test_task+0x140>)
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	f107 010c 	add.w	r1, r7, #12
 80032bc:	2300      	movs	r3, #0
 80032be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032c2:	f00b fa91 	bl	800e7e8 <xQueueGenericSend>
 80032c6:	e023      	b.n	8003310 <start_test_task+0x124>
			  }
			  else if(! strcmp((char*)cmd->payload, "exit" ))
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	491d      	ldr	r1, [pc, #116]	; (8003340 <start_test_task+0x154>)
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fc ff7f 	bl	80001d0 <strcmp>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <start_test_task+0x102>
			  {
				  curr_state = sMainMenu;									// Go back to the main manu
 80032d8:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <start_test_task+0x158>)
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
				  xTaskNotify(menu_taskHandle, 0, eNoAction);				// Notify menu task
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <start_test_task+0x15c>)
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	2300      	movs	r3, #0
 80032e4:	2200      	movs	r2, #0
 80032e6:	2100      	movs	r1, #0
 80032e8:	f00c fe5e 	bl	800ffa8 <xTaskGenericNotify>
 80032ec:	e010      	b.n	8003310 <start_test_task+0x124>
			  }
			  else
			  {
				  xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <start_test_task+0x140>)
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	2300      	movs	r3, #0
 80032f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032f8:	4914      	ldr	r1, [pc, #80]	; (800334c <start_test_task+0x160>)
 80032fa:	f00b fa75 	bl	800e7e8 <xQueueGenericSend>
 80032fe:	e007      	b.n	8003310 <start_test_task+0x124>
			  }

		  }
		  else
		  {
			  xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <start_test_task+0x140>)
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	2300      	movs	r3, #0
 8003306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800330a:	4910      	ldr	r1, [pc, #64]	; (800334c <start_test_task+0x160>)
 800330c:	f00b fa6c 	bl	800e7e8 <xQueueGenericSend>
	  while(curr_state != sMainMenu)
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <start_test_task+0x158>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f47f af7e 	bne.w	8003216 <start_test_task+0x2a>
	  xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800331a:	e773      	b.n	8003204 <start_test_task+0x18>
 800331c:	080128c8 	.word	0x080128c8
 8003320:	08012950 	.word	0x08012950
 8003324:	08012960 	.word	0x08012960
 8003328:	08012970 	.word	0x08012970
 800332c:	20004c60 	.word	0x20004c60
 8003330:	0801297c 	.word	0x0801297c
 8003334:	40020c00 	.word	0x40020c00
 8003338:	08012980 	.word	0x08012980
 800333c:	08012984 	.word	0x08012984
 8003340:	08012988 	.word	0x08012988
 8003344:	200000d7 	.word	0x200000d7
 8003348:	20004d04 	.word	0x20004d04
 800334c:	20000000 	.word	0x20000000

08003350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a04      	ldr	r2, [pc, #16]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003362:	f000 ffeb 	bl	800433c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40001000 	.word	0x40001000

08003374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003378:	b672      	cpsid	i
}
 800337a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800337c:	e7fe      	b.n	800337c <Error_Handler+0x8>
	...

08003380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_MspInit+0x54>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <HAL_MspInit+0x54>)
 8003390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003394:	6453      	str	r3, [r2, #68]	; 0x44
 8003396:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <HAL_MspInit+0x54>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_MspInit+0x54>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <HAL_MspInit+0x54>)
 80033ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <HAL_MspInit+0x54>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033be:	2200      	movs	r2, #0
 80033c0:	210f      	movs	r1, #15
 80033c2:	f06f 0001 	mvn.w	r0, #1
 80033c6:	f001 f8b5 	bl	8004534 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800

080033d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08c      	sub	sp, #48	; 0x30
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e0:	f107 031c 	add.w	r3, r7, #28
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a42      	ldr	r2, [pc, #264]	; (8003500 <HAL_I2C_MspInit+0x128>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d12d      	bne.n	8003456 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a40      	ldr	r2, [pc, #256]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003416:	f44f 7310 	mov.w	r3, #576	; 0x240
 800341a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800341c:	2312      	movs	r3, #18
 800341e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003420:	2301      	movs	r3, #1
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003428:	2304      	movs	r3, #4
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342c:	f107 031c 	add.w	r3, r7, #28
 8003430:	4619      	mov	r1, r3
 8003432:	4835      	ldr	r0, [pc, #212]	; (8003508 <HAL_I2C_MspInit+0x130>)
 8003434:	f001 f93a 	bl	80046ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	4b31      	ldr	r3, [pc, #196]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	4a30      	ldr	r2, [pc, #192]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 8003442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003446:	6413      	str	r3, [r2, #64]	; 0x40
 8003448:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003454:	e050      	b.n	80034f8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a2c      	ldr	r2, [pc, #176]	; (800350c <HAL_I2C_MspInit+0x134>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d14b      	bne.n	80034f8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003460:	2300      	movs	r3, #0
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	4b27      	ldr	r3, [pc, #156]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	4a26      	ldr	r2, [pc, #152]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 800346a:	f043 0304 	orr.w	r3, r3, #4
 800346e:	6313      	str	r3, [r2, #48]	; 0x30
 8003470:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	4b20      	ldr	r3, [pc, #128]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6313      	str	r3, [r2, #48]	; 0x30
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800349c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800349e:	2312      	movs	r3, #18
 80034a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a6:	2303      	movs	r3, #3
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80034aa:	2304      	movs	r3, #4
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ae:	f107 031c 	add.w	r3, r7, #28
 80034b2:	4619      	mov	r1, r3
 80034b4:	4816      	ldr	r0, [pc, #88]	; (8003510 <HAL_I2C_MspInit+0x138>)
 80034b6:	f001 f8f9 	bl	80046ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034c0:	2312      	movs	r3, #18
 80034c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c8:	2303      	movs	r3, #3
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80034cc:	2304      	movs	r3, #4
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d0:	f107 031c 	add.w	r3, r7, #28
 80034d4:	4619      	mov	r1, r3
 80034d6:	480f      	ldr	r0, [pc, #60]	; (8003514 <HAL_I2C_MspInit+0x13c>)
 80034d8:	f001 f8e8 	bl	80046ac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80034dc:	2300      	movs	r3, #0
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	4a07      	ldr	r2, [pc, #28]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 80034e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034ea:	6413      	str	r3, [r2, #64]	; 0x40
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_I2C_MspInit+0x12c>)
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]
}
 80034f8:	bf00      	nop
 80034fa:	3730      	adds	r7, #48	; 0x30
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40005400 	.word	0x40005400
 8003504:	40023800 	.word	0x40023800
 8003508:	40020400 	.word	0x40020400
 800350c:	40005c00 	.word	0x40005c00
 8003510:	40020800 	.word	0x40020800
 8003514:	40020000 	.word	0x40020000

08003518 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08e      	sub	sp, #56	; 0x38
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a31      	ldr	r2, [pc, #196]	; (8003608 <HAL_I2S_MspInit+0xf0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d15a      	bne.n	80035fe <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003548:	2301      	movs	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800354c:	23c0      	movs	r3, #192	; 0xc0
 800354e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003550:	2302      	movs	r3, #2
 8003552:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4618      	mov	r0, r3
 800355a:	f005 fa8f 	bl	8008a7c <HAL_RCCEx_PeriphCLKConfig>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8003564:	f7ff ff06 	bl	8003374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	4b27      	ldr	r3, [pc, #156]	; (800360c <HAL_I2S_MspInit+0xf4>)
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	4a26      	ldr	r2, [pc, #152]	; (800360c <HAL_I2S_MspInit+0xf4>)
 8003572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003576:	6413      	str	r3, [r2, #64]	; 0x40
 8003578:	4b24      	ldr	r3, [pc, #144]	; (800360c <HAL_I2S_MspInit+0xf4>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_I2S_MspInit+0xf4>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	4a1f      	ldr	r2, [pc, #124]	; (800360c <HAL_I2S_MspInit+0xf4>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6313      	str	r3, [r2, #48]	; 0x30
 8003594:	4b1d      	ldr	r3, [pc, #116]	; (800360c <HAL_I2S_MspInit+0xf4>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a0:	2300      	movs	r3, #0
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_I2S_MspInit+0xf4>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	4a18      	ldr	r2, [pc, #96]	; (800360c <HAL_I2S_MspInit+0xf4>)
 80035aa:	f043 0304 	orr.w	r3, r3, #4
 80035ae:	6313      	str	r3, [r2, #48]	; 0x30
 80035b0:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_I2S_MspInit+0xf4>)
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80035bc:	2310      	movs	r3, #16
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c0:	2302      	movs	r3, #2
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c8:	2300      	movs	r3, #0
 80035ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035cc:	2306      	movs	r3, #6
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80035d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d4:	4619      	mov	r1, r3
 80035d6:	480e      	ldr	r0, [pc, #56]	; (8003610 <HAL_I2S_MspInit+0xf8>)
 80035d8:	f001 f868 	bl	80046ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80035dc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ea:	2300      	movs	r3, #0
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035ee:	2306      	movs	r3, #6
 80035f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f6:	4619      	mov	r1, r3
 80035f8:	4806      	ldr	r0, [pc, #24]	; (8003614 <HAL_I2S_MspInit+0xfc>)
 80035fa:	f001 f857 	bl	80046ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80035fe:	bf00      	nop
 8003600:	3738      	adds	r7, #56	; 0x38
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40003c00 	.word	0x40003c00
 800360c:	40023800 	.word	0x40023800
 8003610:	40020000 	.word	0x40020000
 8003614:	40020800 	.word	0x40020800

08003618 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003620:	f107 0308 	add.w	r3, r7, #8
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <HAL_RTC_MspInit+0x4c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d111      	bne.n	800365c <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003638:	2302      	movs	r3, #2
 800363a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800363c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003640:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003642:	f107 0308 	add.w	r3, r7, #8
 8003646:	4618      	mov	r0, r3
 8003648:	f005 fa18 	bl	8008a7c <HAL_RCCEx_PeriphCLKConfig>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003652:	f7ff fe8f 	bl	8003374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003656:	4b04      	ldr	r3, [pc, #16]	; (8003668 <HAL_RTC_MspInit+0x50>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800365c:	bf00      	nop
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40002800 	.word	0x40002800
 8003668:	42470e3c 	.word	0x42470e3c

0800366c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <HAL_SPI_MspInit+0x84>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d12b      	bne.n	80036e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	4a17      	ldr	r2, [pc, #92]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 8003698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800369c:	6453      	str	r3, [r2, #68]	; 0x44
 800369e:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	4a10      	ldr	r2, [pc, #64]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80036c6:	23e0      	movs	r3, #224	; 0xe0
 80036c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d2:	2300      	movs	r3, #0
 80036d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036d6:	2305      	movs	r3, #5
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f107 0314 	add.w	r3, r7, #20
 80036de:	4619      	mov	r1, r3
 80036e0:	4805      	ldr	r0, [pc, #20]	; (80036f8 <HAL_SPI_MspInit+0x8c>)
 80036e2:	f000 ffe3 	bl	80046ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80036e6:	bf00      	nop
 80036e8:	3728      	adds	r7, #40	; 0x28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40013000 	.word	0x40013000
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40020000 	.word	0x40020000

080036fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <HAL_TIM_Encoder_MspInit+0x94>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d134      	bne.n	8003788 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <HAL_TIM_Encoder_MspInit+0x98>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_TIM_Encoder_MspInit+0x98>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6453      	str	r3, [r2, #68]	; 0x44
 800372e:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_TIM_Encoder_MspInit+0x98>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	4b15      	ldr	r3, [pc, #84]	; (8003794 <HAL_TIM_Encoder_MspInit+0x98>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <HAL_TIM_Encoder_MspInit+0x98>)
 8003744:	f043 0310 	orr.w	r3, r3, #16
 8003748:	6313      	str	r3, [r2, #48]	; 0x30
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_TIM_Encoder_MspInit+0x98>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003756:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800375a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003764:	2300      	movs	r3, #0
 8003766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003768:	2301      	movs	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	4619      	mov	r1, r3
 8003772:	4809      	ldr	r0, [pc, #36]	; (8003798 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003774:	f000 ff9a 	bl	80046ac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003778:	2200      	movs	r2, #0
 800377a:	2105      	movs	r1, #5
 800377c:	2019      	movs	r0, #25
 800377e:	f000 fed9 	bl	8004534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003782:	2019      	movs	r0, #25
 8003784:	f000 fef2 	bl	800456c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003788:	bf00      	nop
 800378a:	3728      	adds	r7, #40	; 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40010000 	.word	0x40010000
 8003794:	40023800 	.word	0x40023800
 8003798:	40021000 	.word	0x40021000

0800379c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <HAL_TIM_Base_MspInit+0x48>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d115      	bne.n	80037da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <HAL_TIM_Base_MspInit+0x4c>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a0c      	ldr	r2, [pc, #48]	; (80037e8 <HAL_TIM_Base_MspInit+0x4c>)
 80037b8:	f043 0320 	orr.w	r3, r3, #32
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_TIM_Base_MspInit+0x4c>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2105      	movs	r1, #5
 80037ce:	2037      	movs	r0, #55	; 0x37
 80037d0:	f000 feb0 	bl	8004534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80037d4:	2037      	movs	r0, #55	; 0x37
 80037d6:	f000 fec9 	bl	800456c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40001400 	.word	0x40001400
 80037e8:	40023800 	.word	0x40023800

080037ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0314 	add.w	r3, r7, #20
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <HAL_UART_MspInit+0x94>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d133      	bne.n	8003876 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <HAL_UART_MspInit+0x98>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	4a1b      	ldr	r2, [pc, #108]	; (8003884 <HAL_UART_MspInit+0x98>)
 8003818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381c:	6413      	str	r3, [r2, #64]	; 0x40
 800381e:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_UART_MspInit+0x98>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <HAL_UART_MspInit+0x98>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a14      	ldr	r2, [pc, #80]	; (8003884 <HAL_UART_MspInit+0x98>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <HAL_UART_MspInit+0x98>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003846:	230c      	movs	r3, #12
 8003848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003852:	2303      	movs	r3, #3
 8003854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003856:	2307      	movs	r3, #7
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385a:	f107 0314 	add.w	r3, r7, #20
 800385e:	4619      	mov	r1, r3
 8003860:	4809      	ldr	r0, [pc, #36]	; (8003888 <HAL_UART_MspInit+0x9c>)
 8003862:	f000 ff23 	bl	80046ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003866:	2200      	movs	r2, #0
 8003868:	2105      	movs	r1, #5
 800386a:	2026      	movs	r0, #38	; 0x26
 800386c:	f000 fe62 	bl	8004534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003870:	2026      	movs	r0, #38	; 0x26
 8003872:	f000 fe7b 	bl	800456c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003876:	bf00      	nop
 8003878:	3728      	adds	r7, #40	; 0x28
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40004400 	.word	0x40004400
 8003884:	40023800 	.word	0x40023800
 8003888:	40020000 	.word	0x40020000

0800388c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	; 0x30
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800389c:	2200      	movs	r2, #0
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	2036      	movs	r0, #54	; 0x36
 80038a2:	f000 fe47 	bl	8004534 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038a6:	2036      	movs	r0, #54	; 0x36
 80038a8:	f000 fe60 	bl	800456c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <HAL_InitTick+0xa4>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <HAL_InitTick+0xa4>)
 80038b6:	f043 0310 	orr.w	r3, r3, #16
 80038ba:	6413      	str	r3, [r2, #64]	; 0x40
 80038bc:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <HAL_InitTick+0xa4>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038c8:	f107 0210 	add.w	r2, r7, #16
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f005 f8a0 	bl	8008a18 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038d8:	f005 f876 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 80038dc:	4603      	mov	r3, r0
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <HAL_InitTick+0xa8>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0c9b      	lsrs	r3, r3, #18
 80038ec:	3b01      	subs	r3, #1
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_InitTick+0xac>)
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <HAL_InitTick+0xb0>)
 80038f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_InitTick+0xac>)
 80038f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038fc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038fe:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <HAL_InitTick+0xac>)
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <HAL_InitTick+0xac>)
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_InitTick+0xac>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003910:	4809      	ldr	r0, [pc, #36]	; (8003938 <HAL_InitTick+0xac>)
 8003912:	f005 fd5f 	bl	80093d4 <HAL_TIM_Base_Init>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800391c:	4806      	ldr	r0, [pc, #24]	; (8003938 <HAL_InitTick+0xac>)
 800391e:	f005 fda9 	bl	8009474 <HAL_TIM_Base_Start_IT>
 8003922:	4603      	mov	r3, r0
 8003924:	e000      	b.n	8003928 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
}
 8003928:	4618      	mov	r0, r3
 800392a:	3730      	adds	r7, #48	; 0x30
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	431bde83 	.word	0x431bde83
 8003938:	20004d98 	.word	0x20004d98
 800393c:	40001000 	.word	0x40001000

08003940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003944:	e7fe      	b.n	8003944 <NMI_Handler+0x4>

08003946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800394a:	e7fe      	b.n	800394a <HardFault_Handler+0x4>

0800394c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003950:	e7fe      	b.n	8003950 <MemManage_Handler+0x4>

08003952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003956:	e7fe      	b.n	8003956 <BusFault_Handler+0x4>

08003958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800395c:	e7fe      	b.n	800395c <UsageFault_Handler+0x4>

0800395e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003972:	f005 ff52 	bl	800981a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20004c14 	.word	0x20004c14

08003980 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <USART2_IRQHandler+0x10>)
 8003986:	f006 fadf 	bl	8009f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data , 1);
  /* USER CODE END USART2_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20004cc0 	.word	0x20004cc0

08003994 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  HAL_TIM_Base_Start_IT(&htim7);								//	Turn on Timer with 100Hz period = 0,01 sec
 8003998:	4804      	ldr	r0, [pc, #16]	; (80039ac <EXTI15_10_IRQHandler+0x18>)
 800399a:	f005 fd6b 	bl	8009474 <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC15_OSC32_OUT_Pin);
 800399e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80039a2:	f001 f851 	bl	8004a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20004d08 	.word	0x20004d08

080039b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039b4:	4802      	ldr	r0, [pc, #8]	; (80039c0 <TIM6_DAC_IRQHandler+0x10>)
 80039b6:	f005 ff30 	bl	800981a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20004d98 	.word	0x20004d98

080039c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(tim_val == 4)											// Waiting 3 period of timer7: (0,01 *3 = 0,03 second)
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <TIM7_IRQHandler+0x5c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d11d      	bne.n	8003a0c <TIM7_IRQHandler+0x48>
		{
			tim_val = 0;
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <TIM7_IRQHandler+0x5c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)	// If button steel pressed
 80039d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039da:	4812      	ldr	r0, [pc, #72]	; (8003a24 <TIM7_IRQHandler+0x60>)
 80039dc:	f001 f802 	bl	80049e4 <HAL_GPIO_ReadPin>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10e      	bne.n	8003a04 <TIM7_IRQHandler+0x40>
			{
				klick++;
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <TIM7_IRQHandler+0x64>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3301      	adds	r3, #1
 80039ec:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <TIM7_IRQHandler+0x64>)
 80039ee:	6013      	str	r3, [r2, #0]
				if(klick >= 15)										// it mean we have only 4 LEDs
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <TIM7_IRQHandler+0x64>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b0e      	cmp	r3, #14
 80039f6:	dd02      	ble.n	80039fe <TIM7_IRQHandler+0x3a>
				{
					klick = 0;
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <TIM7_IRQHandler+0x64>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
				}
				HAL_TIM_Base_Stop_IT(&htim7);						// Stop timer (becouse counter can turn on only encoder key)
 80039fe:	480b      	ldr	r0, [pc, #44]	; (8003a2c <TIM7_IRQHandler+0x68>)
 8003a00:	f005 fda8 	bl	8009554 <HAL_TIM_Base_Stop_IT>
			}
			HAL_TIM_Base_Stop_IT(&htim7);
 8003a04:	4809      	ldr	r0, [pc, #36]	; (8003a2c <TIM7_IRQHandler+0x68>)
 8003a06:	f005 fda5 	bl	8009554 <HAL_TIM_Base_Stop_IT>
 8003a0a:	e004      	b.n	8003a16 <TIM7_IRQHandler+0x52>
		}
		else
		{
			tim_val++;
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <TIM7_IRQHandler+0x5c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a03      	ldr	r2, [pc, #12]	; (8003a20 <TIM7_IRQHandler+0x5c>)
 8003a14:	6013      	str	r3, [r2, #0]
		}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003a16:	4805      	ldr	r0, [pc, #20]	; (8003a2c <TIM7_IRQHandler+0x68>)
 8003a18:	f005 feff 	bl	800981a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003a1c:	bf00      	nop
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	2000013c 	.word	0x2000013c
 8003a24:	40021000 	.word	0x40021000
 8003a28:	200000dc 	.word	0x200000dc
 8003a2c:	20004d08 	.word	0x20004d08

08003a30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <OTG_FS_IRQHandler+0x10>)
 8003a36:	f001 fa95 	bl	8004f64 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	2000542c 	.word	0x2000542c

08003a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <_sbrk+0x5c>)
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <_sbrk+0x60>)
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a58:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <_sbrk+0x64>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d102      	bne.n	8003a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <_sbrk+0x64>)
 8003a62:	4a12      	ldr	r2, [pc, #72]	; (8003aac <_sbrk+0x68>)
 8003a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <_sbrk+0x64>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d207      	bcs.n	8003a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a74:	f00d ff94 	bl	80119a0 <__errno>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	220c      	movs	r2, #12
 8003a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a82:	e009      	b.n	8003a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a84:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <_sbrk+0x64>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <_sbrk+0x64>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	4a05      	ldr	r2, [pc, #20]	; (8003aa8 <_sbrk+0x64>)
 8003a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a96:	68fb      	ldr	r3, [r7, #12]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20020000 	.word	0x20020000
 8003aa4:	00000400 	.word	0x00000400
 8003aa8:	20000140 	.word	0x20000140
 8003aac:	20005740 	.word	0x20005740

08003ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <SystemInit+0x20>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	4a05      	ldr	r2, [pc, #20]	; (8003ad0 <SystemInit+0x20>)
 8003abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	71bb      	strb	r3, [r7, #6]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	db3b      	blt.n	8003b66 <draw_pixel+0x92>
 8003aee:	79bb      	ldrb	r3, [r7, #6]
 8003af0:	2b1f      	cmp	r3, #31
 8003af2:	d838      	bhi.n	8003b66 <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 8003af8:	79bb      	ldrb	r3, [r7, #6]
 8003afa:	08db      	lsrs	r3, r3, #3
 8003afc:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8003afe:	7bfa      	ldrb	r2, [r7, #15]
 8003b00:	79bb      	ldrb	r3, [r7, #6]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	737b      	strb	r3, [r7, #13]
		if(color)
 8003b0c:	797b      	ldrb	r3, [r7, #5]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d012      	beq.n	8003b38 <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8003b12:	7bba      	ldrb	r2, [r7, #14]
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	4917      	ldr	r1, [pc, #92]	; (8003b74 <draw_pixel+0xa0>)
 8003b18:	01d2      	lsls	r2, r2, #7
 8003b1a:	440a      	add	r2, r1
 8003b1c:	4413      	add	r3, r2
 8003b1e:	7818      	ldrb	r0, [r3, #0]
 8003b20:	7bba      	ldrb	r2, [r7, #14]
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	7b79      	ldrb	r1, [r7, #13]
 8003b26:	4301      	orrs	r1, r0
 8003b28:	b2c8      	uxtb	r0, r1
 8003b2a:	4912      	ldr	r1, [pc, #72]	; (8003b74 <draw_pixel+0xa0>)
 8003b2c:	01d2      	lsls	r2, r2, #7
 8003b2e:	440a      	add	r2, r1
 8003b30:	4413      	add	r3, r2
 8003b32:	4602      	mov	r2, r0
 8003b34:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 8003b36:	e016      	b.n	8003b66 <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 8003b38:	7bba      	ldrb	r2, [r7, #14]
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	490d      	ldr	r1, [pc, #52]	; (8003b74 <draw_pixel+0xa0>)
 8003b3e:	01d2      	lsls	r2, r2, #7
 8003b40:	440a      	add	r2, r1
 8003b42:	4413      	add	r3, r2
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	b25a      	sxtb	r2, r3
 8003b48:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	b25b      	sxtb	r3, r3
 8003b50:	4013      	ands	r3, r2
 8003b52:	b259      	sxtb	r1, r3
 8003b54:	7bba      	ldrb	r2, [r7, #14]
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	b2c8      	uxtb	r0, r1
 8003b5a:	4906      	ldr	r1, [pc, #24]	; (8003b74 <draw_pixel+0xa0>)
 8003b5c:	01d2      	lsls	r2, r2, #7
 8003b5e:	440a      	add	r2, r1
 8003b60:	4413      	add	r3, r2
 8003b62:	4602      	mov	r2, r0
 8003b64:	701a      	strb	r2, [r3, #0]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20004de0 	.word	0x20004de0

08003b78 <invert_pixel>:
				draw_pixel(x*3+i,y*3+j,color);
	}
}

void invert_pixel(uint8_t x, uint8_t y)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	460a      	mov	r2, r1
 8003b82:	71fb      	strb	r3, [r7, #7]
 8003b84:	4613      	mov	r3, r2
 8003b86:	71bb      	strb	r3, [r7, #6]
	if(x<128 && y<32)
 8003b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	db24      	blt.n	8003bda <invert_pixel+0x62>
 8003b90:	79bb      	ldrb	r3, [r7, #6]
 8003b92:	2b1f      	cmp	r3, #31
 8003b94:	d821      	bhi.n	8003bda <invert_pixel+0x62>
	{
		uint8_t pixel = 0x01;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
		gddram[y>>3][x] ^= pixel<<(y%8);
 8003b9a:	79bb      	ldrb	r3, [r7, #6]
 8003b9c:	08db      	lsrs	r3, r3, #3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	4910      	ldr	r1, [pc, #64]	; (8003be8 <invert_pixel+0x70>)
 8003ba6:	01d2      	lsls	r2, r2, #7
 8003ba8:	440a      	add	r2, r1
 8003baa:	4413      	add	r3, r2
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b25a      	sxtb	r2, r3
 8003bb0:	7bf9      	ldrb	r1, [r7, #15]
 8003bb2:	79bb      	ldrb	r3, [r7, #6]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	4053      	eors	r3, r2
 8003bc0:	b259      	sxtb	r1, r3
 8003bc2:	79bb      	ldrb	r3, [r7, #6]
 8003bc4:	08db      	lsrs	r3, r3, #3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	b2c8      	uxtb	r0, r1
 8003bce:	4906      	ldr	r1, [pc, #24]	; (8003be8 <invert_pixel+0x70>)
 8003bd0:	01d2      	lsls	r2, r2, #7
 8003bd2:	440a      	add	r2, r1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	701a      	strb	r2, [r3, #0]
	}
}
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20004de0 	.word	0x20004de0

08003bec <invert_rectangle>:

void invert_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	71fb      	strb	r3, [r7, #7]
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71bb      	strb	r3, [r7, #6]
 8003c02:	460b      	mov	r3, r1
 8003c04:	717b      	strb	r3, [r7, #5]
 8003c06:	4613      	mov	r3, r2
 8003c08:	713b      	strb	r3, [r7, #4]
	uint8_t i,j;
	for(i=x0;i<x1;i++)
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	e012      	b.n	8003c36 <invert_rectangle+0x4a>
		for(j=y0;j<y1;j++)
 8003c10:	79bb      	ldrb	r3, [r7, #6]
 8003c12:	73bb      	strb	r3, [r7, #14]
 8003c14:	e008      	b.n	8003c28 <invert_rectangle+0x3c>
			invert_pixel(i,j);
 8003c16:	7bba      	ldrb	r2, [r7, #14]
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ffab 	bl	8003b78 <invert_pixel>
		for(j=y0;j<y1;j++)
 8003c22:	7bbb      	ldrb	r3, [r7, #14]
 8003c24:	3301      	adds	r3, #1
 8003c26:	73bb      	strb	r3, [r7, #14]
 8003c28:	7bba      	ldrb	r2, [r7, #14]
 8003c2a:	793b      	ldrb	r3, [r7, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d3f2      	bcc.n	8003c16 <invert_rectangle+0x2a>
	for(i=x0;i<x1;i++)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	3301      	adds	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	797b      	ldrb	r3, [r7, #5]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d3e8      	bcc.n	8003c10 <invert_rectangle+0x24>
}
 8003c3e:	bf00      	nop
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}

08003c48 <clear>:

void clear(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(i=0;i<4;i++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	71fb      	strb	r3, [r7, #7]
 8003c52:	e014      	b.n	8003c7e <clear+0x36>
		for(j=0;j<128;j++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	71bb      	strb	r3, [r7, #6]
 8003c58:	e00a      	b.n	8003c70 <clear+0x28>
			gddram[i][j]=0x00;
 8003c5a:	79fa      	ldrb	r2, [r7, #7]
 8003c5c:	79bb      	ldrb	r3, [r7, #6]
 8003c5e:	490d      	ldr	r1, [pc, #52]	; (8003c94 <clear+0x4c>)
 8003c60:	01d2      	lsls	r2, r2, #7
 8003c62:	440a      	add	r2, r1
 8003c64:	4413      	add	r3, r2
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
		for(j=0;j<128;j++)
 8003c6a:	79bb      	ldrb	r3, [r7, #6]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	71bb      	strb	r3, [r7, #6]
 8003c70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	daf0      	bge.n	8003c5a <clear+0x12>
	for(i=0;i<4;i++)
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	71fb      	strb	r3, [r7, #7]
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d9e7      	bls.n	8003c54 <clear+0xc>
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20004de0 	.word	0x20004de0

08003c98 <line_h>:
			break;
	}
}

void line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	71fb      	strb	r3, [r7, #7]
 8003caa:	4603      	mov	r3, r0
 8003cac:	71bb      	strb	r3, [r7, #6]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	717b      	strb	r3, [r7, #5]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	713b      	strb	r3, [r7, #4]
	if(x0>x1)
 8003cb6:	79fa      	ldrb	r2, [r7, #7]
 8003cb8:	79bb      	ldrb	r3, [r7, #6]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d905      	bls.n	8003cca <line_h+0x32>
	{
		uint8_t temp = x0;
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	757b      	strb	r3, [r7, #21]
		x0 = x1;
 8003cc2:	79bb      	ldrb	r3, [r7, #6]
 8003cc4:	71fb      	strb	r3, [r7, #7]
		x1 = temp;
 8003cc6:	7d7b      	ldrb	r3, [r7, #21]
 8003cc8:	71bb      	strb	r3, [r7, #6]
	}
	uint8_t i,j;
	switch(mode)
 8003cca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	f000 80ac 	beq.w	8003e2c <line_h+0x194>
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	f300 80fb 	bgt.w	8003ed0 <line_h+0x238>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d054      	beq.n	8003d88 <line_h+0xf0>
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	f040 80f6 	bne.w	8003ed0 <line_h+0x238>
	{
		case add :
			if(width%2)
 8003ce4:	793b      	ldrb	r3, [r7, #4]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d027      	beq.n	8003d40 <line_h+0xa8>
			{
				uint8_t start = y0-(width-1)/2;
 8003cf0:	793b      	ldrb	r3, [r7, #4]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	0fda      	lsrs	r2, r3, #31
 8003cf6:	4413      	add	r3, r2
 8003cf8:	105b      	asrs	r3, r3, #1
 8003cfa:	425b      	negs	r3, r3
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	797b      	ldrb	r3, [r7, #5]
 8003d00:	4413      	add	r3, r2
 8003d02:	747b      	strb	r3, [r7, #17]
				for(i=0;i<width;i++)
 8003d04:	2300      	movs	r3, #0
 8003d06:	75fb      	strb	r3, [r7, #23]
 8003d08:	e015      	b.n	8003d36 <line_h+0x9e>
					for(j=x0;j<=x1;j++)
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	75bb      	strb	r3, [r7, #22]
 8003d0e:	e00b      	b.n	8003d28 <line_h+0x90>
						draw_pixel(j,start+i,1);
 8003d10:	7c7a      	ldrb	r2, [r7, #17]
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	4413      	add	r3, r2
 8003d16:	b2d9      	uxtb	r1, r3
 8003d18:	7dbb      	ldrb	r3, [r7, #22]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fed9 	bl	8003ad4 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003d22:	7dbb      	ldrb	r3, [r7, #22]
 8003d24:	3301      	adds	r3, #1
 8003d26:	75bb      	strb	r3, [r7, #22]
 8003d28:	7dba      	ldrb	r2, [r7, #22]
 8003d2a:	79bb      	ldrb	r3, [r7, #6]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d9ef      	bls.n	8003d10 <line_h+0x78>
				for(i=0;i<width;i++)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	3301      	adds	r3, #1
 8003d34:	75fb      	strb	r3, [r7, #23]
 8003d36:	7dfa      	ldrb	r2, [r7, #23]
 8003d38:	793b      	ldrb	r3, [r7, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d3e5      	bcc.n	8003d0a <line_h+0x72>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,1);
			}
			break;
 8003d3e:	e0c7      	b.n	8003ed0 <line_h+0x238>
				uint8_t start = y0-width/2;
 8003d40:	793b      	ldrb	r3, [r7, #4]
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	797a      	ldrb	r2, [r7, #5]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	74bb      	strb	r3, [r7, #18]
				for(i=0;i<width;i++)
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	75fb      	strb	r3, [r7, #23]
 8003d50:	e015      	b.n	8003d7e <line_h+0xe6>
					for(j=x0;j<=x1;j++)
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	75bb      	strb	r3, [r7, #22]
 8003d56:	e00b      	b.n	8003d70 <line_h+0xd8>
						draw_pixel(j,start+i,1);
 8003d58:	7cba      	ldrb	r2, [r7, #18]
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	b2d9      	uxtb	r1, r3
 8003d60:	7dbb      	ldrb	r3, [r7, #22]
 8003d62:	2201      	movs	r2, #1
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff feb5 	bl	8003ad4 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003d6a:	7dbb      	ldrb	r3, [r7, #22]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	75bb      	strb	r3, [r7, #22]
 8003d70:	7dba      	ldrb	r2, [r7, #22]
 8003d72:	79bb      	ldrb	r3, [r7, #6]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d9ef      	bls.n	8003d58 <line_h+0xc0>
				for(i=0;i<width;i++)
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
 8003d7e:	7dfa      	ldrb	r2, [r7, #23]
 8003d80:	793b      	ldrb	r3, [r7, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d3e5      	bcc.n	8003d52 <line_h+0xba>
			break;
 8003d86:	e0a3      	b.n	8003ed0 <line_h+0x238>

		case erase :
			if(width%2)
 8003d88:	793b      	ldrb	r3, [r7, #4]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d027      	beq.n	8003de4 <line_h+0x14c>
			{
				uint8_t start = y0-(width-1)/2;
 8003d94:	793b      	ldrb	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	0fda      	lsrs	r2, r3, #31
 8003d9a:	4413      	add	r3, r2
 8003d9c:	105b      	asrs	r3, r3, #1
 8003d9e:	425b      	negs	r3, r3
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	797b      	ldrb	r3, [r7, #5]
 8003da4:	4413      	add	r3, r2
 8003da6:	73fb      	strb	r3, [r7, #15]
				for(i=0;i<width;i++)
 8003da8:	2300      	movs	r3, #0
 8003daa:	75fb      	strb	r3, [r7, #23]
 8003dac:	e015      	b.n	8003dda <line_h+0x142>
					for(j=x0;j<=x1;j++)
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	75bb      	strb	r3, [r7, #22]
 8003db2:	e00b      	b.n	8003dcc <line_h+0x134>
						draw_pixel(j,start+i,0);
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	4413      	add	r3, r2
 8003dba:	b2d9      	uxtb	r1, r3
 8003dbc:	7dbb      	ldrb	r3, [r7, #22]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fe87 	bl	8003ad4 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003dc6:	7dbb      	ldrb	r3, [r7, #22]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	75bb      	strb	r3, [r7, #22]
 8003dcc:	7dba      	ldrb	r2, [r7, #22]
 8003dce:	79bb      	ldrb	r3, [r7, #6]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d9ef      	bls.n	8003db4 <line_h+0x11c>
				for(i=0;i<width;i++)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	75fb      	strb	r3, [r7, #23]
 8003dda:	7dfa      	ldrb	r2, [r7, #23]
 8003ddc:	793b      	ldrb	r3, [r7, #4]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d3e5      	bcc.n	8003dae <line_h+0x116>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,0);
			}
			break;
 8003de2:	e075      	b.n	8003ed0 <line_h+0x238>
				uint8_t start = y0-width/2;
 8003de4:	793b      	ldrb	r3, [r7, #4]
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	797a      	ldrb	r2, [r7, #5]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	743b      	strb	r3, [r7, #16]
				for(i=0;i<width;i++)
 8003df0:	2300      	movs	r3, #0
 8003df2:	75fb      	strb	r3, [r7, #23]
 8003df4:	e015      	b.n	8003e22 <line_h+0x18a>
					for(j=x0;j<=x1;j++)
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	75bb      	strb	r3, [r7, #22]
 8003dfa:	e00b      	b.n	8003e14 <line_h+0x17c>
						draw_pixel(j,start+i,0);
 8003dfc:	7c3a      	ldrb	r2, [r7, #16]
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	4413      	add	r3, r2
 8003e02:	b2d9      	uxtb	r1, r3
 8003e04:	7dbb      	ldrb	r3, [r7, #22]
 8003e06:	2200      	movs	r2, #0
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fe63 	bl	8003ad4 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003e0e:	7dbb      	ldrb	r3, [r7, #22]
 8003e10:	3301      	adds	r3, #1
 8003e12:	75bb      	strb	r3, [r7, #22]
 8003e14:	7dba      	ldrb	r2, [r7, #22]
 8003e16:	79bb      	ldrb	r3, [r7, #6]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d9ef      	bls.n	8003dfc <line_h+0x164>
				for(i=0;i<width;i++)
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
 8003e22:	7dfa      	ldrb	r2, [r7, #23]
 8003e24:	793b      	ldrb	r3, [r7, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d3e5      	bcc.n	8003df6 <line_h+0x15e>
			break;
 8003e2a:	e051      	b.n	8003ed0 <line_h+0x238>

		case invert :
			if(width%2)
 8003e2c:	793b      	ldrb	r3, [r7, #4]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d027      	beq.n	8003e88 <line_h+0x1f0>
			{
				uint8_t start = y0-(width-1)/2;
 8003e38:	793b      	ldrb	r3, [r7, #4]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	0fda      	lsrs	r2, r3, #31
 8003e3e:	4413      	add	r3, r2
 8003e40:	105b      	asrs	r3, r3, #1
 8003e42:	425b      	negs	r3, r3
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	797b      	ldrb	r3, [r7, #5]
 8003e48:	4413      	add	r3, r2
 8003e4a:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<width;i++)
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	75fb      	strb	r3, [r7, #23]
 8003e50:	e015      	b.n	8003e7e <line_h+0x1e6>
					for(j=x0;j<=x1;j++)
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	75bb      	strb	r3, [r7, #22]
 8003e56:	e00b      	b.n	8003e70 <line_h+0x1d8>
						invert_pixel(j,start+i);
 8003e58:	7cfa      	ldrb	r2, [r7, #19]
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	7dbb      	ldrb	r3, [r7, #22]
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fe87 	bl	8003b78 <invert_pixel>
					for(j=x0;j<=x1;j++)
 8003e6a:	7dbb      	ldrb	r3, [r7, #22]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	75bb      	strb	r3, [r7, #22]
 8003e70:	7dba      	ldrb	r2, [r7, #22]
 8003e72:	79bb      	ldrb	r3, [r7, #6]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d9ef      	bls.n	8003e58 <line_h+0x1c0>
				for(i=0;i<width;i++)
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
 8003e7e:	7dfa      	ldrb	r2, [r7, #23]
 8003e80:	793b      	ldrb	r3, [r7, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d3e5      	bcc.n	8003e52 <line_h+0x1ba>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						invert_pixel(j,start+i);
			}
			break;
 8003e86:	e022      	b.n	8003ece <line_h+0x236>
				uint8_t start = y0-width/2;
 8003e88:	793b      	ldrb	r3, [r7, #4]
 8003e8a:	085b      	lsrs	r3, r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	797a      	ldrb	r2, [r7, #5]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	753b      	strb	r3, [r7, #20]
				for(i=0;i<width;i++)
 8003e94:	2300      	movs	r3, #0
 8003e96:	75fb      	strb	r3, [r7, #23]
 8003e98:	e015      	b.n	8003ec6 <line_h+0x22e>
					for(j=x0;j<=x1;j++)
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	75bb      	strb	r3, [r7, #22]
 8003e9e:	e00b      	b.n	8003eb8 <line_h+0x220>
						invert_pixel(j,start+i);
 8003ea0:	7d3a      	ldrb	r2, [r7, #20]
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	7dbb      	ldrb	r3, [r7, #22]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fe63 	bl	8003b78 <invert_pixel>
					for(j=x0;j<=x1;j++)
 8003eb2:	7dbb      	ldrb	r3, [r7, #22]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	75bb      	strb	r3, [r7, #22]
 8003eb8:	7dba      	ldrb	r2, [r7, #22]
 8003eba:	79bb      	ldrb	r3, [r7, #6]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d9ef      	bls.n	8003ea0 <line_h+0x208>
				for(i=0;i<width;i++)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	75fb      	strb	r3, [r7, #23]
 8003ec6:	7dfa      	ldrb	r2, [r7, #23]
 8003ec8:	793b      	ldrb	r3, [r7, #4]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d3e5      	bcc.n	8003e9a <line_h+0x202>
			break;
 8003ece:	bf00      	nop

	}
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd90      	pop	{r4, r7, pc}

08003ed8 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	71fb      	strb	r3, [r7, #7]
 8003eea:	4603      	mov	r3, r0
 8003eec:	71bb      	strb	r3, [r7, #6]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	717b      	strb	r3, [r7, #5]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 8003efa:	2300      	movs	r3, #0
 8003efc:	75fb      	strb	r3, [r7, #23]
 8003efe:	e04d      	b.n	8003f9c <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 8003f00:	2300      	movs	r3, #0
 8003f02:	75bb      	strb	r3, [r7, #22]
 8003f04:	e042      	b.n	8003f8c <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
 8003f08:	08db      	lsrs	r3, r3, #3
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	7dbb      	ldrb	r3, [r7, #22]
 8003f0e:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003f12:	fb11 f303 	smulbb	r3, r1, r3
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4413      	add	r3, r2
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	2201      	movs	r2, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 8003f36:	7bba      	ldrb	r2, [r7, #14]
 8003f38:	7b7b      	ldrb	r3, [r7, #13]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00f      	beq.n	8003f62 <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 8003f42:	79fa      	ldrb	r2, [r7, #7]
 8003f44:	797b      	ldrb	r3, [r7, #5]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	b2d8      	uxtb	r0, r3
 8003f50:	7dba      	ldrb	r2, [r7, #22]
 8003f52:	79bb      	ldrb	r3, [r7, #6]
 8003f54:	4413      	add	r3, r2
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f7ff fdba 	bl	8003ad4 <draw_pixel>
 8003f60:	e00e      	b.n	8003f80 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 8003f62:	79fa      	ldrb	r2, [r7, #7]
 8003f64:	797b      	ldrb	r3, [r7, #5]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	b2d8      	uxtb	r0, r3
 8003f70:	7dba      	ldrb	r2, [r7, #22]
 8003f72:	79bb      	ldrb	r3, [r7, #6]
 8003f74:	4413      	add	r3, r2
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f7ff fdaa 	bl	8003ad4 <draw_pixel>
		for (y=0; y<height; y++)
 8003f80:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	3301      	adds	r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	75bb      	strb	r3, [r7, #22]
 8003f8c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8003f90:	793b      	ldrb	r3, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	dbb7      	blt.n	8003f06 <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	75fb      	strb	r3, [r7, #23]
 8003f9c:	7dfa      	ldrb	r2, [r7, #23]
 8003f9e:	797b      	ldrb	r3, [r7, #5]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d3ad      	bcc.n	8003f00 <graphics_Glyph+0x28>
		}
	}
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd90      	pop	{r4, r7, pc}
	...

08003fb0 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b089      	sub	sp, #36	; 0x24
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4603      	mov	r3, r0
 8003fba:	71fb      	strb	r3, [r7, #7]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	71bb      	strb	r3, [r7, #6]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 8003fc8:	e081      	b.n	80040ce <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 8003fd0:	797a      	ldrb	r2, [r7, #5]
 8003fd2:	4944      	ldr	r1, [pc, #272]	; (80040e4 <graphics_text+0x134>)
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3310      	adds	r3, #16
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	7dba      	ldrb	r2, [r7, #22]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d30b      	bcc.n	8004000 <graphics_text+0x50>
 8003fe8:	797a      	ldrb	r2, [r7, #5]
 8003fea:	493e      	ldr	r1, [pc, #248]	; (80040e4 <graphics_text+0x134>)
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3311      	adds	r3, #17
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	7dba      	ldrb	r2, [r7, #22]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d909      	bls.n	8004014 <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 8004000:	797a      	ldrb	r2, [r7, #5]
 8004002:	4938      	ldr	r1, [pc, #224]	; (80040e4 <graphics_text+0x134>)
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	3312      	adds	r3, #18
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 8004014:	797a      	ldrb	r2, [r7, #5]
 8004016:	4933      	ldr	r1, [pc, #204]	; (80040e4 <graphics_text+0x134>)
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	3310      	adds	r3, #16
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	7dba      	ldrb	r2, [r7, #22]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 800402c:	797a      	ldrb	r2, [r7, #5]
 800402e:	492d      	ldr	r1, [pc, #180]	; (80040e4 <graphics_text+0x134>)
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	3308      	adds	r3, #8
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8004040:	7d7b      	ldrb	r3, [r7, #21]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10c      	bne.n	8004060 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 8004046:	797a      	ldrb	r2, [r7, #5]
 8004048:	4926      	ldr	r1, [pc, #152]	; (80040e4 <graphics_text+0x134>)
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	330c      	adds	r3, #12
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	7dbb      	ldrb	r3, [r7, #22]
 800405a:	4413      	add	r3, r2
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8004060:	797a      	ldrb	r2, [r7, #5]
 8004062:	4920      	ldr	r1, [pc, #128]	; (80040e4 <graphics_text+0x134>)
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	3301      	adds	r3, #1
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 8004074:	797a      	ldrb	r2, [r7, #5]
 8004076:	491b      	ldr	r1, [pc, #108]	; (80040e4 <graphics_text+0x134>)
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 8004086:	797a      	ldrb	r2, [r7, #5]
 8004088:	4916      	ldr	r1, [pc, #88]	; (80040e4 <graphics_text+0x134>)
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	3304      	adds	r3, #4
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	7dbb      	ldrb	r3, [r7, #22]
 800409a:	7cf9      	ldrb	r1, [r7, #19]
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	7d39      	ldrb	r1, [r7, #20]
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]


		x+=width;
 80040aa:	7dfa      	ldrb	r2, [r7, #23]
 80040ac:	7d7b      	ldrb	r3, [r7, #21]
 80040ae:	4413      	add	r3, r2
 80040b0:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 80040b2:	7d3c      	ldrb	r4, [r7, #20]
 80040b4:	7d7a      	ldrb	r2, [r7, #21]
 80040b6:	79b9      	ldrb	r1, [r7, #6]
 80040b8:	7df8      	ldrb	r0, [r7, #23]
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	4623      	mov	r3, r4
 80040c4:	f7ff ff08 	bl	8003ed8 <graphics_Glyph>
		str++;								/* point to next character in string */
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	3301      	adds	r3, #1
 80040cc:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f47f af79 	bne.w	8003fca <graphics_text+0x1a>
	}

}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd90      	pop	{r4, r7, pc}
 80040e2:	bf00      	nop
 80040e4:	08012b20 	.word	0x08012b20

080040e8 <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	4603      	mov	r3, r0
 80040f0:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 80040f2:	2300      	movs	r3, #0
 80040f4:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 80040fa:	f107 020c 	add.w	r2, r7, #12
 80040fe:	2332      	movs	r3, #50	; 0x32
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	2302      	movs	r3, #2
 8004104:	2178      	movs	r1, #120	; 0x78
 8004106:	4803      	ldr	r0, [pc, #12]	; (8004114 <ssd1306_command+0x2c>)
 8004108:	f002 fb76 	bl	80067f8 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20004b24 	.word	0x20004b24

08004118 <oled_update>:

void oled_update(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 800411e:	2021      	movs	r0, #33	; 0x21
 8004120:	f7ff ffe2 	bl	80040e8 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 8004124:	2000      	movs	r0, #0
 8004126:	f7ff ffdf 	bl	80040e8 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 800412a:	207f      	movs	r0, #127	; 0x7f
 800412c:	f7ff ffdc 	bl	80040e8 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 8004130:	2022      	movs	r0, #34	; 0x22
 8004132:	f7ff ffd9 	bl	80040e8 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 8004136:	2000      	movs	r0, #0
 8004138:	f7ff ffd6 	bl	80040e8 <ssd1306_command>
  ssd1306_command(3); // Page end address
 800413c:	2003      	movs	r0, #3
 800413e:	f7ff ffd3 	bl	80040e8 <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 8004142:	2340      	movs	r3, #64	; 0x40
 8004144:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 8004146:	2300      	movs	r3, #0
 8004148:	82fb      	strh	r3, [r7, #22]
 800414a:	e02d      	b.n	80041a8 <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 800414c:	2300      	movs	r3, #0
 800414e:	757b      	strb	r3, [r7, #21]
 8004150:	e024      	b.n	800419c <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 8004152:	2301      	movs	r3, #1
 8004154:	753b      	strb	r3, [r7, #20]
 8004156:	e012      	b.n	800417e <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8004158:	8af9      	ldrh	r1, [r7, #22]
 800415a:	7d7a      	ldrb	r2, [r7, #21]
 800415c:	7d3b      	ldrb	r3, [r7, #20]
 800415e:	4413      	add	r3, r2
 8004160:	1e5a      	subs	r2, r3, #1
 8004162:	7d3b      	ldrb	r3, [r7, #20]
 8004164:	4814      	ldr	r0, [pc, #80]	; (80041b8 <oled_update+0xa0>)
 8004166:	01c9      	lsls	r1, r1, #7
 8004168:	4401      	add	r1, r0
 800416a:	440a      	add	r2, r1
 800416c:	7812      	ldrb	r2, [r2, #0]
 800416e:	f107 0118 	add.w	r1, r7, #24
 8004172:	440b      	add	r3, r1
 8004174:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8004178:	7d3b      	ldrb	r3, [r7, #20]
 800417a:	3301      	adds	r3, #1
 800417c:	753b      	strb	r3, [r7, #20]
 800417e:	7d3b      	ldrb	r3, [r7, #20]
 8004180:	2b10      	cmp	r3, #16
 8004182:	d9e9      	bls.n	8004158 <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 8004184:	463a      	mov	r2, r7
 8004186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2311      	movs	r3, #17
 800418e:	2178      	movs	r1, #120	; 0x78
 8004190:	480a      	ldr	r0, [pc, #40]	; (80041bc <oled_update+0xa4>)
 8004192:	f002 fb31 	bl	80067f8 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 8004196:	7d7b      	ldrb	r3, [r7, #21]
 8004198:	3310      	adds	r3, #16
 800419a:	757b      	strb	r3, [r7, #21]
 800419c:	7d7b      	ldrb	r3, [r7, #21]
 800419e:	2b7e      	cmp	r3, #126	; 0x7e
 80041a0:	d9d7      	bls.n	8004152 <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 80041a2:	8afb      	ldrh	r3, [r7, #22]
 80041a4:	3301      	adds	r3, #1
 80041a6:	82fb      	strh	r3, [r7, #22]
 80041a8:	8afb      	ldrh	r3, [r7, #22]
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d9ce      	bls.n	800414c <oled_update+0x34>
		}
	}

}
 80041ae:	bf00      	nop
 80041b0:	bf00      	nop
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20004de0 	.word	0x20004de0
 80041bc:	20004b24 	.word	0x20004b24

080041c0 <oled_init>:

void oled_init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 80041c6:	20ae      	movs	r0, #174	; 0xae
 80041c8:	f7ff ff8e 	bl	80040e8 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 80041cc:	20d5      	movs	r0, #213	; 0xd5
 80041ce:	f7ff ff8b 	bl	80040e8 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 80041d2:	2080      	movs	r0, #128	; 0x80
 80041d4:	f7ff ff88 	bl	80040e8 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 80041d8:	20a8      	movs	r0, #168	; 0xa8
 80041da:	f7ff ff85 	bl	80040e8 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 80041de:	201f      	movs	r0, #31
 80041e0:	f7ff ff82 	bl	80040e8 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 80041e4:	20d3      	movs	r0, #211	; 0xd3
 80041e6:	f7ff ff7f 	bl	80040e8 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7ff ff7c 	bl	80040e8 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 80041f0:	2040      	movs	r0, #64	; 0x40
 80041f2:	f7ff ff79 	bl	80040e8 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 80041f6:	208d      	movs	r0, #141	; 0x8d
 80041f8:	f7ff ff76 	bl	80040e8 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 80041fc:	2014      	movs	r0, #20
 80041fe:	f7ff ff73 	bl	80040e8 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8004202:	2020      	movs	r0, #32
 8004204:	f7ff ff70 	bl	80040e8 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8004208:	2000      	movs	r0, #0
 800420a:	f7ff ff6d 	bl	80040e8 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 800420e:	20a1      	movs	r0, #161	; 0xa1
 8004210:	f7ff ff6a 	bl	80040e8 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 8004214:	20c8      	movs	r0, #200	; 0xc8
 8004216:	f7ff ff67 	bl	80040e8 <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 800421a:	20da      	movs	r0, #218	; 0xda
 800421c:	f7ff ff64 	bl	80040e8 <ssd1306_command>
  ssd1306_command(0x02);
 8004220:	2002      	movs	r0, #2
 8004222:	f7ff ff61 	bl	80040e8 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 8004226:	2081      	movs	r0, #129	; 0x81
 8004228:	f7ff ff5e 	bl	80040e8 <ssd1306_command>
  ssd1306_command(0x8F);
 800422c:	208f      	movs	r0, #143	; 0x8f
 800422e:	f7ff ff5b 	bl	80040e8 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8004232:	20d9      	movs	r0, #217	; 0xd9
 8004234:	f7ff ff58 	bl	80040e8 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 8004238:	20f1      	movs	r0, #241	; 0xf1
 800423a:	f7ff ff55 	bl	80040e8 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 800423e:	20db      	movs	r0, #219	; 0xdb
 8004240:	f7ff ff52 	bl	80040e8 <ssd1306_command>
  ssd1306_command(0x40);
 8004244:	2040      	movs	r0, #64	; 0x40
 8004246:	f7ff ff4f 	bl	80040e8 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 800424a:	20a4      	movs	r0, #164	; 0xa4
 800424c:	f7ff ff4c 	bl	80040e8 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8004250:	20a6      	movs	r0, #166	; 0xa6
 8004252:	f7ff ff49 	bl	80040e8 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 8004256:	202e      	movs	r0, #46	; 0x2e
 8004258:	f7ff ff46 	bl	80040e8 <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 800425c:	20af      	movs	r0, #175	; 0xaf
 800425e:	f7ff ff43 	bl	80040e8 <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	e013      	b.n	8004290 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8004268:	2300      	movs	r3, #0
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	e00a      	b.n	8004284 <oled_init+0xc4>
			gddram[i][j] = 0x00;
 800426e:	4a0c      	ldr	r2, [pc, #48]	; (80042a0 <oled_init+0xe0>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	01db      	lsls	r3, r3, #7
 8004274:	441a      	add	r2, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	4413      	add	r3, r2
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b7f      	cmp	r3, #127	; 0x7f
 8004288:	ddf1      	ble.n	800426e <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3301      	adds	r3, #1
 800428e:	607b      	str	r3, [r7, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b03      	cmp	r3, #3
 8004294:	dde8      	ble.n	8004268 <oled_init+0xa8>
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20004de0 	.word	0x20004de0

080042a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042a8:	480d      	ldr	r0, [pc, #52]	; (80042e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042aa:	490e      	ldr	r1, [pc, #56]	; (80042e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042ac:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042b0:	e002      	b.n	80042b8 <LoopCopyDataInit>

080042b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042b6:	3304      	adds	r3, #4

080042b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042bc:	d3f9      	bcc.n	80042b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042be:	4a0b      	ldr	r2, [pc, #44]	; (80042ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042c0:	4c0b      	ldr	r4, [pc, #44]	; (80042f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80042c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042c4:	e001      	b.n	80042ca <LoopFillZerobss>

080042c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042c8:	3204      	adds	r2, #4

080042ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042cc:	d3fb      	bcc.n	80042c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042ce:	f7ff fbef 	bl	8003ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042d2:	f00d fb6b 	bl	80119ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042d6:	f7fc fc7b 	bl	8000bd0 <main>
  bx  lr    
 80042da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042e4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80042e8:	0801502c 	.word	0x0801502c
  ldr r2, =_sbss
 80042ec:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80042f0:	20005740 	.word	0x20005740

080042f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042f4:	e7fe      	b.n	80042f4 <ADC_IRQHandler>
	...

080042f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <HAL_Init+0x40>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <HAL_Init+0x40>)
 8004302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004308:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <HAL_Init+0x40>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <HAL_Init+0x40>)
 800430e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <HAL_Init+0x40>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a07      	ldr	r2, [pc, #28]	; (8004338 <HAL_Init+0x40>)
 800431a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004320:	2003      	movs	r0, #3
 8004322:	f000 f8fc 	bl	800451e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004326:	200f      	movs	r0, #15
 8004328:	f7ff fab0 	bl	800388c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800432c:	f7ff f828 	bl	8003380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023c00 	.word	0x40023c00

0800433c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_IncTick+0x20>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_IncTick+0x24>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4413      	add	r3, r2
 800434c:	4a04      	ldr	r2, [pc, #16]	; (8004360 <HAL_IncTick+0x24>)
 800434e:	6013      	str	r3, [r2, #0]
}
 8004350:	bf00      	nop
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	2000001c 	.word	0x2000001c
 8004360:	20004fe0 	.word	0x20004fe0

08004364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return uwTick;
 8004368:	4b03      	ldr	r3, [pc, #12]	; (8004378 <HAL_GetTick+0x14>)
 800436a:	681b      	ldr	r3, [r3, #0]
}
 800436c:	4618      	mov	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	20004fe0 	.word	0x20004fe0

0800437c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004384:	f7ff ffee 	bl	8004364 <HAL_GetTick>
 8004388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004394:	d005      	beq.n	80043a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_Delay+0x44>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043a2:	bf00      	nop
 80043a4:	f7ff ffde 	bl	8004364 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d8f7      	bhi.n	80043a4 <HAL_Delay+0x28>
  {
  }
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	2000001c 	.word	0x2000001c

080043c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <__NVIC_SetPriorityGrouping+0x44>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043e0:	4013      	ands	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043f6:	4a04      	ldr	r2, [pc, #16]	; (8004408 <__NVIC_SetPriorityGrouping+0x44>)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	60d3      	str	r3, [r2, #12]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <__NVIC_GetPriorityGrouping+0x18>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	f003 0307 	and.w	r3, r3, #7
}
 800441a:	4618      	mov	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	2b00      	cmp	r3, #0
 8004438:	db0b      	blt.n	8004452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	f003 021f 	and.w	r2, r3, #31
 8004440:	4907      	ldr	r1, [pc, #28]	; (8004460 <__NVIC_EnableIRQ+0x38>)
 8004442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2001      	movs	r0, #1
 800444a:	fa00 f202 	lsl.w	r2, r0, r2
 800444e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	e000e100 	.word	0xe000e100

08004464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	6039      	str	r1, [r7, #0]
 800446e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004474:	2b00      	cmp	r3, #0
 8004476:	db0a      	blt.n	800448e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	b2da      	uxtb	r2, r3
 800447c:	490c      	ldr	r1, [pc, #48]	; (80044b0 <__NVIC_SetPriority+0x4c>)
 800447e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004482:	0112      	lsls	r2, r2, #4
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	440b      	add	r3, r1
 8004488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800448c:	e00a      	b.n	80044a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	4908      	ldr	r1, [pc, #32]	; (80044b4 <__NVIC_SetPriority+0x50>)
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	3b04      	subs	r3, #4
 800449c:	0112      	lsls	r2, r2, #4
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	440b      	add	r3, r1
 80044a2:	761a      	strb	r2, [r3, #24]
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000e100 	.word	0xe000e100
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b089      	sub	sp, #36	; 0x24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f1c3 0307 	rsb	r3, r3, #7
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	bf28      	it	cs
 80044d6:	2304      	movcs	r3, #4
 80044d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3304      	adds	r3, #4
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d902      	bls.n	80044e8 <NVIC_EncodePriority+0x30>
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	3b03      	subs	r3, #3
 80044e6:	e000      	b.n	80044ea <NVIC_EncodePriority+0x32>
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43da      	mvns	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	401a      	ands	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004500:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	fa01 f303 	lsl.w	r3, r1, r3
 800450a:	43d9      	mvns	r1, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004510:	4313      	orrs	r3, r2
         );
}
 8004512:	4618      	mov	r0, r3
 8004514:	3724      	adds	r7, #36	; 0x24
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff ff4c 	bl	80043c4 <__NVIC_SetPriorityGrouping>
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004546:	f7ff ff61 	bl	800440c <__NVIC_GetPriorityGrouping>
 800454a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	6978      	ldr	r0, [r7, #20]
 8004552:	f7ff ffb1 	bl	80044b8 <NVIC_EncodePriority>
 8004556:	4602      	mov	r2, r0
 8004558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff ff80 	bl	8004464 <__NVIC_SetPriority>
}
 8004564:	bf00      	nop
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff ff54 	bl	8004428 <__NVIC_EnableIRQ>
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004594:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004596:	f7ff fee5 	bl	8004364 <HAL_GetTick>
 800459a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d008      	beq.n	80045ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2280      	movs	r2, #128	; 0x80
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e052      	b.n	8004660 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0216 	bic.w	r2, r2, #22
 80045c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d103      	bne.n	80045ea <HAL_DMA_Abort+0x62>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0208 	bic.w	r2, r2, #8
 80045f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800460a:	e013      	b.n	8004634 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800460c:	f7ff feaa 	bl	8004364 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b05      	cmp	r3, #5
 8004618:	d90c      	bls.n	8004634 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2203      	movs	r2, #3
 8004624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e015      	b.n	8004660 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e4      	bne.n	800460c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	223f      	movs	r2, #63	; 0x3f
 8004648:	409a      	lsls	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d004      	beq.n	8004686 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2280      	movs	r2, #128	; 0x80
 8004680:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e00c      	b.n	80046a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2205      	movs	r2, #5
 800468a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	; 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	e16b      	b.n	80049a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046c8:	2201      	movs	r2, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	f040 815a 	bne.w	800499a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d005      	beq.n	80046fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d130      	bne.n	8004760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	2203      	movs	r2, #3
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004734:	2201      	movs	r2, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0201 	and.w	r2, r3, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b03      	cmp	r3, #3
 800476a:	d017      	beq.n	800479c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	2203      	movs	r2, #3
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d123      	bne.n	80047f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	08da      	lsrs	r2, r3, #3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3208      	adds	r2, #8
 80047b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	220f      	movs	r2, #15
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	08da      	lsrs	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3208      	adds	r2, #8
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80b4 	beq.w	800499a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	4b60      	ldr	r3, [pc, #384]	; (80049b8 <HAL_GPIO_Init+0x30c>)
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	4a5f      	ldr	r2, [pc, #380]	; (80049b8 <HAL_GPIO_Init+0x30c>)
 800483c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004840:	6453      	str	r3, [r2, #68]	; 0x44
 8004842:	4b5d      	ldr	r3, [pc, #372]	; (80049b8 <HAL_GPIO_Init+0x30c>)
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800484e:	4a5b      	ldr	r2, [pc, #364]	; (80049bc <HAL_GPIO_Init+0x310>)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	3302      	adds	r3, #2
 8004856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	220f      	movs	r2, #15
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a52      	ldr	r2, [pc, #328]	; (80049c0 <HAL_GPIO_Init+0x314>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d02b      	beq.n	80048d2 <HAL_GPIO_Init+0x226>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a51      	ldr	r2, [pc, #324]	; (80049c4 <HAL_GPIO_Init+0x318>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d025      	beq.n	80048ce <HAL_GPIO_Init+0x222>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a50      	ldr	r2, [pc, #320]	; (80049c8 <HAL_GPIO_Init+0x31c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01f      	beq.n	80048ca <HAL_GPIO_Init+0x21e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4f      	ldr	r2, [pc, #316]	; (80049cc <HAL_GPIO_Init+0x320>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d019      	beq.n	80048c6 <HAL_GPIO_Init+0x21a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a4e      	ldr	r2, [pc, #312]	; (80049d0 <HAL_GPIO_Init+0x324>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <HAL_GPIO_Init+0x216>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a4d      	ldr	r2, [pc, #308]	; (80049d4 <HAL_GPIO_Init+0x328>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00d      	beq.n	80048be <HAL_GPIO_Init+0x212>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a4c      	ldr	r2, [pc, #304]	; (80049d8 <HAL_GPIO_Init+0x32c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d007      	beq.n	80048ba <HAL_GPIO_Init+0x20e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a4b      	ldr	r2, [pc, #300]	; (80049dc <HAL_GPIO_Init+0x330>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <HAL_GPIO_Init+0x20a>
 80048b2:	2307      	movs	r3, #7
 80048b4:	e00e      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048b6:	2308      	movs	r3, #8
 80048b8:	e00c      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048ba:	2306      	movs	r3, #6
 80048bc:	e00a      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048be:	2305      	movs	r3, #5
 80048c0:	e008      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048c2:	2304      	movs	r3, #4
 80048c4:	e006      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048c6:	2303      	movs	r3, #3
 80048c8:	e004      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e002      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048d2:	2300      	movs	r3, #0
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	f002 0203 	and.w	r2, r2, #3
 80048da:	0092      	lsls	r2, r2, #2
 80048dc:	4093      	lsls	r3, r2
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e4:	4935      	ldr	r1, [pc, #212]	; (80049bc <HAL_GPIO_Init+0x310>)
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	089b      	lsrs	r3, r3, #2
 80048ea:	3302      	adds	r3, #2
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048f2:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_GPIO_Init+0x334>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004916:	4a32      	ldr	r2, [pc, #200]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <HAL_GPIO_Init+0x334>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004940:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004946:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	43db      	mvns	r3, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4013      	ands	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800496a:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <HAL_GPIO_Init+0x334>)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004994:	4a12      	ldr	r2, [pc, #72]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3301      	adds	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b0f      	cmp	r3, #15
 80049a4:	f67f ae90 	bls.w	80046c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	3724      	adds	r7, #36	; 0x24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40013800 	.word	0x40013800
 80049c0:	40020000 	.word	0x40020000
 80049c4:	40020400 	.word	0x40020400
 80049c8:	40020800 	.word	0x40020800
 80049cc:	40020c00 	.word	0x40020c00
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40021400 	.word	0x40021400
 80049d8:	40021800 	.word	0x40021800
 80049dc:	40021c00 	.word	0x40021c00
 80049e0:	40013c00 	.word	0x40013c00

080049e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
 8004a00:	e001      	b.n	8004a06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]
 8004a20:	4613      	mov	r3, r2
 8004a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a24:	787b      	ldrb	r3, [r7, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a30:	e003      	b.n	8004a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a32:	887b      	ldrh	r3, [r7, #2]
 8004a34:	041a      	lsls	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	619a      	str	r2, [r3, #24]
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d006      	beq.n	8004a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a5e:	4a05      	ldr	r2, [pc, #20]	; (8004a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 f806 	bl	8004a78 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40013c00 	.word	0x40013c00

08004a78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a90:	b08f      	sub	sp, #60	; 0x3c
 8004a92:	af0a      	add	r7, sp, #40	; 0x28
 8004a94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e054      	b.n	8004b4a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f00c fcc2 	bl	8011444 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f006 f95c 	bl	800ad9c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	687e      	ldr	r6, [r7, #4]
 8004aec:	466d      	mov	r5, sp
 8004aee:	f106 0410 	add.w	r4, r6, #16
 8004af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004afa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004afe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b02:	1d33      	adds	r3, r6, #4
 8004b04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b06:	6838      	ldr	r0, [r7, #0]
 8004b08:	f006 f8d6 	bl	800acb8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2101      	movs	r1, #1
 8004b12:	4618      	mov	r0, r3
 8004b14:	f006 f953 	bl	800adbe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	687e      	ldr	r6, [r7, #4]
 8004b20:	466d      	mov	r5, sp
 8004b22:	f106 0410 	add.w	r4, r6, #16
 8004b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b32:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b36:	1d33      	adds	r3, r6, #4
 8004b38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b3a:	6838      	ldr	r0, [r7, #0]
 8004b3c:	f006 faba 	bl	800b0b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b52 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004b52:	b590      	push	{r4, r7, lr}
 8004b54:	b089      	sub	sp, #36	; 0x24
 8004b56:	af04      	add	r7, sp, #16
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	4608      	mov	r0, r1
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4603      	mov	r3, r0
 8004b62:	70fb      	strb	r3, [r7, #3]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70bb      	strb	r3, [r7, #2]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_HCD_HC_Init+0x28>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e076      	b.n	8004c68 <HAL_HCD_HC_Init+0x116>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	212c      	movs	r1, #44	; 0x2c
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	333d      	adds	r3, #61	; 0x3d
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	212c      	movs	r1, #44	; 0x2c
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3338      	adds	r3, #56	; 0x38
 8004ba2:	787a      	ldrb	r2, [r7, #1]
 8004ba4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	212c      	movs	r1, #44	; 0x2c
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3340      	adds	r3, #64	; 0x40
 8004bb4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004bb6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	212c      	movs	r1, #44	; 0x2c
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3339      	adds	r3, #57	; 0x39
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	212c      	movs	r1, #44	; 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	333f      	adds	r3, #63	; 0x3f
 8004bd8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004bdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	78ba      	ldrb	r2, [r7, #2]
 8004be2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004be6:	b2d0      	uxtb	r0, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	212c      	movs	r1, #44	; 0x2c
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	333a      	adds	r3, #58	; 0x3a
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004bf8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	da09      	bge.n	8004c14 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	212c      	movs	r1, #44	; 0x2c
 8004c06:	fb01 f303 	mul.w	r3, r1, r3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	333b      	adds	r3, #59	; 0x3b
 8004c0e:	2201      	movs	r2, #1
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	e008      	b.n	8004c26 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	212c      	movs	r1, #44	; 0x2c
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	4413      	add	r3, r2
 8004c20:	333b      	adds	r3, #59	; 0x3b
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	212c      	movs	r1, #44	; 0x2c
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	4413      	add	r3, r2
 8004c32:	333c      	adds	r3, #60	; 0x3c
 8004c34:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004c38:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	787c      	ldrb	r4, [r7, #1]
 8004c40:	78ba      	ldrb	r2, [r7, #2]
 8004c42:	78f9      	ldrb	r1, [r7, #3]
 8004c44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c46:	9302      	str	r3, [sp, #8]
 8004c48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	4623      	mov	r3, r4
 8004c56:	f006 fba7 	bl	800b3a8 <USB_HC_Init>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd90      	pop	{r4, r7, pc}

08004c70 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_HCD_HC_Halt+0x1e>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e00f      	b.n	8004cae <HAL_HCD_HC_Halt+0x3e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	78fa      	ldrb	r2, [r7, #3]
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f006 fde3 	bl	800b86a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	70fb      	strb	r3, [r7, #3]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	70bb      	strb	r3, [r7, #2]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	212c      	movs	r1, #44	; 0x2c
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	4413      	add	r3, r2
 8004cde:	333b      	adds	r3, #59	; 0x3b
 8004ce0:	78ba      	ldrb	r2, [r7, #2]
 8004ce2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	212c      	movs	r1, #44	; 0x2c
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	333f      	adds	r3, #63	; 0x3f
 8004cf2:	787a      	ldrb	r2, [r7, #1]
 8004cf4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004cf6:	7c3b      	ldrb	r3, [r7, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d112      	bne.n	8004d22 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	212c      	movs	r1, #44	; 0x2c
 8004d02:	fb01 f303 	mul.w	r3, r1, r3
 8004d06:	4413      	add	r3, r2
 8004d08:	3342      	adds	r3, #66	; 0x42
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	212c      	movs	r1, #44	; 0x2c
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	4413      	add	r3, r2
 8004d1a:	333d      	adds	r3, #61	; 0x3d
 8004d1c:	7f3a      	ldrb	r2, [r7, #28]
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	e008      	b.n	8004d34 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	212c      	movs	r1, #44	; 0x2c
 8004d28:	fb01 f303 	mul.w	r3, r1, r3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	3342      	adds	r3, #66	; 0x42
 8004d30:	2202      	movs	r2, #2
 8004d32:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004d34:	787b      	ldrb	r3, [r7, #1]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	f200 80c6 	bhi.w	8004ec8 <HAL_HCD_HC_SubmitRequest+0x210>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004eb5 	.word	0x08004eb5
 8004d4c:	08004db9 	.word	0x08004db9
 8004d50:	08004e37 	.word	0x08004e37
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004d54:	7c3b      	ldrb	r3, [r7, #16]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	f040 80b8 	bne.w	8004ecc <HAL_HCD_HC_SubmitRequest+0x214>
 8004d5c:	78bb      	ldrb	r3, [r7, #2]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f040 80b4 	bne.w	8004ecc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004d64:	8b3b      	ldrh	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d108      	bne.n	8004d7c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	212c      	movs	r1, #44	; 0x2c
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	4413      	add	r3, r2
 8004d76:	3355      	adds	r3, #85	; 0x55
 8004d78:	2201      	movs	r2, #1
 8004d7a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	212c      	movs	r1, #44	; 0x2c
 8004d82:	fb01 f303 	mul.w	r3, r1, r3
 8004d86:	4413      	add	r3, r2
 8004d88:	3355      	adds	r3, #85	; 0x55
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d109      	bne.n	8004da4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	212c      	movs	r1, #44	; 0x2c
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3342      	adds	r3, #66	; 0x42
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004da2:	e093      	b.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	212c      	movs	r1, #44	; 0x2c
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	4413      	add	r3, r2
 8004db0:	3342      	adds	r3, #66	; 0x42
 8004db2:	2202      	movs	r2, #2
 8004db4:	701a      	strb	r2, [r3, #0]
      break;
 8004db6:	e089      	b.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004db8:	78bb      	ldrb	r3, [r7, #2]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d11d      	bne.n	8004dfa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	212c      	movs	r1, #44	; 0x2c
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	4413      	add	r3, r2
 8004dca:	3355      	adds	r3, #85	; 0x55
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	212c      	movs	r1, #44	; 0x2c
 8004dd8:	fb01 f303 	mul.w	r3, r1, r3
 8004ddc:	4413      	add	r3, r2
 8004dde:	3342      	adds	r3, #66	; 0x42
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004de4:	e073      	b.n	8004ece <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	212c      	movs	r1, #44	; 0x2c
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	4413      	add	r3, r2
 8004df2:	3342      	adds	r3, #66	; 0x42
 8004df4:	2202      	movs	r2, #2
 8004df6:	701a      	strb	r2, [r3, #0]
      break;
 8004df8:	e069      	b.n	8004ece <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	212c      	movs	r1, #44	; 0x2c
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	4413      	add	r3, r2
 8004e06:	3354      	adds	r3, #84	; 0x54
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	212c      	movs	r1, #44	; 0x2c
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	4413      	add	r3, r2
 8004e1a:	3342      	adds	r3, #66	; 0x42
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
      break;
 8004e20:	e055      	b.n	8004ece <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	212c      	movs	r1, #44	; 0x2c
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3342      	adds	r3, #66	; 0x42
 8004e30:	2202      	movs	r2, #2
 8004e32:	701a      	strb	r2, [r3, #0]
      break;
 8004e34:	e04b      	b.n	8004ece <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004e36:	78bb      	ldrb	r3, [r7, #2]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d11d      	bne.n	8004e78 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	212c      	movs	r1, #44	; 0x2c
 8004e42:	fb01 f303 	mul.w	r3, r1, r3
 8004e46:	4413      	add	r3, r2
 8004e48:	3355      	adds	r3, #85	; 0x55
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d109      	bne.n	8004e64 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	212c      	movs	r1, #44	; 0x2c
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3342      	adds	r3, #66	; 0x42
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004e62:	e034      	b.n	8004ece <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	212c      	movs	r1, #44	; 0x2c
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	4413      	add	r3, r2
 8004e70:	3342      	adds	r3, #66	; 0x42
 8004e72:	2202      	movs	r2, #2
 8004e74:	701a      	strb	r2, [r3, #0]
      break;
 8004e76:	e02a      	b.n	8004ece <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	212c      	movs	r1, #44	; 0x2c
 8004e7e:	fb01 f303 	mul.w	r3, r1, r3
 8004e82:	4413      	add	r3, r2
 8004e84:	3354      	adds	r3, #84	; 0x54
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d109      	bne.n	8004ea0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	212c      	movs	r1, #44	; 0x2c
 8004e92:	fb01 f303 	mul.w	r3, r1, r3
 8004e96:	4413      	add	r3, r2
 8004e98:	3342      	adds	r3, #66	; 0x42
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
      break;
 8004e9e:	e016      	b.n	8004ece <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	212c      	movs	r1, #44	; 0x2c
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	4413      	add	r3, r2
 8004eac:	3342      	adds	r3, #66	; 0x42
 8004eae:	2202      	movs	r2, #2
 8004eb0:	701a      	strb	r2, [r3, #0]
      break;
 8004eb2:	e00c      	b.n	8004ece <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	212c      	movs	r1, #44	; 0x2c
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	3342      	adds	r3, #66	; 0x42
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]
      break;
 8004ec6:	e002      	b.n	8004ece <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004ec8:	bf00      	nop
 8004eca:	e000      	b.n	8004ece <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004ecc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	212c      	movs	r1, #44	; 0x2c
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	4413      	add	r3, r2
 8004eda:	3344      	adds	r3, #68	; 0x44
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	8b3a      	ldrh	r2, [r7, #24]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	202c      	movs	r0, #44	; 0x2c
 8004ee8:	fb00 f303 	mul.w	r3, r0, r3
 8004eec:	440b      	add	r3, r1
 8004eee:	334c      	adds	r3, #76	; 0x4c
 8004ef0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	212c      	movs	r1, #44	; 0x2c
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	4413      	add	r3, r2
 8004efe:	3360      	adds	r3, #96	; 0x60
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	212c      	movs	r1, #44	; 0x2c
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	4413      	add	r3, r2
 8004f10:	3350      	adds	r3, #80	; 0x50
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004f16:	78fb      	ldrb	r3, [r7, #3]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	212c      	movs	r1, #44	; 0x2c
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	3339      	adds	r3, #57	; 0x39
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	212c      	movs	r1, #44	; 0x2c
 8004f2e:	fb01 f303 	mul.w	r3, r1, r3
 8004f32:	4413      	add	r3, r2
 8004f34:	3361      	adds	r3, #97	; 0x61
 8004f36:	2200      	movs	r2, #0
 8004f38:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	222c      	movs	r2, #44	; 0x2c
 8004f42:	fb02 f303 	mul.w	r3, r2, r3
 8004f46:	3338      	adds	r3, #56	; 0x38
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	18d1      	adds	r1, r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	f006 fb36 	bl	800b5c4 <USB_HC_StartXfer>
 8004f58:	4603      	mov	r3, r0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop

08004f64 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f006 f859 	bl	800b032 <USB_GetMode>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	f040 80f6 	bne.w	8005174 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f006 f83d 	bl	800b00c <USB_ReadInterrupts>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80ec 	beq.w	8005172 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f006 f834 	bl	800b00c <USB_ReadInterrupts>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004faa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fae:	d104      	bne.n	8004fba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f006 f824 	bl	800b00c <USB_ReadInterrupts>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fce:	d104      	bne.n	8004fda <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fd8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f006 f814 	bl	800b00c <USB_ReadInterrupts>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fee:	d104      	bne.n	8004ffa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004ff8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f006 f804 	bl	800b00c <USB_ReadInterrupts>
 8005004:	4603      	mov	r3, r0
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b02      	cmp	r3, #2
 800500c:	d103      	bne.n	8005016 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2202      	movs	r2, #2
 8005014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f005 fff6 	bl	800b00c <USB_ReadInterrupts>
 8005020:	4603      	mov	r3, r0
 8005022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502a:	d11c      	bne.n	8005066 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005034:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10f      	bne.n	8005066 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005046:	2110      	movs	r1, #16
 8005048:	6938      	ldr	r0, [r7, #16]
 800504a:	f005 ff05 	bl	800ae58 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800504e:	6938      	ldr	r0, [r7, #16]
 8005050:	f005 ff26 	bl	800aea0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2101      	movs	r1, #1
 800505a:	4618      	mov	r0, r3
 800505c:	f006 f8de 	bl	800b21c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f00c fa6d 	bl	8011540 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f005 ffce 	bl	800b00c <USB_ReadInterrupts>
 8005070:	4603      	mov	r3, r0
 8005072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005076:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800507a:	d102      	bne.n	8005082 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 fa03 	bl	8006488 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f005 ffc0 	bl	800b00c <USB_ReadInterrupts>
 800508c:	4603      	mov	r3, r0
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b08      	cmp	r3, #8
 8005094:	d106      	bne.n	80050a4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f00c fa36 	bl	8011508 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2208      	movs	r2, #8
 80050a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f005 ffaf 	bl	800b00c <USB_ReadInterrupts>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d101      	bne.n	80050bc <HAL_HCD_IRQHandler+0x158>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <HAL_HCD_IRQHandler+0x15a>
 80050bc:	2300      	movs	r3, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d012      	beq.n	80050e8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699a      	ldr	r2, [r3, #24]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0210 	bic.w	r2, r2, #16
 80050d0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f001 f906 	bl	80062e4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0210 	orr.w	r2, r2, #16
 80050e6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f005 ff8d 	bl	800b00c <USB_ReadInterrupts>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050fc:	d13a      	bne.n	8005174 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f006 fba0 	bl	800b848 <USB_HC_ReadInterrupt>
 8005108:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e025      	b.n	800515c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d018      	beq.n	8005156 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800513a:	d106      	bne.n	800514a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f8ab 	bl	800529e <HCD_HC_IN_IRQHandler>
 8005148:	e005      	b.n	8005156 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fcc6 	bl	8005ae2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	3301      	adds	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	429a      	cmp	r2, r3
 8005164:	d3d4      	bcc.n	8005110 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800516e:	615a      	str	r2, [r3, #20]
 8005170:	e000      	b.n	8005174 <HAL_HCD_IRQHandler+0x210>
      return;
 8005172:	bf00      	nop
    }
  }
}
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_HCD_Start+0x16>
 800518c:	2302      	movs	r3, #2
 800518e:	e013      	b.n	80051b8 <HAL_HCD_Start+0x3e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2101      	movs	r1, #1
 800519e:	4618      	mov	r0, r3
 80051a0:	f006 f8a0 	bl	800b2e4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f005 fde6 	bl	800ad7a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_HCD_Stop+0x16>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e00d      	b.n	80051f2 <HAL_HCD_Stop+0x32>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f006 fc9a 	bl	800bb1c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f006 f842 	bl	800b290 <USB_ResetPort>
 800520c:	4603      	mov	r3, r0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005222:	78fb      	ldrb	r3, [r7, #3]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	212c      	movs	r1, #44	; 0x2c
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	4413      	add	r3, r2
 800522e:	3360      	adds	r3, #96	; 0x60
 8005230:	781b      	ldrb	r3, [r3, #0]
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	212c      	movs	r1, #44	; 0x2c
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	4413      	add	r3, r2
 8005256:	3350      	adds	r3, #80	; 0x50
 8005258:	681b      	ldr	r3, [r3, #0]
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f006 f886 	bl	800b384 <USB_GetCurrentFrame>
 8005278:	4603      	mov	r3, r0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f006 f861 	bl	800b356 <USB_GetHostSpeed>
 8005294:	4603      	mov	r3, r0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b086      	sub	sp, #24
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	460b      	mov	r3, r1
 80052a8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d119      	bne.n	8005302 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052da:	461a      	mov	r2, r3
 80052dc:	2304      	movs	r3, #4
 80052de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052fa:	f043 0302 	orr.w	r3, r3, #2
 80052fe:	60d3      	str	r3, [r2, #12]
 8005300:	e101      	b.n	8005506 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005318:	d12b      	bne.n	8005372 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005326:	461a      	mov	r2, r3
 8005328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800532c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	212c      	movs	r1, #44	; 0x2c
 8005334:	fb01 f303 	mul.w	r3, r1, r3
 8005338:	4413      	add	r3, r2
 800533a:	3361      	adds	r3, #97	; 0x61
 800533c:	2207      	movs	r2, #7
 800533e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4413      	add	r3, r2
 8005348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	440a      	add	r2, r1
 8005356:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800535a:	f043 0302 	orr.w	r3, r3, #2
 800535e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f006 fa7d 	bl	800b86a <USB_HC_Halt>
 8005370:	e0c9      	b.n	8005506 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4413      	add	r3, r2
 800537a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b20      	cmp	r3, #32
 8005386:	d109      	bne.n	800539c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4413      	add	r3, r2
 8005390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005394:	461a      	mov	r2, r3
 8005396:	2320      	movs	r3, #32
 8005398:	6093      	str	r3, [r2, #8]
 800539a:	e0b4      	b.n	8005506 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d133      	bne.n	800541a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053cc:	f043 0302 	orr.w	r3, r3, #2
 80053d0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	212c      	movs	r1, #44	; 0x2c
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	4413      	add	r3, r2
 80053de:	3361      	adds	r3, #97	; 0x61
 80053e0:	2205      	movs	r2, #5
 80053e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f0:	461a      	mov	r2, r3
 80053f2:	2310      	movs	r3, #16
 80053f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005402:	461a      	mov	r2, r3
 8005404:	2308      	movs	r3, #8
 8005406:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	4611      	mov	r1, r2
 8005412:	4618      	mov	r0, r3
 8005414:	f006 fa29 	bl	800b86a <USB_HC_Halt>
 8005418:	e075      	b.n	8005506 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005430:	d134      	bne.n	800549c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4413      	add	r3, r2
 800543a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	440a      	add	r2, r1
 8005448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800544c:	f043 0302 	orr.w	r3, r3, #2
 8005450:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	212c      	movs	r1, #44	; 0x2c
 8005458:	fb01 f303 	mul.w	r3, r1, r3
 800545c:	4413      	add	r3, r2
 800545e:	3361      	adds	r3, #97	; 0x61
 8005460:	2208      	movs	r2, #8
 8005462:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	461a      	mov	r2, r3
 8005472:	2310      	movs	r3, #16
 8005474:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4413      	add	r3, r2
 800547e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005482:	461a      	mov	r2, r3
 8005484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005488:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f006 f9e8 	bl	800b86a <USB_HC_Halt>
 800549a:	e034      	b.n	8005506 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ae:	2b80      	cmp	r3, #128	; 0x80
 80054b0:	d129      	bne.n	8005506 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054cc:	f043 0302 	orr.w	r3, r3, #2
 80054d0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	212c      	movs	r1, #44	; 0x2c
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	4413      	add	r3, r2
 80054de:	3361      	adds	r3, #97	; 0x61
 80054e0:	2206      	movs	r2, #6
 80054e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	4611      	mov	r1, r2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f006 f9bb 	bl	800b86a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005500:	461a      	mov	r2, r3
 8005502:	2380      	movs	r3, #128	; 0x80
 8005504:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4413      	add	r3, r2
 800550e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800551c:	d122      	bne.n	8005564 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4413      	add	r3, r2
 8005526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	440a      	add	r2, r1
 8005534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005538:	f043 0302 	orr.w	r3, r3, #2
 800553c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	4611      	mov	r1, r2
 8005548:	4618      	mov	r0, r3
 800554a:	f006 f98e 	bl	800b86a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	4413      	add	r3, r2
 8005556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555a:	461a      	mov	r2, r3
 800555c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005560:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005562:	e2ba      	b.n	8005ada <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4413      	add	r3, r2
 800556c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b01      	cmp	r3, #1
 8005578:	f040 811b 	bne.w	80057b2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d019      	beq.n	80055b8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	212c      	movs	r1, #44	; 0x2c
 800558a:	fb01 f303 	mul.w	r3, r1, r3
 800558e:	4413      	add	r3, r2
 8005590:	3348      	adds	r3, #72	; 0x48
 8005592:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	0159      	lsls	r1, r3, #5
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	440b      	add	r3, r1
 800559c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	202c      	movs	r0, #44	; 0x2c
 80055ae:	fb00 f303 	mul.w	r3, r0, r3
 80055b2:	440b      	add	r3, r1
 80055b4:	3350      	adds	r3, #80	; 0x50
 80055b6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	212c      	movs	r1, #44	; 0x2c
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	3361      	adds	r3, #97	; 0x61
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	212c      	movs	r1, #44	; 0x2c
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	4413      	add	r3, r2
 80055d6:	335c      	adds	r3, #92	; 0x5c
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e8:	461a      	mov	r2, r3
 80055ea:	2301      	movs	r3, #1
 80055ec:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	212c      	movs	r1, #44	; 0x2c
 80055f4:	fb01 f303 	mul.w	r3, r1, r3
 80055f8:	4413      	add	r3, r2
 80055fa:	333f      	adds	r3, #63	; 0x3f
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	212c      	movs	r1, #44	; 0x2c
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	4413      	add	r3, r2
 800560e:	333f      	adds	r3, #63	; 0x3f
 8005610:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005612:	2b02      	cmp	r3, #2
 8005614:	d121      	bne.n	800565a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	4413      	add	r3, r2
 800561e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	440a      	add	r2, r1
 800562c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005630:	f043 0302 	orr.w	r3, r3, #2
 8005634:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	4611      	mov	r1, r2
 8005640:	4618      	mov	r0, r3
 8005642:	f006 f912 	bl	800b86a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4413      	add	r3, r2
 800564e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005652:	461a      	mov	r2, r3
 8005654:	2310      	movs	r3, #16
 8005656:	6093      	str	r3, [r2, #8]
 8005658:	e066      	b.n	8005728 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	212c      	movs	r1, #44	; 0x2c
 8005660:	fb01 f303 	mul.w	r3, r1, r3
 8005664:	4413      	add	r3, r2
 8005666:	333f      	adds	r3, #63	; 0x3f
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b03      	cmp	r3, #3
 800566c:	d127      	bne.n	80056be <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4413      	add	r3, r2
 8005676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	440a      	add	r2, r1
 8005684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005688:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800568c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	212c      	movs	r1, #44	; 0x2c
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	4413      	add	r3, r2
 800569a:	3360      	adds	r3, #96	; 0x60
 800569c:	2201      	movs	r2, #1
 800569e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	b2d9      	uxtb	r1, r3
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	202c      	movs	r0, #44	; 0x2c
 80056aa:	fb00 f303 	mul.w	r3, r0, r3
 80056ae:	4413      	add	r3, r2
 80056b0:	3360      	adds	r3, #96	; 0x60
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f00b ff50 	bl	801155c <HAL_HCD_HC_NotifyURBChange_Callback>
 80056bc:	e034      	b.n	8005728 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	212c      	movs	r1, #44	; 0x2c
 80056c4:	fb01 f303 	mul.w	r3, r1, r3
 80056c8:	4413      	add	r3, r2
 80056ca:	333f      	adds	r3, #63	; 0x3f
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d12a      	bne.n	8005728 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	212c      	movs	r1, #44	; 0x2c
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	3360      	adds	r3, #96	; 0x60
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	212c      	movs	r1, #44	; 0x2c
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	4413      	add	r3, r2
 80056f0:	3354      	adds	r3, #84	; 0x54
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	f083 0301 	eor.w	r3, r3, #1
 80056f8:	b2d8      	uxtb	r0, r3
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	212c      	movs	r1, #44	; 0x2c
 8005700:	fb01 f303 	mul.w	r3, r1, r3
 8005704:	4413      	add	r3, r2
 8005706:	3354      	adds	r3, #84	; 0x54
 8005708:	4602      	mov	r2, r0
 800570a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	b2d9      	uxtb	r1, r3
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	202c      	movs	r0, #44	; 0x2c
 8005716:	fb00 f303 	mul.w	r3, r0, r3
 800571a:	4413      	add	r3, r2
 800571c:	3360      	adds	r3, #96	; 0x60
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f00b ff1a 	bl	801155c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d12b      	bne.n	8005788 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	212c      	movs	r1, #44	; 0x2c
 8005736:	fb01 f303 	mul.w	r3, r1, r3
 800573a:	4413      	add	r3, r2
 800573c:	3348      	adds	r3, #72	; 0x48
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	202c      	movs	r0, #44	; 0x2c
 8005746:	fb00 f202 	mul.w	r2, r0, r2
 800574a:	440a      	add	r2, r1
 800574c:	3240      	adds	r2, #64	; 0x40
 800574e:	8812      	ldrh	r2, [r2, #0]
 8005750:	fbb3 f3f2 	udiv	r3, r3, r2
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 81be 	beq.w	8005ada <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	212c      	movs	r1, #44	; 0x2c
 8005764:	fb01 f303 	mul.w	r3, r1, r3
 8005768:	4413      	add	r3, r2
 800576a:	3354      	adds	r3, #84	; 0x54
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f083 0301 	eor.w	r3, r3, #1
 8005772:	b2d8      	uxtb	r0, r3
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	212c      	movs	r1, #44	; 0x2c
 800577a:	fb01 f303 	mul.w	r3, r1, r3
 800577e:	4413      	add	r3, r2
 8005780:	3354      	adds	r3, #84	; 0x54
 8005782:	4602      	mov	r2, r0
 8005784:	701a      	strb	r2, [r3, #0]
}
 8005786:	e1a8      	b.n	8005ada <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	212c      	movs	r1, #44	; 0x2c
 800578e:	fb01 f303 	mul.w	r3, r1, r3
 8005792:	4413      	add	r3, r2
 8005794:	3354      	adds	r3, #84	; 0x54
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f083 0301 	eor.w	r3, r3, #1
 800579c:	b2d8      	uxtb	r0, r3
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	212c      	movs	r1, #44	; 0x2c
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	4413      	add	r3, r2
 80057aa:	3354      	adds	r3, #84	; 0x54
 80057ac:	4602      	mov	r2, r0
 80057ae:	701a      	strb	r2, [r3, #0]
}
 80057b0:	e193      	b.n	8005ada <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	f040 8106 	bne.w	80059d6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e4:	f023 0302 	bic.w	r3, r3, #2
 80057e8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	212c      	movs	r1, #44	; 0x2c
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	4413      	add	r3, r2
 80057f6:	3361      	adds	r3, #97	; 0x61
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d109      	bne.n	8005812 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	212c      	movs	r1, #44	; 0x2c
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	4413      	add	r3, r2
 800580a:	3360      	adds	r3, #96	; 0x60
 800580c:	2201      	movs	r2, #1
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	e0c9      	b.n	80059a6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	212c      	movs	r1, #44	; 0x2c
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	4413      	add	r3, r2
 800581e:	3361      	adds	r3, #97	; 0x61
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b05      	cmp	r3, #5
 8005824:	d109      	bne.n	800583a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	212c      	movs	r1, #44	; 0x2c
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	4413      	add	r3, r2
 8005832:	3360      	adds	r3, #96	; 0x60
 8005834:	2205      	movs	r2, #5
 8005836:	701a      	strb	r2, [r3, #0]
 8005838:	e0b5      	b.n	80059a6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	212c      	movs	r1, #44	; 0x2c
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	4413      	add	r3, r2
 8005846:	3361      	adds	r3, #97	; 0x61
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b06      	cmp	r3, #6
 800584c:	d009      	beq.n	8005862 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	212c      	movs	r1, #44	; 0x2c
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	4413      	add	r3, r2
 800585a:	3361      	adds	r3, #97	; 0x61
 800585c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800585e:	2b08      	cmp	r3, #8
 8005860:	d150      	bne.n	8005904 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	212c      	movs	r1, #44	; 0x2c
 8005868:	fb01 f303 	mul.w	r3, r1, r3
 800586c:	4413      	add	r3, r2
 800586e:	335c      	adds	r3, #92	; 0x5c
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	202c      	movs	r0, #44	; 0x2c
 800587a:	fb00 f303 	mul.w	r3, r0, r3
 800587e:	440b      	add	r3, r1
 8005880:	335c      	adds	r3, #92	; 0x5c
 8005882:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	212c      	movs	r1, #44	; 0x2c
 800588a:	fb01 f303 	mul.w	r3, r1, r3
 800588e:	4413      	add	r3, r2
 8005890:	335c      	adds	r3, #92	; 0x5c
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d912      	bls.n	80058be <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	212c      	movs	r1, #44	; 0x2c
 800589e:	fb01 f303 	mul.w	r3, r1, r3
 80058a2:	4413      	add	r3, r2
 80058a4:	335c      	adds	r3, #92	; 0x5c
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	212c      	movs	r1, #44	; 0x2c
 80058b0:	fb01 f303 	mul.w	r3, r1, r3
 80058b4:	4413      	add	r3, r2
 80058b6:	3360      	adds	r3, #96	; 0x60
 80058b8:	2204      	movs	r2, #4
 80058ba:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80058bc:	e073      	b.n	80059a6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	212c      	movs	r1, #44	; 0x2c
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	4413      	add	r3, r2
 80058ca:	3360      	adds	r3, #96	; 0x60
 80058cc:	2202      	movs	r2, #2
 80058ce:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058e6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058ee:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fc:	461a      	mov	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005902:	e050      	b.n	80059a6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	212c      	movs	r1, #44	; 0x2c
 800590a:	fb01 f303 	mul.w	r3, r1, r3
 800590e:	4413      	add	r3, r2
 8005910:	3361      	adds	r3, #97	; 0x61
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b03      	cmp	r3, #3
 8005916:	d122      	bne.n	800595e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	212c      	movs	r1, #44	; 0x2c
 800591e:	fb01 f303 	mul.w	r3, r1, r3
 8005922:	4413      	add	r3, r2
 8005924:	3360      	adds	r3, #96	; 0x60
 8005926:	2202      	movs	r2, #2
 8005928:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005940:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005948:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	461a      	mov	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	e023      	b.n	80059a6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	212c      	movs	r1, #44	; 0x2c
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	4413      	add	r3, r2
 800596a:	3361      	adds	r3, #97	; 0x61
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b07      	cmp	r3, #7
 8005970:	d119      	bne.n	80059a6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	212c      	movs	r1, #44	; 0x2c
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	4413      	add	r3, r2
 800597e:	335c      	adds	r3, #92	; 0x5c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	202c      	movs	r0, #44	; 0x2c
 800598a:	fb00 f303 	mul.w	r3, r0, r3
 800598e:	440b      	add	r3, r1
 8005990:	335c      	adds	r3, #92	; 0x5c
 8005992:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	212c      	movs	r1, #44	; 0x2c
 800599a:	fb01 f303 	mul.w	r3, r1, r3
 800599e:	4413      	add	r3, r2
 80059a0:	3360      	adds	r3, #96	; 0x60
 80059a2:	2204      	movs	r2, #4
 80059a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	461a      	mov	r2, r3
 80059b4:	2302      	movs	r3, #2
 80059b6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	b2d9      	uxtb	r1, r3
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	202c      	movs	r0, #44	; 0x2c
 80059c2:	fb00 f303 	mul.w	r3, r0, r3
 80059c6:	4413      	add	r3, r2
 80059c8:	3360      	adds	r3, #96	; 0x60
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f00b fdc4 	bl	801155c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80059d4:	e081      	b.n	8005ada <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	d176      	bne.n	8005ada <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	212c      	movs	r1, #44	; 0x2c
 80059f2:	fb01 f303 	mul.w	r3, r1, r3
 80059f6:	4413      	add	r3, r2
 80059f8:	333f      	adds	r3, #63	; 0x3f
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d121      	bne.n	8005a44 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	212c      	movs	r1, #44	; 0x2c
 8005a06:	fb01 f303 	mul.w	r3, r1, r3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	335c      	adds	r3, #92	; 0x5c
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a2c:	f043 0302 	orr.w	r3, r3, #2
 8005a30:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f005 ff14 	bl	800b86a <USB_HC_Halt>
 8005a42:	e041      	b.n	8005ac8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	212c      	movs	r1, #44	; 0x2c
 8005a4a:	fb01 f303 	mul.w	r3, r1, r3
 8005a4e:	4413      	add	r3, r2
 8005a50:	333f      	adds	r3, #63	; 0x3f
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d009      	beq.n	8005a6c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	212c      	movs	r1, #44	; 0x2c
 8005a5e:	fb01 f303 	mul.w	r3, r1, r3
 8005a62:	4413      	add	r3, r2
 8005a64:	333f      	adds	r3, #63	; 0x3f
 8005a66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d12d      	bne.n	8005ac8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	212c      	movs	r1, #44	; 0x2c
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	4413      	add	r3, r2
 8005a78:	335c      	adds	r3, #92	; 0x5c
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d120      	bne.n	8005ac8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	212c      	movs	r1, #44	; 0x2c
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	4413      	add	r3, r2
 8005a92:	3361      	adds	r3, #97	; 0x61
 8005a94:	2203      	movs	r2, #3
 8005a96:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab2:	f043 0302 	orr.w	r3, r3, #2
 8005ab6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f005 fed1 	bl	800b86a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	2310      	movs	r3, #16
 8005ad8:	6093      	str	r3, [r2, #8]
}
 8005ada:	bf00      	nop
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b088      	sub	sp, #32
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	460b      	mov	r3, r1
 8005aec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d119      	bne.n	8005b46 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2304      	movs	r3, #4
 8005b22:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b3e:	f043 0302 	orr.w	r3, r3, #2
 8005b42:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005b44:	e3ca      	b.n	80062dc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d13e      	bne.n	8005bda <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b68:	461a      	mov	r2, r3
 8005b6a:	2320      	movs	r3, #32
 8005b6c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	212c      	movs	r1, #44	; 0x2c
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	4413      	add	r3, r2
 8005b7a:	333d      	adds	r3, #61	; 0x3d
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	f040 83ac 	bne.w	80062dc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	212c      	movs	r1, #44	; 0x2c
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	4413      	add	r3, r2
 8005b90:	333d      	adds	r3, #61	; 0x3d
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	212c      	movs	r1, #44	; 0x2c
 8005b9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3360      	adds	r3, #96	; 0x60
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc2:	f043 0302 	orr.w	r3, r3, #2
 8005bc6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f005 fe49 	bl	800b86a <USB_HC_Halt>
}
 8005bd8:	e380      	b.n	80062dc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf0:	d122      	bne.n	8005c38 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c0c:	f043 0302 	orr.w	r3, r3, #2
 8005c10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f005 fe24 	bl	800b86a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c34:	6093      	str	r3, [r2, #8]
}
 8005c36:	e351      	b.n	80062dc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d150      	bne.n	8005cf0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	212c      	movs	r1, #44	; 0x2c
 8005c54:	fb01 f303 	mul.w	r3, r1, r3
 8005c58:	4413      	add	r3, r2
 8005c5a:	335c      	adds	r3, #92	; 0x5c
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c72:	2b40      	cmp	r3, #64	; 0x40
 8005c74:	d111      	bne.n	8005c9a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	212c      	movs	r1, #44	; 0x2c
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	4413      	add	r3, r2
 8005c82:	333d      	adds	r3, #61	; 0x3d
 8005c84:	2201      	movs	r2, #1
 8005c86:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c94:	461a      	mov	r2, r3
 8005c96:	2340      	movs	r3, #64	; 0x40
 8005c98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb4:	f043 0302 	orr.w	r3, r3, #2
 8005cb8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f005 fdd0 	bl	800b86a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	2301      	movs	r3, #1
 8005cda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	212c      	movs	r1, #44	; 0x2c
 8005ce2:	fb01 f303 	mul.w	r3, r1, r3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	3361      	adds	r3, #97	; 0x61
 8005cea:	2201      	movs	r2, #1
 8005cec:	701a      	strb	r2, [r3, #0]
}
 8005cee:	e2f5      	b.n	80062dc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b40      	cmp	r3, #64	; 0x40
 8005d04:	d13c      	bne.n	8005d80 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	212c      	movs	r1, #44	; 0x2c
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	4413      	add	r3, r2
 8005d12:	3361      	adds	r3, #97	; 0x61
 8005d14:	2204      	movs	r2, #4
 8005d16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	212c      	movs	r1, #44	; 0x2c
 8005d1e:	fb01 f303 	mul.w	r3, r1, r3
 8005d22:	4413      	add	r3, r2
 8005d24:	333d      	adds	r3, #61	; 0x3d
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	212c      	movs	r1, #44	; 0x2c
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	4413      	add	r3, r2
 8005d36:	335c      	adds	r3, #92	; 0x5c
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d56:	f043 0302 	orr.w	r3, r3, #2
 8005d5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	4611      	mov	r1, r2
 8005d66:	4618      	mov	r0, r3
 8005d68:	f005 fd7f 	bl	800b86a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d78:	461a      	mov	r2, r3
 8005d7a:	2340      	movs	r3, #64	; 0x40
 8005d7c:	6093      	str	r3, [r2, #8]
}
 8005d7e:	e2ad      	b.n	80062dc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d12a      	bne.n	8005dec <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da2:	461a      	mov	r2, r3
 8005da4:	2308      	movs	r3, #8
 8005da6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	0151      	lsls	r1, r2, #5
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	440a      	add	r2, r1
 8005dbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc2:	f043 0302 	orr.w	r3, r3, #2
 8005dc6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f005 fd49 	bl	800b86a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	212c      	movs	r1, #44	; 0x2c
 8005dde:	fb01 f303 	mul.w	r3, r1, r3
 8005de2:	4413      	add	r3, r2
 8005de4:	3361      	adds	r3, #97	; 0x61
 8005de6:	2205      	movs	r2, #5
 8005de8:	701a      	strb	r2, [r3, #0]
}
 8005dea:	e277      	b.n	80062dc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0310 	and.w	r3, r3, #16
 8005dfe:	2b10      	cmp	r3, #16
 8005e00:	d150      	bne.n	8005ea4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	212c      	movs	r1, #44	; 0x2c
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	335c      	adds	r3, #92	; 0x5c
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	212c      	movs	r1, #44	; 0x2c
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	4413      	add	r3, r2
 8005e20:	3361      	adds	r3, #97	; 0x61
 8005e22:	2203      	movs	r2, #3
 8005e24:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	212c      	movs	r1, #44	; 0x2c
 8005e2c:	fb01 f303 	mul.w	r3, r1, r3
 8005e30:	4413      	add	r3, r2
 8005e32:	333d      	adds	r3, #61	; 0x3d
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d112      	bne.n	8005e60 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	212c      	movs	r1, #44	; 0x2c
 8005e40:	fb01 f303 	mul.w	r3, r1, r3
 8005e44:	4413      	add	r3, r2
 8005e46:	333c      	adds	r3, #60	; 0x3c
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d108      	bne.n	8005e60 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	212c      	movs	r1, #44	; 0x2c
 8005e54:	fb01 f303 	mul.w	r3, r1, r3
 8005e58:	4413      	add	r3, r2
 8005e5a:	333d      	adds	r3, #61	; 0x3d
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e7a:	f043 0302 	orr.w	r3, r3, #2
 8005e7e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	4611      	mov	r1, r2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f005 fced 	bl	800b86a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2310      	movs	r3, #16
 8005ea0:	6093      	str	r3, [r2, #8]
}
 8005ea2:	e21b      	b.n	80062dc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb6:	2b80      	cmp	r3, #128	; 0x80
 8005eb8:	d174      	bne.n	8005fa4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d121      	bne.n	8005f06 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	212c      	movs	r1, #44	; 0x2c
 8005ec8:	fb01 f303 	mul.w	r3, r1, r3
 8005ecc:	4413      	add	r3, r2
 8005ece:	3361      	adds	r3, #97	; 0x61
 8005ed0:	2206      	movs	r2, #6
 8005ed2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eee:	f043 0302 	orr.w	r3, r3, #2
 8005ef2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f005 fcb3 	bl	800b86a <USB_HC_Halt>
 8005f04:	e044      	b.n	8005f90 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	212c      	movs	r1, #44	; 0x2c
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	4413      	add	r3, r2
 8005f12:	335c      	adds	r3, #92	; 0x5c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	202c      	movs	r0, #44	; 0x2c
 8005f1e:	fb00 f303 	mul.w	r3, r0, r3
 8005f22:	440b      	add	r3, r1
 8005f24:	335c      	adds	r3, #92	; 0x5c
 8005f26:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	212c      	movs	r1, #44	; 0x2c
 8005f2e:	fb01 f303 	mul.w	r3, r1, r3
 8005f32:	4413      	add	r3, r2
 8005f34:	335c      	adds	r3, #92	; 0x5c
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d920      	bls.n	8005f7e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	212c      	movs	r1, #44	; 0x2c
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	335c      	adds	r3, #92	; 0x5c
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	212c      	movs	r1, #44	; 0x2c
 8005f54:	fb01 f303 	mul.w	r3, r1, r3
 8005f58:	4413      	add	r3, r2
 8005f5a:	3360      	adds	r3, #96	; 0x60
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	b2d9      	uxtb	r1, r3
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	202c      	movs	r0, #44	; 0x2c
 8005f6a:	fb00 f303 	mul.w	r3, r0, r3
 8005f6e:	4413      	add	r3, r2
 8005f70:	3360      	adds	r3, #96	; 0x60
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f00b faf0 	bl	801155c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005f7c:	e008      	b.n	8005f90 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	212c      	movs	r1, #44	; 0x2c
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	4413      	add	r3, r2
 8005f8a:	3360      	adds	r3, #96	; 0x60
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2380      	movs	r3, #128	; 0x80
 8005fa0:	6093      	str	r3, [r2, #8]
}
 8005fa2:	e19b      	b.n	80062dc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fba:	d134      	bne.n	8006026 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fd6:	f043 0302 	orr.w	r3, r3, #2
 8005fda:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f005 fc3f 	bl	800b86a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	2310      	movs	r3, #16
 8005ffc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	4413      	add	r3, r2
 8006006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600a:	461a      	mov	r2, r3
 800600c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006010:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	212c      	movs	r1, #44	; 0x2c
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	4413      	add	r3, r2
 800601e:	3361      	adds	r3, #97	; 0x61
 8006020:	2208      	movs	r2, #8
 8006022:	701a      	strb	r2, [r3, #0]
}
 8006024:	e15a      	b.n	80062dc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	4413      	add	r3, r2
 800602e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b02      	cmp	r3, #2
 800603a:	f040 814f 	bne.w	80062dc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	440a      	add	r2, r1
 8006054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006058:	f023 0302 	bic.w	r3, r3, #2
 800605c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	212c      	movs	r1, #44	; 0x2c
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	4413      	add	r3, r2
 800606a:	3361      	adds	r3, #97	; 0x61
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d17d      	bne.n	800616e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	212c      	movs	r1, #44	; 0x2c
 8006078:	fb01 f303 	mul.w	r3, r1, r3
 800607c:	4413      	add	r3, r2
 800607e:	3360      	adds	r3, #96	; 0x60
 8006080:	2201      	movs	r2, #1
 8006082:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	212c      	movs	r1, #44	; 0x2c
 800608a:	fb01 f303 	mul.w	r3, r1, r3
 800608e:	4413      	add	r3, r2
 8006090:	333f      	adds	r3, #63	; 0x3f
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b02      	cmp	r3, #2
 8006096:	d00a      	beq.n	80060ae <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	212c      	movs	r1, #44	; 0x2c
 800609e:	fb01 f303 	mul.w	r3, r1, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	333f      	adds	r3, #63	; 0x3f
 80060a6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	f040 8100 	bne.w	80062ae <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d113      	bne.n	80060de <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	212c      	movs	r1, #44	; 0x2c
 80060bc:	fb01 f303 	mul.w	r3, r1, r3
 80060c0:	4413      	add	r3, r2
 80060c2:	3355      	adds	r3, #85	; 0x55
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	f083 0301 	eor.w	r3, r3, #1
 80060ca:	b2d8      	uxtb	r0, r3
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	212c      	movs	r1, #44	; 0x2c
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	4413      	add	r3, r2
 80060d8:	3355      	adds	r3, #85	; 0x55
 80060da:	4602      	mov	r2, r0
 80060dc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	f040 80e3 	bne.w	80062ae <HCD_HC_OUT_IRQHandler+0x7cc>
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	212c      	movs	r1, #44	; 0x2c
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
 80060f2:	4413      	add	r3, r2
 80060f4:	334c      	adds	r3, #76	; 0x4c
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 80d8 	beq.w	80062ae <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	212c      	movs	r1, #44	; 0x2c
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	4413      	add	r3, r2
 800610a:	334c      	adds	r3, #76	; 0x4c
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	202c      	movs	r0, #44	; 0x2c
 8006114:	fb00 f202 	mul.w	r2, r0, r2
 8006118:	440a      	add	r2, r1
 800611a:	3240      	adds	r2, #64	; 0x40
 800611c:	8812      	ldrh	r2, [r2, #0]
 800611e:	4413      	add	r3, r2
 8006120:	3b01      	subs	r3, #1
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	202c      	movs	r0, #44	; 0x2c
 8006128:	fb00 f202 	mul.w	r2, r0, r2
 800612c:	440a      	add	r2, r1
 800612e:	3240      	adds	r2, #64	; 0x40
 8006130:	8812      	ldrh	r2, [r2, #0]
 8006132:	fbb3 f3f2 	udiv	r3, r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 80b5 	beq.w	80062ae <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	212c      	movs	r1, #44	; 0x2c
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	4413      	add	r3, r2
 8006150:	3355      	adds	r3, #85	; 0x55
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f083 0301 	eor.w	r3, r3, #1
 8006158:	b2d8      	uxtb	r0, r3
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	212c      	movs	r1, #44	; 0x2c
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	4413      	add	r3, r2
 8006166:	3355      	adds	r3, #85	; 0x55
 8006168:	4602      	mov	r2, r0
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	e09f      	b.n	80062ae <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	212c      	movs	r1, #44	; 0x2c
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	4413      	add	r3, r2
 800617a:	3361      	adds	r3, #97	; 0x61
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b03      	cmp	r3, #3
 8006180:	d109      	bne.n	8006196 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	212c      	movs	r1, #44	; 0x2c
 8006188:	fb01 f303 	mul.w	r3, r1, r3
 800618c:	4413      	add	r3, r2
 800618e:	3360      	adds	r3, #96	; 0x60
 8006190:	2202      	movs	r2, #2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	e08b      	b.n	80062ae <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	212c      	movs	r1, #44	; 0x2c
 800619c:	fb01 f303 	mul.w	r3, r1, r3
 80061a0:	4413      	add	r3, r2
 80061a2:	3361      	adds	r3, #97	; 0x61
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d109      	bne.n	80061be <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	212c      	movs	r1, #44	; 0x2c
 80061b0:	fb01 f303 	mul.w	r3, r1, r3
 80061b4:	4413      	add	r3, r2
 80061b6:	3360      	adds	r3, #96	; 0x60
 80061b8:	2202      	movs	r2, #2
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	e077      	b.n	80062ae <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	212c      	movs	r1, #44	; 0x2c
 80061c4:	fb01 f303 	mul.w	r3, r1, r3
 80061c8:	4413      	add	r3, r2
 80061ca:	3361      	adds	r3, #97	; 0x61
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	d109      	bne.n	80061e6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	212c      	movs	r1, #44	; 0x2c
 80061d8:	fb01 f303 	mul.w	r3, r1, r3
 80061dc:	4413      	add	r3, r2
 80061de:	3360      	adds	r3, #96	; 0x60
 80061e0:	2205      	movs	r2, #5
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	e063      	b.n	80062ae <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	212c      	movs	r1, #44	; 0x2c
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	4413      	add	r3, r2
 80061f2:	3361      	adds	r3, #97	; 0x61
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b06      	cmp	r3, #6
 80061f8:	d009      	beq.n	800620e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	212c      	movs	r1, #44	; 0x2c
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	4413      	add	r3, r2
 8006206:	3361      	adds	r3, #97	; 0x61
 8006208:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800620a:	2b08      	cmp	r3, #8
 800620c:	d14f      	bne.n	80062ae <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	212c      	movs	r1, #44	; 0x2c
 8006214:	fb01 f303 	mul.w	r3, r1, r3
 8006218:	4413      	add	r3, r2
 800621a:	335c      	adds	r3, #92	; 0x5c
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	202c      	movs	r0, #44	; 0x2c
 8006226:	fb00 f303 	mul.w	r3, r0, r3
 800622a:	440b      	add	r3, r1
 800622c:	335c      	adds	r3, #92	; 0x5c
 800622e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	212c      	movs	r1, #44	; 0x2c
 8006236:	fb01 f303 	mul.w	r3, r1, r3
 800623a:	4413      	add	r3, r2
 800623c:	335c      	adds	r3, #92	; 0x5c
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b02      	cmp	r3, #2
 8006242:	d912      	bls.n	800626a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	212c      	movs	r1, #44	; 0x2c
 800624a:	fb01 f303 	mul.w	r3, r1, r3
 800624e:	4413      	add	r3, r2
 8006250:	335c      	adds	r3, #92	; 0x5c
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	212c      	movs	r1, #44	; 0x2c
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	4413      	add	r3, r2
 8006262:	3360      	adds	r3, #96	; 0x60
 8006264:	2204      	movs	r2, #4
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	e021      	b.n	80062ae <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	212c      	movs	r1, #44	; 0x2c
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	4413      	add	r3, r2
 8006276:	3360      	adds	r3, #96	; 0x60
 8006278:	2202      	movs	r2, #2
 800627a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	4413      	add	r3, r2
 8006284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006292:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800629a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a8:	461a      	mov	r2, r3
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ba:	461a      	mov	r2, r3
 80062bc:	2302      	movs	r3, #2
 80062be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	b2d9      	uxtb	r1, r3
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	202c      	movs	r0, #44	; 0x2c
 80062ca:	fb00 f303 	mul.w	r3, r0, r3
 80062ce:	4413      	add	r3, r2
 80062d0:	3360      	adds	r3, #96	; 0x60
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f00b f940 	bl	801155c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80062dc:	bf00      	nop
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08a      	sub	sp, #40	; 0x28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	0c5b      	lsrs	r3, r3, #17
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	091b      	lsrs	r3, r3, #4
 8006314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006318:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b02      	cmp	r3, #2
 800631e:	d004      	beq.n	800632a <HCD_RXQLVL_IRQHandler+0x46>
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b05      	cmp	r3, #5
 8006324:	f000 80a9 	beq.w	800647a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006328:	e0aa      	b.n	8006480 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 80a6 	beq.w	800647e <HCD_RXQLVL_IRQHandler+0x19a>
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	212c      	movs	r1, #44	; 0x2c
 8006338:	fb01 f303 	mul.w	r3, r1, r3
 800633c:	4413      	add	r3, r2
 800633e:	3344      	adds	r3, #68	; 0x44
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 809b 	beq.w	800647e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	212c      	movs	r1, #44	; 0x2c
 800634e:	fb01 f303 	mul.w	r3, r1, r3
 8006352:	4413      	add	r3, r2
 8006354:	3350      	adds	r3, #80	; 0x50
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	441a      	add	r2, r3
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	202c      	movs	r0, #44	; 0x2c
 8006362:	fb00 f303 	mul.w	r3, r0, r3
 8006366:	440b      	add	r3, r1
 8006368:	334c      	adds	r3, #76	; 0x4c
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d87a      	bhi.n	8006466 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	212c      	movs	r1, #44	; 0x2c
 800637a:	fb01 f303 	mul.w	r3, r1, r3
 800637e:	4413      	add	r3, r2
 8006380:	3344      	adds	r3, #68	; 0x44
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	b292      	uxth	r2, r2
 8006388:	4619      	mov	r1, r3
 800638a:	f004 fde7 	bl	800af5c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	212c      	movs	r1, #44	; 0x2c
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	4413      	add	r3, r2
 800639a:	3344      	adds	r3, #68	; 0x44
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	441a      	add	r2, r3
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	202c      	movs	r0, #44	; 0x2c
 80063a8:	fb00 f303 	mul.w	r3, r0, r3
 80063ac:	440b      	add	r3, r1
 80063ae:	3344      	adds	r3, #68	; 0x44
 80063b0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	212c      	movs	r1, #44	; 0x2c
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	4413      	add	r3, r2
 80063be:	3350      	adds	r3, #80	; 0x50
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	441a      	add	r2, r3
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	202c      	movs	r0, #44	; 0x2c
 80063cc:	fb00 f303 	mul.w	r3, r0, r3
 80063d0:	440b      	add	r3, r1
 80063d2:	3350      	adds	r3, #80	; 0x50
 80063d4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	0cdb      	lsrs	r3, r3, #19
 80063e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ea:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	212c      	movs	r1, #44	; 0x2c
 80063f2:	fb01 f303 	mul.w	r3, r1, r3
 80063f6:	4413      	add	r3, r2
 80063f8:	3340      	adds	r3, #64	; 0x40
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	4293      	cmp	r3, r2
 8006402:	d13c      	bne.n	800647e <HCD_RXQLVL_IRQHandler+0x19a>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d039      	beq.n	800647e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	4413      	add	r3, r2
 8006412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006420:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006428:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	4413      	add	r3, r2
 8006432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006436:	461a      	mov	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	212c      	movs	r1, #44	; 0x2c
 8006442:	fb01 f303 	mul.w	r3, r1, r3
 8006446:	4413      	add	r3, r2
 8006448:	3354      	adds	r3, #84	; 0x54
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	f083 0301 	eor.w	r3, r3, #1
 8006450:	b2d8      	uxtb	r0, r3
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	212c      	movs	r1, #44	; 0x2c
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	4413      	add	r3, r2
 800645e:	3354      	adds	r3, #84	; 0x54
 8006460:	4602      	mov	r2, r0
 8006462:	701a      	strb	r2, [r3, #0]
      break;
 8006464:	e00b      	b.n	800647e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	212c      	movs	r1, #44	; 0x2c
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	4413      	add	r3, r2
 8006472:	3360      	adds	r3, #96	; 0x60
 8006474:	2204      	movs	r2, #4
 8006476:	701a      	strb	r2, [r3, #0]
      break;
 8006478:	e001      	b.n	800647e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800647a:	bf00      	nop
 800647c:	e000      	b.n	8006480 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800647e:	bf00      	nop
  }
}
 8006480:	bf00      	nop
 8006482:	3728      	adds	r7, #40	; 0x28
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80064b4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d10b      	bne.n	80064d8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d102      	bne.n	80064d0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f00b f82a 	bl	8011524 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f043 0302 	orr.w	r3, r3, #2
 80064d6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d132      	bne.n	8006548 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f043 0308 	orr.w	r3, r3, #8
 80064e8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d126      	bne.n	8006542 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d113      	bne.n	8006524 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006502:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006506:	d106      	bne.n	8006516 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2102      	movs	r1, #2
 800650e:	4618      	mov	r0, r3
 8006510:	f004 fe84 	bl	800b21c <USB_InitFSLSPClkSel>
 8006514:	e011      	b.n	800653a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2101      	movs	r1, #1
 800651c:	4618      	mov	r0, r3
 800651e:	f004 fe7d 	bl	800b21c <USB_InitFSLSPClkSel>
 8006522:	e00a      	b.n	800653a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d106      	bne.n	800653a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006532:	461a      	mov	r2, r3
 8006534:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006538:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f00b f820 	bl	8011580 <HAL_HCD_PortEnabled_Callback>
 8006540:	e002      	b.n	8006548 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f00b f82a 	bl	801159c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b20      	cmp	r3, #32
 8006550:	d103      	bne.n	800655a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f043 0320 	orr.w	r3, r3, #32
 8006558:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006560:	461a      	mov	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	6013      	str	r3, [r2, #0]
}
 8006566:	bf00      	nop
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e12b      	b.n	80067da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d106      	bne.n	800659c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fc ff1e 	bl	80033d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2224      	movs	r2, #36	; 0x24
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0201 	bic.w	r2, r2, #1
 80065b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065d4:	f002 f9f8 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 80065d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	4a81      	ldr	r2, [pc, #516]	; (80067e4 <HAL_I2C_Init+0x274>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d807      	bhi.n	80065f4 <HAL_I2C_Init+0x84>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4a80      	ldr	r2, [pc, #512]	; (80067e8 <HAL_I2C_Init+0x278>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	bf94      	ite	ls
 80065ec:	2301      	movls	r3, #1
 80065ee:	2300      	movhi	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	e006      	b.n	8006602 <HAL_I2C_Init+0x92>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a7d      	ldr	r2, [pc, #500]	; (80067ec <HAL_I2C_Init+0x27c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	bf94      	ite	ls
 80065fc:	2301      	movls	r3, #1
 80065fe:	2300      	movhi	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e0e7      	b.n	80067da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4a78      	ldr	r2, [pc, #480]	; (80067f0 <HAL_I2C_Init+0x280>)
 800660e:	fba2 2303 	umull	r2, r3, r2, r3
 8006612:	0c9b      	lsrs	r3, r3, #18
 8006614:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	4a6a      	ldr	r2, [pc, #424]	; (80067e4 <HAL_I2C_Init+0x274>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d802      	bhi.n	8006644 <HAL_I2C_Init+0xd4>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3301      	adds	r3, #1
 8006642:	e009      	b.n	8006658 <HAL_I2C_Init+0xe8>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800664a:	fb02 f303 	mul.w	r3, r2, r3
 800664e:	4a69      	ldr	r2, [pc, #420]	; (80067f4 <HAL_I2C_Init+0x284>)
 8006650:	fba2 2303 	umull	r2, r3, r2, r3
 8006654:	099b      	lsrs	r3, r3, #6
 8006656:	3301      	adds	r3, #1
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	430b      	orrs	r3, r1
 800665e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800666a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	495c      	ldr	r1, [pc, #368]	; (80067e4 <HAL_I2C_Init+0x274>)
 8006674:	428b      	cmp	r3, r1
 8006676:	d819      	bhi.n	80066ac <HAL_I2C_Init+0x13c>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	1e59      	subs	r1, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	fbb1 f3f3 	udiv	r3, r1, r3
 8006686:	1c59      	adds	r1, r3, #1
 8006688:	f640 73fc 	movw	r3, #4092	; 0xffc
 800668c:	400b      	ands	r3, r1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <HAL_I2C_Init+0x138>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1e59      	subs	r1, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	fbb1 f3f3 	udiv	r3, r1, r3
 80066a0:	3301      	adds	r3, #1
 80066a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a6:	e051      	b.n	800674c <HAL_I2C_Init+0x1dc>
 80066a8:	2304      	movs	r3, #4
 80066aa:	e04f      	b.n	800674c <HAL_I2C_Init+0x1dc>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d111      	bne.n	80066d8 <HAL_I2C_Init+0x168>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	1e58      	subs	r0, r3, #1
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6859      	ldr	r1, [r3, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	440b      	add	r3, r1
 80066c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066c6:	3301      	adds	r3, #1
 80066c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bf0c      	ite	eq
 80066d0:	2301      	moveq	r3, #1
 80066d2:	2300      	movne	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	e012      	b.n	80066fe <HAL_I2C_Init+0x18e>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	1e58      	subs	r0, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6859      	ldr	r1, [r3, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	440b      	add	r3, r1
 80066e6:	0099      	lsls	r1, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80066ee:	3301      	adds	r3, #1
 80066f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bf0c      	ite	eq
 80066f8:	2301      	moveq	r3, #1
 80066fa:	2300      	movne	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <HAL_I2C_Init+0x196>
 8006702:	2301      	movs	r3, #1
 8006704:	e022      	b.n	800674c <HAL_I2C_Init+0x1dc>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10e      	bne.n	800672c <HAL_I2C_Init+0x1bc>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	1e58      	subs	r0, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6859      	ldr	r1, [r3, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	440b      	add	r3, r1
 800671c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006720:	3301      	adds	r3, #1
 8006722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672a:	e00f      	b.n	800674c <HAL_I2C_Init+0x1dc>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	1e58      	subs	r0, r3, #1
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6859      	ldr	r1, [r3, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	440b      	add	r3, r1
 800673a:	0099      	lsls	r1, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006742:	3301      	adds	r3, #1
 8006744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	6809      	ldr	r1, [r1, #0]
 8006750:	4313      	orrs	r3, r2
 8006752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69da      	ldr	r2, [r3, #28]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800677a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6911      	ldr	r1, [r2, #16]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68d2      	ldr	r2, [r2, #12]
 8006786:	4311      	orrs	r1, r2
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	430b      	orrs	r3, r1
 800678e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695a      	ldr	r2, [r3, #20]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0201 	orr.w	r2, r2, #1
 80067ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	000186a0 	.word	0x000186a0
 80067e8:	001e847f 	.word	0x001e847f
 80067ec:	003d08ff 	.word	0x003d08ff
 80067f0:	431bde83 	.word	0x431bde83
 80067f4:	10624dd3 	.word	0x10624dd3

080067f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af02      	add	r7, sp, #8
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	607a      	str	r2, [r7, #4]
 8006802:	461a      	mov	r2, r3
 8006804:	460b      	mov	r3, r1
 8006806:	817b      	strh	r3, [r7, #10]
 8006808:	4613      	mov	r3, r2
 800680a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800680c:	f7fd fdaa 	bl	8004364 <HAL_GetTick>
 8006810:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b20      	cmp	r3, #32
 800681c:	f040 80e0 	bne.w	80069e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	2319      	movs	r3, #25
 8006826:	2201      	movs	r2, #1
 8006828:	4970      	ldr	r1, [pc, #448]	; (80069ec <HAL_I2C_Master_Transmit+0x1f4>)
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fe02 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006836:	2302      	movs	r3, #2
 8006838:	e0d3      	b.n	80069e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_I2C_Master_Transmit+0x50>
 8006844:	2302      	movs	r3, #2
 8006846:	e0cc      	b.n	80069e2 <HAL_I2C_Master_Transmit+0x1ea>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b01      	cmp	r3, #1
 800685c:	d007      	beq.n	800686e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f042 0201 	orr.w	r2, r2, #1
 800686c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800687c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2221      	movs	r2, #33	; 0x21
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2210      	movs	r2, #16
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	893a      	ldrh	r2, [r7, #8]
 800689e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4a50      	ldr	r2, [pc, #320]	; (80069f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80068ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80068b0:	8979      	ldrh	r1, [r7, #10]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	6a3a      	ldr	r2, [r7, #32]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fbbc 	bl	8007034 <I2C_MasterRequestWrite>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e08d      	b.n	80069e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c6:	2300      	movs	r3, #0
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80068dc:	e066      	b.n	80069ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	6a39      	ldr	r1, [r7, #32]
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 fe7c 	bl	80075e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00d      	beq.n	800690a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d107      	bne.n	8006906 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006904:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e06b      	b.n	80069e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	781a      	ldrb	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b04      	cmp	r3, #4
 8006946:	d11b      	bne.n	8006980 <HAL_I2C_Master_Transmit+0x188>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800694c:	2b00      	cmp	r3, #0
 800694e:	d017      	beq.n	8006980 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	781a      	ldrb	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	6a39      	ldr	r1, [r7, #32]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 fe6c 	bl	8007662 <I2C_WaitOnBTFFlagUntilTimeout>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00d      	beq.n	80069ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	2b04      	cmp	r3, #4
 8006996:	d107      	bne.n	80069a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e01a      	b.n	80069e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d194      	bne.n	80068de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	e000      	b.n	80069e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80069e0:	2302      	movs	r3, #2
  }
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	00100002 	.word	0x00100002
 80069f0:	ffff0000 	.word	0xffff0000

080069f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	4608      	mov	r0, r1
 80069fe:	4611      	mov	r1, r2
 8006a00:	461a      	mov	r2, r3
 8006a02:	4603      	mov	r3, r0
 8006a04:	817b      	strh	r3, [r7, #10]
 8006a06:	460b      	mov	r3, r1
 8006a08:	813b      	strh	r3, [r7, #8]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a0e:	f7fd fca9 	bl	8004364 <HAL_GetTick>
 8006a12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	f040 80d9 	bne.w	8006bd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	2319      	movs	r3, #25
 8006a28:	2201      	movs	r2, #1
 8006a2a:	496d      	ldr	r1, [pc, #436]	; (8006be0 <HAL_I2C_Mem_Write+0x1ec>)
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 fd01 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e0cc      	b.n	8006bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d101      	bne.n	8006a4a <HAL_I2C_Mem_Write+0x56>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e0c5      	b.n	8006bd6 <HAL_I2C_Mem_Write+0x1e2>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d007      	beq.n	8006a70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0201 	orr.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2221      	movs	r2, #33	; 0x21
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2240      	movs	r2, #64	; 0x40
 8006a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a3a      	ldr	r2, [r7, #32]
 8006a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4a4d      	ldr	r2, [pc, #308]	; (8006be4 <HAL_I2C_Mem_Write+0x1f0>)
 8006ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ab2:	88f8      	ldrh	r0, [r7, #6]
 8006ab4:	893a      	ldrh	r2, [r7, #8]
 8006ab6:	8979      	ldrh	r1, [r7, #10]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fb38 	bl	8007138 <I2C_RequestMemoryWrite>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d052      	beq.n	8006b74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e081      	b.n	8006bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 fd82 	bl	80075e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00d      	beq.n	8006afe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d107      	bne.n	8006afa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006af8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e06b      	b.n	8006bd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	781a      	ldrb	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d11b      	bne.n	8006b74 <HAL_I2C_Mem_Write+0x180>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d017      	beq.n	8006b74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	781a      	ldrb	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1aa      	bne.n	8006ad2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 fd6e 	bl	8007662 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00d      	beq.n	8006ba8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d107      	bne.n	8006ba4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ba2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e016      	b.n	8006bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e000      	b.n	8006bd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006bd4:	2302      	movs	r3, #2
  }
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	00100002 	.word	0x00100002
 8006be4:	ffff0000 	.word	0xffff0000

08006be8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08c      	sub	sp, #48	; 0x30
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	817b      	strh	r3, [r7, #10]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	813b      	strh	r3, [r7, #8]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c02:	f7fd fbaf 	bl	8004364 <HAL_GetTick>
 8006c06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	f040 8208 	bne.w	8007026 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	2319      	movs	r3, #25
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	497b      	ldr	r1, [pc, #492]	; (8006e0c <HAL_I2C_Mem_Read+0x224>)
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 fc07 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e1fb      	b.n	8007028 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_I2C_Mem_Read+0x56>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e1f4      	b.n	8007028 <HAL_I2C_Mem_Read+0x440>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d007      	beq.n	8006c64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0201 	orr.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2222      	movs	r2, #34	; 0x22
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2240      	movs	r2, #64	; 0x40
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4a5b      	ldr	r2, [pc, #364]	; (8006e10 <HAL_I2C_Mem_Read+0x228>)
 8006ca4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ca6:	88f8      	ldrh	r0, [r7, #6]
 8006ca8:	893a      	ldrh	r2, [r7, #8]
 8006caa:	8979      	ldrh	r1, [r7, #10]
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fad4 	bl	8007264 <I2C_RequestMemoryRead>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e1b0      	b.n	8007028 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d113      	bne.n	8006cf6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cce:	2300      	movs	r3, #0
 8006cd0:	623b      	str	r3, [r7, #32]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	623b      	str	r3, [r7, #32]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	623b      	str	r3, [r7, #32]
 8006ce2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	e184      	b.n	8007000 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d11b      	bne.n	8006d36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61fb      	str	r3, [r7, #28]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	61fb      	str	r3, [r7, #28]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	e164      	b.n	8007000 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d11b      	bne.n	8006d76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	61bb      	str	r3, [r7, #24]
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	e144      	b.n	8007000 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d8c:	e138      	b.n	8007000 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	f200 80f1 	bhi.w	8006f7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d123      	bne.n	8006de8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fc9d 	bl	80076e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e139      	b.n	8007028 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691a      	ldr	r2, [r3, #16]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006de6:	e10b      	b.n	8007000 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d14e      	bne.n	8006e8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	2200      	movs	r2, #0
 8006df8:	4906      	ldr	r1, [pc, #24]	; (8006e14 <HAL_I2C_Mem_Read+0x22c>)
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fb1a 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e10e      	b.n	8007028 <HAL_I2C_Mem_Read+0x440>
 8006e0a:	bf00      	nop
 8006e0c:	00100002 	.word	0x00100002
 8006e10:	ffff0000 	.word	0xffff0000
 8006e14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691a      	ldr	r2, [r3, #16]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e8c:	e0b8      	b.n	8007000 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	2200      	movs	r2, #0
 8006e96:	4966      	ldr	r1, [pc, #408]	; (8007030 <HAL_I2C_Mem_Read+0x448>)
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 facb 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0bf      	b.n	8007028 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691a      	ldr	r2, [r3, #16]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	494f      	ldr	r1, [pc, #316]	; (8007030 <HAL_I2C_Mem_Read+0x448>)
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fa9d 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e091      	b.n	8007028 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691a      	ldr	r2, [r3, #16]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f78:	e042      	b.n	8007000 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 fbb0 	bl	80076e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e04c      	b.n	8007028 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	b2d2      	uxtb	r2, r2
 8006f9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d118      	bne.n	8007000 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007004:	2b00      	cmp	r3, #0
 8007006:	f47f aec2 	bne.w	8006d8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2220      	movs	r2, #32
 800700e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	e000      	b.n	8007028 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007026:	2302      	movs	r3, #2
  }
}
 8007028:	4618      	mov	r0, r3
 800702a:	3728      	adds	r7, #40	; 0x28
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	00010004 	.word	0x00010004

08007034 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af02      	add	r7, sp, #8
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	607a      	str	r2, [r7, #4]
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	460b      	mov	r3, r1
 8007042:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b08      	cmp	r3, #8
 800704e:	d006      	beq.n	800705e <I2C_MasterRequestWrite+0x2a>
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d003      	beq.n	800705e <I2C_MasterRequestWrite+0x2a>
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800705c:	d108      	bne.n	8007070 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	e00b      	b.n	8007088 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	2b12      	cmp	r3, #18
 8007076:	d107      	bne.n	8007088 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007086:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f9cd 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00d      	beq.n	80070bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ae:	d103      	bne.n	80070b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e035      	b.n	8007128 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c4:	d108      	bne.n	80070d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070c6:	897b      	ldrh	r3, [r7, #10]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	461a      	mov	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070d4:	611a      	str	r2, [r3, #16]
 80070d6:	e01b      	b.n	8007110 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070d8:	897b      	ldrh	r3, [r7, #10]
 80070da:	11db      	asrs	r3, r3, #7
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	f003 0306 	and.w	r3, r3, #6
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f063 030f 	orn	r3, r3, #15
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	490e      	ldr	r1, [pc, #56]	; (8007130 <I2C_MasterRequestWrite+0xfc>)
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f9f3 	bl	80074e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e010      	b.n	8007128 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007106:	897b      	ldrh	r3, [r7, #10]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	4907      	ldr	r1, [pc, #28]	; (8007134 <I2C_MasterRequestWrite+0x100>)
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 f9e3 	bl	80074e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e000      	b.n	8007128 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	00010008 	.word	0x00010008
 8007134:	00010002 	.word	0x00010002

08007138 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af02      	add	r7, sp, #8
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	4608      	mov	r0, r1
 8007142:	4611      	mov	r1, r2
 8007144:	461a      	mov	r2, r3
 8007146:	4603      	mov	r3, r0
 8007148:	817b      	strh	r3, [r7, #10]
 800714a:	460b      	mov	r3, r1
 800714c:	813b      	strh	r3, [r7, #8]
 800714e:	4613      	mov	r3, r2
 8007150:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007160:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	2200      	movs	r2, #0
 800716a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f960 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00d      	beq.n	8007196 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007188:	d103      	bne.n	8007192 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007190:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e05f      	b.n	8007256 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007196:	897b      	ldrh	r3, [r7, #10]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	461a      	mov	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	6a3a      	ldr	r2, [r7, #32]
 80071aa:	492d      	ldr	r1, [pc, #180]	; (8007260 <I2C_RequestMemoryWrite+0x128>)
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f998 	bl	80074e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e04c      	b.n	8007256 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071bc:	2300      	movs	r3, #0
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d4:	6a39      	ldr	r1, [r7, #32]
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 fa02 	bl	80075e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00d      	beq.n	80071fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d107      	bne.n	80071fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e02b      	b.n	8007256 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d105      	bne.n	8007210 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007204:	893b      	ldrh	r3, [r7, #8]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	611a      	str	r2, [r3, #16]
 800720e:	e021      	b.n	8007254 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007210:	893b      	ldrh	r3, [r7, #8]
 8007212:	0a1b      	lsrs	r3, r3, #8
 8007214:	b29b      	uxth	r3, r3
 8007216:	b2da      	uxtb	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800721e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007220:	6a39      	ldr	r1, [r7, #32]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 f9dc 	bl	80075e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00d      	beq.n	800724a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	2b04      	cmp	r3, #4
 8007234:	d107      	bne.n	8007246 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007244:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e005      	b.n	8007256 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800724a:	893b      	ldrh	r3, [r7, #8]
 800724c:	b2da      	uxtb	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	00010002 	.word	0x00010002

08007264 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	4608      	mov	r0, r1
 800726e:	4611      	mov	r1, r2
 8007270:	461a      	mov	r2, r3
 8007272:	4603      	mov	r3, r0
 8007274:	817b      	strh	r3, [r7, #10]
 8007276:	460b      	mov	r3, r1
 8007278:	813b      	strh	r3, [r7, #8]
 800727a:	4613      	mov	r3, r2
 800727c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800728c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800729c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 f8c2 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00d      	beq.n	80072d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c4:	d103      	bne.n	80072ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e0aa      	b.n	8007428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072d2:	897b      	ldrh	r3, [r7, #10]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	461a      	mov	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	6a3a      	ldr	r2, [r7, #32]
 80072e6:	4952      	ldr	r1, [pc, #328]	; (8007430 <I2C_RequestMemoryRead+0x1cc>)
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f8fa 	bl	80074e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e097      	b.n	8007428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800730e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007310:	6a39      	ldr	r1, [r7, #32]
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 f964 	bl	80075e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00d      	beq.n	800733a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	2b04      	cmp	r3, #4
 8007324:	d107      	bne.n	8007336 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007334:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e076      	b.n	8007428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800733a:	88fb      	ldrh	r3, [r7, #6]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d105      	bne.n	800734c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007340:	893b      	ldrh	r3, [r7, #8]
 8007342:	b2da      	uxtb	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	611a      	str	r2, [r3, #16]
 800734a:	e021      	b.n	8007390 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800734c:	893b      	ldrh	r3, [r7, #8]
 800734e:	0a1b      	lsrs	r3, r3, #8
 8007350:	b29b      	uxth	r3, r3
 8007352:	b2da      	uxtb	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800735a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735c:	6a39      	ldr	r1, [r7, #32]
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 f93e 	bl	80075e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00d      	beq.n	8007386 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	2b04      	cmp	r3, #4
 8007370:	d107      	bne.n	8007382 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007380:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e050      	b.n	8007428 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007386:	893b      	ldrh	r3, [r7, #8]
 8007388:	b2da      	uxtb	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007392:	6a39      	ldr	r1, [r7, #32]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 f923 	bl	80075e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00d      	beq.n	80073bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d107      	bne.n	80073b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e035      	b.n	8007428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 f82b 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00d      	beq.n	8007400 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f2:	d103      	bne.n	80073fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e013      	b.n	8007428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007400:	897b      	ldrh	r3, [r7, #10]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f043 0301 	orr.w	r3, r3, #1
 8007408:	b2da      	uxtb	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	6a3a      	ldr	r2, [r7, #32]
 8007414:	4906      	ldr	r1, [pc, #24]	; (8007430 <I2C_RequestMemoryRead+0x1cc>)
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 f863 	bl	80074e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e000      	b.n	8007428 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	00010002 	.word	0x00010002

08007434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	4613      	mov	r3, r2
 8007442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007444:	e025      	b.n	8007492 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800744c:	d021      	beq.n	8007492 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800744e:	f7fc ff89 	bl	8004364 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d302      	bcc.n	8007464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d116      	bne.n	8007492 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2220      	movs	r2, #32
 800746e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	f043 0220 	orr.w	r2, r3, #32
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e023      	b.n	80074da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	0c1b      	lsrs	r3, r3, #16
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b01      	cmp	r3, #1
 800749a:	d10d      	bne.n	80074b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	43da      	mvns	r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4013      	ands	r3, r2
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bf0c      	ite	eq
 80074ae:	2301      	moveq	r3, #1
 80074b0:	2300      	movne	r3, #0
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	e00c      	b.n	80074d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	43da      	mvns	r2, r3
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	4013      	ands	r3, r2
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	bf0c      	ite	eq
 80074ca:	2301      	moveq	r3, #1
 80074cc:	2300      	movne	r3, #0
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	461a      	mov	r2, r3
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d0b6      	beq.n	8007446 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
 80074ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074f0:	e051      	b.n	8007596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007500:	d123      	bne.n	800754a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007510:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800751a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f043 0204 	orr.w	r2, r3, #4
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e046      	b.n	80075d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007550:	d021      	beq.n	8007596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007552:	f7fc ff07 	bl	8004364 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	429a      	cmp	r2, r3
 8007560:	d302      	bcc.n	8007568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d116      	bne.n	8007596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2220      	movs	r2, #32
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f043 0220 	orr.w	r2, r3, #32
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e020      	b.n	80075d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	0c1b      	lsrs	r3, r3, #16
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	d10c      	bne.n	80075ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	43da      	mvns	r2, r3
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4013      	ands	r3, r2
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	bf14      	ite	ne
 80075b2:	2301      	movne	r3, #1
 80075b4:	2300      	moveq	r3, #0
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	e00b      	b.n	80075d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	43da      	mvns	r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	4013      	ands	r3, r2
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bf14      	ite	ne
 80075cc:	2301      	movne	r3, #1
 80075ce:	2300      	moveq	r3, #0
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d18d      	bne.n	80074f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075ec:	e02d      	b.n	800764a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 f8ce 	bl	8007790 <I2C_IsAcknowledgeFailed>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e02d      	b.n	800765a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007604:	d021      	beq.n	800764a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007606:	f7fc fead 	bl	8004364 <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	429a      	cmp	r2, r3
 8007614:	d302      	bcc.n	800761c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d116      	bne.n	800764a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007636:	f043 0220 	orr.w	r2, r3, #32
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e007      	b.n	800765a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007654:	2b80      	cmp	r3, #128	; 0x80
 8007656:	d1ca      	bne.n	80075ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800766e:	e02d      	b.n	80076cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 f88d 	bl	8007790 <I2C_IsAcknowledgeFailed>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e02d      	b.n	80076dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007686:	d021      	beq.n	80076cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007688:	f7fc fe6c 	bl	8004364 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	429a      	cmp	r2, r3
 8007696:	d302      	bcc.n	800769e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d116      	bne.n	80076cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	f043 0220 	orr.w	r2, r3, #32
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e007      	b.n	80076dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d1ca      	bne.n	8007670 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076f0:	e042      	b.n	8007778 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b10      	cmp	r3, #16
 80076fe:	d119      	bne.n	8007734 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0210 	mvn.w	r2, #16
 8007708:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e029      	b.n	8007788 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007734:	f7fc fe16 	bl	8004364 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	429a      	cmp	r2, r3
 8007742:	d302      	bcc.n	800774a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d116      	bne.n	8007778 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2220      	movs	r2, #32
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007764:	f043 0220 	orr.w	r2, r3, #32
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e007      	b.n	8007788 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007782:	2b40      	cmp	r3, #64	; 0x40
 8007784:	d1b5      	bne.n	80076f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a6:	d11b      	bne.n	80077e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077cc:	f043 0204 	orr.w	r2, r3, #4
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e000      	b.n	80077e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e128      	b.n	8007a54 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d109      	bne.n	8007822 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a90      	ldr	r2, [pc, #576]	; (8007a5c <HAL_I2S_Init+0x26c>)
 800781a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7fb fe7b 	bl	8003518 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2202      	movs	r2, #2
 8007826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6812      	ldr	r2, [r2, #0]
 8007834:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007838:	f023 030f 	bic.w	r3, r3, #15
 800783c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2202      	movs	r2, #2
 8007844:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d060      	beq.n	8007910 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d102      	bne.n	800785c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007856:	2310      	movs	r3, #16
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	e001      	b.n	8007860 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800785c:	2320      	movs	r3, #32
 800785e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b20      	cmp	r3, #32
 8007866:	d802      	bhi.n	800786e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800786e:	2001      	movs	r0, #1
 8007870:	f001 f9e6 	bl	8008c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8007874:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800787e:	d125      	bne.n	80078cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d010      	beq.n	80078aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007892:	4613      	mov	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	461a      	mov	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a4:	3305      	adds	r3, #5
 80078a6:	613b      	str	r3, [r7, #16]
 80078a8:	e01f      	b.n	80078ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	461a      	mov	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c6:	3305      	adds	r3, #5
 80078c8:	613b      	str	r3, [r7, #16]
 80078ca:	e00e      	b.n	80078ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	461a      	mov	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e6:	3305      	adds	r3, #5
 80078e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	4a5c      	ldr	r2, [pc, #368]	; (8007a60 <HAL_I2S_Init+0x270>)
 80078ee:	fba2 2303 	umull	r2, r3, r2, r3
 80078f2:	08db      	lsrs	r3, r3, #3
 80078f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	085b      	lsrs	r3, r3, #1
 8007906:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	021b      	lsls	r3, r3, #8
 800790c:	61bb      	str	r3, [r7, #24]
 800790e:	e003      	b.n	8007918 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007910:	2302      	movs	r3, #2
 8007912:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d902      	bls.n	8007924 <HAL_I2S_Init+0x134>
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	2bff      	cmp	r3, #255	; 0xff
 8007922:	d907      	bls.n	8007934 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007928:	f043 0210 	orr.w	r2, r3, #16
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e08f      	b.n	8007a54 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691a      	ldr	r2, [r3, #16]
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	ea42 0103 	orr.w	r1, r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	430a      	orrs	r2, r1
 8007946:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007952:	f023 030f 	bic.w	r3, r3, #15
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6851      	ldr	r1, [r2, #4]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	6892      	ldr	r2, [r2, #8]
 800795e:	4311      	orrs	r1, r2
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	68d2      	ldr	r2, [r2, #12]
 8007964:	4311      	orrs	r1, r2
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6992      	ldr	r2, [r2, #24]
 800796a:	430a      	orrs	r2, r1
 800796c:	431a      	orrs	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007976:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d161      	bne.n	8007a44 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a38      	ldr	r2, [pc, #224]	; (8007a64 <HAL_I2S_Init+0x274>)
 8007984:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a37      	ldr	r2, [pc, #220]	; (8007a68 <HAL_I2S_Init+0x278>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d101      	bne.n	8007994 <HAL_I2S_Init+0x1a4>
 8007990:	4b36      	ldr	r3, [pc, #216]	; (8007a6c <HAL_I2S_Init+0x27c>)
 8007992:	e001      	b.n	8007998 <HAL_I2S_Init+0x1a8>
 8007994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	6812      	ldr	r2, [r2, #0]
 800799e:	4932      	ldr	r1, [pc, #200]	; (8007a68 <HAL_I2S_Init+0x278>)
 80079a0:	428a      	cmp	r2, r1
 80079a2:	d101      	bne.n	80079a8 <HAL_I2S_Init+0x1b8>
 80079a4:	4a31      	ldr	r2, [pc, #196]	; (8007a6c <HAL_I2S_Init+0x27c>)
 80079a6:	e001      	b.n	80079ac <HAL_I2S_Init+0x1bc>
 80079a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80079ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80079b0:	f023 030f 	bic.w	r3, r3, #15
 80079b4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a2b      	ldr	r2, [pc, #172]	; (8007a68 <HAL_I2S_Init+0x278>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d101      	bne.n	80079c4 <HAL_I2S_Init+0x1d4>
 80079c0:	4b2a      	ldr	r3, [pc, #168]	; (8007a6c <HAL_I2S_Init+0x27c>)
 80079c2:	e001      	b.n	80079c8 <HAL_I2S_Init+0x1d8>
 80079c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079c8:	2202      	movs	r2, #2
 80079ca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a25      	ldr	r2, [pc, #148]	; (8007a68 <HAL_I2S_Init+0x278>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d101      	bne.n	80079da <HAL_I2S_Init+0x1ea>
 80079d6:	4b25      	ldr	r3, [pc, #148]	; (8007a6c <HAL_I2S_Init+0x27c>)
 80079d8:	e001      	b.n	80079de <HAL_I2S_Init+0x1ee>
 80079da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ea:	d003      	beq.n	80079f4 <HAL_I2S_Init+0x204>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d103      	bne.n	80079fc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80079f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079f8:	613b      	str	r3, [r7, #16]
 80079fa:	e001      	b.n	8007a00 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80079fc:	2300      	movs	r3, #0
 80079fe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007a14:	4313      	orrs	r3, r2
 8007a16:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	897b      	ldrh	r3, [r7, #10]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a2c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a0d      	ldr	r2, [pc, #52]	; (8007a68 <HAL_I2S_Init+0x278>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d101      	bne.n	8007a3c <HAL_I2S_Init+0x24c>
 8007a38:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <HAL_I2S_Init+0x27c>)
 8007a3a:	e001      	b.n	8007a40 <HAL_I2S_Init+0x250>
 8007a3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a40:	897a      	ldrh	r2, [r7, #10]
 8007a42:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3720      	adds	r7, #32
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	08007b67 	.word	0x08007b67
 8007a60:	cccccccd 	.word	0xcccccccd
 8007a64:	08007c7d 	.word	0x08007c7d
 8007a68:	40003800 	.word	0x40003800
 8007a6c:	40003400 	.word	0x40003400

08007a70 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	881a      	ldrh	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	1c9a      	adds	r2, r3, #2
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10e      	bne.n	8007b00 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007af0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff ffb8 	bl	8007a70 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	b292      	uxth	r2, r2
 8007b1c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b22:	1c9a      	adds	r2, r3, #2
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10e      	bne.n	8007b5e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b4e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff ff93 	bl	8007a84 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007b5e:	bf00      	nop
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d13a      	bne.n	8007bf8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d109      	bne.n	8007ba0 <I2S_IRQHandler+0x3a>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b96:	2b40      	cmp	r3, #64	; 0x40
 8007b98:	d102      	bne.n	8007ba0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff ffb4 	bl	8007b08 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba6:	2b40      	cmp	r3, #64	; 0x40
 8007ba8:	d126      	bne.n	8007bf8 <I2S_IRQHandler+0x92>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	d11f      	bne.n	8007bf8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007bc6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007bc8:	2300      	movs	r3, #0
 8007bca:	613b      	str	r3, [r7, #16]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	613b      	str	r3, [r7, #16]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bea:	f043 0202 	orr.w	r2, r3, #2
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff ff50 	bl	8007a98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d136      	bne.n	8007c72 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d109      	bne.n	8007c22 <I2S_IRQHandler+0xbc>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c18:	2b80      	cmp	r3, #128	; 0x80
 8007c1a:	d102      	bne.n	8007c22 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff ff45 	bl	8007aac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d122      	bne.n	8007c72 <I2S_IRQHandler+0x10c>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	d11b      	bne.n	8007c72 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c48:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	60fb      	str	r3, [r7, #12]
 8007c56:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c64:	f043 0204 	orr.w	r2, r3, #4
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff ff13 	bl	8007a98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007c72:	bf00      	nop
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4aa2      	ldr	r2, [pc, #648]	; (8007f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d101      	bne.n	8007c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007c96:	4ba2      	ldr	r3, [pc, #648]	; (8007f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007c98:	e001      	b.n	8007c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a9b      	ldr	r2, [pc, #620]	; (8007f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d101      	bne.n	8007cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007cb4:	4b9a      	ldr	r3, [pc, #616]	; (8007f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007cb6:	e001      	b.n	8007cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007cb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc8:	d004      	beq.n	8007cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f040 8099 	bne.w	8007e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f003 0302 	and.w	r3, r3, #2
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d107      	bne.n	8007cee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f925 	bl	8007f38 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d107      	bne.n	8007d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f9c8 	bl	8008098 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0e:	2b40      	cmp	r3, #64	; 0x40
 8007d10:	d13a      	bne.n	8007d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f003 0320 	and.w	r3, r3, #32
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d035      	beq.n	8007d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a7e      	ldr	r2, [pc, #504]	; (8007f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d101      	bne.n	8007d2a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007d26:	4b7e      	ldr	r3, [pc, #504]	; (8007f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007d28:	e001      	b.n	8007d2e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007d2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4979      	ldr	r1, [pc, #484]	; (8007f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007d36:	428b      	cmp	r3, r1
 8007d38:	d101      	bne.n	8007d3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007d3a:	4b79      	ldr	r3, [pc, #484]	; (8007f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007d3c:	e001      	b.n	8007d42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d46:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7a:	f043 0202 	orr.w	r2, r3, #2
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7ff fe88 	bl	8007a98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	f003 0308 	and.w	r3, r3, #8
 8007d8e:	2b08      	cmp	r3, #8
 8007d90:	f040 80be 	bne.w	8007f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 80b8 	beq.w	8007f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007dae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a59      	ldr	r2, [pc, #356]	; (8007f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d101      	bne.n	8007dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007dba:	4b59      	ldr	r3, [pc, #356]	; (8007f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007dbc:	e001      	b.n	8007dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007dbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4954      	ldr	r1, [pc, #336]	; (8007f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007dca:	428b      	cmp	r3, r1
 8007dcc:	d101      	bne.n	8007dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007dce:	4b54      	ldr	r3, [pc, #336]	; (8007f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007dd0:	e001      	b.n	8007dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007dd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007dda:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60bb      	str	r3, [r7, #8]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	60bb      	str	r3, [r7, #8]
 8007de8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df6:	f043 0204 	orr.w	r2, r3, #4
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff fe4a 	bl	8007a98 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007e04:	e084      	b.n	8007f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	f003 0302 	and.w	r3, r3, #2
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d107      	bne.n	8007e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f8be 	bl	8007f9c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d107      	bne.n	8007e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f8fd 	bl	8008034 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	d12f      	bne.n	8007ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f003 0320 	and.w	r3, r3, #32
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d02a      	beq.n	8007ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007e5c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a2e      	ldr	r2, [pc, #184]	; (8007f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d101      	bne.n	8007e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007e68:	4b2d      	ldr	r3, [pc, #180]	; (8007f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007e6a:	e001      	b.n	8007e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007e6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4929      	ldr	r1, [pc, #164]	; (8007f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007e78:	428b      	cmp	r3, r1
 8007e7a:	d101      	bne.n	8007e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007e7c:	4b28      	ldr	r3, [pc, #160]	; (8007f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007e7e:	e001      	b.n	8007e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007e80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e88:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	f043 0202 	orr.w	r2, r3, #2
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7ff fdfa 	bl	8007a98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b08      	cmp	r3, #8
 8007eac:	d131      	bne.n	8007f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	f003 0320 	and.w	r3, r3, #32
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d02c      	beq.n	8007f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a17      	ldr	r2, [pc, #92]	; (8007f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d101      	bne.n	8007ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007ec2:	4b17      	ldr	r3, [pc, #92]	; (8007f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007ec4:	e001      	b.n	8007eca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007ec6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4912      	ldr	r1, [pc, #72]	; (8007f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007ed2:	428b      	cmp	r3, r1
 8007ed4:	d101      	bne.n	8007eda <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007ed6:	4b12      	ldr	r3, [pc, #72]	; (8007f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007ed8:	e001      	b.n	8007ede <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007eda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ede:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ee2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ef2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f00:	f043 0204 	orr.w	r2, r3, #4
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff fdc5 	bl	8007a98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007f0e:	e000      	b.n	8007f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007f10:	bf00      	nop
}
 8007f12:	bf00      	nop
 8007f14:	3720      	adds	r7, #32
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	40003800 	.word	0x40003800
 8007f20:	40003400 	.word	0x40003400

08007f24 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	1c99      	adds	r1, r3, #2
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6251      	str	r1, [r2, #36]	; 0x24
 8007f4a:	881a      	ldrh	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d113      	bne.n	8007f92 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007f78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d106      	bne.n	8007f92 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff ffc9 	bl	8007f24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa8:	1c99      	adds	r1, r3, #2
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	6251      	str	r1, [r2, #36]	; 0x24
 8007fae:	8819      	ldrh	r1, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a1d      	ldr	r2, [pc, #116]	; (800802c <I2SEx_TxISR_I2SExt+0x90>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d101      	bne.n	8007fbe <I2SEx_TxISR_I2SExt+0x22>
 8007fba:	4b1d      	ldr	r3, [pc, #116]	; (8008030 <I2SEx_TxISR_I2SExt+0x94>)
 8007fbc:	e001      	b.n	8007fc2 <I2SEx_TxISR_I2SExt+0x26>
 8007fbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007fc2:	460a      	mov	r2, r1
 8007fc4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d121      	bne.n	8008022 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a12      	ldr	r2, [pc, #72]	; (800802c <I2SEx_TxISR_I2SExt+0x90>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d101      	bne.n	8007fec <I2SEx_TxISR_I2SExt+0x50>
 8007fe8:	4b11      	ldr	r3, [pc, #68]	; (8008030 <I2SEx_TxISR_I2SExt+0x94>)
 8007fea:	e001      	b.n	8007ff0 <I2SEx_TxISR_I2SExt+0x54>
 8007fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	490d      	ldr	r1, [pc, #52]	; (800802c <I2SEx_TxISR_I2SExt+0x90>)
 8007ff8:	428b      	cmp	r3, r1
 8007ffa:	d101      	bne.n	8008000 <I2SEx_TxISR_I2SExt+0x64>
 8007ffc:	4b0c      	ldr	r3, [pc, #48]	; (8008030 <I2SEx_TxISR_I2SExt+0x94>)
 8007ffe:	e001      	b.n	8008004 <I2SEx_TxISR_I2SExt+0x68>
 8008000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008004:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008008:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff ff81 	bl	8007f24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008022:	bf00      	nop
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	40003800 	.word	0x40003800
 8008030:	40003400 	.word	0x40003400

08008034 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68d8      	ldr	r0, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008046:	1c99      	adds	r1, r3, #2
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800804c:	b282      	uxth	r2, r0
 800804e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008054:	b29b      	uxth	r3, r3
 8008056:	3b01      	subs	r3, #1
 8008058:	b29a      	uxth	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008062:	b29b      	uxth	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	d113      	bne.n	8008090 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008076:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807c:	b29b      	uxth	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d106      	bne.n	8008090 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff ff4a 	bl	8007f24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a20      	ldr	r2, [pc, #128]	; (8008128 <I2SEx_RxISR_I2SExt+0x90>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d101      	bne.n	80080ae <I2SEx_RxISR_I2SExt+0x16>
 80080aa:	4b20      	ldr	r3, [pc, #128]	; (800812c <I2SEx_RxISR_I2SExt+0x94>)
 80080ac:	e001      	b.n	80080b2 <I2SEx_RxISR_I2SExt+0x1a>
 80080ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80080b2:	68d8      	ldr	r0, [r3, #12]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	1c99      	adds	r1, r3, #2
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80080be:	b282      	uxth	r2, r0
 80080c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d121      	bne.n	800811e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a12      	ldr	r2, [pc, #72]	; (8008128 <I2SEx_RxISR_I2SExt+0x90>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d101      	bne.n	80080e8 <I2SEx_RxISR_I2SExt+0x50>
 80080e4:	4b11      	ldr	r3, [pc, #68]	; (800812c <I2SEx_RxISR_I2SExt+0x94>)
 80080e6:	e001      	b.n	80080ec <I2SEx_RxISR_I2SExt+0x54>
 80080e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	490d      	ldr	r1, [pc, #52]	; (8008128 <I2SEx_RxISR_I2SExt+0x90>)
 80080f4:	428b      	cmp	r3, r1
 80080f6:	d101      	bne.n	80080fc <I2SEx_RxISR_I2SExt+0x64>
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <I2SEx_RxISR_I2SExt+0x94>)
 80080fa:	e001      	b.n	8008100 <I2SEx_RxISR_I2SExt+0x68>
 80080fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008100:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008104:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810a:	b29b      	uxth	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d106      	bne.n	800811e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff ff03 	bl	8007f24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	40003800 	.word	0x40003800
 800812c:	40003400 	.word	0x40003400

08008130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e264      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d075      	beq.n	800823a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800814e:	4ba3      	ldr	r3, [pc, #652]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f003 030c 	and.w	r3, r3, #12
 8008156:	2b04      	cmp	r3, #4
 8008158:	d00c      	beq.n	8008174 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800815a:	4ba0      	ldr	r3, [pc, #640]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008162:	2b08      	cmp	r3, #8
 8008164:	d112      	bne.n	800818c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008166:	4b9d      	ldr	r3, [pc, #628]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800816e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008172:	d10b      	bne.n	800818c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008174:	4b99      	ldr	r3, [pc, #612]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d05b      	beq.n	8008238 <HAL_RCC_OscConfig+0x108>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d157      	bne.n	8008238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e23f      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008194:	d106      	bne.n	80081a4 <HAL_RCC_OscConfig+0x74>
 8008196:	4b91      	ldr	r3, [pc, #580]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a90      	ldr	r2, [pc, #576]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 800819c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	e01d      	b.n	80081e0 <HAL_RCC_OscConfig+0xb0>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081ac:	d10c      	bne.n	80081c8 <HAL_RCC_OscConfig+0x98>
 80081ae:	4b8b      	ldr	r3, [pc, #556]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a8a      	ldr	r2, [pc, #552]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	4b88      	ldr	r3, [pc, #544]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a87      	ldr	r2, [pc, #540]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	e00b      	b.n	80081e0 <HAL_RCC_OscConfig+0xb0>
 80081c8:	4b84      	ldr	r3, [pc, #528]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a83      	ldr	r2, [pc, #524]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	4b81      	ldr	r3, [pc, #516]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a80      	ldr	r2, [pc, #512]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80081da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d013      	beq.n	8008210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081e8:	f7fc f8bc 	bl	8004364 <HAL_GetTick>
 80081ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081f0:	f7fc f8b8 	bl	8004364 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b64      	cmp	r3, #100	; 0x64
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e204      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008202:	4b76      	ldr	r3, [pc, #472]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f0      	beq.n	80081f0 <HAL_RCC_OscConfig+0xc0>
 800820e:	e014      	b.n	800823a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008210:	f7fc f8a8 	bl	8004364 <HAL_GetTick>
 8008214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008216:	e008      	b.n	800822a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008218:	f7fc f8a4 	bl	8004364 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b64      	cmp	r3, #100	; 0x64
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e1f0      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800822a:	4b6c      	ldr	r3, [pc, #432]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f0      	bne.n	8008218 <HAL_RCC_OscConfig+0xe8>
 8008236:	e000      	b.n	800823a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d063      	beq.n	800830e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008246:	4b65      	ldr	r3, [pc, #404]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 030c 	and.w	r3, r3, #12
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00b      	beq.n	800826a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008252:	4b62      	ldr	r3, [pc, #392]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800825a:	2b08      	cmp	r3, #8
 800825c:	d11c      	bne.n	8008298 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800825e:	4b5f      	ldr	r3, [pc, #380]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d116      	bne.n	8008298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800826a:	4b5c      	ldr	r3, [pc, #368]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <HAL_RCC_OscConfig+0x152>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d001      	beq.n	8008282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e1c4      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008282:	4b56      	ldr	r3, [pc, #344]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	4952      	ldr	r1, [pc, #328]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008292:	4313      	orrs	r3, r2
 8008294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008296:	e03a      	b.n	800830e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d020      	beq.n	80082e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082a0:	4b4f      	ldr	r3, [pc, #316]	; (80083e0 <HAL_RCC_OscConfig+0x2b0>)
 80082a2:	2201      	movs	r2, #1
 80082a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a6:	f7fc f85d 	bl	8004364 <HAL_GetTick>
 80082aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082ac:	e008      	b.n	80082c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082ae:	f7fc f859 	bl	8004364 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d901      	bls.n	80082c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e1a5      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082c0:	4b46      	ldr	r3, [pc, #280]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0f0      	beq.n	80082ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082cc:	4b43      	ldr	r3, [pc, #268]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	4940      	ldr	r1, [pc, #256]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	600b      	str	r3, [r1, #0]
 80082e0:	e015      	b.n	800830e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082e2:	4b3f      	ldr	r3, [pc, #252]	; (80083e0 <HAL_RCC_OscConfig+0x2b0>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e8:	f7fc f83c 	bl	8004364 <HAL_GetTick>
 80082ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082ee:	e008      	b.n	8008302 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082f0:	f7fc f838 	bl	8004364 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e184      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008302:	4b36      	ldr	r3, [pc, #216]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1f0      	bne.n	80082f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d030      	beq.n	800837c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d016      	beq.n	8008350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008322:	4b30      	ldr	r3, [pc, #192]	; (80083e4 <HAL_RCC_OscConfig+0x2b4>)
 8008324:	2201      	movs	r2, #1
 8008326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008328:	f7fc f81c 	bl	8004364 <HAL_GetTick>
 800832c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800832e:	e008      	b.n	8008342 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008330:	f7fc f818 	bl	8004364 <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	2b02      	cmp	r3, #2
 800833c:	d901      	bls.n	8008342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e164      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008342:	4b26      	ldr	r3, [pc, #152]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0f0      	beq.n	8008330 <HAL_RCC_OscConfig+0x200>
 800834e:	e015      	b.n	800837c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008350:	4b24      	ldr	r3, [pc, #144]	; (80083e4 <HAL_RCC_OscConfig+0x2b4>)
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008356:	f7fc f805 	bl	8004364 <HAL_GetTick>
 800835a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800835c:	e008      	b.n	8008370 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800835e:	f7fc f801 	bl	8004364 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b02      	cmp	r3, #2
 800836a:	d901      	bls.n	8008370 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e14d      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008370:	4b1a      	ldr	r3, [pc, #104]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008374:	f003 0302 	and.w	r3, r3, #2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f0      	bne.n	800835e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 80a0 	beq.w	80084ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800838a:	2300      	movs	r3, #0
 800838c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800838e:	4b13      	ldr	r3, [pc, #76]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10f      	bne.n	80083ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800839a:	2300      	movs	r3, #0
 800839c:	60bb      	str	r3, [r7, #8]
 800839e:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80083a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a2:	4a0e      	ldr	r2, [pc, #56]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80083a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083a8:	6413      	str	r3, [r2, #64]	; 0x40
 80083aa:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <HAL_RCC_OscConfig+0x2ac>)
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083b2:	60bb      	str	r3, [r7, #8]
 80083b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083b6:	2301      	movs	r3, #1
 80083b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <HAL_RCC_OscConfig+0x2b8>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d121      	bne.n	800840a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083c6:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <HAL_RCC_OscConfig+0x2b8>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a07      	ldr	r2, [pc, #28]	; (80083e8 <HAL_RCC_OscConfig+0x2b8>)
 80083cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083d2:	f7fb ffc7 	bl	8004364 <HAL_GetTick>
 80083d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083d8:	e011      	b.n	80083fe <HAL_RCC_OscConfig+0x2ce>
 80083da:	bf00      	nop
 80083dc:	40023800 	.word	0x40023800
 80083e0:	42470000 	.word	0x42470000
 80083e4:	42470e80 	.word	0x42470e80
 80083e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083ec:	f7fb ffba 	bl	8004364 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e106      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083fe:	4b85      	ldr	r3, [pc, #532]	; (8008614 <HAL_RCC_OscConfig+0x4e4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0f0      	beq.n	80083ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d106      	bne.n	8008420 <HAL_RCC_OscConfig+0x2f0>
 8008412:	4b81      	ldr	r3, [pc, #516]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008416:	4a80      	ldr	r2, [pc, #512]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008418:	f043 0301 	orr.w	r3, r3, #1
 800841c:	6713      	str	r3, [r2, #112]	; 0x70
 800841e:	e01c      	b.n	800845a <HAL_RCC_OscConfig+0x32a>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2b05      	cmp	r3, #5
 8008426:	d10c      	bne.n	8008442 <HAL_RCC_OscConfig+0x312>
 8008428:	4b7b      	ldr	r3, [pc, #492]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 800842a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842c:	4a7a      	ldr	r2, [pc, #488]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 800842e:	f043 0304 	orr.w	r3, r3, #4
 8008432:	6713      	str	r3, [r2, #112]	; 0x70
 8008434:	4b78      	ldr	r3, [pc, #480]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008438:	4a77      	ldr	r2, [pc, #476]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 800843a:	f043 0301 	orr.w	r3, r3, #1
 800843e:	6713      	str	r3, [r2, #112]	; 0x70
 8008440:	e00b      	b.n	800845a <HAL_RCC_OscConfig+0x32a>
 8008442:	4b75      	ldr	r3, [pc, #468]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008446:	4a74      	ldr	r2, [pc, #464]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008448:	f023 0301 	bic.w	r3, r3, #1
 800844c:	6713      	str	r3, [r2, #112]	; 0x70
 800844e:	4b72      	ldr	r3, [pc, #456]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008452:	4a71      	ldr	r2, [pc, #452]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008454:	f023 0304 	bic.w	r3, r3, #4
 8008458:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d015      	beq.n	800848e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008462:	f7fb ff7f 	bl	8004364 <HAL_GetTick>
 8008466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008468:	e00a      	b.n	8008480 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800846a:	f7fb ff7b 	bl	8004364 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	f241 3288 	movw	r2, #5000	; 0x1388
 8008478:	4293      	cmp	r3, r2
 800847a:	d901      	bls.n	8008480 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e0c5      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008480:	4b65      	ldr	r3, [pc, #404]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d0ee      	beq.n	800846a <HAL_RCC_OscConfig+0x33a>
 800848c:	e014      	b.n	80084b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800848e:	f7fb ff69 	bl	8004364 <HAL_GetTick>
 8008492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008494:	e00a      	b.n	80084ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008496:	f7fb ff65 	bl	8004364 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d901      	bls.n	80084ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e0af      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084ac:	4b5a      	ldr	r3, [pc, #360]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 80084ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1ee      	bne.n	8008496 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d105      	bne.n	80084ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084be:	4b56      	ldr	r3, [pc, #344]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	4a55      	ldr	r2, [pc, #340]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 80084c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 809b 	beq.w	800860a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084d4:	4b50      	ldr	r3, [pc, #320]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f003 030c 	and.w	r3, r3, #12
 80084dc:	2b08      	cmp	r3, #8
 80084de:	d05c      	beq.n	800859a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d141      	bne.n	800856c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084e8:	4b4c      	ldr	r3, [pc, #304]	; (800861c <HAL_RCC_OscConfig+0x4ec>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ee:	f7fb ff39 	bl	8004364 <HAL_GetTick>
 80084f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f4:	e008      	b.n	8008508 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084f6:	f7fb ff35 	bl	8004364 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d901      	bls.n	8008508 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e081      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008508:	4b43      	ldr	r3, [pc, #268]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1f0      	bne.n	80084f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	69da      	ldr	r2, [r3, #28]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	431a      	orrs	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	019b      	lsls	r3, r3, #6
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852a:	085b      	lsrs	r3, r3, #1
 800852c:	3b01      	subs	r3, #1
 800852e:	041b      	lsls	r3, r3, #16
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	061b      	lsls	r3, r3, #24
 8008538:	4937      	ldr	r1, [pc, #220]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 800853a:	4313      	orrs	r3, r2
 800853c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800853e:	4b37      	ldr	r3, [pc, #220]	; (800861c <HAL_RCC_OscConfig+0x4ec>)
 8008540:	2201      	movs	r2, #1
 8008542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008544:	f7fb ff0e 	bl	8004364 <HAL_GetTick>
 8008548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800854a:	e008      	b.n	800855e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800854c:	f7fb ff0a 	bl	8004364 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e056      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800855e:	4b2e      	ldr	r3, [pc, #184]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d0f0      	beq.n	800854c <HAL_RCC_OscConfig+0x41c>
 800856a:	e04e      	b.n	800860a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800856c:	4b2b      	ldr	r3, [pc, #172]	; (800861c <HAL_RCC_OscConfig+0x4ec>)
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008572:	f7fb fef7 	bl	8004364 <HAL_GetTick>
 8008576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008578:	e008      	b.n	800858c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800857a:	f7fb fef3 	bl	8004364 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	2b02      	cmp	r3, #2
 8008586:	d901      	bls.n	800858c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e03f      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800858c:	4b22      	ldr	r3, [pc, #136]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1f0      	bne.n	800857a <HAL_RCC_OscConfig+0x44a>
 8008598:	e037      	b.n	800860a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e032      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085a6:	4b1c      	ldr	r3, [pc, #112]	; (8008618 <HAL_RCC_OscConfig+0x4e8>)
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d028      	beq.n	8008606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085be:	429a      	cmp	r2, r3
 80085c0:	d121      	bne.n	8008606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d11a      	bne.n	8008606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80085d6:	4013      	ands	r3, r2
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085de:	4293      	cmp	r3, r2
 80085e0:	d111      	bne.n	8008606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ec:	085b      	lsrs	r3, r3, #1
 80085ee:	3b01      	subs	r3, #1
 80085f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d107      	bne.n	8008606 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008602:	429a      	cmp	r2, r3
 8008604:	d001      	beq.n	800860a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	40007000 	.word	0x40007000
 8008618:	40023800 	.word	0x40023800
 800861c:	42470060 	.word	0x42470060

08008620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d101      	bne.n	8008634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e0cc      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008634:	4b68      	ldr	r3, [pc, #416]	; (80087d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0307 	and.w	r3, r3, #7
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d90c      	bls.n	800865c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008642:	4b65      	ldr	r3, [pc, #404]	; (80087d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	b2d2      	uxtb	r2, r2
 8008648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800864a:	4b63      	ldr	r3, [pc, #396]	; (80087d8 <HAL_RCC_ClockConfig+0x1b8>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0307 	and.w	r3, r3, #7
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d001      	beq.n	800865c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e0b8      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d020      	beq.n	80086aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008674:	4b59      	ldr	r3, [pc, #356]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	4a58      	ldr	r2, [pc, #352]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 800867a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800867e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0308 	and.w	r3, r3, #8
 8008688:	2b00      	cmp	r3, #0
 800868a:	d005      	beq.n	8008698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800868c:	4b53      	ldr	r3, [pc, #332]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	4a52      	ldr	r2, [pc, #328]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008698:	4b50      	ldr	r3, [pc, #320]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	494d      	ldr	r1, [pc, #308]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d044      	beq.n	8008740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d107      	bne.n	80086ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086be:	4b47      	ldr	r3, [pc, #284]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d119      	bne.n	80086fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e07f      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d003      	beq.n	80086de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d107      	bne.n	80086ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086de:	4b3f      	ldr	r3, [pc, #252]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d109      	bne.n	80086fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e06f      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086ee:	4b3b      	ldr	r3, [pc, #236]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e067      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086fe:	4b37      	ldr	r3, [pc, #220]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f023 0203 	bic.w	r2, r3, #3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	4934      	ldr	r1, [pc, #208]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 800870c:	4313      	orrs	r3, r2
 800870e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008710:	f7fb fe28 	bl	8004364 <HAL_GetTick>
 8008714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008716:	e00a      	b.n	800872e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008718:	f7fb fe24 	bl	8004364 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	f241 3288 	movw	r2, #5000	; 0x1388
 8008726:	4293      	cmp	r3, r2
 8008728:	d901      	bls.n	800872e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e04f      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800872e:	4b2b      	ldr	r3, [pc, #172]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f003 020c 	and.w	r2, r3, #12
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	429a      	cmp	r2, r3
 800873e:	d1eb      	bne.n	8008718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008740:	4b25      	ldr	r3, [pc, #148]	; (80087d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d20c      	bcs.n	8008768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800874e:	4b22      	ldr	r3, [pc, #136]	; (80087d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008756:	4b20      	ldr	r3, [pc, #128]	; (80087d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0307 	and.w	r3, r3, #7
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d001      	beq.n	8008768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e032      	b.n	80087ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d008      	beq.n	8008786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008774:	4b19      	ldr	r3, [pc, #100]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	4916      	ldr	r1, [pc, #88]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008782:	4313      	orrs	r3, r2
 8008784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0308 	and.w	r3, r3, #8
 800878e:	2b00      	cmp	r3, #0
 8008790:	d009      	beq.n	80087a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008792:	4b12      	ldr	r3, [pc, #72]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	490e      	ldr	r1, [pc, #56]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80087a6:	f000 f821 	bl	80087ec <HAL_RCC_GetSysClockFreq>
 80087aa:	4602      	mov	r2, r0
 80087ac:	4b0b      	ldr	r3, [pc, #44]	; (80087dc <HAL_RCC_ClockConfig+0x1bc>)
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	091b      	lsrs	r3, r3, #4
 80087b2:	f003 030f 	and.w	r3, r3, #15
 80087b6:	490a      	ldr	r1, [pc, #40]	; (80087e0 <HAL_RCC_ClockConfig+0x1c0>)
 80087b8:	5ccb      	ldrb	r3, [r1, r3]
 80087ba:	fa22 f303 	lsr.w	r3, r2, r3
 80087be:	4a09      	ldr	r2, [pc, #36]	; (80087e4 <HAL_RCC_ClockConfig+0x1c4>)
 80087c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80087c2:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <HAL_RCC_ClockConfig+0x1c8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fb f860 	bl	800388c <HAL_InitTick>

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	40023c00 	.word	0x40023c00
 80087dc:	40023800 	.word	0x40023800
 80087e0:	08012b08 	.word	0x08012b08
 80087e4:	20000014 	.word	0x20000014
 80087e8:	20000018 	.word	0x20000018

080087ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	607b      	str	r3, [r7, #4]
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	2300      	movs	r3, #0
 80087fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008804:	4b67      	ldr	r3, [pc, #412]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f003 030c 	and.w	r3, r3, #12
 800880c:	2b08      	cmp	r3, #8
 800880e:	d00d      	beq.n	800882c <HAL_RCC_GetSysClockFreq+0x40>
 8008810:	2b08      	cmp	r3, #8
 8008812:	f200 80bd 	bhi.w	8008990 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <HAL_RCC_GetSysClockFreq+0x34>
 800881a:	2b04      	cmp	r3, #4
 800881c:	d003      	beq.n	8008826 <HAL_RCC_GetSysClockFreq+0x3a>
 800881e:	e0b7      	b.n	8008990 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008820:	4b61      	ldr	r3, [pc, #388]	; (80089a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008822:	60bb      	str	r3, [r7, #8]
       break;
 8008824:	e0b7      	b.n	8008996 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008826:	4b61      	ldr	r3, [pc, #388]	; (80089ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008828:	60bb      	str	r3, [r7, #8]
      break;
 800882a:	e0b4      	b.n	8008996 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800882c:	4b5d      	ldr	r3, [pc, #372]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008834:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008836:	4b5b      	ldr	r3, [pc, #364]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d04d      	beq.n	80088de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008842:	4b58      	ldr	r3, [pc, #352]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	099b      	lsrs	r3, r3, #6
 8008848:	461a      	mov	r2, r3
 800884a:	f04f 0300 	mov.w	r3, #0
 800884e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008852:	f04f 0100 	mov.w	r1, #0
 8008856:	ea02 0800 	and.w	r8, r2, r0
 800885a:	ea03 0901 	and.w	r9, r3, r1
 800885e:	4640      	mov	r0, r8
 8008860:	4649      	mov	r1, r9
 8008862:	f04f 0200 	mov.w	r2, #0
 8008866:	f04f 0300 	mov.w	r3, #0
 800886a:	014b      	lsls	r3, r1, #5
 800886c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008870:	0142      	lsls	r2, r0, #5
 8008872:	4610      	mov	r0, r2
 8008874:	4619      	mov	r1, r3
 8008876:	ebb0 0008 	subs.w	r0, r0, r8
 800887a:	eb61 0109 	sbc.w	r1, r1, r9
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 0300 	mov.w	r3, #0
 8008886:	018b      	lsls	r3, r1, #6
 8008888:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800888c:	0182      	lsls	r2, r0, #6
 800888e:	1a12      	subs	r2, r2, r0
 8008890:	eb63 0301 	sbc.w	r3, r3, r1
 8008894:	f04f 0000 	mov.w	r0, #0
 8008898:	f04f 0100 	mov.w	r1, #0
 800889c:	00d9      	lsls	r1, r3, #3
 800889e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088a2:	00d0      	lsls	r0, r2, #3
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	eb12 0208 	adds.w	r2, r2, r8
 80088ac:	eb43 0309 	adc.w	r3, r3, r9
 80088b0:	f04f 0000 	mov.w	r0, #0
 80088b4:	f04f 0100 	mov.w	r1, #0
 80088b8:	0259      	lsls	r1, r3, #9
 80088ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80088be:	0250      	lsls	r0, r2, #9
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4610      	mov	r0, r2
 80088c6:	4619      	mov	r1, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	461a      	mov	r2, r3
 80088cc:	f04f 0300 	mov.w	r3, #0
 80088d0:	f7f7 fce6 	bl	80002a0 <__aeabi_uldivmod>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4613      	mov	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	e04a      	b.n	8008974 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088de:	4b31      	ldr	r3, [pc, #196]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	099b      	lsrs	r3, r3, #6
 80088e4:	461a      	mov	r2, r3
 80088e6:	f04f 0300 	mov.w	r3, #0
 80088ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80088ee:	f04f 0100 	mov.w	r1, #0
 80088f2:	ea02 0400 	and.w	r4, r2, r0
 80088f6:	ea03 0501 	and.w	r5, r3, r1
 80088fa:	4620      	mov	r0, r4
 80088fc:	4629      	mov	r1, r5
 80088fe:	f04f 0200 	mov.w	r2, #0
 8008902:	f04f 0300 	mov.w	r3, #0
 8008906:	014b      	lsls	r3, r1, #5
 8008908:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800890c:	0142      	lsls	r2, r0, #5
 800890e:	4610      	mov	r0, r2
 8008910:	4619      	mov	r1, r3
 8008912:	1b00      	subs	r0, r0, r4
 8008914:	eb61 0105 	sbc.w	r1, r1, r5
 8008918:	f04f 0200 	mov.w	r2, #0
 800891c:	f04f 0300 	mov.w	r3, #0
 8008920:	018b      	lsls	r3, r1, #6
 8008922:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008926:	0182      	lsls	r2, r0, #6
 8008928:	1a12      	subs	r2, r2, r0
 800892a:	eb63 0301 	sbc.w	r3, r3, r1
 800892e:	f04f 0000 	mov.w	r0, #0
 8008932:	f04f 0100 	mov.w	r1, #0
 8008936:	00d9      	lsls	r1, r3, #3
 8008938:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800893c:	00d0      	lsls	r0, r2, #3
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	1912      	adds	r2, r2, r4
 8008944:	eb45 0303 	adc.w	r3, r5, r3
 8008948:	f04f 0000 	mov.w	r0, #0
 800894c:	f04f 0100 	mov.w	r1, #0
 8008950:	0299      	lsls	r1, r3, #10
 8008952:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008956:	0290      	lsls	r0, r2, #10
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4610      	mov	r0, r2
 800895e:	4619      	mov	r1, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	461a      	mov	r2, r3
 8008964:	f04f 0300 	mov.w	r3, #0
 8008968:	f7f7 fc9a 	bl	80002a0 <__aeabi_uldivmod>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4613      	mov	r3, r2
 8008972:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008974:	4b0b      	ldr	r3, [pc, #44]	; (80089a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	0c1b      	lsrs	r3, r3, #16
 800897a:	f003 0303 	and.w	r3, r3, #3
 800897e:	3301      	adds	r3, #1
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	fbb2 f3f3 	udiv	r3, r2, r3
 800898c:	60bb      	str	r3, [r7, #8]
      break;
 800898e:	e002      	b.n	8008996 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008990:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008992:	60bb      	str	r3, [r7, #8]
      break;
 8008994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008996:	68bb      	ldr	r3, [r7, #8]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80089a2:	bf00      	nop
 80089a4:	40023800 	.word	0x40023800
 80089a8:	00f42400 	.word	0x00f42400
 80089ac:	007a1200 	.word	0x007a1200

080089b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089b4:	4b03      	ldr	r3, [pc, #12]	; (80089c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80089b6:	681b      	ldr	r3, [r3, #0]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000014 	.word	0x20000014

080089c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80089cc:	f7ff fff0 	bl	80089b0 <HAL_RCC_GetHCLKFreq>
 80089d0:	4602      	mov	r2, r0
 80089d2:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	0a9b      	lsrs	r3, r3, #10
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	4903      	ldr	r1, [pc, #12]	; (80089ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80089de:	5ccb      	ldrb	r3, [r1, r3]
 80089e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	40023800 	.word	0x40023800
 80089ec:	08012b18 	.word	0x08012b18

080089f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80089f4:	f7ff ffdc 	bl	80089b0 <HAL_RCC_GetHCLKFreq>
 80089f8:	4602      	mov	r2, r0
 80089fa:	4b05      	ldr	r3, [pc, #20]	; (8008a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	0b5b      	lsrs	r3, r3, #13
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	4903      	ldr	r1, [pc, #12]	; (8008a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a06:	5ccb      	ldrb	r3, [r1, r3]
 8008a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	40023800 	.word	0x40023800
 8008a14:	08012b18 	.word	0x08012b18

08008a18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	220f      	movs	r2, #15
 8008a26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008a28:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <HAL_RCC_GetClockConfig+0x5c>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f003 0203 	and.w	r2, r3, #3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008a34:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <HAL_RCC_GetClockConfig+0x5c>)
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008a40:	4b0c      	ldr	r3, [pc, #48]	; (8008a74 <HAL_RCC_GetClockConfig+0x5c>)
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008a4c:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <HAL_RCC_GetClockConfig+0x5c>)
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	08db      	lsrs	r3, r3, #3
 8008a52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008a5a:	4b07      	ldr	r3, [pc, #28]	; (8008a78 <HAL_RCC_GetClockConfig+0x60>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0207 	and.w	r2, r3, #7
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	601a      	str	r2, [r3, #0]
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	40023800 	.word	0x40023800
 8008a78:	40023c00 	.word	0x40023c00

08008a7c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d105      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d035      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008aa4:	4b62      	ldr	r3, [pc, #392]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008aaa:	f7fb fc5b 	bl	8004364 <HAL_GetTick>
 8008aae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ab0:	e008      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008ab2:	f7fb fc57 	bl	8004364 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d901      	bls.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e0b0      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ac4:	4b5b      	ldr	r3, [pc, #364]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1f0      	bne.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	019a      	lsls	r2, r3, #6
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	071b      	lsls	r3, r3, #28
 8008adc:	4955      	ldr	r1, [pc, #340]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ae4:	4b52      	ldr	r3, [pc, #328]	; (8008c30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008aea:	f7fb fc3b 	bl	8004364 <HAL_GetTick>
 8008aee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008af0:	e008      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008af2:	f7fb fc37 	bl	8004364 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d901      	bls.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e090      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b04:	4b4b      	ldr	r3, [pc, #300]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0f0      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 8083 	beq.w	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	4b44      	ldr	r3, [pc, #272]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	4a43      	ldr	r2, [pc, #268]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8008b2e:	4b41      	ldr	r3, [pc, #260]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008b3a:	4b3f      	ldr	r3, [pc, #252]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a3e      	ldr	r2, [pc, #248]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b46:	f7fb fc0d 	bl	8004364 <HAL_GetTick>
 8008b4a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b4c:	e008      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b4e:	f7fb fc09 	bl	8004364 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d901      	bls.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e062      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b60:	4b35      	ldr	r3, [pc, #212]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d0f0      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b6c:	4b31      	ldr	r3, [pc, #196]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b74:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d02f      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d028      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b8a:	4b2a      	ldr	r3, [pc, #168]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b94:	4b29      	ldr	r3, [pc, #164]	; (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b9a:	4b28      	ldr	r3, [pc, #160]	; (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008ba0:	4a24      	ldr	r2, [pc, #144]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ba6:	4b23      	ldr	r3, [pc, #140]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d114      	bne.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008bb2:	f7fb fbd7 	bl	8004364 <HAL_GetTick>
 8008bb6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bb8:	e00a      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bba:	f7fb fbd3 	bl	8004364 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d901      	bls.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e02a      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bd0:	4b18      	ldr	r3, [pc, #96]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0ee      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008be8:	d10d      	bne.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008bea:	4b12      	ldr	r3, [pc, #72]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bfe:	490d      	ldr	r1, [pc, #52]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	608b      	str	r3, [r1, #8]
 8008c04:	e005      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008c06:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	4a0a      	ldr	r2, [pc, #40]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008c10:	6093      	str	r3, [r2, #8]
 8008c12:	4b08      	ldr	r3, [pc, #32]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c1e:	4905      	ldr	r1, [pc, #20]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3718      	adds	r7, #24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	42470068 	.word	0x42470068
 8008c34:	40023800 	.word	0x40023800
 8008c38:	40007000 	.word	0x40007000
 8008c3c:	42470e40 	.word	0x42470e40

08008c40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d13e      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008c5e:	4b23      	ldr	r3, [pc, #140]	; (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d005      	beq.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d12f      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c74:	4b1e      	ldr	r3, [pc, #120]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c76:	617b      	str	r3, [r7, #20]
          break;
 8008c78:	e02f      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008c7a:	4b1c      	ldr	r3, [pc, #112]	; (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c86:	d108      	bne.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008c88:	4b18      	ldr	r3, [pc, #96]	; (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c90:	4a18      	ldr	r2, [pc, #96]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	e007      	b.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008c9a:	4b14      	ldr	r3, [pc, #80]	; (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ca2:	4a15      	ldr	r2, [pc, #84]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008caa:	4b10      	ldr	r3, [pc, #64]	; (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cb0:	099b      	lsrs	r3, r3, #6
 8008cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	fb02 f303 	mul.w	r3, r2, r3
 8008cbc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cc4:	0f1b      	lsrs	r3, r3, #28
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd0:	617b      	str	r3, [r7, #20]
          break;
 8008cd2:	e002      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	617b      	str	r3, [r7, #20]
          break;
 8008cd8:	bf00      	nop
        }
      }
      break;
 8008cda:	bf00      	nop
    }
  }
  return frequency;
 8008cdc:	697b      	ldr	r3, [r7, #20]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	371c      	adds	r7, #28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40023800 	.word	0x40023800
 8008cf0:	00bb8000 	.word	0x00bb8000
 8008cf4:	007a1200 	.word	0x007a1200
 8008cf8:	00f42400 	.word	0x00f42400

08008cfc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e083      	b.n	8008e16 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	7f5b      	ldrb	r3, [r3, #29]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d105      	bne.n	8008d24 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7fa fc7a 	bl	8003618 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	22ca      	movs	r2, #202	; 0xca
 8008d30:	625a      	str	r2, [r3, #36]	; 0x24
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2253      	movs	r2, #83	; 0x53
 8008d38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa59 	bl	80091f2 <RTC_EnterInitMode>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	22ff      	movs	r2, #255	; 0xff
 8008d4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2204      	movs	r2, #4
 8008d52:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e05e      	b.n	8008e16 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6812      	ldr	r2, [r2, #0]
 8008d62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d6a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6899      	ldr	r1, [r3, #8]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	431a      	orrs	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	68d2      	ldr	r2, [r2, #12]
 8008d92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6919      	ldr	r1, [r3, #16]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	041a      	lsls	r2, r3, #16
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68da      	ldr	r2, [r3, #12]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008db6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f003 0320 	and.w	r3, r3, #32
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10e      	bne.n	8008de4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f9eb 	bl	80091a2 <HAL_RTC_WaitForSynchro>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d008      	beq.n	8008de4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	22ff      	movs	r2, #255	; 0xff
 8008dd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2204      	movs	r2, #4
 8008dde:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e018      	b.n	8008e16 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008df2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	699a      	ldr	r2, [r3, #24]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	22ff      	movs	r2, #255	; 0xff
 8008e0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008e14:	2300      	movs	r3, #0
  }
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e1e:	b590      	push	{r4, r7, lr}
 8008e20:	b087      	sub	sp, #28
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	7f1b      	ldrb	r3, [r3, #28]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d101      	bne.n	8008e3a <HAL_RTC_SetTime+0x1c>
 8008e36:	2302      	movs	r3, #2
 8008e38:	e0aa      	b.n	8008f90 <HAL_RTC_SetTime+0x172>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2202      	movs	r2, #2
 8008e44:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d126      	bne.n	8008e9a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d102      	bne.n	8008e60 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 f9f0 	bl	800924a <RTC_ByteToBcd2>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	785b      	ldrb	r3, [r3, #1]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 f9e9 	bl	800924a <RTC_ByteToBcd2>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008e7c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	789b      	ldrb	r3, [r3, #2]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 f9e1 	bl	800924a <RTC_ByteToBcd2>
 8008e88:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008e8a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	78db      	ldrb	r3, [r3, #3]
 8008e92:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008e94:	4313      	orrs	r3, r2
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	e018      	b.n	8008ecc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d102      	bne.n	8008eae <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	785b      	ldrb	r3, [r3, #1]
 8008eb8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008eba:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008ec0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	78db      	ldrb	r3, [r3, #3]
 8008ec6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	22ca      	movs	r2, #202	; 0xca
 8008ed2:	625a      	str	r2, [r3, #36]	; 0x24
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2253      	movs	r2, #83	; 0x53
 8008eda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 f988 	bl	80091f2 <RTC_EnterInitMode>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00b      	beq.n	8008f00 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	22ff      	movs	r2, #255	; 0xff
 8008eee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2204      	movs	r2, #4
 8008ef4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e047      	b.n	8008f90 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008f0a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008f0e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689a      	ldr	r2, [r3, #8]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f1e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6899      	ldr	r1, [r3, #8]
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	430a      	orrs	r2, r1
 8008f36:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f46:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f003 0320 	and.w	r3, r3, #32
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d111      	bne.n	8008f7a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f000 f923 	bl	80091a2 <HAL_RTC_WaitForSynchro>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00b      	beq.n	8008f7a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	22ff      	movs	r2, #255	; 0xff
 8008f68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2204      	movs	r2, #4
 8008f6e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e00a      	b.n	8008f90 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	22ff      	movs	r2, #255	; 0xff
 8008f80:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2201      	movs	r2, #1
 8008f86:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
  }
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	371c      	adds	r7, #28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd90      	pop	{r4, r7, pc}

08008f98 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008fca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008fce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	0c1b      	lsrs	r3, r3, #16
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	0a1b      	lsrs	r3, r3, #8
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	0c1b      	lsrs	r3, r3, #16
 8009002:	b2db      	uxtb	r3, r3
 8009004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009008:	b2da      	uxtb	r2, r3
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d11a      	bne.n	800904a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	4618      	mov	r0, r3
 800901a:	f000 f934 	bl	8009286 <RTC_Bcd2ToByte>
 800901e:	4603      	mov	r3, r0
 8009020:	461a      	mov	r2, r3
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	785b      	ldrb	r3, [r3, #1]
 800902a:	4618      	mov	r0, r3
 800902c:	f000 f92b 	bl	8009286 <RTC_Bcd2ToByte>
 8009030:	4603      	mov	r3, r0
 8009032:	461a      	mov	r2, r3
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	789b      	ldrb	r3, [r3, #2]
 800903c:	4618      	mov	r0, r3
 800903e:	f000 f922 	bl	8009286 <RTC_Bcd2ToByte>
 8009042:	4603      	mov	r3, r0
 8009044:	461a      	mov	r2, r3
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009054:	b590      	push	{r4, r7, lr}
 8009056:	b087      	sub	sp, #28
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	7f1b      	ldrb	r3, [r3, #28]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <HAL_RTC_SetDate+0x1c>
 800906c:	2302      	movs	r3, #2
 800906e:	e094      	b.n	800919a <HAL_RTC_SetDate+0x146>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2201      	movs	r2, #1
 8009074:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2202      	movs	r2, #2
 800907a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10e      	bne.n	80090a0 <HAL_RTC_SetDate+0x4c>
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	785b      	ldrb	r3, [r3, #1]
 8009086:	f003 0310 	and.w	r3, r3, #16
 800908a:	2b00      	cmp	r3, #0
 800908c:	d008      	beq.n	80090a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	785b      	ldrb	r3, [r3, #1]
 8009092:	f023 0310 	bic.w	r3, r3, #16
 8009096:	b2db      	uxtb	r3, r3
 8009098:	330a      	adds	r3, #10
 800909a:	b2da      	uxtb	r2, r3
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d11c      	bne.n	80090e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	78db      	ldrb	r3, [r3, #3]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 f8cd 	bl	800924a <RTC_ByteToBcd2>
 80090b0:	4603      	mov	r3, r0
 80090b2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	785b      	ldrb	r3, [r3, #1]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 f8c6 	bl	800924a <RTC_ByteToBcd2>
 80090be:	4603      	mov	r3, r0
 80090c0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80090c2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	789b      	ldrb	r3, [r3, #2]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 f8be 	bl	800924a <RTC_ByteToBcd2>
 80090ce:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80090d0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]
 80090de:	e00e      	b.n	80090fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	78db      	ldrb	r3, [r3, #3]
 80090e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	785b      	ldrb	r3, [r3, #1]
 80090ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80090ec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80090f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80090fa:	4313      	orrs	r3, r2
 80090fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	22ca      	movs	r2, #202	; 0xca
 8009104:	625a      	str	r2, [r3, #36]	; 0x24
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2253      	movs	r2, #83	; 0x53
 800910c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f000 f86f 	bl	80091f2 <RTC_EnterInitMode>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00b      	beq.n	8009132 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	22ff      	movs	r2, #255	; 0xff
 8009120:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2204      	movs	r2, #4
 8009126:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e033      	b.n	800919a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800913c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009140:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009150:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f003 0320 	and.w	r3, r3, #32
 800915c:	2b00      	cmp	r3, #0
 800915e:	d111      	bne.n	8009184 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f000 f81e 	bl	80091a2 <HAL_RTC_WaitForSynchro>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00b      	beq.n	8009184 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	22ff      	movs	r2, #255	; 0xff
 8009172:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2204      	movs	r2, #4
 8009178:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e00a      	b.n	800919a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	22ff      	movs	r2, #255	; 0xff
 800918a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009198:	2300      	movs	r3, #0
  }
}
 800919a:	4618      	mov	r0, r3
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd90      	pop	{r4, r7, pc}

080091a2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80091bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091be:	f7fb f8d1 	bl	8004364 <HAL_GetTick>
 80091c2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80091c4:	e009      	b.n	80091da <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80091c6:	f7fb f8cd 	bl	8004364 <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091d4:	d901      	bls.n	80091da <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e007      	b.n	80091ea <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f003 0320 	and.w	r3, r3, #32
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d0ee      	beq.n	80091c6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b084      	sub	sp, #16
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009208:	2b00      	cmp	r3, #0
 800920a:	d119      	bne.n	8009240 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009214:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009216:	f7fb f8a5 	bl	8004364 <HAL_GetTick>
 800921a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800921c:	e009      	b.n	8009232 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800921e:	f7fb f8a1 	bl	8004364 <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800922c:	d901      	bls.n	8009232 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e007      	b.n	8009242 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0ee      	beq.n	800921e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800924a:	b480      	push	{r7}
 800924c:	b085      	sub	sp, #20
 800924e:	af00      	add	r7, sp, #0
 8009250:	4603      	mov	r3, r0
 8009252:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009254:	2300      	movs	r3, #0
 8009256:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8009258:	e005      	b.n	8009266 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	3301      	adds	r3, #1
 800925e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	3b0a      	subs	r3, #10
 8009264:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8009266:	79fb      	ldrb	r3, [r7, #7]
 8009268:	2b09      	cmp	r3, #9
 800926a:	d8f6      	bhi.n	800925a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	b2db      	uxtb	r3, r3
 8009270:	011b      	lsls	r3, r3, #4
 8009272:	b2da      	uxtb	r2, r3
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	4313      	orrs	r3, r2
 8009278:	b2db      	uxtb	r3, r3
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009286:	b480      	push	{r7}
 8009288:	b085      	sub	sp, #20
 800928a:	af00      	add	r7, sp, #0
 800928c:	4603      	mov	r3, r0
 800928e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009290:	2300      	movs	r3, #0
 8009292:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	091b      	lsrs	r3, r3, #4
 8009298:	b2db      	uxtb	r3, r3
 800929a:	461a      	mov	r2, r3
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	005b      	lsls	r3, r3, #1
 80092a4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	f003 030f 	and.w	r3, r3, #15
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	4413      	add	r3, r2
 80092b4:	b2db      	uxtb	r3, r3
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e07b      	b.n	80093cc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d108      	bne.n	80092ee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092e4:	d009      	beq.n	80092fa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	61da      	str	r2, [r3, #28]
 80092ec:	e005      	b.n	80092fa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b00      	cmp	r3, #0
 800930a:	d106      	bne.n	800931a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7fa f9a9 	bl	800366c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2202      	movs	r2, #2
 800931e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009330:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009342:	431a      	orrs	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800934c:	431a      	orrs	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	431a      	orrs	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	431a      	orrs	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800936a:	431a      	orrs	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	69db      	ldr	r3, [r3, #28]
 8009370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009374:	431a      	orrs	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800937e:	ea42 0103 	orr.w	r1, r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	0c1b      	lsrs	r3, r3, #16
 8009398:	f003 0104 	and.w	r1, r3, #4
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	f003 0210 	and.w	r2, r3, #16
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	430a      	orrs	r2, r1
 80093aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	69da      	ldr	r2, [r3, #28]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d101      	bne.n	80093e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e041      	b.n	800946a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d106      	bne.n	8009400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7fa f9ce 	bl	800379c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3304      	adds	r3, #4
 8009410:	4619      	mov	r1, r3
 8009412:	4610      	mov	r0, r2
 8009414:	f000 fb32 	bl	8009a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b01      	cmp	r3, #1
 8009486:	d001      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e04e      	b.n	800952a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0201 	orr.w	r2, r2, #1
 80094a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a23      	ldr	r2, [pc, #140]	; (8009538 <HAL_TIM_Base_Start_IT+0xc4>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d022      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094b6:	d01d      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a1f      	ldr	r2, [pc, #124]	; (800953c <HAL_TIM_Base_Start_IT+0xc8>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d018      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a1e      	ldr	r2, [pc, #120]	; (8009540 <HAL_TIM_Base_Start_IT+0xcc>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d013      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a1c      	ldr	r2, [pc, #112]	; (8009544 <HAL_TIM_Base_Start_IT+0xd0>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d00e      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a1b      	ldr	r2, [pc, #108]	; (8009548 <HAL_TIM_Base_Start_IT+0xd4>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d009      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a19      	ldr	r2, [pc, #100]	; (800954c <HAL_TIM_Base_Start_IT+0xd8>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d004      	beq.n	80094f4 <HAL_TIM_Base_Start_IT+0x80>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a18      	ldr	r2, [pc, #96]	; (8009550 <HAL_TIM_Base_Start_IT+0xdc>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d111      	bne.n	8009518 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f003 0307 	and.w	r3, r3, #7
 80094fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b06      	cmp	r3, #6
 8009504:	d010      	beq.n	8009528 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f042 0201 	orr.w	r2, r2, #1
 8009514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009516:	e007      	b.n	8009528 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f042 0201 	orr.w	r2, r2, #1
 8009526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	40010000 	.word	0x40010000
 800953c:	40000400 	.word	0x40000400
 8009540:	40000800 	.word	0x40000800
 8009544:	40000c00 	.word	0x40000c00
 8009548:	40010400 	.word	0x40010400
 800954c:	40014000 	.word	0x40014000
 8009550:	40001800 	.word	0x40001800

08009554 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 0201 	bic.w	r2, r2, #1
 800956a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6a1a      	ldr	r2, [r3, #32]
 8009572:	f241 1311 	movw	r3, #4369	; 0x1111
 8009576:	4013      	ands	r3, r2
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10f      	bne.n	800959c <HAL_TIM_Base_Stop_IT+0x48>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6a1a      	ldr	r2, [r3, #32]
 8009582:	f240 4344 	movw	r3, #1092	; 0x444
 8009586:	4013      	ands	r3, r2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d107      	bne.n	800959c <HAL_TIM_Base_Stop_IT+0x48>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 0201 	bic.w	r2, r2, #1
 800959a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b086      	sub	sp, #24
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e097      	b.n	80096f6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d106      	bne.n	80095e0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7fa f88e 	bl	80036fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2202      	movs	r2, #2
 80095e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	6812      	ldr	r2, [r2, #0]
 80095f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095f6:	f023 0307 	bic.w	r3, r3, #7
 80095fa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3304      	adds	r3, #4
 8009604:	4619      	mov	r1, r3
 8009606:	4610      	mov	r0, r2
 8009608:	f000 fa38 	bl	8009a7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009634:	f023 0303 	bic.w	r3, r3, #3
 8009638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	689a      	ldr	r2, [r3, #8]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	021b      	lsls	r3, r3, #8
 8009644:	4313      	orrs	r3, r2
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	4313      	orrs	r3, r2
 800964a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009652:	f023 030c 	bic.w	r3, r3, #12
 8009656:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800965e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	68da      	ldr	r2, [r3, #12]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	69db      	ldr	r3, [r3, #28]
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	4313      	orrs	r3, r2
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	4313      	orrs	r3, r2
 8009674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	011a      	lsls	r2, r3, #4
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	031b      	lsls	r3, r3, #12
 8009682:	4313      	orrs	r3, r2
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	4313      	orrs	r3, r2
 8009688:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009690:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009698:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	011b      	lsls	r3, r3, #4
 80096a4:	4313      	orrs	r3, r2
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	697a      	ldr	r2, [r7, #20]
 80096b2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b084      	sub	sp, #16
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800970e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009716:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800971e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009726:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d110      	bne.n	8009750 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d102      	bne.n	800973a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009734:	7b7b      	ldrb	r3, [r7, #13]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d001      	beq.n	800973e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e069      	b.n	8009812 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2202      	movs	r2, #2
 8009742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2202      	movs	r2, #2
 800974a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800974e:	e031      	b.n	80097b4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2b04      	cmp	r3, #4
 8009754:	d110      	bne.n	8009778 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d102      	bne.n	8009762 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800975c:	7b3b      	ldrb	r3, [r7, #12]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d001      	beq.n	8009766 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e055      	b.n	8009812 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2202      	movs	r2, #2
 800976a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2202      	movs	r2, #2
 8009772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009776:	e01d      	b.n	80097b4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d108      	bne.n	8009790 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800977e:	7bbb      	ldrb	r3, [r7, #14]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d105      	bne.n	8009790 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009784:	7b7b      	ldrb	r3, [r7, #13]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d102      	bne.n	8009790 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800978a:	7b3b      	ldrb	r3, [r7, #12]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d001      	beq.n	8009794 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e03e      	b.n	8009812 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2202      	movs	r2, #2
 80097a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2202      	movs	r2, #2
 80097a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2202      	movs	r2, #2
 80097b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <HAL_TIM_Encoder_Start+0xc4>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2b04      	cmp	r3, #4
 80097be:	d008      	beq.n	80097d2 <HAL_TIM_Encoder_Start+0xd4>
 80097c0:	e00f      	b.n	80097e2 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2201      	movs	r2, #1
 80097c8:	2100      	movs	r1, #0
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 f9f6 	bl	8009bbc <TIM_CCxChannelCmd>
      break;
 80097d0:	e016      	b.n	8009800 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2201      	movs	r2, #1
 80097d8:	2104      	movs	r1, #4
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f9ee 	bl	8009bbc <TIM_CCxChannelCmd>
      break;
 80097e0:	e00e      	b.n	8009800 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2201      	movs	r2, #1
 80097e8:	2100      	movs	r1, #0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 f9e6 	bl	8009bbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2201      	movs	r2, #1
 80097f6:	2104      	movs	r1, #4
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 f9df 	bl	8009bbc <TIM_CCxChannelCmd>
      break;
 80097fe:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0201 	orr.w	r2, r2, #1
 800980e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	f003 0302 	and.w	r3, r3, #2
 800982c:	2b02      	cmp	r3, #2
 800982e:	d122      	bne.n	8009876 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	f003 0302 	and.w	r3, r3, #2
 800983a:	2b02      	cmp	r3, #2
 800983c:	d11b      	bne.n	8009876 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f06f 0202 	mvn.w	r2, #2
 8009846:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	f003 0303 	and.w	r3, r3, #3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f8ee 	bl	8009a3e <HAL_TIM_IC_CaptureCallback>
 8009862:	e005      	b.n	8009870 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f8e0 	bl	8009a2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f8f1 	bl	8009a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	f003 0304 	and.w	r3, r3, #4
 8009880:	2b04      	cmp	r3, #4
 8009882:	d122      	bne.n	80098ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	f003 0304 	and.w	r3, r3, #4
 800988e:	2b04      	cmp	r3, #4
 8009890:	d11b      	bne.n	80098ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f06f 0204 	mvn.w	r2, #4
 800989a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2202      	movs	r2, #2
 80098a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d003      	beq.n	80098b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f8c4 	bl	8009a3e <HAL_TIM_IC_CaptureCallback>
 80098b6:	e005      	b.n	80098c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f8b6 	bl	8009a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f8c7 	bl	8009a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	f003 0308 	and.w	r3, r3, #8
 80098d4:	2b08      	cmp	r3, #8
 80098d6:	d122      	bne.n	800991e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f003 0308 	and.w	r3, r3, #8
 80098e2:	2b08      	cmp	r3, #8
 80098e4:	d11b      	bne.n	800991e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f06f 0208 	mvn.w	r2, #8
 80098ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2204      	movs	r2, #4
 80098f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	f003 0303 	and.w	r3, r3, #3
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f89a 	bl	8009a3e <HAL_TIM_IC_CaptureCallback>
 800990a:	e005      	b.n	8009918 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f88c 	bl	8009a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f89d 	bl	8009a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	f003 0310 	and.w	r3, r3, #16
 8009928:	2b10      	cmp	r3, #16
 800992a:	d122      	bne.n	8009972 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	f003 0310 	and.w	r3, r3, #16
 8009936:	2b10      	cmp	r3, #16
 8009938:	d11b      	bne.n	8009972 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f06f 0210 	mvn.w	r2, #16
 8009942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2208      	movs	r2, #8
 8009948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009954:	2b00      	cmp	r3, #0
 8009956:	d003      	beq.n	8009960 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f870 	bl	8009a3e <HAL_TIM_IC_CaptureCallback>
 800995e:	e005      	b.n	800996c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f862 	bl	8009a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f873 	bl	8009a52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b01      	cmp	r3, #1
 800997e:	d10e      	bne.n	800999e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	2b01      	cmp	r3, #1
 800998c:	d107      	bne.n	800999e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f06f 0201 	mvn.w	r2, #1
 8009996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7f9 fcd9 	bl	8003350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a8:	2b80      	cmp	r3, #128	; 0x80
 80099aa:	d10e      	bne.n	80099ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b6:	2b80      	cmp	r3, #128	; 0x80
 80099b8:	d107      	bne.n	80099ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f9a5 	bl	8009d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d4:	2b40      	cmp	r3, #64	; 0x40
 80099d6:	d10e      	bne.n	80099f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e2:	2b40      	cmp	r3, #64	; 0x40
 80099e4:	d107      	bne.n	80099f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f838 	bl	8009a66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	f003 0320 	and.w	r3, r3, #32
 8009a00:	2b20      	cmp	r3, #32
 8009a02:	d10e      	bne.n	8009a22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	f003 0320 	and.w	r3, r3, #32
 8009a0e:	2b20      	cmp	r3, #32
 8009a10:	d107      	bne.n	8009a22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f06f 0220 	mvn.w	r2, #32
 8009a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f96f 	bl	8009d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a22:	bf00      	nop
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b083      	sub	sp, #12
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a32:	bf00      	nop
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b083      	sub	sp, #12
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a6e:	bf00      	nop
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
	...

08009a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a40      	ldr	r2, [pc, #256]	; (8009b90 <TIM_Base_SetConfig+0x114>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d013      	beq.n	8009abc <TIM_Base_SetConfig+0x40>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a9a:	d00f      	beq.n	8009abc <TIM_Base_SetConfig+0x40>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a3d      	ldr	r2, [pc, #244]	; (8009b94 <TIM_Base_SetConfig+0x118>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d00b      	beq.n	8009abc <TIM_Base_SetConfig+0x40>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a3c      	ldr	r2, [pc, #240]	; (8009b98 <TIM_Base_SetConfig+0x11c>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d007      	beq.n	8009abc <TIM_Base_SetConfig+0x40>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a3b      	ldr	r2, [pc, #236]	; (8009b9c <TIM_Base_SetConfig+0x120>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d003      	beq.n	8009abc <TIM_Base_SetConfig+0x40>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a3a      	ldr	r2, [pc, #232]	; (8009ba0 <TIM_Base_SetConfig+0x124>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d108      	bne.n	8009ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a2f      	ldr	r2, [pc, #188]	; (8009b90 <TIM_Base_SetConfig+0x114>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d02b      	beq.n	8009b2e <TIM_Base_SetConfig+0xb2>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009adc:	d027      	beq.n	8009b2e <TIM_Base_SetConfig+0xb2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a2c      	ldr	r2, [pc, #176]	; (8009b94 <TIM_Base_SetConfig+0x118>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d023      	beq.n	8009b2e <TIM_Base_SetConfig+0xb2>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a2b      	ldr	r2, [pc, #172]	; (8009b98 <TIM_Base_SetConfig+0x11c>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d01f      	beq.n	8009b2e <TIM_Base_SetConfig+0xb2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a2a      	ldr	r2, [pc, #168]	; (8009b9c <TIM_Base_SetConfig+0x120>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d01b      	beq.n	8009b2e <TIM_Base_SetConfig+0xb2>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a29      	ldr	r2, [pc, #164]	; (8009ba0 <TIM_Base_SetConfig+0x124>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d017      	beq.n	8009b2e <TIM_Base_SetConfig+0xb2>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a28      	ldr	r2, [pc, #160]	; (8009ba4 <TIM_Base_SetConfig+0x128>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d013      	beq.n	8009b2e <TIM_Base_SetConfig+0xb2>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a27      	ldr	r2, [pc, #156]	; (8009ba8 <TIM_Base_SetConfig+0x12c>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d00f      	beq.n	8009b2e <TIM_Base_SetConfig+0xb2>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a26      	ldr	r2, [pc, #152]	; (8009bac <TIM_Base_SetConfig+0x130>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d00b      	beq.n	8009b2e <TIM_Base_SetConfig+0xb2>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a25      	ldr	r2, [pc, #148]	; (8009bb0 <TIM_Base_SetConfig+0x134>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d007      	beq.n	8009b2e <TIM_Base_SetConfig+0xb2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a24      	ldr	r2, [pc, #144]	; (8009bb4 <TIM_Base_SetConfig+0x138>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d003      	beq.n	8009b2e <TIM_Base_SetConfig+0xb2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a23      	ldr	r2, [pc, #140]	; (8009bb8 <TIM_Base_SetConfig+0x13c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d108      	bne.n	8009b40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	689a      	ldr	r2, [r3, #8]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a0a      	ldr	r2, [pc, #40]	; (8009b90 <TIM_Base_SetConfig+0x114>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d003      	beq.n	8009b74 <TIM_Base_SetConfig+0xf8>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a0c      	ldr	r2, [pc, #48]	; (8009ba0 <TIM_Base_SetConfig+0x124>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d103      	bne.n	8009b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	691a      	ldr	r2, [r3, #16]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	615a      	str	r2, [r3, #20]
}
 8009b82:	bf00      	nop
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	40010000 	.word	0x40010000
 8009b94:	40000400 	.word	0x40000400
 8009b98:	40000800 	.word	0x40000800
 8009b9c:	40000c00 	.word	0x40000c00
 8009ba0:	40010400 	.word	0x40010400
 8009ba4:	40014000 	.word	0x40014000
 8009ba8:	40014400 	.word	0x40014400
 8009bac:	40014800 	.word	0x40014800
 8009bb0:	40001800 	.word	0x40001800
 8009bb4:	40001c00 	.word	0x40001c00
 8009bb8:	40002000 	.word	0x40002000

08009bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	f003 031f 	and.w	r3, r3, #31
 8009bce:	2201      	movs	r2, #1
 8009bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6a1a      	ldr	r2, [r3, #32]
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	43db      	mvns	r3, r3
 8009bde:	401a      	ands	r2, r3
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6a1a      	ldr	r2, [r3, #32]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f003 031f 	and.w	r3, r3, #31
 8009bee:	6879      	ldr	r1, [r7, #4]
 8009bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf4:	431a      	orrs	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	621a      	str	r2, [r3, #32]
}
 8009bfa:	bf00      	nop
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
	...

08009c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d101      	bne.n	8009c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e05a      	b.n	8009cd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a21      	ldr	r2, [pc, #132]	; (8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d022      	beq.n	8009caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c6c:	d01d      	beq.n	8009caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a1d      	ldr	r2, [pc, #116]	; (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d018      	beq.n	8009caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a1b      	ldr	r2, [pc, #108]	; (8009cec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d013      	beq.n	8009caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a1a      	ldr	r2, [pc, #104]	; (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d00e      	beq.n	8009caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a18      	ldr	r2, [pc, #96]	; (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d009      	beq.n	8009caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a17      	ldr	r2, [pc, #92]	; (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d004      	beq.n	8009caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a15      	ldr	r2, [pc, #84]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d10c      	bne.n	8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	40010000 	.word	0x40010000
 8009ce8:	40000400 	.word	0x40000400
 8009cec:	40000800 	.word	0x40000800
 8009cf0:	40000c00 	.word	0x40000c00
 8009cf4:	40010400 	.word	0x40010400
 8009cf8:	40014000 	.word	0x40014000
 8009cfc:	40001800 	.word	0x40001800

08009d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e03f      	b.n	8009dba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d106      	bne.n	8009d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7f9 fd4c 	bl	80037ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2224      	movs	r2, #36	; 0x24
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68da      	ldr	r2, [r3, #12]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fddb 	bl	800a928 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	691a      	ldr	r2, [r3, #16]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	695a      	ldr	r2, [r3, #20]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68da      	ldr	r2, [r3, #12]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b08a      	sub	sp, #40	; 0x28
 8009dc6:	af02      	add	r7, sp, #8
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	60b9      	str	r1, [r7, #8]
 8009dcc:	603b      	str	r3, [r7, #0]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b20      	cmp	r3, #32
 8009de0:	d17c      	bne.n	8009edc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <HAL_UART_Transmit+0x2c>
 8009de8:	88fb      	ldrh	r3, [r7, #6]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e075      	b.n	8009ede <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d101      	bne.n	8009e00 <HAL_UART_Transmit+0x3e>
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	e06e      	b.n	8009ede <HAL_UART_Transmit+0x11c>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2221      	movs	r2, #33	; 0x21
 8009e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e16:	f7fa faa5 	bl	8004364 <HAL_GetTick>
 8009e1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	88fa      	ldrh	r2, [r7, #6]
 8009e20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	88fa      	ldrh	r2, [r7, #6]
 8009e26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e30:	d108      	bne.n	8009e44 <HAL_UART_Transmit+0x82>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d104      	bne.n	8009e44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	61bb      	str	r3, [r7, #24]
 8009e42:	e003      	b.n	8009e4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009e54:	e02a      	b.n	8009eac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2180      	movs	r1, #128	; 0x80
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 fb1f 	bl	800a4a4 <UART_WaitOnFlagUntilTimeout>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e036      	b.n	8009ede <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10b      	bne.n	8009e8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	3302      	adds	r3, #2
 8009e8a:	61bb      	str	r3, [r7, #24]
 8009e8c:	e007      	b.n	8009e9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	781a      	ldrb	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1cf      	bne.n	8009e56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2140      	movs	r1, #64	; 0x40
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f000 faef 	bl	800a4a4 <UART_WaitOnFlagUntilTimeout>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e006      	b.n	8009ede <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	e000      	b.n	8009ede <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009edc:	2302      	movs	r3, #2
  }
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3720      	adds	r7, #32
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b20      	cmp	r3, #32
 8009efe:	d11d      	bne.n	8009f3c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <HAL_UART_Receive_IT+0x26>
 8009f06:	88fb      	ldrh	r3, [r7, #6]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e016      	b.n	8009f3e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d101      	bne.n	8009f1e <HAL_UART_Receive_IT+0x38>
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	e00f      	b.n	8009f3e <HAL_UART_Receive_IT+0x58>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009f2c:	88fb      	ldrh	r3, [r7, #6]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	68b9      	ldr	r1, [r7, #8]
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 fb24 	bl	800a580 <UART_Start_Receive_IT>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	e000      	b.n	8009f3e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009f3c:	2302      	movs	r3, #2
  }
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b0ba      	sub	sp, #232	; 0xe8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f7e:	f003 030f 	and.w	r3, r3, #15
 8009f82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009f86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10f      	bne.n	8009fae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d009      	beq.n	8009fae <HAL_UART_IRQHandler+0x66>
 8009f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d003      	beq.n	8009fae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fc03 	bl	800a7b2 <UART_Receive_IT>
      return;
 8009fac:	e256      	b.n	800a45c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 80de 	beq.w	800a174 <HAL_UART_IRQHandler+0x22c>
 8009fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d106      	bne.n	8009fd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 80d1 	beq.w	800a174 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00b      	beq.n	8009ff6 <HAL_UART_IRQHandler+0xae>
 8009fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d005      	beq.n	8009ff6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fee:	f043 0201 	orr.w	r2, r3, #1
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00b      	beq.n	800a01a <HAL_UART_IRQHandler+0xd2>
 800a002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a012:	f043 0202 	orr.w	r2, r3, #2
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a01a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00b      	beq.n	800a03e <HAL_UART_IRQHandler+0xf6>
 800a026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d005      	beq.n	800a03e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a036:	f043 0204 	orr.w	r2, r3, #4
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a042:	f003 0308 	and.w	r3, r3, #8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d011      	beq.n	800a06e <HAL_UART_IRQHandler+0x126>
 800a04a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a04e:	f003 0320 	and.w	r3, r3, #32
 800a052:	2b00      	cmp	r3, #0
 800a054:	d105      	bne.n	800a062 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a066:	f043 0208 	orr.w	r2, r3, #8
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 81ed 	beq.w	800a452 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a07c:	f003 0320 	and.w	r3, r3, #32
 800a080:	2b00      	cmp	r3, #0
 800a082:	d008      	beq.n	800a096 <HAL_UART_IRQHandler+0x14e>
 800a084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fb8e 	bl	800a7b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	695b      	ldr	r3, [r3, #20]
 800a09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a0:	2b40      	cmp	r3, #64	; 0x40
 800a0a2:	bf0c      	ite	eq
 800a0a4:	2301      	moveq	r3, #1
 800a0a6:	2300      	movne	r3, #0
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b2:	f003 0308 	and.w	r3, r3, #8
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d103      	bne.n	800a0c2 <HAL_UART_IRQHandler+0x17a>
 800a0ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d04f      	beq.n	800a162 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fa96 	bl	800a5f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d2:	2b40      	cmp	r3, #64	; 0x40
 800a0d4:	d141      	bne.n	800a15a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3314      	adds	r3, #20
 800a0dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a0ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3314      	adds	r3, #20
 800a0fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a102:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a10e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a11a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1d9      	bne.n	800a0d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a126:	2b00      	cmp	r3, #0
 800a128:	d013      	beq.n	800a152 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12e:	4a7d      	ldr	r2, [pc, #500]	; (800a324 <HAL_UART_IRQHandler+0x3dc>)
 800a130:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a136:	4618      	mov	r0, r3
 800a138:	f7fa fa96 	bl	8004668 <HAL_DMA_Abort_IT>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d016      	beq.n	800a170 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a14c:	4610      	mov	r0, r2
 800a14e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a150:	e00e      	b.n	800a170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f990 	bl	800a478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a158:	e00a      	b.n	800a170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f98c 	bl	800a478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a160:	e006      	b.n	800a170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f988 	bl	800a478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a16e:	e170      	b.n	800a452 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a170:	bf00      	nop
    return;
 800a172:	e16e      	b.n	800a452 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a178:	2b01      	cmp	r3, #1
 800a17a:	f040 814a 	bne.w	800a412 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a182:	f003 0310 	and.w	r3, r3, #16
 800a186:	2b00      	cmp	r3, #0
 800a188:	f000 8143 	beq.w	800a412 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a18c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a190:	f003 0310 	and.w	r3, r3, #16
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 813c 	beq.w	800a412 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a19a:	2300      	movs	r3, #0
 800a19c:	60bb      	str	r3, [r7, #8]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	60bb      	str	r3, [r7, #8]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	60bb      	str	r3, [r7, #8]
 800a1ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	695b      	ldr	r3, [r3, #20]
 800a1b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ba:	2b40      	cmp	r3, #64	; 0x40
 800a1bc:	f040 80b4 	bne.w	800a328 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a1cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 8140 	beq.w	800a456 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	f080 8139 	bcs.w	800a456 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1f6:	f000 8088 	beq.w	800a30a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	330c      	adds	r3, #12
 800a200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a208:	e853 3f00 	ldrex	r3, [r3]
 800a20c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	330c      	adds	r3, #12
 800a222:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a226:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a22a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a232:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a236:	e841 2300 	strex	r3, r2, [r1]
 800a23a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a23e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1d9      	bne.n	800a1fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3314      	adds	r3, #20
 800a24c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a250:	e853 3f00 	ldrex	r3, [r3]
 800a254:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a258:	f023 0301 	bic.w	r3, r3, #1
 800a25c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3314      	adds	r3, #20
 800a266:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a26a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a26e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a270:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a272:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a276:	e841 2300 	strex	r3, r2, [r1]
 800a27a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a27c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1e1      	bne.n	800a246 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3314      	adds	r3, #20
 800a288:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a28c:	e853 3f00 	ldrex	r3, [r3]
 800a290:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3314      	adds	r3, #20
 800a2a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a2a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a2a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a2ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a2ae:	e841 2300 	strex	r3, r2, [r1]
 800a2b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a2b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1e3      	bne.n	800a282 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	330c      	adds	r3, #12
 800a2ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2d2:	e853 3f00 	ldrex	r3, [r3]
 800a2d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2da:	f023 0310 	bic.w	r3, r3, #16
 800a2de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	330c      	adds	r3, #12
 800a2e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a2ec:	65ba      	str	r2, [r7, #88]	; 0x58
 800a2ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2f4:	e841 2300 	strex	r3, r2, [r1]
 800a2f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a2fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e3      	bne.n	800a2c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	4618      	mov	r0, r3
 800a306:	f7fa f93f 	bl	8004588 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a312:	b29b      	uxth	r3, r3
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	b29b      	uxth	r3, r3
 800a318:	4619      	mov	r1, r3
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f8b6 	bl	800a48c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a320:	e099      	b.n	800a456 <HAL_UART_IRQHandler+0x50e>
 800a322:	bf00      	nop
 800a324:	0800a6bb 	.word	0x0800a6bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a330:	b29b      	uxth	r3, r3
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 808b 	beq.w	800a45a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 8086 	beq.w	800a45a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	330c      	adds	r3, #12
 800a354:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a358:	e853 3f00 	ldrex	r3, [r3]
 800a35c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a364:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	330c      	adds	r3, #12
 800a36e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a372:	647a      	str	r2, [r7, #68]	; 0x44
 800a374:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a376:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a37a:	e841 2300 	strex	r3, r2, [r1]
 800a37e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1e3      	bne.n	800a34e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3314      	adds	r3, #20
 800a38c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	623b      	str	r3, [r7, #32]
   return(result);
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	f023 0301 	bic.w	r3, r3, #1
 800a39c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3314      	adds	r3, #20
 800a3a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a3aa:	633a      	str	r2, [r7, #48]	; 0x30
 800a3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3b2:	e841 2300 	strex	r3, r2, [r1]
 800a3b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1e3      	bne.n	800a386 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2220      	movs	r2, #32
 800a3c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	330c      	adds	r3, #12
 800a3d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	e853 3f00 	ldrex	r3, [r3]
 800a3da:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f023 0310 	bic.w	r3, r3, #16
 800a3e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	330c      	adds	r3, #12
 800a3ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a3f0:	61fa      	str	r2, [r7, #28]
 800a3f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f4:	69b9      	ldr	r1, [r7, #24]
 800a3f6:	69fa      	ldr	r2, [r7, #28]
 800a3f8:	e841 2300 	strex	r3, r2, [r1]
 800a3fc:	617b      	str	r3, [r7, #20]
   return(result);
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e3      	bne.n	800a3cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a404:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a408:	4619      	mov	r1, r3
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f83e 	bl	800a48c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a410:	e023      	b.n	800a45a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d009      	beq.n	800a432 <HAL_UART_IRQHandler+0x4ea>
 800a41e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f959 	bl	800a6e2 <UART_Transmit_IT>
    return;
 800a430:	e014      	b.n	800a45c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00e      	beq.n	800a45c <HAL_UART_IRQHandler+0x514>
 800a43e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a446:	2b00      	cmp	r3, #0
 800a448:	d008      	beq.n	800a45c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f999 	bl	800a782 <UART_EndTransmit_IT>
    return;
 800a450:	e004      	b.n	800a45c <HAL_UART_IRQHandler+0x514>
    return;
 800a452:	bf00      	nop
 800a454:	e002      	b.n	800a45c <HAL_UART_IRQHandler+0x514>
      return;
 800a456:	bf00      	nop
 800a458:	e000      	b.n	800a45c <HAL_UART_IRQHandler+0x514>
      return;
 800a45a:	bf00      	nop
  }
}
 800a45c:	37e8      	adds	r7, #232	; 0xe8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop

0800a464 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b090      	sub	sp, #64	; 0x40
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4b4:	e050      	b.n	800a558 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4bc:	d04c      	beq.n	800a558 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d007      	beq.n	800a4d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4c4:	f7f9 ff4e 	bl	8004364 <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d241      	bcs.n	800a558 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	330c      	adds	r3, #12
 800a4da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4de:	e853 3f00 	ldrex	r3, [r3]
 800a4e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	330c      	adds	r3, #12
 800a4f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4f4:	637a      	str	r2, [r7, #52]	; 0x34
 800a4f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4fc:	e841 2300 	strex	r3, r2, [r1]
 800a500:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1e5      	bne.n	800a4d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3314      	adds	r3, #20
 800a50e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	e853 3f00 	ldrex	r3, [r3]
 800a516:	613b      	str	r3, [r7, #16]
   return(result);
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	f023 0301 	bic.w	r3, r3, #1
 800a51e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3314      	adds	r3, #20
 800a526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a528:	623a      	str	r2, [r7, #32]
 800a52a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52c:	69f9      	ldr	r1, [r7, #28]
 800a52e:	6a3a      	ldr	r2, [r7, #32]
 800a530:	e841 2300 	strex	r3, r2, [r1]
 800a534:	61bb      	str	r3, [r7, #24]
   return(result);
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1e5      	bne.n	800a508 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2220      	movs	r2, #32
 800a540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2220      	movs	r2, #32
 800a548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a554:	2303      	movs	r3, #3
 800a556:	e00f      	b.n	800a578 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	4013      	ands	r3, r2
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	429a      	cmp	r2, r3
 800a566:	bf0c      	ite	eq
 800a568:	2301      	moveq	r3, #1
 800a56a:	2300      	movne	r3, #0
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	461a      	mov	r2, r3
 800a570:	79fb      	ldrb	r3, [r7, #7]
 800a572:	429a      	cmp	r2, r3
 800a574:	d09f      	beq.n	800a4b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3740      	adds	r7, #64	; 0x40
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	4613      	mov	r3, r2
 800a58c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	88fa      	ldrh	r2, [r7, #6]
 800a598:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	88fa      	ldrh	r2, [r7, #6]
 800a59e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2222      	movs	r2, #34	; 0x22
 800a5aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68da      	ldr	r2, [r3, #12]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5c4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	695a      	ldr	r2, [r3, #20]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f042 0201 	orr.w	r2, r2, #1
 800a5d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68da      	ldr	r2, [r3, #12]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f042 0220 	orr.w	r2, r2, #32
 800a5e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b095      	sub	sp, #84	; 0x54
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	330c      	adds	r3, #12
 800a602:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a606:	e853 3f00 	ldrex	r3, [r3]
 800a60a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a612:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	330c      	adds	r3, #12
 800a61a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a61c:	643a      	str	r2, [r7, #64]	; 0x40
 800a61e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a620:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a622:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a624:	e841 2300 	strex	r3, r2, [r1]
 800a628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1e5      	bne.n	800a5fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3314      	adds	r3, #20
 800a636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a638:	6a3b      	ldr	r3, [r7, #32]
 800a63a:	e853 3f00 	ldrex	r3, [r3]
 800a63e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	f023 0301 	bic.w	r3, r3, #1
 800a646:	64bb      	str	r3, [r7, #72]	; 0x48
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3314      	adds	r3, #20
 800a64e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a650:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a658:	e841 2300 	strex	r3, r2, [r1]
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1e5      	bne.n	800a630 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d119      	bne.n	800a6a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	330c      	adds	r3, #12
 800a672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	e853 3f00 	ldrex	r3, [r3]
 800a67a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f023 0310 	bic.w	r3, r3, #16
 800a682:	647b      	str	r3, [r7, #68]	; 0x44
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	330c      	adds	r3, #12
 800a68a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a68c:	61ba      	str	r2, [r7, #24]
 800a68e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a690:	6979      	ldr	r1, [r7, #20]
 800a692:	69ba      	ldr	r2, [r7, #24]
 800a694:	e841 2300 	strex	r3, r2, [r1]
 800a698:	613b      	str	r3, [r7, #16]
   return(result);
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1e5      	bne.n	800a66c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a6ae:	bf00      	nop
 800a6b0:	3754      	adds	r7, #84	; 0x54
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b084      	sub	sp, #16
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7ff fecf 	bl	800a478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6da:	bf00      	nop
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	b085      	sub	sp, #20
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b21      	cmp	r3, #33	; 0x21
 800a6f4:	d13e      	bne.n	800a774 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6fe:	d114      	bne.n	800a72a <UART_Transmit_IT+0x48>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d110      	bne.n	800a72a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	461a      	mov	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a71c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a1b      	ldr	r3, [r3, #32]
 800a722:	1c9a      	adds	r2, r3, #2
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	621a      	str	r2, [r3, #32]
 800a728:	e008      	b.n	800a73c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	1c59      	adds	r1, r3, #1
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	6211      	str	r1, [r2, #32]
 800a734:	781a      	ldrb	r2, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a740:	b29b      	uxth	r3, r3
 800a742:	3b01      	subs	r3, #1
 800a744:	b29b      	uxth	r3, r3
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	4619      	mov	r1, r3
 800a74a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10f      	bne.n	800a770 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68da      	ldr	r2, [r3, #12]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a75e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68da      	ldr	r2, [r3, #12]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a76e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	e000      	b.n	800a776 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a774:	2302      	movs	r3, #2
  }
}
 800a776:	4618      	mov	r0, r3
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr

0800a782 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68da      	ldr	r2, [r3, #12]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a798:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2220      	movs	r2, #32
 800a79e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7ff fe5e 	bl	800a464 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b08c      	sub	sp, #48	; 0x30
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b22      	cmp	r3, #34	; 0x22
 800a7c4:	f040 80ab 	bne.w	800a91e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7d0:	d117      	bne.n	800a802 <UART_Receive_IT+0x50>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d113      	bne.n	800a802 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fa:	1c9a      	adds	r2, r3, #2
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	629a      	str	r2, [r3, #40]	; 0x28
 800a800:	e026      	b.n	800a850 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a806:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a808:	2300      	movs	r3, #0
 800a80a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a814:	d007      	beq.n	800a826 <UART_Receive_IT+0x74>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10a      	bne.n	800a834 <UART_Receive_IT+0x82>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d106      	bne.n	800a834 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a830:	701a      	strb	r2, [r3, #0]
 800a832:	e008      	b.n	800a846 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a840:	b2da      	uxtb	r2, r3
 800a842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a844:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a854:	b29b      	uxth	r3, r3
 800a856:	3b01      	subs	r3, #1
 800a858:	b29b      	uxth	r3, r3
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	4619      	mov	r1, r3
 800a85e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a860:	2b00      	cmp	r3, #0
 800a862:	d15a      	bne.n	800a91a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f022 0220 	bic.w	r2, r2, #32
 800a872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68da      	ldr	r2, [r3, #12]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	695a      	ldr	r2, [r3, #20]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f022 0201 	bic.w	r2, r2, #1
 800a892:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2220      	movs	r2, #32
 800a898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d135      	bne.n	800a910 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	330c      	adds	r3, #12
 800a8b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	e853 3f00 	ldrex	r3, [r3]
 800a8b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	f023 0310 	bic.w	r3, r3, #16
 800a8c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	330c      	adds	r3, #12
 800a8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ca:	623a      	str	r2, [r7, #32]
 800a8cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ce:	69f9      	ldr	r1, [r7, #28]
 800a8d0:	6a3a      	ldr	r2, [r7, #32]
 800a8d2:	e841 2300 	strex	r3, r2, [r1]
 800a8d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1e5      	bne.n	800a8aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0310 	and.w	r3, r3, #16
 800a8e8:	2b10      	cmp	r3, #16
 800a8ea:	d10a      	bne.n	800a902 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	60fb      	str	r3, [r7, #12]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	60fb      	str	r3, [r7, #12]
 800a900:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7ff fdbf 	bl	800a48c <HAL_UARTEx_RxEventCallback>
 800a90e:	e002      	b.n	800a916 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7f6 fd6b 	bl	80013ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	e002      	b.n	800a920 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	e000      	b.n	800a920 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a91e:	2302      	movs	r3, #2
  }
}
 800a920:	4618      	mov	r0, r3
 800a922:	3730      	adds	r7, #48	; 0x30
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	b09f      	sub	sp, #124	; 0x7c
 800a92e:	af00      	add	r7, sp, #0
 800a930:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a93c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a93e:	68d9      	ldr	r1, [r3, #12]
 800a940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	ea40 0301 	orr.w	r3, r0, r1
 800a948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a94a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a94c:	689a      	ldr	r2, [r3, #8]
 800a94e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	431a      	orrs	r2, r3
 800a954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	431a      	orrs	r2, r3
 800a95a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	4313      	orrs	r3, r2
 800a960:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a96c:	f021 010c 	bic.w	r1, r1, #12
 800a970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a976:	430b      	orrs	r3, r1
 800a978:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a97a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a986:	6999      	ldr	r1, [r3, #24]
 800a988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	ea40 0301 	orr.w	r3, r0, r1
 800a990:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	4bc5      	ldr	r3, [pc, #788]	; (800acac <UART_SetConfig+0x384>)
 800a998:	429a      	cmp	r2, r3
 800a99a:	d004      	beq.n	800a9a6 <UART_SetConfig+0x7e>
 800a99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	4bc3      	ldr	r3, [pc, #780]	; (800acb0 <UART_SetConfig+0x388>)
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d103      	bne.n	800a9ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a9a6:	f7fe f823 	bl	80089f0 <HAL_RCC_GetPCLK2Freq>
 800a9aa:	6778      	str	r0, [r7, #116]	; 0x74
 800a9ac:	e002      	b.n	800a9b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a9ae:	f7fe f80b 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800a9b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9b6:	69db      	ldr	r3, [r3, #28]
 800a9b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9bc:	f040 80b6 	bne.w	800ab2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a9c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9c2:	461c      	mov	r4, r3
 800a9c4:	f04f 0500 	mov.w	r5, #0
 800a9c8:	4622      	mov	r2, r4
 800a9ca:	462b      	mov	r3, r5
 800a9cc:	1891      	adds	r1, r2, r2
 800a9ce:	6439      	str	r1, [r7, #64]	; 0x40
 800a9d0:	415b      	adcs	r3, r3
 800a9d2:	647b      	str	r3, [r7, #68]	; 0x44
 800a9d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a9d8:	1912      	adds	r2, r2, r4
 800a9da:	eb45 0303 	adc.w	r3, r5, r3
 800a9de:	f04f 0000 	mov.w	r0, #0
 800a9e2:	f04f 0100 	mov.w	r1, #0
 800a9e6:	00d9      	lsls	r1, r3, #3
 800a9e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a9ec:	00d0      	lsls	r0, r2, #3
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	1911      	adds	r1, r2, r4
 800a9f4:	6639      	str	r1, [r7, #96]	; 0x60
 800a9f6:	416b      	adcs	r3, r5
 800a9f8:	667b      	str	r3, [r7, #100]	; 0x64
 800a9fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f04f 0300 	mov.w	r3, #0
 800aa04:	1891      	adds	r1, r2, r2
 800aa06:	63b9      	str	r1, [r7, #56]	; 0x38
 800aa08:	415b      	adcs	r3, r3
 800aa0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aa10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800aa14:	f7f5 fc44 	bl	80002a0 <__aeabi_uldivmod>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4ba5      	ldr	r3, [pc, #660]	; (800acb4 <UART_SetConfig+0x38c>)
 800aa1e:	fba3 2302 	umull	r2, r3, r3, r2
 800aa22:	095b      	lsrs	r3, r3, #5
 800aa24:	011e      	lsls	r6, r3, #4
 800aa26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa28:	461c      	mov	r4, r3
 800aa2a:	f04f 0500 	mov.w	r5, #0
 800aa2e:	4622      	mov	r2, r4
 800aa30:	462b      	mov	r3, r5
 800aa32:	1891      	adds	r1, r2, r2
 800aa34:	6339      	str	r1, [r7, #48]	; 0x30
 800aa36:	415b      	adcs	r3, r3
 800aa38:	637b      	str	r3, [r7, #52]	; 0x34
 800aa3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800aa3e:	1912      	adds	r2, r2, r4
 800aa40:	eb45 0303 	adc.w	r3, r5, r3
 800aa44:	f04f 0000 	mov.w	r0, #0
 800aa48:	f04f 0100 	mov.w	r1, #0
 800aa4c:	00d9      	lsls	r1, r3, #3
 800aa4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aa52:	00d0      	lsls	r0, r2, #3
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	1911      	adds	r1, r2, r4
 800aa5a:	65b9      	str	r1, [r7, #88]	; 0x58
 800aa5c:	416b      	adcs	r3, r5
 800aa5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	461a      	mov	r2, r3
 800aa66:	f04f 0300 	mov.w	r3, #0
 800aa6a:	1891      	adds	r1, r2, r2
 800aa6c:	62b9      	str	r1, [r7, #40]	; 0x28
 800aa6e:	415b      	adcs	r3, r3
 800aa70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800aa7a:	f7f5 fc11 	bl	80002a0 <__aeabi_uldivmod>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4b8c      	ldr	r3, [pc, #560]	; (800acb4 <UART_SetConfig+0x38c>)
 800aa84:	fba3 1302 	umull	r1, r3, r3, r2
 800aa88:	095b      	lsrs	r3, r3, #5
 800aa8a:	2164      	movs	r1, #100	; 0x64
 800aa8c:	fb01 f303 	mul.w	r3, r1, r3
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	00db      	lsls	r3, r3, #3
 800aa94:	3332      	adds	r3, #50	; 0x32
 800aa96:	4a87      	ldr	r2, [pc, #540]	; (800acb4 <UART_SetConfig+0x38c>)
 800aa98:	fba2 2303 	umull	r2, r3, r2, r3
 800aa9c:	095b      	lsrs	r3, r3, #5
 800aa9e:	005b      	lsls	r3, r3, #1
 800aaa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aaa4:	441e      	add	r6, r3
 800aaa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f04f 0100 	mov.w	r1, #0
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	1894      	adds	r4, r2, r2
 800aab4:	623c      	str	r4, [r7, #32]
 800aab6:	415b      	adcs	r3, r3
 800aab8:	627b      	str	r3, [r7, #36]	; 0x24
 800aaba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aabe:	1812      	adds	r2, r2, r0
 800aac0:	eb41 0303 	adc.w	r3, r1, r3
 800aac4:	f04f 0400 	mov.w	r4, #0
 800aac8:	f04f 0500 	mov.w	r5, #0
 800aacc:	00dd      	lsls	r5, r3, #3
 800aace:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aad2:	00d4      	lsls	r4, r2, #3
 800aad4:	4622      	mov	r2, r4
 800aad6:	462b      	mov	r3, r5
 800aad8:	1814      	adds	r4, r2, r0
 800aada:	653c      	str	r4, [r7, #80]	; 0x50
 800aadc:	414b      	adcs	r3, r1
 800aade:	657b      	str	r3, [r7, #84]	; 0x54
 800aae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	461a      	mov	r2, r3
 800aae6:	f04f 0300 	mov.w	r3, #0
 800aaea:	1891      	adds	r1, r2, r2
 800aaec:	61b9      	str	r1, [r7, #24]
 800aaee:	415b      	adcs	r3, r3
 800aaf0:	61fb      	str	r3, [r7, #28]
 800aaf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aaf6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800aafa:	f7f5 fbd1 	bl	80002a0 <__aeabi_uldivmod>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	4b6c      	ldr	r3, [pc, #432]	; (800acb4 <UART_SetConfig+0x38c>)
 800ab04:	fba3 1302 	umull	r1, r3, r3, r2
 800ab08:	095b      	lsrs	r3, r3, #5
 800ab0a:	2164      	movs	r1, #100	; 0x64
 800ab0c:	fb01 f303 	mul.w	r3, r1, r3
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	00db      	lsls	r3, r3, #3
 800ab14:	3332      	adds	r3, #50	; 0x32
 800ab16:	4a67      	ldr	r2, [pc, #412]	; (800acb4 <UART_SetConfig+0x38c>)
 800ab18:	fba2 2303 	umull	r2, r3, r2, r3
 800ab1c:	095b      	lsrs	r3, r3, #5
 800ab1e:	f003 0207 	and.w	r2, r3, #7
 800ab22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4432      	add	r2, r6
 800ab28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab2a:	e0b9      	b.n	800aca0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab2e:	461c      	mov	r4, r3
 800ab30:	f04f 0500 	mov.w	r5, #0
 800ab34:	4622      	mov	r2, r4
 800ab36:	462b      	mov	r3, r5
 800ab38:	1891      	adds	r1, r2, r2
 800ab3a:	6139      	str	r1, [r7, #16]
 800ab3c:	415b      	adcs	r3, r3
 800ab3e:	617b      	str	r3, [r7, #20]
 800ab40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ab44:	1912      	adds	r2, r2, r4
 800ab46:	eb45 0303 	adc.w	r3, r5, r3
 800ab4a:	f04f 0000 	mov.w	r0, #0
 800ab4e:	f04f 0100 	mov.w	r1, #0
 800ab52:	00d9      	lsls	r1, r3, #3
 800ab54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab58:	00d0      	lsls	r0, r2, #3
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	eb12 0804 	adds.w	r8, r2, r4
 800ab62:	eb43 0905 	adc.w	r9, r3, r5
 800ab66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f04f 0100 	mov.w	r1, #0
 800ab70:	f04f 0200 	mov.w	r2, #0
 800ab74:	f04f 0300 	mov.w	r3, #0
 800ab78:	008b      	lsls	r3, r1, #2
 800ab7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ab7e:	0082      	lsls	r2, r0, #2
 800ab80:	4640      	mov	r0, r8
 800ab82:	4649      	mov	r1, r9
 800ab84:	f7f5 fb8c 	bl	80002a0 <__aeabi_uldivmod>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4b49      	ldr	r3, [pc, #292]	; (800acb4 <UART_SetConfig+0x38c>)
 800ab8e:	fba3 2302 	umull	r2, r3, r3, r2
 800ab92:	095b      	lsrs	r3, r3, #5
 800ab94:	011e      	lsls	r6, r3, #4
 800ab96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f04f 0100 	mov.w	r1, #0
 800ab9e:	4602      	mov	r2, r0
 800aba0:	460b      	mov	r3, r1
 800aba2:	1894      	adds	r4, r2, r2
 800aba4:	60bc      	str	r4, [r7, #8]
 800aba6:	415b      	adcs	r3, r3
 800aba8:	60fb      	str	r3, [r7, #12]
 800abaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abae:	1812      	adds	r2, r2, r0
 800abb0:	eb41 0303 	adc.w	r3, r1, r3
 800abb4:	f04f 0400 	mov.w	r4, #0
 800abb8:	f04f 0500 	mov.w	r5, #0
 800abbc:	00dd      	lsls	r5, r3, #3
 800abbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800abc2:	00d4      	lsls	r4, r2, #3
 800abc4:	4622      	mov	r2, r4
 800abc6:	462b      	mov	r3, r5
 800abc8:	1814      	adds	r4, r2, r0
 800abca:	64bc      	str	r4, [r7, #72]	; 0x48
 800abcc:	414b      	adcs	r3, r1
 800abce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f04f 0100 	mov.w	r1, #0
 800abda:	f04f 0200 	mov.w	r2, #0
 800abde:	f04f 0300 	mov.w	r3, #0
 800abe2:	008b      	lsls	r3, r1, #2
 800abe4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800abe8:	0082      	lsls	r2, r0, #2
 800abea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800abee:	f7f5 fb57 	bl	80002a0 <__aeabi_uldivmod>
 800abf2:	4602      	mov	r2, r0
 800abf4:	460b      	mov	r3, r1
 800abf6:	4b2f      	ldr	r3, [pc, #188]	; (800acb4 <UART_SetConfig+0x38c>)
 800abf8:	fba3 1302 	umull	r1, r3, r3, r2
 800abfc:	095b      	lsrs	r3, r3, #5
 800abfe:	2164      	movs	r1, #100	; 0x64
 800ac00:	fb01 f303 	mul.w	r3, r1, r3
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	011b      	lsls	r3, r3, #4
 800ac08:	3332      	adds	r3, #50	; 0x32
 800ac0a:	4a2a      	ldr	r2, [pc, #168]	; (800acb4 <UART_SetConfig+0x38c>)
 800ac0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac10:	095b      	lsrs	r3, r3, #5
 800ac12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac16:	441e      	add	r6, r3
 800ac18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f04f 0100 	mov.w	r1, #0
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	1894      	adds	r4, r2, r2
 800ac26:	603c      	str	r4, [r7, #0]
 800ac28:	415b      	adcs	r3, r3
 800ac2a:	607b      	str	r3, [r7, #4]
 800ac2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac30:	1812      	adds	r2, r2, r0
 800ac32:	eb41 0303 	adc.w	r3, r1, r3
 800ac36:	f04f 0400 	mov.w	r4, #0
 800ac3a:	f04f 0500 	mov.w	r5, #0
 800ac3e:	00dd      	lsls	r5, r3, #3
 800ac40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ac44:	00d4      	lsls	r4, r2, #3
 800ac46:	4622      	mov	r2, r4
 800ac48:	462b      	mov	r3, r5
 800ac4a:	eb12 0a00 	adds.w	sl, r2, r0
 800ac4e:	eb43 0b01 	adc.w	fp, r3, r1
 800ac52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f04f 0100 	mov.w	r1, #0
 800ac5c:	f04f 0200 	mov.w	r2, #0
 800ac60:	f04f 0300 	mov.w	r3, #0
 800ac64:	008b      	lsls	r3, r1, #2
 800ac66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ac6a:	0082      	lsls	r2, r0, #2
 800ac6c:	4650      	mov	r0, sl
 800ac6e:	4659      	mov	r1, fp
 800ac70:	f7f5 fb16 	bl	80002a0 <__aeabi_uldivmod>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4b0e      	ldr	r3, [pc, #56]	; (800acb4 <UART_SetConfig+0x38c>)
 800ac7a:	fba3 1302 	umull	r1, r3, r3, r2
 800ac7e:	095b      	lsrs	r3, r3, #5
 800ac80:	2164      	movs	r1, #100	; 0x64
 800ac82:	fb01 f303 	mul.w	r3, r1, r3
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	011b      	lsls	r3, r3, #4
 800ac8a:	3332      	adds	r3, #50	; 0x32
 800ac8c:	4a09      	ldr	r2, [pc, #36]	; (800acb4 <UART_SetConfig+0x38c>)
 800ac8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac92:	095b      	lsrs	r3, r3, #5
 800ac94:	f003 020f 	and.w	r2, r3, #15
 800ac98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4432      	add	r2, r6
 800ac9e:	609a      	str	r2, [r3, #8]
}
 800aca0:	bf00      	nop
 800aca2:	377c      	adds	r7, #124	; 0x7c
 800aca4:	46bd      	mov	sp, r7
 800aca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acaa:	bf00      	nop
 800acac:	40011000 	.word	0x40011000
 800acb0:	40011400 	.word	0x40011400
 800acb4:	51eb851f 	.word	0x51eb851f

0800acb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800acb8:	b084      	sub	sp, #16
 800acba:	b580      	push	{r7, lr}
 800acbc:	b084      	sub	sp, #16
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	f107 001c 	add.w	r0, r7, #28
 800acc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	2b01      	cmp	r3, #1
 800acce:	d122      	bne.n	800ad16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ace4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800acf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d105      	bne.n	800ad0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f9a0 	bl	800b050 <USB_CoreReset>
 800ad10:	4603      	mov	r3, r0
 800ad12:	73fb      	strb	r3, [r7, #15]
 800ad14:	e01a      	b.n	800ad4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f994 	bl	800b050 <USB_CoreReset>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ad2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d106      	bne.n	800ad40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	639a      	str	r2, [r3, #56]	; 0x38
 800ad3e:	e005      	b.n	800ad4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d10b      	bne.n	800ad6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f043 0206 	orr.w	r2, r3, #6
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f043 0220 	orr.w	r2, r3, #32
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad76:	b004      	add	sp, #16
 800ad78:	4770      	bx	lr

0800ad7a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f043 0201 	orr.w	r2, r3, #1
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f023 0201 	bic.w	r2, r3, #1
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	370c      	adds	r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	460b      	mov	r3, r1
 800adc8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800adca:	2300      	movs	r3, #0
 800adcc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800adda:	78fb      	ldrb	r3, [r7, #3]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d115      	bne.n	800ae0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800adec:	2001      	movs	r0, #1
 800adee:	f7f9 fac5 	bl	800437c <HAL_Delay>
      ms++;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	3301      	adds	r3, #1
 800adf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f91a 	bl	800b032 <USB_GetMode>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d01e      	beq.n	800ae42 <USB_SetCurrentMode+0x84>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2b31      	cmp	r3, #49	; 0x31
 800ae08:	d9f0      	bls.n	800adec <USB_SetCurrentMode+0x2e>
 800ae0a:	e01a      	b.n	800ae42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ae0c:	78fb      	ldrb	r3, [r7, #3]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d115      	bne.n	800ae3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ae1e:	2001      	movs	r0, #1
 800ae20:	f7f9 faac 	bl	800437c <HAL_Delay>
      ms++;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	3301      	adds	r3, #1
 800ae28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f901 	bl	800b032 <USB_GetMode>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d005      	beq.n	800ae42 <USB_SetCurrentMode+0x84>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2b31      	cmp	r3, #49	; 0x31
 800ae3a:	d9f0      	bls.n	800ae1e <USB_SetCurrentMode+0x60>
 800ae3c:	e001      	b.n	800ae42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e005      	b.n	800ae4e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b32      	cmp	r3, #50	; 0x32
 800ae46:	d101      	bne.n	800ae4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e000      	b.n	800ae4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	019b      	lsls	r3, r3, #6
 800ae6a:	f043 0220 	orr.w	r2, r3, #32
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3301      	adds	r3, #1
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	4a08      	ldr	r2, [pc, #32]	; (800ae9c <USB_FlushTxFifo+0x44>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d901      	bls.n	800ae82 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e006      	b.n	800ae90 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	f003 0320 	and.w	r3, r3, #32
 800ae8a:	2b20      	cmp	r3, #32
 800ae8c:	d0f1      	beq.n	800ae72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	00030d40 	.word	0x00030d40

0800aea0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2210      	movs	r2, #16
 800aeb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	60fb      	str	r3, [r7, #12]
 800aeb8:	4a08      	ldr	r2, [pc, #32]	; (800aedc <USB_FlushRxFifo+0x3c>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d901      	bls.n	800aec2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e006      	b.n	800aed0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	f003 0310 	and.w	r3, r3, #16
 800aeca:	2b10      	cmp	r3, #16
 800aecc:	d0f1      	beq.n	800aeb2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	00030d40 	.word	0x00030d40

0800aee0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b089      	sub	sp, #36	; 0x24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	4611      	mov	r1, r2
 800aeec:	461a      	mov	r2, r3
 800aeee:	460b      	mov	r3, r1
 800aef0:	71fb      	strb	r3, [r7, #7]
 800aef2:	4613      	mov	r3, r2
 800aef4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aefe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af02:	2b00      	cmp	r3, #0
 800af04:	d123      	bne.n	800af4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800af06:	88bb      	ldrh	r3, [r7, #4]
 800af08:	3303      	adds	r3, #3
 800af0a:	089b      	lsrs	r3, r3, #2
 800af0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800af0e:	2300      	movs	r3, #0
 800af10:	61bb      	str	r3, [r7, #24]
 800af12:	e018      	b.n	800af46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800af14:	79fb      	ldrb	r3, [r7, #7]
 800af16:	031a      	lsls	r2, r3, #12
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af20:	461a      	mov	r2, r3
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	6013      	str	r3, [r2, #0]
      pSrc++;
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	3301      	adds	r3, #1
 800af2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	3301      	adds	r3, #1
 800af32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	3301      	adds	r3, #1
 800af38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	3301      	adds	r3, #1
 800af3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	3301      	adds	r3, #1
 800af44:	61bb      	str	r3, [r7, #24]
 800af46:	69ba      	ldr	r2, [r7, #24]
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d3e2      	bcc.n	800af14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3724      	adds	r7, #36	; 0x24
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b08b      	sub	sp, #44	; 0x2c
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	4613      	mov	r3, r2
 800af68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800af72:	88fb      	ldrh	r3, [r7, #6]
 800af74:	089b      	lsrs	r3, r3, #2
 800af76:	b29b      	uxth	r3, r3
 800af78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800af7a:	88fb      	ldrh	r3, [r7, #6]
 800af7c:	f003 0303 	and.w	r3, r3, #3
 800af80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800af82:	2300      	movs	r3, #0
 800af84:	623b      	str	r3, [r7, #32]
 800af86:	e014      	b.n	800afb2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	601a      	str	r2, [r3, #0]
    pDest++;
 800af94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af96:	3301      	adds	r3, #1
 800af98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	3301      	adds	r3, #1
 800af9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	3301      	adds	r3, #1
 800afa4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800afa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa8:	3301      	adds	r3, #1
 800afaa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	3301      	adds	r3, #1
 800afb0:	623b      	str	r3, [r7, #32]
 800afb2:	6a3a      	ldr	r2, [r7, #32]
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d3e6      	bcc.n	800af88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800afba:	8bfb      	ldrh	r3, [r7, #30]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d01e      	beq.n	800affe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afca:	461a      	mov	r2, r3
 800afcc:	f107 0310 	add.w	r3, r7, #16
 800afd0:	6812      	ldr	r2, [r2, #0]
 800afd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800afd4:	693a      	ldr	r2, [r7, #16]
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	00db      	lsls	r3, r3, #3
 800afdc:	fa22 f303 	lsr.w	r3, r2, r3
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe4:	701a      	strb	r2, [r3, #0]
      i++;
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	3301      	adds	r3, #1
 800afea:	623b      	str	r3, [r7, #32]
      pDest++;
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	3301      	adds	r3, #1
 800aff0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aff2:	8bfb      	ldrh	r3, [r7, #30]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aff8:	8bfb      	ldrh	r3, [r7, #30]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1ea      	bne.n	800afd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b000:	4618      	mov	r0, r3
 800b002:	372c      	adds	r7, #44	; 0x2c
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	4013      	ands	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b024:	68fb      	ldr	r3, [r7, #12]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3714      	adds	r7, #20
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b032:	b480      	push	{r7}
 800b034:	b083      	sub	sp, #12
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	f003 0301 	and.w	r3, r3, #1
}
 800b042:	4618      	mov	r0, r3
 800b044:	370c      	adds	r7, #12
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
	...

0800b050 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b058:	2300      	movs	r3, #0
 800b05a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3301      	adds	r3, #1
 800b060:	60fb      	str	r3, [r7, #12]
 800b062:	4a13      	ldr	r2, [pc, #76]	; (800b0b0 <USB_CoreReset+0x60>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d901      	bls.n	800b06c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b068:	2303      	movs	r3, #3
 800b06a:	e01a      	b.n	800b0a2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	daf3      	bge.n	800b05c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b074:	2300      	movs	r3, #0
 800b076:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	f043 0201 	orr.w	r2, r3, #1
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	3301      	adds	r3, #1
 800b088:	60fb      	str	r3, [r7, #12]
 800b08a:	4a09      	ldr	r2, [pc, #36]	; (800b0b0 <USB_CoreReset+0x60>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d901      	bls.n	800b094 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b090:	2303      	movs	r3, #3
 800b092:	e006      	b.n	800b0a2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	f003 0301 	and.w	r3, r3, #1
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d0f1      	beq.n	800b084 <USB_CoreReset+0x34>

  return HAL_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3714      	adds	r7, #20
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	00030d40 	.word	0x00030d40

0800b0b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b084      	sub	sp, #16
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	f107 001c 	add.w	r0, r7, #28
 800b0c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b102:	2b00      	cmp	r3, #0
 800b104:	d018      	beq.n	800b138 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d10a      	bne.n	800b122 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b11a:	f043 0304 	orr.w	r3, r3, #4
 800b11e:	6013      	str	r3, [r2, #0]
 800b120:	e014      	b.n	800b14c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68ba      	ldr	r2, [r7, #8]
 800b12c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b130:	f023 0304 	bic.w	r3, r3, #4
 800b134:	6013      	str	r3, [r2, #0]
 800b136:	e009      	b.n	800b14c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b146:	f023 0304 	bic.w	r3, r3, #4
 800b14a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b14c:	2110      	movs	r1, #16
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7ff fe82 	bl	800ae58 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7ff fea3 	bl	800aea0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
 800b15e:	e015      	b.n	800b18c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	4413      	add	r3, r2
 800b168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b16c:	461a      	mov	r2, r3
 800b16e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b172:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	015a      	lsls	r2, r3, #5
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	4413      	add	r3, r2
 800b17c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b180:	461a      	mov	r2, r3
 800b182:	2300      	movs	r3, #0
 800b184:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3301      	adds	r3, #1
 800b18a:	60fb      	str	r3, [r7, #12]
 800b18c:	6a3b      	ldr	r3, [r7, #32]
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	429a      	cmp	r2, r3
 800b192:	d3e5      	bcc.n	800b160 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1a0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00b      	beq.n	800b1c6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1b4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a13      	ldr	r2, [pc, #76]	; (800b208 <USB_HostInit+0x154>)
 800b1ba:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a13      	ldr	r2, [pc, #76]	; (800b20c <USB_HostInit+0x158>)
 800b1c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b1c4:	e009      	b.n	800b1da <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2280      	movs	r2, #128	; 0x80
 800b1ca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a10      	ldr	r2, [pc, #64]	; (800b210 <USB_HostInit+0x15c>)
 800b1d0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a0f      	ldr	r2, [pc, #60]	; (800b214 <USB_HostInit+0x160>)
 800b1d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d105      	bne.n	800b1ec <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	f043 0210 	orr.w	r2, r3, #16
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	699a      	ldr	r2, [r3, #24]
 800b1f0:	4b09      	ldr	r3, [pc, #36]	; (800b218 <USB_HostInit+0x164>)
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b204:	b004      	add	sp, #16
 800b206:	4770      	bx	lr
 800b208:	01000200 	.word	0x01000200
 800b20c:	00e00300 	.word	0x00e00300
 800b210:	00600080 	.word	0x00600080
 800b214:	004000e0 	.word	0x004000e0
 800b218:	a3200008 	.word	0xa3200008

0800b21c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b23a:	f023 0303 	bic.w	r3, r3, #3
 800b23e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	78fb      	ldrb	r3, [r7, #3]
 800b24a:	f003 0303 	and.w	r3, r3, #3
 800b24e:	68f9      	ldr	r1, [r7, #12]
 800b250:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b254:	4313      	orrs	r3, r2
 800b256:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b258:	78fb      	ldrb	r3, [r7, #3]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d107      	bne.n	800b26e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b264:	461a      	mov	r2, r3
 800b266:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b26a:	6053      	str	r3, [r2, #4]
 800b26c:	e009      	b.n	800b282 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b26e:	78fb      	ldrb	r3, [r7, #3]
 800b270:	2b02      	cmp	r3, #2
 800b272:	d106      	bne.n	800b282 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b27a:	461a      	mov	r2, r3
 800b27c:	f241 7370 	movw	r3, #6000	; 0x1770
 800b280:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b29c:	2300      	movs	r3, #0
 800b29e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b2b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b2ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2be:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b2c0:	2064      	movs	r0, #100	; 0x64
 800b2c2:	f7f9 f85b 	bl	800437c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b2ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b2d4:	200a      	movs	r0, #10
 800b2d6:	f7f9 f851 	bl	800437c <HAL_Delay>

  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b308:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d109      	bne.n	800b328 <USB_DriveVbus+0x44>
 800b314:	78fb      	ldrb	r3, [r7, #3]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d106      	bne.n	800b328 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b322:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b326:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b32e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b332:	d109      	bne.n	800b348 <USB_DriveVbus+0x64>
 800b334:	78fb      	ldrb	r3, [r7, #3]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d106      	bne.n	800b348 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b346:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b356:	b480      	push	{r7}
 800b358:	b085      	sub	sp, #20
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	0c5b      	lsrs	r3, r3, #17
 800b374:	f003 0303 	and.w	r3, r3, #3
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	b29b      	uxth	r3, r3
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3714      	adds	r7, #20
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
	...

0800b3a8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b088      	sub	sp, #32
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	4608      	mov	r0, r1
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	70fb      	strb	r3, [r7, #3]
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	70bb      	strb	r3, [r7, #2]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b3ca:	78fb      	ldrb	r3, [r7, #3]
 800b3cc:	015a      	lsls	r2, r3, #5
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b3de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b3e2:	2b03      	cmp	r3, #3
 800b3e4:	d87e      	bhi.n	800b4e4 <USB_HC_Init+0x13c>
 800b3e6:	a201      	add	r2, pc, #4	; (adr r2, 800b3ec <USB_HC_Init+0x44>)
 800b3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ec:	0800b3fd 	.word	0x0800b3fd
 800b3f0:	0800b4a7 	.word	0x0800b4a7
 800b3f4:	0800b3fd 	.word	0x0800b3fd
 800b3f8:	0800b469 	.word	0x0800b469
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b3fc:	78fb      	ldrb	r3, [r7, #3]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	4413      	add	r3, r2
 800b404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b408:	461a      	mov	r2, r3
 800b40a:	f240 439d 	movw	r3, #1181	; 0x49d
 800b40e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b410:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b414:	2b00      	cmp	r3, #0
 800b416:	da10      	bge.n	800b43a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b418:	78fb      	ldrb	r3, [r7, #3]
 800b41a:	015a      	lsls	r2, r3, #5
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	4413      	add	r3, r2
 800b420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	78fa      	ldrb	r2, [r7, #3]
 800b428:	0151      	lsls	r1, r2, #5
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	440a      	add	r2, r1
 800b42e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b436:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800b438:	e057      	b.n	800b4ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b442:	2b00      	cmp	r3, #0
 800b444:	d051      	beq.n	800b4ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b446:	78fb      	ldrb	r3, [r7, #3]
 800b448:	015a      	lsls	r2, r3, #5
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	4413      	add	r3, r2
 800b44e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	78fa      	ldrb	r2, [r7, #3]
 800b456:	0151      	lsls	r1, r2, #5
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	440a      	add	r2, r1
 800b45c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b460:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b464:	60d3      	str	r3, [r2, #12]
      break;
 800b466:	e040      	b.n	800b4ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b468:	78fb      	ldrb	r3, [r7, #3]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b474:	461a      	mov	r2, r3
 800b476:	f240 639d 	movw	r3, #1693	; 0x69d
 800b47a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b47c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b480:	2b00      	cmp	r3, #0
 800b482:	da34      	bge.n	800b4ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b484:	78fb      	ldrb	r3, [r7, #3]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	78fa      	ldrb	r2, [r7, #3]
 800b494:	0151      	lsls	r1, r2, #5
 800b496:	693a      	ldr	r2, [r7, #16]
 800b498:	440a      	add	r2, r1
 800b49a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b49e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b4a4:	e023      	b.n	800b4ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b4a6:	78fb      	ldrb	r3, [r7, #3]
 800b4a8:	015a      	lsls	r2, r3, #5
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f240 2325 	movw	r3, #549	; 0x225
 800b4b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b4ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	da17      	bge.n	800b4f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b4c2:	78fb      	ldrb	r3, [r7, #3]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	78fa      	ldrb	r2, [r7, #3]
 800b4d2:	0151      	lsls	r1, r2, #5
 800b4d4:	693a      	ldr	r2, [r7, #16]
 800b4d6:	440a      	add	r2, r1
 800b4d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b4e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b4e2:	e006      	b.n	800b4f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	77fb      	strb	r3, [r7, #31]
      break;
 800b4e8:	e004      	b.n	800b4f4 <USB_HC_Init+0x14c>
      break;
 800b4ea:	bf00      	nop
 800b4ec:	e002      	b.n	800b4f4 <USB_HC_Init+0x14c>
      break;
 800b4ee:	bf00      	nop
 800b4f0:	e000      	b.n	800b4f4 <USB_HC_Init+0x14c>
      break;
 800b4f2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b4fa:	699a      	ldr	r2, [r3, #24]
 800b4fc:	78fb      	ldrb	r3, [r7, #3]
 800b4fe:	f003 030f 	and.w	r3, r3, #15
 800b502:	2101      	movs	r1, #1
 800b504:	fa01 f303 	lsl.w	r3, r1, r3
 800b508:	6939      	ldr	r1, [r7, #16]
 800b50a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b50e:	4313      	orrs	r3, r2
 800b510:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b51e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b522:	2b00      	cmp	r3, #0
 800b524:	da03      	bge.n	800b52e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b52a:	61bb      	str	r3, [r7, #24]
 800b52c:	e001      	b.n	800b532 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800b52e:	2300      	movs	r3, #0
 800b530:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7ff ff0f 	bl	800b356 <USB_GetHostSpeed>
 800b538:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b53a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d106      	bne.n	800b550 <USB_HC_Init+0x1a8>
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b02      	cmp	r3, #2
 800b546:	d003      	beq.n	800b550 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b54c:	617b      	str	r3, [r7, #20]
 800b54e:	e001      	b.n	800b554 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b550:	2300      	movs	r3, #0
 800b552:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b554:	787b      	ldrb	r3, [r7, #1]
 800b556:	059b      	lsls	r3, r3, #22
 800b558:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b55c:	78bb      	ldrb	r3, [r7, #2]
 800b55e:	02db      	lsls	r3, r3, #11
 800b560:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b564:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b566:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b56a:	049b      	lsls	r3, r3, #18
 800b56c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b570:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b572:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b574:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b578:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b57e:	78fb      	ldrb	r3, [r7, #3]
 800b580:	0159      	lsls	r1, r3, #5
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	440b      	add	r3, r1
 800b586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b58a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b590:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b592:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b596:	2b03      	cmp	r3, #3
 800b598:	d10f      	bne.n	800b5ba <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b59a:	78fb      	ldrb	r3, [r7, #3]
 800b59c:	015a      	lsls	r2, r3, #5
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	78fa      	ldrb	r2, [r7, #3]
 800b5aa:	0151      	lsls	r1, r2, #5
 800b5ac:	693a      	ldr	r2, [r7, #16]
 800b5ae:	440a      	add	r2, r1
 800b5b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b5b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5b8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b5ba:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3720      	adds	r7, #32
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b08c      	sub	sp, #48	; 0x30
 800b5c8:	af02      	add	r7, sp, #8
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	785b      	ldrb	r3, [r3, #1]
 800b5da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b5dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5e0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d02d      	beq.n	800b64a <USB_HC_StartXfer+0x86>
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	791b      	ldrb	r3, [r3, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d129      	bne.n	800b64a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d117      	bne.n	800b62c <USB_HC_StartXfer+0x68>
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	79db      	ldrb	r3, [r3, #7]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d003      	beq.n	800b60c <USB_HC_StartXfer+0x48>
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	79db      	ldrb	r3, [r3, #7]
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d10f      	bne.n	800b62c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	015a      	lsls	r2, r3, #5
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	4413      	add	r3, r2
 800b614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	69fa      	ldr	r2, [r7, #28]
 800b61c:	0151      	lsls	r1, r2, #5
 800b61e:	6a3a      	ldr	r2, [r7, #32]
 800b620:	440a      	add	r2, r1
 800b622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b62a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800b62c:	79fb      	ldrb	r3, [r7, #7]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10b      	bne.n	800b64a <USB_HC_StartXfer+0x86>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	795b      	ldrb	r3, [r3, #5]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d107      	bne.n	800b64a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	785b      	ldrb	r3, [r3, #1]
 800b63e:	4619      	mov	r1, r3
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 fa2f 	bl	800baa4 <USB_DoPing>
      return HAL_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	e0f8      	b.n	800b83c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d018      	beq.n	800b684 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	68ba      	ldr	r2, [r7, #8]
 800b658:	8912      	ldrh	r2, [r2, #8]
 800b65a:	4413      	add	r3, r2
 800b65c:	3b01      	subs	r3, #1
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	8912      	ldrh	r2, [r2, #8]
 800b662:	fbb3 f3f2 	udiv	r3, r3, r2
 800b666:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b668:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b66a:	8b7b      	ldrh	r3, [r7, #26]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d90b      	bls.n	800b688 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800b670:	8b7b      	ldrh	r3, [r7, #26]
 800b672:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	8912      	ldrh	r2, [r2, #8]
 800b67a:	fb02 f203 	mul.w	r2, r2, r3
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	611a      	str	r2, [r3, #16]
 800b682:	e001      	b.n	800b688 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800b684:	2301      	movs	r3, #1
 800b686:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	78db      	ldrb	r3, [r3, #3]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d007      	beq.n	800b6a0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b690:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	8912      	ldrh	r2, [r2, #8]
 800b696:	fb02 f203 	mul.w	r2, r2, r3
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	611a      	str	r2, [r3, #16]
 800b69e:	e003      	b.n	800b6a8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	695a      	ldr	r2, [r3, #20]
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b6b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b6b2:	04d9      	lsls	r1, r3, #19
 800b6b4:	4b63      	ldr	r3, [pc, #396]	; (800b844 <USB_HC_StartXfer+0x280>)
 800b6b6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b6b8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	7a9b      	ldrb	r3, [r3, #10]
 800b6be:	075b      	lsls	r3, r3, #29
 800b6c0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b6c4:	69f9      	ldr	r1, [r7, #28]
 800b6c6:	0148      	lsls	r0, r1, #5
 800b6c8:	6a39      	ldr	r1, [r7, #32]
 800b6ca:	4401      	add	r1, r0
 800b6cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b6d0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b6d2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d009      	beq.n	800b6ee <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	68d9      	ldr	r1, [r3, #12]
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	015a      	lsls	r2, r3, #5
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6ea:	460a      	mov	r2, r1
 800b6ec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b6ee:	6a3b      	ldr	r3, [r7, #32]
 800b6f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	bf0c      	ite	eq
 800b6fe:	2301      	moveq	r3, #1
 800b700:	2300      	movne	r3, #0
 800b702:	b2db      	uxtb	r3, r3
 800b704:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	015a      	lsls	r2, r3, #5
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	4413      	add	r3, r2
 800b70e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	69fa      	ldr	r2, [r7, #28]
 800b716:	0151      	lsls	r1, r2, #5
 800b718:	6a3a      	ldr	r2, [r7, #32]
 800b71a:	440a      	add	r2, r1
 800b71c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b720:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b724:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	015a      	lsls	r2, r3, #5
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	4413      	add	r3, r2
 800b72e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	7e7b      	ldrb	r3, [r7, #25]
 800b736:	075b      	lsls	r3, r3, #29
 800b738:	69f9      	ldr	r1, [r7, #28]
 800b73a:	0148      	lsls	r0, r1, #5
 800b73c:	6a39      	ldr	r1, [r7, #32]
 800b73e:	4401      	add	r1, r0
 800b740:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b744:	4313      	orrs	r3, r2
 800b746:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	015a      	lsls	r2, r3, #5
 800b74c:	6a3b      	ldr	r3, [r7, #32]
 800b74e:	4413      	add	r3, r2
 800b750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b75e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	78db      	ldrb	r3, [r3, #3]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d004      	beq.n	800b772 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b76e:	613b      	str	r3, [r7, #16]
 800b770:	e003      	b.n	800b77a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b778:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b780:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	015a      	lsls	r2, r3, #5
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	4413      	add	r3, r2
 800b78a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b78e:	461a      	mov	r2, r3
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b794:	79fb      	ldrb	r3, [r7, #7]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b79a:	2300      	movs	r3, #0
 800b79c:	e04e      	b.n	800b83c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	78db      	ldrb	r3, [r3, #3]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d149      	bne.n	800b83a <USB_HC_StartXfer+0x276>
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	695b      	ldr	r3, [r3, #20]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d045      	beq.n	800b83a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	79db      	ldrb	r3, [r3, #7]
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d830      	bhi.n	800b818 <USB_HC_StartXfer+0x254>
 800b7b6:	a201      	add	r2, pc, #4	; (adr r2, 800b7bc <USB_HC_StartXfer+0x1f8>)
 800b7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7bc:	0800b7cd 	.word	0x0800b7cd
 800b7c0:	0800b7f1 	.word	0x0800b7f1
 800b7c4:	0800b7cd 	.word	0x0800b7cd
 800b7c8:	0800b7f1 	.word	0x0800b7f1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	3303      	adds	r3, #3
 800b7d2:	089b      	lsrs	r3, r3, #2
 800b7d4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b7d6:	8afa      	ldrh	r2, [r7, #22]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d91c      	bls.n	800b81c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	f043 0220 	orr.w	r2, r3, #32
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	619a      	str	r2, [r3, #24]
        }
        break;
 800b7ee:	e015      	b.n	800b81c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	695b      	ldr	r3, [r3, #20]
 800b7f4:	3303      	adds	r3, #3
 800b7f6:	089b      	lsrs	r3, r3, #2
 800b7f8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b7fa:	8afa      	ldrh	r2, [r7, #22]
 800b7fc:	6a3b      	ldr	r3, [r7, #32]
 800b7fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	b29b      	uxth	r3, r3
 800b806:	429a      	cmp	r2, r3
 800b808:	d90a      	bls.n	800b820 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	619a      	str	r2, [r3, #24]
        }
        break;
 800b816:	e003      	b.n	800b820 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b818:	bf00      	nop
 800b81a:	e002      	b.n	800b822 <USB_HC_StartXfer+0x25e>
        break;
 800b81c:	bf00      	nop
 800b81e:	e000      	b.n	800b822 <USB_HC_StartXfer+0x25e>
        break;
 800b820:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	68d9      	ldr	r1, [r3, #12]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	785a      	ldrb	r2, [r3, #1]
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	b29b      	uxth	r3, r3
 800b830:	2000      	movs	r0, #0
 800b832:	9000      	str	r0, [sp, #0]
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f7ff fb53 	bl	800aee0 <USB_WritePacket>
  }

  return HAL_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3728      	adds	r7, #40	; 0x28
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	1ff80000 	.word	0x1ff80000

0800b848 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	b29b      	uxth	r3, r3
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b089      	sub	sp, #36	; 0x24
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	460b      	mov	r3, r1
 800b874:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800b87a:	78fb      	ldrb	r3, [r7, #3]
 800b87c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800b87e:	2300      	movs	r3, #0
 800b880:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	015a      	lsls	r2, r3, #5
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	4413      	add	r3, r2
 800b88a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	0c9b      	lsrs	r3, r3, #18
 800b892:	f003 0303 	and.w	r3, r3, #3
 800b896:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	015a      	lsls	r2, r3, #5
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	4413      	add	r3, r2
 800b8a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	0fdb      	lsrs	r3, r3, #31
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f003 0320 	and.w	r3, r3, #32
 800b8b6:	2b20      	cmp	r3, #32
 800b8b8:	d104      	bne.n	800b8c4 <USB_HC_Halt+0x5a>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d101      	bne.n	800b8c4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	e0e8      	b.n	800ba96 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d002      	beq.n	800b8d0 <USB_HC_Halt+0x66>
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d173      	bne.n	800b9b8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	015a      	lsls	r2, r3, #5
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	0151      	lsls	r1, r2, #5
 800b8e2:	69ba      	ldr	r2, [r7, #24]
 800b8e4:	440a      	add	r2, r1
 800b8e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b8ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	f003 0320 	and.w	r3, r3, #32
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f040 80cb 	bne.w	800ba94 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b902:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b906:	2b00      	cmp	r3, #0
 800b908:	d143      	bne.n	800b992 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	015a      	lsls	r2, r3, #5
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	4413      	add	r3, r2
 800b912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	0151      	lsls	r1, r2, #5
 800b91c:	69ba      	ldr	r2, [r7, #24]
 800b91e:	440a      	add	r2, r1
 800b920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b928:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	4413      	add	r3, r2
 800b932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	697a      	ldr	r2, [r7, #20]
 800b93a:	0151      	lsls	r1, r2, #5
 800b93c:	69ba      	ldr	r2, [r7, #24]
 800b93e:	440a      	add	r2, r1
 800b940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b948:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	015a      	lsls	r2, r3, #5
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	4413      	add	r3, r2
 800b952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	697a      	ldr	r2, [r7, #20]
 800b95a:	0151      	lsls	r1, r2, #5
 800b95c:	69ba      	ldr	r2, [r7, #24]
 800b95e:	440a      	add	r2, r1
 800b960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b964:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b968:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	3301      	adds	r3, #1
 800b96e:	61fb      	str	r3, [r7, #28]
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b976:	d81d      	bhi.n	800b9b4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	015a      	lsls	r2, r3, #5
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	4413      	add	r3, r2
 800b980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b98a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b98e:	d0ec      	beq.n	800b96a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b990:	e080      	b.n	800ba94 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	015a      	lsls	r2, r3, #5
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	4413      	add	r3, r2
 800b99a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	697a      	ldr	r2, [r7, #20]
 800b9a2:	0151      	lsls	r1, r2, #5
 800b9a4:	69ba      	ldr	r2, [r7, #24]
 800b9a6:	440a      	add	r2, r1
 800b9a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b9b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b9b2:	e06f      	b.n	800ba94 <USB_HC_Halt+0x22a>
            break;
 800b9b4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b9b6:	e06d      	b.n	800ba94 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	015a      	lsls	r2, r3, #5
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	4413      	add	r3, r2
 800b9c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	0151      	lsls	r1, r2, #5
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	440a      	add	r2, r1
 800b9ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9d6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d143      	bne.n	800ba70 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	015a      	lsls	r2, r3, #5
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	697a      	ldr	r2, [r7, #20]
 800b9f8:	0151      	lsls	r1, r2, #5
 800b9fa:	69ba      	ldr	r2, [r7, #24]
 800b9fc:	440a      	add	r2, r1
 800b9fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	015a      	lsls	r2, r3, #5
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	4413      	add	r3, r2
 800ba10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	0151      	lsls	r1, r2, #5
 800ba1a:	69ba      	ldr	r2, [r7, #24]
 800ba1c:	440a      	add	r2, r1
 800ba1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba26:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	015a      	lsls	r2, r3, #5
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	4413      	add	r3, r2
 800ba30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	0151      	lsls	r1, r2, #5
 800ba3a:	69ba      	ldr	r2, [r7, #24]
 800ba3c:	440a      	add	r2, r1
 800ba3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba46:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	61fb      	str	r3, [r7, #28]
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba54:	d81d      	bhi.n	800ba92 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	015a      	lsls	r2, r3, #5
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba6c:	d0ec      	beq.n	800ba48 <USB_HC_Halt+0x1de>
 800ba6e:	e011      	b.n	800ba94 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	0151      	lsls	r1, r2, #5
 800ba82:	69ba      	ldr	r2, [r7, #24]
 800ba84:	440a      	add	r2, r1
 800ba86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	e000      	b.n	800ba94 <USB_HC_Halt+0x22a>
          break;
 800ba92:	bf00      	nop
    }
  }

  return HAL_OK;
 800ba94:	2300      	movs	r3, #0
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3724      	adds	r7, #36	; 0x24
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
	...

0800baa4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bab4:	78fb      	ldrb	r3, [r7, #3]
 800bab6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bab8:	2301      	movs	r3, #1
 800baba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	04da      	lsls	r2, r3, #19
 800bac0:	4b15      	ldr	r3, [pc, #84]	; (800bb18 <USB_DoPing+0x74>)
 800bac2:	4013      	ands	r3, r2
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	0151      	lsls	r1, r2, #5
 800bac8:	697a      	ldr	r2, [r7, #20]
 800baca:	440a      	add	r2, r1
 800bacc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bad4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	015a      	lsls	r2, r3, #5
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	4413      	add	r3, r2
 800bade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800baec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800baf4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb02:	461a      	mov	r2, r3
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	371c      	adds	r7, #28
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	1ff80000 	.word	0x1ff80000

0800bb1c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7ff f935 	bl	800ad9c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800bb32:	2110      	movs	r1, #16
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7ff f98f 	bl	800ae58 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7ff f9b0 	bl	800aea0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bb40:	2300      	movs	r3, #0
 800bb42:	613b      	str	r3, [r7, #16]
 800bb44:	e01f      	b.n	800bb86 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	015a      	lsls	r2, r3, #5
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb5c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb6c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	015a      	lsls	r2, r3, #5
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	4413      	add	r3, r2
 800bb76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	3301      	adds	r3, #1
 800bb84:	613b      	str	r3, [r7, #16]
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	2b0f      	cmp	r3, #15
 800bb8a:	d9dc      	bls.n	800bb46 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	613b      	str	r3, [r7, #16]
 800bb90:	e034      	b.n	800bbfc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	015a      	lsls	r2, r3, #5
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	4413      	add	r3, r2
 800bb9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bba8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbb0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bbb8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	015a      	lsls	r2, r3, #5
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	617b      	str	r3, [r7, #20]
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbd8:	d80c      	bhi.n	800bbf4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	015a      	lsls	r2, r3, #5
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbf0:	d0ec      	beq.n	800bbcc <USB_StopHost+0xb0>
 800bbf2:	e000      	b.n	800bbf6 <USB_StopHost+0xda>
        break;
 800bbf4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	613b      	str	r3, [r7, #16]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	2b0f      	cmp	r3, #15
 800bc00:	d9c7      	bls.n	800bb92 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc08:	461a      	mov	r2, r3
 800bc0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7ff f8ae 	bl	800ad7a <USB_EnableGlobalInt>

  return HAL_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3718      	adds	r7, #24
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bc28:	b590      	push	{r4, r7, lr}
 800bc2a:	b089      	sub	sp, #36	; 0x24
 800bc2c:	af04      	add	r7, sp, #16
 800bc2e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bc30:	2301      	movs	r3, #1
 800bc32:	2202      	movs	r2, #2
 800bc34:	2102      	movs	r1, #2
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fcb2 	bl	800c5a0 <USBH_FindInterface>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
 800bc42:	2bff      	cmp	r3, #255	; 0xff
 800bc44:	d002      	beq.n	800bc4c <USBH_CDC_InterfaceInit+0x24>
 800bc46:	7bfb      	ldrb	r3, [r7, #15]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d901      	bls.n	800bc50 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bc4c:	2302      	movs	r3, #2
 800bc4e:	e13d      	b.n	800becc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800bc50:	7bfb      	ldrb	r3, [r7, #15]
 800bc52:	4619      	mov	r1, r3
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fc87 	bl	800c568 <USBH_SelectInterface>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bc5e:	7bbb      	ldrb	r3, [r7, #14]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800bc64:	2302      	movs	r3, #2
 800bc66:	e131      	b.n	800becc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800bc6e:	2050      	movs	r0, #80	; 0x50
 800bc70:	f005 fec2 	bl	80119f8 <malloc>
 800bc74:	4603      	mov	r3, r0
 800bc76:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc7e:	69db      	ldr	r3, [r3, #28]
 800bc80:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d101      	bne.n	800bc8c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800bc88:	2302      	movs	r3, #2
 800bc8a:	e11f      	b.n	800becc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800bc8c:	2250      	movs	r2, #80	; 0x50
 800bc8e:	2100      	movs	r1, #0
 800bc90:	68b8      	ldr	r0, [r7, #8]
 800bc92:	f005 fecf 	bl	8011a34 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	211a      	movs	r1, #26
 800bc9c:	fb01 f303 	mul.w	r3, r1, r3
 800bca0:	4413      	add	r3, r2
 800bca2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	b25b      	sxtb	r3, r3
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	da15      	bge.n	800bcda <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	211a      	movs	r1, #26
 800bcb4:	fb01 f303 	mul.w	r3, r1, r3
 800bcb8:	4413      	add	r3, r2
 800bcba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bcbe:	781a      	ldrb	r2, [r3, #0]
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bcc4:	7bfb      	ldrb	r3, [r7, #15]
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	211a      	movs	r1, #26
 800bcca:	fb01 f303 	mul.w	r3, r1, r3
 800bcce:	4413      	add	r3, r2
 800bcd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bcd4:	881a      	ldrh	r2, [r3, #0]
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	785b      	ldrb	r3, [r3, #1]
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f002 f88c 	bl	800ddfe <USBH_AllocPipe>
 800bce6:	4603      	mov	r3, r0
 800bce8:	461a      	mov	r2, r3
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	7819      	ldrb	r1, [r3, #0]
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	7858      	ldrb	r0, [r3, #1]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	8952      	ldrh	r2, [r2, #10]
 800bd06:	9202      	str	r2, [sp, #8]
 800bd08:	2203      	movs	r2, #3
 800bd0a:	9201      	str	r2, [sp, #4]
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	4623      	mov	r3, r4
 800bd10:	4602      	mov	r2, r0
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f002 f844 	bl	800dda0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	4619      	mov	r1, r3
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f005 fdb9 	bl	8011898 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bd26:	2300      	movs	r3, #0
 800bd28:	2200      	movs	r2, #0
 800bd2a:	210a      	movs	r1, #10
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 fc37 	bl	800c5a0 <USBH_FindInterface>
 800bd32:	4603      	mov	r3, r0
 800bd34:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bd36:	7bfb      	ldrb	r3, [r7, #15]
 800bd38:	2bff      	cmp	r3, #255	; 0xff
 800bd3a:	d002      	beq.n	800bd42 <USBH_CDC_InterfaceInit+0x11a>
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d901      	bls.n	800bd46 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bd42:	2302      	movs	r3, #2
 800bd44:	e0c2      	b.n	800becc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	211a      	movs	r1, #26
 800bd4c:	fb01 f303 	mul.w	r3, r1, r3
 800bd50:	4413      	add	r3, r2
 800bd52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	b25b      	sxtb	r3, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	da16      	bge.n	800bd8c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bd5e:	7bfb      	ldrb	r3, [r7, #15]
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	211a      	movs	r1, #26
 800bd64:	fb01 f303 	mul.w	r3, r1, r3
 800bd68:	4413      	add	r3, r2
 800bd6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bd6e:	781a      	ldrb	r2, [r3, #0]
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	211a      	movs	r1, #26
 800bd7a:	fb01 f303 	mul.w	r3, r1, r3
 800bd7e:	4413      	add	r3, r2
 800bd80:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bd84:	881a      	ldrh	r2, [r3, #0]
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	835a      	strh	r2, [r3, #26]
 800bd8a:	e015      	b.n	800bdb8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bd8c:	7bfb      	ldrb	r3, [r7, #15]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	211a      	movs	r1, #26
 800bd92:	fb01 f303 	mul.w	r3, r1, r3
 800bd96:	4413      	add	r3, r2
 800bd98:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bd9c:	781a      	ldrb	r2, [r3, #0]
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bda2:	7bfb      	ldrb	r3, [r7, #15]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	211a      	movs	r1, #26
 800bda8:	fb01 f303 	mul.w	r3, r1, r3
 800bdac:	4413      	add	r3, r2
 800bdae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bdb2:	881a      	ldrh	r2, [r3, #0]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800bdb8:	7bfb      	ldrb	r3, [r7, #15]
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	211a      	movs	r1, #26
 800bdbe:	fb01 f303 	mul.w	r3, r1, r3
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	da16      	bge.n	800bdfe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	211a      	movs	r1, #26
 800bdd6:	fb01 f303 	mul.w	r3, r1, r3
 800bdda:	4413      	add	r3, r2
 800bddc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bde0:	781a      	ldrb	r2, [r3, #0]
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bde6:	7bfb      	ldrb	r3, [r7, #15]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	211a      	movs	r1, #26
 800bdec:	fb01 f303 	mul.w	r3, r1, r3
 800bdf0:	4413      	add	r3, r2
 800bdf2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bdf6:	881a      	ldrh	r2, [r3, #0]
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	835a      	strh	r2, [r3, #26]
 800bdfc:	e015      	b.n	800be2a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	211a      	movs	r1, #26
 800be04:	fb01 f303 	mul.w	r3, r1, r3
 800be08:	4413      	add	r3, r2
 800be0a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800be0e:	781a      	ldrb	r2, [r3, #0]
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	211a      	movs	r1, #26
 800be1a:	fb01 f303 	mul.w	r3, r1, r3
 800be1e:	4413      	add	r3, r2
 800be20:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800be24:	881a      	ldrh	r2, [r3, #0]
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	7b9b      	ldrb	r3, [r3, #14]
 800be2e:	4619      	mov	r1, r3
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f001 ffe4 	bl	800ddfe <USBH_AllocPipe>
 800be36:	4603      	mov	r3, r0
 800be38:	461a      	mov	r2, r3
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	7bdb      	ldrb	r3, [r3, #15]
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f001 ffda 	bl	800ddfe <USBH_AllocPipe>
 800be4a:	4603      	mov	r3, r0
 800be4c:	461a      	mov	r2, r3
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	7b59      	ldrb	r1, [r3, #13]
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	7b98      	ldrb	r0, [r3, #14]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be66:	68ba      	ldr	r2, [r7, #8]
 800be68:	8b12      	ldrh	r2, [r2, #24]
 800be6a:	9202      	str	r2, [sp, #8]
 800be6c:	2202      	movs	r2, #2
 800be6e:	9201      	str	r2, [sp, #4]
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	4623      	mov	r3, r4
 800be74:	4602      	mov	r2, r0
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f001 ff92 	bl	800dda0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	7b19      	ldrb	r1, [r3, #12]
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	7bd8      	ldrb	r0, [r3, #15]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	8b52      	ldrh	r2, [r2, #26]
 800be94:	9202      	str	r2, [sp, #8]
 800be96:	2202      	movs	r2, #2
 800be98:	9201      	str	r2, [sp, #4]
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	4623      	mov	r3, r4
 800be9e:	4602      	mov	r2, r0
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f001 ff7d 	bl	800dda0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	7b5b      	ldrb	r3, [r3, #13]
 800beb2:	2200      	movs	r2, #0
 800beb4:	4619      	mov	r1, r3
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f005 fcee 	bl	8011898 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	7b1b      	ldrb	r3, [r3, #12]
 800bec0:	2200      	movs	r2, #0
 800bec2:	4619      	mov	r1, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f005 fce7 	bl	8011898 <USBH_LL_SetToggle>

  return USBH_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3714      	adds	r7, #20
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd90      	pop	{r4, r7, pc}

0800bed4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bee2:	69db      	ldr	r3, [r3, #28]
 800bee4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00e      	beq.n	800bf0c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f001 ff72 	bl	800ddde <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	4619      	mov	r1, r3
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f001 ff9d 	bl	800de40 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	7b1b      	ldrb	r3, [r3, #12]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00e      	beq.n	800bf32 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	7b1b      	ldrb	r3, [r3, #12]
 800bf18:	4619      	mov	r1, r3
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f001 ff5f 	bl	800ddde <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	7b1b      	ldrb	r3, [r3, #12]
 800bf24:	4619      	mov	r1, r3
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f001 ff8a 	bl	800de40 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	7b5b      	ldrb	r3, [r3, #13]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00e      	beq.n	800bf58 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	7b5b      	ldrb	r3, [r3, #13]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f001 ff4c 	bl	800ddde <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	7b5b      	ldrb	r3, [r3, #13]
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f001 ff77 	bl	800de40 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf5e:	69db      	ldr	r3, [r3, #28]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00b      	beq.n	800bf7c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf6a:	69db      	ldr	r3, [r3, #28]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f005 fd4b 	bl	8011a08 <free>
    phost->pActiveClass->pData = 0U;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf78:	2200      	movs	r2, #0
 800bf7a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf94:	69db      	ldr	r3, [r3, #28]
 800bf96:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	3340      	adds	r3, #64	; 0x40
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f8b1 	bl	800c106 <GetLineCoding>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800bfa8:	7afb      	ldrb	r3, [r7, #11]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d105      	bne.n	800bfba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfb4:	2102      	movs	r1, #2
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800bfba:	7afb      	ldrb	r3, [r7, #11]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800bfe4:	2b04      	cmp	r3, #4
 800bfe6:	d877      	bhi.n	800c0d8 <USBH_CDC_Process+0x114>
 800bfe8:	a201      	add	r2, pc, #4	; (adr r2, 800bff0 <USBH_CDC_Process+0x2c>)
 800bfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfee:	bf00      	nop
 800bff0:	0800c005 	.word	0x0800c005
 800bff4:	0800c00b 	.word	0x0800c00b
 800bff8:	0800c03b 	.word	0x0800c03b
 800bffc:	0800c0af 	.word	0x0800c0af
 800c000:	0800c0bd 	.word	0x0800c0bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]
      break;
 800c008:	e06d      	b.n	800c0e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c00e:	4619      	mov	r1, r3
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f897 	bl	800c144 <SetLineCoding>
 800c016:	4603      	mov	r3, r0
 800c018:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c01a:	7bbb      	ldrb	r3, [r7, #14]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d104      	bne.n	800c02a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	2202      	movs	r2, #2
 800c024:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c028:	e058      	b.n	800c0dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c02a:	7bbb      	ldrb	r3, [r7, #14]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d055      	beq.n	800c0dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2204      	movs	r2, #4
 800c034:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c038:	e050      	b.n	800c0dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	3340      	adds	r3, #64	; 0x40
 800c03e:	4619      	mov	r1, r3
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f860 	bl	800c106 <GetLineCoding>
 800c046:	4603      	mov	r3, r0
 800c048:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d126      	bne.n	800c09e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	2200      	movs	r2, #0
 800c054:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c062:	791b      	ldrb	r3, [r3, #4]
 800c064:	429a      	cmp	r2, r3
 800c066:	d13b      	bne.n	800c0e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c072:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c074:	429a      	cmp	r2, r3
 800c076:	d133      	bne.n	800c0e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c082:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c084:	429a      	cmp	r2, r3
 800c086:	d12b      	bne.n	800c0e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c090:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c092:	429a      	cmp	r2, r3
 800c094:	d124      	bne.n	800c0e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f982 	bl	800c3a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c09c:	e020      	b.n	800c0e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c09e:	7bbb      	ldrb	r3, [r7, #14]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d01d      	beq.n	800c0e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	2204      	movs	r2, #4
 800c0a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c0ac:	e018      	b.n	800c0e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 f867 	bl	800c182 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f8f6 	bl	800c2a6 <CDC_ProcessReception>
      break;
 800c0ba:	e014      	b.n	800c0e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c0bc:	2100      	movs	r1, #0
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f001 f94d 	bl	800d35e <USBH_ClrFeature>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c0d6:	e005      	b.n	800c0e4 <USBH_CDC_Process+0x120>

    default:
      break;
 800c0d8:	bf00      	nop
 800c0da:	e004      	b.n	800c0e6 <USBH_CDC_Process+0x122>
      break;
 800c0dc:	bf00      	nop
 800c0de:	e002      	b.n	800c0e6 <USBH_CDC_Process+0x122>
      break;
 800c0e0:	bf00      	nop
 800c0e2:	e000      	b.n	800c0e6 <USBH_CDC_Process+0x122>
      break;
 800c0e4:	bf00      	nop

  }

  return status;
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b082      	sub	sp, #8
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	22a1      	movs	r2, #161	; 0xa1
 800c114:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2221      	movs	r2, #33	; 0x21
 800c11a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2207      	movs	r2, #7
 800c12c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	2207      	movs	r2, #7
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f001 faf2 	bl	800d71e <USBH_CtlReq>
 800c13a:	4603      	mov	r3, r0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2221      	movs	r2, #33	; 0x21
 800c152:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2220      	movs	r2, #32
 800c158:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2207      	movs	r2, #7
 800c16a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2207      	movs	r2, #7
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f001 fad3 	bl	800d71e <USBH_CtlReq>
 800c178:	4603      	mov	r3, r0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b086      	sub	sp, #24
 800c186:	af02      	add	r7, sp, #8
 800c188:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c190:	69db      	ldr	r3, [r3, #28]
 800c192:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c194:	2300      	movs	r3, #0
 800c196:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d002      	beq.n	800c1a8 <CDC_ProcessTransmission+0x26>
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d023      	beq.n	800c1ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c1a6:	e07a      	b.n	800c29e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	8b12      	ldrh	r2, [r2, #24]
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d90b      	bls.n	800c1cc <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	69d9      	ldr	r1, [r3, #28]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	8b1a      	ldrh	r2, [r3, #24]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	7b5b      	ldrb	r3, [r3, #13]
 800c1c0:	2001      	movs	r0, #1
 800c1c2:	9000      	str	r0, [sp, #0]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f001 fda8 	bl	800dd1a <USBH_BulkSendData>
 800c1ca:	e00b      	b.n	800c1e4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	7b5b      	ldrb	r3, [r3, #13]
 800c1da:	2001      	movs	r0, #1
 800c1dc:	9000      	str	r0, [sp, #0]
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f001 fd9b 	bl	800dd1a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c1ec:	e057      	b.n	800c29e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	7b5b      	ldrb	r3, [r3, #13]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f005 fb25 	bl	8011844 <USBH_LL_GetURBState>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c1fe:	7afb      	ldrb	r3, [r7, #11]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d136      	bne.n	800c272 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	8b12      	ldrh	r2, [r2, #24]
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d90e      	bls.n	800c22e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	8b12      	ldrh	r2, [r2, #24]
 800c218:	1a9a      	subs	r2, r3, r2
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	8b12      	ldrh	r2, [r2, #24]
 800c226:	441a      	add	r2, r3
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	61da      	str	r2, [r3, #28]
 800c22c:	e002      	b.n	800c234 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d004      	beq.n	800c246 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c244:	e006      	b.n	800c254 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f892 	bl	800c378 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2204      	movs	r2, #4
 800c258:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c268:	2300      	movs	r3, #0
 800c26a:	2200      	movs	r2, #0
 800c26c:	f001 ffd8 	bl	800e220 <osMessageQueuePut>
      break;
 800c270:	e014      	b.n	800c29c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800c272:	7afb      	ldrb	r3, [r7, #11]
 800c274:	2b02      	cmp	r3, #2
 800c276:	d111      	bne.n	800c29c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2201      	movs	r2, #1
 800c27c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2204      	movs	r2, #4
 800c284:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c294:	2300      	movs	r3, #0
 800c296:	2200      	movs	r2, #0
 800c298:	f001 ffc2 	bl	800e220 <osMessageQueuePut>
      break;
 800c29c:	bf00      	nop
  }
}
 800c29e:	bf00      	nop
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b086      	sub	sp, #24
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2b4:	69db      	ldr	r3, [r3, #28]
 800c2b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c2c2:	2b03      	cmp	r3, #3
 800c2c4:	d002      	beq.n	800c2cc <CDC_ProcessReception+0x26>
 800c2c6:	2b04      	cmp	r3, #4
 800c2c8:	d00e      	beq.n	800c2e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c2ca:	e051      	b.n	800c370 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	6a19      	ldr	r1, [r3, #32]
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	8b5a      	ldrh	r2, [r3, #26]
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	7b1b      	ldrb	r3, [r3, #12]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f001 fd43 	bl	800dd64 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	2204      	movs	r2, #4
 800c2e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c2e6:	e043      	b.n	800c370 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	7b1b      	ldrb	r3, [r3, #12]
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f005 faa8 	bl	8011844 <USBH_LL_GetURBState>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c2f8:	7cfb      	ldrb	r3, [r7, #19]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d137      	bne.n	800c36e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	7b1b      	ldrb	r3, [r3, #12]
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f005 fa0b 	bl	8011720 <USBH_LL_GetLastXferSize>
 800c30a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	429a      	cmp	r2, r3
 800c314:	d016      	beq.n	800c344 <CDC_ProcessReception+0x9e>
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	8b5b      	ldrh	r3, [r3, #26]
 800c31a:	461a      	mov	r2, r3
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	4293      	cmp	r3, r2
 800c320:	d910      	bls.n	800c344 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	1ad2      	subs	r2, r2, r3
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	6a1a      	ldr	r2, [r3, #32]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	441a      	add	r2, r3
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	2203      	movs	r2, #3
 800c33e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c342:	e006      	b.n	800c352 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 f81d 	bl	800c38c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2204      	movs	r2, #4
 800c356:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c366:	2300      	movs	r3, #0
 800c368:	2200      	movs	r2, #0
 800c36a:	f001 ff59 	bl	800e220 <osMessageQueuePut>
      break;
 800c36e:	bf00      	nop
  }
}
 800c370:	bf00      	nop
 800c372:	3718      	adds	r7, #24
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d101      	bne.n	800c3cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c3c8:	2302      	movs	r3, #2
 800c3ca:	e044      	b.n	800c456 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	79fa      	ldrb	r2, [r7, #7]
 800c3d0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 f841 	bl	800c46c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d003      	beq.n	800c418 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800c418:	2200      	movs	r2, #0
 800c41a:	2104      	movs	r1, #4
 800c41c:	2010      	movs	r0, #16
 800c41e:	f001 fe8c 	bl	800e13a <osMessageQueueNew>
 800c422:	4602      	mov	r2, r0
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800c42a:	4b0d      	ldr	r3, [pc, #52]	; (800c460 <USBH_Init+0xac>)
 800c42c:	4a0d      	ldr	r2, [pc, #52]	; (800c464 <USBH_Init+0xb0>)
 800c42e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800c430:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <USBH_Init+0xac>)
 800c432:	2280      	movs	r2, #128	; 0x80
 800c434:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800c436:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <USBH_Init+0xac>)
 800c438:	2218      	movs	r2, #24
 800c43a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800c43c:	4a08      	ldr	r2, [pc, #32]	; (800c460 <USBH_Init+0xac>)
 800c43e:	68f9      	ldr	r1, [r7, #12]
 800c440:	4809      	ldr	r0, [pc, #36]	; (800c468 <USBH_Init+0xb4>)
 800c442:	f001 fdcd 	bl	800dfe0 <osThreadNew>
 800c446:	4602      	mov	r2, r0
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f005 f8b2 	bl	80115b8 <USBH_LL_Init>

  return USBH_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	20004fe4 	.word	0x20004fe4
 800c464:	08012994 	.word	0x08012994
 800c468:	0800d0d5 	.word	0x0800d0d5

0800c46c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c474:	2300      	movs	r3, #0
 800c476:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c478:	2300      	movs	r3, #0
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	e009      	b.n	800c492 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	33e0      	adds	r3, #224	; 0xe0
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4413      	add	r3, r2
 800c488:	2200      	movs	r2, #0
 800c48a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	3301      	adds	r3, #1
 800c490:	60fb      	str	r3, [r7, #12]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2b0e      	cmp	r3, #14
 800c496:	d9f2      	bls.n	800c47e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c498:	2300      	movs	r3, #0
 800c49a:	60fb      	str	r3, [r7, #12]
 800c49c:	e009      	b.n	800c4b2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	60fb      	str	r3, [r7, #12]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4b8:	d3f1      	bcc.n	800c49e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2240      	movs	r2, #64	; 0x40
 800c4de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3714      	adds	r7, #20
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d016      	beq.n	800c556 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d10e      	bne.n	800c550 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c538:	1c59      	adds	r1, r3, #1
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	33de      	adds	r3, #222	; 0xde
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	73fb      	strb	r3, [r7, #15]
 800c54e:	e004      	b.n	800c55a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c550:	2302      	movs	r3, #2
 800c552:	73fb      	strb	r3, [r7, #15]
 800c554:	e001      	b.n	800c55a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c556:	2302      	movs	r3, #2
 800c558:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	460b      	mov	r3, r1
 800c572:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c574:	2300      	movs	r3, #0
 800c576:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c57e:	78fa      	ldrb	r2, [r7, #3]
 800c580:	429a      	cmp	r2, r3
 800c582:	d204      	bcs.n	800c58e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	78fa      	ldrb	r2, [r7, #3]
 800c588:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c58c:	e001      	b.n	800c592 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c58e:	2302      	movs	r3, #2
 800c590:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c592:	7bfb      	ldrb	r3, [r7, #15]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3714      	adds	r7, #20
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b087      	sub	sp, #28
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	4608      	mov	r0, r1
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	70fb      	strb	r3, [r7, #3]
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	70bb      	strb	r3, [r7, #2]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c5c8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c5ca:	e025      	b.n	800c618 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c5cc:	7dfb      	ldrb	r3, [r7, #23]
 800c5ce:	221a      	movs	r2, #26
 800c5d0:	fb02 f303 	mul.w	r3, r2, r3
 800c5d4:	3308      	adds	r3, #8
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	4413      	add	r3, r2
 800c5da:	3302      	adds	r3, #2
 800c5dc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	795b      	ldrb	r3, [r3, #5]
 800c5e2:	78fa      	ldrb	r2, [r7, #3]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d002      	beq.n	800c5ee <USBH_FindInterface+0x4e>
 800c5e8:	78fb      	ldrb	r3, [r7, #3]
 800c5ea:	2bff      	cmp	r3, #255	; 0xff
 800c5ec:	d111      	bne.n	800c612 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c5f2:	78ba      	ldrb	r2, [r7, #2]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d002      	beq.n	800c5fe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c5f8:	78bb      	ldrb	r3, [r7, #2]
 800c5fa:	2bff      	cmp	r3, #255	; 0xff
 800c5fc:	d109      	bne.n	800c612 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c602:	787a      	ldrb	r2, [r7, #1]
 800c604:	429a      	cmp	r2, r3
 800c606:	d002      	beq.n	800c60e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c608:	787b      	ldrb	r3, [r7, #1]
 800c60a:	2bff      	cmp	r3, #255	; 0xff
 800c60c:	d101      	bne.n	800c612 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c60e:	7dfb      	ldrb	r3, [r7, #23]
 800c610:	e006      	b.n	800c620 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c612:	7dfb      	ldrb	r3, [r7, #23]
 800c614:	3301      	adds	r3, #1
 800c616:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c618:	7dfb      	ldrb	r3, [r7, #23]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d9d6      	bls.n	800c5cc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c61e:	23ff      	movs	r3, #255	; 0xff
}
 800c620:	4618      	mov	r0, r3
 800c622:	371c      	adds	r7, #28
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f004 fffb 	bl	8011630 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c63a:	2101      	movs	r1, #1
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f005 f914 	bl	801186a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b088      	sub	sp, #32
 800c650:	af04      	add	r7, sp, #16
 800c652:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c654:	2302      	movs	r3, #2
 800c656:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c658:	2300      	movs	r3, #0
 800c65a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b01      	cmp	r3, #1
 800c666:	d102      	bne.n	800c66e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2203      	movs	r2, #3
 800c66c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	b2db      	uxtb	r3, r3
 800c674:	2b0b      	cmp	r3, #11
 800c676:	f200 823c 	bhi.w	800caf2 <USBH_Process+0x4a6>
 800c67a:	a201      	add	r2, pc, #4	; (adr r2, 800c680 <USBH_Process+0x34>)
 800c67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c680:	0800c6b1 	.word	0x0800c6b1
 800c684:	0800c6ff 	.word	0x0800c6ff
 800c688:	0800c783 	.word	0x0800c783
 800c68c:	0800ca71 	.word	0x0800ca71
 800c690:	0800caf3 	.word	0x0800caf3
 800c694:	0800c843 	.word	0x0800c843
 800c698:	0800c9fb 	.word	0x0800c9fb
 800c69c:	0800c895 	.word	0x0800c895
 800c6a0:	0800c8d1 	.word	0x0800c8d1
 800c6a4:	0800c90b 	.word	0x0800c90b
 800c6a8:	0800c953 	.word	0x0800c953
 800c6ac:	0800ca59 	.word	0x0800ca59
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f000 821c 	beq.w	800caf6 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c6c4:	20c8      	movs	r0, #200	; 0xc8
 800c6c6:	f005 f917 	bl	80118f8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f005 f80d 	bl	80116ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f001 fd92 	bl	800e220 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c6fc:	e1fb      	b.n	800caf6 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c704:	2b01      	cmp	r3, #1
 800c706:	d107      	bne.n	800c718 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2202      	movs	r2, #2
 800c714:	701a      	strb	r2, [r3, #0]
 800c716:	e025      	b.n	800c764 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c71e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c722:	d914      	bls.n	800c74e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c72a:	3301      	adds	r3, #1
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c73a:	2b03      	cmp	r3, #3
 800c73c:	d903      	bls.n	800c746 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	220d      	movs	r2, #13
 800c742:	701a      	strb	r2, [r3, #0]
 800c744:	e00e      	b.n	800c764 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	701a      	strb	r2, [r3, #0]
 800c74c:	e00a      	b.n	800c764 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c754:	f103 020a 	add.w	r2, r3, #10
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c75e:	200a      	movs	r0, #10
 800c760:	f005 f8ca 	bl	80118f8 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c778:	2300      	movs	r3, #0
 800c77a:	2200      	movs	r2, #0
 800c77c:	f001 fd50 	bl	800e220 <osMessageQueuePut>
#endif
#endif
      break;
 800c780:	e1c0      	b.n	800cb04 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d005      	beq.n	800c798 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c792:	2104      	movs	r1, #4
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c798:	2064      	movs	r0, #100	; 0x64
 800c79a:	f005 f8ad 	bl	80118f8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f004 ff7c 	bl	801169c <USBH_LL_GetSpeed>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2205      	movs	r2, #5
 800c7b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f001 fb21 	bl	800ddfe <USBH_AllocPipe>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	461a      	mov	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c7c4:	2180      	movs	r1, #128	; 0x80
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f001 fb19 	bl	800ddfe <USBH_AllocPipe>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	7919      	ldrb	r1, [r3, #4]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c7e8:	b292      	uxth	r2, r2
 800c7ea:	9202      	str	r2, [sp, #8]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	9201      	str	r2, [sp, #4]
 800c7f0:	9300      	str	r3, [sp, #0]
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2280      	movs	r2, #128	; 0x80
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f001 fad2 	bl	800dda0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	7959      	ldrb	r1, [r3, #5]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c810:	b292      	uxth	r2, r2
 800c812:	9202      	str	r2, [sp, #8]
 800c814:	2200      	movs	r2, #0
 800c816:	9201      	str	r2, [sp, #4]
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	4603      	mov	r3, r0
 800c81c:	2200      	movs	r2, #0
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f001 fabe 	bl	800dda0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c838:	2300      	movs	r3, #0
 800c83a:	2200      	movs	r2, #0
 800c83c:	f001 fcf0 	bl	800e220 <osMessageQueuePut>
#endif
#endif
      break;
 800c840:	e160      	b.n	800cb04 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f964 	bl	800cb10 <USBH_HandleEnum>
 800c848:	4603      	mov	r3, r0
 800c84a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c84c:	7bbb      	ldrb	r3, [r7, #14]
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	2b00      	cmp	r3, #0
 800c852:	f040 8152 	bne.w	800cafa <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c864:	2b01      	cmp	r3, #1
 800c866:	d103      	bne.n	800c870 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2208      	movs	r2, #8
 800c86c:	701a      	strb	r2, [r3, #0]
 800c86e:	e002      	b.n	800c876 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2207      	movs	r2, #7
 800c874:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2205      	movs	r2, #5
 800c87a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c88a:	2300      	movs	r3, #0
 800c88c:	2200      	movs	r2, #0
 800c88e:	f001 fcc7 	bl	800e220 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c892:	e132      	b.n	800cafa <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f000 812f 	beq.w	800cafe <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8a6:	2101      	movs	r1, #1
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2208      	movs	r2, #8
 800c8b0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2205      	movs	r2, #5
 800c8b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f001 fca9 	bl	800e220 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800c8ce:	e116      	b.n	800cafe <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	4619      	mov	r1, r3
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 fcf8 	bl	800d2d0 <USBH_SetCfg>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d102      	bne.n	800c8ec <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2209      	movs	r2, #9
 800c8ea:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c900:	2300      	movs	r3, #0
 800c902:	2200      	movs	r2, #0
 800c904:	f001 fc8c 	bl	800e220 <osMessageQueuePut>
#endif
#endif
      break;
 800c908:	e0fc      	b.n	800cb04 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c910:	f003 0320 	and.w	r3, r3, #32
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00a      	beq.n	800c92e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c918:	2101      	movs	r1, #1
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fcfb 	bl	800d316 <USBH_SetFeature>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d106      	bne.n	800c934 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	220a      	movs	r2, #10
 800c92a:	701a      	strb	r2, [r3, #0]
 800c92c:	e002      	b.n	800c934 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	220a      	movs	r2, #10
 800c932:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c948:	2300      	movs	r3, #0
 800c94a:	2200      	movs	r2, #0
 800c94c:	f001 fc68 	bl	800e220 <osMessageQueuePut>
#endif
#endif
      break;
 800c950:	e0d8      	b.n	800cb04 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d03f      	beq.n	800c9dc <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c964:	2300      	movs	r3, #0
 800c966:	73fb      	strb	r3, [r7, #15]
 800c968:	e016      	b.n	800c998 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c96a:	7bfa      	ldrb	r2, [r7, #15]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	32de      	adds	r2, #222	; 0xde
 800c970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c974:	791a      	ldrb	r2, [r3, #4]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d108      	bne.n	800c992 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c980:	7bfa      	ldrb	r2, [r7, #15]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	32de      	adds	r2, #222	; 0xde
 800c986:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c990:	e005      	b.n	800c99e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c992:	7bfb      	ldrb	r3, [r7, #15]
 800c994:	3301      	adds	r3, #1
 800c996:	73fb      	strb	r3, [r7, #15]
 800c998:	7bfb      	ldrb	r3, [r7, #15]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0e5      	beq.n	800c96a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d016      	beq.n	800c9d6 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	4798      	blx	r3
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d109      	bne.n	800c9ce <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2206      	movs	r2, #6
 800c9be:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9c6:	2103      	movs	r1, #3
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	4798      	blx	r3
 800c9cc:	e006      	b.n	800c9dc <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	220d      	movs	r2, #13
 800c9d2:	701a      	strb	r2, [r3, #0]
 800c9d4:	e002      	b.n	800c9dc <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	220d      	movs	r2, #13
 800c9da:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2205      	movs	r2, #5
 800c9e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f001 fc14 	bl	800e220 <osMessageQueuePut>
#endif
#endif
      break;
 800c9f8:	e084      	b.n	800cb04 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d017      	beq.n	800ca34 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca0a:	691b      	ldr	r3, [r3, #16]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	4798      	blx	r3
 800ca10:	4603      	mov	r3, r0
 800ca12:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ca14:	7bbb      	ldrb	r3, [r7, #14]
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d103      	bne.n	800ca24 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	220b      	movs	r2, #11
 800ca20:	701a      	strb	r2, [r3, #0]
 800ca22:	e00a      	b.n	800ca3a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800ca24:	7bbb      	ldrb	r3, [r7, #14]
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	d106      	bne.n	800ca3a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	220d      	movs	r2, #13
 800ca30:	701a      	strb	r2, [r3, #0]
 800ca32:	e002      	b.n	800ca3a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	220d      	movs	r2, #13
 800ca38:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2205      	movs	r2, #5
 800ca3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca4e:	2300      	movs	r3, #0
 800ca50:	2200      	movs	r2, #0
 800ca52:	f001 fbe5 	bl	800e220 <osMessageQueuePut>
#endif
#endif
      break;
 800ca56:	e055      	b.n	800cb04 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d04f      	beq.n	800cb02 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	4798      	blx	r3
      }
      break;
 800ca6e:	e048      	b.n	800cb02 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7ff fcf7 	bl	800c46c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d009      	beq.n	800ca9c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d005      	beq.n	800cab2 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800caac:	2105      	movs	r1, #5
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d107      	bne.n	800cace <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7ff fdb0 	bl	800c62c <USBH_Start>
 800cacc:	e002      	b.n	800cad4 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f004 fdae 	bl	8011630 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2201      	movs	r2, #1
 800cad8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cae8:	2300      	movs	r3, #0
 800caea:	2200      	movs	r2, #0
 800caec:	f001 fb98 	bl	800e220 <osMessageQueuePut>
#endif
#endif
      break;
 800caf0:	e008      	b.n	800cb04 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800caf2:	bf00      	nop
 800caf4:	e006      	b.n	800cb04 <USBH_Process+0x4b8>
      break;
 800caf6:	bf00      	nop
 800caf8:	e004      	b.n	800cb04 <USBH_Process+0x4b8>
      break;
 800cafa:	bf00      	nop
 800cafc:	e002      	b.n	800cb04 <USBH_Process+0x4b8>
    break;
 800cafe:	bf00      	nop
 800cb00:	e000      	b.n	800cb04 <USBH_Process+0x4b8>
      break;
 800cb02:	bf00      	nop
  }
  return USBH_OK;
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop

0800cb10 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b088      	sub	sp, #32
 800cb14:	af04      	add	r7, sp, #16
 800cb16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	785b      	ldrb	r3, [r3, #1]
 800cb24:	2b07      	cmp	r3, #7
 800cb26:	f200 8208 	bhi.w	800cf3a <USBH_HandleEnum+0x42a>
 800cb2a:	a201      	add	r2, pc, #4	; (adr r2, 800cb30 <USBH_HandleEnum+0x20>)
 800cb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb30:	0800cb51 	.word	0x0800cb51
 800cb34:	0800cc0f 	.word	0x0800cc0f
 800cb38:	0800cc79 	.word	0x0800cc79
 800cb3c:	0800cd07 	.word	0x0800cd07
 800cb40:	0800cd71 	.word	0x0800cd71
 800cb44:	0800cde1 	.word	0x0800cde1
 800cb48:	0800ce7d 	.word	0x0800ce7d
 800cb4c:	0800cefb 	.word	0x0800cefb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cb50:	2108      	movs	r1, #8
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 faec 	bl	800d130 <USBH_Get_DevDesc>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cb5c:	7bbb      	ldrb	r3, [r7, #14]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d130      	bne.n	800cbc4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	7919      	ldrb	r1, [r3, #4]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cb86:	b292      	uxth	r2, r2
 800cb88:	9202      	str	r2, [sp, #8]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	9201      	str	r2, [sp, #4]
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	4603      	mov	r3, r0
 800cb92:	2280      	movs	r2, #128	; 0x80
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f001 f903 	bl	800dda0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	7959      	ldrb	r1, [r3, #5]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cbae:	b292      	uxth	r2, r2
 800cbb0:	9202      	str	r2, [sp, #8]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	9201      	str	r2, [sp, #4]
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2200      	movs	r2, #0
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f001 f8ef 	bl	800dda0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cbc2:	e1bc      	b.n	800cf3e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cbc4:	7bbb      	ldrb	r3, [r7, #14]
 800cbc6:	2b03      	cmp	r3, #3
 800cbc8:	f040 81b9 	bne.w	800cf3e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cbe2:	2b03      	cmp	r3, #3
 800cbe4:	d903      	bls.n	800cbee <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	220d      	movs	r2, #13
 800cbea:	701a      	strb	r2, [r3, #0]
      break;
 800cbec:	e1a7      	b.n	800cf3e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	795b      	ldrb	r3, [r3, #5]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f001 f923 	bl	800de40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	791b      	ldrb	r3, [r3, #4]
 800cbfe:	4619      	mov	r1, r3
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f001 f91d 	bl	800de40 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	701a      	strb	r2, [r3, #0]
      break;
 800cc0c:	e197      	b.n	800cf3e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cc0e:	2112      	movs	r1, #18
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 fa8d 	bl	800d130 <USBH_Get_DevDesc>
 800cc16:	4603      	mov	r3, r0
 800cc18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc1a:	7bbb      	ldrb	r3, [r7, #14]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d103      	bne.n	800cc28 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2202      	movs	r2, #2
 800cc24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cc26:	e18c      	b.n	800cf42 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc28:	7bbb      	ldrb	r3, [r7, #14]
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	f040 8189 	bne.w	800cf42 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cc36:	3301      	adds	r3, #1
 800cc38:	b2da      	uxtb	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cc46:	2b03      	cmp	r3, #3
 800cc48:	d903      	bls.n	800cc52 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	220d      	movs	r2, #13
 800cc4e:	701a      	strb	r2, [r3, #0]
      break;
 800cc50:	e177      	b.n	800cf42 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	795b      	ldrb	r3, [r3, #5]
 800cc56:	4619      	mov	r1, r3
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f001 f8f1 	bl	800de40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	791b      	ldrb	r3, [r3, #4]
 800cc62:	4619      	mov	r1, r3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f001 f8eb 	bl	800de40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	701a      	strb	r2, [r3, #0]
      break;
 800cc76:	e164      	b.n	800cf42 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cc78:	2101      	movs	r1, #1
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fb04 	bl	800d288 <USBH_SetAddress>
 800cc80:	4603      	mov	r3, r0
 800cc82:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc84:	7bbb      	ldrb	r3, [r7, #14]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d132      	bne.n	800ccf0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cc8a:	2002      	movs	r0, #2
 800cc8c:	f004 fe34 	bl	80118f8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2203      	movs	r2, #3
 800cc9c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	7919      	ldrb	r1, [r3, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ccb2:	b292      	uxth	r2, r2
 800ccb4:	9202      	str	r2, [sp, #8]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	9201      	str	r2, [sp, #4]
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2280      	movs	r2, #128	; 0x80
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f001 f86d 	bl	800dda0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	7959      	ldrb	r1, [r3, #5]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ccda:	b292      	uxth	r2, r2
 800ccdc:	9202      	str	r2, [sp, #8]
 800ccde:	2200      	movs	r2, #0
 800cce0:	9201      	str	r2, [sp, #4]
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	4603      	mov	r3, r0
 800cce6:	2200      	movs	r2, #0
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f001 f859 	bl	800dda0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ccee:	e12a      	b.n	800cf46 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ccf0:	7bbb      	ldrb	r3, [r7, #14]
 800ccf2:	2b03      	cmp	r3, #3
 800ccf4:	f040 8127 	bne.w	800cf46 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	220d      	movs	r2, #13
 800ccfc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	705a      	strb	r2, [r3, #1]
      break;
 800cd04:	e11f      	b.n	800cf46 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cd06:	2109      	movs	r1, #9
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fa39 	bl	800d180 <USBH_Get_CfgDesc>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd12:	7bbb      	ldrb	r3, [r7, #14]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d103      	bne.n	800cd20 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2204      	movs	r2, #4
 800cd1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cd1e:	e114      	b.n	800cf4a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd20:	7bbb      	ldrb	r3, [r7, #14]
 800cd22:	2b03      	cmp	r3, #3
 800cd24:	f040 8111 	bne.w	800cf4a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd2e:	3301      	adds	r3, #1
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd3e:	2b03      	cmp	r3, #3
 800cd40:	d903      	bls.n	800cd4a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	220d      	movs	r2, #13
 800cd46:	701a      	strb	r2, [r3, #0]
      break;
 800cd48:	e0ff      	b.n	800cf4a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	795b      	ldrb	r3, [r3, #5]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f001 f875 	bl	800de40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	791b      	ldrb	r3, [r3, #4]
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f001 f86f 	bl	800de40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	701a      	strb	r2, [r3, #0]
      break;
 800cd6e:	e0ec      	b.n	800cf4a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cd76:	4619      	mov	r1, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 fa01 	bl	800d180 <USBH_Get_CfgDesc>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd82:	7bbb      	ldrb	r3, [r7, #14]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d103      	bne.n	800cd90 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2205      	movs	r2, #5
 800cd8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cd8e:	e0de      	b.n	800cf4e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd90:	7bbb      	ldrb	r3, [r7, #14]
 800cd92:	2b03      	cmp	r3, #3
 800cd94:	f040 80db 	bne.w	800cf4e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd9e:	3301      	adds	r3, #1
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d903      	bls.n	800cdba <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	220d      	movs	r2, #13
 800cdb6:	701a      	strb	r2, [r3, #0]
      break;
 800cdb8:	e0c9      	b.n	800cf4e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	795b      	ldrb	r3, [r3, #5]
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f001 f83d 	bl	800de40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	791b      	ldrb	r3, [r3, #4]
 800cdca:	4619      	mov	r1, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f001 f837 	bl	800de40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	701a      	strb	r2, [r3, #0]
      break;
 800cdde:	e0b6      	b.n	800cf4e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d036      	beq.n	800ce58 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cdf6:	23ff      	movs	r3, #255	; 0xff
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 f9e5 	bl	800d1c8 <USBH_Get_StringDesc>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ce02:	7bbb      	ldrb	r3, [r7, #14]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d111      	bne.n	800ce2c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2206      	movs	r2, #6
 800ce0c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2205      	movs	r2, #5
 800ce12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce22:	2300      	movs	r3, #0
 800ce24:	2200      	movs	r2, #0
 800ce26:	f001 f9fb 	bl	800e220 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ce2a:	e092      	b.n	800cf52 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce2c:	7bbb      	ldrb	r3, [r7, #14]
 800ce2e:	2b03      	cmp	r3, #3
 800ce30:	f040 808f 	bne.w	800cf52 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2206      	movs	r2, #6
 800ce38:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2205      	movs	r2, #5
 800ce3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce4e:	2300      	movs	r3, #0
 800ce50:	2200      	movs	r2, #0
 800ce52:	f001 f9e5 	bl	800e220 <osMessageQueuePut>
      break;
 800ce56:	e07c      	b.n	800cf52 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2206      	movs	r2, #6
 800ce5c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2205      	movs	r2, #5
 800ce62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce72:	2300      	movs	r3, #0
 800ce74:	2200      	movs	r2, #0
 800ce76:	f001 f9d3 	bl	800e220 <osMessageQueuePut>
      break;
 800ce7a:	e06a      	b.n	800cf52 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d027      	beq.n	800ced6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ce92:	23ff      	movs	r3, #255	; 0xff
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 f997 	bl	800d1c8 <USBH_Get_StringDesc>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ce9e:	7bbb      	ldrb	r3, [r7, #14]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d103      	bne.n	800ceac <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2207      	movs	r2, #7
 800cea8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ceaa:	e054      	b.n	800cf56 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ceac:	7bbb      	ldrb	r3, [r7, #14]
 800ceae:	2b03      	cmp	r3, #3
 800ceb0:	d151      	bne.n	800cf56 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2207      	movs	r2, #7
 800ceb6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2205      	movs	r2, #5
 800cebc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cecc:	2300      	movs	r3, #0
 800cece:	2200      	movs	r2, #0
 800ced0:	f001 f9a6 	bl	800e220 <osMessageQueuePut>
      break;
 800ced4:	e03f      	b.n	800cf56 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2207      	movs	r2, #7
 800ceda:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2205      	movs	r2, #5
 800cee0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cef0:	2300      	movs	r3, #0
 800cef2:	2200      	movs	r2, #0
 800cef4:	f001 f994 	bl	800e220 <osMessageQueuePut>
      break;
 800cef8:	e02d      	b.n	800cf56 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d017      	beq.n	800cf34 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cf10:	23ff      	movs	r3, #255	; 0xff
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 f958 	bl	800d1c8 <USBH_Get_StringDesc>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cf1c:	7bbb      	ldrb	r3, [r7, #14]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d102      	bne.n	800cf28 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cf22:	2300      	movs	r3, #0
 800cf24:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cf26:	e018      	b.n	800cf5a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf28:	7bbb      	ldrb	r3, [r7, #14]
 800cf2a:	2b03      	cmp	r3, #3
 800cf2c:	d115      	bne.n	800cf5a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	73fb      	strb	r3, [r7, #15]
      break;
 800cf32:	e012      	b.n	800cf5a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	73fb      	strb	r3, [r7, #15]
      break;
 800cf38:	e00f      	b.n	800cf5a <USBH_HandleEnum+0x44a>

    default:
      break;
 800cf3a:	bf00      	nop
 800cf3c:	e00e      	b.n	800cf5c <USBH_HandleEnum+0x44c>
      break;
 800cf3e:	bf00      	nop
 800cf40:	e00c      	b.n	800cf5c <USBH_HandleEnum+0x44c>
      break;
 800cf42:	bf00      	nop
 800cf44:	e00a      	b.n	800cf5c <USBH_HandleEnum+0x44c>
      break;
 800cf46:	bf00      	nop
 800cf48:	e008      	b.n	800cf5c <USBH_HandleEnum+0x44c>
      break;
 800cf4a:	bf00      	nop
 800cf4c:	e006      	b.n	800cf5c <USBH_HandleEnum+0x44c>
      break;
 800cf4e:	bf00      	nop
 800cf50:	e004      	b.n	800cf5c <USBH_HandleEnum+0x44c>
      break;
 800cf52:	bf00      	nop
 800cf54:	e002      	b.n	800cf5c <USBH_HandleEnum+0x44c>
      break;
 800cf56:	bf00      	nop
 800cf58:	e000      	b.n	800cf5c <USBH_HandleEnum+0x44c>
      break;
 800cf5a:	bf00      	nop
  }
  return Status;
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop

0800cf68 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	683a      	ldr	r2, [r7, #0]
 800cf76:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800cf7a:	bf00      	nop
 800cf7c:	370c      	adds	r7, #12
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr

0800cf86 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b082      	sub	sp, #8
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f804 	bl	800cfaa <USBH_HandleSof>
}
 800cfa2:	bf00      	nop
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b082      	sub	sp, #8
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	2b0b      	cmp	r3, #11
 800cfba:	d10a      	bne.n	800cfd2 <USBH_HandleSof+0x28>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d005      	beq.n	800cfd2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfcc:	699b      	ldr	r3, [r3, #24]
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	4798      	blx	r3
  }
}
 800cfd2:	bf00      	nop
 800cfd4:	3708      	adds	r7, #8
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b082      	sub	sp, #8
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2201      	movs	r2, #1
 800cfee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cffe:	2300      	movs	r3, #0
 800d000:	2200      	movs	r2, #0
 800d002:	f001 f90d 	bl	800e220 <osMessageQueuePut>
#endif
#endif

  return;
 800d006:	bf00      	nop
}
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d00e:	b480      	push	{r7}
 800d010:	b083      	sub	sp, #12
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2200      	movs	r2, #0
 800d01a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d01e:	bf00      	nop
}
 800d020:	370c      	adds	r7, #12
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr

0800d02a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b082      	sub	sp, #8
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2201      	movs	r2, #1
 800d04e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d05e:	2300      	movs	r3, #0
 800d060:	2200      	movs	r2, #0
 800d062:	f001 f8dd 	bl	800e220 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f004 fae8 	bl	8011666 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	791b      	ldrb	r3, [r3, #4]
 800d09a:	4619      	mov	r1, r3
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 fecf 	bl	800de40 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	795b      	ldrb	r3, [r3, #5]
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 fec9 	bl	800de40 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f001 f8ab 	bl	800e220 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3708      	adds	r7, #8
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d0e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f001 f8f7 	bl	800e2e0 <osMessageQueueGet>
 800d0f2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1f0      	bne.n	800d0dc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff faa6 	bl	800c64c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d100:	e7ec      	b.n	800d0dc <USBH_Process_OS+0x8>

0800d102 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b082      	sub	sp, #8
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2201      	movs	r2, #1
 800d10e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d11e:	2300      	movs	r3, #0
 800d120:	2200      	movs	r2, #0
 800d122:	f001 f87d 	bl	800e220 <osMessageQueuePut>
#endif

  return USBH_OK;
 800d126:	2300      	movs	r3, #0
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af02      	add	r7, sp, #8
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	460b      	mov	r3, r1
 800d13a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d142:	78fb      	ldrb	r3, [r7, #3]
 800d144:	b29b      	uxth	r3, r3
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	4613      	mov	r3, r2
 800d14a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d14e:	2100      	movs	r1, #0
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 f864 	bl	800d21e <USBH_GetDescriptor>
 800d156:	4603      	mov	r3, r0
 800d158:	73fb      	strb	r3, [r7, #15]
 800d15a:	7bfb      	ldrb	r3, [r7, #15]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10a      	bne.n	800d176 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d16c:	78fa      	ldrb	r2, [r7, #3]
 800d16e:	b292      	uxth	r2, r2
 800d170:	4619      	mov	r1, r3
 800d172:	f000 f918 	bl	800d3a6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d176:	7bfb      	ldrb	r3, [r7, #15]
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d180:	b580      	push	{r7, lr}
 800d182:	b086      	sub	sp, #24
 800d184:	af02      	add	r7, sp, #8
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	460b      	mov	r3, r1
 800d18a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	331c      	adds	r3, #28
 800d190:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d192:	887b      	ldrh	r3, [r7, #2]
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d19c:	2100      	movs	r1, #0
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 f83d 	bl	800d21e <USBH_GetDescriptor>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	72fb      	strb	r3, [r7, #11]
 800d1a8:	7afb      	ldrb	r3, [r7, #11]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d107      	bne.n	800d1be <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d1b4:	887a      	ldrh	r2, [r7, #2]
 800d1b6:	68f9      	ldr	r1, [r7, #12]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 f964 	bl	800d486 <USBH_ParseCfgDesc>
  }

  return status;
 800d1be:	7afb      	ldrb	r3, [r7, #11]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b088      	sub	sp, #32
 800d1cc:	af02      	add	r7, sp, #8
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	607a      	str	r2, [r7, #4]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	72fb      	strb	r3, [r7, #11]
 800d1d8:	4613      	mov	r3, r2
 800d1da:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d1dc:	7afb      	ldrb	r3, [r7, #11]
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d1e4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d1ec:	893b      	ldrh	r3, [r7, #8]
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	68f8      	ldr	r0, [r7, #12]
 800d1f6:	f000 f812 	bl	800d21e <USBH_GetDescriptor>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	75fb      	strb	r3, [r7, #23]
 800d1fe:	7dfb      	ldrb	r3, [r7, #23]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d107      	bne.n	800d214 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d20a:	893a      	ldrh	r2, [r7, #8]
 800d20c:	6879      	ldr	r1, [r7, #4]
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 fa37 	bl	800d682 <USBH_ParseStringDesc>
  }

  return status;
 800d214:	7dfb      	ldrb	r3, [r7, #23]
}
 800d216:	4618      	mov	r0, r3
 800d218:	3718      	adds	r7, #24
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b084      	sub	sp, #16
 800d222:	af00      	add	r7, sp, #0
 800d224:	60f8      	str	r0, [r7, #12]
 800d226:	607b      	str	r3, [r7, #4]
 800d228:	460b      	mov	r3, r1
 800d22a:	72fb      	strb	r3, [r7, #11]
 800d22c:	4613      	mov	r3, r2
 800d22e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	789b      	ldrb	r3, [r3, #2]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d11c      	bne.n	800d272 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d238:	7afb      	ldrb	r3, [r7, #11]
 800d23a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d23e:	b2da      	uxtb	r2, r3
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2206      	movs	r2, #6
 800d248:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	893a      	ldrh	r2, [r7, #8]
 800d24e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d250:	893b      	ldrh	r3, [r7, #8]
 800d252:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d25a:	d104      	bne.n	800d266 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f240 4209 	movw	r2, #1033	; 0x409
 800d262:	829a      	strh	r2, [r3, #20]
 800d264:	e002      	b.n	800d26c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2200      	movs	r2, #0
 800d26a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	8b3a      	ldrh	r2, [r7, #24]
 800d270:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d272:	8b3b      	ldrh	r3, [r7, #24]
 800d274:	461a      	mov	r2, r3
 800d276:	6879      	ldr	r1, [r7, #4]
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f000 fa50 	bl	800d71e <USBH_CtlReq>
 800d27e:	4603      	mov	r3, r0
}
 800d280:	4618      	mov	r0, r3
 800d282:	3710      	adds	r7, #16
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	789b      	ldrb	r3, [r3, #2]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d10f      	bne.n	800d2bc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2205      	movs	r2, #5
 800d2a6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d2a8:	78fb      	ldrb	r3, [r7, #3]
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d2bc:	2200      	movs	r2, #0
 800d2be:	2100      	movs	r1, #0
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 fa2c 	bl	800d71e <USBH_CtlReq>
 800d2c6:	4603      	mov	r3, r0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	460b      	mov	r3, r1
 800d2da:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	789b      	ldrb	r3, [r3, #2]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d10e      	bne.n	800d302 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2209      	movs	r2, #9
 800d2ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	887a      	ldrh	r2, [r7, #2]
 800d2f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d302:	2200      	movs	r2, #0
 800d304:	2100      	movs	r1, #0
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 fa09 	bl	800d71e <USBH_CtlReq>
 800d30c:	4603      	mov	r3, r0
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b082      	sub	sp, #8
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	460b      	mov	r3, r1
 800d320:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	789b      	ldrb	r3, [r3, #2]
 800d326:	2b01      	cmp	r3, #1
 800d328:	d10f      	bne.n	800d34a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2203      	movs	r2, #3
 800d334:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d336:	78fb      	ldrb	r3, [r7, #3]
 800d338:	b29a      	uxth	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2200      	movs	r2, #0
 800d342:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d34a:	2200      	movs	r2, #0
 800d34c:	2100      	movs	r1, #0
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 f9e5 	bl	800d71e <USBH_CtlReq>
 800d354:	4603      	mov	r3, r0
}
 800d356:	4618      	mov	r0, r3
 800d358:	3708      	adds	r7, #8
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b082      	sub	sp, #8
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
 800d366:	460b      	mov	r3, r1
 800d368:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	789b      	ldrb	r3, [r3, #2]
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d10f      	bne.n	800d392 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2202      	movs	r2, #2
 800d376:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d384:	78fb      	ldrb	r3, [r7, #3]
 800d386:	b29a      	uxth	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d392:	2200      	movs	r2, #0
 800d394:	2100      	movs	r1, #0
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f9c1 	bl	800d71e <USBH_CtlReq>
 800d39c:	4603      	mov	r3, r0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d3a6:	b480      	push	{r7}
 800d3a8:	b085      	sub	sp, #20
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	60f8      	str	r0, [r7, #12]
 800d3ae:	60b9      	str	r1, [r7, #8]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	781a      	ldrb	r2, [r3, #0]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	785a      	ldrb	r2, [r3, #1]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	3302      	adds	r3, #2
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	3303      	adds	r3, #3
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	021b      	lsls	r3, r3, #8
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	791a      	ldrb	r2, [r3, #4]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	795a      	ldrb	r2, [r3, #5]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	799a      	ldrb	r2, [r3, #6]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	79da      	ldrb	r2, [r3, #7]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d400:	88fb      	ldrh	r3, [r7, #6]
 800d402:	2b08      	cmp	r3, #8
 800d404:	d939      	bls.n	800d47a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	3308      	adds	r3, #8
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	b29a      	uxth	r2, r3
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	3309      	adds	r3, #9
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	b29b      	uxth	r3, r3
 800d416:	021b      	lsls	r3, r3, #8
 800d418:	b29b      	uxth	r3, r3
 800d41a:	4313      	orrs	r3, r2
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	330a      	adds	r3, #10
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	b29a      	uxth	r2, r3
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	330b      	adds	r3, #11
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	b29b      	uxth	r3, r3
 800d432:	021b      	lsls	r3, r3, #8
 800d434:	b29b      	uxth	r3, r3
 800d436:	4313      	orrs	r3, r2
 800d438:	b29a      	uxth	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	330c      	adds	r3, #12
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	b29a      	uxth	r2, r3
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	330d      	adds	r3, #13
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	021b      	lsls	r3, r3, #8
 800d450:	b29b      	uxth	r3, r3
 800d452:	4313      	orrs	r3, r2
 800d454:	b29a      	uxth	r2, r3
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	7b9a      	ldrb	r2, [r3, #14]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	7bda      	ldrb	r2, [r3, #15]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	7c1a      	ldrb	r2, [r3, #16]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	7c5a      	ldrb	r2, [r3, #17]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	745a      	strb	r2, [r3, #17]
  }
}
 800d47a:	bf00      	nop
 800d47c:	3714      	adds	r7, #20
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b08a      	sub	sp, #40	; 0x28
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	60f8      	str	r0, [r7, #12]
 800d48e:	60b9      	str	r1, [r7, #8]
 800d490:	4613      	mov	r3, r2
 800d492:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d498:	2300      	movs	r3, #0
 800d49a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	781a      	ldrb	r2, [r3, #0]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	785a      	ldrb	r2, [r3, #1]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	3302      	adds	r3, #2
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	3303      	adds	r3, #3
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	021b      	lsls	r3, r3, #8
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	791a      	ldrb	r2, [r3, #4]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	795a      	ldrb	r2, [r3, #5]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	799a      	ldrb	r2, [r3, #6]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	79da      	ldrb	r2, [r3, #7]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	7a1a      	ldrb	r2, [r3, #8]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d4fc:	88fb      	ldrh	r3, [r7, #6]
 800d4fe:	2b09      	cmp	r3, #9
 800d500:	d95f      	bls.n	800d5c2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d502:	2309      	movs	r3, #9
 800d504:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d506:	2300      	movs	r3, #0
 800d508:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d50a:	e051      	b.n	800d5b0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d50c:	f107 0316 	add.w	r3, r7, #22
 800d510:	4619      	mov	r1, r3
 800d512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d514:	f000 f8e8 	bl	800d6e8 <USBH_GetNextDesc>
 800d518:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51c:	785b      	ldrb	r3, [r3, #1]
 800d51e:	2b04      	cmp	r3, #4
 800d520:	d146      	bne.n	800d5b0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d526:	221a      	movs	r2, #26
 800d528:	fb02 f303 	mul.w	r3, r2, r3
 800d52c:	3308      	adds	r3, #8
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	4413      	add	r3, r2
 800d532:	3302      	adds	r3, #2
 800d534:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d536:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d538:	69f8      	ldr	r0, [r7, #28]
 800d53a:	f000 f846 	bl	800d5ca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d53e:	2300      	movs	r3, #0
 800d540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d544:	2300      	movs	r3, #0
 800d546:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d548:	e022      	b.n	800d590 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d54a:	f107 0316 	add.w	r3, r7, #22
 800d54e:	4619      	mov	r1, r3
 800d550:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d552:	f000 f8c9 	bl	800d6e8 <USBH_GetNextDesc>
 800d556:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55a:	785b      	ldrb	r3, [r3, #1]
 800d55c:	2b05      	cmp	r3, #5
 800d55e:	d117      	bne.n	800d590 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d560:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d564:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d568:	3201      	adds	r2, #1
 800d56a:	00d2      	lsls	r2, r2, #3
 800d56c:	211a      	movs	r1, #26
 800d56e:	fb01 f303 	mul.w	r3, r1, r3
 800d572:	4413      	add	r3, r2
 800d574:	3308      	adds	r3, #8
 800d576:	68fa      	ldr	r2, [r7, #12]
 800d578:	4413      	add	r3, r2
 800d57a:	3304      	adds	r3, #4
 800d57c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d57e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d580:	69b8      	ldr	r0, [r7, #24]
 800d582:	f000 f851 	bl	800d628 <USBH_ParseEPDesc>
            ep_ix++;
 800d586:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d58a:	3301      	adds	r3, #1
 800d58c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	791b      	ldrb	r3, [r3, #4]
 800d594:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d598:	429a      	cmp	r2, r3
 800d59a:	d204      	bcs.n	800d5a6 <USBH_ParseCfgDesc+0x120>
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	885a      	ldrh	r2, [r3, #2]
 800d5a0:	8afb      	ldrh	r3, [r7, #22]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d8d1      	bhi.n	800d54a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d5a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d5b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d804      	bhi.n	800d5c2 <USBH_ParseCfgDesc+0x13c>
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	885a      	ldrh	r2, [r3, #2]
 800d5bc:	8afb      	ldrh	r3, [r7, #22]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d8a4      	bhi.n	800d50c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d5c2:	bf00      	nop
 800d5c4:	3728      	adds	r7, #40	; 0x28
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d5ca:	b480      	push	{r7}
 800d5cc:	b083      	sub	sp, #12
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	781a      	ldrb	r2, [r3, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	785a      	ldrb	r2, [r3, #1]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	789a      	ldrb	r2, [r3, #2]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	78da      	ldrb	r2, [r3, #3]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	791a      	ldrb	r2, [r3, #4]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	795a      	ldrb	r2, [r3, #5]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	799a      	ldrb	r2, [r3, #6]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	79da      	ldrb	r2, [r3, #7]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	7a1a      	ldrb	r2, [r3, #8]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	721a      	strb	r2, [r3, #8]
}
 800d61c:	bf00      	nop
 800d61e:	370c      	adds	r7, #12
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	781a      	ldrb	r2, [r3, #0]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	785a      	ldrb	r2, [r3, #1]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	789a      	ldrb	r2, [r3, #2]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	78da      	ldrb	r2, [r3, #3]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	3304      	adds	r3, #4
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	b29a      	uxth	r2, r3
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	3305      	adds	r3, #5
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	b29b      	uxth	r3, r3
 800d662:	021b      	lsls	r3, r3, #8
 800d664:	b29b      	uxth	r3, r3
 800d666:	4313      	orrs	r3, r2
 800d668:	b29a      	uxth	r2, r3
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	799a      	ldrb	r2, [r3, #6]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	719a      	strb	r2, [r3, #6]
}
 800d676:	bf00      	nop
 800d678:	370c      	adds	r7, #12
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr

0800d682 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d682:	b480      	push	{r7}
 800d684:	b087      	sub	sp, #28
 800d686:	af00      	add	r7, sp, #0
 800d688:	60f8      	str	r0, [r7, #12]
 800d68a:	60b9      	str	r1, [r7, #8]
 800d68c:	4613      	mov	r3, r2
 800d68e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	3301      	adds	r3, #1
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	2b03      	cmp	r3, #3
 800d698:	d120      	bne.n	800d6dc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	1e9a      	subs	r2, r3, #2
 800d6a0:	88fb      	ldrh	r3, [r7, #6]
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	bf28      	it	cs
 800d6a6:	4613      	movcs	r3, r2
 800d6a8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	3302      	adds	r3, #2
 800d6ae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	82fb      	strh	r3, [r7, #22]
 800d6b4:	e00b      	b.n	800d6ce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d6b6:	8afb      	ldrh	r3, [r7, #22]
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	781a      	ldrb	r2, [r3, #0]
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d6c8:	8afb      	ldrh	r3, [r7, #22]
 800d6ca:	3302      	adds	r3, #2
 800d6cc:	82fb      	strh	r3, [r7, #22]
 800d6ce:	8afa      	ldrh	r2, [r7, #22]
 800d6d0:	8abb      	ldrh	r3, [r7, #20]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d3ef      	bcc.n	800d6b6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	701a      	strb	r2, [r3, #0]
  }
}
 800d6dc:	bf00      	nop
 800d6de:	371c      	adds	r7, #28
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	881a      	ldrh	r2, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	4413      	add	r3, r2
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4413      	add	r3, r2
 800d70e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d710:	68fb      	ldr	r3, [r7, #12]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3714      	adds	r7, #20
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr

0800d71e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d71e:	b580      	push	{r7, lr}
 800d720:	b086      	sub	sp, #24
 800d722:	af00      	add	r7, sp, #0
 800d724:	60f8      	str	r0, [r7, #12]
 800d726:	60b9      	str	r1, [r7, #8]
 800d728:	4613      	mov	r3, r2
 800d72a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d72c:	2301      	movs	r3, #1
 800d72e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	789b      	ldrb	r3, [r3, #2]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d002      	beq.n	800d73e <USBH_CtlReq+0x20>
 800d738:	2b02      	cmp	r3, #2
 800d73a:	d01d      	beq.n	800d778 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d73c:	e043      	b.n	800d7c6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	88fa      	ldrh	r2, [r7, #6]
 800d748:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2201      	movs	r2, #1
 800d74e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2202      	movs	r2, #2
 800d754:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d756:	2301      	movs	r3, #1
 800d758:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2203      	movs	r2, #3
 800d75e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d76e:	2300      	movs	r3, #0
 800d770:	2200      	movs	r2, #0
 800d772:	f000 fd55 	bl	800e220 <osMessageQueuePut>
      break;
 800d776:	e026      	b.n	800d7c6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f000 f829 	bl	800d7d0 <USBH_HandleControl>
 800d77e:	4603      	mov	r3, r0
 800d780:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d782:	7dfb      	ldrb	r3, [r7, #23]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d002      	beq.n	800d78e <USBH_CtlReq+0x70>
 800d788:	7dfb      	ldrb	r3, [r7, #23]
 800d78a:	2b03      	cmp	r3, #3
 800d78c:	d106      	bne.n	800d79c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2201      	movs	r2, #1
 800d792:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	761a      	strb	r2, [r3, #24]
 800d79a:	e005      	b.n	800d7a8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800d79c:	7dfb      	ldrb	r3, [r7, #23]
 800d79e:	2b02      	cmp	r3, #2
 800d7a0:	d102      	bne.n	800d7a8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2203      	movs	r2, #3
 800d7ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d7bc:	2300      	movs	r3, #0
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f000 fd2e 	bl	800e220 <osMessageQueuePut>
      break;
 800d7c4:	bf00      	nop
  }
  return status;
 800d7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3718      	adds	r7, #24
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af02      	add	r7, sp, #8
 800d7d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	7e1b      	ldrb	r3, [r3, #24]
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	2b0a      	cmp	r3, #10
 800d7e8:	f200 8229 	bhi.w	800dc3e <USBH_HandleControl+0x46e>
 800d7ec:	a201      	add	r2, pc, #4	; (adr r2, 800d7f4 <USBH_HandleControl+0x24>)
 800d7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f2:	bf00      	nop
 800d7f4:	0800d821 	.word	0x0800d821
 800d7f8:	0800d83b 	.word	0x0800d83b
 800d7fc:	0800d8dd 	.word	0x0800d8dd
 800d800:	0800d903 	.word	0x0800d903
 800d804:	0800d98f 	.word	0x0800d98f
 800d808:	0800d9b9 	.word	0x0800d9b9
 800d80c:	0800da7b 	.word	0x0800da7b
 800d810:	0800da9d 	.word	0x0800da9d
 800d814:	0800db2f 	.word	0x0800db2f
 800d818:	0800db55 	.word	0x0800db55
 800d81c:	0800dbe7 	.word	0x0800dbe7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f103 0110 	add.w	r1, r3, #16
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	795b      	ldrb	r3, [r3, #5]
 800d82a:	461a      	mov	r2, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 fa17 	bl	800dc60 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2202      	movs	r2, #2
 800d836:	761a      	strb	r2, [r3, #24]
      break;
 800d838:	e20c      	b.n	800dc54 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	795b      	ldrb	r3, [r3, #5]
 800d83e:	4619      	mov	r1, r3
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f003 ffff 	bl	8011844 <USBH_LL_GetURBState>
 800d846:	4603      	mov	r3, r0
 800d848:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d84a:	7bbb      	ldrb	r3, [r7, #14]
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d12c      	bne.n	800d8aa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	7c1b      	ldrb	r3, [r3, #16]
 800d854:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d858:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	8adb      	ldrh	r3, [r3, #22]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00a      	beq.n	800d878 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d862:	7b7b      	ldrb	r3, [r7, #13]
 800d864:	2b80      	cmp	r3, #128	; 0x80
 800d866:	d103      	bne.n	800d870 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2203      	movs	r2, #3
 800d86c:	761a      	strb	r2, [r3, #24]
 800d86e:	e00d      	b.n	800d88c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2205      	movs	r2, #5
 800d874:	761a      	strb	r2, [r3, #24]
 800d876:	e009      	b.n	800d88c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800d878:	7b7b      	ldrb	r3, [r7, #13]
 800d87a:	2b80      	cmp	r3, #128	; 0x80
 800d87c:	d103      	bne.n	800d886 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2209      	movs	r2, #9
 800d882:	761a      	strb	r2, [r3, #24]
 800d884:	e002      	b.n	800d88c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2207      	movs	r2, #7
 800d88a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2203      	movs	r2, #3
 800d890:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f000 fcbc 	bl	800e220 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d8a8:	e1cb      	b.n	800dc42 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d8aa:	7bbb      	ldrb	r3, [r7, #14]
 800d8ac:	2b04      	cmp	r3, #4
 800d8ae:	d003      	beq.n	800d8b8 <USBH_HandleControl+0xe8>
 800d8b0:	7bbb      	ldrb	r3, [r7, #14]
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	f040 81c5 	bne.w	800dc42 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	220b      	movs	r2, #11
 800d8bc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2203      	movs	r2, #3
 800d8c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	f000 fca3 	bl	800e220 <osMessageQueuePut>
      break;
 800d8da:	e1b2      	b.n	800dc42 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6899      	ldr	r1, [r3, #8]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	899a      	ldrh	r2, [r3, #12]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	791b      	ldrb	r3, [r3, #4]
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 f9f2 	bl	800dcde <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2204      	movs	r2, #4
 800d8fe:	761a      	strb	r2, [r3, #24]
      break;
 800d900:	e1a8      	b.n	800dc54 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	791b      	ldrb	r3, [r3, #4]
 800d906:	4619      	mov	r1, r3
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f003 ff9b 	bl	8011844 <USBH_LL_GetURBState>
 800d90e:	4603      	mov	r3, r0
 800d910:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d912:	7bbb      	ldrb	r3, [r7, #14]
 800d914:	2b01      	cmp	r3, #1
 800d916:	d110      	bne.n	800d93a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2209      	movs	r2, #9
 800d91c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2203      	movs	r2, #3
 800d922:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d932:	2300      	movs	r3, #0
 800d934:	2200      	movs	r2, #0
 800d936:	f000 fc73 	bl	800e220 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d93a:	7bbb      	ldrb	r3, [r7, #14]
 800d93c:	2b05      	cmp	r3, #5
 800d93e:	d110      	bne.n	800d962 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d940:	2303      	movs	r3, #3
 800d942:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2203      	movs	r2, #3
 800d948:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d958:	2300      	movs	r3, #0
 800d95a:	2200      	movs	r2, #0
 800d95c:	f000 fc60 	bl	800e220 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d960:	e171      	b.n	800dc46 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800d962:	7bbb      	ldrb	r3, [r7, #14]
 800d964:	2b04      	cmp	r3, #4
 800d966:	f040 816e 	bne.w	800dc46 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	220b      	movs	r2, #11
 800d96e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2203      	movs	r2, #3
 800d974:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d984:	2300      	movs	r3, #0
 800d986:	2200      	movs	r2, #0
 800d988:	f000 fc4a 	bl	800e220 <osMessageQueuePut>
      break;
 800d98c:	e15b      	b.n	800dc46 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6899      	ldr	r1, [r3, #8]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	899a      	ldrh	r2, [r3, #12]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	795b      	ldrb	r3, [r3, #5]
 800d99a:	2001      	movs	r0, #1
 800d99c:	9000      	str	r0, [sp, #0]
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f978 	bl	800dc94 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2206      	movs	r2, #6
 800d9b4:	761a      	strb	r2, [r3, #24]
      break;
 800d9b6:	e14d      	b.n	800dc54 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	795b      	ldrb	r3, [r3, #5]
 800d9bc:	4619      	mov	r1, r3
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f003 ff40 	bl	8011844 <USBH_LL_GetURBState>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d9c8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d111      	bne.n	800d9f2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2207      	movs	r2, #7
 800d9d2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2203      	movs	r2, #3
 800d9d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f000 fc18 	bl	800e220 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d9f0:	e12b      	b.n	800dc4a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800d9f2:	7bbb      	ldrb	r3, [r7, #14]
 800d9f4:	2b05      	cmp	r3, #5
 800d9f6:	d113      	bne.n	800da20 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	220c      	movs	r2, #12
 800d9fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d9fe:	2303      	movs	r3, #3
 800da00:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2203      	movs	r2, #3
 800da06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da16:	2300      	movs	r3, #0
 800da18:	2200      	movs	r2, #0
 800da1a:	f000 fc01 	bl	800e220 <osMessageQueuePut>
      break;
 800da1e:	e114      	b.n	800dc4a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800da20:	7bbb      	ldrb	r3, [r7, #14]
 800da22:	2b02      	cmp	r3, #2
 800da24:	d111      	bne.n	800da4a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2205      	movs	r2, #5
 800da2a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2203      	movs	r2, #3
 800da30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da40:	2300      	movs	r3, #0
 800da42:	2200      	movs	r2, #0
 800da44:	f000 fbec 	bl	800e220 <osMessageQueuePut>
      break;
 800da48:	e0ff      	b.n	800dc4a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800da4a:	7bbb      	ldrb	r3, [r7, #14]
 800da4c:	2b04      	cmp	r3, #4
 800da4e:	f040 80fc 	bne.w	800dc4a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	220b      	movs	r2, #11
 800da56:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800da58:	2302      	movs	r3, #2
 800da5a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2203      	movs	r2, #3
 800da60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da70:	2300      	movs	r3, #0
 800da72:	2200      	movs	r2, #0
 800da74:	f000 fbd4 	bl	800e220 <osMessageQueuePut>
      break;
 800da78:	e0e7      	b.n	800dc4a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	791b      	ldrb	r3, [r3, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	2100      	movs	r1, #0
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f92b 	bl	800dcde <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da8e:	b29a      	uxth	r2, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2208      	movs	r2, #8
 800da98:	761a      	strb	r2, [r3, #24]

      break;
 800da9a:	e0db      	b.n	800dc54 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	791b      	ldrb	r3, [r3, #4]
 800daa0:	4619      	mov	r1, r3
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f003 fece 	bl	8011844 <USBH_LL_GetURBState>
 800daa8:	4603      	mov	r3, r0
 800daaa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800daac:	7bbb      	ldrb	r3, [r7, #14]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d113      	bne.n	800dada <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	220d      	movs	r2, #13
 800dab6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dab8:	2300      	movs	r3, #0
 800daba:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2203      	movs	r2, #3
 800dac0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dad0:	2300      	movs	r3, #0
 800dad2:	2200      	movs	r2, #0
 800dad4:	f000 fba4 	bl	800e220 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dad8:	e0b9      	b.n	800dc4e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800dada:	7bbb      	ldrb	r3, [r7, #14]
 800dadc:	2b04      	cmp	r3, #4
 800dade:	d111      	bne.n	800db04 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	220b      	movs	r2, #11
 800dae4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2203      	movs	r2, #3
 800daea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dafa:	2300      	movs	r3, #0
 800dafc:	2200      	movs	r2, #0
 800dafe:	f000 fb8f 	bl	800e220 <osMessageQueuePut>
      break;
 800db02:	e0a4      	b.n	800dc4e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800db04:	7bbb      	ldrb	r3, [r7, #14]
 800db06:	2b05      	cmp	r3, #5
 800db08:	f040 80a1 	bne.w	800dc4e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800db0c:	2303      	movs	r3, #3
 800db0e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2203      	movs	r2, #3
 800db14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db24:	2300      	movs	r3, #0
 800db26:	2200      	movs	r2, #0
 800db28:	f000 fb7a 	bl	800e220 <osMessageQueuePut>
      break;
 800db2c:	e08f      	b.n	800dc4e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	795b      	ldrb	r3, [r3, #5]
 800db32:	2201      	movs	r2, #1
 800db34:	9200      	str	r2, [sp, #0]
 800db36:	2200      	movs	r2, #0
 800db38:	2100      	movs	r1, #0
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f8aa 	bl	800dc94 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db46:	b29a      	uxth	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	220a      	movs	r2, #10
 800db50:	761a      	strb	r2, [r3, #24]
      break;
 800db52:	e07f      	b.n	800dc54 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	795b      	ldrb	r3, [r3, #5]
 800db58:	4619      	mov	r1, r3
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f003 fe72 	bl	8011844 <USBH_LL_GetURBState>
 800db60:	4603      	mov	r3, r0
 800db62:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800db64:	7bbb      	ldrb	r3, [r7, #14]
 800db66:	2b01      	cmp	r3, #1
 800db68:	d113      	bne.n	800db92 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	220d      	movs	r2, #13
 800db72:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2203      	movs	r2, #3
 800db78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db88:	2300      	movs	r3, #0
 800db8a:	2200      	movs	r2, #0
 800db8c:	f000 fb48 	bl	800e220 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800db90:	e05f      	b.n	800dc52 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800db92:	7bbb      	ldrb	r3, [r7, #14]
 800db94:	2b02      	cmp	r3, #2
 800db96:	d111      	bne.n	800dbbc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2209      	movs	r2, #9
 800db9c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2203      	movs	r2, #3
 800dba2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f000 fb33 	bl	800e220 <osMessageQueuePut>
      break;
 800dbba:	e04a      	b.n	800dc52 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800dbbc:	7bbb      	ldrb	r3, [r7, #14]
 800dbbe:	2b04      	cmp	r3, #4
 800dbc0:	d147      	bne.n	800dc52 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	220b      	movs	r2, #11
 800dbc6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2203      	movs	r2, #3
 800dbcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbdc:	2300      	movs	r3, #0
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f000 fb1e 	bl	800e220 <osMessageQueuePut>
      break;
 800dbe4:	e035      	b.n	800dc52 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	7e5b      	ldrb	r3, [r3, #25]
 800dbea:	3301      	adds	r3, #1
 800dbec:	b2da      	uxtb	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	765a      	strb	r2, [r3, #25]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	7e5b      	ldrb	r3, [r3, #25]
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d806      	bhi.n	800dc08 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800dc06:	e025      	b.n	800dc54 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc0e:	2106      	movs	r1, #6
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2200      	movs	r2, #0
 800dc18:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	795b      	ldrb	r3, [r3, #5]
 800dc1e:	4619      	mov	r1, r3
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 f90d 	bl	800de40 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	791b      	ldrb	r3, [r3, #4]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 f907 	bl	800de40 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800dc38:	2302      	movs	r3, #2
 800dc3a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc3c:	e00a      	b.n	800dc54 <USBH_HandleControl+0x484>

    default:
      break;
 800dc3e:	bf00      	nop
 800dc40:	e008      	b.n	800dc54 <USBH_HandleControl+0x484>
      break;
 800dc42:	bf00      	nop
 800dc44:	e006      	b.n	800dc54 <USBH_HandleControl+0x484>
      break;
 800dc46:	bf00      	nop
 800dc48:	e004      	b.n	800dc54 <USBH_HandleControl+0x484>
      break;
 800dc4a:	bf00      	nop
 800dc4c:	e002      	b.n	800dc54 <USBH_HandleControl+0x484>
      break;
 800dc4e:	bf00      	nop
 800dc50:	e000      	b.n	800dc54 <USBH_HandleControl+0x484>
      break;
 800dc52:	bf00      	nop
  }

  return status;
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop

0800dc60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b088      	sub	sp, #32
 800dc64:	af04      	add	r7, sp, #16
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc6e:	79f9      	ldrb	r1, [r7, #7]
 800dc70:	2300      	movs	r3, #0
 800dc72:	9303      	str	r3, [sp, #12]
 800dc74:	2308      	movs	r3, #8
 800dc76:	9302      	str	r3, [sp, #8]
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	9301      	str	r3, [sp, #4]
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	9300      	str	r3, [sp, #0]
 800dc80:	2300      	movs	r3, #0
 800dc82:	2200      	movs	r2, #0
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f003 fdac 	bl	80117e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b088      	sub	sp, #32
 800dc98:	af04      	add	r7, sp, #16
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	4611      	mov	r1, r2
 800dca0:	461a      	mov	r2, r3
 800dca2:	460b      	mov	r3, r1
 800dca4:	80fb      	strh	r3, [r7, #6]
 800dca6:	4613      	mov	r3, r2
 800dca8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d001      	beq.n	800dcb8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dcb8:	7979      	ldrb	r1, [r7, #5]
 800dcba:	7e3b      	ldrb	r3, [r7, #24]
 800dcbc:	9303      	str	r3, [sp, #12]
 800dcbe:	88fb      	ldrh	r3, [r7, #6]
 800dcc0:	9302      	str	r3, [sp, #8]
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	9301      	str	r3, [sp, #4]
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	2300      	movs	r3, #0
 800dccc:	2200      	movs	r2, #0
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f003 fd87 	bl	80117e2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}

0800dcde <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b088      	sub	sp, #32
 800dce2:	af04      	add	r7, sp, #16
 800dce4:	60f8      	str	r0, [r7, #12]
 800dce6:	60b9      	str	r1, [r7, #8]
 800dce8:	4611      	mov	r1, r2
 800dcea:	461a      	mov	r2, r3
 800dcec:	460b      	mov	r3, r1
 800dcee:	80fb      	strh	r3, [r7, #6]
 800dcf0:	4613      	mov	r3, r2
 800dcf2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dcf4:	7979      	ldrb	r1, [r7, #5]
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	9303      	str	r3, [sp, #12]
 800dcfa:	88fb      	ldrh	r3, [r7, #6]
 800dcfc:	9302      	str	r3, [sp, #8]
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	9301      	str	r3, [sp, #4]
 800dd02:	2301      	movs	r3, #1
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	2300      	movs	r3, #0
 800dd08:	2201      	movs	r2, #1
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f003 fd69 	bl	80117e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dd10:	2300      	movs	r3, #0

}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b088      	sub	sp, #32
 800dd1e:	af04      	add	r7, sp, #16
 800dd20:	60f8      	str	r0, [r7, #12]
 800dd22:	60b9      	str	r1, [r7, #8]
 800dd24:	4611      	mov	r1, r2
 800dd26:	461a      	mov	r2, r3
 800dd28:	460b      	mov	r3, r1
 800dd2a:	80fb      	strh	r3, [r7, #6]
 800dd2c:	4613      	mov	r3, r2
 800dd2e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d001      	beq.n	800dd3e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dd3e:	7979      	ldrb	r1, [r7, #5]
 800dd40:	7e3b      	ldrb	r3, [r7, #24]
 800dd42:	9303      	str	r3, [sp, #12]
 800dd44:	88fb      	ldrh	r3, [r7, #6]
 800dd46:	9302      	str	r3, [sp, #8]
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	9301      	str	r3, [sp, #4]
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	2302      	movs	r3, #2
 800dd52:	2200      	movs	r2, #0
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f003 fd44 	bl	80117e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dd5a:	2300      	movs	r3, #0
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b088      	sub	sp, #32
 800dd68:	af04      	add	r7, sp, #16
 800dd6a:	60f8      	str	r0, [r7, #12]
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	4611      	mov	r1, r2
 800dd70:	461a      	mov	r2, r3
 800dd72:	460b      	mov	r3, r1
 800dd74:	80fb      	strh	r3, [r7, #6]
 800dd76:	4613      	mov	r3, r2
 800dd78:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dd7a:	7979      	ldrb	r1, [r7, #5]
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	9303      	str	r3, [sp, #12]
 800dd80:	88fb      	ldrh	r3, [r7, #6]
 800dd82:	9302      	str	r3, [sp, #8]
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	9301      	str	r3, [sp, #4]
 800dd88:	2301      	movs	r3, #1
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	2201      	movs	r2, #1
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f003 fd26 	bl	80117e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af04      	add	r7, sp, #16
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	4608      	mov	r0, r1
 800ddaa:	4611      	mov	r1, r2
 800ddac:	461a      	mov	r2, r3
 800ddae:	4603      	mov	r3, r0
 800ddb0:	70fb      	strb	r3, [r7, #3]
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	70bb      	strb	r3, [r7, #2]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ddba:	7878      	ldrb	r0, [r7, #1]
 800ddbc:	78ba      	ldrb	r2, [r7, #2]
 800ddbe:	78f9      	ldrb	r1, [r7, #3]
 800ddc0:	8b3b      	ldrh	r3, [r7, #24]
 800ddc2:	9302      	str	r3, [sp, #8]
 800ddc4:	7d3b      	ldrb	r3, [r7, #20]
 800ddc6:	9301      	str	r3, [sp, #4]
 800ddc8:	7c3b      	ldrb	r3, [r7, #16]
 800ddca:	9300      	str	r3, [sp, #0]
 800ddcc:	4603      	mov	r3, r0
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f003 fcb9 	bl	8011746 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b082      	sub	sp, #8
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	460b      	mov	r3, r1
 800dde8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ddea:	78fb      	ldrb	r3, [r7, #3]
 800ddec:	4619      	mov	r1, r3
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f003 fcd8 	bl	80117a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	460b      	mov	r3, r1
 800de08:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 f836 	bl	800de7c <USBH_GetFreePipe>
 800de10:	4603      	mov	r3, r0
 800de12:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800de14:	89fb      	ldrh	r3, [r7, #14]
 800de16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d00a      	beq.n	800de34 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800de1e:	78fa      	ldrb	r2, [r7, #3]
 800de20:	89fb      	ldrh	r3, [r7, #14]
 800de22:	f003 030f 	and.w	r3, r3, #15
 800de26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de2a:	6879      	ldr	r1, [r7, #4]
 800de2c:	33e0      	adds	r3, #224	; 0xe0
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	440b      	add	r3, r1
 800de32:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800de34:	89fb      	ldrh	r3, [r7, #14]
 800de36:	b2db      	uxtb	r3, r3
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3710      	adds	r7, #16
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	460b      	mov	r3, r1
 800de4a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800de4c:	78fb      	ldrb	r3, [r7, #3]
 800de4e:	2b0a      	cmp	r3, #10
 800de50:	d80d      	bhi.n	800de6e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800de52:	78fb      	ldrb	r3, [r7, #3]
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	33e0      	adds	r3, #224	; 0xe0
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	4413      	add	r3, r2
 800de5c:	685a      	ldr	r2, [r3, #4]
 800de5e:	78fb      	ldrb	r3, [r7, #3]
 800de60:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800de64:	6879      	ldr	r1, [r7, #4]
 800de66:	33e0      	adds	r3, #224	; 0xe0
 800de68:	009b      	lsls	r3, r3, #2
 800de6a:	440b      	add	r3, r1
 800de6c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800de6e:	2300      	movs	r3, #0
}
 800de70:	4618      	mov	r0, r3
 800de72:	370c      	adds	r7, #12
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800de84:	2300      	movs	r3, #0
 800de86:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800de88:	2300      	movs	r3, #0
 800de8a:	73fb      	strb	r3, [r7, #15]
 800de8c:	e00f      	b.n	800deae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800de8e:	7bfb      	ldrb	r3, [r7, #15]
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	33e0      	adds	r3, #224	; 0xe0
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	4413      	add	r3, r2
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d102      	bne.n	800dea8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800dea2:	7bfb      	ldrb	r3, [r7, #15]
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	e007      	b.n	800deb8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
 800deaa:	3301      	adds	r3, #1
 800deac:	73fb      	strb	r3, [r7, #15]
 800deae:	7bfb      	ldrb	r3, [r7, #15]
 800deb0:	2b0a      	cmp	r3, #10
 800deb2:	d9ec      	bls.n	800de8e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800deb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3714      	adds	r7, #20
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <__NVIC_SetPriority>:
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	4603      	mov	r3, r0
 800decc:	6039      	str	r1, [r7, #0]
 800dece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ded0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	db0a      	blt.n	800deee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	490c      	ldr	r1, [pc, #48]	; (800df10 <__NVIC_SetPriority+0x4c>)
 800dede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dee2:	0112      	lsls	r2, r2, #4
 800dee4:	b2d2      	uxtb	r2, r2
 800dee6:	440b      	add	r3, r1
 800dee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800deec:	e00a      	b.n	800df04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	b2da      	uxtb	r2, r3
 800def2:	4908      	ldr	r1, [pc, #32]	; (800df14 <__NVIC_SetPriority+0x50>)
 800def4:	79fb      	ldrb	r3, [r7, #7]
 800def6:	f003 030f 	and.w	r3, r3, #15
 800defa:	3b04      	subs	r3, #4
 800defc:	0112      	lsls	r2, r2, #4
 800defe:	b2d2      	uxtb	r2, r2
 800df00:	440b      	add	r3, r1
 800df02:	761a      	strb	r2, [r3, #24]
}
 800df04:	bf00      	nop
 800df06:	370c      	adds	r7, #12
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr
 800df10:	e000e100 	.word	0xe000e100
 800df14:	e000ed00 	.word	0xe000ed00

0800df18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800df18:	b580      	push	{r7, lr}
 800df1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800df1c:	4b05      	ldr	r3, [pc, #20]	; (800df34 <SysTick_Handler+0x1c>)
 800df1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800df20:	f001 ff56 	bl	800fdd0 <xTaskGetSchedulerState>
 800df24:	4603      	mov	r3, r0
 800df26:	2b01      	cmp	r3, #1
 800df28:	d001      	beq.n	800df2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800df2a:	f002 ffbd 	bl	8010ea8 <xPortSysTickHandler>
  }
}
 800df2e:	bf00      	nop
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	e000e010 	.word	0xe000e010

0800df38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800df38:	b580      	push	{r7, lr}
 800df3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800df3c:	2100      	movs	r1, #0
 800df3e:	f06f 0004 	mvn.w	r0, #4
 800df42:	f7ff ffbf 	bl	800dec4 <__NVIC_SetPriority>
#endif
}
 800df46:	bf00      	nop
 800df48:	bd80      	pop	{r7, pc}
	...

0800df4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df52:	f3ef 8305 	mrs	r3, IPSR
 800df56:	603b      	str	r3, [r7, #0]
  return(result);
 800df58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d003      	beq.n	800df66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800df5e:	f06f 0305 	mvn.w	r3, #5
 800df62:	607b      	str	r3, [r7, #4]
 800df64:	e00c      	b.n	800df80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800df66:	4b0a      	ldr	r3, [pc, #40]	; (800df90 <osKernelInitialize+0x44>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d105      	bne.n	800df7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800df6e:	4b08      	ldr	r3, [pc, #32]	; (800df90 <osKernelInitialize+0x44>)
 800df70:	2201      	movs	r2, #1
 800df72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800df74:	2300      	movs	r3, #0
 800df76:	607b      	str	r3, [r7, #4]
 800df78:	e002      	b.n	800df80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800df7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800df80:	687b      	ldr	r3, [r7, #4]
}
 800df82:	4618      	mov	r0, r3
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	20000144 	.word	0x20000144

0800df94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df9a:	f3ef 8305 	mrs	r3, IPSR
 800df9e:	603b      	str	r3, [r7, #0]
  return(result);
 800dfa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d003      	beq.n	800dfae <osKernelStart+0x1a>
    stat = osErrorISR;
 800dfa6:	f06f 0305 	mvn.w	r3, #5
 800dfaa:	607b      	str	r3, [r7, #4]
 800dfac:	e010      	b.n	800dfd0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dfae:	4b0b      	ldr	r3, [pc, #44]	; (800dfdc <osKernelStart+0x48>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d109      	bne.n	800dfca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dfb6:	f7ff ffbf 	bl	800df38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dfba:	4b08      	ldr	r3, [pc, #32]	; (800dfdc <osKernelStart+0x48>)
 800dfbc:	2202      	movs	r2, #2
 800dfbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dfc0:	f001 faaa 	bl	800f518 <vTaskStartScheduler>
      stat = osOK;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	607b      	str	r3, [r7, #4]
 800dfc8:	e002      	b.n	800dfd0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dfca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dfd0:	687b      	ldr	r3, [r7, #4]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	20000144 	.word	0x20000144

0800dfe0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b08e      	sub	sp, #56	; 0x38
 800dfe4:	af04      	add	r7, sp, #16
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dfec:	2300      	movs	r3, #0
 800dfee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dff0:	f3ef 8305 	mrs	r3, IPSR
 800dff4:	617b      	str	r3, [r7, #20]
  return(result);
 800dff6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d17e      	bne.n	800e0fa <osThreadNew+0x11a>
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d07b      	beq.n	800e0fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e002:	2380      	movs	r3, #128	; 0x80
 800e004:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e006:	2318      	movs	r3, #24
 800e008:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e00a:	2300      	movs	r3, #0
 800e00c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e00e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e012:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d045      	beq.n	800e0a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d002      	beq.n	800e028 <osThreadNew+0x48>
        name = attr->name;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	699b      	ldr	r3, [r3, #24]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	699b      	ldr	r3, [r3, #24]
 800e034:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d008      	beq.n	800e04e <osThreadNew+0x6e>
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	2b38      	cmp	r3, #56	; 0x38
 800e040:	d805      	bhi.n	800e04e <osThreadNew+0x6e>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	f003 0301 	and.w	r3, r3, #1
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d001      	beq.n	800e052 <osThreadNew+0x72>
        return (NULL);
 800e04e:	2300      	movs	r3, #0
 800e050:	e054      	b.n	800e0fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	695b      	ldr	r3, [r3, #20]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d003      	beq.n	800e062 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	695b      	ldr	r3, [r3, #20]
 800e05e:	089b      	lsrs	r3, r3, #2
 800e060:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00e      	beq.n	800e088 <osThreadNew+0xa8>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	2bbb      	cmp	r3, #187	; 0xbb
 800e070:	d90a      	bls.n	800e088 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e076:	2b00      	cmp	r3, #0
 800e078:	d006      	beq.n	800e088 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	695b      	ldr	r3, [r3, #20]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d002      	beq.n	800e088 <osThreadNew+0xa8>
        mem = 1;
 800e082:	2301      	movs	r3, #1
 800e084:	61bb      	str	r3, [r7, #24]
 800e086:	e010      	b.n	800e0aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d10c      	bne.n	800e0aa <osThreadNew+0xca>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	68db      	ldr	r3, [r3, #12]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d108      	bne.n	800e0aa <osThreadNew+0xca>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	691b      	ldr	r3, [r3, #16]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d104      	bne.n	800e0aa <osThreadNew+0xca>
          mem = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	61bb      	str	r3, [r7, #24]
 800e0a4:	e001      	b.n	800e0aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d110      	bne.n	800e0d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e0b8:	9202      	str	r2, [sp, #8]
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	6a3a      	ldr	r2, [r7, #32]
 800e0c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f001 f83a 	bl	800f140 <xTaskCreateStatic>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	613b      	str	r3, [r7, #16]
 800e0d0:	e013      	b.n	800e0fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e0d2:	69bb      	ldr	r3, [r7, #24]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d110      	bne.n	800e0fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e0d8:	6a3b      	ldr	r3, [r7, #32]
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	f107 0310 	add.w	r3, r7, #16
 800e0e0:	9301      	str	r3, [sp, #4]
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f001 f885 	bl	800f1fa <xTaskCreate>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d001      	beq.n	800e0fa <osThreadNew+0x11a>
            hTask = NULL;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e0fa:	693b      	ldr	r3, [r7, #16]
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3728      	adds	r7, #40	; 0x28
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e10c:	f3ef 8305 	mrs	r3, IPSR
 800e110:	60bb      	str	r3, [r7, #8]
  return(result);
 800e112:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e114:	2b00      	cmp	r3, #0
 800e116:	d003      	beq.n	800e120 <osDelay+0x1c>
    stat = osErrorISR;
 800e118:	f06f 0305 	mvn.w	r3, #5
 800e11c:	60fb      	str	r3, [r7, #12]
 800e11e:	e007      	b.n	800e130 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e120:	2300      	movs	r3, #0
 800e122:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d002      	beq.n	800e130 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f001 f9c0 	bl	800f4b0 <vTaskDelay>
    }
  }

  return (stat);
 800e130:	68fb      	ldr	r3, [r7, #12]
}
 800e132:	4618      	mov	r0, r3
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b08a      	sub	sp, #40	; 0x28
 800e13e:	af02      	add	r7, sp, #8
 800e140:	60f8      	str	r0, [r7, #12]
 800e142:	60b9      	str	r1, [r7, #8]
 800e144:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e146:	2300      	movs	r3, #0
 800e148:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e14a:	f3ef 8305 	mrs	r3, IPSR
 800e14e:	613b      	str	r3, [r7, #16]
  return(result);
 800e150:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e152:	2b00      	cmp	r3, #0
 800e154:	d15f      	bne.n	800e216 <osMessageQueueNew+0xdc>
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d05c      	beq.n	800e216 <osMessageQueueNew+0xdc>
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d059      	beq.n	800e216 <osMessageQueueNew+0xdc>
    mem = -1;
 800e162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e166:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d029      	beq.n	800e1c2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d012      	beq.n	800e19c <osMessageQueueNew+0x62>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	2b4f      	cmp	r3, #79	; 0x4f
 800e17c:	d90e      	bls.n	800e19c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00a      	beq.n	800e19c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	695a      	ldr	r2, [r3, #20]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	68b9      	ldr	r1, [r7, #8]
 800e18e:	fb01 f303 	mul.w	r3, r1, r3
 800e192:	429a      	cmp	r2, r3
 800e194:	d302      	bcc.n	800e19c <osMessageQueueNew+0x62>
        mem = 1;
 800e196:	2301      	movs	r3, #1
 800e198:	61bb      	str	r3, [r7, #24]
 800e19a:	e014      	b.n	800e1c6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d110      	bne.n	800e1c6 <osMessageQueueNew+0x8c>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10c      	bne.n	800e1c6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d108      	bne.n	800e1c6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	695b      	ldr	r3, [r3, #20]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d104      	bne.n	800e1c6 <osMessageQueueNew+0x8c>
          mem = 0;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	61bb      	str	r3, [r7, #24]
 800e1c0:	e001      	b.n	800e1c6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d10b      	bne.n	800e1e4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	691a      	ldr	r2, [r3, #16]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	689b      	ldr	r3, [r3, #8]
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	9100      	str	r1, [sp, #0]
 800e1d8:	68b9      	ldr	r1, [r7, #8]
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f000 fa2e 	bl	800e63c <xQueueGenericCreateStatic>
 800e1e0:	61f8      	str	r0, [r7, #28]
 800e1e2:	e008      	b.n	800e1f6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d105      	bne.n	800e1f6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	68b9      	ldr	r1, [r7, #8]
 800e1ee:	68f8      	ldr	r0, [r7, #12]
 800e1f0:	f000 fa9c 	bl	800e72c <xQueueGenericCreate>
 800e1f4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e1f6:	69fb      	ldr	r3, [r7, #28]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d00c      	beq.n	800e216 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d003      	beq.n	800e20a <osMessageQueueNew+0xd0>
        name = attr->name;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	617b      	str	r3, [r7, #20]
 800e208:	e001      	b.n	800e20e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e20a:	2300      	movs	r3, #0
 800e20c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e20e:	6979      	ldr	r1, [r7, #20]
 800e210:	69f8      	ldr	r0, [r7, #28]
 800e212:	f000 ff37 	bl	800f084 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e216:	69fb      	ldr	r3, [r7, #28]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3720      	adds	r7, #32
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e220:	b580      	push	{r7, lr}
 800e222:	b088      	sub	sp, #32
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	603b      	str	r3, [r7, #0]
 800e22c:	4613      	mov	r3, r2
 800e22e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e234:	2300      	movs	r3, #0
 800e236:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e238:	f3ef 8305 	mrs	r3, IPSR
 800e23c:	617b      	str	r3, [r7, #20]
  return(result);
 800e23e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e240:	2b00      	cmp	r3, #0
 800e242:	d028      	beq.n	800e296 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d005      	beq.n	800e256 <osMessageQueuePut+0x36>
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d002      	beq.n	800e256 <osMessageQueuePut+0x36>
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d003      	beq.n	800e25e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e256:	f06f 0303 	mvn.w	r3, #3
 800e25a:	61fb      	str	r3, [r7, #28]
 800e25c:	e038      	b.n	800e2d0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e25e:	2300      	movs	r3, #0
 800e260:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e262:	f107 0210 	add.w	r2, r7, #16
 800e266:	2300      	movs	r3, #0
 800e268:	68b9      	ldr	r1, [r7, #8]
 800e26a:	69b8      	ldr	r0, [r7, #24]
 800e26c:	f000 fbba 	bl	800e9e4 <xQueueGenericSendFromISR>
 800e270:	4603      	mov	r3, r0
 800e272:	2b01      	cmp	r3, #1
 800e274:	d003      	beq.n	800e27e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e276:	f06f 0302 	mvn.w	r3, #2
 800e27a:	61fb      	str	r3, [r7, #28]
 800e27c:	e028      	b.n	800e2d0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d025      	beq.n	800e2d0 <osMessageQueuePut+0xb0>
 800e284:	4b15      	ldr	r3, [pc, #84]	; (800e2dc <osMessageQueuePut+0xbc>)
 800e286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e28a:	601a      	str	r2, [r3, #0]
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	f3bf 8f6f 	isb	sy
 800e294:	e01c      	b.n	800e2d0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e296:	69bb      	ldr	r3, [r7, #24]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d002      	beq.n	800e2a2 <osMessageQueuePut+0x82>
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d103      	bne.n	800e2aa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e2a2:	f06f 0303 	mvn.w	r3, #3
 800e2a6:	61fb      	str	r3, [r7, #28]
 800e2a8:	e012      	b.n	800e2d0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	68b9      	ldr	r1, [r7, #8]
 800e2b0:	69b8      	ldr	r0, [r7, #24]
 800e2b2:	f000 fa99 	bl	800e7e8 <xQueueGenericSend>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d009      	beq.n	800e2d0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d003      	beq.n	800e2ca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e2c2:	f06f 0301 	mvn.w	r3, #1
 800e2c6:	61fb      	str	r3, [r7, #28]
 800e2c8:	e002      	b.n	800e2d0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e2ca:	f06f 0302 	mvn.w	r3, #2
 800e2ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e2d0:	69fb      	ldr	r3, [r7, #28]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3720      	adds	r7, #32
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	e000ed04 	.word	0xe000ed04

0800e2e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b088      	sub	sp, #32
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
 800e2ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2f6:	f3ef 8305 	mrs	r3, IPSR
 800e2fa:	617b      	str	r3, [r7, #20]
  return(result);
 800e2fc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d028      	beq.n	800e354 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d005      	beq.n	800e314 <osMessageQueueGet+0x34>
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d002      	beq.n	800e314 <osMessageQueueGet+0x34>
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d003      	beq.n	800e31c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e314:	f06f 0303 	mvn.w	r3, #3
 800e318:	61fb      	str	r3, [r7, #28]
 800e31a:	e037      	b.n	800e38c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e31c:	2300      	movs	r3, #0
 800e31e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e320:	f107 0310 	add.w	r3, r7, #16
 800e324:	461a      	mov	r2, r3
 800e326:	68b9      	ldr	r1, [r7, #8]
 800e328:	69b8      	ldr	r0, [r7, #24]
 800e32a:	f000 fcd7 	bl	800ecdc <xQueueReceiveFromISR>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b01      	cmp	r3, #1
 800e332:	d003      	beq.n	800e33c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e334:	f06f 0302 	mvn.w	r3, #2
 800e338:	61fb      	str	r3, [r7, #28]
 800e33a:	e027      	b.n	800e38c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d024      	beq.n	800e38c <osMessageQueueGet+0xac>
 800e342:	4b15      	ldr	r3, [pc, #84]	; (800e398 <osMessageQueueGet+0xb8>)
 800e344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	f3bf 8f6f 	isb	sy
 800e352:	e01b      	b.n	800e38c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e354:	69bb      	ldr	r3, [r7, #24]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d002      	beq.n	800e360 <osMessageQueueGet+0x80>
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d103      	bne.n	800e368 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e360:	f06f 0303 	mvn.w	r3, #3
 800e364:	61fb      	str	r3, [r7, #28]
 800e366:	e011      	b.n	800e38c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e368:	683a      	ldr	r2, [r7, #0]
 800e36a:	68b9      	ldr	r1, [r7, #8]
 800e36c:	69b8      	ldr	r0, [r7, #24]
 800e36e:	f000 fbd5 	bl	800eb1c <xQueueReceive>
 800e372:	4603      	mov	r3, r0
 800e374:	2b01      	cmp	r3, #1
 800e376:	d009      	beq.n	800e38c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d003      	beq.n	800e386 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e37e:	f06f 0301 	mvn.w	r3, #1
 800e382:	61fb      	str	r3, [r7, #28]
 800e384:	e002      	b.n	800e38c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e386:	f06f 0302 	mvn.w	r3, #2
 800e38a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e38c:	69fb      	ldr	r3, [r7, #28]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3720      	adds	r7, #32
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	e000ed04 	.word	0xe000ed04

0800e39c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	4a07      	ldr	r2, [pc, #28]	; (800e3c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800e3ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	4a06      	ldr	r2, [pc, #24]	; (800e3cc <vApplicationGetIdleTaskMemory+0x30>)
 800e3b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2280      	movs	r2, #128	; 0x80
 800e3b8:	601a      	str	r2, [r3, #0]
}
 800e3ba:	bf00      	nop
 800e3bc:	3714      	adds	r7, #20
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop
 800e3c8:	20000148 	.word	0x20000148
 800e3cc:	20000204 	.word	0x20000204

0800e3d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e3d0:	b480      	push	{r7}
 800e3d2:	b085      	sub	sp, #20
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	4a07      	ldr	r2, [pc, #28]	; (800e3fc <vApplicationGetTimerTaskMemory+0x2c>)
 800e3e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	4a06      	ldr	r2, [pc, #24]	; (800e400 <vApplicationGetTimerTaskMemory+0x30>)
 800e3e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3ee:	601a      	str	r2, [r3, #0]
}
 800e3f0:	bf00      	nop
 800e3f2:	3714      	adds	r7, #20
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	20000404 	.word	0x20000404
 800e400:	200004c0 	.word	0x200004c0

0800e404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f103 0208 	add.w	r2, r3, #8
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e41c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f103 0208 	add.w	r2, r3, #8
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f103 0208 	add.w	r2, r3, #8
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2200      	movs	r2, #0
 800e436:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e438:	bf00      	nop
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2200      	movs	r2, #0
 800e450:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e452:	bf00      	nop
 800e454:	370c      	adds	r7, #12
 800e456:	46bd      	mov	sp, r7
 800e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45c:	4770      	bx	lr

0800e45e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e45e:	b480      	push	{r7}
 800e460:	b085      	sub	sp, #20
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
 800e466:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	68fa      	ldr	r2, [r7, #12]
 800e472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	689a      	ldr	r2, [r3, #8]
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	689b      	ldr	r3, [r3, #8]
 800e480:	683a      	ldr	r2, [r7, #0]
 800e482:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	683a      	ldr	r2, [r7, #0]
 800e488:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	1c5a      	adds	r2, r3, #1
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	601a      	str	r2, [r3, #0]
}
 800e49a:	bf00      	nop
 800e49c:	3714      	adds	r7, #20
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr

0800e4a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e4a6:	b480      	push	{r7}
 800e4a8:	b085      	sub	sp, #20
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
 800e4ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4bc:	d103      	bne.n	800e4c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	691b      	ldr	r3, [r3, #16]
 800e4c2:	60fb      	str	r3, [r7, #12]
 800e4c4:	e00c      	b.n	800e4e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	3308      	adds	r3, #8
 800e4ca:	60fb      	str	r3, [r7, #12]
 800e4cc:	e002      	b.n	800e4d4 <vListInsert+0x2e>
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	60fb      	str	r3, [r7, #12]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d2f6      	bcs.n	800e4ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	685a      	ldr	r2, [r3, #4]
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	683a      	ldr	r2, [r7, #0]
 800e4ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	683a      	ldr	r2, [r7, #0]
 800e4fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	1c5a      	adds	r2, r3, #1
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	601a      	str	r2, [r3, #0]
}
 800e50c:	bf00      	nop
 800e50e:	3714      	adds	r7, #20
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e518:	b480      	push	{r7}
 800e51a:	b085      	sub	sp, #20
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	6892      	ldr	r2, [r2, #8]
 800e52e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	6852      	ldr	r2, [r2, #4]
 800e538:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	429a      	cmp	r2, r3
 800e542:	d103      	bne.n	800e54c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	689a      	ldr	r2, [r3, #8]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	1e5a      	subs	r2, r3, #1
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d10a      	bne.n	800e596 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e584:	f383 8811 	msr	BASEPRI, r3
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e592:	bf00      	nop
 800e594:	e7fe      	b.n	800e594 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e596:	f002 fbf5 	bl	8010d84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5a2:	68f9      	ldr	r1, [r7, #12]
 800e5a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e5a6:	fb01 f303 	mul.w	r3, r1, r3
 800e5aa:	441a      	add	r2, r3
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	68f9      	ldr	r1, [r7, #12]
 800e5ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e5cc:	fb01 f303 	mul.w	r3, r1, r3
 800e5d0:	441a      	add	r2, r3
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	22ff      	movs	r2, #255	; 0xff
 800e5da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	22ff      	movs	r2, #255	; 0xff
 800e5e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d114      	bne.n	800e616 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	691b      	ldr	r3, [r3, #16]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d01a      	beq.n	800e62a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	3310      	adds	r3, #16
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f001 fa27 	bl	800fa4c <xTaskRemoveFromEventList>
 800e5fe:	4603      	mov	r3, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d012      	beq.n	800e62a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e604:	4b0c      	ldr	r3, [pc, #48]	; (800e638 <xQueueGenericReset+0xcc>)
 800e606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e60a:	601a      	str	r2, [r3, #0]
 800e60c:	f3bf 8f4f 	dsb	sy
 800e610:	f3bf 8f6f 	isb	sy
 800e614:	e009      	b.n	800e62a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	3310      	adds	r3, #16
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7ff fef2 	bl	800e404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	3324      	adds	r3, #36	; 0x24
 800e624:	4618      	mov	r0, r3
 800e626:	f7ff feed 	bl	800e404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e62a:	f002 fbdb 	bl	8010de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e62e:	2301      	movs	r3, #1
}
 800e630:	4618      	mov	r0, r3
 800e632:	3710      	adds	r7, #16
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	e000ed04 	.word	0xe000ed04

0800e63c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b08e      	sub	sp, #56	; 0x38
 800e640:	af02      	add	r7, sp, #8
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
 800e648:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d10a      	bne.n	800e666 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e654:	f383 8811 	msr	BASEPRI, r3
 800e658:	f3bf 8f6f 	isb	sy
 800e65c:	f3bf 8f4f 	dsb	sy
 800e660:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e662:	bf00      	nop
 800e664:	e7fe      	b.n	800e664 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d10a      	bne.n	800e682 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e670:	f383 8811 	msr	BASEPRI, r3
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e67e:	bf00      	nop
 800e680:	e7fe      	b.n	800e680 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d002      	beq.n	800e68e <xQueueGenericCreateStatic+0x52>
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d001      	beq.n	800e692 <xQueueGenericCreateStatic+0x56>
 800e68e:	2301      	movs	r3, #1
 800e690:	e000      	b.n	800e694 <xQueueGenericCreateStatic+0x58>
 800e692:	2300      	movs	r3, #0
 800e694:	2b00      	cmp	r3, #0
 800e696:	d10a      	bne.n	800e6ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69c:	f383 8811 	msr	BASEPRI, r3
 800e6a0:	f3bf 8f6f 	isb	sy
 800e6a4:	f3bf 8f4f 	dsb	sy
 800e6a8:	623b      	str	r3, [r7, #32]
}
 800e6aa:	bf00      	nop
 800e6ac:	e7fe      	b.n	800e6ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d102      	bne.n	800e6ba <xQueueGenericCreateStatic+0x7e>
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d101      	bne.n	800e6be <xQueueGenericCreateStatic+0x82>
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	e000      	b.n	800e6c0 <xQueueGenericCreateStatic+0x84>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d10a      	bne.n	800e6da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c8:	f383 8811 	msr	BASEPRI, r3
 800e6cc:	f3bf 8f6f 	isb	sy
 800e6d0:	f3bf 8f4f 	dsb	sy
 800e6d4:	61fb      	str	r3, [r7, #28]
}
 800e6d6:	bf00      	nop
 800e6d8:	e7fe      	b.n	800e6d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e6da:	2350      	movs	r3, #80	; 0x50
 800e6dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	2b50      	cmp	r3, #80	; 0x50
 800e6e2:	d00a      	beq.n	800e6fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	61bb      	str	r3, [r7, #24]
}
 800e6f6:	bf00      	nop
 800e6f8:	e7fe      	b.n	800e6f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e6fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00d      	beq.n	800e722 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e708:	2201      	movs	r2, #1
 800e70a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e70e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e714:	9300      	str	r3, [sp, #0]
 800e716:	4613      	mov	r3, r2
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	68b9      	ldr	r1, [r7, #8]
 800e71c:	68f8      	ldr	r0, [r7, #12]
 800e71e:	f000 f83f 	bl	800e7a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e724:	4618      	mov	r0, r3
 800e726:	3730      	adds	r7, #48	; 0x30
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b08a      	sub	sp, #40	; 0x28
 800e730:	af02      	add	r7, sp, #8
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	4613      	mov	r3, r2
 800e738:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d10a      	bne.n	800e756 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	613b      	str	r3, [r7, #16]
}
 800e752:	bf00      	nop
 800e754:	e7fe      	b.n	800e754 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	68ba      	ldr	r2, [r7, #8]
 800e75a:	fb02 f303 	mul.w	r3, r2, r3
 800e75e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	3350      	adds	r3, #80	; 0x50
 800e764:	4618      	mov	r0, r3
 800e766:	f002 fc2f 	bl	8010fc8 <pvPortMalloc>
 800e76a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d011      	beq.n	800e796 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	3350      	adds	r3, #80	; 0x50
 800e77a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	2200      	movs	r2, #0
 800e780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e784:	79fa      	ldrb	r2, [r7, #7]
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	4613      	mov	r3, r2
 800e78c:	697a      	ldr	r2, [r7, #20]
 800e78e:	68b9      	ldr	r1, [r7, #8]
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f000 f805 	bl	800e7a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e796:	69bb      	ldr	r3, [r7, #24]
	}
 800e798:	4618      	mov	r0, r3
 800e79a:	3720      	adds	r7, #32
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	60b9      	str	r1, [r7, #8]
 800e7aa:	607a      	str	r2, [r7, #4]
 800e7ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d103      	bne.n	800e7bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e7b4:	69bb      	ldr	r3, [r7, #24]
 800e7b6:	69ba      	ldr	r2, [r7, #24]
 800e7b8:	601a      	str	r2, [r3, #0]
 800e7ba:	e002      	b.n	800e7c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	68fa      	ldr	r2, [r7, #12]
 800e7c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	68ba      	ldr	r2, [r7, #8]
 800e7cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e7ce:	2101      	movs	r1, #1
 800e7d0:	69b8      	ldr	r0, [r7, #24]
 800e7d2:	f7ff fecb 	bl	800e56c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	78fa      	ldrb	r2, [r7, #3]
 800e7da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e7de:	bf00      	nop
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
	...

0800e7e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b08e      	sub	sp, #56	; 0x38
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	607a      	str	r2, [r7, #4]
 800e7f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10a      	bne.n	800e81a <xQueueGenericSend+0x32>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e816:	bf00      	nop
 800e818:	e7fe      	b.n	800e818 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d103      	bne.n	800e828 <xQueueGenericSend+0x40>
 800e820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e824:	2b00      	cmp	r3, #0
 800e826:	d101      	bne.n	800e82c <xQueueGenericSend+0x44>
 800e828:	2301      	movs	r3, #1
 800e82a:	e000      	b.n	800e82e <xQueueGenericSend+0x46>
 800e82c:	2300      	movs	r3, #0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d10a      	bne.n	800e848 <xQueueGenericSend+0x60>
	__asm volatile
 800e832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e836:	f383 8811 	msr	BASEPRI, r3
 800e83a:	f3bf 8f6f 	isb	sy
 800e83e:	f3bf 8f4f 	dsb	sy
 800e842:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e844:	bf00      	nop
 800e846:	e7fe      	b.n	800e846 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	2b02      	cmp	r3, #2
 800e84c:	d103      	bne.n	800e856 <xQueueGenericSend+0x6e>
 800e84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e852:	2b01      	cmp	r3, #1
 800e854:	d101      	bne.n	800e85a <xQueueGenericSend+0x72>
 800e856:	2301      	movs	r3, #1
 800e858:	e000      	b.n	800e85c <xQueueGenericSend+0x74>
 800e85a:	2300      	movs	r3, #0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d10a      	bne.n	800e876 <xQueueGenericSend+0x8e>
	__asm volatile
 800e860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e864:	f383 8811 	msr	BASEPRI, r3
 800e868:	f3bf 8f6f 	isb	sy
 800e86c:	f3bf 8f4f 	dsb	sy
 800e870:	623b      	str	r3, [r7, #32]
}
 800e872:	bf00      	nop
 800e874:	e7fe      	b.n	800e874 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e876:	f001 faab 	bl	800fdd0 <xTaskGetSchedulerState>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d102      	bne.n	800e886 <xQueueGenericSend+0x9e>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d101      	bne.n	800e88a <xQueueGenericSend+0xa2>
 800e886:	2301      	movs	r3, #1
 800e888:	e000      	b.n	800e88c <xQueueGenericSend+0xa4>
 800e88a:	2300      	movs	r3, #0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d10a      	bne.n	800e8a6 <xQueueGenericSend+0xbe>
	__asm volatile
 800e890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e894:	f383 8811 	msr	BASEPRI, r3
 800e898:	f3bf 8f6f 	isb	sy
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	61fb      	str	r3, [r7, #28]
}
 800e8a2:	bf00      	nop
 800e8a4:	e7fe      	b.n	800e8a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e8a6:	f002 fa6d 	bl	8010d84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d302      	bcc.n	800e8bc <xQueueGenericSend+0xd4>
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	2b02      	cmp	r3, #2
 800e8ba:	d129      	bne.n	800e910 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8bc:	683a      	ldr	r2, [r7, #0]
 800e8be:	68b9      	ldr	r1, [r7, #8]
 800e8c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8c2:	f000 faa9 	bl	800ee18 <prvCopyDataToQueue>
 800e8c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d010      	beq.n	800e8f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d2:	3324      	adds	r3, #36	; 0x24
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f001 f8b9 	bl	800fa4c <xTaskRemoveFromEventList>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d013      	beq.n	800e908 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e8e0:	4b3f      	ldr	r3, [pc, #252]	; (800e9e0 <xQueueGenericSend+0x1f8>)
 800e8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8e6:	601a      	str	r2, [r3, #0]
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	e00a      	b.n	800e908 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d007      	beq.n	800e908 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e8f8:	4b39      	ldr	r3, [pc, #228]	; (800e9e0 <xQueueGenericSend+0x1f8>)
 800e8fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8fe:	601a      	str	r2, [r3, #0]
 800e900:	f3bf 8f4f 	dsb	sy
 800e904:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e908:	f002 fa6c 	bl	8010de4 <vPortExitCritical>
				return pdPASS;
 800e90c:	2301      	movs	r3, #1
 800e90e:	e063      	b.n	800e9d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d103      	bne.n	800e91e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e916:	f002 fa65 	bl	8010de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e91a:	2300      	movs	r3, #0
 800e91c:	e05c      	b.n	800e9d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e920:	2b00      	cmp	r3, #0
 800e922:	d106      	bne.n	800e932 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e924:	f107 0314 	add.w	r3, r7, #20
 800e928:	4618      	mov	r0, r3
 800e92a:	f001 f8f3 	bl	800fb14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e92e:	2301      	movs	r3, #1
 800e930:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e932:	f002 fa57 	bl	8010de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e936:	f000 fe5f 	bl	800f5f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e93a:	f002 fa23 	bl	8010d84 <vPortEnterCritical>
 800e93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e944:	b25b      	sxtb	r3, r3
 800e946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e94a:	d103      	bne.n	800e954 <xQueueGenericSend+0x16c>
 800e94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94e:	2200      	movs	r2, #0
 800e950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e95a:	b25b      	sxtb	r3, r3
 800e95c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e960:	d103      	bne.n	800e96a <xQueueGenericSend+0x182>
 800e962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e964:	2200      	movs	r2, #0
 800e966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e96a:	f002 fa3b 	bl	8010de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e96e:	1d3a      	adds	r2, r7, #4
 800e970:	f107 0314 	add.w	r3, r7, #20
 800e974:	4611      	mov	r1, r2
 800e976:	4618      	mov	r0, r3
 800e978:	f001 f8e2 	bl	800fb40 <xTaskCheckForTimeOut>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d124      	bne.n	800e9cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e982:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e984:	f000 fb40 	bl	800f008 <prvIsQueueFull>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d018      	beq.n	800e9c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e990:	3310      	adds	r3, #16
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	4611      	mov	r1, r2
 800e996:	4618      	mov	r0, r3
 800e998:	f001 f808 	bl	800f9ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e99c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e99e:	f000 facb 	bl	800ef38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e9a2:	f000 fe37 	bl	800f614 <xTaskResumeAll>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f47f af7c 	bne.w	800e8a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e9ae:	4b0c      	ldr	r3, [pc, #48]	; (800e9e0 <xQueueGenericSend+0x1f8>)
 800e9b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9b4:	601a      	str	r2, [r3, #0]
 800e9b6:	f3bf 8f4f 	dsb	sy
 800e9ba:	f3bf 8f6f 	isb	sy
 800e9be:	e772      	b.n	800e8a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e9c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9c2:	f000 fab9 	bl	800ef38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9c6:	f000 fe25 	bl	800f614 <xTaskResumeAll>
 800e9ca:	e76c      	b.n	800e8a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e9cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9ce:	f000 fab3 	bl	800ef38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9d2:	f000 fe1f 	bl	800f614 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e9d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3738      	adds	r7, #56	; 0x38
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}
 800e9e0:	e000ed04 	.word	0xe000ed04

0800e9e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b090      	sub	sp, #64	; 0x40
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	607a      	str	r2, [r7, #4]
 800e9f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d10a      	bne.n	800ea12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ea0e:	bf00      	nop
 800ea10:	e7fe      	b.n	800ea10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d103      	bne.n	800ea20 <xQueueGenericSendFromISR+0x3c>
 800ea18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d101      	bne.n	800ea24 <xQueueGenericSendFromISR+0x40>
 800ea20:	2301      	movs	r3, #1
 800ea22:	e000      	b.n	800ea26 <xQueueGenericSendFromISR+0x42>
 800ea24:	2300      	movs	r3, #0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10a      	bne.n	800ea40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ea2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2e:	f383 8811 	msr	BASEPRI, r3
 800ea32:	f3bf 8f6f 	isb	sy
 800ea36:	f3bf 8f4f 	dsb	sy
 800ea3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ea3c:	bf00      	nop
 800ea3e:	e7fe      	b.n	800ea3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	2b02      	cmp	r3, #2
 800ea44:	d103      	bne.n	800ea4e <xQueueGenericSendFromISR+0x6a>
 800ea46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d101      	bne.n	800ea52 <xQueueGenericSendFromISR+0x6e>
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e000      	b.n	800ea54 <xQueueGenericSendFromISR+0x70>
 800ea52:	2300      	movs	r3, #0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d10a      	bne.n	800ea6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ea58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5c:	f383 8811 	msr	BASEPRI, r3
 800ea60:	f3bf 8f6f 	isb	sy
 800ea64:	f3bf 8f4f 	dsb	sy
 800ea68:	623b      	str	r3, [r7, #32]
}
 800ea6a:	bf00      	nop
 800ea6c:	e7fe      	b.n	800ea6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea6e:	f002 fa6b 	bl	8010f48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ea72:	f3ef 8211 	mrs	r2, BASEPRI
 800ea76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7a:	f383 8811 	msr	BASEPRI, r3
 800ea7e:	f3bf 8f6f 	isb	sy
 800ea82:	f3bf 8f4f 	dsb	sy
 800ea86:	61fa      	str	r2, [r7, #28]
 800ea88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ea8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d302      	bcc.n	800eaa0 <xQueueGenericSendFromISR+0xbc>
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	d12f      	bne.n	800eb00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eaa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eaaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eab0:	683a      	ldr	r2, [r7, #0]
 800eab2:	68b9      	ldr	r1, [r7, #8]
 800eab4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eab6:	f000 f9af 	bl	800ee18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eaba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800eabe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eac2:	d112      	bne.n	800eaea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d016      	beq.n	800eafa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eace:	3324      	adds	r3, #36	; 0x24
 800ead0:	4618      	mov	r0, r3
 800ead2:	f000 ffbb 	bl	800fa4c <xTaskRemoveFromEventList>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d00e      	beq.n	800eafa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00b      	beq.n	800eafa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2201      	movs	r2, #1
 800eae6:	601a      	str	r2, [r3, #0]
 800eae8:	e007      	b.n	800eafa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eaea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eaee:	3301      	adds	r3, #1
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	b25a      	sxtb	r2, r3
 800eaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eafa:	2301      	movs	r3, #1
 800eafc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800eafe:	e001      	b.n	800eb04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eb00:	2300      	movs	r3, #0
 800eb02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eb0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eb10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3740      	adds	r7, #64	; 0x40
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
	...

0800eb1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b08c      	sub	sp, #48	; 0x30
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d10a      	bne.n	800eb4c <xQueueReceive+0x30>
	__asm volatile
 800eb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb3a:	f383 8811 	msr	BASEPRI, r3
 800eb3e:	f3bf 8f6f 	isb	sy
 800eb42:	f3bf 8f4f 	dsb	sy
 800eb46:	623b      	str	r3, [r7, #32]
}
 800eb48:	bf00      	nop
 800eb4a:	e7fe      	b.n	800eb4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d103      	bne.n	800eb5a <xQueueReceive+0x3e>
 800eb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d101      	bne.n	800eb5e <xQueueReceive+0x42>
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	e000      	b.n	800eb60 <xQueueReceive+0x44>
 800eb5e:	2300      	movs	r3, #0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d10a      	bne.n	800eb7a <xQueueReceive+0x5e>
	__asm volatile
 800eb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb68:	f383 8811 	msr	BASEPRI, r3
 800eb6c:	f3bf 8f6f 	isb	sy
 800eb70:	f3bf 8f4f 	dsb	sy
 800eb74:	61fb      	str	r3, [r7, #28]
}
 800eb76:	bf00      	nop
 800eb78:	e7fe      	b.n	800eb78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb7a:	f001 f929 	bl	800fdd0 <xTaskGetSchedulerState>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d102      	bne.n	800eb8a <xQueueReceive+0x6e>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d101      	bne.n	800eb8e <xQueueReceive+0x72>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e000      	b.n	800eb90 <xQueueReceive+0x74>
 800eb8e:	2300      	movs	r3, #0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d10a      	bne.n	800ebaa <xQueueReceive+0x8e>
	__asm volatile
 800eb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb98:	f383 8811 	msr	BASEPRI, r3
 800eb9c:	f3bf 8f6f 	isb	sy
 800eba0:	f3bf 8f4f 	dsb	sy
 800eba4:	61bb      	str	r3, [r7, #24]
}
 800eba6:	bf00      	nop
 800eba8:	e7fe      	b.n	800eba8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ebaa:	f002 f8eb 	bl	8010d84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ebae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d01f      	beq.n	800ebfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ebba:	68b9      	ldr	r1, [r7, #8]
 800ebbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebbe:	f000 f995 	bl	800eeec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ebc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc4:	1e5a      	subs	r2, r3, #1
 800ebc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebcc:	691b      	ldr	r3, [r3, #16]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d00f      	beq.n	800ebf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd4:	3310      	adds	r3, #16
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f000 ff38 	bl	800fa4c <xTaskRemoveFromEventList>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d007      	beq.n	800ebf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ebe2:	4b3d      	ldr	r3, [pc, #244]	; (800ecd8 <xQueueReceive+0x1bc>)
 800ebe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebe8:	601a      	str	r2, [r3, #0]
 800ebea:	f3bf 8f4f 	dsb	sy
 800ebee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ebf2:	f002 f8f7 	bl	8010de4 <vPortExitCritical>
				return pdPASS;
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	e069      	b.n	800ecce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d103      	bne.n	800ec08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec00:	f002 f8f0 	bl	8010de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ec04:	2300      	movs	r3, #0
 800ec06:	e062      	b.n	800ecce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d106      	bne.n	800ec1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec0e:	f107 0310 	add.w	r3, r7, #16
 800ec12:	4618      	mov	r0, r3
 800ec14:	f000 ff7e 	bl	800fb14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec1c:	f002 f8e2 	bl	8010de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec20:	f000 fcea 	bl	800f5f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec24:	f002 f8ae 	bl	8010d84 <vPortEnterCritical>
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec2e:	b25b      	sxtb	r3, r3
 800ec30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec34:	d103      	bne.n	800ec3e <xQueueReceive+0x122>
 800ec36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec38:	2200      	movs	r2, #0
 800ec3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec44:	b25b      	sxtb	r3, r3
 800ec46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec4a:	d103      	bne.n	800ec54 <xQueueReceive+0x138>
 800ec4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec54:	f002 f8c6 	bl	8010de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec58:	1d3a      	adds	r2, r7, #4
 800ec5a:	f107 0310 	add.w	r3, r7, #16
 800ec5e:	4611      	mov	r1, r2
 800ec60:	4618      	mov	r0, r3
 800ec62:	f000 ff6d 	bl	800fb40 <xTaskCheckForTimeOut>
 800ec66:	4603      	mov	r3, r0
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d123      	bne.n	800ecb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec6e:	f000 f9b5 	bl	800efdc <prvIsQueueEmpty>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d017      	beq.n	800eca8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7a:	3324      	adds	r3, #36	; 0x24
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	4611      	mov	r1, r2
 800ec80:	4618      	mov	r0, r3
 800ec82:	f000 fe93 	bl	800f9ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec88:	f000 f956 	bl	800ef38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec8c:	f000 fcc2 	bl	800f614 <xTaskResumeAll>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d189      	bne.n	800ebaa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ec96:	4b10      	ldr	r3, [pc, #64]	; (800ecd8 <xQueueReceive+0x1bc>)
 800ec98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec9c:	601a      	str	r2, [r3, #0]
 800ec9e:	f3bf 8f4f 	dsb	sy
 800eca2:	f3bf 8f6f 	isb	sy
 800eca6:	e780      	b.n	800ebaa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecaa:	f000 f945 	bl	800ef38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ecae:	f000 fcb1 	bl	800f614 <xTaskResumeAll>
 800ecb2:	e77a      	b.n	800ebaa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ecb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecb6:	f000 f93f 	bl	800ef38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ecba:	f000 fcab 	bl	800f614 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ecbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecc0:	f000 f98c 	bl	800efdc <prvIsQueueEmpty>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	f43f af6f 	beq.w	800ebaa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eccc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3730      	adds	r7, #48	; 0x30
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	e000ed04 	.word	0xe000ed04

0800ecdc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b08e      	sub	sp, #56	; 0x38
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ecec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10a      	bne.n	800ed08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ecf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf6:	f383 8811 	msr	BASEPRI, r3
 800ecfa:	f3bf 8f6f 	isb	sy
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	623b      	str	r3, [r7, #32]
}
 800ed04:	bf00      	nop
 800ed06:	e7fe      	b.n	800ed06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d103      	bne.n	800ed16 <xQueueReceiveFromISR+0x3a>
 800ed0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d101      	bne.n	800ed1a <xQueueReceiveFromISR+0x3e>
 800ed16:	2301      	movs	r3, #1
 800ed18:	e000      	b.n	800ed1c <xQueueReceiveFromISR+0x40>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d10a      	bne.n	800ed36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ed20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	61fb      	str	r3, [r7, #28]
}
 800ed32:	bf00      	nop
 800ed34:	e7fe      	b.n	800ed34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed36:	f002 f907 	bl	8010f48 <vPortValidateInterruptPriority>
	__asm volatile
 800ed3a:	f3ef 8211 	mrs	r2, BASEPRI
 800ed3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed42:	f383 8811 	msr	BASEPRI, r3
 800ed46:	f3bf 8f6f 	isb	sy
 800ed4a:	f3bf 8f4f 	dsb	sy
 800ed4e:	61ba      	str	r2, [r7, #24]
 800ed50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ed52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d02f      	beq.n	800edc2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ed62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ed6c:	68b9      	ldr	r1, [r7, #8]
 800ed6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed70:	f000 f8bc 	bl	800eeec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ed74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed76:	1e5a      	subs	r2, r3, #1
 800ed78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ed7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed84:	d112      	bne.n	800edac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	691b      	ldr	r3, [r3, #16]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d016      	beq.n	800edbc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed90:	3310      	adds	r3, #16
 800ed92:	4618      	mov	r0, r3
 800ed94:	f000 fe5a 	bl	800fa4c <xTaskRemoveFromEventList>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d00e      	beq.n	800edbc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00b      	beq.n	800edbc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	e007      	b.n	800edbc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800edac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edb0:	3301      	adds	r3, #1
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	b25a      	sxtb	r2, r3
 800edb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800edbc:	2301      	movs	r3, #1
 800edbe:	637b      	str	r3, [r7, #52]	; 0x34
 800edc0:	e001      	b.n	800edc6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800edc2:	2300      	movs	r3, #0
 800edc4:	637b      	str	r3, [r7, #52]	; 0x34
 800edc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	f383 8811 	msr	BASEPRI, r3
}
 800edd0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800edd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3738      	adds	r7, #56	; 0x38
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d10a      	bne.n	800ee00 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800edea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edee:	f383 8811 	msr	BASEPRI, r3
 800edf2:	f3bf 8f6f 	isb	sy
 800edf6:	f3bf 8f4f 	dsb	sy
 800edfa:	60bb      	str	r3, [r7, #8]
}
 800edfc:	bf00      	nop
 800edfe:	e7fe      	b.n	800edfe <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ee00:	f001 ffc0 	bl	8010d84 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee08:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ee0a:	f001 ffeb 	bl	8010de4 <vPortExitCritical>

	return uxReturn;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ee10:	4618      	mov	r0, r3
 800ee12:	3710      	adds	r7, #16
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b086      	sub	sp, #24
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ee24:	2300      	movs	r3, #0
 800ee26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d10d      	bne.n	800ee52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d14d      	bne.n	800eeda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	4618      	mov	r0, r3
 800ee44:	f000 ffe2 	bl	800fe0c <xTaskPriorityDisinherit>
 800ee48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	609a      	str	r2, [r3, #8]
 800ee50:	e043      	b.n	800eeda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d119      	bne.n	800ee8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	6858      	ldr	r0, [r3, #4]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee60:	461a      	mov	r2, r3
 800ee62:	68b9      	ldr	r1, [r7, #8]
 800ee64:	f002 fdd8 	bl	8011a18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	685a      	ldr	r2, [r3, #4]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee70:	441a      	add	r2, r3
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	685a      	ldr	r2, [r3, #4]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	689b      	ldr	r3, [r3, #8]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d32b      	bcc.n	800eeda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681a      	ldr	r2, [r3, #0]
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	605a      	str	r2, [r3, #4]
 800ee8a:	e026      	b.n	800eeda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	68d8      	ldr	r0, [r3, #12]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee94:	461a      	mov	r2, r3
 800ee96:	68b9      	ldr	r1, [r7, #8]
 800ee98:	f002 fdbe 	bl	8011a18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	68da      	ldr	r2, [r3, #12]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea4:	425b      	negs	r3, r3
 800eea6:	441a      	add	r2, r3
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	68da      	ldr	r2, [r3, #12]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d207      	bcs.n	800eec8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	689a      	ldr	r2, [r3, #8]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eec0:	425b      	negs	r3, r3
 800eec2:	441a      	add	r2, r3
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b02      	cmp	r3, #2
 800eecc:	d105      	bne.n	800eeda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d002      	beq.n	800eeda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	3b01      	subs	r3, #1
 800eed8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	1c5a      	adds	r2, r3, #1
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eee2:	697b      	ldr	r3, [r7, #20]
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3718      	adds	r7, #24
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d018      	beq.n	800ef30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	68da      	ldr	r2, [r3, #12]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef06:	441a      	add	r2, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	68da      	ldr	r2, [r3, #12]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d303      	bcc.n	800ef20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	68d9      	ldr	r1, [r3, #12]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef28:	461a      	mov	r2, r3
 800ef2a:	6838      	ldr	r0, [r7, #0]
 800ef2c:	f002 fd74 	bl	8011a18 <memcpy>
	}
}
 800ef30:	bf00      	nop
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ef40:	f001 ff20 	bl	8010d84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef4c:	e011      	b.n	800ef72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d012      	beq.n	800ef7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	3324      	adds	r3, #36	; 0x24
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f000 fd76 	bl	800fa4c <xTaskRemoveFromEventList>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d001      	beq.n	800ef6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ef66:	f000 fe4d 	bl	800fc04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ef6a:	7bfb      	ldrb	r3, [r7, #15]
 800ef6c:	3b01      	subs	r3, #1
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	dce9      	bgt.n	800ef4e <prvUnlockQueue+0x16>
 800ef7a:	e000      	b.n	800ef7e <prvUnlockQueue+0x46>
					break;
 800ef7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	22ff      	movs	r2, #255	; 0xff
 800ef82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ef86:	f001 ff2d 	bl	8010de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ef8a:	f001 fefb 	bl	8010d84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef96:	e011      	b.n	800efbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	691b      	ldr	r3, [r3, #16]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d012      	beq.n	800efc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	3310      	adds	r3, #16
 800efa4:	4618      	mov	r0, r3
 800efa6:	f000 fd51 	bl	800fa4c <xTaskRemoveFromEventList>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d001      	beq.n	800efb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800efb0:	f000 fe28 	bl	800fc04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800efb4:	7bbb      	ldrb	r3, [r7, #14]
 800efb6:	3b01      	subs	r3, #1
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800efbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	dce9      	bgt.n	800ef98 <prvUnlockQueue+0x60>
 800efc4:	e000      	b.n	800efc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800efc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	22ff      	movs	r2, #255	; 0xff
 800efcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800efd0:	f001 ff08 	bl	8010de4 <vPortExitCritical>
}
 800efd4:	bf00      	nop
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800efe4:	f001 fece 	bl	8010d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efec:	2b00      	cmp	r3, #0
 800efee:	d102      	bne.n	800eff6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eff0:	2301      	movs	r3, #1
 800eff2:	60fb      	str	r3, [r7, #12]
 800eff4:	e001      	b.n	800effa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eff6:	2300      	movs	r3, #0
 800eff8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800effa:	f001 fef3 	bl	8010de4 <vPortExitCritical>

	return xReturn;
 800effe:	68fb      	ldr	r3, [r7, #12]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f010:	f001 feb8 	bl	8010d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d102      	bne.n	800f026 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f020:	2301      	movs	r3, #1
 800f022:	60fb      	str	r3, [r7, #12]
 800f024:	e001      	b.n	800f02a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f026:	2300      	movs	r3, #0
 800f028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f02a:	f001 fedb 	bl	8010de4 <vPortExitCritical>

	return xReturn;
 800f02e:	68fb      	ldr	r3, [r7, #12]
}
 800f030:	4618      	mov	r0, r3
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800f038:	b480      	push	{r7}
 800f03a:	b087      	sub	sp, #28
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d10a      	bne.n	800f060 <xQueueIsQueueFullFromISR+0x28>
	__asm volatile
 800f04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04e:	f383 8811 	msr	BASEPRI, r3
 800f052:	f3bf 8f6f 	isb	sy
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	60fb      	str	r3, [r7, #12]
}
 800f05c:	bf00      	nop
 800f05e:	e7fe      	b.n	800f05e <xQueueIsQueueFullFromISR+0x26>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f068:	429a      	cmp	r2, r3
 800f06a:	d102      	bne.n	800f072 <xQueueIsQueueFullFromISR+0x3a>
	{
		xReturn = pdTRUE;
 800f06c:	2301      	movs	r3, #1
 800f06e:	617b      	str	r3, [r7, #20]
 800f070:	e001      	b.n	800f076 <xQueueIsQueueFullFromISR+0x3e>
	}
	else
	{
		xReturn = pdFALSE;
 800f072:	2300      	movs	r3, #0
 800f074:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f076:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f078:	4618      	mov	r0, r3
 800f07a:	371c      	adds	r7, #28
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f084:	b480      	push	{r7}
 800f086:	b085      	sub	sp, #20
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f08e:	2300      	movs	r3, #0
 800f090:	60fb      	str	r3, [r7, #12]
 800f092:	e014      	b.n	800f0be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f094:	4a0f      	ldr	r2, [pc, #60]	; (800f0d4 <vQueueAddToRegistry+0x50>)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d10b      	bne.n	800f0b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f0a0:	490c      	ldr	r1, [pc, #48]	; (800f0d4 <vQueueAddToRegistry+0x50>)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	683a      	ldr	r2, [r7, #0]
 800f0a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f0aa:	4a0a      	ldr	r2, [pc, #40]	; (800f0d4 <vQueueAddToRegistry+0x50>)
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	4413      	add	r3, r2
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f0b6:	e006      	b.n	800f0c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	60fb      	str	r3, [r7, #12]
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2b07      	cmp	r3, #7
 800f0c2:	d9e7      	bls.n	800f094 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f0c4:	bf00      	nop
 800f0c6:	bf00      	nop
 800f0c8:	3714      	adds	r7, #20
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr
 800f0d2:	bf00      	nop
 800f0d4:	20005008 	.word	0x20005008

0800f0d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b086      	sub	sp, #24
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f0e8:	f001 fe4c 	bl	8010d84 <vPortEnterCritical>
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0f2:	b25b      	sxtb	r3, r3
 800f0f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0f8:	d103      	bne.n	800f102 <vQueueWaitForMessageRestricted+0x2a>
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f108:	b25b      	sxtb	r3, r3
 800f10a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f10e:	d103      	bne.n	800f118 <vQueueWaitForMessageRestricted+0x40>
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	2200      	movs	r2, #0
 800f114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f118:	f001 fe64 	bl	8010de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f120:	2b00      	cmp	r3, #0
 800f122:	d106      	bne.n	800f132 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	3324      	adds	r3, #36	; 0x24
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	68b9      	ldr	r1, [r7, #8]
 800f12c:	4618      	mov	r0, r3
 800f12e:	f000 fc61 	bl	800f9f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f132:	6978      	ldr	r0, [r7, #20]
 800f134:	f7ff ff00 	bl	800ef38 <prvUnlockQueue>
	}
 800f138:	bf00      	nop
 800f13a:	3718      	adds	r7, #24
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f140:	b580      	push	{r7, lr}
 800f142:	b08e      	sub	sp, #56	; 0x38
 800f144:	af04      	add	r7, sp, #16
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
 800f14c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10a      	bne.n	800f16a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f158:	f383 8811 	msr	BASEPRI, r3
 800f15c:	f3bf 8f6f 	isb	sy
 800f160:	f3bf 8f4f 	dsb	sy
 800f164:	623b      	str	r3, [r7, #32]
}
 800f166:	bf00      	nop
 800f168:	e7fe      	b.n	800f168 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d10a      	bne.n	800f186 <xTaskCreateStatic+0x46>
	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f174:	f383 8811 	msr	BASEPRI, r3
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	61fb      	str	r3, [r7, #28]
}
 800f182:	bf00      	nop
 800f184:	e7fe      	b.n	800f184 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f186:	23bc      	movs	r3, #188	; 0xbc
 800f188:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	2bbc      	cmp	r3, #188	; 0xbc
 800f18e:	d00a      	beq.n	800f1a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800f190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	61bb      	str	r3, [r7, #24]
}
 800f1a2:	bf00      	nop
 800f1a4:	e7fe      	b.n	800f1a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f1a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d01e      	beq.n	800f1ec <xTaskCreateStatic+0xac>
 800f1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d01b      	beq.n	800f1ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c0:	2202      	movs	r2, #2
 800f1c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	9303      	str	r3, [sp, #12]
 800f1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1cc:	9302      	str	r3, [sp, #8]
 800f1ce:	f107 0314 	add.w	r3, r7, #20
 800f1d2:	9301      	str	r3, [sp, #4]
 800f1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d6:	9300      	str	r3, [sp, #0]
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	68b9      	ldr	r1, [r7, #8]
 800f1de:	68f8      	ldr	r0, [r7, #12]
 800f1e0:	f000 f850 	bl	800f284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f1e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1e6:	f000 f8f3 	bl	800f3d0 <prvAddNewTaskToReadyList>
 800f1ea:	e001      	b.n	800f1f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f1f0:	697b      	ldr	r3, [r7, #20]
	}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3728      	adds	r7, #40	; 0x28
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b08c      	sub	sp, #48	; 0x30
 800f1fe:	af04      	add	r7, sp, #16
 800f200:	60f8      	str	r0, [r7, #12]
 800f202:	60b9      	str	r1, [r7, #8]
 800f204:	603b      	str	r3, [r7, #0]
 800f206:	4613      	mov	r3, r2
 800f208:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f20a:	88fb      	ldrh	r3, [r7, #6]
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	4618      	mov	r0, r3
 800f210:	f001 feda 	bl	8010fc8 <pvPortMalloc>
 800f214:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d00e      	beq.n	800f23a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f21c:	20bc      	movs	r0, #188	; 0xbc
 800f21e:	f001 fed3 	bl	8010fc8 <pvPortMalloc>
 800f222:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d003      	beq.n	800f232 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	697a      	ldr	r2, [r7, #20]
 800f22e:	631a      	str	r2, [r3, #48]	; 0x30
 800f230:	e005      	b.n	800f23e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f232:	6978      	ldr	r0, [r7, #20]
 800f234:	f001 ff94 	bl	8011160 <vPortFree>
 800f238:	e001      	b.n	800f23e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f23a:	2300      	movs	r3, #0
 800f23c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f23e:	69fb      	ldr	r3, [r7, #28]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d017      	beq.n	800f274 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	2200      	movs	r2, #0
 800f248:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f24c:	88fa      	ldrh	r2, [r7, #6]
 800f24e:	2300      	movs	r3, #0
 800f250:	9303      	str	r3, [sp, #12]
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	9302      	str	r3, [sp, #8]
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f258:	9301      	str	r3, [sp, #4]
 800f25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25c:	9300      	str	r3, [sp, #0]
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	68b9      	ldr	r1, [r7, #8]
 800f262:	68f8      	ldr	r0, [r7, #12]
 800f264:	f000 f80e 	bl	800f284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f268:	69f8      	ldr	r0, [r7, #28]
 800f26a:	f000 f8b1 	bl	800f3d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f26e:	2301      	movs	r3, #1
 800f270:	61bb      	str	r3, [r7, #24]
 800f272:	e002      	b.n	800f27a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f278:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f27a:	69bb      	ldr	r3, [r7, #24]
	}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3720      	adds	r7, #32
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b088      	sub	sp, #32
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
 800f290:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	461a      	mov	r2, r3
 800f29c:	21a5      	movs	r1, #165	; 0xa5
 800f29e:	f002 fbc9 	bl	8011a34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f2ac:	3b01      	subs	r3, #1
 800f2ae:	009b      	lsls	r3, r3, #2
 800f2b0:	4413      	add	r3, r2
 800f2b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f2b4:	69bb      	ldr	r3, [r7, #24]
 800f2b6:	f023 0307 	bic.w	r3, r3, #7
 800f2ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	f003 0307 	and.w	r3, r3, #7
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d00a      	beq.n	800f2dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800f2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ca:	f383 8811 	msr	BASEPRI, r3
 800f2ce:	f3bf 8f6f 	isb	sy
 800f2d2:	f3bf 8f4f 	dsb	sy
 800f2d6:	617b      	str	r3, [r7, #20]
}
 800f2d8:	bf00      	nop
 800f2da:	e7fe      	b.n	800f2da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d01f      	beq.n	800f322 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	61fb      	str	r3, [r7, #28]
 800f2e6:	e012      	b.n	800f30e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f2e8:	68ba      	ldr	r2, [r7, #8]
 800f2ea:	69fb      	ldr	r3, [r7, #28]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	7819      	ldrb	r1, [r3, #0]
 800f2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	3334      	adds	r3, #52	; 0x34
 800f2f8:	460a      	mov	r2, r1
 800f2fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f2fc:	68ba      	ldr	r2, [r7, #8]
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	4413      	add	r3, r2
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d006      	beq.n	800f316 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	3301      	adds	r3, #1
 800f30c:	61fb      	str	r3, [r7, #28]
 800f30e:	69fb      	ldr	r3, [r7, #28]
 800f310:	2b0f      	cmp	r3, #15
 800f312:	d9e9      	bls.n	800f2e8 <prvInitialiseNewTask+0x64>
 800f314:	e000      	b.n	800f318 <prvInitialiseNewTask+0x94>
			{
				break;
 800f316:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31a:	2200      	movs	r2, #0
 800f31c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f320:	e003      	b.n	800f32a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f324:	2200      	movs	r2, #0
 800f326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32c:	2b37      	cmp	r3, #55	; 0x37
 800f32e:	d901      	bls.n	800f334 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f330:	2337      	movs	r3, #55	; 0x37
 800f332:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f338:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f33e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f342:	2200      	movs	r2, #0
 800f344:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f348:	3304      	adds	r3, #4
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7ff f87a 	bl	800e444 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f352:	3318      	adds	r3, #24
 800f354:	4618      	mov	r0, r3
 800f356:	f7ff f875 	bl	800e444 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f35e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f362:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f368:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f36e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f372:	2200      	movs	r2, #0
 800f374:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37a:	2200      	movs	r2, #0
 800f37c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f382:	3354      	adds	r3, #84	; 0x54
 800f384:	2260      	movs	r2, #96	; 0x60
 800f386:	2100      	movs	r1, #0
 800f388:	4618      	mov	r0, r3
 800f38a:	f002 fb53 	bl	8011a34 <memset>
 800f38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f390:	4a0c      	ldr	r2, [pc, #48]	; (800f3c4 <prvInitialiseNewTask+0x140>)
 800f392:	659a      	str	r2, [r3, #88]	; 0x58
 800f394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f396:	4a0c      	ldr	r2, [pc, #48]	; (800f3c8 <prvInitialiseNewTask+0x144>)
 800f398:	65da      	str	r2, [r3, #92]	; 0x5c
 800f39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39c:	4a0b      	ldr	r2, [pc, #44]	; (800f3cc <prvInitialiseNewTask+0x148>)
 800f39e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	68f9      	ldr	r1, [r7, #12]
 800f3a4:	69b8      	ldr	r0, [r7, #24]
 800f3a6:	f001 fbbf 	bl	8010b28 <pxPortInitialiseStack>
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d002      	beq.n	800f3bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3bc:	bf00      	nop
 800f3be:	3720      	adds	r7, #32
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	08014fa8 	.word	0x08014fa8
 800f3c8:	08014fc8 	.word	0x08014fc8
 800f3cc:	08014f88 	.word	0x08014f88

0800f3d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f3d8:	f001 fcd4 	bl	8010d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f3dc:	4b2d      	ldr	r3, [pc, #180]	; (800f494 <prvAddNewTaskToReadyList+0xc4>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	4a2c      	ldr	r2, [pc, #176]	; (800f494 <prvAddNewTaskToReadyList+0xc4>)
 800f3e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f3e6:	4b2c      	ldr	r3, [pc, #176]	; (800f498 <prvAddNewTaskToReadyList+0xc8>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d109      	bne.n	800f402 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f3ee:	4a2a      	ldr	r2, [pc, #168]	; (800f498 <prvAddNewTaskToReadyList+0xc8>)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f3f4:	4b27      	ldr	r3, [pc, #156]	; (800f494 <prvAddNewTaskToReadyList+0xc4>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	d110      	bne.n	800f41e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f3fc:	f000 fc26 	bl	800fc4c <prvInitialiseTaskLists>
 800f400:	e00d      	b.n	800f41e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f402:	4b26      	ldr	r3, [pc, #152]	; (800f49c <prvAddNewTaskToReadyList+0xcc>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d109      	bne.n	800f41e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f40a:	4b23      	ldr	r3, [pc, #140]	; (800f498 <prvAddNewTaskToReadyList+0xc8>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f414:	429a      	cmp	r2, r3
 800f416:	d802      	bhi.n	800f41e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f418:	4a1f      	ldr	r2, [pc, #124]	; (800f498 <prvAddNewTaskToReadyList+0xc8>)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f41e:	4b20      	ldr	r3, [pc, #128]	; (800f4a0 <prvAddNewTaskToReadyList+0xd0>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	3301      	adds	r3, #1
 800f424:	4a1e      	ldr	r2, [pc, #120]	; (800f4a0 <prvAddNewTaskToReadyList+0xd0>)
 800f426:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f428:	4b1d      	ldr	r3, [pc, #116]	; (800f4a0 <prvAddNewTaskToReadyList+0xd0>)
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f434:	4b1b      	ldr	r3, [pc, #108]	; (800f4a4 <prvAddNewTaskToReadyList+0xd4>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	429a      	cmp	r2, r3
 800f43a:	d903      	bls.n	800f444 <prvAddNewTaskToReadyList+0x74>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f440:	4a18      	ldr	r2, [pc, #96]	; (800f4a4 <prvAddNewTaskToReadyList+0xd4>)
 800f442:	6013      	str	r3, [r2, #0]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f448:	4613      	mov	r3, r2
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	4413      	add	r3, r2
 800f44e:	009b      	lsls	r3, r3, #2
 800f450:	4a15      	ldr	r2, [pc, #84]	; (800f4a8 <prvAddNewTaskToReadyList+0xd8>)
 800f452:	441a      	add	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	3304      	adds	r3, #4
 800f458:	4619      	mov	r1, r3
 800f45a:	4610      	mov	r0, r2
 800f45c:	f7fe ffff 	bl	800e45e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f460:	f001 fcc0 	bl	8010de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f464:	4b0d      	ldr	r3, [pc, #52]	; (800f49c <prvAddNewTaskToReadyList+0xcc>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d00e      	beq.n	800f48a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f46c:	4b0a      	ldr	r3, [pc, #40]	; (800f498 <prvAddNewTaskToReadyList+0xc8>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f476:	429a      	cmp	r2, r3
 800f478:	d207      	bcs.n	800f48a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f47a:	4b0c      	ldr	r3, [pc, #48]	; (800f4ac <prvAddNewTaskToReadyList+0xdc>)
 800f47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f480:	601a      	str	r2, [r3, #0]
 800f482:	f3bf 8f4f 	dsb	sy
 800f486:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f48a:	bf00      	nop
 800f48c:	3708      	adds	r7, #8
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	20000d94 	.word	0x20000d94
 800f498:	200008c0 	.word	0x200008c0
 800f49c:	20000da0 	.word	0x20000da0
 800f4a0:	20000db0 	.word	0x20000db0
 800f4a4:	20000d9c 	.word	0x20000d9c
 800f4a8:	200008c4 	.word	0x200008c4
 800f4ac:	e000ed04 	.word	0xe000ed04

0800f4b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d017      	beq.n	800f4f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f4c2:	4b13      	ldr	r3, [pc, #76]	; (800f510 <vTaskDelay+0x60>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d00a      	beq.n	800f4e0 <vTaskDelay+0x30>
	__asm volatile
 800f4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ce:	f383 8811 	msr	BASEPRI, r3
 800f4d2:	f3bf 8f6f 	isb	sy
 800f4d6:	f3bf 8f4f 	dsb	sy
 800f4da:	60bb      	str	r3, [r7, #8]
}
 800f4dc:	bf00      	nop
 800f4de:	e7fe      	b.n	800f4de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f4e0:	f000 f88a 	bl	800f5f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 ff00 	bl	80102ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f4ec:	f000 f892 	bl	800f614 <xTaskResumeAll>
 800f4f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d107      	bne.n	800f508 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f4f8:	4b06      	ldr	r3, [pc, #24]	; (800f514 <vTaskDelay+0x64>)
 800f4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4fe:	601a      	str	r2, [r3, #0]
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f508:	bf00      	nop
 800f50a:	3710      	adds	r7, #16
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	20000dbc 	.word	0x20000dbc
 800f514:	e000ed04 	.word	0xe000ed04

0800f518 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b08a      	sub	sp, #40	; 0x28
 800f51c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f51e:	2300      	movs	r3, #0
 800f520:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f522:	2300      	movs	r3, #0
 800f524:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f526:	463a      	mov	r2, r7
 800f528:	1d39      	adds	r1, r7, #4
 800f52a:	f107 0308 	add.w	r3, r7, #8
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fe ff34 	bl	800e39c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f534:	6839      	ldr	r1, [r7, #0]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	9202      	str	r2, [sp, #8]
 800f53c:	9301      	str	r3, [sp, #4]
 800f53e:	2300      	movs	r3, #0
 800f540:	9300      	str	r3, [sp, #0]
 800f542:	2300      	movs	r3, #0
 800f544:	460a      	mov	r2, r1
 800f546:	4924      	ldr	r1, [pc, #144]	; (800f5d8 <vTaskStartScheduler+0xc0>)
 800f548:	4824      	ldr	r0, [pc, #144]	; (800f5dc <vTaskStartScheduler+0xc4>)
 800f54a:	f7ff fdf9 	bl	800f140 <xTaskCreateStatic>
 800f54e:	4603      	mov	r3, r0
 800f550:	4a23      	ldr	r2, [pc, #140]	; (800f5e0 <vTaskStartScheduler+0xc8>)
 800f552:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f554:	4b22      	ldr	r3, [pc, #136]	; (800f5e0 <vTaskStartScheduler+0xc8>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d002      	beq.n	800f562 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f55c:	2301      	movs	r3, #1
 800f55e:	617b      	str	r3, [r7, #20]
 800f560:	e001      	b.n	800f566 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f562:	2300      	movs	r3, #0
 800f564:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d102      	bne.n	800f572 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f56c:	f000 ff12 	bl	8010394 <xTimerCreateTimerTask>
 800f570:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	2b01      	cmp	r3, #1
 800f576:	d11b      	bne.n	800f5b0 <vTaskStartScheduler+0x98>
	__asm volatile
 800f578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f57c:	f383 8811 	msr	BASEPRI, r3
 800f580:	f3bf 8f6f 	isb	sy
 800f584:	f3bf 8f4f 	dsb	sy
 800f588:	613b      	str	r3, [r7, #16]
}
 800f58a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f58c:	4b15      	ldr	r3, [pc, #84]	; (800f5e4 <vTaskStartScheduler+0xcc>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	3354      	adds	r3, #84	; 0x54
 800f592:	4a15      	ldr	r2, [pc, #84]	; (800f5e8 <vTaskStartScheduler+0xd0>)
 800f594:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f596:	4b15      	ldr	r3, [pc, #84]	; (800f5ec <vTaskStartScheduler+0xd4>)
 800f598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f59c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f59e:	4b14      	ldr	r3, [pc, #80]	; (800f5f0 <vTaskStartScheduler+0xd8>)
 800f5a0:	2201      	movs	r2, #1
 800f5a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f5a4:	4b13      	ldr	r3, [pc, #76]	; (800f5f4 <vTaskStartScheduler+0xdc>)
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f5aa:	f001 fb49 	bl	8010c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f5ae:	e00e      	b.n	800f5ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5b6:	d10a      	bne.n	800f5ce <vTaskStartScheduler+0xb6>
	__asm volatile
 800f5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5bc:	f383 8811 	msr	BASEPRI, r3
 800f5c0:	f3bf 8f6f 	isb	sy
 800f5c4:	f3bf 8f4f 	dsb	sy
 800f5c8:	60fb      	str	r3, [r7, #12]
}
 800f5ca:	bf00      	nop
 800f5cc:	e7fe      	b.n	800f5cc <vTaskStartScheduler+0xb4>
}
 800f5ce:	bf00      	nop
 800f5d0:	3718      	adds	r7, #24
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	080129a0 	.word	0x080129a0
 800f5dc:	0800fc1d 	.word	0x0800fc1d
 800f5e0:	20000db8 	.word	0x20000db8
 800f5e4:	200008c0 	.word	0x200008c0
 800f5e8:	20000044 	.word	0x20000044
 800f5ec:	20000db4 	.word	0x20000db4
 800f5f0:	20000da0 	.word	0x20000da0
 800f5f4:	20000d98 	.word	0x20000d98

0800f5f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f5fc:	4b04      	ldr	r3, [pc, #16]	; (800f610 <vTaskSuspendAll+0x18>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	3301      	adds	r3, #1
 800f602:	4a03      	ldr	r2, [pc, #12]	; (800f610 <vTaskSuspendAll+0x18>)
 800f604:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f606:	bf00      	nop
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr
 800f610:	20000dbc 	.word	0x20000dbc

0800f614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f61a:	2300      	movs	r3, #0
 800f61c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f61e:	2300      	movs	r3, #0
 800f620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f622:	4b42      	ldr	r3, [pc, #264]	; (800f72c <xTaskResumeAll+0x118>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d10a      	bne.n	800f640 <xTaskResumeAll+0x2c>
	__asm volatile
 800f62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f62e:	f383 8811 	msr	BASEPRI, r3
 800f632:	f3bf 8f6f 	isb	sy
 800f636:	f3bf 8f4f 	dsb	sy
 800f63a:	603b      	str	r3, [r7, #0]
}
 800f63c:	bf00      	nop
 800f63e:	e7fe      	b.n	800f63e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f640:	f001 fba0 	bl	8010d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f644:	4b39      	ldr	r3, [pc, #228]	; (800f72c <xTaskResumeAll+0x118>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	3b01      	subs	r3, #1
 800f64a:	4a38      	ldr	r2, [pc, #224]	; (800f72c <xTaskResumeAll+0x118>)
 800f64c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f64e:	4b37      	ldr	r3, [pc, #220]	; (800f72c <xTaskResumeAll+0x118>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d162      	bne.n	800f71c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f656:	4b36      	ldr	r3, [pc, #216]	; (800f730 <xTaskResumeAll+0x11c>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d05e      	beq.n	800f71c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f65e:	e02f      	b.n	800f6c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f660:	4b34      	ldr	r3, [pc, #208]	; (800f734 <xTaskResumeAll+0x120>)
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	3318      	adds	r3, #24
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fe ff53 	bl	800e518 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	3304      	adds	r3, #4
 800f676:	4618      	mov	r0, r3
 800f678:	f7fe ff4e 	bl	800e518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f680:	4b2d      	ldr	r3, [pc, #180]	; (800f738 <xTaskResumeAll+0x124>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	429a      	cmp	r2, r3
 800f686:	d903      	bls.n	800f690 <xTaskResumeAll+0x7c>
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f68c:	4a2a      	ldr	r2, [pc, #168]	; (800f738 <xTaskResumeAll+0x124>)
 800f68e:	6013      	str	r3, [r2, #0]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f694:	4613      	mov	r3, r2
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	4413      	add	r3, r2
 800f69a:	009b      	lsls	r3, r3, #2
 800f69c:	4a27      	ldr	r2, [pc, #156]	; (800f73c <xTaskResumeAll+0x128>)
 800f69e:	441a      	add	r2, r3
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	3304      	adds	r3, #4
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	4610      	mov	r0, r2
 800f6a8:	f7fe fed9 	bl	800e45e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6b0:	4b23      	ldr	r3, [pc, #140]	; (800f740 <xTaskResumeAll+0x12c>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d302      	bcc.n	800f6c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f6ba:	4b22      	ldr	r3, [pc, #136]	; (800f744 <xTaskResumeAll+0x130>)
 800f6bc:	2201      	movs	r2, #1
 800f6be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f6c0:	4b1c      	ldr	r3, [pc, #112]	; (800f734 <xTaskResumeAll+0x120>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1cb      	bne.n	800f660 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d001      	beq.n	800f6d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f6ce:	f000 fb5f 	bl	800fd90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f6d2:	4b1d      	ldr	r3, [pc, #116]	; (800f748 <xTaskResumeAll+0x134>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d010      	beq.n	800f700 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f6de:	f000 f847 	bl	800f770 <xTaskIncrementTick>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d002      	beq.n	800f6ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f6e8:	4b16      	ldr	r3, [pc, #88]	; (800f744 <xTaskResumeAll+0x130>)
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	3b01      	subs	r3, #1
 800f6f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d1f1      	bne.n	800f6de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f6fa:	4b13      	ldr	r3, [pc, #76]	; (800f748 <xTaskResumeAll+0x134>)
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f700:	4b10      	ldr	r3, [pc, #64]	; (800f744 <xTaskResumeAll+0x130>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d009      	beq.n	800f71c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f708:	2301      	movs	r3, #1
 800f70a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f70c:	4b0f      	ldr	r3, [pc, #60]	; (800f74c <xTaskResumeAll+0x138>)
 800f70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f712:	601a      	str	r2, [r3, #0]
 800f714:	f3bf 8f4f 	dsb	sy
 800f718:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f71c:	f001 fb62 	bl	8010de4 <vPortExitCritical>

	return xAlreadyYielded;
 800f720:	68bb      	ldr	r3, [r7, #8]
}
 800f722:	4618      	mov	r0, r3
 800f724:	3710      	adds	r7, #16
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	bf00      	nop
 800f72c:	20000dbc 	.word	0x20000dbc
 800f730:	20000d94 	.word	0x20000d94
 800f734:	20000d54 	.word	0x20000d54
 800f738:	20000d9c 	.word	0x20000d9c
 800f73c:	200008c4 	.word	0x200008c4
 800f740:	200008c0 	.word	0x200008c0
 800f744:	20000da8 	.word	0x20000da8
 800f748:	20000da4 	.word	0x20000da4
 800f74c:	e000ed04 	.word	0xe000ed04

0800f750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f756:	4b05      	ldr	r3, [pc, #20]	; (800f76c <xTaskGetTickCount+0x1c>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f75c:	687b      	ldr	r3, [r7, #4]
}
 800f75e:	4618      	mov	r0, r3
 800f760:	370c      	adds	r7, #12
 800f762:	46bd      	mov	sp, r7
 800f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f768:	4770      	bx	lr
 800f76a:	bf00      	nop
 800f76c:	20000d98 	.word	0x20000d98

0800f770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b086      	sub	sp, #24
 800f774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f776:	2300      	movs	r3, #0
 800f778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f77a:	4b4f      	ldr	r3, [pc, #316]	; (800f8b8 <xTaskIncrementTick+0x148>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	f040 808f 	bne.w	800f8a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f784:	4b4d      	ldr	r3, [pc, #308]	; (800f8bc <xTaskIncrementTick+0x14c>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	3301      	adds	r3, #1
 800f78a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f78c:	4a4b      	ldr	r2, [pc, #300]	; (800f8bc <xTaskIncrementTick+0x14c>)
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d120      	bne.n	800f7da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f798:	4b49      	ldr	r3, [pc, #292]	; (800f8c0 <xTaskIncrementTick+0x150>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00a      	beq.n	800f7b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800f7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a6:	f383 8811 	msr	BASEPRI, r3
 800f7aa:	f3bf 8f6f 	isb	sy
 800f7ae:	f3bf 8f4f 	dsb	sy
 800f7b2:	603b      	str	r3, [r7, #0]
}
 800f7b4:	bf00      	nop
 800f7b6:	e7fe      	b.n	800f7b6 <xTaskIncrementTick+0x46>
 800f7b8:	4b41      	ldr	r3, [pc, #260]	; (800f8c0 <xTaskIncrementTick+0x150>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	60fb      	str	r3, [r7, #12]
 800f7be:	4b41      	ldr	r3, [pc, #260]	; (800f8c4 <xTaskIncrementTick+0x154>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	4a3f      	ldr	r2, [pc, #252]	; (800f8c0 <xTaskIncrementTick+0x150>)
 800f7c4:	6013      	str	r3, [r2, #0]
 800f7c6:	4a3f      	ldr	r2, [pc, #252]	; (800f8c4 <xTaskIncrementTick+0x154>)
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	6013      	str	r3, [r2, #0]
 800f7cc:	4b3e      	ldr	r3, [pc, #248]	; (800f8c8 <xTaskIncrementTick+0x158>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	4a3d      	ldr	r2, [pc, #244]	; (800f8c8 <xTaskIncrementTick+0x158>)
 800f7d4:	6013      	str	r3, [r2, #0]
 800f7d6:	f000 fadb 	bl	800fd90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f7da:	4b3c      	ldr	r3, [pc, #240]	; (800f8cc <xTaskIncrementTick+0x15c>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	693a      	ldr	r2, [r7, #16]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d349      	bcc.n	800f878 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f7e4:	4b36      	ldr	r3, [pc, #216]	; (800f8c0 <xTaskIncrementTick+0x150>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d104      	bne.n	800f7f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7ee:	4b37      	ldr	r3, [pc, #220]	; (800f8cc <xTaskIncrementTick+0x15c>)
 800f7f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f7f4:	601a      	str	r2, [r3, #0]
					break;
 800f7f6:	e03f      	b.n	800f878 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7f8:	4b31      	ldr	r3, [pc, #196]	; (800f8c0 <xTaskIncrementTick+0x150>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	68db      	ldr	r3, [r3, #12]
 800f7fe:	68db      	ldr	r3, [r3, #12]
 800f800:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f808:	693a      	ldr	r2, [r7, #16]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d203      	bcs.n	800f818 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f810:	4a2e      	ldr	r2, [pc, #184]	; (800f8cc <xTaskIncrementTick+0x15c>)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f816:	e02f      	b.n	800f878 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	3304      	adds	r3, #4
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fe fe7b 	bl	800e518 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f826:	2b00      	cmp	r3, #0
 800f828:	d004      	beq.n	800f834 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	3318      	adds	r3, #24
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fe fe72 	bl	800e518 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f838:	4b25      	ldr	r3, [pc, #148]	; (800f8d0 <xTaskIncrementTick+0x160>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d903      	bls.n	800f848 <xTaskIncrementTick+0xd8>
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f844:	4a22      	ldr	r2, [pc, #136]	; (800f8d0 <xTaskIncrementTick+0x160>)
 800f846:	6013      	str	r3, [r2, #0]
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f84c:	4613      	mov	r3, r2
 800f84e:	009b      	lsls	r3, r3, #2
 800f850:	4413      	add	r3, r2
 800f852:	009b      	lsls	r3, r3, #2
 800f854:	4a1f      	ldr	r2, [pc, #124]	; (800f8d4 <xTaskIncrementTick+0x164>)
 800f856:	441a      	add	r2, r3
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	3304      	adds	r3, #4
 800f85c:	4619      	mov	r1, r3
 800f85e:	4610      	mov	r0, r2
 800f860:	f7fe fdfd 	bl	800e45e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f868:	4b1b      	ldr	r3, [pc, #108]	; (800f8d8 <xTaskIncrementTick+0x168>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f86e:	429a      	cmp	r2, r3
 800f870:	d3b8      	bcc.n	800f7e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f872:	2301      	movs	r3, #1
 800f874:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f876:	e7b5      	b.n	800f7e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f878:	4b17      	ldr	r3, [pc, #92]	; (800f8d8 <xTaskIncrementTick+0x168>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f87e:	4915      	ldr	r1, [pc, #84]	; (800f8d4 <xTaskIncrementTick+0x164>)
 800f880:	4613      	mov	r3, r2
 800f882:	009b      	lsls	r3, r3, #2
 800f884:	4413      	add	r3, r2
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	440b      	add	r3, r1
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d901      	bls.n	800f894 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f890:	2301      	movs	r3, #1
 800f892:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f894:	4b11      	ldr	r3, [pc, #68]	; (800f8dc <xTaskIncrementTick+0x16c>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d007      	beq.n	800f8ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f89c:	2301      	movs	r3, #1
 800f89e:	617b      	str	r3, [r7, #20]
 800f8a0:	e004      	b.n	800f8ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f8a2:	4b0f      	ldr	r3, [pc, #60]	; (800f8e0 <xTaskIncrementTick+0x170>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	4a0d      	ldr	r2, [pc, #52]	; (800f8e0 <xTaskIncrementTick+0x170>)
 800f8aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f8ac:	697b      	ldr	r3, [r7, #20]
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3718      	adds	r7, #24
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	20000dbc 	.word	0x20000dbc
 800f8bc:	20000d98 	.word	0x20000d98
 800f8c0:	20000d4c 	.word	0x20000d4c
 800f8c4:	20000d50 	.word	0x20000d50
 800f8c8:	20000dac 	.word	0x20000dac
 800f8cc:	20000db4 	.word	0x20000db4
 800f8d0:	20000d9c 	.word	0x20000d9c
 800f8d4:	200008c4 	.word	0x200008c4
 800f8d8:	200008c0 	.word	0x200008c0
 800f8dc:	20000da8 	.word	0x20000da8
 800f8e0:	20000da4 	.word	0x20000da4

0800f8e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b085      	sub	sp, #20
 800f8e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f8ea:	4b2a      	ldr	r3, [pc, #168]	; (800f994 <vTaskSwitchContext+0xb0>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d003      	beq.n	800f8fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f8f2:	4b29      	ldr	r3, [pc, #164]	; (800f998 <vTaskSwitchContext+0xb4>)
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f8f8:	e046      	b.n	800f988 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f8fa:	4b27      	ldr	r3, [pc, #156]	; (800f998 <vTaskSwitchContext+0xb4>)
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f900:	4b26      	ldr	r3, [pc, #152]	; (800f99c <vTaskSwitchContext+0xb8>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	60fb      	str	r3, [r7, #12]
 800f906:	e010      	b.n	800f92a <vTaskSwitchContext+0x46>
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d10a      	bne.n	800f924 <vTaskSwitchContext+0x40>
	__asm volatile
 800f90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f912:	f383 8811 	msr	BASEPRI, r3
 800f916:	f3bf 8f6f 	isb	sy
 800f91a:	f3bf 8f4f 	dsb	sy
 800f91e:	607b      	str	r3, [r7, #4]
}
 800f920:	bf00      	nop
 800f922:	e7fe      	b.n	800f922 <vTaskSwitchContext+0x3e>
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	3b01      	subs	r3, #1
 800f928:	60fb      	str	r3, [r7, #12]
 800f92a:	491d      	ldr	r1, [pc, #116]	; (800f9a0 <vTaskSwitchContext+0xbc>)
 800f92c:	68fa      	ldr	r2, [r7, #12]
 800f92e:	4613      	mov	r3, r2
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	4413      	add	r3, r2
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	440b      	add	r3, r1
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d0e4      	beq.n	800f908 <vTaskSwitchContext+0x24>
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	4613      	mov	r3, r2
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	4413      	add	r3, r2
 800f946:	009b      	lsls	r3, r3, #2
 800f948:	4a15      	ldr	r2, [pc, #84]	; (800f9a0 <vTaskSwitchContext+0xbc>)
 800f94a:	4413      	add	r3, r2
 800f94c:	60bb      	str	r3, [r7, #8]
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	685b      	ldr	r3, [r3, #4]
 800f952:	685a      	ldr	r2, [r3, #4]
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	605a      	str	r2, [r3, #4]
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	685a      	ldr	r2, [r3, #4]
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	3308      	adds	r3, #8
 800f960:	429a      	cmp	r2, r3
 800f962:	d104      	bne.n	800f96e <vTaskSwitchContext+0x8a>
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	685a      	ldr	r2, [r3, #4]
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	605a      	str	r2, [r3, #4]
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	4a0b      	ldr	r2, [pc, #44]	; (800f9a4 <vTaskSwitchContext+0xc0>)
 800f976:	6013      	str	r3, [r2, #0]
 800f978:	4a08      	ldr	r2, [pc, #32]	; (800f99c <vTaskSwitchContext+0xb8>)
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f97e:	4b09      	ldr	r3, [pc, #36]	; (800f9a4 <vTaskSwitchContext+0xc0>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	3354      	adds	r3, #84	; 0x54
 800f984:	4a08      	ldr	r2, [pc, #32]	; (800f9a8 <vTaskSwitchContext+0xc4>)
 800f986:	6013      	str	r3, [r2, #0]
}
 800f988:	bf00      	nop
 800f98a:	3714      	adds	r7, #20
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr
 800f994:	20000dbc 	.word	0x20000dbc
 800f998:	20000da8 	.word	0x20000da8
 800f99c:	20000d9c 	.word	0x20000d9c
 800f9a0:	200008c4 	.word	0x200008c4
 800f9a4:	200008c0 	.word	0x200008c0
 800f9a8:	20000044 	.word	0x20000044

0800f9ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d10a      	bne.n	800f9d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c0:	f383 8811 	msr	BASEPRI, r3
 800f9c4:	f3bf 8f6f 	isb	sy
 800f9c8:	f3bf 8f4f 	dsb	sy
 800f9cc:	60fb      	str	r3, [r7, #12]
}
 800f9ce:	bf00      	nop
 800f9d0:	e7fe      	b.n	800f9d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f9d2:	4b07      	ldr	r3, [pc, #28]	; (800f9f0 <vTaskPlaceOnEventList+0x44>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	3318      	adds	r3, #24
 800f9d8:	4619      	mov	r1, r3
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f7fe fd63 	bl	800e4a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f9e0:	2101      	movs	r1, #1
 800f9e2:	6838      	ldr	r0, [r7, #0]
 800f9e4:	f000 fc82 	bl	80102ec <prvAddCurrentTaskToDelayedList>
}
 800f9e8:	bf00      	nop
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	200008c0 	.word	0x200008c0

0800f9f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b086      	sub	sp, #24
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d10a      	bne.n	800fa1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa0a:	f383 8811 	msr	BASEPRI, r3
 800fa0e:	f3bf 8f6f 	isb	sy
 800fa12:	f3bf 8f4f 	dsb	sy
 800fa16:	617b      	str	r3, [r7, #20]
}
 800fa18:	bf00      	nop
 800fa1a:	e7fe      	b.n	800fa1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa1c:	4b0a      	ldr	r3, [pc, #40]	; (800fa48 <vTaskPlaceOnEventListRestricted+0x54>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	3318      	adds	r3, #24
 800fa22:	4619      	mov	r1, r3
 800fa24:	68f8      	ldr	r0, [r7, #12]
 800fa26:	f7fe fd1a 	bl	800e45e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fa30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fa36:	6879      	ldr	r1, [r7, #4]
 800fa38:	68b8      	ldr	r0, [r7, #8]
 800fa3a:	f000 fc57 	bl	80102ec <prvAddCurrentTaskToDelayedList>
	}
 800fa3e:	bf00      	nop
 800fa40:	3718      	adds	r7, #24
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
 800fa46:	bf00      	nop
 800fa48:	200008c0 	.word	0x200008c0

0800fa4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b086      	sub	sp, #24
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	68db      	ldr	r3, [r3, #12]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d10a      	bne.n	800fa78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa66:	f383 8811 	msr	BASEPRI, r3
 800fa6a:	f3bf 8f6f 	isb	sy
 800fa6e:	f3bf 8f4f 	dsb	sy
 800fa72:	60fb      	str	r3, [r7, #12]
}
 800fa74:	bf00      	nop
 800fa76:	e7fe      	b.n	800fa76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	3318      	adds	r3, #24
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7fe fd4b 	bl	800e518 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa82:	4b1e      	ldr	r3, [pc, #120]	; (800fafc <xTaskRemoveFromEventList+0xb0>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d11d      	bne.n	800fac6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	3304      	adds	r3, #4
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fe fd42 	bl	800e518 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa98:	4b19      	ldr	r3, [pc, #100]	; (800fb00 <xTaskRemoveFromEventList+0xb4>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d903      	bls.n	800faa8 <xTaskRemoveFromEventList+0x5c>
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faa4:	4a16      	ldr	r2, [pc, #88]	; (800fb00 <xTaskRemoveFromEventList+0xb4>)
 800faa6:	6013      	str	r3, [r2, #0]
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faac:	4613      	mov	r3, r2
 800faae:	009b      	lsls	r3, r3, #2
 800fab0:	4413      	add	r3, r2
 800fab2:	009b      	lsls	r3, r3, #2
 800fab4:	4a13      	ldr	r2, [pc, #76]	; (800fb04 <xTaskRemoveFromEventList+0xb8>)
 800fab6:	441a      	add	r2, r3
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	3304      	adds	r3, #4
 800fabc:	4619      	mov	r1, r3
 800fabe:	4610      	mov	r0, r2
 800fac0:	f7fe fccd 	bl	800e45e <vListInsertEnd>
 800fac4:	e005      	b.n	800fad2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	3318      	adds	r3, #24
 800faca:	4619      	mov	r1, r3
 800facc:	480e      	ldr	r0, [pc, #56]	; (800fb08 <xTaskRemoveFromEventList+0xbc>)
 800face:	f7fe fcc6 	bl	800e45e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fad6:	4b0d      	ldr	r3, [pc, #52]	; (800fb0c <xTaskRemoveFromEventList+0xc0>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fadc:	429a      	cmp	r2, r3
 800fade:	d905      	bls.n	800faec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fae0:	2301      	movs	r3, #1
 800fae2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fae4:	4b0a      	ldr	r3, [pc, #40]	; (800fb10 <xTaskRemoveFromEventList+0xc4>)
 800fae6:	2201      	movs	r2, #1
 800fae8:	601a      	str	r2, [r3, #0]
 800faea:	e001      	b.n	800faf0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800faec:	2300      	movs	r3, #0
 800faee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800faf0:	697b      	ldr	r3, [r7, #20]
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3718      	adds	r7, #24
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	20000dbc 	.word	0x20000dbc
 800fb00:	20000d9c 	.word	0x20000d9c
 800fb04:	200008c4 	.word	0x200008c4
 800fb08:	20000d54 	.word	0x20000d54
 800fb0c:	200008c0 	.word	0x200008c0
 800fb10:	20000da8 	.word	0x20000da8

0800fb14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fb1c:	4b06      	ldr	r3, [pc, #24]	; (800fb38 <vTaskInternalSetTimeOutState+0x24>)
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fb24:	4b05      	ldr	r3, [pc, #20]	; (800fb3c <vTaskInternalSetTimeOutState+0x28>)
 800fb26:	681a      	ldr	r2, [r3, #0]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	605a      	str	r2, [r3, #4]
}
 800fb2c:	bf00      	nop
 800fb2e:	370c      	adds	r7, #12
 800fb30:	46bd      	mov	sp, r7
 800fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb36:	4770      	bx	lr
 800fb38:	20000dac 	.word	0x20000dac
 800fb3c:	20000d98 	.word	0x20000d98

0800fb40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b088      	sub	sp, #32
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d10a      	bne.n	800fb66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb54:	f383 8811 	msr	BASEPRI, r3
 800fb58:	f3bf 8f6f 	isb	sy
 800fb5c:	f3bf 8f4f 	dsb	sy
 800fb60:	613b      	str	r3, [r7, #16]
}
 800fb62:	bf00      	nop
 800fb64:	e7fe      	b.n	800fb64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d10a      	bne.n	800fb82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb70:	f383 8811 	msr	BASEPRI, r3
 800fb74:	f3bf 8f6f 	isb	sy
 800fb78:	f3bf 8f4f 	dsb	sy
 800fb7c:	60fb      	str	r3, [r7, #12]
}
 800fb7e:	bf00      	nop
 800fb80:	e7fe      	b.n	800fb80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fb82:	f001 f8ff 	bl	8010d84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fb86:	4b1d      	ldr	r3, [pc, #116]	; (800fbfc <xTaskCheckForTimeOut+0xbc>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	685b      	ldr	r3, [r3, #4]
 800fb90:	69ba      	ldr	r2, [r7, #24]
 800fb92:	1ad3      	subs	r3, r2, r3
 800fb94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb9e:	d102      	bne.n	800fba6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fba0:	2300      	movs	r3, #0
 800fba2:	61fb      	str	r3, [r7, #28]
 800fba4:	e023      	b.n	800fbee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681a      	ldr	r2, [r3, #0]
 800fbaa:	4b15      	ldr	r3, [pc, #84]	; (800fc00 <xTaskCheckForTimeOut+0xc0>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d007      	beq.n	800fbc2 <xTaskCheckForTimeOut+0x82>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	69ba      	ldr	r2, [r7, #24]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d302      	bcc.n	800fbc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	61fb      	str	r3, [r7, #28]
 800fbc0:	e015      	b.n	800fbee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	697a      	ldr	r2, [r7, #20]
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d20b      	bcs.n	800fbe4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	1ad2      	subs	r2, r2, r3
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7ff ff9b 	bl	800fb14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	61fb      	str	r3, [r7, #28]
 800fbe2:	e004      	b.n	800fbee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fbea:	2301      	movs	r3, #1
 800fbec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fbee:	f001 f8f9 	bl	8010de4 <vPortExitCritical>

	return xReturn;
 800fbf2:	69fb      	ldr	r3, [r7, #28]
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3720      	adds	r7, #32
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	20000d98 	.word	0x20000d98
 800fc00:	20000dac 	.word	0x20000dac

0800fc04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fc04:	b480      	push	{r7}
 800fc06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fc08:	4b03      	ldr	r3, [pc, #12]	; (800fc18 <vTaskMissedYield+0x14>)
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	601a      	str	r2, [r3, #0]
}
 800fc0e:	bf00      	nop
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr
 800fc18:	20000da8 	.word	0x20000da8

0800fc1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fc24:	f000 f852 	bl	800fccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fc28:	4b06      	ldr	r3, [pc, #24]	; (800fc44 <prvIdleTask+0x28>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d9f9      	bls.n	800fc24 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fc30:	4b05      	ldr	r3, [pc, #20]	; (800fc48 <prvIdleTask+0x2c>)
 800fc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc36:	601a      	str	r2, [r3, #0]
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fc40:	e7f0      	b.n	800fc24 <prvIdleTask+0x8>
 800fc42:	bf00      	nop
 800fc44:	200008c4 	.word	0x200008c4
 800fc48:	e000ed04 	.word	0xe000ed04

0800fc4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc52:	2300      	movs	r3, #0
 800fc54:	607b      	str	r3, [r7, #4]
 800fc56:	e00c      	b.n	800fc72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	4613      	mov	r3, r2
 800fc5c:	009b      	lsls	r3, r3, #2
 800fc5e:	4413      	add	r3, r2
 800fc60:	009b      	lsls	r3, r3, #2
 800fc62:	4a12      	ldr	r2, [pc, #72]	; (800fcac <prvInitialiseTaskLists+0x60>)
 800fc64:	4413      	add	r3, r2
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fe fbcc 	bl	800e404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	607b      	str	r3, [r7, #4]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2b37      	cmp	r3, #55	; 0x37
 800fc76:	d9ef      	bls.n	800fc58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fc78:	480d      	ldr	r0, [pc, #52]	; (800fcb0 <prvInitialiseTaskLists+0x64>)
 800fc7a:	f7fe fbc3 	bl	800e404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fc7e:	480d      	ldr	r0, [pc, #52]	; (800fcb4 <prvInitialiseTaskLists+0x68>)
 800fc80:	f7fe fbc0 	bl	800e404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fc84:	480c      	ldr	r0, [pc, #48]	; (800fcb8 <prvInitialiseTaskLists+0x6c>)
 800fc86:	f7fe fbbd 	bl	800e404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fc8a:	480c      	ldr	r0, [pc, #48]	; (800fcbc <prvInitialiseTaskLists+0x70>)
 800fc8c:	f7fe fbba 	bl	800e404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fc90:	480b      	ldr	r0, [pc, #44]	; (800fcc0 <prvInitialiseTaskLists+0x74>)
 800fc92:	f7fe fbb7 	bl	800e404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fc96:	4b0b      	ldr	r3, [pc, #44]	; (800fcc4 <prvInitialiseTaskLists+0x78>)
 800fc98:	4a05      	ldr	r2, [pc, #20]	; (800fcb0 <prvInitialiseTaskLists+0x64>)
 800fc9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fc9c:	4b0a      	ldr	r3, [pc, #40]	; (800fcc8 <prvInitialiseTaskLists+0x7c>)
 800fc9e:	4a05      	ldr	r2, [pc, #20]	; (800fcb4 <prvInitialiseTaskLists+0x68>)
 800fca0:	601a      	str	r2, [r3, #0]
}
 800fca2:	bf00      	nop
 800fca4:	3708      	adds	r7, #8
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	200008c4 	.word	0x200008c4
 800fcb0:	20000d24 	.word	0x20000d24
 800fcb4:	20000d38 	.word	0x20000d38
 800fcb8:	20000d54 	.word	0x20000d54
 800fcbc:	20000d68 	.word	0x20000d68
 800fcc0:	20000d80 	.word	0x20000d80
 800fcc4:	20000d4c 	.word	0x20000d4c
 800fcc8:	20000d50 	.word	0x20000d50

0800fccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fcd2:	e019      	b.n	800fd08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fcd4:	f001 f856 	bl	8010d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcd8:	4b10      	ldr	r3, [pc, #64]	; (800fd1c <prvCheckTasksWaitingTermination+0x50>)
 800fcda:	68db      	ldr	r3, [r3, #12]
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	3304      	adds	r3, #4
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7fe fc17 	bl	800e518 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fcea:	4b0d      	ldr	r3, [pc, #52]	; (800fd20 <prvCheckTasksWaitingTermination+0x54>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	3b01      	subs	r3, #1
 800fcf0:	4a0b      	ldr	r2, [pc, #44]	; (800fd20 <prvCheckTasksWaitingTermination+0x54>)
 800fcf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fcf4:	4b0b      	ldr	r3, [pc, #44]	; (800fd24 <prvCheckTasksWaitingTermination+0x58>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	4a0a      	ldr	r2, [pc, #40]	; (800fd24 <prvCheckTasksWaitingTermination+0x58>)
 800fcfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fcfe:	f001 f871 	bl	8010de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f810 	bl	800fd28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd08:	4b06      	ldr	r3, [pc, #24]	; (800fd24 <prvCheckTasksWaitingTermination+0x58>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d1e1      	bne.n	800fcd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fd10:	bf00      	nop
 800fd12:	bf00      	nop
 800fd14:	3708      	adds	r7, #8
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	20000d68 	.word	0x20000d68
 800fd20:	20000d94 	.word	0x20000d94
 800fd24:	20000d7c 	.word	0x20000d7c

0800fd28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b084      	sub	sp, #16
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	3354      	adds	r3, #84	; 0x54
 800fd34:	4618      	mov	r0, r3
 800fd36:	f001 ff3d 	bl	8011bb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d108      	bne.n	800fd56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f001 fa09 	bl	8011160 <vPortFree>
				vPortFree( pxTCB );
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f001 fa06 	bl	8011160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fd54:	e018      	b.n	800fd88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d103      	bne.n	800fd68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f001 f9fd 	bl	8011160 <vPortFree>
	}
 800fd66:	e00f      	b.n	800fd88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fd6e:	2b02      	cmp	r3, #2
 800fd70:	d00a      	beq.n	800fd88 <prvDeleteTCB+0x60>
	__asm volatile
 800fd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd76:	f383 8811 	msr	BASEPRI, r3
 800fd7a:	f3bf 8f6f 	isb	sy
 800fd7e:	f3bf 8f4f 	dsb	sy
 800fd82:	60fb      	str	r3, [r7, #12]
}
 800fd84:	bf00      	nop
 800fd86:	e7fe      	b.n	800fd86 <prvDeleteTCB+0x5e>
	}
 800fd88:	bf00      	nop
 800fd8a:	3710      	adds	r7, #16
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd96:	4b0c      	ldr	r3, [pc, #48]	; (800fdc8 <prvResetNextTaskUnblockTime+0x38>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d104      	bne.n	800fdaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fda0:	4b0a      	ldr	r3, [pc, #40]	; (800fdcc <prvResetNextTaskUnblockTime+0x3c>)
 800fda2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fda6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fda8:	e008      	b.n	800fdbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdaa:	4b07      	ldr	r3, [pc, #28]	; (800fdc8 <prvResetNextTaskUnblockTime+0x38>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	4a04      	ldr	r2, [pc, #16]	; (800fdcc <prvResetNextTaskUnblockTime+0x3c>)
 800fdba:	6013      	str	r3, [r2, #0]
}
 800fdbc:	bf00      	nop
 800fdbe:	370c      	adds	r7, #12
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr
 800fdc8:	20000d4c 	.word	0x20000d4c
 800fdcc:	20000db4 	.word	0x20000db4

0800fdd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fdd6:	4b0b      	ldr	r3, [pc, #44]	; (800fe04 <xTaskGetSchedulerState+0x34>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d102      	bne.n	800fde4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fdde:	2301      	movs	r3, #1
 800fde0:	607b      	str	r3, [r7, #4]
 800fde2:	e008      	b.n	800fdf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fde4:	4b08      	ldr	r3, [pc, #32]	; (800fe08 <xTaskGetSchedulerState+0x38>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d102      	bne.n	800fdf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fdec:	2302      	movs	r3, #2
 800fdee:	607b      	str	r3, [r7, #4]
 800fdf0:	e001      	b.n	800fdf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fdf6:	687b      	ldr	r3, [r7, #4]
	}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	370c      	adds	r7, #12
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr
 800fe04:	20000da0 	.word	0x20000da0
 800fe08:	20000dbc 	.word	0x20000dbc

0800fe0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b086      	sub	sp, #24
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d056      	beq.n	800fed0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fe22:	4b2e      	ldr	r3, [pc, #184]	; (800fedc <xTaskPriorityDisinherit+0xd0>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	693a      	ldr	r2, [r7, #16]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d00a      	beq.n	800fe42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fe2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe30:	f383 8811 	msr	BASEPRI, r3
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	60fb      	str	r3, [r7, #12]
}
 800fe3e:	bf00      	nop
 800fe40:	e7fe      	b.n	800fe40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d10a      	bne.n	800fe60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fe4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe4e:	f383 8811 	msr	BASEPRI, r3
 800fe52:	f3bf 8f6f 	isb	sy
 800fe56:	f3bf 8f4f 	dsb	sy
 800fe5a:	60bb      	str	r3, [r7, #8]
}
 800fe5c:	bf00      	nop
 800fe5e:	e7fe      	b.n	800fe5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe64:	1e5a      	subs	r2, r3, #1
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d02c      	beq.n	800fed0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d128      	bne.n	800fed0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	3304      	adds	r3, #4
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fe fb48 	bl	800e518 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fea0:	4b0f      	ldr	r3, [pc, #60]	; (800fee0 <xTaskPriorityDisinherit+0xd4>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d903      	bls.n	800feb0 <xTaskPriorityDisinherit+0xa4>
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feac:	4a0c      	ldr	r2, [pc, #48]	; (800fee0 <xTaskPriorityDisinherit+0xd4>)
 800feae:	6013      	str	r3, [r2, #0]
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb4:	4613      	mov	r3, r2
 800feb6:	009b      	lsls	r3, r3, #2
 800feb8:	4413      	add	r3, r2
 800feba:	009b      	lsls	r3, r3, #2
 800febc:	4a09      	ldr	r2, [pc, #36]	; (800fee4 <xTaskPriorityDisinherit+0xd8>)
 800febe:	441a      	add	r2, r3
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	3304      	adds	r3, #4
 800fec4:	4619      	mov	r1, r3
 800fec6:	4610      	mov	r0, r2
 800fec8:	f7fe fac9 	bl	800e45e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fecc:	2301      	movs	r3, #1
 800fece:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fed0:	697b      	ldr	r3, [r7, #20]
	}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3718      	adds	r7, #24
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop
 800fedc:	200008c0 	.word	0x200008c0
 800fee0:	20000d9c 	.word	0x20000d9c
 800fee4:	200008c4 	.word	0x200008c4

0800fee8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b086      	sub	sp, #24
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	607a      	str	r2, [r7, #4]
 800fef4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800fef6:	f000 ff45 	bl	8010d84 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fefa:	4b29      	ldr	r3, [pc, #164]	; (800ffa0 <xTaskNotifyWait+0xb8>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	2b02      	cmp	r3, #2
 800ff06:	d01c      	beq.n	800ff42 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ff08:	4b25      	ldr	r3, [pc, #148]	; (800ffa0 <xTaskNotifyWait+0xb8>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ff10:	68fa      	ldr	r2, [r7, #12]
 800ff12:	43d2      	mvns	r2, r2
 800ff14:	400a      	ands	r2, r1
 800ff16:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ff1a:	4b21      	ldr	r3, [pc, #132]	; (800ffa0 <xTaskNotifyWait+0xb8>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	2201      	movs	r2, #1
 800ff20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d00b      	beq.n	800ff42 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff2a:	2101      	movs	r1, #1
 800ff2c:	6838      	ldr	r0, [r7, #0]
 800ff2e:	f000 f9dd 	bl	80102ec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ff32:	4b1c      	ldr	r3, [pc, #112]	; (800ffa4 <xTaskNotifyWait+0xbc>)
 800ff34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff38:	601a      	str	r2, [r3, #0]
 800ff3a:	f3bf 8f4f 	dsb	sy
 800ff3e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ff42:	f000 ff4f 	bl	8010de4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ff46:	f000 ff1d 	bl	8010d84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d005      	beq.n	800ff5c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ff50:	4b13      	ldr	r3, [pc, #76]	; (800ffa0 <xTaskNotifyWait+0xb8>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ff5c:	4b10      	ldr	r3, [pc, #64]	; (800ffa0 <xTaskNotifyWait+0xb8>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ff64:	b2db      	uxtb	r3, r3
 800ff66:	2b02      	cmp	r3, #2
 800ff68:	d002      	beq.n	800ff70 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	617b      	str	r3, [r7, #20]
 800ff6e:	e00a      	b.n	800ff86 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ff70:	4b0b      	ldr	r3, [pc, #44]	; (800ffa0 <xTaskNotifyWait+0xb8>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ff78:	68ba      	ldr	r2, [r7, #8]
 800ff7a:	43d2      	mvns	r2, r2
 800ff7c:	400a      	ands	r2, r1
 800ff7e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800ff82:	2301      	movs	r3, #1
 800ff84:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ff86:	4b06      	ldr	r3, [pc, #24]	; (800ffa0 <xTaskNotifyWait+0xb8>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800ff90:	f000 ff28 	bl	8010de4 <vPortExitCritical>

		return xReturn;
 800ff94:	697b      	ldr	r3, [r7, #20]
	}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3718      	adds	r7, #24
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	200008c0 	.word	0x200008c0
 800ffa4:	e000ed04 	.word	0xe000ed04

0800ffa8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b08a      	sub	sp, #40	; 0x28
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	603b      	str	r3, [r7, #0]
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d10a      	bne.n	800ffd8 <xTaskGenericNotify+0x30>
	__asm volatile
 800ffc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc6:	f383 8811 	msr	BASEPRI, r3
 800ffca:	f3bf 8f6f 	isb	sy
 800ffce:	f3bf 8f4f 	dsb	sy
 800ffd2:	61bb      	str	r3, [r7, #24]
}
 800ffd4:	bf00      	nop
 800ffd6:	e7fe      	b.n	800ffd6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ffdc:	f000 fed2 	bl	8010d84 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d004      	beq.n	800fff0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ffe6:	6a3b      	ldr	r3, [r7, #32]
 800ffe8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fff0:	6a3b      	ldr	r3, [r7, #32]
 800fff2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800fff6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fff8:	6a3b      	ldr	r3, [r7, #32]
 800fffa:	2202      	movs	r2, #2
 800fffc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8010000:	79fb      	ldrb	r3, [r7, #7]
 8010002:	2b04      	cmp	r3, #4
 8010004:	d82d      	bhi.n	8010062 <xTaskGenericNotify+0xba>
 8010006:	a201      	add	r2, pc, #4	; (adr r2, 801000c <xTaskGenericNotify+0x64>)
 8010008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801000c:	08010085 	.word	0x08010085
 8010010:	08010021 	.word	0x08010021
 8010014:	08010033 	.word	0x08010033
 8010018:	08010043 	.word	0x08010043
 801001c:	0801004d 	.word	0x0801004d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010020:	6a3b      	ldr	r3, [r7, #32]
 8010022:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	431a      	orrs	r2, r3
 801002a:	6a3b      	ldr	r3, [r7, #32]
 801002c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8010030:	e02b      	b.n	801008a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010032:	6a3b      	ldr	r3, [r7, #32]
 8010034:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010038:	1c5a      	adds	r2, r3, #1
 801003a:	6a3b      	ldr	r3, [r7, #32]
 801003c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8010040:	e023      	b.n	801008a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010042:	6a3b      	ldr	r3, [r7, #32]
 8010044:	68ba      	ldr	r2, [r7, #8]
 8010046:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 801004a:	e01e      	b.n	801008a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801004c:	7ffb      	ldrb	r3, [r7, #31]
 801004e:	2b02      	cmp	r3, #2
 8010050:	d004      	beq.n	801005c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010052:	6a3b      	ldr	r3, [r7, #32]
 8010054:	68ba      	ldr	r2, [r7, #8]
 8010056:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801005a:	e016      	b.n	801008a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 801005c:	2300      	movs	r3, #0
 801005e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010060:	e013      	b.n	801008a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801006c:	d00c      	beq.n	8010088 <xTaskGenericNotify+0xe0>
	__asm volatile
 801006e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010072:	f383 8811 	msr	BASEPRI, r3
 8010076:	f3bf 8f6f 	isb	sy
 801007a:	f3bf 8f4f 	dsb	sy
 801007e:	617b      	str	r3, [r7, #20]
}
 8010080:	bf00      	nop
 8010082:	e7fe      	b.n	8010082 <xTaskGenericNotify+0xda>
					break;
 8010084:	bf00      	nop
 8010086:	e000      	b.n	801008a <xTaskGenericNotify+0xe2>

					break;
 8010088:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801008a:	7ffb      	ldrb	r3, [r7, #31]
 801008c:	2b01      	cmp	r3, #1
 801008e:	d13a      	bne.n	8010106 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010090:	6a3b      	ldr	r3, [r7, #32]
 8010092:	3304      	adds	r3, #4
 8010094:	4618      	mov	r0, r3
 8010096:	f7fe fa3f 	bl	800e518 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801009a:	6a3b      	ldr	r3, [r7, #32]
 801009c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801009e:	4b1d      	ldr	r3, [pc, #116]	; (8010114 <xTaskGenericNotify+0x16c>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d903      	bls.n	80100ae <xTaskGenericNotify+0x106>
 80100a6:	6a3b      	ldr	r3, [r7, #32]
 80100a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100aa:	4a1a      	ldr	r2, [pc, #104]	; (8010114 <xTaskGenericNotify+0x16c>)
 80100ac:	6013      	str	r3, [r2, #0]
 80100ae:	6a3b      	ldr	r3, [r7, #32]
 80100b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100b2:	4613      	mov	r3, r2
 80100b4:	009b      	lsls	r3, r3, #2
 80100b6:	4413      	add	r3, r2
 80100b8:	009b      	lsls	r3, r3, #2
 80100ba:	4a17      	ldr	r2, [pc, #92]	; (8010118 <xTaskGenericNotify+0x170>)
 80100bc:	441a      	add	r2, r3
 80100be:	6a3b      	ldr	r3, [r7, #32]
 80100c0:	3304      	adds	r3, #4
 80100c2:	4619      	mov	r1, r3
 80100c4:	4610      	mov	r0, r2
 80100c6:	f7fe f9ca 	bl	800e45e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80100ca:	6a3b      	ldr	r3, [r7, #32]
 80100cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00a      	beq.n	80100e8 <xTaskGenericNotify+0x140>
	__asm volatile
 80100d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d6:	f383 8811 	msr	BASEPRI, r3
 80100da:	f3bf 8f6f 	isb	sy
 80100de:	f3bf 8f4f 	dsb	sy
 80100e2:	613b      	str	r3, [r7, #16]
}
 80100e4:	bf00      	nop
 80100e6:	e7fe      	b.n	80100e6 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80100e8:	6a3b      	ldr	r3, [r7, #32]
 80100ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ec:	4b0b      	ldr	r3, [pc, #44]	; (801011c <xTaskGenericNotify+0x174>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d907      	bls.n	8010106 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80100f6:	4b0a      	ldr	r3, [pc, #40]	; (8010120 <xTaskGenericNotify+0x178>)
 80100f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100fc:	601a      	str	r2, [r3, #0]
 80100fe:	f3bf 8f4f 	dsb	sy
 8010102:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010106:	f000 fe6d 	bl	8010de4 <vPortExitCritical>

		return xReturn;
 801010a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801010c:	4618      	mov	r0, r3
 801010e:	3728      	adds	r7, #40	; 0x28
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}
 8010114:	20000d9c 	.word	0x20000d9c
 8010118:	200008c4 	.word	0x200008c4
 801011c:	200008c0 	.word	0x200008c0
 8010120:	e000ed04 	.word	0xe000ed04

08010124 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010124:	b580      	push	{r7, lr}
 8010126:	b08e      	sub	sp, #56	; 0x38
 8010128:	af00      	add	r7, sp, #0
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	60b9      	str	r1, [r7, #8]
 801012e:	603b      	str	r3, [r7, #0]
 8010130:	4613      	mov	r3, r2
 8010132:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010134:	2301      	movs	r3, #1
 8010136:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d10a      	bne.n	8010154 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 801013e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010142:	f383 8811 	msr	BASEPRI, r3
 8010146:	f3bf 8f6f 	isb	sy
 801014a:	f3bf 8f4f 	dsb	sy
 801014e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010150:	bf00      	nop
 8010152:	e7fe      	b.n	8010152 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010154:	f000 fef8 	bl	8010f48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801015c:	f3ef 8211 	mrs	r2, BASEPRI
 8010160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010164:	f383 8811 	msr	BASEPRI, r3
 8010168:	f3bf 8f6f 	isb	sy
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	623a      	str	r2, [r7, #32]
 8010172:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010174:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010176:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d004      	beq.n	8010188 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801017e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010180:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801018a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 801018e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010194:	2202      	movs	r2, #2
 8010196:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 801019a:	79fb      	ldrb	r3, [r7, #7]
 801019c:	2b04      	cmp	r3, #4
 801019e:	d82f      	bhi.n	8010200 <xTaskGenericNotifyFromISR+0xdc>
 80101a0:	a201      	add	r2, pc, #4	; (adr r2, 80101a8 <xTaskGenericNotifyFromISR+0x84>)
 80101a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101a6:	bf00      	nop
 80101a8:	08010223 	.word	0x08010223
 80101ac:	080101bd 	.word	0x080101bd
 80101b0:	080101cf 	.word	0x080101cf
 80101b4:	080101df 	.word	0x080101df
 80101b8:	080101e9 	.word	0x080101e9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80101bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101be:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	431a      	orrs	r2, r3
 80101c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80101cc:	e02c      	b.n	8010228 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80101ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80101d4:	1c5a      	adds	r2, r3, #1
 80101d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80101dc:	e024      	b.n	8010228 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80101de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e0:	68ba      	ldr	r2, [r7, #8]
 80101e2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80101e6:	e01f      	b.n	8010228 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80101e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80101ec:	2b02      	cmp	r3, #2
 80101ee:	d004      	beq.n	80101fa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80101f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f2:	68ba      	ldr	r2, [r7, #8]
 80101f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80101f8:	e016      	b.n	8010228 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80101fa:	2300      	movs	r3, #0
 80101fc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80101fe:	e013      	b.n	8010228 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010202:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801020a:	d00c      	beq.n	8010226 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 801020c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010210:	f383 8811 	msr	BASEPRI, r3
 8010214:	f3bf 8f6f 	isb	sy
 8010218:	f3bf 8f4f 	dsb	sy
 801021c:	61bb      	str	r3, [r7, #24]
}
 801021e:	bf00      	nop
 8010220:	e7fe      	b.n	8010220 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8010222:	bf00      	nop
 8010224:	e000      	b.n	8010228 <xTaskGenericNotifyFromISR+0x104>
					break;
 8010226:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010228:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801022c:	2b01      	cmp	r3, #1
 801022e:	d146      	bne.n	80102be <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00a      	beq.n	801024e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8010238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023c:	f383 8811 	msr	BASEPRI, r3
 8010240:	f3bf 8f6f 	isb	sy
 8010244:	f3bf 8f4f 	dsb	sy
 8010248:	617b      	str	r3, [r7, #20]
}
 801024a:	bf00      	nop
 801024c:	e7fe      	b.n	801024c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801024e:	4b21      	ldr	r3, [pc, #132]	; (80102d4 <xTaskGenericNotifyFromISR+0x1b0>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d11d      	bne.n	8010292 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010258:	3304      	adds	r3, #4
 801025a:	4618      	mov	r0, r3
 801025c:	f7fe f95c 	bl	800e518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010264:	4b1c      	ldr	r3, [pc, #112]	; (80102d8 <xTaskGenericNotifyFromISR+0x1b4>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	429a      	cmp	r2, r3
 801026a:	d903      	bls.n	8010274 <xTaskGenericNotifyFromISR+0x150>
 801026c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010270:	4a19      	ldr	r2, [pc, #100]	; (80102d8 <xTaskGenericNotifyFromISR+0x1b4>)
 8010272:	6013      	str	r3, [r2, #0]
 8010274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010278:	4613      	mov	r3, r2
 801027a:	009b      	lsls	r3, r3, #2
 801027c:	4413      	add	r3, r2
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	4a16      	ldr	r2, [pc, #88]	; (80102dc <xTaskGenericNotifyFromISR+0x1b8>)
 8010282:	441a      	add	r2, r3
 8010284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010286:	3304      	adds	r3, #4
 8010288:	4619      	mov	r1, r3
 801028a:	4610      	mov	r0, r2
 801028c:	f7fe f8e7 	bl	800e45e <vListInsertEnd>
 8010290:	e005      	b.n	801029e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010294:	3318      	adds	r3, #24
 8010296:	4619      	mov	r1, r3
 8010298:	4811      	ldr	r0, [pc, #68]	; (80102e0 <xTaskGenericNotifyFromISR+0x1bc>)
 801029a:	f7fe f8e0 	bl	800e45e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801029e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102a2:	4b10      	ldr	r3, [pc, #64]	; (80102e4 <xTaskGenericNotifyFromISR+0x1c0>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d908      	bls.n	80102be <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80102ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d002      	beq.n	80102b8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80102b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102b4:	2201      	movs	r2, #1
 80102b6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80102b8:	4b0b      	ldr	r3, [pc, #44]	; (80102e8 <xTaskGenericNotifyFromISR+0x1c4>)
 80102ba:	2201      	movs	r2, #1
 80102bc:	601a      	str	r2, [r3, #0]
 80102be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	f383 8811 	msr	BASEPRI, r3
}
 80102c8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80102ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3738      	adds	r7, #56	; 0x38
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	20000dbc 	.word	0x20000dbc
 80102d8:	20000d9c 	.word	0x20000d9c
 80102dc:	200008c4 	.word	0x200008c4
 80102e0:	20000d54 	.word	0x20000d54
 80102e4:	200008c0 	.word	0x200008c0
 80102e8:	20000da8 	.word	0x20000da8

080102ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b084      	sub	sp, #16
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80102f6:	4b21      	ldr	r3, [pc, #132]	; (801037c <prvAddCurrentTaskToDelayedList+0x90>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102fc:	4b20      	ldr	r3, [pc, #128]	; (8010380 <prvAddCurrentTaskToDelayedList+0x94>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	3304      	adds	r3, #4
 8010302:	4618      	mov	r0, r3
 8010304:	f7fe f908 	bl	800e518 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801030e:	d10a      	bne.n	8010326 <prvAddCurrentTaskToDelayedList+0x3a>
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d007      	beq.n	8010326 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010316:	4b1a      	ldr	r3, [pc, #104]	; (8010380 <prvAddCurrentTaskToDelayedList+0x94>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	3304      	adds	r3, #4
 801031c:	4619      	mov	r1, r3
 801031e:	4819      	ldr	r0, [pc, #100]	; (8010384 <prvAddCurrentTaskToDelayedList+0x98>)
 8010320:	f7fe f89d 	bl	800e45e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010324:	e026      	b.n	8010374 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010326:	68fa      	ldr	r2, [r7, #12]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	4413      	add	r3, r2
 801032c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801032e:	4b14      	ldr	r3, [pc, #80]	; (8010380 <prvAddCurrentTaskToDelayedList+0x94>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	68ba      	ldr	r2, [r7, #8]
 8010334:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010336:	68ba      	ldr	r2, [r7, #8]
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	429a      	cmp	r2, r3
 801033c:	d209      	bcs.n	8010352 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801033e:	4b12      	ldr	r3, [pc, #72]	; (8010388 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	4b0f      	ldr	r3, [pc, #60]	; (8010380 <prvAddCurrentTaskToDelayedList+0x94>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	3304      	adds	r3, #4
 8010348:	4619      	mov	r1, r3
 801034a:	4610      	mov	r0, r2
 801034c:	f7fe f8ab 	bl	800e4a6 <vListInsert>
}
 8010350:	e010      	b.n	8010374 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010352:	4b0e      	ldr	r3, [pc, #56]	; (801038c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	4b0a      	ldr	r3, [pc, #40]	; (8010380 <prvAddCurrentTaskToDelayedList+0x94>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	3304      	adds	r3, #4
 801035c:	4619      	mov	r1, r3
 801035e:	4610      	mov	r0, r2
 8010360:	f7fe f8a1 	bl	800e4a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010364:	4b0a      	ldr	r3, [pc, #40]	; (8010390 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	68ba      	ldr	r2, [r7, #8]
 801036a:	429a      	cmp	r2, r3
 801036c:	d202      	bcs.n	8010374 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801036e:	4a08      	ldr	r2, [pc, #32]	; (8010390 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	6013      	str	r3, [r2, #0]
}
 8010374:	bf00      	nop
 8010376:	3710      	adds	r7, #16
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}
 801037c:	20000d98 	.word	0x20000d98
 8010380:	200008c0 	.word	0x200008c0
 8010384:	20000d80 	.word	0x20000d80
 8010388:	20000d50 	.word	0x20000d50
 801038c:	20000d4c 	.word	0x20000d4c
 8010390:	20000db4 	.word	0x20000db4

08010394 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b08a      	sub	sp, #40	; 0x28
 8010398:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801039a:	2300      	movs	r3, #0
 801039c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801039e:	f000 fb63 	bl	8010a68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80103a2:	4b1c      	ldr	r3, [pc, #112]	; (8010414 <xTimerCreateTimerTask+0x80>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d021      	beq.n	80103ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80103aa:	2300      	movs	r3, #0
 80103ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80103ae:	2300      	movs	r3, #0
 80103b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80103b2:	1d3a      	adds	r2, r7, #4
 80103b4:	f107 0108 	add.w	r1, r7, #8
 80103b8:	f107 030c 	add.w	r3, r7, #12
 80103bc:	4618      	mov	r0, r3
 80103be:	f7fe f807 	bl	800e3d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80103c2:	6879      	ldr	r1, [r7, #4]
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	68fa      	ldr	r2, [r7, #12]
 80103c8:	9202      	str	r2, [sp, #8]
 80103ca:	9301      	str	r3, [sp, #4]
 80103cc:	2302      	movs	r3, #2
 80103ce:	9300      	str	r3, [sp, #0]
 80103d0:	2300      	movs	r3, #0
 80103d2:	460a      	mov	r2, r1
 80103d4:	4910      	ldr	r1, [pc, #64]	; (8010418 <xTimerCreateTimerTask+0x84>)
 80103d6:	4811      	ldr	r0, [pc, #68]	; (801041c <xTimerCreateTimerTask+0x88>)
 80103d8:	f7fe feb2 	bl	800f140 <xTaskCreateStatic>
 80103dc:	4603      	mov	r3, r0
 80103de:	4a10      	ldr	r2, [pc, #64]	; (8010420 <xTimerCreateTimerTask+0x8c>)
 80103e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80103e2:	4b0f      	ldr	r3, [pc, #60]	; (8010420 <xTimerCreateTimerTask+0x8c>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d001      	beq.n	80103ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80103ea:	2301      	movs	r3, #1
 80103ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d10a      	bne.n	801040a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80103f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f8:	f383 8811 	msr	BASEPRI, r3
 80103fc:	f3bf 8f6f 	isb	sy
 8010400:	f3bf 8f4f 	dsb	sy
 8010404:	613b      	str	r3, [r7, #16]
}
 8010406:	bf00      	nop
 8010408:	e7fe      	b.n	8010408 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801040a:	697b      	ldr	r3, [r7, #20]
}
 801040c:	4618      	mov	r0, r3
 801040e:	3718      	adds	r7, #24
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}
 8010414:	20000df0 	.word	0x20000df0
 8010418:	080129a8 	.word	0x080129a8
 801041c:	08010611 	.word	0x08010611
 8010420:	20000df4 	.word	0x20000df4

08010424 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010424:	b580      	push	{r7, lr}
 8010426:	b088      	sub	sp, #32
 8010428:	af02      	add	r7, sp, #8
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]
 8010430:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010432:	202c      	movs	r0, #44	; 0x2c
 8010434:	f000 fdc8 	bl	8010fc8 <pvPortMalloc>
 8010438:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d00d      	beq.n	801045c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	2200      	movs	r2, #0
 8010444:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	9301      	str	r3, [sp, #4]
 801044c:	6a3b      	ldr	r3, [r7, #32]
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	687a      	ldr	r2, [r7, #4]
 8010454:	68b9      	ldr	r1, [r7, #8]
 8010456:	68f8      	ldr	r0, [r7, #12]
 8010458:	f000 f805 	bl	8010466 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801045c:	697b      	ldr	r3, [r7, #20]
	}
 801045e:	4618      	mov	r0, r3
 8010460:	3718      	adds	r7, #24
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}

08010466 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b086      	sub	sp, #24
 801046a:	af00      	add	r7, sp, #0
 801046c:	60f8      	str	r0, [r7, #12]
 801046e:	60b9      	str	r1, [r7, #8]
 8010470:	607a      	str	r2, [r7, #4]
 8010472:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d10a      	bne.n	8010490 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 801047a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047e:	f383 8811 	msr	BASEPRI, r3
 8010482:	f3bf 8f6f 	isb	sy
 8010486:	f3bf 8f4f 	dsb	sy
 801048a:	617b      	str	r3, [r7, #20]
}
 801048c:	bf00      	nop
 801048e:	e7fe      	b.n	801048e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8010490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010492:	2b00      	cmp	r3, #0
 8010494:	d01e      	beq.n	80104d4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8010496:	f000 fae7 	bl	8010a68 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801049a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049c:	68fa      	ldr	r2, [r7, #12]
 801049e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80104a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a2:	68ba      	ldr	r2, [r7, #8]
 80104a4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80104a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a8:	683a      	ldr	r2, [r7, #0]
 80104aa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80104ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ae:	6a3a      	ldr	r2, [r7, #32]
 80104b0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80104b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b4:	3304      	adds	r3, #4
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7fd ffc4 	bl	800e444 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d008      	beq.n	80104d4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80104c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104c8:	f043 0304 	orr.w	r3, r3, #4
 80104cc:	b2da      	uxtb	r2, r3
 80104ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80104d4:	bf00      	nop
 80104d6:	3718      	adds	r7, #24
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b08a      	sub	sp, #40	; 0x28
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
 80104e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80104ea:	2300      	movs	r3, #0
 80104ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d10a      	bne.n	801050a <xTimerGenericCommand+0x2e>
	__asm volatile
 80104f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f8:	f383 8811 	msr	BASEPRI, r3
 80104fc:	f3bf 8f6f 	isb	sy
 8010500:	f3bf 8f4f 	dsb	sy
 8010504:	623b      	str	r3, [r7, #32]
}
 8010506:	bf00      	nop
 8010508:	e7fe      	b.n	8010508 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801050a:	4b1a      	ldr	r3, [pc, #104]	; (8010574 <xTimerGenericCommand+0x98>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d02a      	beq.n	8010568 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	2b05      	cmp	r3, #5
 8010522:	dc18      	bgt.n	8010556 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010524:	f7ff fc54 	bl	800fdd0 <xTaskGetSchedulerState>
 8010528:	4603      	mov	r3, r0
 801052a:	2b02      	cmp	r3, #2
 801052c:	d109      	bne.n	8010542 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801052e:	4b11      	ldr	r3, [pc, #68]	; (8010574 <xTimerGenericCommand+0x98>)
 8010530:	6818      	ldr	r0, [r3, #0]
 8010532:	f107 0110 	add.w	r1, r7, #16
 8010536:	2300      	movs	r3, #0
 8010538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801053a:	f7fe f955 	bl	800e7e8 <xQueueGenericSend>
 801053e:	6278      	str	r0, [r7, #36]	; 0x24
 8010540:	e012      	b.n	8010568 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010542:	4b0c      	ldr	r3, [pc, #48]	; (8010574 <xTimerGenericCommand+0x98>)
 8010544:	6818      	ldr	r0, [r3, #0]
 8010546:	f107 0110 	add.w	r1, r7, #16
 801054a:	2300      	movs	r3, #0
 801054c:	2200      	movs	r2, #0
 801054e:	f7fe f94b 	bl	800e7e8 <xQueueGenericSend>
 8010552:	6278      	str	r0, [r7, #36]	; 0x24
 8010554:	e008      	b.n	8010568 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010556:	4b07      	ldr	r3, [pc, #28]	; (8010574 <xTimerGenericCommand+0x98>)
 8010558:	6818      	ldr	r0, [r3, #0]
 801055a:	f107 0110 	add.w	r1, r7, #16
 801055e:	2300      	movs	r3, #0
 8010560:	683a      	ldr	r2, [r7, #0]
 8010562:	f7fe fa3f 	bl	800e9e4 <xQueueGenericSendFromISR>
 8010566:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801056a:	4618      	mov	r0, r3
 801056c:	3728      	adds	r7, #40	; 0x28
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	20000df0 	.word	0x20000df0

08010578 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b088      	sub	sp, #32
 801057c:	af02      	add	r7, sp, #8
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010582:	4b22      	ldr	r3, [pc, #136]	; (801060c <prvProcessExpiredTimer+0x94>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	68db      	ldr	r3, [r3, #12]
 8010588:	68db      	ldr	r3, [r3, #12]
 801058a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	3304      	adds	r3, #4
 8010590:	4618      	mov	r0, r3
 8010592:	f7fd ffc1 	bl	800e518 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801059c:	f003 0304 	and.w	r3, r3, #4
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d022      	beq.n	80105ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	699a      	ldr	r2, [r3, #24]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	18d1      	adds	r1, r2, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	683a      	ldr	r2, [r7, #0]
 80105b0:	6978      	ldr	r0, [r7, #20]
 80105b2:	f000 f8d1 	bl	8010758 <prvInsertTimerInActiveList>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d01f      	beq.n	80105fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105bc:	2300      	movs	r3, #0
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	2300      	movs	r3, #0
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	2100      	movs	r1, #0
 80105c6:	6978      	ldr	r0, [r7, #20]
 80105c8:	f7ff ff88 	bl	80104dc <xTimerGenericCommand>
 80105cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d113      	bne.n	80105fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80105d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d8:	f383 8811 	msr	BASEPRI, r3
 80105dc:	f3bf 8f6f 	isb	sy
 80105e0:	f3bf 8f4f 	dsb	sy
 80105e4:	60fb      	str	r3, [r7, #12]
}
 80105e6:	bf00      	nop
 80105e8:	e7fe      	b.n	80105e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105f0:	f023 0301 	bic.w	r3, r3, #1
 80105f4:	b2da      	uxtb	r2, r3
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	6a1b      	ldr	r3, [r3, #32]
 8010600:	6978      	ldr	r0, [r7, #20]
 8010602:	4798      	blx	r3
}
 8010604:	bf00      	nop
 8010606:	3718      	adds	r7, #24
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	20000de8 	.word	0x20000de8

08010610 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b084      	sub	sp, #16
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010618:	f107 0308 	add.w	r3, r7, #8
 801061c:	4618      	mov	r0, r3
 801061e:	f000 f857 	bl	80106d0 <prvGetNextExpireTime>
 8010622:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	4619      	mov	r1, r3
 8010628:	68f8      	ldr	r0, [r7, #12]
 801062a:	f000 f803 	bl	8010634 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801062e:	f000 f8d5 	bl	80107dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010632:	e7f1      	b.n	8010618 <prvTimerTask+0x8>

08010634 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b084      	sub	sp, #16
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801063e:	f7fe ffdb 	bl	800f5f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010642:	f107 0308 	add.w	r3, r7, #8
 8010646:	4618      	mov	r0, r3
 8010648:	f000 f866 	bl	8010718 <prvSampleTimeNow>
 801064c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d130      	bne.n	80106b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d10a      	bne.n	8010670 <prvProcessTimerOrBlockTask+0x3c>
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	429a      	cmp	r2, r3
 8010660:	d806      	bhi.n	8010670 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010662:	f7fe ffd7 	bl	800f614 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010666:	68f9      	ldr	r1, [r7, #12]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7ff ff85 	bl	8010578 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801066e:	e024      	b.n	80106ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d008      	beq.n	8010688 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010676:	4b13      	ldr	r3, [pc, #76]	; (80106c4 <prvProcessTimerOrBlockTask+0x90>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d101      	bne.n	8010684 <prvProcessTimerOrBlockTask+0x50>
 8010680:	2301      	movs	r3, #1
 8010682:	e000      	b.n	8010686 <prvProcessTimerOrBlockTask+0x52>
 8010684:	2300      	movs	r3, #0
 8010686:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010688:	4b0f      	ldr	r3, [pc, #60]	; (80106c8 <prvProcessTimerOrBlockTask+0x94>)
 801068a:	6818      	ldr	r0, [r3, #0]
 801068c:	687a      	ldr	r2, [r7, #4]
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	683a      	ldr	r2, [r7, #0]
 8010694:	4619      	mov	r1, r3
 8010696:	f7fe fd1f 	bl	800f0d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801069a:	f7fe ffbb 	bl	800f614 <xTaskResumeAll>
 801069e:	4603      	mov	r3, r0
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d10a      	bne.n	80106ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80106a4:	4b09      	ldr	r3, [pc, #36]	; (80106cc <prvProcessTimerOrBlockTask+0x98>)
 80106a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106aa:	601a      	str	r2, [r3, #0]
 80106ac:	f3bf 8f4f 	dsb	sy
 80106b0:	f3bf 8f6f 	isb	sy
}
 80106b4:	e001      	b.n	80106ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80106b6:	f7fe ffad 	bl	800f614 <xTaskResumeAll>
}
 80106ba:	bf00      	nop
 80106bc:	3710      	adds	r7, #16
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
 80106c2:	bf00      	nop
 80106c4:	20000dec 	.word	0x20000dec
 80106c8:	20000df0 	.word	0x20000df0
 80106cc:	e000ed04 	.word	0xe000ed04

080106d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80106d0:	b480      	push	{r7}
 80106d2:	b085      	sub	sp, #20
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80106d8:	4b0e      	ldr	r3, [pc, #56]	; (8010714 <prvGetNextExpireTime+0x44>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d101      	bne.n	80106e6 <prvGetNextExpireTime+0x16>
 80106e2:	2201      	movs	r2, #1
 80106e4:	e000      	b.n	80106e8 <prvGetNextExpireTime+0x18>
 80106e6:	2200      	movs	r2, #0
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d105      	bne.n	8010700 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106f4:	4b07      	ldr	r3, [pc, #28]	; (8010714 <prvGetNextExpireTime+0x44>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	60fb      	str	r3, [r7, #12]
 80106fe:	e001      	b.n	8010704 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010700:	2300      	movs	r3, #0
 8010702:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010704:	68fb      	ldr	r3, [r7, #12]
}
 8010706:	4618      	mov	r0, r3
 8010708:	3714      	adds	r7, #20
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr
 8010712:	bf00      	nop
 8010714:	20000de8 	.word	0x20000de8

08010718 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010720:	f7ff f816 	bl	800f750 <xTaskGetTickCount>
 8010724:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010726:	4b0b      	ldr	r3, [pc, #44]	; (8010754 <prvSampleTimeNow+0x3c>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	68fa      	ldr	r2, [r7, #12]
 801072c:	429a      	cmp	r2, r3
 801072e:	d205      	bcs.n	801073c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010730:	f000 f936 	bl	80109a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2201      	movs	r2, #1
 8010738:	601a      	str	r2, [r3, #0]
 801073a:	e002      	b.n	8010742 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010742:	4a04      	ldr	r2, [pc, #16]	; (8010754 <prvSampleTimeNow+0x3c>)
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010748:	68fb      	ldr	r3, [r7, #12]
}
 801074a:	4618      	mov	r0, r3
 801074c:	3710      	adds	r7, #16
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop
 8010754:	20000df8 	.word	0x20000df8

08010758 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b086      	sub	sp, #24
 801075c:	af00      	add	r7, sp, #0
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	607a      	str	r2, [r7, #4]
 8010764:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010766:	2300      	movs	r3, #0
 8010768:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	68ba      	ldr	r2, [r7, #8]
 801076e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	68fa      	ldr	r2, [r7, #12]
 8010774:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010776:	68ba      	ldr	r2, [r7, #8]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	429a      	cmp	r2, r3
 801077c:	d812      	bhi.n	80107a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801077e:	687a      	ldr	r2, [r7, #4]
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	1ad2      	subs	r2, r2, r3
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	699b      	ldr	r3, [r3, #24]
 8010788:	429a      	cmp	r2, r3
 801078a:	d302      	bcc.n	8010792 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801078c:	2301      	movs	r3, #1
 801078e:	617b      	str	r3, [r7, #20]
 8010790:	e01b      	b.n	80107ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010792:	4b10      	ldr	r3, [pc, #64]	; (80107d4 <prvInsertTimerInActiveList+0x7c>)
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	3304      	adds	r3, #4
 801079a:	4619      	mov	r1, r3
 801079c:	4610      	mov	r0, r2
 801079e:	f7fd fe82 	bl	800e4a6 <vListInsert>
 80107a2:	e012      	b.n	80107ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80107a4:	687a      	ldr	r2, [r7, #4]
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d206      	bcs.n	80107ba <prvInsertTimerInActiveList+0x62>
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d302      	bcc.n	80107ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80107b4:	2301      	movs	r3, #1
 80107b6:	617b      	str	r3, [r7, #20]
 80107b8:	e007      	b.n	80107ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80107ba:	4b07      	ldr	r3, [pc, #28]	; (80107d8 <prvInsertTimerInActiveList+0x80>)
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	3304      	adds	r3, #4
 80107c2:	4619      	mov	r1, r3
 80107c4:	4610      	mov	r0, r2
 80107c6:	f7fd fe6e 	bl	800e4a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80107ca:	697b      	ldr	r3, [r7, #20]
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3718      	adds	r7, #24
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	20000dec 	.word	0x20000dec
 80107d8:	20000de8 	.word	0x20000de8

080107dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b08e      	sub	sp, #56	; 0x38
 80107e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80107e2:	e0ca      	b.n	801097a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	da18      	bge.n	801081c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80107ea:	1d3b      	adds	r3, r7, #4
 80107ec:	3304      	adds	r3, #4
 80107ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80107f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d10a      	bne.n	801080c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80107f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fa:	f383 8811 	msr	BASEPRI, r3
 80107fe:	f3bf 8f6f 	isb	sy
 8010802:	f3bf 8f4f 	dsb	sy
 8010806:	61fb      	str	r3, [r7, #28]
}
 8010808:	bf00      	nop
 801080a:	e7fe      	b.n	801080a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801080c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010812:	6850      	ldr	r0, [r2, #4]
 8010814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010816:	6892      	ldr	r2, [r2, #8]
 8010818:	4611      	mov	r1, r2
 801081a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2b00      	cmp	r3, #0
 8010820:	f2c0 80aa 	blt.w	8010978 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082a:	695b      	ldr	r3, [r3, #20]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d004      	beq.n	801083a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010832:	3304      	adds	r3, #4
 8010834:	4618      	mov	r0, r3
 8010836:	f7fd fe6f 	bl	800e518 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801083a:	463b      	mov	r3, r7
 801083c:	4618      	mov	r0, r3
 801083e:	f7ff ff6b 	bl	8010718 <prvSampleTimeNow>
 8010842:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2b09      	cmp	r3, #9
 8010848:	f200 8097 	bhi.w	801097a <prvProcessReceivedCommands+0x19e>
 801084c:	a201      	add	r2, pc, #4	; (adr r2, 8010854 <prvProcessReceivedCommands+0x78>)
 801084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010852:	bf00      	nop
 8010854:	0801087d 	.word	0x0801087d
 8010858:	0801087d 	.word	0x0801087d
 801085c:	0801087d 	.word	0x0801087d
 8010860:	080108f1 	.word	0x080108f1
 8010864:	08010905 	.word	0x08010905
 8010868:	0801094f 	.word	0x0801094f
 801086c:	0801087d 	.word	0x0801087d
 8010870:	0801087d 	.word	0x0801087d
 8010874:	080108f1 	.word	0x080108f1
 8010878:	08010905 	.word	0x08010905
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010882:	f043 0301 	orr.w	r3, r3, #1
 8010886:	b2da      	uxtb	r2, r3
 8010888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801088e:	68ba      	ldr	r2, [r7, #8]
 8010890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010892:	699b      	ldr	r3, [r3, #24]
 8010894:	18d1      	adds	r1, r2, r3
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801089a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801089c:	f7ff ff5c 	bl	8010758 <prvInsertTimerInActiveList>
 80108a0:	4603      	mov	r3, r0
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d069      	beq.n	801097a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80108a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a8:	6a1b      	ldr	r3, [r3, #32]
 80108aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80108ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108b4:	f003 0304 	and.w	r3, r3, #4
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d05e      	beq.n	801097a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80108bc:	68ba      	ldr	r2, [r7, #8]
 80108be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c0:	699b      	ldr	r3, [r3, #24]
 80108c2:	441a      	add	r2, r3
 80108c4:	2300      	movs	r3, #0
 80108c6:	9300      	str	r3, [sp, #0]
 80108c8:	2300      	movs	r3, #0
 80108ca:	2100      	movs	r1, #0
 80108cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108ce:	f7ff fe05 	bl	80104dc <xTimerGenericCommand>
 80108d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80108d4:	6a3b      	ldr	r3, [r7, #32]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d14f      	bne.n	801097a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80108da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108de:	f383 8811 	msr	BASEPRI, r3
 80108e2:	f3bf 8f6f 	isb	sy
 80108e6:	f3bf 8f4f 	dsb	sy
 80108ea:	61bb      	str	r3, [r7, #24]
}
 80108ec:	bf00      	nop
 80108ee:	e7fe      	b.n	80108ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108f6:	f023 0301 	bic.w	r3, r3, #1
 80108fa:	b2da      	uxtb	r2, r3
 80108fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010902:	e03a      	b.n	801097a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801090a:	f043 0301 	orr.w	r3, r3, #1
 801090e:	b2da      	uxtb	r2, r3
 8010910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010916:	68ba      	ldr	r2, [r7, #8]
 8010918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091e:	699b      	ldr	r3, [r3, #24]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d10a      	bne.n	801093a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010928:	f383 8811 	msr	BASEPRI, r3
 801092c:	f3bf 8f6f 	isb	sy
 8010930:	f3bf 8f4f 	dsb	sy
 8010934:	617b      	str	r3, [r7, #20]
}
 8010936:	bf00      	nop
 8010938:	e7fe      	b.n	8010938 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801093a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093c:	699a      	ldr	r2, [r3, #24]
 801093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010940:	18d1      	adds	r1, r2, r3
 8010942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010948:	f7ff ff06 	bl	8010758 <prvInsertTimerInActiveList>
					break;
 801094c:	e015      	b.n	801097a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801094e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010954:	f003 0302 	and.w	r3, r3, #2
 8010958:	2b00      	cmp	r3, #0
 801095a:	d103      	bne.n	8010964 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801095c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801095e:	f000 fbff 	bl	8011160 <vPortFree>
 8010962:	e00a      	b.n	801097a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801096a:	f023 0301 	bic.w	r3, r3, #1
 801096e:	b2da      	uxtb	r2, r3
 8010970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010976:	e000      	b.n	801097a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010978:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801097a:	4b08      	ldr	r3, [pc, #32]	; (801099c <prvProcessReceivedCommands+0x1c0>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	1d39      	adds	r1, r7, #4
 8010980:	2200      	movs	r2, #0
 8010982:	4618      	mov	r0, r3
 8010984:	f7fe f8ca 	bl	800eb1c <xQueueReceive>
 8010988:	4603      	mov	r3, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	f47f af2a 	bne.w	80107e4 <prvProcessReceivedCommands+0x8>
	}
}
 8010990:	bf00      	nop
 8010992:	bf00      	nop
 8010994:	3730      	adds	r7, #48	; 0x30
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	20000df0 	.word	0x20000df0

080109a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b088      	sub	sp, #32
 80109a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80109a6:	e048      	b.n	8010a3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80109a8:	4b2d      	ldr	r3, [pc, #180]	; (8010a60 <prvSwitchTimerLists+0xc0>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	68db      	ldr	r3, [r3, #12]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109b2:	4b2b      	ldr	r3, [pc, #172]	; (8010a60 <prvSwitchTimerLists+0xc0>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	3304      	adds	r3, #4
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7fd fda9 	bl	800e518 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	6a1b      	ldr	r3, [r3, #32]
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109d4:	f003 0304 	and.w	r3, r3, #4
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d02e      	beq.n	8010a3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	699b      	ldr	r3, [r3, #24]
 80109e0:	693a      	ldr	r2, [r7, #16]
 80109e2:	4413      	add	r3, r2
 80109e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80109e6:	68ba      	ldr	r2, [r7, #8]
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d90e      	bls.n	8010a0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	68ba      	ldr	r2, [r7, #8]
 80109f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	68fa      	ldr	r2, [r7, #12]
 80109f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80109fa:	4b19      	ldr	r3, [pc, #100]	; (8010a60 <prvSwitchTimerLists+0xc0>)
 80109fc:	681a      	ldr	r2, [r3, #0]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	3304      	adds	r3, #4
 8010a02:	4619      	mov	r1, r3
 8010a04:	4610      	mov	r0, r2
 8010a06:	f7fd fd4e 	bl	800e4a6 <vListInsert>
 8010a0a:	e016      	b.n	8010a3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	9300      	str	r3, [sp, #0]
 8010a10:	2300      	movs	r3, #0
 8010a12:	693a      	ldr	r2, [r7, #16]
 8010a14:	2100      	movs	r1, #0
 8010a16:	68f8      	ldr	r0, [r7, #12]
 8010a18:	f7ff fd60 	bl	80104dc <xTimerGenericCommand>
 8010a1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d10a      	bne.n	8010a3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a28:	f383 8811 	msr	BASEPRI, r3
 8010a2c:	f3bf 8f6f 	isb	sy
 8010a30:	f3bf 8f4f 	dsb	sy
 8010a34:	603b      	str	r3, [r7, #0]
}
 8010a36:	bf00      	nop
 8010a38:	e7fe      	b.n	8010a38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a3a:	4b09      	ldr	r3, [pc, #36]	; (8010a60 <prvSwitchTimerLists+0xc0>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d1b1      	bne.n	80109a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010a44:	4b06      	ldr	r3, [pc, #24]	; (8010a60 <prvSwitchTimerLists+0xc0>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010a4a:	4b06      	ldr	r3, [pc, #24]	; (8010a64 <prvSwitchTimerLists+0xc4>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	4a04      	ldr	r2, [pc, #16]	; (8010a60 <prvSwitchTimerLists+0xc0>)
 8010a50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010a52:	4a04      	ldr	r2, [pc, #16]	; (8010a64 <prvSwitchTimerLists+0xc4>)
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	6013      	str	r3, [r2, #0]
}
 8010a58:	bf00      	nop
 8010a5a:	3718      	adds	r7, #24
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}
 8010a60:	20000de8 	.word	0x20000de8
 8010a64:	20000dec 	.word	0x20000dec

08010a68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010a6e:	f000 f989 	bl	8010d84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010a72:	4b15      	ldr	r3, [pc, #84]	; (8010ac8 <prvCheckForValidListAndQueue+0x60>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d120      	bne.n	8010abc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010a7a:	4814      	ldr	r0, [pc, #80]	; (8010acc <prvCheckForValidListAndQueue+0x64>)
 8010a7c:	f7fd fcc2 	bl	800e404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010a80:	4813      	ldr	r0, [pc, #76]	; (8010ad0 <prvCheckForValidListAndQueue+0x68>)
 8010a82:	f7fd fcbf 	bl	800e404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010a86:	4b13      	ldr	r3, [pc, #76]	; (8010ad4 <prvCheckForValidListAndQueue+0x6c>)
 8010a88:	4a10      	ldr	r2, [pc, #64]	; (8010acc <prvCheckForValidListAndQueue+0x64>)
 8010a8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010a8c:	4b12      	ldr	r3, [pc, #72]	; (8010ad8 <prvCheckForValidListAndQueue+0x70>)
 8010a8e:	4a10      	ldr	r2, [pc, #64]	; (8010ad0 <prvCheckForValidListAndQueue+0x68>)
 8010a90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010a92:	2300      	movs	r3, #0
 8010a94:	9300      	str	r3, [sp, #0]
 8010a96:	4b11      	ldr	r3, [pc, #68]	; (8010adc <prvCheckForValidListAndQueue+0x74>)
 8010a98:	4a11      	ldr	r2, [pc, #68]	; (8010ae0 <prvCheckForValidListAndQueue+0x78>)
 8010a9a:	2110      	movs	r1, #16
 8010a9c:	200a      	movs	r0, #10
 8010a9e:	f7fd fdcd 	bl	800e63c <xQueueGenericCreateStatic>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	4a08      	ldr	r2, [pc, #32]	; (8010ac8 <prvCheckForValidListAndQueue+0x60>)
 8010aa6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010aa8:	4b07      	ldr	r3, [pc, #28]	; (8010ac8 <prvCheckForValidListAndQueue+0x60>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d005      	beq.n	8010abc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010ab0:	4b05      	ldr	r3, [pc, #20]	; (8010ac8 <prvCheckForValidListAndQueue+0x60>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	490b      	ldr	r1, [pc, #44]	; (8010ae4 <prvCheckForValidListAndQueue+0x7c>)
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7fe fae4 	bl	800f084 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010abc:	f000 f992 	bl	8010de4 <vPortExitCritical>
}
 8010ac0:	bf00      	nop
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	20000df0 	.word	0x20000df0
 8010acc:	20000dc0 	.word	0x20000dc0
 8010ad0:	20000dd4 	.word	0x20000dd4
 8010ad4:	20000de8 	.word	0x20000de8
 8010ad8:	20000dec 	.word	0x20000dec
 8010adc:	20000e9c 	.word	0x20000e9c
 8010ae0:	20000dfc 	.word	0x20000dfc
 8010ae4:	080129b0 	.word	0x080129b0

08010ae8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b086      	sub	sp, #24
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d10a      	bne.n	8010b10 <pvTimerGetTimerID+0x28>
	__asm volatile
 8010afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010afe:	f383 8811 	msr	BASEPRI, r3
 8010b02:	f3bf 8f6f 	isb	sy
 8010b06:	f3bf 8f4f 	dsb	sy
 8010b0a:	60fb      	str	r3, [r7, #12]
}
 8010b0c:	bf00      	nop
 8010b0e:	e7fe      	b.n	8010b0e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8010b10:	f000 f938 	bl	8010d84 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	69db      	ldr	r3, [r3, #28]
 8010b18:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8010b1a:	f000 f963 	bl	8010de4 <vPortExitCritical>

	return pvReturn;
 8010b1e:	693b      	ldr	r3, [r7, #16]
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3718      	adds	r7, #24
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b085      	sub	sp, #20
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	60b9      	str	r1, [r7, #8]
 8010b32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	3b04      	subs	r3, #4
 8010b38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	3b04      	subs	r3, #4
 8010b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	f023 0201 	bic.w	r2, r3, #1
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	3b04      	subs	r3, #4
 8010b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010b58:	4a0c      	ldr	r2, [pc, #48]	; (8010b8c <pxPortInitialiseStack+0x64>)
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	3b14      	subs	r3, #20
 8010b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	3b04      	subs	r3, #4
 8010b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f06f 0202 	mvn.w	r2, #2
 8010b76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	3b20      	subs	r3, #32
 8010b7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3714      	adds	r7, #20
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	08010b91 	.word	0x08010b91

08010b90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b90:	b480      	push	{r7}
 8010b92:	b085      	sub	sp, #20
 8010b94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010b96:	2300      	movs	r3, #0
 8010b98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b9a:	4b12      	ldr	r3, [pc, #72]	; (8010be4 <prvTaskExitError+0x54>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ba2:	d00a      	beq.n	8010bba <prvTaskExitError+0x2a>
	__asm volatile
 8010ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba8:	f383 8811 	msr	BASEPRI, r3
 8010bac:	f3bf 8f6f 	isb	sy
 8010bb0:	f3bf 8f4f 	dsb	sy
 8010bb4:	60fb      	str	r3, [r7, #12]
}
 8010bb6:	bf00      	nop
 8010bb8:	e7fe      	b.n	8010bb8 <prvTaskExitError+0x28>
	__asm volatile
 8010bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bbe:	f383 8811 	msr	BASEPRI, r3
 8010bc2:	f3bf 8f6f 	isb	sy
 8010bc6:	f3bf 8f4f 	dsb	sy
 8010bca:	60bb      	str	r3, [r7, #8]
}
 8010bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010bce:	bf00      	nop
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d0fc      	beq.n	8010bd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010bd6:	bf00      	nop
 8010bd8:	bf00      	nop
 8010bda:	3714      	adds	r7, #20
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr
 8010be4:	20000040 	.word	0x20000040
	...

08010bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010bf0:	4b07      	ldr	r3, [pc, #28]	; (8010c10 <pxCurrentTCBConst2>)
 8010bf2:	6819      	ldr	r1, [r3, #0]
 8010bf4:	6808      	ldr	r0, [r1, #0]
 8010bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bfa:	f380 8809 	msr	PSP, r0
 8010bfe:	f3bf 8f6f 	isb	sy
 8010c02:	f04f 0000 	mov.w	r0, #0
 8010c06:	f380 8811 	msr	BASEPRI, r0
 8010c0a:	4770      	bx	lr
 8010c0c:	f3af 8000 	nop.w

08010c10 <pxCurrentTCBConst2>:
 8010c10:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010c14:	bf00      	nop
 8010c16:	bf00      	nop

08010c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010c18:	4808      	ldr	r0, [pc, #32]	; (8010c3c <prvPortStartFirstTask+0x24>)
 8010c1a:	6800      	ldr	r0, [r0, #0]
 8010c1c:	6800      	ldr	r0, [r0, #0]
 8010c1e:	f380 8808 	msr	MSP, r0
 8010c22:	f04f 0000 	mov.w	r0, #0
 8010c26:	f380 8814 	msr	CONTROL, r0
 8010c2a:	b662      	cpsie	i
 8010c2c:	b661      	cpsie	f
 8010c2e:	f3bf 8f4f 	dsb	sy
 8010c32:	f3bf 8f6f 	isb	sy
 8010c36:	df00      	svc	0
 8010c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010c3a:	bf00      	nop
 8010c3c:	e000ed08 	.word	0xe000ed08

08010c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b086      	sub	sp, #24
 8010c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010c46:	4b46      	ldr	r3, [pc, #280]	; (8010d60 <xPortStartScheduler+0x120>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	4a46      	ldr	r2, [pc, #280]	; (8010d64 <xPortStartScheduler+0x124>)
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d10a      	bne.n	8010c66 <xPortStartScheduler+0x26>
	__asm volatile
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	613b      	str	r3, [r7, #16]
}
 8010c62:	bf00      	nop
 8010c64:	e7fe      	b.n	8010c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010c66:	4b3e      	ldr	r3, [pc, #248]	; (8010d60 <xPortStartScheduler+0x120>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	4a3f      	ldr	r2, [pc, #252]	; (8010d68 <xPortStartScheduler+0x128>)
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	d10a      	bne.n	8010c86 <xPortStartScheduler+0x46>
	__asm volatile
 8010c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c74:	f383 8811 	msr	BASEPRI, r3
 8010c78:	f3bf 8f6f 	isb	sy
 8010c7c:	f3bf 8f4f 	dsb	sy
 8010c80:	60fb      	str	r3, [r7, #12]
}
 8010c82:	bf00      	nop
 8010c84:	e7fe      	b.n	8010c84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010c86:	4b39      	ldr	r3, [pc, #228]	; (8010d6c <xPortStartScheduler+0x12c>)
 8010c88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	22ff      	movs	r2, #255	; 0xff
 8010c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	781b      	ldrb	r3, [r3, #0]
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ca0:	78fb      	ldrb	r3, [r7, #3]
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ca8:	b2da      	uxtb	r2, r3
 8010caa:	4b31      	ldr	r3, [pc, #196]	; (8010d70 <xPortStartScheduler+0x130>)
 8010cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010cae:	4b31      	ldr	r3, [pc, #196]	; (8010d74 <xPortStartScheduler+0x134>)
 8010cb0:	2207      	movs	r2, #7
 8010cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010cb4:	e009      	b.n	8010cca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010cb6:	4b2f      	ldr	r3, [pc, #188]	; (8010d74 <xPortStartScheduler+0x134>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	3b01      	subs	r3, #1
 8010cbc:	4a2d      	ldr	r2, [pc, #180]	; (8010d74 <xPortStartScheduler+0x134>)
 8010cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010cc0:	78fb      	ldrb	r3, [r7, #3]
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	005b      	lsls	r3, r3, #1
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010cca:	78fb      	ldrb	r3, [r7, #3]
 8010ccc:	b2db      	uxtb	r3, r3
 8010cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cd2:	2b80      	cmp	r3, #128	; 0x80
 8010cd4:	d0ef      	beq.n	8010cb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010cd6:	4b27      	ldr	r3, [pc, #156]	; (8010d74 <xPortStartScheduler+0x134>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f1c3 0307 	rsb	r3, r3, #7
 8010cde:	2b04      	cmp	r3, #4
 8010ce0:	d00a      	beq.n	8010cf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce6:	f383 8811 	msr	BASEPRI, r3
 8010cea:	f3bf 8f6f 	isb	sy
 8010cee:	f3bf 8f4f 	dsb	sy
 8010cf2:	60bb      	str	r3, [r7, #8]
}
 8010cf4:	bf00      	nop
 8010cf6:	e7fe      	b.n	8010cf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010cf8:	4b1e      	ldr	r3, [pc, #120]	; (8010d74 <xPortStartScheduler+0x134>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	021b      	lsls	r3, r3, #8
 8010cfe:	4a1d      	ldr	r2, [pc, #116]	; (8010d74 <xPortStartScheduler+0x134>)
 8010d00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d02:	4b1c      	ldr	r3, [pc, #112]	; (8010d74 <xPortStartScheduler+0x134>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d0a:	4a1a      	ldr	r2, [pc, #104]	; (8010d74 <xPortStartScheduler+0x134>)
 8010d0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	b2da      	uxtb	r2, r3
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010d16:	4b18      	ldr	r3, [pc, #96]	; (8010d78 <xPortStartScheduler+0x138>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4a17      	ldr	r2, [pc, #92]	; (8010d78 <xPortStartScheduler+0x138>)
 8010d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d22:	4b15      	ldr	r3, [pc, #84]	; (8010d78 <xPortStartScheduler+0x138>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	4a14      	ldr	r2, [pc, #80]	; (8010d78 <xPortStartScheduler+0x138>)
 8010d28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010d2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d2e:	f000 f8dd 	bl	8010eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d32:	4b12      	ldr	r3, [pc, #72]	; (8010d7c <xPortStartScheduler+0x13c>)
 8010d34:	2200      	movs	r2, #0
 8010d36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010d38:	f000 f8fc 	bl	8010f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010d3c:	4b10      	ldr	r3, [pc, #64]	; (8010d80 <xPortStartScheduler+0x140>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a0f      	ldr	r2, [pc, #60]	; (8010d80 <xPortStartScheduler+0x140>)
 8010d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010d46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d48:	f7ff ff66 	bl	8010c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010d4c:	f7fe fdca 	bl	800f8e4 <vTaskSwitchContext>
	prvTaskExitError();
 8010d50:	f7ff ff1e 	bl	8010b90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010d54:	2300      	movs	r3, #0
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3718      	adds	r7, #24
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	e000ed00 	.word	0xe000ed00
 8010d64:	410fc271 	.word	0x410fc271
 8010d68:	410fc270 	.word	0x410fc270
 8010d6c:	e000e400 	.word	0xe000e400
 8010d70:	20000eec 	.word	0x20000eec
 8010d74:	20000ef0 	.word	0x20000ef0
 8010d78:	e000ed20 	.word	0xe000ed20
 8010d7c:	20000040 	.word	0x20000040
 8010d80:	e000ef34 	.word	0xe000ef34

08010d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010d84:	b480      	push	{r7}
 8010d86:	b083      	sub	sp, #12
 8010d88:	af00      	add	r7, sp, #0
	__asm volatile
 8010d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d8e:	f383 8811 	msr	BASEPRI, r3
 8010d92:	f3bf 8f6f 	isb	sy
 8010d96:	f3bf 8f4f 	dsb	sy
 8010d9a:	607b      	str	r3, [r7, #4]
}
 8010d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010d9e:	4b0f      	ldr	r3, [pc, #60]	; (8010ddc <vPortEnterCritical+0x58>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	3301      	adds	r3, #1
 8010da4:	4a0d      	ldr	r2, [pc, #52]	; (8010ddc <vPortEnterCritical+0x58>)
 8010da6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010da8:	4b0c      	ldr	r3, [pc, #48]	; (8010ddc <vPortEnterCritical+0x58>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b01      	cmp	r3, #1
 8010dae:	d10f      	bne.n	8010dd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010db0:	4b0b      	ldr	r3, [pc, #44]	; (8010de0 <vPortEnterCritical+0x5c>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	b2db      	uxtb	r3, r3
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00a      	beq.n	8010dd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	603b      	str	r3, [r7, #0]
}
 8010dcc:	bf00      	nop
 8010dce:	e7fe      	b.n	8010dce <vPortEnterCritical+0x4a>
	}
}
 8010dd0:	bf00      	nop
 8010dd2:	370c      	adds	r7, #12
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr
 8010ddc:	20000040 	.word	0x20000040
 8010de0:	e000ed04 	.word	0xe000ed04

08010de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010de4:	b480      	push	{r7}
 8010de6:	b083      	sub	sp, #12
 8010de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010dea:	4b12      	ldr	r3, [pc, #72]	; (8010e34 <vPortExitCritical+0x50>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d10a      	bne.n	8010e08 <vPortExitCritical+0x24>
	__asm volatile
 8010df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df6:	f383 8811 	msr	BASEPRI, r3
 8010dfa:	f3bf 8f6f 	isb	sy
 8010dfe:	f3bf 8f4f 	dsb	sy
 8010e02:	607b      	str	r3, [r7, #4]
}
 8010e04:	bf00      	nop
 8010e06:	e7fe      	b.n	8010e06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010e08:	4b0a      	ldr	r3, [pc, #40]	; (8010e34 <vPortExitCritical+0x50>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	4a09      	ldr	r2, [pc, #36]	; (8010e34 <vPortExitCritical+0x50>)
 8010e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010e12:	4b08      	ldr	r3, [pc, #32]	; (8010e34 <vPortExitCritical+0x50>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d105      	bne.n	8010e26 <vPortExitCritical+0x42>
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	f383 8811 	msr	BASEPRI, r3
}
 8010e24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010e26:	bf00      	nop
 8010e28:	370c      	adds	r7, #12
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e30:	4770      	bx	lr
 8010e32:	bf00      	nop
 8010e34:	20000040 	.word	0x20000040
	...

08010e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e40:	f3ef 8009 	mrs	r0, PSP
 8010e44:	f3bf 8f6f 	isb	sy
 8010e48:	4b15      	ldr	r3, [pc, #84]	; (8010ea0 <pxCurrentTCBConst>)
 8010e4a:	681a      	ldr	r2, [r3, #0]
 8010e4c:	f01e 0f10 	tst.w	lr, #16
 8010e50:	bf08      	it	eq
 8010e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e5a:	6010      	str	r0, [r2, #0]
 8010e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010e64:	f380 8811 	msr	BASEPRI, r0
 8010e68:	f3bf 8f4f 	dsb	sy
 8010e6c:	f3bf 8f6f 	isb	sy
 8010e70:	f7fe fd38 	bl	800f8e4 <vTaskSwitchContext>
 8010e74:	f04f 0000 	mov.w	r0, #0
 8010e78:	f380 8811 	msr	BASEPRI, r0
 8010e7c:	bc09      	pop	{r0, r3}
 8010e7e:	6819      	ldr	r1, [r3, #0]
 8010e80:	6808      	ldr	r0, [r1, #0]
 8010e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e86:	f01e 0f10 	tst.w	lr, #16
 8010e8a:	bf08      	it	eq
 8010e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010e90:	f380 8809 	msr	PSP, r0
 8010e94:	f3bf 8f6f 	isb	sy
 8010e98:	4770      	bx	lr
 8010e9a:	bf00      	nop
 8010e9c:	f3af 8000 	nop.w

08010ea0 <pxCurrentTCBConst>:
 8010ea0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ea4:	bf00      	nop
 8010ea6:	bf00      	nop

08010ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
	__asm volatile
 8010eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb2:	f383 8811 	msr	BASEPRI, r3
 8010eb6:	f3bf 8f6f 	isb	sy
 8010eba:	f3bf 8f4f 	dsb	sy
 8010ebe:	607b      	str	r3, [r7, #4]
}
 8010ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010ec2:	f7fe fc55 	bl	800f770 <xTaskIncrementTick>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d003      	beq.n	8010ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010ecc:	4b06      	ldr	r3, [pc, #24]	; (8010ee8 <xPortSysTickHandler+0x40>)
 8010ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ed2:	601a      	str	r2, [r3, #0]
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	f383 8811 	msr	BASEPRI, r3
}
 8010ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010ee0:	bf00      	nop
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	e000ed04 	.word	0xe000ed04

08010eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010eec:	b480      	push	{r7}
 8010eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010ef0:	4b0b      	ldr	r3, [pc, #44]	; (8010f20 <vPortSetupTimerInterrupt+0x34>)
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010ef6:	4b0b      	ldr	r3, [pc, #44]	; (8010f24 <vPortSetupTimerInterrupt+0x38>)
 8010ef8:	2200      	movs	r2, #0
 8010efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010efc:	4b0a      	ldr	r3, [pc, #40]	; (8010f28 <vPortSetupTimerInterrupt+0x3c>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a0a      	ldr	r2, [pc, #40]	; (8010f2c <vPortSetupTimerInterrupt+0x40>)
 8010f02:	fba2 2303 	umull	r2, r3, r2, r3
 8010f06:	099b      	lsrs	r3, r3, #6
 8010f08:	4a09      	ldr	r2, [pc, #36]	; (8010f30 <vPortSetupTimerInterrupt+0x44>)
 8010f0a:	3b01      	subs	r3, #1
 8010f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010f0e:	4b04      	ldr	r3, [pc, #16]	; (8010f20 <vPortSetupTimerInterrupt+0x34>)
 8010f10:	2207      	movs	r2, #7
 8010f12:	601a      	str	r2, [r3, #0]
}
 8010f14:	bf00      	nop
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop
 8010f20:	e000e010 	.word	0xe000e010
 8010f24:	e000e018 	.word	0xe000e018
 8010f28:	20000014 	.word	0x20000014
 8010f2c:	10624dd3 	.word	0x10624dd3
 8010f30:	e000e014 	.word	0xe000e014

08010f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010f44 <vPortEnableVFP+0x10>
 8010f38:	6801      	ldr	r1, [r0, #0]
 8010f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010f3e:	6001      	str	r1, [r0, #0]
 8010f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010f42:	bf00      	nop
 8010f44:	e000ed88 	.word	0xe000ed88

08010f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010f48:	b480      	push	{r7}
 8010f4a:	b085      	sub	sp, #20
 8010f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010f4e:	f3ef 8305 	mrs	r3, IPSR
 8010f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	2b0f      	cmp	r3, #15
 8010f58:	d914      	bls.n	8010f84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010f5a:	4a17      	ldr	r2, [pc, #92]	; (8010fb8 <vPortValidateInterruptPriority+0x70>)
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	4413      	add	r3, r2
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010f64:	4b15      	ldr	r3, [pc, #84]	; (8010fbc <vPortValidateInterruptPriority+0x74>)
 8010f66:	781b      	ldrb	r3, [r3, #0]
 8010f68:	7afa      	ldrb	r2, [r7, #11]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d20a      	bcs.n	8010f84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f72:	f383 8811 	msr	BASEPRI, r3
 8010f76:	f3bf 8f6f 	isb	sy
 8010f7a:	f3bf 8f4f 	dsb	sy
 8010f7e:	607b      	str	r3, [r7, #4]
}
 8010f80:	bf00      	nop
 8010f82:	e7fe      	b.n	8010f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010f84:	4b0e      	ldr	r3, [pc, #56]	; (8010fc0 <vPortValidateInterruptPriority+0x78>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010f8c:	4b0d      	ldr	r3, [pc, #52]	; (8010fc4 <vPortValidateInterruptPriority+0x7c>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d90a      	bls.n	8010faa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f98:	f383 8811 	msr	BASEPRI, r3
 8010f9c:	f3bf 8f6f 	isb	sy
 8010fa0:	f3bf 8f4f 	dsb	sy
 8010fa4:	603b      	str	r3, [r7, #0]
}
 8010fa6:	bf00      	nop
 8010fa8:	e7fe      	b.n	8010fa8 <vPortValidateInterruptPriority+0x60>
	}
 8010faa:	bf00      	nop
 8010fac:	3714      	adds	r7, #20
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb4:	4770      	bx	lr
 8010fb6:	bf00      	nop
 8010fb8:	e000e3f0 	.word	0xe000e3f0
 8010fbc:	20000eec 	.word	0x20000eec
 8010fc0:	e000ed0c 	.word	0xe000ed0c
 8010fc4:	20000ef0 	.word	0x20000ef0

08010fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b08a      	sub	sp, #40	; 0x28
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010fd4:	f7fe fb10 	bl	800f5f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010fd8:	4b5b      	ldr	r3, [pc, #364]	; (8011148 <pvPortMalloc+0x180>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d101      	bne.n	8010fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010fe0:	f000 f920 	bl	8011224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010fe4:	4b59      	ldr	r3, [pc, #356]	; (801114c <pvPortMalloc+0x184>)
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	4013      	ands	r3, r2
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	f040 8093 	bne.w	8011118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d01d      	beq.n	8011034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010ff8:	2208      	movs	r2, #8
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4413      	add	r3, r2
 8010ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f003 0307 	and.w	r3, r3, #7
 8011006:	2b00      	cmp	r3, #0
 8011008:	d014      	beq.n	8011034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f023 0307 	bic.w	r3, r3, #7
 8011010:	3308      	adds	r3, #8
 8011012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f003 0307 	and.w	r3, r3, #7
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00a      	beq.n	8011034 <pvPortMalloc+0x6c>
	__asm volatile
 801101e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011022:	f383 8811 	msr	BASEPRI, r3
 8011026:	f3bf 8f6f 	isb	sy
 801102a:	f3bf 8f4f 	dsb	sy
 801102e:	617b      	str	r3, [r7, #20]
}
 8011030:	bf00      	nop
 8011032:	e7fe      	b.n	8011032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d06e      	beq.n	8011118 <pvPortMalloc+0x150>
 801103a:	4b45      	ldr	r3, [pc, #276]	; (8011150 <pvPortMalloc+0x188>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	687a      	ldr	r2, [r7, #4]
 8011040:	429a      	cmp	r2, r3
 8011042:	d869      	bhi.n	8011118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011044:	4b43      	ldr	r3, [pc, #268]	; (8011154 <pvPortMalloc+0x18c>)
 8011046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011048:	4b42      	ldr	r3, [pc, #264]	; (8011154 <pvPortMalloc+0x18c>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801104e:	e004      	b.n	801105a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	687a      	ldr	r2, [r7, #4]
 8011060:	429a      	cmp	r2, r3
 8011062:	d903      	bls.n	801106c <pvPortMalloc+0xa4>
 8011064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d1f1      	bne.n	8011050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801106c:	4b36      	ldr	r3, [pc, #216]	; (8011148 <pvPortMalloc+0x180>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011072:	429a      	cmp	r2, r3
 8011074:	d050      	beq.n	8011118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011076:	6a3b      	ldr	r3, [r7, #32]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2208      	movs	r2, #8
 801107c:	4413      	add	r3, r2
 801107e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011082:	681a      	ldr	r2, [r3, #0]
 8011084:	6a3b      	ldr	r3, [r7, #32]
 8011086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108a:	685a      	ldr	r2, [r3, #4]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	1ad2      	subs	r2, r2, r3
 8011090:	2308      	movs	r3, #8
 8011092:	005b      	lsls	r3, r3, #1
 8011094:	429a      	cmp	r2, r3
 8011096:	d91f      	bls.n	80110d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4413      	add	r3, r2
 801109e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80110a0:	69bb      	ldr	r3, [r7, #24]
 80110a2:	f003 0307 	and.w	r3, r3, #7
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d00a      	beq.n	80110c0 <pvPortMalloc+0xf8>
	__asm volatile
 80110aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ae:	f383 8811 	msr	BASEPRI, r3
 80110b2:	f3bf 8f6f 	isb	sy
 80110b6:	f3bf 8f4f 	dsb	sy
 80110ba:	613b      	str	r3, [r7, #16]
}
 80110bc:	bf00      	nop
 80110be:	e7fe      	b.n	80110be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80110c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c2:	685a      	ldr	r2, [r3, #4]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	1ad2      	subs	r2, r2, r3
 80110c8:	69bb      	ldr	r3, [r7, #24]
 80110ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80110cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80110d2:	69b8      	ldr	r0, [r7, #24]
 80110d4:	f000 f908 	bl	80112e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80110d8:	4b1d      	ldr	r3, [pc, #116]	; (8011150 <pvPortMalloc+0x188>)
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	1ad3      	subs	r3, r2, r3
 80110e2:	4a1b      	ldr	r2, [pc, #108]	; (8011150 <pvPortMalloc+0x188>)
 80110e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80110e6:	4b1a      	ldr	r3, [pc, #104]	; (8011150 <pvPortMalloc+0x188>)
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	4b1b      	ldr	r3, [pc, #108]	; (8011158 <pvPortMalloc+0x190>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d203      	bcs.n	80110fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80110f2:	4b17      	ldr	r3, [pc, #92]	; (8011150 <pvPortMalloc+0x188>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	4a18      	ldr	r2, [pc, #96]	; (8011158 <pvPortMalloc+0x190>)
 80110f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80110fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fc:	685a      	ldr	r2, [r3, #4]
 80110fe:	4b13      	ldr	r3, [pc, #76]	; (801114c <pvPortMalloc+0x184>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	431a      	orrs	r2, r3
 8011104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110a:	2200      	movs	r2, #0
 801110c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801110e:	4b13      	ldr	r3, [pc, #76]	; (801115c <pvPortMalloc+0x194>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	3301      	adds	r3, #1
 8011114:	4a11      	ldr	r2, [pc, #68]	; (801115c <pvPortMalloc+0x194>)
 8011116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011118:	f7fe fa7c 	bl	800f614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	f003 0307 	and.w	r3, r3, #7
 8011122:	2b00      	cmp	r3, #0
 8011124:	d00a      	beq.n	801113c <pvPortMalloc+0x174>
	__asm volatile
 8011126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801112a:	f383 8811 	msr	BASEPRI, r3
 801112e:	f3bf 8f6f 	isb	sy
 8011132:	f3bf 8f4f 	dsb	sy
 8011136:	60fb      	str	r3, [r7, #12]
}
 8011138:	bf00      	nop
 801113a:	e7fe      	b.n	801113a <pvPortMalloc+0x172>
	return pvReturn;
 801113c:	69fb      	ldr	r3, [r7, #28]
}
 801113e:	4618      	mov	r0, r3
 8011140:	3728      	adds	r7, #40	; 0x28
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	20004afc 	.word	0x20004afc
 801114c:	20004b10 	.word	0x20004b10
 8011150:	20004b00 	.word	0x20004b00
 8011154:	20004af4 	.word	0x20004af4
 8011158:	20004b04 	.word	0x20004b04
 801115c:	20004b08 	.word	0x20004b08

08011160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b086      	sub	sp, #24
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d04d      	beq.n	801120e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011172:	2308      	movs	r3, #8
 8011174:	425b      	negs	r3, r3
 8011176:	697a      	ldr	r2, [r7, #20]
 8011178:	4413      	add	r3, r2
 801117a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	685a      	ldr	r2, [r3, #4]
 8011184:	4b24      	ldr	r3, [pc, #144]	; (8011218 <vPortFree+0xb8>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	4013      	ands	r3, r2
 801118a:	2b00      	cmp	r3, #0
 801118c:	d10a      	bne.n	80111a4 <vPortFree+0x44>
	__asm volatile
 801118e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011192:	f383 8811 	msr	BASEPRI, r3
 8011196:	f3bf 8f6f 	isb	sy
 801119a:	f3bf 8f4f 	dsb	sy
 801119e:	60fb      	str	r3, [r7, #12]
}
 80111a0:	bf00      	nop
 80111a2:	e7fe      	b.n	80111a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d00a      	beq.n	80111c2 <vPortFree+0x62>
	__asm volatile
 80111ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b0:	f383 8811 	msr	BASEPRI, r3
 80111b4:	f3bf 8f6f 	isb	sy
 80111b8:	f3bf 8f4f 	dsb	sy
 80111bc:	60bb      	str	r3, [r7, #8]
}
 80111be:	bf00      	nop
 80111c0:	e7fe      	b.n	80111c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	685a      	ldr	r2, [r3, #4]
 80111c6:	4b14      	ldr	r3, [pc, #80]	; (8011218 <vPortFree+0xb8>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	4013      	ands	r3, r2
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d01e      	beq.n	801120e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d11a      	bne.n	801120e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	685a      	ldr	r2, [r3, #4]
 80111dc:	4b0e      	ldr	r3, [pc, #56]	; (8011218 <vPortFree+0xb8>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	43db      	mvns	r3, r3
 80111e2:	401a      	ands	r2, r3
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80111e8:	f7fe fa06 	bl	800f5f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	685a      	ldr	r2, [r3, #4]
 80111f0:	4b0a      	ldr	r3, [pc, #40]	; (801121c <vPortFree+0xbc>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4413      	add	r3, r2
 80111f6:	4a09      	ldr	r2, [pc, #36]	; (801121c <vPortFree+0xbc>)
 80111f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80111fa:	6938      	ldr	r0, [r7, #16]
 80111fc:	f000 f874 	bl	80112e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011200:	4b07      	ldr	r3, [pc, #28]	; (8011220 <vPortFree+0xc0>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	3301      	adds	r3, #1
 8011206:	4a06      	ldr	r2, [pc, #24]	; (8011220 <vPortFree+0xc0>)
 8011208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801120a:	f7fe fa03 	bl	800f614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801120e:	bf00      	nop
 8011210:	3718      	adds	r7, #24
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	20004b10 	.word	0x20004b10
 801121c:	20004b00 	.word	0x20004b00
 8011220:	20004b0c 	.word	0x20004b0c

08011224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011224:	b480      	push	{r7}
 8011226:	b085      	sub	sp, #20
 8011228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801122a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801122e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011230:	4b27      	ldr	r3, [pc, #156]	; (80112d0 <prvHeapInit+0xac>)
 8011232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f003 0307 	and.w	r3, r3, #7
 801123a:	2b00      	cmp	r3, #0
 801123c:	d00c      	beq.n	8011258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	3307      	adds	r3, #7
 8011242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f023 0307 	bic.w	r3, r3, #7
 801124a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801124c:	68ba      	ldr	r2, [r7, #8]
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	1ad3      	subs	r3, r2, r3
 8011252:	4a1f      	ldr	r2, [pc, #124]	; (80112d0 <prvHeapInit+0xac>)
 8011254:	4413      	add	r3, r2
 8011256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801125c:	4a1d      	ldr	r2, [pc, #116]	; (80112d4 <prvHeapInit+0xb0>)
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011262:	4b1c      	ldr	r3, [pc, #112]	; (80112d4 <prvHeapInit+0xb0>)
 8011264:	2200      	movs	r2, #0
 8011266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	68ba      	ldr	r2, [r7, #8]
 801126c:	4413      	add	r3, r2
 801126e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011270:	2208      	movs	r2, #8
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	1a9b      	subs	r3, r3, r2
 8011276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	f023 0307 	bic.w	r3, r3, #7
 801127e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	4a15      	ldr	r2, [pc, #84]	; (80112d8 <prvHeapInit+0xb4>)
 8011284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011286:	4b14      	ldr	r3, [pc, #80]	; (80112d8 <prvHeapInit+0xb4>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2200      	movs	r2, #0
 801128c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801128e:	4b12      	ldr	r3, [pc, #72]	; (80112d8 <prvHeapInit+0xb4>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	2200      	movs	r2, #0
 8011294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	68fa      	ldr	r2, [r7, #12]
 801129e:	1ad2      	subs	r2, r2, r3
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80112a4:	4b0c      	ldr	r3, [pc, #48]	; (80112d8 <prvHeapInit+0xb4>)
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	4a0a      	ldr	r2, [pc, #40]	; (80112dc <prvHeapInit+0xb8>)
 80112b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	685b      	ldr	r3, [r3, #4]
 80112b8:	4a09      	ldr	r2, [pc, #36]	; (80112e0 <prvHeapInit+0xbc>)
 80112ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80112bc:	4b09      	ldr	r3, [pc, #36]	; (80112e4 <prvHeapInit+0xc0>)
 80112be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80112c2:	601a      	str	r2, [r3, #0]
}
 80112c4:	bf00      	nop
 80112c6:	3714      	adds	r7, #20
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr
 80112d0:	20000ef4 	.word	0x20000ef4
 80112d4:	20004af4 	.word	0x20004af4
 80112d8:	20004afc 	.word	0x20004afc
 80112dc:	20004b04 	.word	0x20004b04
 80112e0:	20004b00 	.word	0x20004b00
 80112e4:	20004b10 	.word	0x20004b10

080112e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80112e8:	b480      	push	{r7}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80112f0:	4b28      	ldr	r3, [pc, #160]	; (8011394 <prvInsertBlockIntoFreeList+0xac>)
 80112f2:	60fb      	str	r3, [r7, #12]
 80112f4:	e002      	b.n	80112fc <prvInsertBlockIntoFreeList+0x14>
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	60fb      	str	r3, [r7, #12]
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	687a      	ldr	r2, [r7, #4]
 8011302:	429a      	cmp	r2, r3
 8011304:	d8f7      	bhi.n	80112f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	685b      	ldr	r3, [r3, #4]
 801130e:	68ba      	ldr	r2, [r7, #8]
 8011310:	4413      	add	r3, r2
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	429a      	cmp	r2, r3
 8011316:	d108      	bne.n	801132a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	685a      	ldr	r2, [r3, #4]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	441a      	add	r2, r3
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	68ba      	ldr	r2, [r7, #8]
 8011334:	441a      	add	r2, r3
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	429a      	cmp	r2, r3
 801133c:	d118      	bne.n	8011370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	681a      	ldr	r2, [r3, #0]
 8011342:	4b15      	ldr	r3, [pc, #84]	; (8011398 <prvInsertBlockIntoFreeList+0xb0>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	429a      	cmp	r2, r3
 8011348:	d00d      	beq.n	8011366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	685a      	ldr	r2, [r3, #4]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	441a      	add	r2, r3
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	601a      	str	r2, [r3, #0]
 8011364:	e008      	b.n	8011378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011366:	4b0c      	ldr	r3, [pc, #48]	; (8011398 <prvInsertBlockIntoFreeList+0xb0>)
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	601a      	str	r2, [r3, #0]
 801136e:	e003      	b.n	8011378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681a      	ldr	r2, [r3, #0]
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011378:	68fa      	ldr	r2, [r7, #12]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	429a      	cmp	r2, r3
 801137e:	d002      	beq.n	8011386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011386:	bf00      	nop
 8011388:	3714      	adds	r7, #20
 801138a:	46bd      	mov	sp, r7
 801138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011390:	4770      	bx	lr
 8011392:	bf00      	nop
 8011394:	20004af4 	.word	0x20004af4
 8011398:	20004afc 	.word	0x20004afc

0801139c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80113a0:	2201      	movs	r2, #1
 80113a2:	490e      	ldr	r1, [pc, #56]	; (80113dc <MX_USB_HOST_Init+0x40>)
 80113a4:	480e      	ldr	r0, [pc, #56]	; (80113e0 <MX_USB_HOST_Init+0x44>)
 80113a6:	f7fb f805 	bl	800c3b4 <USBH_Init>
 80113aa:	4603      	mov	r3, r0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d001      	beq.n	80113b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80113b0:	f7f1 ffe0 	bl	8003374 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80113b4:	490b      	ldr	r1, [pc, #44]	; (80113e4 <MX_USB_HOST_Init+0x48>)
 80113b6:	480a      	ldr	r0, [pc, #40]	; (80113e0 <MX_USB_HOST_Init+0x44>)
 80113b8:	f7fb f8ac 	bl	800c514 <USBH_RegisterClass>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d001      	beq.n	80113c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80113c2:	f7f1 ffd7 	bl	8003374 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80113c6:	4806      	ldr	r0, [pc, #24]	; (80113e0 <MX_USB_HOST_Init+0x44>)
 80113c8:	f7fb f930 	bl	800c62c <USBH_Start>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d001      	beq.n	80113d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80113d2:	f7f1 ffcf 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80113d6:	bf00      	nop
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop
 80113dc:	080113e9 	.word	0x080113e9
 80113e0:	20005048 	.word	0x20005048
 80113e4:	20000020 	.word	0x20000020

080113e8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80113e8:	b480      	push	{r7}
 80113ea:	b083      	sub	sp, #12
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	460b      	mov	r3, r1
 80113f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80113f4:	78fb      	ldrb	r3, [r7, #3]
 80113f6:	3b01      	subs	r3, #1
 80113f8:	2b04      	cmp	r3, #4
 80113fa:	d819      	bhi.n	8011430 <USBH_UserProcess+0x48>
 80113fc:	a201      	add	r2, pc, #4	; (adr r2, 8011404 <USBH_UserProcess+0x1c>)
 80113fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011402:	bf00      	nop
 8011404:	08011431 	.word	0x08011431
 8011408:	08011421 	.word	0x08011421
 801140c:	08011431 	.word	0x08011431
 8011410:	08011429 	.word	0x08011429
 8011414:	08011419 	.word	0x08011419
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011418:	4b09      	ldr	r3, [pc, #36]	; (8011440 <USBH_UserProcess+0x58>)
 801141a:	2203      	movs	r2, #3
 801141c:	701a      	strb	r2, [r3, #0]
  break;
 801141e:	e008      	b.n	8011432 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011420:	4b07      	ldr	r3, [pc, #28]	; (8011440 <USBH_UserProcess+0x58>)
 8011422:	2202      	movs	r2, #2
 8011424:	701a      	strb	r2, [r3, #0]
  break;
 8011426:	e004      	b.n	8011432 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011428:	4b05      	ldr	r3, [pc, #20]	; (8011440 <USBH_UserProcess+0x58>)
 801142a:	2201      	movs	r2, #1
 801142c:	701a      	strb	r2, [r3, #0]
  break;
 801142e:	e000      	b.n	8011432 <USBH_UserProcess+0x4a>

  default:
  break;
 8011430:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011432:	bf00      	nop
 8011434:	370c      	adds	r7, #12
 8011436:	46bd      	mov	sp, r7
 8011438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143c:	4770      	bx	lr
 801143e:	bf00      	nop
 8011440:	20004b14 	.word	0x20004b14

08011444 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b08a      	sub	sp, #40	; 0x28
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801144c:	f107 0314 	add.w	r3, r7, #20
 8011450:	2200      	movs	r2, #0
 8011452:	601a      	str	r2, [r3, #0]
 8011454:	605a      	str	r2, [r3, #4]
 8011456:	609a      	str	r2, [r3, #8]
 8011458:	60da      	str	r2, [r3, #12]
 801145a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011464:	d147      	bne.n	80114f6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011466:	2300      	movs	r3, #0
 8011468:	613b      	str	r3, [r7, #16]
 801146a:	4b25      	ldr	r3, [pc, #148]	; (8011500 <HAL_HCD_MspInit+0xbc>)
 801146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801146e:	4a24      	ldr	r2, [pc, #144]	; (8011500 <HAL_HCD_MspInit+0xbc>)
 8011470:	f043 0301 	orr.w	r3, r3, #1
 8011474:	6313      	str	r3, [r2, #48]	; 0x30
 8011476:	4b22      	ldr	r3, [pc, #136]	; (8011500 <HAL_HCD_MspInit+0xbc>)
 8011478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801147a:	f003 0301 	and.w	r3, r3, #1
 801147e:	613b      	str	r3, [r7, #16]
 8011480:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8011482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011488:	2300      	movs	r3, #0
 801148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801148c:	2300      	movs	r3, #0
 801148e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8011490:	f107 0314 	add.w	r3, r7, #20
 8011494:	4619      	mov	r1, r3
 8011496:	481b      	ldr	r0, [pc, #108]	; (8011504 <HAL_HCD_MspInit+0xc0>)
 8011498:	f7f3 f908 	bl	80046ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 801149c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80114a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114a2:	2302      	movs	r3, #2
 80114a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114a6:	2300      	movs	r3, #0
 80114a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80114aa:	2300      	movs	r3, #0
 80114ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80114ae:	230a      	movs	r3, #10
 80114b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80114b2:	f107 0314 	add.w	r3, r7, #20
 80114b6:	4619      	mov	r1, r3
 80114b8:	4812      	ldr	r0, [pc, #72]	; (8011504 <HAL_HCD_MspInit+0xc0>)
 80114ba:	f7f3 f8f7 	bl	80046ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80114be:	4b10      	ldr	r3, [pc, #64]	; (8011500 <HAL_HCD_MspInit+0xbc>)
 80114c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114c2:	4a0f      	ldr	r2, [pc, #60]	; (8011500 <HAL_HCD_MspInit+0xbc>)
 80114c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114c8:	6353      	str	r3, [r2, #52]	; 0x34
 80114ca:	2300      	movs	r3, #0
 80114cc:	60fb      	str	r3, [r7, #12]
 80114ce:	4b0c      	ldr	r3, [pc, #48]	; (8011500 <HAL_HCD_MspInit+0xbc>)
 80114d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114d2:	4a0b      	ldr	r2, [pc, #44]	; (8011500 <HAL_HCD_MspInit+0xbc>)
 80114d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80114d8:	6453      	str	r3, [r2, #68]	; 0x44
 80114da:	4b09      	ldr	r3, [pc, #36]	; (8011500 <HAL_HCD_MspInit+0xbc>)
 80114dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80114e2:	60fb      	str	r3, [r7, #12]
 80114e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80114e6:	2200      	movs	r2, #0
 80114e8:	2105      	movs	r1, #5
 80114ea:	2043      	movs	r0, #67	; 0x43
 80114ec:	f7f3 f822 	bl	8004534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80114f0:	2043      	movs	r0, #67	; 0x43
 80114f2:	f7f3 f83b 	bl	800456c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80114f6:	bf00      	nop
 80114f8:	3728      	adds	r7, #40	; 0x28
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	40023800 	.word	0x40023800
 8011504:	40020000 	.word	0x40020000

08011508 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b082      	sub	sp, #8
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011516:	4618      	mov	r0, r3
 8011518:	f7fb fd35 	bl	800cf86 <USBH_LL_IncTimer>
}
 801151c:	bf00      	nop
 801151e:	3708      	adds	r7, #8
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}

08011524 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011532:	4618      	mov	r0, r3
 8011534:	f7fb fd79 	bl	800d02a <USBH_LL_Connect>
}
 8011538:	bf00      	nop
 801153a:	3708      	adds	r7, #8
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801154e:	4618      	mov	r0, r3
 8011550:	f7fb fd8e 	bl	800d070 <USBH_LL_Disconnect>
}
 8011554:	bf00      	nop
 8011556:	3708      	adds	r7, #8
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	460b      	mov	r3, r1
 8011566:	70fb      	strb	r3, [r7, #3]
 8011568:	4613      	mov	r3, r2
 801156a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011572:	4618      	mov	r0, r3
 8011574:	f7fb fdc5 	bl	800d102 <USBH_LL_NotifyURBChange>
#endif
}
 8011578:	bf00      	nop
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801158e:	4618      	mov	r0, r3
 8011590:	f7fb fd23 	bl	800cfda <USBH_LL_PortEnabled>
}
 8011594:	bf00      	nop
 8011596:	3708      	adds	r7, #8
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7fb fd2f 	bl	800d00e <USBH_LL_PortDisabled>
}
 80115b0:	bf00      	nop
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	d12a      	bne.n	8011620 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80115ca:	4a18      	ldr	r2, [pc, #96]	; (801162c <USBH_LL_Init+0x74>)
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	4a15      	ldr	r2, [pc, #84]	; (801162c <USBH_LL_Init+0x74>)
 80115d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80115da:	4b14      	ldr	r3, [pc, #80]	; (801162c <USBH_LL_Init+0x74>)
 80115dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80115e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80115e2:	4b12      	ldr	r3, [pc, #72]	; (801162c <USBH_LL_Init+0x74>)
 80115e4:	2208      	movs	r2, #8
 80115e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80115e8:	4b10      	ldr	r3, [pc, #64]	; (801162c <USBH_LL_Init+0x74>)
 80115ea:	2201      	movs	r2, #1
 80115ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80115ee:	4b0f      	ldr	r3, [pc, #60]	; (801162c <USBH_LL_Init+0x74>)
 80115f0:	2200      	movs	r2, #0
 80115f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80115f4:	4b0d      	ldr	r3, [pc, #52]	; (801162c <USBH_LL_Init+0x74>)
 80115f6:	2202      	movs	r2, #2
 80115f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80115fa:	4b0c      	ldr	r3, [pc, #48]	; (801162c <USBH_LL_Init+0x74>)
 80115fc:	2200      	movs	r2, #0
 80115fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011600:	480a      	ldr	r0, [pc, #40]	; (801162c <USBH_LL_Init+0x74>)
 8011602:	f7f3 fa44 	bl	8004a8e <HAL_HCD_Init>
 8011606:	4603      	mov	r3, r0
 8011608:	2b00      	cmp	r3, #0
 801160a:	d001      	beq.n	8011610 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801160c:	f7f1 feb2 	bl	8003374 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011610:	4806      	ldr	r0, [pc, #24]	; (801162c <USBH_LL_Init+0x74>)
 8011612:	f7f3 fe28 	bl	8005266 <HAL_HCD_GetCurrentFrame>
 8011616:	4603      	mov	r3, r0
 8011618:	4619      	mov	r1, r3
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f7fb fca4 	bl	800cf68 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011620:	2300      	movs	r3, #0
}
 8011622:	4618      	mov	r0, r3
 8011624:	3708      	adds	r7, #8
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	2000542c 	.word	0x2000542c

08011630 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b084      	sub	sp, #16
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011638:	2300      	movs	r3, #0
 801163a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801163c:	2300      	movs	r3, #0
 801163e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011646:	4618      	mov	r0, r3
 8011648:	f7f3 fd97 	bl	800517a <HAL_HCD_Start>
 801164c:	4603      	mov	r3, r0
 801164e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011650:	7bfb      	ldrb	r3, [r7, #15]
 8011652:	4618      	mov	r0, r3
 8011654:	f000 f95c 	bl	8011910 <USBH_Get_USB_Status>
 8011658:	4603      	mov	r3, r0
 801165a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801165c:	7bbb      	ldrb	r3, [r7, #14]
}
 801165e:	4618      	mov	r0, r3
 8011660:	3710      	adds	r7, #16
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}

08011666 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011666:	b580      	push	{r7, lr}
 8011668:	b084      	sub	sp, #16
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801166e:	2300      	movs	r3, #0
 8011670:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011672:	2300      	movs	r3, #0
 8011674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801167c:	4618      	mov	r0, r3
 801167e:	f7f3 fd9f 	bl	80051c0 <HAL_HCD_Stop>
 8011682:	4603      	mov	r3, r0
 8011684:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011686:	7bfb      	ldrb	r3, [r7, #15]
 8011688:	4618      	mov	r0, r3
 801168a:	f000 f941 	bl	8011910 <USBH_Get_USB_Status>
 801168e:	4603      	mov	r3, r0
 8011690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011692:	7bbb      	ldrb	r3, [r7, #14]
}
 8011694:	4618      	mov	r0, r3
 8011696:	3710      	adds	r7, #16
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b084      	sub	sp, #16
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80116a4:	2301      	movs	r3, #1
 80116a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7f3 fde7 	bl	8005282 <HAL_HCD_GetCurrentSpeed>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b02      	cmp	r3, #2
 80116b8:	d00c      	beq.n	80116d4 <USBH_LL_GetSpeed+0x38>
 80116ba:	2b02      	cmp	r3, #2
 80116bc:	d80d      	bhi.n	80116da <USBH_LL_GetSpeed+0x3e>
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d002      	beq.n	80116c8 <USBH_LL_GetSpeed+0x2c>
 80116c2:	2b01      	cmp	r3, #1
 80116c4:	d003      	beq.n	80116ce <USBH_LL_GetSpeed+0x32>
 80116c6:	e008      	b.n	80116da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80116c8:	2300      	movs	r3, #0
 80116ca:	73fb      	strb	r3, [r7, #15]
    break;
 80116cc:	e008      	b.n	80116e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80116ce:	2301      	movs	r3, #1
 80116d0:	73fb      	strb	r3, [r7, #15]
    break;
 80116d2:	e005      	b.n	80116e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80116d4:	2302      	movs	r3, #2
 80116d6:	73fb      	strb	r3, [r7, #15]
    break;
 80116d8:	e002      	b.n	80116e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80116da:	2301      	movs	r3, #1
 80116dc:	73fb      	strb	r3, [r7, #15]
    break;
 80116de:	bf00      	nop
  }
  return  speed;
 80116e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3710      	adds	r7, #16
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}

080116ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80116ea:	b580      	push	{r7, lr}
 80116ec:	b084      	sub	sp, #16
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116f2:	2300      	movs	r3, #0
 80116f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80116f6:	2300      	movs	r3, #0
 80116f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011700:	4618      	mov	r0, r3
 8011702:	f7f3 fd7a 	bl	80051fa <HAL_HCD_ResetPort>
 8011706:	4603      	mov	r3, r0
 8011708:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801170a:	7bfb      	ldrb	r3, [r7, #15]
 801170c:	4618      	mov	r0, r3
 801170e:	f000 f8ff 	bl	8011910 <USBH_Get_USB_Status>
 8011712:	4603      	mov	r3, r0
 8011714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011716:	7bbb      	ldrb	r3, [r7, #14]
}
 8011718:	4618      	mov	r0, r3
 801171a:	3710      	adds	r7, #16
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}

08011720 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b082      	sub	sp, #8
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	460b      	mov	r3, r1
 801172a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011732:	78fa      	ldrb	r2, [r7, #3]
 8011734:	4611      	mov	r1, r2
 8011736:	4618      	mov	r0, r3
 8011738:	f7f3 fd81 	bl	800523e <HAL_HCD_HC_GetXferCount>
 801173c:	4603      	mov	r3, r0
}
 801173e:	4618      	mov	r0, r3
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}

08011746 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011746:	b590      	push	{r4, r7, lr}
 8011748:	b089      	sub	sp, #36	; 0x24
 801174a:	af04      	add	r7, sp, #16
 801174c:	6078      	str	r0, [r7, #4]
 801174e:	4608      	mov	r0, r1
 8011750:	4611      	mov	r1, r2
 8011752:	461a      	mov	r2, r3
 8011754:	4603      	mov	r3, r0
 8011756:	70fb      	strb	r3, [r7, #3]
 8011758:	460b      	mov	r3, r1
 801175a:	70bb      	strb	r3, [r7, #2]
 801175c:	4613      	mov	r3, r2
 801175e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011760:	2300      	movs	r3, #0
 8011762:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011764:	2300      	movs	r3, #0
 8011766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801176e:	787c      	ldrb	r4, [r7, #1]
 8011770:	78ba      	ldrb	r2, [r7, #2]
 8011772:	78f9      	ldrb	r1, [r7, #3]
 8011774:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011776:	9302      	str	r3, [sp, #8]
 8011778:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801177c:	9301      	str	r3, [sp, #4]
 801177e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011782:	9300      	str	r3, [sp, #0]
 8011784:	4623      	mov	r3, r4
 8011786:	f7f3 f9e4 	bl	8004b52 <HAL_HCD_HC_Init>
 801178a:	4603      	mov	r3, r0
 801178c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801178e:	7bfb      	ldrb	r3, [r7, #15]
 8011790:	4618      	mov	r0, r3
 8011792:	f000 f8bd 	bl	8011910 <USBH_Get_USB_Status>
 8011796:	4603      	mov	r3, r0
 8011798:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801179a:	7bbb      	ldrb	r3, [r7, #14]
}
 801179c:	4618      	mov	r0, r3
 801179e:	3714      	adds	r7, #20
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bd90      	pop	{r4, r7, pc}

080117a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	460b      	mov	r3, r1
 80117ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117b0:	2300      	movs	r3, #0
 80117b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80117b4:	2300      	movs	r3, #0
 80117b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80117be:	78fa      	ldrb	r2, [r7, #3]
 80117c0:	4611      	mov	r1, r2
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7f3 fa54 	bl	8004c70 <HAL_HCD_HC_Halt>
 80117c8:	4603      	mov	r3, r0
 80117ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80117cc:	7bfb      	ldrb	r3, [r7, #15]
 80117ce:	4618      	mov	r0, r3
 80117d0:	f000 f89e 	bl	8011910 <USBH_Get_USB_Status>
 80117d4:	4603      	mov	r3, r0
 80117d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80117da:	4618      	mov	r0, r3
 80117dc:	3710      	adds	r7, #16
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}

080117e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80117e2:	b590      	push	{r4, r7, lr}
 80117e4:	b089      	sub	sp, #36	; 0x24
 80117e6:	af04      	add	r7, sp, #16
 80117e8:	6078      	str	r0, [r7, #4]
 80117ea:	4608      	mov	r0, r1
 80117ec:	4611      	mov	r1, r2
 80117ee:	461a      	mov	r2, r3
 80117f0:	4603      	mov	r3, r0
 80117f2:	70fb      	strb	r3, [r7, #3]
 80117f4:	460b      	mov	r3, r1
 80117f6:	70bb      	strb	r3, [r7, #2]
 80117f8:	4613      	mov	r3, r2
 80117fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117fc:	2300      	movs	r3, #0
 80117fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011800:	2300      	movs	r3, #0
 8011802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801180a:	787c      	ldrb	r4, [r7, #1]
 801180c:	78ba      	ldrb	r2, [r7, #2]
 801180e:	78f9      	ldrb	r1, [r7, #3]
 8011810:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011814:	9303      	str	r3, [sp, #12]
 8011816:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011818:	9302      	str	r3, [sp, #8]
 801181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181c:	9301      	str	r3, [sp, #4]
 801181e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011822:	9300      	str	r3, [sp, #0]
 8011824:	4623      	mov	r3, r4
 8011826:	f7f3 fa47 	bl	8004cb8 <HAL_HCD_HC_SubmitRequest>
 801182a:	4603      	mov	r3, r0
 801182c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801182e:	7bfb      	ldrb	r3, [r7, #15]
 8011830:	4618      	mov	r0, r3
 8011832:	f000 f86d 	bl	8011910 <USBH_Get_USB_Status>
 8011836:	4603      	mov	r3, r0
 8011838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801183a:	7bbb      	ldrb	r3, [r7, #14]
}
 801183c:	4618      	mov	r0, r3
 801183e:	3714      	adds	r7, #20
 8011840:	46bd      	mov	sp, r7
 8011842:	bd90      	pop	{r4, r7, pc}

08011844 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	460b      	mov	r3, r1
 801184e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011856:	78fa      	ldrb	r2, [r7, #3]
 8011858:	4611      	mov	r1, r2
 801185a:	4618      	mov	r0, r3
 801185c:	f7f3 fcdb 	bl	8005216 <HAL_HCD_HC_GetURBState>
 8011860:	4603      	mov	r3, r0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3708      	adds	r7, #8
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}

0801186a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801186a:	b580      	push	{r7, lr}
 801186c:	b082      	sub	sp, #8
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
 8011872:	460b      	mov	r3, r1
 8011874:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801187c:	2b01      	cmp	r3, #1
 801187e:	d103      	bne.n	8011888 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011880:	78fb      	ldrb	r3, [r7, #3]
 8011882:	4618      	mov	r0, r3
 8011884:	f000 f870 	bl	8011968 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011888:	20c8      	movs	r0, #200	; 0xc8
 801188a:	f7f2 fd77 	bl	800437c <HAL_Delay>
  return USBH_OK;
 801188e:	2300      	movs	r3, #0
}
 8011890:	4618      	mov	r0, r3
 8011892:	3708      	adds	r7, #8
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}

08011898 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011898:	b480      	push	{r7}
 801189a:	b085      	sub	sp, #20
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
 80118a0:	460b      	mov	r3, r1
 80118a2:	70fb      	strb	r3, [r7, #3]
 80118a4:	4613      	mov	r3, r2
 80118a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80118ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80118b0:	78fb      	ldrb	r3, [r7, #3]
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	212c      	movs	r1, #44	; 0x2c
 80118b6:	fb01 f303 	mul.w	r3, r1, r3
 80118ba:	4413      	add	r3, r2
 80118bc:	333b      	adds	r3, #59	; 0x3b
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d009      	beq.n	80118d8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80118c4:	78fb      	ldrb	r3, [r7, #3]
 80118c6:	68fa      	ldr	r2, [r7, #12]
 80118c8:	212c      	movs	r1, #44	; 0x2c
 80118ca:	fb01 f303 	mul.w	r3, r1, r3
 80118ce:	4413      	add	r3, r2
 80118d0:	3354      	adds	r3, #84	; 0x54
 80118d2:	78ba      	ldrb	r2, [r7, #2]
 80118d4:	701a      	strb	r2, [r3, #0]
 80118d6:	e008      	b.n	80118ea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80118d8:	78fb      	ldrb	r3, [r7, #3]
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	212c      	movs	r1, #44	; 0x2c
 80118de:	fb01 f303 	mul.w	r3, r1, r3
 80118e2:	4413      	add	r3, r2
 80118e4:	3355      	adds	r3, #85	; 0x55
 80118e6:	78ba      	ldrb	r2, [r7, #2]
 80118e8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80118ea:	2300      	movs	r3, #0
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3714      	adds	r7, #20
 80118f0:	46bd      	mov	sp, r7
 80118f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f6:	4770      	bx	lr

080118f8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7f2 fd3b 	bl	800437c <HAL_Delay>
}
 8011906:	bf00      	nop
 8011908:	3708      	adds	r7, #8
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
	...

08011910 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011910:	b480      	push	{r7}
 8011912:	b085      	sub	sp, #20
 8011914:	af00      	add	r7, sp, #0
 8011916:	4603      	mov	r3, r0
 8011918:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801191a:	2300      	movs	r3, #0
 801191c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801191e:	79fb      	ldrb	r3, [r7, #7]
 8011920:	2b03      	cmp	r3, #3
 8011922:	d817      	bhi.n	8011954 <USBH_Get_USB_Status+0x44>
 8011924:	a201      	add	r2, pc, #4	; (adr r2, 801192c <USBH_Get_USB_Status+0x1c>)
 8011926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801192a:	bf00      	nop
 801192c:	0801193d 	.word	0x0801193d
 8011930:	08011943 	.word	0x08011943
 8011934:	08011949 	.word	0x08011949
 8011938:	0801194f 	.word	0x0801194f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801193c:	2300      	movs	r3, #0
 801193e:	73fb      	strb	r3, [r7, #15]
    break;
 8011940:	e00b      	b.n	801195a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011942:	2302      	movs	r3, #2
 8011944:	73fb      	strb	r3, [r7, #15]
    break;
 8011946:	e008      	b.n	801195a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011948:	2301      	movs	r3, #1
 801194a:	73fb      	strb	r3, [r7, #15]
    break;
 801194c:	e005      	b.n	801195a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801194e:	2302      	movs	r3, #2
 8011950:	73fb      	strb	r3, [r7, #15]
    break;
 8011952:	e002      	b.n	801195a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011954:	2302      	movs	r3, #2
 8011956:	73fb      	strb	r3, [r7, #15]
    break;
 8011958:	bf00      	nop
  }
  return usb_status;
 801195a:	7bfb      	ldrb	r3, [r7, #15]
}
 801195c:	4618      	mov	r0, r3
 801195e:	3714      	adds	r7, #20
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr

08011968 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b084      	sub	sp, #16
 801196c:	af00      	add	r7, sp, #0
 801196e:	4603      	mov	r3, r0
 8011970:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011972:	79fb      	ldrb	r3, [r7, #7]
 8011974:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011976:	79fb      	ldrb	r3, [r7, #7]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d102      	bne.n	8011982 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801197c:	2300      	movs	r3, #0
 801197e:	73fb      	strb	r3, [r7, #15]
 8011980:	e001      	b.n	8011986 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8011982:	2301      	movs	r3, #1
 8011984:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8011986:	7bfb      	ldrb	r3, [r7, #15]
 8011988:	461a      	mov	r2, r3
 801198a:	2101      	movs	r1, #1
 801198c:	4803      	ldr	r0, [pc, #12]	; (801199c <MX_DriverVbusFS+0x34>)
 801198e:	f7f3 f841 	bl	8004a14 <HAL_GPIO_WritePin>
}
 8011992:	bf00      	nop
 8011994:	3710      	adds	r7, #16
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	40020800 	.word	0x40020800

080119a0 <__errno>:
 80119a0:	4b01      	ldr	r3, [pc, #4]	; (80119a8 <__errno+0x8>)
 80119a2:	6818      	ldr	r0, [r3, #0]
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	20000044 	.word	0x20000044

080119ac <__libc_init_array>:
 80119ac:	b570      	push	{r4, r5, r6, lr}
 80119ae:	4d0d      	ldr	r5, [pc, #52]	; (80119e4 <__libc_init_array+0x38>)
 80119b0:	4c0d      	ldr	r4, [pc, #52]	; (80119e8 <__libc_init_array+0x3c>)
 80119b2:	1b64      	subs	r4, r4, r5
 80119b4:	10a4      	asrs	r4, r4, #2
 80119b6:	2600      	movs	r6, #0
 80119b8:	42a6      	cmp	r6, r4
 80119ba:	d109      	bne.n	80119d0 <__libc_init_array+0x24>
 80119bc:	4d0b      	ldr	r5, [pc, #44]	; (80119ec <__libc_init_array+0x40>)
 80119be:	4c0c      	ldr	r4, [pc, #48]	; (80119f0 <__libc_init_array+0x44>)
 80119c0:	f000 fcd8 	bl	8012374 <_init>
 80119c4:	1b64      	subs	r4, r4, r5
 80119c6:	10a4      	asrs	r4, r4, #2
 80119c8:	2600      	movs	r6, #0
 80119ca:	42a6      	cmp	r6, r4
 80119cc:	d105      	bne.n	80119da <__libc_init_array+0x2e>
 80119ce:	bd70      	pop	{r4, r5, r6, pc}
 80119d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80119d4:	4798      	blx	r3
 80119d6:	3601      	adds	r6, #1
 80119d8:	e7ee      	b.n	80119b8 <__libc_init_array+0xc>
 80119da:	f855 3b04 	ldr.w	r3, [r5], #4
 80119de:	4798      	blx	r3
 80119e0:	3601      	adds	r6, #1
 80119e2:	e7f2      	b.n	80119ca <__libc_init_array+0x1e>
 80119e4:	08015024 	.word	0x08015024
 80119e8:	08015024 	.word	0x08015024
 80119ec:	08015024 	.word	0x08015024
 80119f0:	08015028 	.word	0x08015028

080119f4 <__retarget_lock_acquire_recursive>:
 80119f4:	4770      	bx	lr

080119f6 <__retarget_lock_release_recursive>:
 80119f6:	4770      	bx	lr

080119f8 <malloc>:
 80119f8:	4b02      	ldr	r3, [pc, #8]	; (8011a04 <malloc+0xc>)
 80119fa:	4601      	mov	r1, r0
 80119fc:	6818      	ldr	r0, [r3, #0]
 80119fe:	f000 b871 	b.w	8011ae4 <_malloc_r>
 8011a02:	bf00      	nop
 8011a04:	20000044 	.word	0x20000044

08011a08 <free>:
 8011a08:	4b02      	ldr	r3, [pc, #8]	; (8011a14 <free+0xc>)
 8011a0a:	4601      	mov	r1, r0
 8011a0c:	6818      	ldr	r0, [r3, #0]
 8011a0e:	f000 b819 	b.w	8011a44 <_free_r>
 8011a12:	bf00      	nop
 8011a14:	20000044 	.word	0x20000044

08011a18 <memcpy>:
 8011a18:	440a      	add	r2, r1
 8011a1a:	4291      	cmp	r1, r2
 8011a1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011a20:	d100      	bne.n	8011a24 <memcpy+0xc>
 8011a22:	4770      	bx	lr
 8011a24:	b510      	push	{r4, lr}
 8011a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a2e:	4291      	cmp	r1, r2
 8011a30:	d1f9      	bne.n	8011a26 <memcpy+0xe>
 8011a32:	bd10      	pop	{r4, pc}

08011a34 <memset>:
 8011a34:	4402      	add	r2, r0
 8011a36:	4603      	mov	r3, r0
 8011a38:	4293      	cmp	r3, r2
 8011a3a:	d100      	bne.n	8011a3e <memset+0xa>
 8011a3c:	4770      	bx	lr
 8011a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8011a42:	e7f9      	b.n	8011a38 <memset+0x4>

08011a44 <_free_r>:
 8011a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a46:	2900      	cmp	r1, #0
 8011a48:	d048      	beq.n	8011adc <_free_r+0x98>
 8011a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a4e:	9001      	str	r0, [sp, #4]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	f1a1 0404 	sub.w	r4, r1, #4
 8011a56:	bfb8      	it	lt
 8011a58:	18e4      	addlt	r4, r4, r3
 8011a5a:	f000 f947 	bl	8011cec <__malloc_lock>
 8011a5e:	4a20      	ldr	r2, [pc, #128]	; (8011ae0 <_free_r+0x9c>)
 8011a60:	9801      	ldr	r0, [sp, #4]
 8011a62:	6813      	ldr	r3, [r2, #0]
 8011a64:	4615      	mov	r5, r2
 8011a66:	b933      	cbnz	r3, 8011a76 <_free_r+0x32>
 8011a68:	6063      	str	r3, [r4, #4]
 8011a6a:	6014      	str	r4, [r2, #0]
 8011a6c:	b003      	add	sp, #12
 8011a6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a72:	f000 b941 	b.w	8011cf8 <__malloc_unlock>
 8011a76:	42a3      	cmp	r3, r4
 8011a78:	d90b      	bls.n	8011a92 <_free_r+0x4e>
 8011a7a:	6821      	ldr	r1, [r4, #0]
 8011a7c:	1862      	adds	r2, r4, r1
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	bf04      	itt	eq
 8011a82:	681a      	ldreq	r2, [r3, #0]
 8011a84:	685b      	ldreq	r3, [r3, #4]
 8011a86:	6063      	str	r3, [r4, #4]
 8011a88:	bf04      	itt	eq
 8011a8a:	1852      	addeq	r2, r2, r1
 8011a8c:	6022      	streq	r2, [r4, #0]
 8011a8e:	602c      	str	r4, [r5, #0]
 8011a90:	e7ec      	b.n	8011a6c <_free_r+0x28>
 8011a92:	461a      	mov	r2, r3
 8011a94:	685b      	ldr	r3, [r3, #4]
 8011a96:	b10b      	cbz	r3, 8011a9c <_free_r+0x58>
 8011a98:	42a3      	cmp	r3, r4
 8011a9a:	d9fa      	bls.n	8011a92 <_free_r+0x4e>
 8011a9c:	6811      	ldr	r1, [r2, #0]
 8011a9e:	1855      	adds	r5, r2, r1
 8011aa0:	42a5      	cmp	r5, r4
 8011aa2:	d10b      	bne.n	8011abc <_free_r+0x78>
 8011aa4:	6824      	ldr	r4, [r4, #0]
 8011aa6:	4421      	add	r1, r4
 8011aa8:	1854      	adds	r4, r2, r1
 8011aaa:	42a3      	cmp	r3, r4
 8011aac:	6011      	str	r1, [r2, #0]
 8011aae:	d1dd      	bne.n	8011a6c <_free_r+0x28>
 8011ab0:	681c      	ldr	r4, [r3, #0]
 8011ab2:	685b      	ldr	r3, [r3, #4]
 8011ab4:	6053      	str	r3, [r2, #4]
 8011ab6:	4421      	add	r1, r4
 8011ab8:	6011      	str	r1, [r2, #0]
 8011aba:	e7d7      	b.n	8011a6c <_free_r+0x28>
 8011abc:	d902      	bls.n	8011ac4 <_free_r+0x80>
 8011abe:	230c      	movs	r3, #12
 8011ac0:	6003      	str	r3, [r0, #0]
 8011ac2:	e7d3      	b.n	8011a6c <_free_r+0x28>
 8011ac4:	6825      	ldr	r5, [r4, #0]
 8011ac6:	1961      	adds	r1, r4, r5
 8011ac8:	428b      	cmp	r3, r1
 8011aca:	bf04      	itt	eq
 8011acc:	6819      	ldreq	r1, [r3, #0]
 8011ace:	685b      	ldreq	r3, [r3, #4]
 8011ad0:	6063      	str	r3, [r4, #4]
 8011ad2:	bf04      	itt	eq
 8011ad4:	1949      	addeq	r1, r1, r5
 8011ad6:	6021      	streq	r1, [r4, #0]
 8011ad8:	6054      	str	r4, [r2, #4]
 8011ada:	e7c7      	b.n	8011a6c <_free_r+0x28>
 8011adc:	b003      	add	sp, #12
 8011ade:	bd30      	pop	{r4, r5, pc}
 8011ae0:	20004b18 	.word	0x20004b18

08011ae4 <_malloc_r>:
 8011ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ae6:	1ccd      	adds	r5, r1, #3
 8011ae8:	f025 0503 	bic.w	r5, r5, #3
 8011aec:	3508      	adds	r5, #8
 8011aee:	2d0c      	cmp	r5, #12
 8011af0:	bf38      	it	cc
 8011af2:	250c      	movcc	r5, #12
 8011af4:	2d00      	cmp	r5, #0
 8011af6:	4606      	mov	r6, r0
 8011af8:	db01      	blt.n	8011afe <_malloc_r+0x1a>
 8011afa:	42a9      	cmp	r1, r5
 8011afc:	d903      	bls.n	8011b06 <_malloc_r+0x22>
 8011afe:	230c      	movs	r3, #12
 8011b00:	6033      	str	r3, [r6, #0]
 8011b02:	2000      	movs	r0, #0
 8011b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b06:	f000 f8f1 	bl	8011cec <__malloc_lock>
 8011b0a:	4921      	ldr	r1, [pc, #132]	; (8011b90 <_malloc_r+0xac>)
 8011b0c:	680a      	ldr	r2, [r1, #0]
 8011b0e:	4614      	mov	r4, r2
 8011b10:	b99c      	cbnz	r4, 8011b3a <_malloc_r+0x56>
 8011b12:	4f20      	ldr	r7, [pc, #128]	; (8011b94 <_malloc_r+0xb0>)
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	b923      	cbnz	r3, 8011b22 <_malloc_r+0x3e>
 8011b18:	4621      	mov	r1, r4
 8011b1a:	4630      	mov	r0, r6
 8011b1c:	f000 f8a6 	bl	8011c6c <_sbrk_r>
 8011b20:	6038      	str	r0, [r7, #0]
 8011b22:	4629      	mov	r1, r5
 8011b24:	4630      	mov	r0, r6
 8011b26:	f000 f8a1 	bl	8011c6c <_sbrk_r>
 8011b2a:	1c43      	adds	r3, r0, #1
 8011b2c:	d123      	bne.n	8011b76 <_malloc_r+0x92>
 8011b2e:	230c      	movs	r3, #12
 8011b30:	6033      	str	r3, [r6, #0]
 8011b32:	4630      	mov	r0, r6
 8011b34:	f000 f8e0 	bl	8011cf8 <__malloc_unlock>
 8011b38:	e7e3      	b.n	8011b02 <_malloc_r+0x1e>
 8011b3a:	6823      	ldr	r3, [r4, #0]
 8011b3c:	1b5b      	subs	r3, r3, r5
 8011b3e:	d417      	bmi.n	8011b70 <_malloc_r+0x8c>
 8011b40:	2b0b      	cmp	r3, #11
 8011b42:	d903      	bls.n	8011b4c <_malloc_r+0x68>
 8011b44:	6023      	str	r3, [r4, #0]
 8011b46:	441c      	add	r4, r3
 8011b48:	6025      	str	r5, [r4, #0]
 8011b4a:	e004      	b.n	8011b56 <_malloc_r+0x72>
 8011b4c:	6863      	ldr	r3, [r4, #4]
 8011b4e:	42a2      	cmp	r2, r4
 8011b50:	bf0c      	ite	eq
 8011b52:	600b      	streq	r3, [r1, #0]
 8011b54:	6053      	strne	r3, [r2, #4]
 8011b56:	4630      	mov	r0, r6
 8011b58:	f000 f8ce 	bl	8011cf8 <__malloc_unlock>
 8011b5c:	f104 000b 	add.w	r0, r4, #11
 8011b60:	1d23      	adds	r3, r4, #4
 8011b62:	f020 0007 	bic.w	r0, r0, #7
 8011b66:	1ac2      	subs	r2, r0, r3
 8011b68:	d0cc      	beq.n	8011b04 <_malloc_r+0x20>
 8011b6a:	1a1b      	subs	r3, r3, r0
 8011b6c:	50a3      	str	r3, [r4, r2]
 8011b6e:	e7c9      	b.n	8011b04 <_malloc_r+0x20>
 8011b70:	4622      	mov	r2, r4
 8011b72:	6864      	ldr	r4, [r4, #4]
 8011b74:	e7cc      	b.n	8011b10 <_malloc_r+0x2c>
 8011b76:	1cc4      	adds	r4, r0, #3
 8011b78:	f024 0403 	bic.w	r4, r4, #3
 8011b7c:	42a0      	cmp	r0, r4
 8011b7e:	d0e3      	beq.n	8011b48 <_malloc_r+0x64>
 8011b80:	1a21      	subs	r1, r4, r0
 8011b82:	4630      	mov	r0, r6
 8011b84:	f000 f872 	bl	8011c6c <_sbrk_r>
 8011b88:	3001      	adds	r0, #1
 8011b8a:	d1dd      	bne.n	8011b48 <_malloc_r+0x64>
 8011b8c:	e7cf      	b.n	8011b2e <_malloc_r+0x4a>
 8011b8e:	bf00      	nop
 8011b90:	20004b18 	.word	0x20004b18
 8011b94:	20004b1c 	.word	0x20004b1c

08011b98 <cleanup_glue>:
 8011b98:	b538      	push	{r3, r4, r5, lr}
 8011b9a:	460c      	mov	r4, r1
 8011b9c:	6809      	ldr	r1, [r1, #0]
 8011b9e:	4605      	mov	r5, r0
 8011ba0:	b109      	cbz	r1, 8011ba6 <cleanup_glue+0xe>
 8011ba2:	f7ff fff9 	bl	8011b98 <cleanup_glue>
 8011ba6:	4621      	mov	r1, r4
 8011ba8:	4628      	mov	r0, r5
 8011baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bae:	f7ff bf49 	b.w	8011a44 <_free_r>
	...

08011bb4 <_reclaim_reent>:
 8011bb4:	4b2c      	ldr	r3, [pc, #176]	; (8011c68 <_reclaim_reent+0xb4>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	4283      	cmp	r3, r0
 8011bba:	b570      	push	{r4, r5, r6, lr}
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	d051      	beq.n	8011c64 <_reclaim_reent+0xb0>
 8011bc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011bc2:	b143      	cbz	r3, 8011bd6 <_reclaim_reent+0x22>
 8011bc4:	68db      	ldr	r3, [r3, #12]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d14a      	bne.n	8011c60 <_reclaim_reent+0xac>
 8011bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011bcc:	6819      	ldr	r1, [r3, #0]
 8011bce:	b111      	cbz	r1, 8011bd6 <_reclaim_reent+0x22>
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	f7ff ff37 	bl	8011a44 <_free_r>
 8011bd6:	6961      	ldr	r1, [r4, #20]
 8011bd8:	b111      	cbz	r1, 8011be0 <_reclaim_reent+0x2c>
 8011bda:	4620      	mov	r0, r4
 8011bdc:	f7ff ff32 	bl	8011a44 <_free_r>
 8011be0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011be2:	b111      	cbz	r1, 8011bea <_reclaim_reent+0x36>
 8011be4:	4620      	mov	r0, r4
 8011be6:	f7ff ff2d 	bl	8011a44 <_free_r>
 8011bea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011bec:	b111      	cbz	r1, 8011bf4 <_reclaim_reent+0x40>
 8011bee:	4620      	mov	r0, r4
 8011bf0:	f7ff ff28 	bl	8011a44 <_free_r>
 8011bf4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011bf6:	b111      	cbz	r1, 8011bfe <_reclaim_reent+0x4a>
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	f7ff ff23 	bl	8011a44 <_free_r>
 8011bfe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011c00:	b111      	cbz	r1, 8011c08 <_reclaim_reent+0x54>
 8011c02:	4620      	mov	r0, r4
 8011c04:	f7ff ff1e 	bl	8011a44 <_free_r>
 8011c08:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011c0a:	b111      	cbz	r1, 8011c12 <_reclaim_reent+0x5e>
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	f7ff ff19 	bl	8011a44 <_free_r>
 8011c12:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011c14:	b111      	cbz	r1, 8011c1c <_reclaim_reent+0x68>
 8011c16:	4620      	mov	r0, r4
 8011c18:	f7ff ff14 	bl	8011a44 <_free_r>
 8011c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c1e:	b111      	cbz	r1, 8011c26 <_reclaim_reent+0x72>
 8011c20:	4620      	mov	r0, r4
 8011c22:	f7ff ff0f 	bl	8011a44 <_free_r>
 8011c26:	69a3      	ldr	r3, [r4, #24]
 8011c28:	b1e3      	cbz	r3, 8011c64 <_reclaim_reent+0xb0>
 8011c2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	4798      	blx	r3
 8011c30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011c32:	b1b9      	cbz	r1, 8011c64 <_reclaim_reent+0xb0>
 8011c34:	4620      	mov	r0, r4
 8011c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c3a:	f7ff bfad 	b.w	8011b98 <cleanup_glue>
 8011c3e:	5949      	ldr	r1, [r1, r5]
 8011c40:	b941      	cbnz	r1, 8011c54 <_reclaim_reent+0xa0>
 8011c42:	3504      	adds	r5, #4
 8011c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c46:	2d80      	cmp	r5, #128	; 0x80
 8011c48:	68d9      	ldr	r1, [r3, #12]
 8011c4a:	d1f8      	bne.n	8011c3e <_reclaim_reent+0x8a>
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	f7ff fef9 	bl	8011a44 <_free_r>
 8011c52:	e7ba      	b.n	8011bca <_reclaim_reent+0x16>
 8011c54:	680e      	ldr	r6, [r1, #0]
 8011c56:	4620      	mov	r0, r4
 8011c58:	f7ff fef4 	bl	8011a44 <_free_r>
 8011c5c:	4631      	mov	r1, r6
 8011c5e:	e7ef      	b.n	8011c40 <_reclaim_reent+0x8c>
 8011c60:	2500      	movs	r5, #0
 8011c62:	e7ef      	b.n	8011c44 <_reclaim_reent+0x90>
 8011c64:	bd70      	pop	{r4, r5, r6, pc}
 8011c66:	bf00      	nop
 8011c68:	20000044 	.word	0x20000044

08011c6c <_sbrk_r>:
 8011c6c:	b538      	push	{r3, r4, r5, lr}
 8011c6e:	4d06      	ldr	r5, [pc, #24]	; (8011c88 <_sbrk_r+0x1c>)
 8011c70:	2300      	movs	r3, #0
 8011c72:	4604      	mov	r4, r0
 8011c74:	4608      	mov	r0, r1
 8011c76:	602b      	str	r3, [r5, #0]
 8011c78:	f7f1 fee4 	bl	8003a44 <_sbrk>
 8011c7c:	1c43      	adds	r3, r0, #1
 8011c7e:	d102      	bne.n	8011c86 <_sbrk_r+0x1a>
 8011c80:	682b      	ldr	r3, [r5, #0]
 8011c82:	b103      	cbz	r3, 8011c86 <_sbrk_r+0x1a>
 8011c84:	6023      	str	r3, [r4, #0]
 8011c86:	bd38      	pop	{r3, r4, r5, pc}
 8011c88:	2000573c 	.word	0x2000573c

08011c8c <siprintf>:
 8011c8c:	b40e      	push	{r1, r2, r3}
 8011c8e:	b500      	push	{lr}
 8011c90:	b09c      	sub	sp, #112	; 0x70
 8011c92:	ab1d      	add	r3, sp, #116	; 0x74
 8011c94:	9002      	str	r0, [sp, #8]
 8011c96:	9006      	str	r0, [sp, #24]
 8011c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011c9c:	4809      	ldr	r0, [pc, #36]	; (8011cc4 <siprintf+0x38>)
 8011c9e:	9107      	str	r1, [sp, #28]
 8011ca0:	9104      	str	r1, [sp, #16]
 8011ca2:	4909      	ldr	r1, [pc, #36]	; (8011cc8 <siprintf+0x3c>)
 8011ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ca8:	9105      	str	r1, [sp, #20]
 8011caa:	6800      	ldr	r0, [r0, #0]
 8011cac:	9301      	str	r3, [sp, #4]
 8011cae:	a902      	add	r1, sp, #8
 8011cb0:	f000 f884 	bl	8011dbc <_svfiprintf_r>
 8011cb4:	9b02      	ldr	r3, [sp, #8]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	701a      	strb	r2, [r3, #0]
 8011cba:	b01c      	add	sp, #112	; 0x70
 8011cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cc0:	b003      	add	sp, #12
 8011cc2:	4770      	bx	lr
 8011cc4:	20000044 	.word	0x20000044
 8011cc8:	ffff0208 	.word	0xffff0208

08011ccc <strcat>:
 8011ccc:	b510      	push	{r4, lr}
 8011cce:	4602      	mov	r2, r0
 8011cd0:	7814      	ldrb	r4, [r2, #0]
 8011cd2:	4613      	mov	r3, r2
 8011cd4:	3201      	adds	r2, #1
 8011cd6:	2c00      	cmp	r4, #0
 8011cd8:	d1fa      	bne.n	8011cd0 <strcat+0x4>
 8011cda:	3b01      	subs	r3, #1
 8011cdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ce0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ce4:	2a00      	cmp	r2, #0
 8011ce6:	d1f9      	bne.n	8011cdc <strcat+0x10>
 8011ce8:	bd10      	pop	{r4, pc}
	...

08011cec <__malloc_lock>:
 8011cec:	4801      	ldr	r0, [pc, #4]	; (8011cf4 <__malloc_lock+0x8>)
 8011cee:	f7ff be81 	b.w	80119f4 <__retarget_lock_acquire_recursive>
 8011cf2:	bf00      	nop
 8011cf4:	20005734 	.word	0x20005734

08011cf8 <__malloc_unlock>:
 8011cf8:	4801      	ldr	r0, [pc, #4]	; (8011d00 <__malloc_unlock+0x8>)
 8011cfa:	f7ff be7c 	b.w	80119f6 <__retarget_lock_release_recursive>
 8011cfe:	bf00      	nop
 8011d00:	20005734 	.word	0x20005734

08011d04 <__ssputs_r>:
 8011d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d08:	688e      	ldr	r6, [r1, #8]
 8011d0a:	429e      	cmp	r6, r3
 8011d0c:	4682      	mov	sl, r0
 8011d0e:	460c      	mov	r4, r1
 8011d10:	4690      	mov	r8, r2
 8011d12:	461f      	mov	r7, r3
 8011d14:	d838      	bhi.n	8011d88 <__ssputs_r+0x84>
 8011d16:	898a      	ldrh	r2, [r1, #12]
 8011d18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d1c:	d032      	beq.n	8011d84 <__ssputs_r+0x80>
 8011d1e:	6825      	ldr	r5, [r4, #0]
 8011d20:	6909      	ldr	r1, [r1, #16]
 8011d22:	eba5 0901 	sub.w	r9, r5, r1
 8011d26:	6965      	ldr	r5, [r4, #20]
 8011d28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d30:	3301      	adds	r3, #1
 8011d32:	444b      	add	r3, r9
 8011d34:	106d      	asrs	r5, r5, #1
 8011d36:	429d      	cmp	r5, r3
 8011d38:	bf38      	it	cc
 8011d3a:	461d      	movcc	r5, r3
 8011d3c:	0553      	lsls	r3, r2, #21
 8011d3e:	d531      	bpl.n	8011da4 <__ssputs_r+0xa0>
 8011d40:	4629      	mov	r1, r5
 8011d42:	f7ff fecf 	bl	8011ae4 <_malloc_r>
 8011d46:	4606      	mov	r6, r0
 8011d48:	b950      	cbnz	r0, 8011d60 <__ssputs_r+0x5c>
 8011d4a:	230c      	movs	r3, #12
 8011d4c:	f8ca 3000 	str.w	r3, [sl]
 8011d50:	89a3      	ldrh	r3, [r4, #12]
 8011d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d56:	81a3      	strh	r3, [r4, #12]
 8011d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d60:	6921      	ldr	r1, [r4, #16]
 8011d62:	464a      	mov	r2, r9
 8011d64:	f7ff fe58 	bl	8011a18 <memcpy>
 8011d68:	89a3      	ldrh	r3, [r4, #12]
 8011d6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d72:	81a3      	strh	r3, [r4, #12]
 8011d74:	6126      	str	r6, [r4, #16]
 8011d76:	6165      	str	r5, [r4, #20]
 8011d78:	444e      	add	r6, r9
 8011d7a:	eba5 0509 	sub.w	r5, r5, r9
 8011d7e:	6026      	str	r6, [r4, #0]
 8011d80:	60a5      	str	r5, [r4, #8]
 8011d82:	463e      	mov	r6, r7
 8011d84:	42be      	cmp	r6, r7
 8011d86:	d900      	bls.n	8011d8a <__ssputs_r+0x86>
 8011d88:	463e      	mov	r6, r7
 8011d8a:	4632      	mov	r2, r6
 8011d8c:	6820      	ldr	r0, [r4, #0]
 8011d8e:	4641      	mov	r1, r8
 8011d90:	f000 faa8 	bl	80122e4 <memmove>
 8011d94:	68a3      	ldr	r3, [r4, #8]
 8011d96:	6822      	ldr	r2, [r4, #0]
 8011d98:	1b9b      	subs	r3, r3, r6
 8011d9a:	4432      	add	r2, r6
 8011d9c:	60a3      	str	r3, [r4, #8]
 8011d9e:	6022      	str	r2, [r4, #0]
 8011da0:	2000      	movs	r0, #0
 8011da2:	e7db      	b.n	8011d5c <__ssputs_r+0x58>
 8011da4:	462a      	mov	r2, r5
 8011da6:	f000 fab7 	bl	8012318 <_realloc_r>
 8011daa:	4606      	mov	r6, r0
 8011dac:	2800      	cmp	r0, #0
 8011dae:	d1e1      	bne.n	8011d74 <__ssputs_r+0x70>
 8011db0:	6921      	ldr	r1, [r4, #16]
 8011db2:	4650      	mov	r0, sl
 8011db4:	f7ff fe46 	bl	8011a44 <_free_r>
 8011db8:	e7c7      	b.n	8011d4a <__ssputs_r+0x46>
	...

08011dbc <_svfiprintf_r>:
 8011dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc0:	4698      	mov	r8, r3
 8011dc2:	898b      	ldrh	r3, [r1, #12]
 8011dc4:	061b      	lsls	r3, r3, #24
 8011dc6:	b09d      	sub	sp, #116	; 0x74
 8011dc8:	4607      	mov	r7, r0
 8011dca:	460d      	mov	r5, r1
 8011dcc:	4614      	mov	r4, r2
 8011dce:	d50e      	bpl.n	8011dee <_svfiprintf_r+0x32>
 8011dd0:	690b      	ldr	r3, [r1, #16]
 8011dd2:	b963      	cbnz	r3, 8011dee <_svfiprintf_r+0x32>
 8011dd4:	2140      	movs	r1, #64	; 0x40
 8011dd6:	f7ff fe85 	bl	8011ae4 <_malloc_r>
 8011dda:	6028      	str	r0, [r5, #0]
 8011ddc:	6128      	str	r0, [r5, #16]
 8011dde:	b920      	cbnz	r0, 8011dea <_svfiprintf_r+0x2e>
 8011de0:	230c      	movs	r3, #12
 8011de2:	603b      	str	r3, [r7, #0]
 8011de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011de8:	e0d1      	b.n	8011f8e <_svfiprintf_r+0x1d2>
 8011dea:	2340      	movs	r3, #64	; 0x40
 8011dec:	616b      	str	r3, [r5, #20]
 8011dee:	2300      	movs	r3, #0
 8011df0:	9309      	str	r3, [sp, #36]	; 0x24
 8011df2:	2320      	movs	r3, #32
 8011df4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011df8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011dfc:	2330      	movs	r3, #48	; 0x30
 8011dfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011fa8 <_svfiprintf_r+0x1ec>
 8011e02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e06:	f04f 0901 	mov.w	r9, #1
 8011e0a:	4623      	mov	r3, r4
 8011e0c:	469a      	mov	sl, r3
 8011e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e12:	b10a      	cbz	r2, 8011e18 <_svfiprintf_r+0x5c>
 8011e14:	2a25      	cmp	r2, #37	; 0x25
 8011e16:	d1f9      	bne.n	8011e0c <_svfiprintf_r+0x50>
 8011e18:	ebba 0b04 	subs.w	fp, sl, r4
 8011e1c:	d00b      	beq.n	8011e36 <_svfiprintf_r+0x7a>
 8011e1e:	465b      	mov	r3, fp
 8011e20:	4622      	mov	r2, r4
 8011e22:	4629      	mov	r1, r5
 8011e24:	4638      	mov	r0, r7
 8011e26:	f7ff ff6d 	bl	8011d04 <__ssputs_r>
 8011e2a:	3001      	adds	r0, #1
 8011e2c:	f000 80aa 	beq.w	8011f84 <_svfiprintf_r+0x1c8>
 8011e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e32:	445a      	add	r2, fp
 8011e34:	9209      	str	r2, [sp, #36]	; 0x24
 8011e36:	f89a 3000 	ldrb.w	r3, [sl]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	f000 80a2 	beq.w	8011f84 <_svfiprintf_r+0x1c8>
 8011e40:	2300      	movs	r3, #0
 8011e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e4a:	f10a 0a01 	add.w	sl, sl, #1
 8011e4e:	9304      	str	r3, [sp, #16]
 8011e50:	9307      	str	r3, [sp, #28]
 8011e52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e56:	931a      	str	r3, [sp, #104]	; 0x68
 8011e58:	4654      	mov	r4, sl
 8011e5a:	2205      	movs	r2, #5
 8011e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e60:	4851      	ldr	r0, [pc, #324]	; (8011fa8 <_svfiprintf_r+0x1ec>)
 8011e62:	f7ee f9cd 	bl	8000200 <memchr>
 8011e66:	9a04      	ldr	r2, [sp, #16]
 8011e68:	b9d8      	cbnz	r0, 8011ea2 <_svfiprintf_r+0xe6>
 8011e6a:	06d0      	lsls	r0, r2, #27
 8011e6c:	bf44      	itt	mi
 8011e6e:	2320      	movmi	r3, #32
 8011e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e74:	0711      	lsls	r1, r2, #28
 8011e76:	bf44      	itt	mi
 8011e78:	232b      	movmi	r3, #43	; 0x2b
 8011e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e82:	2b2a      	cmp	r3, #42	; 0x2a
 8011e84:	d015      	beq.n	8011eb2 <_svfiprintf_r+0xf6>
 8011e86:	9a07      	ldr	r2, [sp, #28]
 8011e88:	4654      	mov	r4, sl
 8011e8a:	2000      	movs	r0, #0
 8011e8c:	f04f 0c0a 	mov.w	ip, #10
 8011e90:	4621      	mov	r1, r4
 8011e92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e96:	3b30      	subs	r3, #48	; 0x30
 8011e98:	2b09      	cmp	r3, #9
 8011e9a:	d94e      	bls.n	8011f3a <_svfiprintf_r+0x17e>
 8011e9c:	b1b0      	cbz	r0, 8011ecc <_svfiprintf_r+0x110>
 8011e9e:	9207      	str	r2, [sp, #28]
 8011ea0:	e014      	b.n	8011ecc <_svfiprintf_r+0x110>
 8011ea2:	eba0 0308 	sub.w	r3, r0, r8
 8011ea6:	fa09 f303 	lsl.w	r3, r9, r3
 8011eaa:	4313      	orrs	r3, r2
 8011eac:	9304      	str	r3, [sp, #16]
 8011eae:	46a2      	mov	sl, r4
 8011eb0:	e7d2      	b.n	8011e58 <_svfiprintf_r+0x9c>
 8011eb2:	9b03      	ldr	r3, [sp, #12]
 8011eb4:	1d19      	adds	r1, r3, #4
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	9103      	str	r1, [sp, #12]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	bfbb      	ittet	lt
 8011ebe:	425b      	neglt	r3, r3
 8011ec0:	f042 0202 	orrlt.w	r2, r2, #2
 8011ec4:	9307      	strge	r3, [sp, #28]
 8011ec6:	9307      	strlt	r3, [sp, #28]
 8011ec8:	bfb8      	it	lt
 8011eca:	9204      	strlt	r2, [sp, #16]
 8011ecc:	7823      	ldrb	r3, [r4, #0]
 8011ece:	2b2e      	cmp	r3, #46	; 0x2e
 8011ed0:	d10c      	bne.n	8011eec <_svfiprintf_r+0x130>
 8011ed2:	7863      	ldrb	r3, [r4, #1]
 8011ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8011ed6:	d135      	bne.n	8011f44 <_svfiprintf_r+0x188>
 8011ed8:	9b03      	ldr	r3, [sp, #12]
 8011eda:	1d1a      	adds	r2, r3, #4
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	9203      	str	r2, [sp, #12]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	bfb8      	it	lt
 8011ee4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011ee8:	3402      	adds	r4, #2
 8011eea:	9305      	str	r3, [sp, #20]
 8011eec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011fb8 <_svfiprintf_r+0x1fc>
 8011ef0:	7821      	ldrb	r1, [r4, #0]
 8011ef2:	2203      	movs	r2, #3
 8011ef4:	4650      	mov	r0, sl
 8011ef6:	f7ee f983 	bl	8000200 <memchr>
 8011efa:	b140      	cbz	r0, 8011f0e <_svfiprintf_r+0x152>
 8011efc:	2340      	movs	r3, #64	; 0x40
 8011efe:	eba0 000a 	sub.w	r0, r0, sl
 8011f02:	fa03 f000 	lsl.w	r0, r3, r0
 8011f06:	9b04      	ldr	r3, [sp, #16]
 8011f08:	4303      	orrs	r3, r0
 8011f0a:	3401      	adds	r4, #1
 8011f0c:	9304      	str	r3, [sp, #16]
 8011f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f12:	4826      	ldr	r0, [pc, #152]	; (8011fac <_svfiprintf_r+0x1f0>)
 8011f14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f18:	2206      	movs	r2, #6
 8011f1a:	f7ee f971 	bl	8000200 <memchr>
 8011f1e:	2800      	cmp	r0, #0
 8011f20:	d038      	beq.n	8011f94 <_svfiprintf_r+0x1d8>
 8011f22:	4b23      	ldr	r3, [pc, #140]	; (8011fb0 <_svfiprintf_r+0x1f4>)
 8011f24:	bb1b      	cbnz	r3, 8011f6e <_svfiprintf_r+0x1b2>
 8011f26:	9b03      	ldr	r3, [sp, #12]
 8011f28:	3307      	adds	r3, #7
 8011f2a:	f023 0307 	bic.w	r3, r3, #7
 8011f2e:	3308      	adds	r3, #8
 8011f30:	9303      	str	r3, [sp, #12]
 8011f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f34:	4433      	add	r3, r6
 8011f36:	9309      	str	r3, [sp, #36]	; 0x24
 8011f38:	e767      	b.n	8011e0a <_svfiprintf_r+0x4e>
 8011f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f3e:	460c      	mov	r4, r1
 8011f40:	2001      	movs	r0, #1
 8011f42:	e7a5      	b.n	8011e90 <_svfiprintf_r+0xd4>
 8011f44:	2300      	movs	r3, #0
 8011f46:	3401      	adds	r4, #1
 8011f48:	9305      	str	r3, [sp, #20]
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	f04f 0c0a 	mov.w	ip, #10
 8011f50:	4620      	mov	r0, r4
 8011f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f56:	3a30      	subs	r2, #48	; 0x30
 8011f58:	2a09      	cmp	r2, #9
 8011f5a:	d903      	bls.n	8011f64 <_svfiprintf_r+0x1a8>
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d0c5      	beq.n	8011eec <_svfiprintf_r+0x130>
 8011f60:	9105      	str	r1, [sp, #20]
 8011f62:	e7c3      	b.n	8011eec <_svfiprintf_r+0x130>
 8011f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f68:	4604      	mov	r4, r0
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	e7f0      	b.n	8011f50 <_svfiprintf_r+0x194>
 8011f6e:	ab03      	add	r3, sp, #12
 8011f70:	9300      	str	r3, [sp, #0]
 8011f72:	462a      	mov	r2, r5
 8011f74:	4b0f      	ldr	r3, [pc, #60]	; (8011fb4 <_svfiprintf_r+0x1f8>)
 8011f76:	a904      	add	r1, sp, #16
 8011f78:	4638      	mov	r0, r7
 8011f7a:	f3af 8000 	nop.w
 8011f7e:	1c42      	adds	r2, r0, #1
 8011f80:	4606      	mov	r6, r0
 8011f82:	d1d6      	bne.n	8011f32 <_svfiprintf_r+0x176>
 8011f84:	89ab      	ldrh	r3, [r5, #12]
 8011f86:	065b      	lsls	r3, r3, #25
 8011f88:	f53f af2c 	bmi.w	8011de4 <_svfiprintf_r+0x28>
 8011f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f8e:	b01d      	add	sp, #116	; 0x74
 8011f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f94:	ab03      	add	r3, sp, #12
 8011f96:	9300      	str	r3, [sp, #0]
 8011f98:	462a      	mov	r2, r5
 8011f9a:	4b06      	ldr	r3, [pc, #24]	; (8011fb4 <_svfiprintf_r+0x1f8>)
 8011f9c:	a904      	add	r1, sp, #16
 8011f9e:	4638      	mov	r0, r7
 8011fa0:	f000 f87a 	bl	8012098 <_printf_i>
 8011fa4:	e7eb      	b.n	8011f7e <_svfiprintf_r+0x1c2>
 8011fa6:	bf00      	nop
 8011fa8:	08014fe8 	.word	0x08014fe8
 8011fac:	08014ff2 	.word	0x08014ff2
 8011fb0:	00000000 	.word	0x00000000
 8011fb4:	08011d05 	.word	0x08011d05
 8011fb8:	08014fee 	.word	0x08014fee

08011fbc <_printf_common>:
 8011fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fc0:	4616      	mov	r6, r2
 8011fc2:	4699      	mov	r9, r3
 8011fc4:	688a      	ldr	r2, [r1, #8]
 8011fc6:	690b      	ldr	r3, [r1, #16]
 8011fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	bfb8      	it	lt
 8011fd0:	4613      	movlt	r3, r2
 8011fd2:	6033      	str	r3, [r6, #0]
 8011fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011fd8:	4607      	mov	r7, r0
 8011fda:	460c      	mov	r4, r1
 8011fdc:	b10a      	cbz	r2, 8011fe2 <_printf_common+0x26>
 8011fde:	3301      	adds	r3, #1
 8011fe0:	6033      	str	r3, [r6, #0]
 8011fe2:	6823      	ldr	r3, [r4, #0]
 8011fe4:	0699      	lsls	r1, r3, #26
 8011fe6:	bf42      	ittt	mi
 8011fe8:	6833      	ldrmi	r3, [r6, #0]
 8011fea:	3302      	addmi	r3, #2
 8011fec:	6033      	strmi	r3, [r6, #0]
 8011fee:	6825      	ldr	r5, [r4, #0]
 8011ff0:	f015 0506 	ands.w	r5, r5, #6
 8011ff4:	d106      	bne.n	8012004 <_printf_common+0x48>
 8011ff6:	f104 0a19 	add.w	sl, r4, #25
 8011ffa:	68e3      	ldr	r3, [r4, #12]
 8011ffc:	6832      	ldr	r2, [r6, #0]
 8011ffe:	1a9b      	subs	r3, r3, r2
 8012000:	42ab      	cmp	r3, r5
 8012002:	dc26      	bgt.n	8012052 <_printf_common+0x96>
 8012004:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012008:	1e13      	subs	r3, r2, #0
 801200a:	6822      	ldr	r2, [r4, #0]
 801200c:	bf18      	it	ne
 801200e:	2301      	movne	r3, #1
 8012010:	0692      	lsls	r2, r2, #26
 8012012:	d42b      	bmi.n	801206c <_printf_common+0xb0>
 8012014:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012018:	4649      	mov	r1, r9
 801201a:	4638      	mov	r0, r7
 801201c:	47c0      	blx	r8
 801201e:	3001      	adds	r0, #1
 8012020:	d01e      	beq.n	8012060 <_printf_common+0xa4>
 8012022:	6823      	ldr	r3, [r4, #0]
 8012024:	68e5      	ldr	r5, [r4, #12]
 8012026:	6832      	ldr	r2, [r6, #0]
 8012028:	f003 0306 	and.w	r3, r3, #6
 801202c:	2b04      	cmp	r3, #4
 801202e:	bf08      	it	eq
 8012030:	1aad      	subeq	r5, r5, r2
 8012032:	68a3      	ldr	r3, [r4, #8]
 8012034:	6922      	ldr	r2, [r4, #16]
 8012036:	bf0c      	ite	eq
 8012038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801203c:	2500      	movne	r5, #0
 801203e:	4293      	cmp	r3, r2
 8012040:	bfc4      	itt	gt
 8012042:	1a9b      	subgt	r3, r3, r2
 8012044:	18ed      	addgt	r5, r5, r3
 8012046:	2600      	movs	r6, #0
 8012048:	341a      	adds	r4, #26
 801204a:	42b5      	cmp	r5, r6
 801204c:	d11a      	bne.n	8012084 <_printf_common+0xc8>
 801204e:	2000      	movs	r0, #0
 8012050:	e008      	b.n	8012064 <_printf_common+0xa8>
 8012052:	2301      	movs	r3, #1
 8012054:	4652      	mov	r2, sl
 8012056:	4649      	mov	r1, r9
 8012058:	4638      	mov	r0, r7
 801205a:	47c0      	blx	r8
 801205c:	3001      	adds	r0, #1
 801205e:	d103      	bne.n	8012068 <_printf_common+0xac>
 8012060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012068:	3501      	adds	r5, #1
 801206a:	e7c6      	b.n	8011ffa <_printf_common+0x3e>
 801206c:	18e1      	adds	r1, r4, r3
 801206e:	1c5a      	adds	r2, r3, #1
 8012070:	2030      	movs	r0, #48	; 0x30
 8012072:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012076:	4422      	add	r2, r4
 8012078:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801207c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012080:	3302      	adds	r3, #2
 8012082:	e7c7      	b.n	8012014 <_printf_common+0x58>
 8012084:	2301      	movs	r3, #1
 8012086:	4622      	mov	r2, r4
 8012088:	4649      	mov	r1, r9
 801208a:	4638      	mov	r0, r7
 801208c:	47c0      	blx	r8
 801208e:	3001      	adds	r0, #1
 8012090:	d0e6      	beq.n	8012060 <_printf_common+0xa4>
 8012092:	3601      	adds	r6, #1
 8012094:	e7d9      	b.n	801204a <_printf_common+0x8e>
	...

08012098 <_printf_i>:
 8012098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801209c:	460c      	mov	r4, r1
 801209e:	4691      	mov	r9, r2
 80120a0:	7e27      	ldrb	r7, [r4, #24]
 80120a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80120a4:	2f78      	cmp	r7, #120	; 0x78
 80120a6:	4680      	mov	r8, r0
 80120a8:	469a      	mov	sl, r3
 80120aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80120ae:	d807      	bhi.n	80120c0 <_printf_i+0x28>
 80120b0:	2f62      	cmp	r7, #98	; 0x62
 80120b2:	d80a      	bhi.n	80120ca <_printf_i+0x32>
 80120b4:	2f00      	cmp	r7, #0
 80120b6:	f000 80d8 	beq.w	801226a <_printf_i+0x1d2>
 80120ba:	2f58      	cmp	r7, #88	; 0x58
 80120bc:	f000 80a3 	beq.w	8012206 <_printf_i+0x16e>
 80120c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80120c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80120c8:	e03a      	b.n	8012140 <_printf_i+0xa8>
 80120ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80120ce:	2b15      	cmp	r3, #21
 80120d0:	d8f6      	bhi.n	80120c0 <_printf_i+0x28>
 80120d2:	a001      	add	r0, pc, #4	; (adr r0, 80120d8 <_printf_i+0x40>)
 80120d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80120d8:	08012131 	.word	0x08012131
 80120dc:	08012145 	.word	0x08012145
 80120e0:	080120c1 	.word	0x080120c1
 80120e4:	080120c1 	.word	0x080120c1
 80120e8:	080120c1 	.word	0x080120c1
 80120ec:	080120c1 	.word	0x080120c1
 80120f0:	08012145 	.word	0x08012145
 80120f4:	080120c1 	.word	0x080120c1
 80120f8:	080120c1 	.word	0x080120c1
 80120fc:	080120c1 	.word	0x080120c1
 8012100:	080120c1 	.word	0x080120c1
 8012104:	08012251 	.word	0x08012251
 8012108:	08012175 	.word	0x08012175
 801210c:	08012233 	.word	0x08012233
 8012110:	080120c1 	.word	0x080120c1
 8012114:	080120c1 	.word	0x080120c1
 8012118:	08012273 	.word	0x08012273
 801211c:	080120c1 	.word	0x080120c1
 8012120:	08012175 	.word	0x08012175
 8012124:	080120c1 	.word	0x080120c1
 8012128:	080120c1 	.word	0x080120c1
 801212c:	0801223b 	.word	0x0801223b
 8012130:	680b      	ldr	r3, [r1, #0]
 8012132:	1d1a      	adds	r2, r3, #4
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	600a      	str	r2, [r1, #0]
 8012138:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801213c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012140:	2301      	movs	r3, #1
 8012142:	e0a3      	b.n	801228c <_printf_i+0x1f4>
 8012144:	6825      	ldr	r5, [r4, #0]
 8012146:	6808      	ldr	r0, [r1, #0]
 8012148:	062e      	lsls	r6, r5, #24
 801214a:	f100 0304 	add.w	r3, r0, #4
 801214e:	d50a      	bpl.n	8012166 <_printf_i+0xce>
 8012150:	6805      	ldr	r5, [r0, #0]
 8012152:	600b      	str	r3, [r1, #0]
 8012154:	2d00      	cmp	r5, #0
 8012156:	da03      	bge.n	8012160 <_printf_i+0xc8>
 8012158:	232d      	movs	r3, #45	; 0x2d
 801215a:	426d      	negs	r5, r5
 801215c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012160:	485e      	ldr	r0, [pc, #376]	; (80122dc <_printf_i+0x244>)
 8012162:	230a      	movs	r3, #10
 8012164:	e019      	b.n	801219a <_printf_i+0x102>
 8012166:	f015 0f40 	tst.w	r5, #64	; 0x40
 801216a:	6805      	ldr	r5, [r0, #0]
 801216c:	600b      	str	r3, [r1, #0]
 801216e:	bf18      	it	ne
 8012170:	b22d      	sxthne	r5, r5
 8012172:	e7ef      	b.n	8012154 <_printf_i+0xbc>
 8012174:	680b      	ldr	r3, [r1, #0]
 8012176:	6825      	ldr	r5, [r4, #0]
 8012178:	1d18      	adds	r0, r3, #4
 801217a:	6008      	str	r0, [r1, #0]
 801217c:	0628      	lsls	r0, r5, #24
 801217e:	d501      	bpl.n	8012184 <_printf_i+0xec>
 8012180:	681d      	ldr	r5, [r3, #0]
 8012182:	e002      	b.n	801218a <_printf_i+0xf2>
 8012184:	0669      	lsls	r1, r5, #25
 8012186:	d5fb      	bpl.n	8012180 <_printf_i+0xe8>
 8012188:	881d      	ldrh	r5, [r3, #0]
 801218a:	4854      	ldr	r0, [pc, #336]	; (80122dc <_printf_i+0x244>)
 801218c:	2f6f      	cmp	r7, #111	; 0x6f
 801218e:	bf0c      	ite	eq
 8012190:	2308      	moveq	r3, #8
 8012192:	230a      	movne	r3, #10
 8012194:	2100      	movs	r1, #0
 8012196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801219a:	6866      	ldr	r6, [r4, #4]
 801219c:	60a6      	str	r6, [r4, #8]
 801219e:	2e00      	cmp	r6, #0
 80121a0:	bfa2      	ittt	ge
 80121a2:	6821      	ldrge	r1, [r4, #0]
 80121a4:	f021 0104 	bicge.w	r1, r1, #4
 80121a8:	6021      	strge	r1, [r4, #0]
 80121aa:	b90d      	cbnz	r5, 80121b0 <_printf_i+0x118>
 80121ac:	2e00      	cmp	r6, #0
 80121ae:	d04d      	beq.n	801224c <_printf_i+0x1b4>
 80121b0:	4616      	mov	r6, r2
 80121b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80121b6:	fb03 5711 	mls	r7, r3, r1, r5
 80121ba:	5dc7      	ldrb	r7, [r0, r7]
 80121bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80121c0:	462f      	mov	r7, r5
 80121c2:	42bb      	cmp	r3, r7
 80121c4:	460d      	mov	r5, r1
 80121c6:	d9f4      	bls.n	80121b2 <_printf_i+0x11a>
 80121c8:	2b08      	cmp	r3, #8
 80121ca:	d10b      	bne.n	80121e4 <_printf_i+0x14c>
 80121cc:	6823      	ldr	r3, [r4, #0]
 80121ce:	07df      	lsls	r7, r3, #31
 80121d0:	d508      	bpl.n	80121e4 <_printf_i+0x14c>
 80121d2:	6923      	ldr	r3, [r4, #16]
 80121d4:	6861      	ldr	r1, [r4, #4]
 80121d6:	4299      	cmp	r1, r3
 80121d8:	bfde      	ittt	le
 80121da:	2330      	movle	r3, #48	; 0x30
 80121dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80121e0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80121e4:	1b92      	subs	r2, r2, r6
 80121e6:	6122      	str	r2, [r4, #16]
 80121e8:	f8cd a000 	str.w	sl, [sp]
 80121ec:	464b      	mov	r3, r9
 80121ee:	aa03      	add	r2, sp, #12
 80121f0:	4621      	mov	r1, r4
 80121f2:	4640      	mov	r0, r8
 80121f4:	f7ff fee2 	bl	8011fbc <_printf_common>
 80121f8:	3001      	adds	r0, #1
 80121fa:	d14c      	bne.n	8012296 <_printf_i+0x1fe>
 80121fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012200:	b004      	add	sp, #16
 8012202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012206:	4835      	ldr	r0, [pc, #212]	; (80122dc <_printf_i+0x244>)
 8012208:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801220c:	6823      	ldr	r3, [r4, #0]
 801220e:	680e      	ldr	r6, [r1, #0]
 8012210:	061f      	lsls	r7, r3, #24
 8012212:	f856 5b04 	ldr.w	r5, [r6], #4
 8012216:	600e      	str	r6, [r1, #0]
 8012218:	d514      	bpl.n	8012244 <_printf_i+0x1ac>
 801221a:	07d9      	lsls	r1, r3, #31
 801221c:	bf44      	itt	mi
 801221e:	f043 0320 	orrmi.w	r3, r3, #32
 8012222:	6023      	strmi	r3, [r4, #0]
 8012224:	b91d      	cbnz	r5, 801222e <_printf_i+0x196>
 8012226:	6823      	ldr	r3, [r4, #0]
 8012228:	f023 0320 	bic.w	r3, r3, #32
 801222c:	6023      	str	r3, [r4, #0]
 801222e:	2310      	movs	r3, #16
 8012230:	e7b0      	b.n	8012194 <_printf_i+0xfc>
 8012232:	6823      	ldr	r3, [r4, #0]
 8012234:	f043 0320 	orr.w	r3, r3, #32
 8012238:	6023      	str	r3, [r4, #0]
 801223a:	2378      	movs	r3, #120	; 0x78
 801223c:	4828      	ldr	r0, [pc, #160]	; (80122e0 <_printf_i+0x248>)
 801223e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012242:	e7e3      	b.n	801220c <_printf_i+0x174>
 8012244:	065e      	lsls	r6, r3, #25
 8012246:	bf48      	it	mi
 8012248:	b2ad      	uxthmi	r5, r5
 801224a:	e7e6      	b.n	801221a <_printf_i+0x182>
 801224c:	4616      	mov	r6, r2
 801224e:	e7bb      	b.n	80121c8 <_printf_i+0x130>
 8012250:	680b      	ldr	r3, [r1, #0]
 8012252:	6826      	ldr	r6, [r4, #0]
 8012254:	6960      	ldr	r0, [r4, #20]
 8012256:	1d1d      	adds	r5, r3, #4
 8012258:	600d      	str	r5, [r1, #0]
 801225a:	0635      	lsls	r5, r6, #24
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	d501      	bpl.n	8012264 <_printf_i+0x1cc>
 8012260:	6018      	str	r0, [r3, #0]
 8012262:	e002      	b.n	801226a <_printf_i+0x1d2>
 8012264:	0671      	lsls	r1, r6, #25
 8012266:	d5fb      	bpl.n	8012260 <_printf_i+0x1c8>
 8012268:	8018      	strh	r0, [r3, #0]
 801226a:	2300      	movs	r3, #0
 801226c:	6123      	str	r3, [r4, #16]
 801226e:	4616      	mov	r6, r2
 8012270:	e7ba      	b.n	80121e8 <_printf_i+0x150>
 8012272:	680b      	ldr	r3, [r1, #0]
 8012274:	1d1a      	adds	r2, r3, #4
 8012276:	600a      	str	r2, [r1, #0]
 8012278:	681e      	ldr	r6, [r3, #0]
 801227a:	6862      	ldr	r2, [r4, #4]
 801227c:	2100      	movs	r1, #0
 801227e:	4630      	mov	r0, r6
 8012280:	f7ed ffbe 	bl	8000200 <memchr>
 8012284:	b108      	cbz	r0, 801228a <_printf_i+0x1f2>
 8012286:	1b80      	subs	r0, r0, r6
 8012288:	6060      	str	r0, [r4, #4]
 801228a:	6863      	ldr	r3, [r4, #4]
 801228c:	6123      	str	r3, [r4, #16]
 801228e:	2300      	movs	r3, #0
 8012290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012294:	e7a8      	b.n	80121e8 <_printf_i+0x150>
 8012296:	6923      	ldr	r3, [r4, #16]
 8012298:	4632      	mov	r2, r6
 801229a:	4649      	mov	r1, r9
 801229c:	4640      	mov	r0, r8
 801229e:	47d0      	blx	sl
 80122a0:	3001      	adds	r0, #1
 80122a2:	d0ab      	beq.n	80121fc <_printf_i+0x164>
 80122a4:	6823      	ldr	r3, [r4, #0]
 80122a6:	079b      	lsls	r3, r3, #30
 80122a8:	d413      	bmi.n	80122d2 <_printf_i+0x23a>
 80122aa:	68e0      	ldr	r0, [r4, #12]
 80122ac:	9b03      	ldr	r3, [sp, #12]
 80122ae:	4298      	cmp	r0, r3
 80122b0:	bfb8      	it	lt
 80122b2:	4618      	movlt	r0, r3
 80122b4:	e7a4      	b.n	8012200 <_printf_i+0x168>
 80122b6:	2301      	movs	r3, #1
 80122b8:	4632      	mov	r2, r6
 80122ba:	4649      	mov	r1, r9
 80122bc:	4640      	mov	r0, r8
 80122be:	47d0      	blx	sl
 80122c0:	3001      	adds	r0, #1
 80122c2:	d09b      	beq.n	80121fc <_printf_i+0x164>
 80122c4:	3501      	adds	r5, #1
 80122c6:	68e3      	ldr	r3, [r4, #12]
 80122c8:	9903      	ldr	r1, [sp, #12]
 80122ca:	1a5b      	subs	r3, r3, r1
 80122cc:	42ab      	cmp	r3, r5
 80122ce:	dcf2      	bgt.n	80122b6 <_printf_i+0x21e>
 80122d0:	e7eb      	b.n	80122aa <_printf_i+0x212>
 80122d2:	2500      	movs	r5, #0
 80122d4:	f104 0619 	add.w	r6, r4, #25
 80122d8:	e7f5      	b.n	80122c6 <_printf_i+0x22e>
 80122da:	bf00      	nop
 80122dc:	08014ff9 	.word	0x08014ff9
 80122e0:	0801500a 	.word	0x0801500a

080122e4 <memmove>:
 80122e4:	4288      	cmp	r0, r1
 80122e6:	b510      	push	{r4, lr}
 80122e8:	eb01 0402 	add.w	r4, r1, r2
 80122ec:	d902      	bls.n	80122f4 <memmove+0x10>
 80122ee:	4284      	cmp	r4, r0
 80122f0:	4623      	mov	r3, r4
 80122f2:	d807      	bhi.n	8012304 <memmove+0x20>
 80122f4:	1e43      	subs	r3, r0, #1
 80122f6:	42a1      	cmp	r1, r4
 80122f8:	d008      	beq.n	801230c <memmove+0x28>
 80122fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012302:	e7f8      	b.n	80122f6 <memmove+0x12>
 8012304:	4402      	add	r2, r0
 8012306:	4601      	mov	r1, r0
 8012308:	428a      	cmp	r2, r1
 801230a:	d100      	bne.n	801230e <memmove+0x2a>
 801230c:	bd10      	pop	{r4, pc}
 801230e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012316:	e7f7      	b.n	8012308 <memmove+0x24>

08012318 <_realloc_r>:
 8012318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801231a:	4607      	mov	r7, r0
 801231c:	4614      	mov	r4, r2
 801231e:	460e      	mov	r6, r1
 8012320:	b921      	cbnz	r1, 801232c <_realloc_r+0x14>
 8012322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012326:	4611      	mov	r1, r2
 8012328:	f7ff bbdc 	b.w	8011ae4 <_malloc_r>
 801232c:	b922      	cbnz	r2, 8012338 <_realloc_r+0x20>
 801232e:	f7ff fb89 	bl	8011a44 <_free_r>
 8012332:	4625      	mov	r5, r4
 8012334:	4628      	mov	r0, r5
 8012336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012338:	f000 f814 	bl	8012364 <_malloc_usable_size_r>
 801233c:	42a0      	cmp	r0, r4
 801233e:	d20f      	bcs.n	8012360 <_realloc_r+0x48>
 8012340:	4621      	mov	r1, r4
 8012342:	4638      	mov	r0, r7
 8012344:	f7ff fbce 	bl	8011ae4 <_malloc_r>
 8012348:	4605      	mov	r5, r0
 801234a:	2800      	cmp	r0, #0
 801234c:	d0f2      	beq.n	8012334 <_realloc_r+0x1c>
 801234e:	4631      	mov	r1, r6
 8012350:	4622      	mov	r2, r4
 8012352:	f7ff fb61 	bl	8011a18 <memcpy>
 8012356:	4631      	mov	r1, r6
 8012358:	4638      	mov	r0, r7
 801235a:	f7ff fb73 	bl	8011a44 <_free_r>
 801235e:	e7e9      	b.n	8012334 <_realloc_r+0x1c>
 8012360:	4635      	mov	r5, r6
 8012362:	e7e7      	b.n	8012334 <_realloc_r+0x1c>

08012364 <_malloc_usable_size_r>:
 8012364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012368:	1f18      	subs	r0, r3, #4
 801236a:	2b00      	cmp	r3, #0
 801236c:	bfbc      	itt	lt
 801236e:	580b      	ldrlt	r3, [r1, r0]
 8012370:	18c0      	addlt	r0, r0, r3
 8012372:	4770      	bx	lr

08012374 <_init>:
 8012374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012376:	bf00      	nop
 8012378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801237a:	bc08      	pop	{r3}
 801237c:	469e      	mov	lr, r3
 801237e:	4770      	bx	lr

08012380 <_fini>:
 8012380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012382:	bf00      	nop
 8012384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012386:	bc08      	pop	{r3}
 8012388:	469e      	mov	lr, r3
 801238a:	4770      	bx	lr
