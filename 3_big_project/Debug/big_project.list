
big_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c90  0801236c  0801236c  0002236c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014ffc  08014ffc  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  08014ffc  08014ffc  00024ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015004  08015004  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015004  08015004  00025004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015008  08015008  00025008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801500c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a8  2**0
                  CONTENTS
 10 .bss          00005698  200000a8  200000a8  000300a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005740  20005740  000300a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003718e  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006867  00000000  00000000  00067266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002500  00000000  00000000  0006dad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022d0  00000000  00000000  0006ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028704  00000000  00000000  000722a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e3dd  00000000  00000000  0009a9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7e42  00000000  00000000  000c8d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b0bc3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a1f4  00000000  00000000  001b0c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012354 	.word	0x08012354

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08012354 	.word	0x08012354

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <time_i2c_write_single>:



/*function to transmit one byte of data to register_address on ds3231 (device_address: 0X68)*/
void time_i2c_write_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af04      	add	r7, sp, #16
 800059e:	4603      	mov	r3, r0
 80005a0:	603a      	str	r2, [r7, #0]
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	460b      	mov	r3, r1
 80005a6:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Write(&hi2c3, DS3231_I2C_ADDRESS<<1, DS3231_REGISTER_SECONDS_DEFAULT, 1, &seco, 1, 1000);
	//HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	HAL_I2C_Mem_Write(&hi2c3, (uint16_t)device_address<<1, register_address, 1, data_byte, 1, 1000);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	b299      	uxth	r1, r3
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b8:	9302      	str	r3, [sp, #8]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2301      	movs	r3, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <time_i2c_write_single+0x3c>)
 80005c6:	f006 fa09 	bl	80069dc <HAL_I2C_Mem_Write>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20004b24 	.word	0x20004b24

080005d8 <time_i2c_write_multi>:

/*function to transmit an array of data to device_address, starting from start_register_address*/
void time_i2c_write_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af04      	add	r7, sp, #16
 80005de:	603a      	str	r2, [r7, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c3, device_address<<1, start_register_address, 1, data_array, data_length, 1000);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	b299      	uxth	r1, r3
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	797b      	ldrb	r3, [r7, #5]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	9002      	str	r0, [sp, #8]
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2301      	movs	r3, #1
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <time_i2c_write_multi+0x44>)
 800060e:	f006 f9e5 	bl	80069dc <HAL_I2C_Mem_Write>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20004b24 	.word	0x20004b24

08000620 <time_i2c_read_single>:

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af04      	add	r7, sp, #16
 8000626:	4603      	mov	r3, r0
 8000628:	603a      	str	r2, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	460b      	mov	r3, r1
 800062e:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,register_address, 1, data_byte, 1, 1000);
	HAL_I2C_Mem_Read(&hi2c3, device_address<<1,register_address, 1, data_byte, 1, 1000);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	b29b      	uxth	r3, r3
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	b299      	uxth	r1, r3
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	b29a      	uxth	r2, r3
 800063c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	2301      	movs	r3, #1
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2301      	movs	r3, #1
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <time_i2c_read_single+0x3c>)
 800064e:	f006 fabf 	bl	8006bd0 <HAL_I2C_Mem_Read>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20004b24 	.word	0x20004b24

08000660 <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af04      	add	r7, sp, #16
 8000666:	603a      	str	r2, [r7, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	460b      	mov	r3, r1
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	4613      	mov	r3, r2
 8000674:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,start_register_address, 1, data_array, data_length, 1000);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	b29b      	uxth	r3, r3
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	b299      	uxth	r1, r3
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	b29a      	uxth	r2, r3
 8000682:	797b      	ldrb	r3, [r7, #5]
 8000684:	b29b      	uxth	r3, r3
 8000686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068a:	9002      	str	r0, [sp, #8]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <time_i2c_read_multi+0x44>)
 8000696:	f006 fa9b 	bl	8006bd0 <HAL_I2C_Mem_Read>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20004b24 	.word	0x20004b24

080006a8 <ds3231_I2C_init>:

/*function to initialize I2C peripheral in 100khz or 400khz*/
void ds3231_I2C_init()
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <ds3231_read>:
  }
}

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  switch (option)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b0e      	cmp	r3, #14
 80006c8:	f200 80ac 	bhi.w	8000824 <ds3231_read+0x16c>
 80006cc:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <ds3231_read+0x1c>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	08000711 	.word	0x08000711
 80006d8:	0800072d 	.word	0x0800072d
 80006dc:	08000749 	.word	0x08000749
 80006e0:	08000765 	.word	0x08000765
 80006e4:	08000781 	.word	0x08000781
 80006e8:	0800079d 	.word	0x0800079d
 80006ec:	080007b9 	.word	0x080007b9
 80006f0:	080007d5 	.word	0x080007d5
 80006f4:	080007e9 	.word	0x080007e9
 80006f8:	080007fd 	.word	0x080007fd
 80006fc:	08000825 	.word	0x08000825
 8000700:	08000825 	.word	0x08000825
 8000704:	08000825 	.word	0x08000825
 8000708:	08000825 	.word	0x08000825
 800070c:	0800080f 	.word	0x0800080f
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 8000710:	4a48      	ldr	r2, [pc, #288]	; (8000834 <ds3231_read+0x17c>)
 8000712:	2100      	movs	r1, #0
 8000714:	2068      	movs	r0, #104	; 0x68
 8000716:	f7ff ff83 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 800071a:	4b46      	ldr	r3, [pc, #280]	; (8000834 <ds3231_read+0x17c>)
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000722:	2101      	movs	r1, #1
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f000 f9cf 	bl	8000ac8 <BCD_to_HEX>
      break;
 800072a:	e07d      	b.n	8000828 <ds3231_read+0x170>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 800072c:	4a41      	ldr	r2, [pc, #260]	; (8000834 <ds3231_read+0x17c>)
 800072e:	2101      	movs	r1, #1
 8000730:	2068      	movs	r0, #104	; 0x68
 8000732:	f7ff ff75 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 8000736:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <ds3231_read+0x17c>)
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800073e:	2101      	movs	r1, #1
 8000740:	6838      	ldr	r0, [r7, #0]
 8000742:	f000 f9c1 	bl	8000ac8 <BCD_to_HEX>
      break;
 8000746:	e06f      	b.n	8000828 <ds3231_read+0x170>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 8000748:	4a3a      	ldr	r2, [pc, #232]	; (8000834 <ds3231_read+0x17c>)
 800074a:	2102      	movs	r1, #2
 800074c:	2068      	movs	r0, #104	; 0x68
 800074e:	f7ff ff67 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 8000752:	4b38      	ldr	r3, [pc, #224]	; (8000834 <ds3231_read+0x17c>)
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800075a:	2101      	movs	r1, #1
 800075c:	6838      	ldr	r0, [r7, #0]
 800075e:	f000 f9b3 	bl	8000ac8 <BCD_to_HEX>
      break;
 8000762:	e061      	b.n	8000828 <ds3231_read+0x170>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 8000764:	4a33      	ldr	r2, [pc, #204]	; (8000834 <ds3231_read+0x17c>)
 8000766:	2103      	movs	r1, #3
 8000768:	2068      	movs	r0, #104	; 0x68
 800076a:	f7ff ff59 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 800076e:	4b31      	ldr	r3, [pc, #196]	; (8000834 <ds3231_read+0x17c>)
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000776:	2101      	movs	r1, #1
 8000778:	6838      	ldr	r0, [r7, #0]
 800077a:	f000 f9a5 	bl	8000ac8 <BCD_to_HEX>
      break;
 800077e:	e053      	b.n	8000828 <ds3231_read+0x170>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 8000780:	4a2c      	ldr	r2, [pc, #176]	; (8000834 <ds3231_read+0x17c>)
 8000782:	2104      	movs	r1, #4
 8000784:	2068      	movs	r0, #104	; 0x68
 8000786:	f7ff ff4b 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <ds3231_read+0x17c>)
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000792:	2101      	movs	r1, #1
 8000794:	6838      	ldr	r0, [r7, #0]
 8000796:	f000 f997 	bl	8000ac8 <BCD_to_HEX>
      break;
 800079a:	e045      	b.n	8000828 <ds3231_read+0x170>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <ds3231_read+0x17c>)
 800079e:	2105      	movs	r1, #5
 80007a0:	2068      	movs	r0, #104	; 0x68
 80007a2:	f7ff ff3d 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <ds3231_read+0x17c>)
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80007ae:	2101      	movs	r1, #1
 80007b0:	6838      	ldr	r0, [r7, #0]
 80007b2:	f000 f989 	bl	8000ac8 <BCD_to_HEX>
      break;
 80007b6:	e037      	b.n	8000828 <ds3231_read+0x170>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <ds3231_read+0x17c>)
 80007ba:	2106      	movs	r1, #6
 80007bc:	2068      	movs	r0, #104	; 0x68
 80007be:	f7ff ff2f 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <ds3231_read+0x17c>)
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80007ca:	2101      	movs	r1, #1
 80007cc:	6838      	ldr	r0, [r7, #0]
 80007ce:	f000 f97b 	bl	8000ac8 <BCD_to_HEX>
      break;
 80007d2:	e029      	b.n	8000828 <ds3231_read+0x170>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <ds3231_read+0x17c>)
 80007d6:	210e      	movs	r1, #14
 80007d8:	2068      	movs	r0, #104	; 0x68
 80007da:	f7ff ff21 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <ds3231_read+0x17c>)
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	701a      	strb	r2, [r3, #0]
      break;
 80007e6:	e01f      	b.n	8000828 <ds3231_read+0x170>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 80007e8:	4a12      	ldr	r2, [pc, #72]	; (8000834 <ds3231_read+0x17c>)
 80007ea:	210f      	movs	r1, #15
 80007ec:	2068      	movs	r0, #104	; 0x68
 80007ee:	f7ff ff17 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <ds3231_read+0x17c>)
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	701a      	strb	r2, [r3, #0]
      break;
 80007fa:	e015      	b.n	8000828 <ds3231_read+0x170>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <ds3231_read+0x17c>)
 80007fe:	2110      	movs	r1, #16
 8000800:	2068      	movs	r0, #104	; 0x68
 8000802:	f7ff ff0d 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <ds3231_read+0x17c>)
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 800080e:	2307      	movs	r3, #7
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	2100      	movs	r1, #0
 8000814:	2068      	movs	r0, #104	; 0x68
 8000816:	f7ff ff23 	bl	8000660 <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 800081a:	2107      	movs	r1, #7
 800081c:	6838      	ldr	r0, [r7, #0]
 800081e:	f000 f953 	bl	8000ac8 <BCD_to_HEX>
      break;
 8000822:	e001      	b.n	8000828 <ds3231_read+0x170>
    default:
      return OPERATION_FAILED;
 8000824:	2300      	movs	r3, #0
 8000826:	e000      	b.n	800082a <ds3231_read+0x172>
  }
  return OPERATION_DONE;
 8000828:	2301      	movs	r3, #1
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000c4 	.word	0x200000c4

08000838 <ds3231_set>:

/*function to set internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_set(uint8_t option, uint8_t *data_array)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b0e      	cmp	r3, #14
 8000848:	f200 80d5 	bhi.w	80009f6 <ds3231_set+0x1be>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <ds3231_set+0x1c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000891 	.word	0x08000891
 8000858:	080008ad 	.word	0x080008ad
 800085c:	080008c9 	.word	0x080008c9
 8000860:	080008e5 	.word	0x080008e5
 8000864:	08000901 	.word	0x08000901
 8000868:	0800091d 	.word	0x0800091d
 800086c:	08000939 	.word	0x08000939
 8000870:	08000955 	.word	0x08000955
 8000874:	0800098d 	.word	0x0800098d
 8000878:	080009e3 	.word	0x080009e3
 800087c:	080009f7 	.word	0x080009f7
 8000880:	080009f7 	.word	0x080009f7
 8000884:	080009f7 	.word	0x080009f7
 8000888:	080009f7 	.word	0x080009f7
 800088c:	080009c5 	.word	0x080009c5
  {
    case SECOND:
      time_registers_clone[0] = *data_array;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	4b5b      	ldr	r3, [pc, #364]	; (8000a04 <ds3231_set+0x1cc>)
 8000896:	701a      	strb	r2, [r3, #0]
      HEX_to_BCD(&time_registers_clone[0], 1);
 8000898:	2101      	movs	r1, #1
 800089a:	485a      	ldr	r0, [pc, #360]	; (8000a04 <ds3231_set+0x1cc>)
 800089c:	f000 f953 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0]);
 80008a0:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <ds3231_set+0x1cc>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	2068      	movs	r0, #104	; 0x68
 80008a6:	f7ff fe77 	bl	8000598 <time_i2c_write_single>
      break;
 80008aa:	e0a6      	b.n	80009fa <ds3231_set+0x1c2>
    case MINUTE:
      time_registers_clone[1] = *data_array;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b54      	ldr	r3, [pc, #336]	; (8000a04 <ds3231_set+0x1cc>)
 80008b2:	705a      	strb	r2, [r3, #1]
      HEX_to_BCD(&time_registers_clone[1], 1);
 80008b4:	2101      	movs	r1, #1
 80008b6:	4854      	ldr	r0, [pc, #336]	; (8000a08 <ds3231_set+0x1d0>)
 80008b8:	f000 f945 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &time_registers_clone[1]);
 80008bc:	4a52      	ldr	r2, [pc, #328]	; (8000a08 <ds3231_set+0x1d0>)
 80008be:	2101      	movs	r1, #1
 80008c0:	2068      	movs	r0, #104	; 0x68
 80008c2:	f7ff fe69 	bl	8000598 <time_i2c_write_single>
      break;
 80008c6:	e098      	b.n	80009fa <ds3231_set+0x1c2>
    case HOUR:
      time_registers_clone[2] = *data_array;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <ds3231_set+0x1cc>)
 80008ce:	709a      	strb	r2, [r3, #2]
      HEX_to_BCD(&time_registers_clone[2], 1);
 80008d0:	2101      	movs	r1, #1
 80008d2:	484e      	ldr	r0, [pc, #312]	; (8000a0c <ds3231_set+0x1d4>)
 80008d4:	f000 f937 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &time_registers_clone[2]);
 80008d8:	4a4c      	ldr	r2, [pc, #304]	; (8000a0c <ds3231_set+0x1d4>)
 80008da:	2102      	movs	r1, #2
 80008dc:	2068      	movs	r0, #104	; 0x68
 80008de:	f7ff fe5b 	bl	8000598 <time_i2c_write_single>
      break;
 80008e2:	e08a      	b.n	80009fa <ds3231_set+0x1c2>
    case DAY_OF_WEEK:
      time_registers_clone[3] = *data_array;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <ds3231_set+0x1cc>)
 80008ea:	70da      	strb	r2, [r3, #3]
      HEX_to_BCD(&time_registers_clone[3], 1);
 80008ec:	2101      	movs	r1, #1
 80008ee:	4848      	ldr	r0, [pc, #288]	; (8000a10 <ds3231_set+0x1d8>)
 80008f0:	f000 f929 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &time_registers_clone[3]);
 80008f4:	4a46      	ldr	r2, [pc, #280]	; (8000a10 <ds3231_set+0x1d8>)
 80008f6:	2103      	movs	r1, #3
 80008f8:	2068      	movs	r0, #104	; 0x68
 80008fa:	f7ff fe4d 	bl	8000598 <time_i2c_write_single>
      break;
 80008fe:	e07c      	b.n	80009fa <ds3231_set+0x1c2>
    case DATE:
      time_registers_clone[4] = *data_array;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <ds3231_set+0x1cc>)
 8000906:	711a      	strb	r2, [r3, #4]
      HEX_to_BCD(&time_registers_clone[4], 1);
 8000908:	2101      	movs	r1, #1
 800090a:	4842      	ldr	r0, [pc, #264]	; (8000a14 <ds3231_set+0x1dc>)
 800090c:	f000 f91b 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &time_registers_clone[4]);
 8000910:	4a40      	ldr	r2, [pc, #256]	; (8000a14 <ds3231_set+0x1dc>)
 8000912:	2104      	movs	r1, #4
 8000914:	2068      	movs	r0, #104	; 0x68
 8000916:	f7ff fe3f 	bl	8000598 <time_i2c_write_single>
      break;
 800091a:	e06e      	b.n	80009fa <ds3231_set+0x1c2>
    case MONTH:
      time_registers_clone[5] = *data_array;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <ds3231_set+0x1cc>)
 8000922:	715a      	strb	r2, [r3, #5]
      HEX_to_BCD(&time_registers_clone[5], 1);
 8000924:	2101      	movs	r1, #1
 8000926:	483c      	ldr	r0, [pc, #240]	; (8000a18 <ds3231_set+0x1e0>)
 8000928:	f000 f90d 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &time_registers_clone[5]);
 800092c:	4a3a      	ldr	r2, [pc, #232]	; (8000a18 <ds3231_set+0x1e0>)
 800092e:	2105      	movs	r1, #5
 8000930:	2068      	movs	r0, #104	; 0x68
 8000932:	f7ff fe31 	bl	8000598 <time_i2c_write_single>
      break;
 8000936:	e060      	b.n	80009fa <ds3231_set+0x1c2>
    case YEAR:
      time_registers_clone[6] = *data_array;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <ds3231_set+0x1cc>)
 800093e:	719a      	strb	r2, [r3, #6]
      HEX_to_BCD(&time_registers_clone[6], 1);
 8000940:	2101      	movs	r1, #1
 8000942:	4836      	ldr	r0, [pc, #216]	; (8000a1c <ds3231_set+0x1e4>)
 8000944:	f000 f8ff 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &time_registers_clone[6]);
 8000948:	4a34      	ldr	r2, [pc, #208]	; (8000a1c <ds3231_set+0x1e4>)
 800094a:	2106      	movs	r1, #6
 800094c:	2068      	movs	r0, #104	; 0x68
 800094e:	f7ff fe23 	bl	8000598 <time_i2c_write_single>
      break;
 8000952:	e052      	b.n	80009fa <ds3231_set+0x1c2>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <ds3231_set+0x1e8>)
 8000956:	210e      	movs	r1, #14
 8000958:	2068      	movs	r0, #104	; 0x68
 800095a:	f7ff fe61 	bl	8000620 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (*data_array & (~(1 << DS3231_BIT_EOSC)));
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <ds3231_set+0x1e8>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b25b      	sxtb	r3, r3
 8000964:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000968:	b25a      	sxtb	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b25b      	sxtb	r3, r3
 8000970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000974:	b25b      	sxtb	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b25b      	sxtb	r3, r3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <ds3231_set+0x1ec>)
 800097e:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8000980:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <ds3231_set+0x1ec>)
 8000982:	210e      	movs	r1, #14
 8000984:	2068      	movs	r0, #104	; 0x68
 8000986:	f7ff fe07 	bl	8000598 <time_i2c_write_single>
      break;
 800098a:	e036      	b.n	80009fa <ds3231_set+0x1c2>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 800098c:	4a24      	ldr	r2, [pc, #144]	; (8000a20 <ds3231_set+0x1e8>)
 800098e:	210f      	movs	r1, #15
 8000990:	2068      	movs	r0, #104	; 0x68
 8000992:	f7ff fe45 	bl	8000620 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (*data_array & (~(1 << DS3231_BIT_OSF)));
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <ds3231_set+0x1e8>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b25b      	sxtb	r3, r3
 800099c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80009a0:	b25a      	sxtb	r2, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <ds3231_set+0x1ec>)
 80009b6:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 80009b8:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <ds3231_set+0x1ec>)
 80009ba:	210f      	movs	r1, #15
 80009bc:	2068      	movs	r0, #104	; 0x68
 80009be:	f7ff fdeb 	bl	8000598 <time_i2c_write_single>
      break;
 80009c2:	e01a      	b.n	80009fa <ds3231_set+0x1c2>
    case TIME:
      ds3231_data_clone(TIME, data_array);
 80009c4:	6839      	ldr	r1, [r7, #0]
 80009c6:	200e      	movs	r0, #14
 80009c8:	f000 f82e 	bl	8000a28 <ds3231_data_clone>
      HEX_to_BCD(&time_registers_clone[0], 7);
 80009cc:	2107      	movs	r1, #7
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <ds3231_set+0x1cc>)
 80009d0:	f000 f8b9 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);
 80009d4:	2307      	movs	r3, #7
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <ds3231_set+0x1cc>)
 80009d8:	2100      	movs	r1, #0
 80009da:	2068      	movs	r0, #104	; 0x68
 80009dc:	f7ff fdfc 	bl	80005d8 <time_i2c_write_multi>
      break;
 80009e0:	e00b      	b.n	80009fa <ds3231_set+0x1c2>
    case AGING_OFFSET:
      register_new_value = *data_array;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <ds3231_set+0x1ec>)
 80009e8:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <ds3231_set+0x1ec>)
 80009ec:	2110      	movs	r1, #16
 80009ee:	2068      	movs	r0, #104	; 0x68
 80009f0:	f7ff fdd2 	bl	8000598 <time_i2c_write_single>
      break;
 80009f4:	e001      	b.n	80009fa <ds3231_set+0x1c2>
    default:
      return OPERATION_FAILED;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <ds3231_set+0x1c4>
  }
  return OPERATION_DONE;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000c8 	.word	0x200000c8
 8000a08:	200000c9 	.word	0x200000c9
 8000a0c:	200000ca 	.word	0x200000ca
 8000a10:	200000cb 	.word	0x200000cb
 8000a14:	200000cc 	.word	0x200000cc
 8000a18:	200000cd 	.word	0x200000cd
 8000a1c:	200000ce 	.word	0x200000ce
 8000a20:	200000c4 	.word	0x200000c4
 8000a24:	200000c5 	.word	0x200000c5

08000a28 <ds3231_data_clone>:

/*to clone the desired data and prevent reconversion of BCD to HEX*/
static void ds3231_data_clone(uint8_t option, uint8_t *input_array)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b0e      	cmp	r3, #14
 8000a38:	d006      	beq.n	8000a48 <ds3231_data_clone+0x20>
 8000a3a:	2b0e      	cmp	r3, #14
 8000a3c:	dc37      	bgt.n	8000aae <ds3231_data_clone+0x86>
 8000a3e:	2b0a      	cmp	r3, #10
 8000a40:	d013      	beq.n	8000a6a <ds3231_data_clone+0x42>
 8000a42:	2b0b      	cmp	r3, #11
 8000a44:	d022      	beq.n	8000a8c <ds3231_data_clone+0x64>
      {
        alarm2_registers_clone[counter] = input_array[counter];
      }
      break;
    default:
      break;
 8000a46:	e032      	b.n	8000aae <ds3231_data_clone+0x86>
      for (uint8_t counter = 0; counter < 7; counter++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]
 8000a4c:	e009      	b.n	8000a62 <ds3231_data_clone+0x3a>
        time_registers_clone[counter] = input_array[counter];
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	441a      	add	r2, r3
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	7811      	ldrb	r1, [r2, #0]
 8000a58:	4a18      	ldr	r2, [pc, #96]	; (8000abc <ds3231_data_clone+0x94>)
 8000a5a:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 7; counter++)
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	2b06      	cmp	r3, #6
 8000a66:	d9f2      	bls.n	8000a4e <ds3231_data_clone+0x26>
      break;
 8000a68:	e022      	b.n	8000ab0 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 4; counter++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73bb      	strb	r3, [r7, #14]
 8000a6e:	e009      	b.n	8000a84 <ds3231_data_clone+0x5c>
        alarm1_registers_clone[counter] = input_array[counter];
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	683a      	ldr	r2, [r7, #0]
 8000a74:	441a      	add	r2, r3
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	7811      	ldrb	r1, [r2, #0]
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <ds3231_data_clone+0x98>)
 8000a7c:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 4; counter++)
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	3301      	adds	r3, #1
 8000a82:	73bb      	strb	r3, [r7, #14]
 8000a84:	7bbb      	ldrb	r3, [r7, #14]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d9f2      	bls.n	8000a70 <ds3231_data_clone+0x48>
      break;
 8000a8a:	e011      	b.n	8000ab0 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 3; counter++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	737b      	strb	r3, [r7, #13]
 8000a90:	e009      	b.n	8000aa6 <ds3231_data_clone+0x7e>
        alarm2_registers_clone[counter] = input_array[counter];
 8000a92:	7b7b      	ldrb	r3, [r7, #13]
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	441a      	add	r2, r3
 8000a98:	7b7b      	ldrb	r3, [r7, #13]
 8000a9a:	7811      	ldrb	r1, [r2, #0]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <ds3231_data_clone+0x9c>)
 8000a9e:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 3; counter++)
 8000aa0:	7b7b      	ldrb	r3, [r7, #13]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	737b      	strb	r3, [r7, #13]
 8000aa6:	7b7b      	ldrb	r3, [r7, #13]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d9f2      	bls.n	8000a92 <ds3231_data_clone+0x6a>
      break;
 8000aac:	e000      	b.n	8000ab0 <ds3231_data_clone+0x88>
      break;
 8000aae:	bf00      	nop
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	200000c8 	.word	0x200000c8
 8000ac0:	200000d0 	.word	0x200000d0
 8000ac4:	200000d4 	.word	0x200000d4

08000ac8 <BCD_to_HEX>:

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e028      	b.n	8000b30 <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	091b      	lsrs	r3, r3, #4
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	440b      	add	r3, r1
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	b2d9      	uxtb	r1, r3
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	f003 030f 	and.w	r3, r3, #15
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	4403      	add	r3, r0
 8000b1e:	440a      	add	r2, r1
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73fb      	strb	r3, [r7, #15]
 8000b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	dad2      	bge.n	8000ade <BCD_to_HEX+0x16>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HEX_to_BCD>:

/*internal function related to this file and not accessible from outside*/
static void HEX_to_BCD(uint8_t *data_array, uint8_t array_length)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b085      	sub	sp, #20
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
  uint8_t temporary_value;
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	73bb      	strb	r3, [r7, #14]
 8000b5a:	e02d      	b.n	8000bb8 <HEX_to_BCD+0x72>
  {
    temporary_value = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8000b60:	e00e      	b.n	8000b80 <HEX_to_BCD+0x3a>
    {
      temporary_value += 0X10;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	3310      	adds	r3, #16
 8000b66:	73fb      	strb	r3, [r7, #15]
      data_array[index] -= 0X0A;
 8000b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	440b      	add	r3, r1
 8000b7a:	3a0a      	subs	r2, #10
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	701a      	strb	r2, [r3, #0]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8000b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	dce8      	bgt.n	8000b62 <HEX_to_BCD+0x1c>
    }
    temporary_value += data_array[index];
 8000b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	73fb      	strb	r3, [r7, #15]
    data_array[index] = temporary_value;
 8000ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	73bb      	strb	r3, [r7, #14]
 8000bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dacd      	bge.n	8000b5c <HEX_to_BCD+0x16>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f003 fb83 	bl	80042e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f8e1 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bde:	f000 faeb 	bl	80011b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000be2:	f000 f949 	bl	8000e78 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000be6:	f000 f9a3 	bl	8000f30 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000bea:	f000 f9f7 	bl	8000fdc <MX_SPI1_Init>
  MX_RTC_Init();
 8000bee:	f000 f9cf 	bl	8000f90 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000bf2:	f000 fab7 	bl	8001164 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000bf6:	f000 f96d 	bl	8000ed4 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000bfa:	f000 fa25 	bl	8001048 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000bfe:	f000 fa7b 	bl	80010f8 <MX_TIM7_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c02:	f00d f997 	bl	800df34 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of input_Queue */
  input_QueueHandle = osMessageQueueNew (10, sizeof(char*), &input_Queue_attributes);
 8000c06:	4a42      	ldr	r2, [pc, #264]	; (8000d10 <main+0x140>)
 8000c08:	2104      	movs	r1, #4
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f00d fa89 	bl	800e122 <osMessageQueueNew>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a40      	ldr	r2, [pc, #256]	; (8000d14 <main+0x144>)
 8000c14:	6013      	str	r3, [r2, #0]

  /* creation of print_Queue */
  print_QueueHandle = osMessageQueueNew (10, sizeof(char*), &print_Queue_attributes);
 8000c16:	4a40      	ldr	r2, [pc, #256]	; (8000d18 <main+0x148>)
 8000c18:	2104      	movs	r1, #4
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f00d fa81 	bl	800e122 <osMessageQueueNew>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4a3e      	ldr	r2, [pc, #248]	; (8000d1c <main+0x14c>)
 8000c24:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c26:	4a3e      	ldr	r2, [pc, #248]	; (8000d20 <main+0x150>)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	483e      	ldr	r0, [pc, #248]	; (8000d24 <main+0x154>)
 8000c2c:	f00d f9cc 	bl	800dfc8 <osThreadNew>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4a3d      	ldr	r2, [pc, #244]	; (8000d28 <main+0x158>)
 8000c34:	6013      	str	r3, [r2, #0]

  /* creation of menu_task */
  menu_taskHandle = osThreadNew(start_menu_task, NULL, &menu_task_attributes);
 8000c36:	4a3d      	ldr	r2, [pc, #244]	; (8000d2c <main+0x15c>)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	483d      	ldr	r0, [pc, #244]	; (8000d30 <main+0x160>)
 8000c3c:	f00d f9c4 	bl	800dfc8 <osThreadNew>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a3c      	ldr	r2, [pc, #240]	; (8000d34 <main+0x164>)
 8000c44:	6013      	str	r3, [r2, #0]

  /* creation of led_task */
  led_taskHandle = osThreadNew(start_led_task, NULL, &led_task_attributes);
 8000c46:	4a3c      	ldr	r2, [pc, #240]	; (8000d38 <main+0x168>)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	483c      	ldr	r0, [pc, #240]	; (8000d3c <main+0x16c>)
 8000c4c:	f00d f9bc 	bl	800dfc8 <osThreadNew>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4a3b      	ldr	r2, [pc, #236]	; (8000d40 <main+0x170>)
 8000c54:	6013      	str	r3, [r2, #0]

  /* creation of rtc_task */
  rtc_taskHandle = osThreadNew(start_rtc_task, NULL, &rtc_task_attributes);
 8000c56:	4a3b      	ldr	r2, [pc, #236]	; (8000d44 <main+0x174>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	483b      	ldr	r0, [pc, #236]	; (8000d48 <main+0x178>)
 8000c5c:	f00d f9b4 	bl	800dfc8 <osThreadNew>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a3a      	ldr	r2, [pc, #232]	; (8000d4c <main+0x17c>)
 8000c64:	6013      	str	r3, [r2, #0]

  /* creation of print_task */
  print_taskHandle = osThreadNew(start_print, NULL, &print_task_attributes);
 8000c66:	4a3a      	ldr	r2, [pc, #232]	; (8000d50 <main+0x180>)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	483a      	ldr	r0, [pc, #232]	; (8000d54 <main+0x184>)
 8000c6c:	f00d f9ac 	bl	800dfc8 <osThreadNew>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a39      	ldr	r2, [pc, #228]	; (8000d58 <main+0x188>)
 8000c74:	6013      	str	r3, [r2, #0]

  /* creation of cmd_handl_task */
  cmd_handl_taskHandle = osThreadNew(start_cmd_handl, NULL, &cmd_handl_task_attributes);
 8000c76:	4a39      	ldr	r2, [pc, #228]	; (8000d5c <main+0x18c>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4839      	ldr	r0, [pc, #228]	; (8000d60 <main+0x190>)
 8000c7c:	f00d f9a4 	bl	800dfc8 <osThreadNew>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a38      	ldr	r2, [pc, #224]	; (8000d64 <main+0x194>)
 8000c84:	6013      	str	r3, [r2, #0]

  /* creation of OLED_RTC */
  OLED_RTCHandle = osThreadNew(StartOLED_RTC, NULL, &OLED_RTC_attributes);
 8000c86:	4a38      	ldr	r2, [pc, #224]	; (8000d68 <main+0x198>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4838      	ldr	r0, [pc, #224]	; (8000d6c <main+0x19c>)
 8000c8c:	f00d f99c 	bl	800dfc8 <osThreadNew>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a37      	ldr	r2, [pc, #220]	; (8000d70 <main+0x1a0>)
 8000c94:	6013      	str	r3, [r2, #0]

  /* creation of test_task */
  test_taskHandle = osThreadNew(start_test_task, NULL, &test_task_attributes);
 8000c96:	4a37      	ldr	r2, [pc, #220]	; (8000d74 <main+0x1a4>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4837      	ldr	r0, [pc, #220]	; (8000d78 <main+0x1a8>)
 8000c9c:	f00d f994 	bl	800dfc8 <osThreadNew>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a36      	ldr	r2, [pc, #216]	; (8000d7c <main+0x1ac>)
 8000ca4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // Create software timers (Created manually)  FOr LEDs
   handler_led_timer[0] = xTimerCreate("led_timer_1", pdMS_TO_TICKS(100), pdTRUE, (void*)1, led_effect_callback);
 8000ca6:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <main+0x1b0>)
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	2201      	movs	r2, #1
 8000cae:	2164      	movs	r1, #100	; 0x64
 8000cb0:	4834      	ldr	r0, [pc, #208]	; (8000d84 <main+0x1b4>)
 8000cb2:	f00f fbab 	bl	801040c <xTimerCreate>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a33      	ldr	r2, [pc, #204]	; (8000d88 <main+0x1b8>)
 8000cba:	6013      	str	r3, [r2, #0]
   handler_led_timer[1] = xTimerCreate("led_timer_2", pdMS_TO_TICKS(100), pdTRUE, (void*)2, led_effect_callback);
 8000cbc:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <main+0x1b0>)
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2164      	movs	r1, #100	; 0x64
 8000cc6:	4831      	ldr	r0, [pc, #196]	; (8000d8c <main+0x1bc>)
 8000cc8:	f00f fba0 	bl	801040c <xTimerCreate>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a2e      	ldr	r2, [pc, #184]	; (8000d88 <main+0x1b8>)
 8000cd0:	6053      	str	r3, [r2, #4]
   handler_led_timer[2] = xTimerCreate("led_timer_3", pdMS_TO_TICKS(100), pdTRUE, (void*)3, led_effect_callback);
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <main+0x1b0>)
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2164      	movs	r1, #100	; 0x64
 8000cdc:	482c      	ldr	r0, [pc, #176]	; (8000d90 <main+0x1c0>)
 8000cde:	f00f fb95 	bl	801040c <xTimerCreate>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a28      	ldr	r2, [pc, #160]	; (8000d88 <main+0x1b8>)
 8000ce6:	6093      	str	r3, [r2, #8]
   handler_led_timer[3] = xTimerCreate("led_timer_4", pdMS_TO_TICKS(100), pdTRUE, (void*)4, led_effect_callback);
 8000ce8:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <main+0x1b0>)
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2304      	movs	r3, #4
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2164      	movs	r1, #100	; 0x64
 8000cf2:	4828      	ldr	r0, [pc, #160]	; (8000d94 <main+0x1c4>)
 8000cf4:	f00f fb8a 	bl	801040c <xTimerCreate>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a23      	ldr	r2, [pc, #140]	; (8000d88 <main+0x1b8>)
 8000cfc:	60d3      	str	r3, [r2, #12]

   // For write data from UART
   HAL_UART_Receive_IT(&huart2, &user_data , 1);			// Turn on (start) receive one char in interrupt mode
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4925      	ldr	r1, [pc, #148]	; (8000d98 <main+0x1c8>)
 8000d02:	4826      	ldr	r0, [pc, #152]	; (8000d9c <main+0x1cc>)
 8000d04:	f009 f8e3 	bl	8009ece <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d08:	f00d f938 	bl	800df7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <main+0x13c>
 8000d0e:	bf00      	nop
 8000d10:	08012ab8 	.word	0x08012ab8
 8000d14:	20004be4 	.word	0x20004be4
 8000d18:	08012ad0 	.word	0x08012ad0
 8000d1c:	20004c60 	.word	0x20004c60
 8000d20:	08012998 	.word	0x08012998
 8000d24:	08001a43 	.word	0x08001a43
 8000d28:	20004b20 	.word	0x20004b20
 8000d2c:	080129bc 	.word	0x080129bc
 8000d30:	08001a59 	.word	0x08001a59
 8000d34:	20004d04 	.word	0x20004d04
 8000d38:	080129e0 	.word	0x080129e0
 8000d3c:	08001b75 	.word	0x08001b75
 8000d40:	20004bd0 	.word	0x20004bd0
 8000d44:	08012a04 	.word	0x08012a04
 8000d48:	08001cc9 	.word	0x08001cc9
 8000d4c:	20004c64 	.word	0x20004c64
 8000d50:	08012a28 	.word	0x08012a28
 8000d54:	08002089 	.word	0x08002089
 8000d58:	20004bec 	.word	0x20004bec
 8000d5c:	08012a4c 	.word	0x08012a4c
 8000d60:	080020e1 	.word	0x080020e1
 8000d64:	20004bf0 	.word	0x20004bf0
 8000d68:	08012a70 	.word	0x08012a70
 8000d6c:	0800210d 	.word	0x0800210d
 8000d70:	20004be8 	.word	0x20004be8
 8000d74:	08012a94 	.word	0x08012a94
 8000d78:	080031d5 	.word	0x080031d5
 8000d7c:	20004b78 	.word	0x20004b78
 8000d80:	080016e9 	.word	0x080016e9
 8000d84:	08012404 	.word	0x08012404
 8000d88:	20004bd4 	.word	0x20004bd4
 8000d8c:	08012410 	.word	0x08012410
 8000d90:	0801241c 	.word	0x0801241c
 8000d94:	08012428 	.word	0x08012428
 8000d98:	20004c5c 	.word	0x20004c5c
 8000d9c:	20004cc0 	.word	0x20004cc0

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	; 0x50
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	2230      	movs	r2, #48	; 0x30
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f010 fe30 	bl	8011a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <SystemClock_Config+0xd0>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	4a28      	ldr	r2, [pc, #160]	; (8000e70 <SystemClock_Config+0xd0>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <SystemClock_Config+0xd0>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <SystemClock_Config+0xd4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <SystemClock_Config+0xd4>)
 8000dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <SystemClock_Config+0xd4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000dfc:	2309      	movs	r3, #9
 8000dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e06:	2301      	movs	r3, #1
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e14:	2308      	movs	r3, #8
 8000e16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e22:	2307      	movs	r3, #7
 8000e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 0320 	add.w	r3, r7, #32
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f007 f974 	bl	8008118 <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e36:	f002 fa91 	bl	800335c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	2105      	movs	r1, #5
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f007 fbd5 	bl	8008608 <HAL_RCC_ClockConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000e64:	f002 fa7a 	bl	800335c <Error_Handler>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3750      	adds	r7, #80	; 0x50
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40007000 	.word	0x40007000

08000e78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e7e:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <MX_I2C1_Init+0x54>)
 8000e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <MX_I2C1_Init+0x58>)
 8000e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eb6:	f005 fb4f 	bl	8006558 <HAL_I2C_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ec0:	f002 fa4c 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20004b7c 	.word	0x20004b7c
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	000186a0 	.word	0x000186a0

08000ed4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <MX_I2C3_Init+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <MX_I2C3_Init+0x58>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000f12:	f005 fb21 	bl	8006558 <HAL_I2C_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f002 fa1e 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20004b24 	.word	0x20004b24
 8000f28:	40005c00 	.word	0x40005c00
 8000f2c:	00061a80 	.word	0x00061a80

08000f30 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <MX_I2S3_Init+0x58>)
 8000f38:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f40:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f54:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f58:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <MX_I2S3_Init+0x5c>)
 8000f5a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f70:	f006 fc32 	bl	80077d8 <HAL_I2S_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f7a:	f002 f9ef 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20004d50 	.word	0x20004d50
 8000f88:	40003c00 	.word	0x40003c00
 8000f8c:	00017700 	.word	0x00017700

08000f90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <MX_RTC_Init+0x48>)
 8000f98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000f9c:	2240      	movs	r2, #64	; 0x40
 8000f9e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000fa2:	227f      	movs	r2, #127	; 0x7f
 8000fa4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000fa8:	22ff      	movs	r2, #255	; 0xff
 8000faa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000fc0:	f007 fe90 	bl	8008ce4 <HAL_RTC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000fca:	f002 f9c7 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20004bf4 	.word	0x20004bf4
 8000fd8:	40002800 	.word	0x40002800

08000fdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_SPI1_Init+0x64>)
 8000fe2:	4a18      	ldr	r2, [pc, #96]	; (8001044 <MX_SPI1_Init+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_SPI1_Init+0x64>)
 8000fe8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_SPI1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_SPI1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_SPI1_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_SPI1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_SPI1_Init+0x64>)
 8001008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_SPI1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <MX_SPI1_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_SPI1_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <MX_SPI1_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_SPI1_Init+0x64>)
 8001028:	220a      	movs	r2, #10
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_SPI1_Init+0x64>)
 800102e:	f008 f93c 	bl	80092aa <HAL_SPI_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001038:	f002 f990 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20004c68 	.word	0x20004c68
 8001044:	40013000 	.word	0x40013000

08001048 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2224      	movs	r2, #36	; 0x24
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f010 fcdc 	bl	8011a14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <MX_TIM1_Init+0xa8>)
 8001066:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <MX_TIM1_Init+0xac>)
 8001068:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_TIM1_Init+0xa8>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MX_TIM1_Init+0xa8>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <MX_TIM1_Init+0xa8>)
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_TIM1_Init+0xa8>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_TIM1_Init+0xa8>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_TIM1_Init+0xa8>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001090:	2301      	movs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001098:	2301      	movs	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010a8:	2301      	movs	r3, #1
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_TIM1_Init+0xa8>)
 80010bc:	f008 fa6d 	bl	800959a <HAL_TIM_Encoder_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80010c6:	f002 f949 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <MX_TIM1_Init+0xa8>)
 80010d8:	f008 fd8a 	bl	8009bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80010e2:	f002 f93b 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3730      	adds	r7, #48	; 0x30
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20004c14 	.word	0x20004c14
 80010f4:	40010000 	.word	0x40010000

080010f8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_TIM7_Init+0x64>)
 8001108:	4a15      	ldr	r2, [pc, #84]	; (8001160 <MX_TIM7_Init+0x68>)
 800110a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_TIM7_Init+0x64>)
 800110e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001112:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_TIM7_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_TIM7_Init+0x64>)
 800111c:	2263      	movs	r2, #99	; 0x63
 800111e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_TIM7_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_TIM7_Init+0x64>)
 8001128:	f008 f948 	bl	80093bc <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001132:	f002 f913 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_TIM7_Init+0x64>)
 8001144:	f008 fd54 	bl	8009bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800114e:	f002 f905 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20004d08 	.word	0x20004d08
 8001160:	40001400 	.word	0x40001400

08001164 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_USART2_UART_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001170:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800119c:	f008 fdb8 	bl	8009d10 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a6:	f002 f8d9 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20004cc0 	.word	0x20004cc0
 80011b4:	40004400 	.word	0x40004400

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <MX_GPIO_Init+0x210>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a7c      	ldr	r2, [pc, #496]	; (80013c8 <MX_GPIO_Init+0x210>)
 80011d8:	f043 0310 	orr.w	r3, r3, #16
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b7a      	ldr	r3, [pc, #488]	; (80013c8 <MX_GPIO_Init+0x210>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	4b76      	ldr	r3, [pc, #472]	; (80013c8 <MX_GPIO_Init+0x210>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a75      	ldr	r2, [pc, #468]	; (80013c8 <MX_GPIO_Init+0x210>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b73      	ldr	r3, [pc, #460]	; (80013c8 <MX_GPIO_Init+0x210>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <MX_GPIO_Init+0x210>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a6e      	ldr	r2, [pc, #440]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b6c      	ldr	r3, [pc, #432]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a67      	ldr	r2, [pc, #412]	; (80013c8 <MX_GPIO_Init+0x210>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b65      	ldr	r3, [pc, #404]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a60      	ldr	r2, [pc, #384]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b5a      	ldr	r3, [pc, #360]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a59      	ldr	r2, [pc, #356]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b57      	ldr	r3, [pc, #348]	; (80013c8 <MX_GPIO_Init+0x210>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2108      	movs	r1, #8
 800127a:	4854      	ldr	r0, [pc, #336]	; (80013cc <MX_GPIO_Init+0x214>)
 800127c:	f003 fbbe 	bl	80049fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2101      	movs	r1, #1
 8001284:	4852      	ldr	r0, [pc, #328]	; (80013d0 <MX_GPIO_Init+0x218>)
 8001286:	f003 fbb9 	bl	80049fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800128a:	2200      	movs	r2, #0
 800128c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001290:	4850      	ldr	r0, [pc, #320]	; (80013d4 <MX_GPIO_Init+0x21c>)
 8001292:	f003 fbb3 	bl	80049fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001296:	2308      	movs	r3, #8
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4847      	ldr	r0, [pc, #284]	; (80013cc <MX_GPIO_Init+0x214>)
 80012ae:	f003 f9f1 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4841      	ldr	r0, [pc, #260]	; (80013d0 <MX_GPIO_Init+0x218>)
 80012ca:	f003 f9e3 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012ce:	2308      	movs	r3, #8
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012de:	2305      	movs	r3, #5
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4839      	ldr	r0, [pc, #228]	; (80013d0 <MX_GPIO_Init+0x218>)
 80012ea:	f003 f9d3 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	4835      	ldr	r0, [pc, #212]	; (80013d8 <MX_GPIO_Init+0x220>)
 8001304:	f003 f9c6 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001308:	2304      	movs	r3, #4
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4830      	ldr	r0, [pc, #192]	; (80013dc <MX_GPIO_Init+0x224>)
 800131c:	f003 f9ba 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8001320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001326:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4825      	ldr	r0, [pc, #148]	; (80013cc <MX_GPIO_Init+0x214>)
 8001338:	f003 f9ac 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800133c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800134e:	2305      	movs	r3, #5
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4820      	ldr	r0, [pc, #128]	; (80013dc <MX_GPIO_Init+0x224>)
 800135a:	f003 f99b 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800135e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001362:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4817      	ldr	r0, [pc, #92]	; (80013d4 <MX_GPIO_Init+0x21c>)
 8001378:	f003 f98c 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800137c:	2320      	movs	r3, #32
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <MX_GPIO_Init+0x21c>)
 8001390:	f003 f980 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001394:	2302      	movs	r3, #2
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001398:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_GPIO_Init+0x214>)
 80013aa:	f003 f973 	bl	8004694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2105      	movs	r1, #5
 80013b2:	2028      	movs	r0, #40	; 0x28
 80013b4:	f003 f8b2 	bl	800451c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b8:	2028      	movs	r0, #40	; 0x28
 80013ba:	f003 f8cb 	bl	8004554 <HAL_NVIC_EnableIRQ>

}
 80013be:	bf00      	nop
 80013c0:	3730      	adds	r7, #48	; 0x30
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/////////////////////////////////////////////////////////////////////////////
// Receive one char from UART. This function called by UART interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	6078      	str	r0, [r7, #4]
	uint8_t dummy = 0;													// Buffer for extract '\n' sign
 80013e8:	2300      	movs	r3, #0
 80013ea:	72fb      	strb	r3, [r7, #11]
	int peek_buff = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]

	if(!xQueueIsQueueFullFromISR(input_QueueHandle))
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_UART_RxCpltCallback+0x88>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00d fe13 	bl	800f020 <xQueueIsQueueFullFromISR>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d107      	bne.n	8001410 <HAL_UART_RxCpltCallback+0x30>
	{
		xQueueSendFromISR(input_QueueHandle, (void*)&user_data, NULL);		// Enqueue data byte
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_UART_RxCpltCallback+0x88>)
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	2200      	movs	r2, #0
 8001408:	4918      	ldr	r1, [pc, #96]	; (800146c <HAL_UART_RxCpltCallback+0x8c>)
 800140a:	f00d fadf 	bl	800e9cc <xQueueGenericSendFromISR>
 800140e:	e013      	b.n	8001438 <HAL_UART_RxCpltCallback+0x58>
	}
	else 																	// Queue is full
	{
		if(user_data == '\r')												// Check, is user_data has '\n' sign?
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_UART_RxCpltCallback+0x8c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b0d      	cmp	r3, #13
 8001418:	d10e      	bne.n	8001438 <HAL_UART_RxCpltCallback+0x58>
		{
			xQueueReceiveFromISR(input_QueueHandle, (void*)&dummy, NULL );	// Delete '\n' sign from queue
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_UART_RxCpltCallback+0x88>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f107 010b 	add.w	r1, r7, #11
 8001422:	2200      	movs	r2, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f00d fc4d 	bl	800ecc4 <xQueueReceiveFromISR>
			xQueueSendFromISR(input_QueueHandle, (void*)&user_data, NULL);  // Save user_data on the place of '\n'
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_UART_RxCpltCallback+0x88>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	2200      	movs	r2, #0
 8001432:	490e      	ldr	r1, [pc, #56]	; (800146c <HAL_UART_RxCpltCallback+0x8c>)
 8001434:	f00d faca 	bl	800e9cc <xQueueGenericSendFromISR>
		}
	}
	// Send notification to command task if user_data == '\n'
	if(user_data == '\r')
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_UART_RxCpltCallback+0x8c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b0d      	cmp	r3, #13
 8001440:	d108      	bne.n	8001454 <HAL_UART_RxCpltCallback+0x74>
	{
		xTaskNotifyFromISR(cmd_handl_taskHandle, 0, eNoAction, NULL);		// Send notify to start_com_handl task
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_UART_RxCpltCallback+0x90>)
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2300      	movs	r3, #0
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	f00e fe5c 	bl	801010c <xTaskGenericNotifyFromISR>
		//xTaskNotify(test_taskHandle, 0, eNoAction);

	}

	//HAL_UART_Receive_IT(&huart2, &user_data , 1);							// Enable receive data over UART again
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data , 1);
 8001454:	2201      	movs	r2, #1
 8001456:	4905      	ldr	r1, [pc, #20]	; (800146c <HAL_UART_RxCpltCallback+0x8c>)
 8001458:	4806      	ldr	r0, [pc, #24]	; (8001474 <HAL_UART_RxCpltCallback+0x94>)
 800145a:	f008 fd38 	bl	8009ece <HAL_UART_Receive_IT>

	//HAL_GPIO_TogglePin(GPIOD, LED4);	// LED Blink for test  BLUE LED
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20004be4 	.word	0x20004be4
 800146c:	20004c5c 	.word	0x20004c5c
 8001470:	20004bf0 	.word	0x20004bf0
 8001474:	20004cc0 	.word	0x20004cc0

08001478 <led_effect_stop>:
/////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//			LEDs
void led_effect_stop(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af02      	add	r7, sp, #8
	for(int  i = 0; i < 4; i++)									// Stop all timer
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	e00e      	b.n	80014a2 <led_effect_stop+0x2a>
	{
		xTimerStop(handler_led_timer[i], portMAX_DELAY);
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <led_effect_stop+0x3c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800148c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	2200      	movs	r2, #0
 8001496:	2103      	movs	r1, #3
 8001498:	f00f f814 	bl	80104c4 <xTimerGenericCommand>
	for(int  i = 0; i < 4; i++)									// Stop all timer
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3301      	adds	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	dded      	ble.n	8001484 <led_effect_stop+0xc>
	}
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20004bd4 	.word	0x20004bd4

080014b8 <led_effect>:
/////////////////////////////////////////////////////////////////////////////
void led_effect (uint8_t effect)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af02      	add	r7, sp, #8
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	led_effect_stop();											// Stop current led effect
 80014c2:	f7ff ffd9 	bl	8001478 <led_effect_stop>
	xTimerStart(handler_led_timer[effect-1], portMAX_DELAY);	// Start needed led timer
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <led_effect+0x38>)
 80014cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80014d0:	f00e f932 	bl	800f738 <xTaskGetTickCount>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2300      	movs	r3, #0
 80014de:	2101      	movs	r1, #1
 80014e0:	4620      	mov	r0, r4
 80014e2:	f00e ffef 	bl	80104c4 <xTimerGenericCommand>
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20004bd4 	.word	0x20004bd4

080014f4 <turn_off_all_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_off_all_leds(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fe:	480b      	ldr	r0, [pc, #44]	; (800152c <turn_off_all_leds+0x38>)
 8001500:	f003 fa7c 	bl	80049fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <turn_off_all_leds+0x38>)
 800150c:	f003 fa76 	bl	80049fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <turn_off_all_leds+0x38>)
 8001518:	f003 fa70 	bl	80049fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001522:	4802      	ldr	r0, [pc, #8]	; (800152c <turn_off_all_leds+0x38>)
 8001524:	f003 fa6a 	bl	80049fc <HAL_GPIO_WritePin>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40020c00 	.word	0x40020c00

08001530 <turn_on_all_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_on_all_leds(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <turn_on_all_leds+0x38>)
 800153c:	f003 fa5e 	bl	80049fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001546:	4808      	ldr	r0, [pc, #32]	; (8001568 <turn_on_all_leds+0x38>)
 8001548:	f003 fa58 	bl	80049fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <turn_on_all_leds+0x38>)
 8001554:	f003 fa52 	bl	80049fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155e:	4802      	ldr	r0, [pc, #8]	; (8001568 <turn_on_all_leds+0x38>)
 8001560:	f003 fa4c 	bl	80049fc <HAL_GPIO_WritePin>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40020c00 	.word	0x40020c00

0800156c <turn_on_even_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_on_even_leds(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001576:	480b      	ldr	r0, [pc, #44]	; (80015a4 <turn_on_even_leds+0x38>)
 8001578:	f003 fa40 	bl	80049fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <turn_on_even_leds+0x38>)
 8001584:	f003 fa3a 	bl	80049fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <turn_on_even_leds+0x38>)
 8001590:	f003 fa34 	bl	80049fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800159a:	4802      	ldr	r0, [pc, #8]	; (80015a4 <turn_on_even_leds+0x38>)
 800159c:	f003 fa2e 	bl	80049fc <HAL_GPIO_WritePin>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40020c00 	.word	0x40020c00

080015a8 <turn_on_odd_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_on_odd_leds(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b2:	480b      	ldr	r0, [pc, #44]	; (80015e0 <turn_on_odd_leds+0x38>)
 80015b4:	f003 fa22 	bl	80049fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015be:	4808      	ldr	r0, [pc, #32]	; (80015e0 <turn_on_odd_leds+0x38>)
 80015c0:	f003 fa1c 	bl	80049fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <turn_on_odd_leds+0x38>)
 80015cc:	f003 fa16 	bl	80049fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d6:	4802      	ldr	r0, [pc, #8]	; (80015e0 <turn_on_odd_leds+0x38>)
 80015d8:	f003 fa10 	bl	80049fc <HAL_GPIO_WritePin>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40020c00 	.word	0x40020c00

080015e4 <LED_control>:
/////////////////////////////////////////////////////////////////////////////
void LED_control(int value)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e014      	b.n	800161c <LED_control+0x38>
	{
		HAL_GPIO_WritePin(GPIOD, (LED1 << i), ((value >> i)& 0x1));
 80015f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	b299      	uxth	r1, r3
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	fa42 f303 	asr.w	r3, r2, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	4806      	ldr	r0, [pc, #24]	; (800162c <LED_control+0x48>)
 8001612:	f003 f9f3 	bl	80049fc <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3301      	adds	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b03      	cmp	r3, #3
 8001620:	dde7      	ble.n	80015f2 <LED_control+0xe>
	}
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40020c00 	.word	0x40020c00

08001630 <LED_effect1>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect1(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();			// Toggle LEDs
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <LED_effect1+0x28>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f083 0301 	eor.w	r3, r3, #1
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <LED_effect1+0x28>)
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <LED_effect1+0x28>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <LED_effect1+0x1e>
 8001648:	f7ff ff54 	bl	80014f4 <turn_off_all_leds>
}
 800164c:	e001      	b.n	8001652 <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();			// Toggle LEDs
 800164e:	f7ff ff6f 	bl	8001530 <turn_on_all_leds>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000004 	.word	0x20000004

0800165c <LED_effect2>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect2(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <LED_effect2+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f083 0301 	eor.w	r3, r3, #1
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <LED_effect2+0x28>)
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <LED_effect2+0x28>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <LED_effect2+0x1e>
 8001674:	f7ff ff7a 	bl	800156c <turn_on_even_leds>
}
 8001678:	e001      	b.n	800167e <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800167a:	f7ff ff95 	bl	80015a8 <turn_on_odd_leds>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000008 	.word	0x20000008

08001688 <LED_effect3>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect3(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control (0x1 << (i++ % 4));  //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<, ?????????????????????????????????????????????
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <LED_effect3+0x2c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <LED_effect3+0x2c>)
 8001694:	600a      	str	r2, [r1, #0]
 8001696:	425a      	negs	r2, r3
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	f002 0203 	and.w	r2, r2, #3
 80016a0:	bf58      	it	pl
 80016a2:	4253      	negpl	r3, r2
 80016a4:	2201      	movs	r2, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff9a 	bl	80015e4 <LED_control>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200000e0 	.word	0x200000e0

080016b8 <LED_effect4>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect4(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control(0x08 >> (i++ % 4));  //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<, ?????????????????????????????????????????????
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <LED_effect4+0x2c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <LED_effect4+0x2c>)
 80016c4:	600a      	str	r2, [r1, #0]
 80016c6:	425a      	negs	r2, r3
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	bf58      	it	pl
 80016d2:	4253      	negpl	r3, r2
 80016d4:	2208      	movs	r2, #8
 80016d6:	fa42 f303 	asr.w	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff82 	bl	80015e4 <LED_control>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200000e4 	.word	0x200000e4

080016e8 <led_effect_callback>:
/////////////////////////////////////////////////////////////////////////////
void led_effect_callback(TimerHandle_t xTimer)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID( xTimer );
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f00f f9ed 	bl	8010ad0 <pvTimerGetTimerID>
 80016f6:	4603      	mov	r3, r0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d816      	bhi.n	8001730 <led_effect_callback+0x48>
 8001702:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <led_effect_callback+0x20>)
 8001704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001708:	08001719 	.word	0x08001719
 800170c:	0800171f 	.word	0x0800171f
 8001710:	08001725 	.word	0x08001725
 8001714:	0800172b 	.word	0x0800172b

	switch(id)
	{
		case 1:
			LED_effect1();
 8001718:	f7ff ff8a 	bl	8001630 <LED_effect1>
			break;
 800171c:	e008      	b.n	8001730 <led_effect_callback+0x48>
		case 2:
			LED_effect2();
 800171e:	f7ff ff9d 	bl	800165c <LED_effect2>
			break;
 8001722:	e005      	b.n	8001730 <led_effect_callback+0x48>
		case 3:
			LED_effect3();
 8001724:	f7ff ffb0 	bl	8001688 <LED_effect3>
			break;
 8001728:	e002      	b.n	8001730 <led_effect_callback+0x48>
		case 4:
			LED_effect4();
 800172a:	f7ff ffc5 	bl	80016b8 <LED_effect4>
	}
}
 800172e:	e7ff      	b.n	8001730 <led_effect_callback+0x48>
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <process_command>:
/////////////////////////////////////////////////////////////////////////////
// Function depends on selected menu chose(notify) needed task
void process_command(command_t *cmd)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f849 	bl	80017d8 <extract_command>

	switch(curr_state)
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <process_command+0x8c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b09      	cmp	r3, #9
 800174c:	d836      	bhi.n	80017bc <process_command+0x84>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <process_command+0x1c>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	0800177d 	.word	0x0800177d
 8001758:	0800178d 	.word	0x0800178d
 800175c:	0800179d 	.word	0x0800179d
 8001760:	0800179d 	.word	0x0800179d
 8001764:	0800179d 	.word	0x0800179d
 8001768:	0800179d 	.word	0x0800179d
 800176c:	080017ad 	.word	0x080017ad
 8001770:	080017ad 	.word	0x080017ad
 8001774:	080017ad 	.word	0x080017ad
 8001778:	080017ad 	.word	0x080017ad
	{
		case sMainMenu:
			xTaskNotify(menu_taskHandle,(uint32_t*) cmd, eSetValueWithOverwrite);
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <process_command+0x90>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	2300      	movs	r3, #0
 8001784:	2203      	movs	r2, #3
 8001786:	f00e fc03 	bl	800ff90 <xTaskGenericNotify>
			break;
 800178a:	e017      	b.n	80017bc <process_command+0x84>

		case sLedEffect:
	 		xTaskNotify(led_taskHandle, (uint32_t*) cmd, eSetValueWithOverwrite);
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <process_command+0x94>)
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	2300      	movs	r3, #0
 8001794:	2203      	movs	r2, #3
 8001796:	f00e fbfb 	bl	800ff90 <xTaskGenericNotify>
	 		break;
 800179a:	e00f      	b.n	80017bc <process_command+0x84>

	 	case sRtcMenu:
	 	case sRtcTimeConfig:
	 	case sRtcDateConfig:
	 	case sRtcReport:
	 		xTaskNotify(rtc_taskHandle, (uint32_t*) cmd, eSetValueWithOverwrite);
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <process_command+0x98>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	2300      	movs	r3, #0
 80017a4:	2203      	movs	r2, #3
 80017a6:	f00e fbf3 	bl	800ff90 <xTaskGenericNotify>
	 		break;
 80017aa:	e007      	b.n	80017bc <process_command+0x84>

	 	case sTestMenu:
	 	case sTestPodMenu_1:
	 	case sTestPodMenu_2:
	 	case sTestPodMenu_3:
			xTaskNotify(test_taskHandle, (uint32_t*) cmd, eSetValueWithOverwrite);
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <process_command+0x9c>)
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	2300      	movs	r3, #0
 80017b4:	2203      	movs	r2, #3
 80017b6:	f00e fbeb 	bl	800ff90 <xTaskGenericNotify>
	 }
}
 80017ba:	e7ff      	b.n	80017bc <process_command+0x84>
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200000d7 	.word	0x200000d7
 80017c8:	20004d04 	.word	0x20004d04
 80017cc:	20004bd0 	.word	0x20004bd0
 80017d0:	20004c64 	.word	0x20004c64
 80017d4:	20004b78 	.word	0x20004b78

080017d8 <extract_command>:
/////////////////////////////////////////////////////////////////////////////
// Extract every char byte from input_QueueHandle into cmd struct
int extract_command(command_t *cmd)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(input_QueueHandle);			// Waiting data on the queue
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <extract_command+0x70>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00d faed 	bl	800edc4 <uxQueueMessagesWaiting>
 80017ea:	4603      	mov	r3, r0
 80017ec:	613b      	str	r3, [r7, #16]
	if(!status)													// If no any messages on the queue (exit from where)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <extract_command+0x22>
	{
		return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017f8:	e022      	b.n	8001840 <extract_command+0x68>
	}

	uint8_t i = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75fb      	strb	r3, [r7, #23]
	do{
		status = xQueueReceive(input_QueueHandle, &item, 0);
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <extract_command+0x70>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f107 010f 	add.w	r1, r7, #15
 8001806:	2200      	movs	r2, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f00d f97b 	bl	800eb04 <xQueueReceive>
 800180e:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d106      	bne.n	8001824 <extract_command+0x4c>
		{
			cmd -> payload[i++] = item;
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	75fa      	strb	r2, [r7, #23]
 800181c:	461a      	mov	r2, r3
 800181e:	7bf9      	ldrb	r1, [r7, #15]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	5499      	strb	r1, [r3, r2]
		}
	}while(item != '\r');    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b0d      	cmp	r3, #13
 8001828:	d1e9      	bne.n	80017fe <extract_command+0x26>

	cmd -> payload[i - 1] = '\0';		// add '\0' sign to the end
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	3b01      	subs	r3, #1
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	2100      	movs	r1, #0
 8001832:	54d1      	strb	r1, [r2, r3]
	cmd -> len = i - 1;					// Save length in struct
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	3b01      	subs	r3, #1
 8001838:	b2da      	uxtb	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	729a      	strb	r2, [r3, #10]

	return 0;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20004be4 	.word	0x20004be4

0800184c <show_time_date>:
/////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//			RTC
void show_time_date(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_time,0, sizeof(rtc_time));
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2214      	movs	r2, #20
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f010 f8db 	bl	8011a14 <memset>
	memset(&rtc_date, 0, sizeof(rtc_date));
 800185e:	f107 0318 	add.w	r3, r7, #24
 8001862:	2204      	movs	r2, #4
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f010 f8d4 	bl	8011a14 <memset>

	// Get time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	4619      	mov	r1, r3
 8001872:	4821      	ldr	r0, [pc, #132]	; (80018f8 <show_time_date+0xac>)
 8001874:	f007 fb84 	bl	8008f80 <HAL_RTC_GetTime>
	// Get date
	HAL_RTC_GetTime(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001878:	f107 0318 	add.w	r3, r7, #24
 800187c:	2200      	movs	r2, #0
 800187e:	4619      	mov	r1, r3
 8001880:	481d      	ldr	r0, [pc, #116]	; (80018f8 <show_time_date+0xac>)
 8001882:	f007 fb7d 	bl	8008f80 <HAL_RTC_GetTime>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <show_time_date+0x44>
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <show_time_date+0xb0>)
 800188e:	e000      	b.n	8001892 <show_time_date+0x46>
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <show_time_date+0xb4>)
 8001892:	61fb      	str	r3, [r7, #28]

	// Display time and data
	sprintf((char*)showtime, "%s: \t%02d:%02d:%02d [%s]", "\n Current Time&date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8001894:	793b      	ldrb	r3, [r7, #4]
 8001896:	4618      	mov	r0, r3
 8001898:	797b      	ldrb	r3, [r7, #5]
 800189a:	461a      	mov	r2, r3
 800189c:	79bb      	ldrb	r3, [r7, #6]
 800189e:	4619      	mov	r1, r3
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	9101      	str	r1, [sp, #4]
 80018a6:	9200      	str	r2, [sp, #0]
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a16      	ldr	r2, [pc, #88]	; (8001904 <show_time_date+0xb8>)
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <show_time_date+0xbc>)
 80018ae:	4817      	ldr	r0, [pc, #92]	; (800190c <show_time_date+0xc0>)
 80018b0:	f010 f9dc 	bl	8011c6c <siprintf>
	xQueueSend(print_QueueHandle, &time, portMAX_DELAY);		// Send to UART
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <show_time_date+0xc4>)
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018be:	4915      	ldr	r1, [pc, #84]	; (8001914 <show_time_date+0xc8>)
 80018c0:	f00c ff86 	bl	800e7d0 <xQueueGenericSend>

	sprintf((char*)showdate, "\t%02d-%02d-%02d\n\r", rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80018c4:	7e7b      	ldrb	r3, [r7, #25]
 80018c6:	461a      	mov	r2, r3
 80018c8:	7ebb      	ldrb	r3, [r7, #26]
 80018ca:	4619      	mov	r1, r3
 80018cc:	7efb      	ldrb	r3, [r7, #27]
 80018ce:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	460b      	mov	r3, r1
 80018d6:	4910      	ldr	r1, [pc, #64]	; (8001918 <show_time_date+0xcc>)
 80018d8:	4810      	ldr	r0, [pc, #64]	; (800191c <show_time_date+0xd0>)
 80018da:	f010 f9c7 	bl	8011c6c <siprintf>
	xQueueSend(print_QueueHandle, &date, portMAX_DELAY);
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <show_time_date+0xc4>)
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	2300      	movs	r3, #0
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e8:	490d      	ldr	r1, [pc, #52]	; (8001920 <show_time_date+0xd4>)
 80018ea:	f00c ff71 	bl	800e7d0 <xQueueGenericSend>
}
 80018ee:	bf00      	nop
 80018f0:	3720      	adds	r7, #32
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20004bf4 	.word	0x20004bf4
 80018fc:	08012434 	.word	0x08012434
 8001900:	08012438 	.word	0x08012438
 8001904:	0801243c 	.word	0x0801243c
 8001908:	08012450 	.word	0x08012450
 800190c:	200000e8 	.word	0x200000e8
 8001910:	20004c60 	.word	0x20004c60
 8001914:	2000000c 	.word	0x2000000c
 8001918:	0801246c 	.word	0x0801246c
 800191c:	20000110 	.word	0x20000110
 8001920:	20000010 	.word	0x20000010

08001924 <rtc_configure_time>:
/////////////////////////////////////////////////////////////////////////////
void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	time -> TimeFormat = RTC_HOURFORMAT12_AM;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	70da      	strb	r2, [r3, #3]
//	time -> DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
//	time -> StoreOperation = RTC_STOREOPERATION_RESET;

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8001932:	2200      	movs	r2, #0
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <rtc_configure_time+0x20>)
 8001938:	f007 fa65 	bl	8008e06 <HAL_RTC_SetTime>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20004bf4 	.word	0x20004bf4

08001948 <rtc_configure_date>:
/////////////////////////////////////////////////////////////////////////////
void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <rtc_configure_date+0x1c>)
 8001956:	f007 fb71 	bl	800903c <HAL_RTC_SetDate>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20004bf4 	.word	0x20004bf4

08001968 <getnumber>:
/////////////////////////////////////////////////////////////////////////////
// Convert two char into two digits
uint8_t getnumber(uint8_t *p, int len)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
	int value;
	if(len > 1)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	dd0f      	ble.n	8001998 <getnumber+0x30>
	{
		value = (((p[0] - 48)*10) + (p[1] - 48));		// Convert two chars into digits
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	461a      	mov	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3301      	adds	r3, #1
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	3b30      	subs	r3, #48	; 0x30
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e003      	b.n	80019a0 <getnumber+0x38>
	}
	else
	{
		value = p[0] - 48;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	3b30      	subs	r3, #48	; 0x30
 800199e:	60fb      	str	r3, [r7, #12]
	}

	return value;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	b2db      	uxtb	r3, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <validate_rtc_information>:
/////////////////////////////////////////////////////////////////////////////
int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
	// Validate hours, minutes and seconds
	if(((time -> Hours ) > 12) || ((time -> Hours < 0)))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d902      	bls.n	80019c8 <validate_rtc_information+0x18>
	{
		return -1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c6:	e036      	b.n	8001a36 <validate_rtc_information+0x86>
	}
	else if(((time -> Minutes > 59) || ((time -> Minutes  < 0))))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	785b      	ldrb	r3, [r3, #1]
 80019cc:	2b3b      	cmp	r3, #59	; 0x3b
 80019ce:	d902      	bls.n	80019d6 <validate_rtc_information+0x26>
	{
		return -1;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d4:	e02f      	b.n	8001a36 <validate_rtc_information+0x86>
	}
	else if(((time -> Seconds > 59) || ((time -> Seconds  < 0))))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	789b      	ldrb	r3, [r3, #2]
 80019da:	2b3b      	cmp	r3, #59	; 0x3b
 80019dc:	d902      	bls.n	80019e4 <validate_rtc_information+0x34>
	{
		return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019e2:	e028      	b.n	8001a36 <validate_rtc_information+0x86>
	}

	// Validate date, week day, year, month
	else if((date -> Date < 1 ) || (date -> Date > 31))
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	789b      	ldrb	r3, [r3, #2]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <validate_rtc_information+0x44>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	789b      	ldrb	r3, [r3, #2]
 80019f0:	2b1f      	cmp	r3, #31
 80019f2:	d902      	bls.n	80019fa <validate_rtc_information+0x4a>
	{
		return -1;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f8:	e01d      	b.n	8001a36 <validate_rtc_information+0x86>
	}
	else if((date -> WeekDay < 1 ) || (date -> WeekDay > 7))
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <validate_rtc_information+0x5a>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b07      	cmp	r3, #7
 8001a08:	d902      	bls.n	8001a10 <validate_rtc_information+0x60>
	{
		return -1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a0e:	e012      	b.n	8001a36 <validate_rtc_information+0x86>
	}
	else if(date -> Year > 99 )
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	78db      	ldrb	r3, [r3, #3]
 8001a14:	2b63      	cmp	r3, #99	; 0x63
 8001a16:	d902      	bls.n	8001a1e <validate_rtc_information+0x6e>
	{
		return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a1c:	e00b      	b.n	8001a36 <validate_rtc_information+0x86>
	}
	else if((date -> Month < 1 ) || (date -> Month > 12))
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	785b      	ldrb	r3, [r3, #1]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <validate_rtc_information+0x7e>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d902      	bls.n	8001a34 <validate_rtc_information+0x84>
	{
		return -1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a32:	e000      	b.n	8001a36 <validate_rtc_information+0x86>
	}
	return 1;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001a4a:	f00f fc97 	bl	801137c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	  osDelay(100);
 8001a4e:	2064      	movs	r0, #100	; 0x64
 8001a50:	f00c fb4c 	bl	800e0ec <osDelay>
 8001a54:	e7fb      	b.n	8001a4e <StartDefaultTask+0xc>
	...

08001a58 <start_menu_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_menu_task */
void start_menu_task(void *argument)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

	uint32_t cmd_addr;
	command_t *cmd;			// Create object of command_t
	int option;
	const char* msg_manu = "=======================\n\r"
 8001a60:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <start_menu_task+0xfc>)
 8001a62:	60bb      	str	r3, [r7, #8]
						   "Exit             ----> 3\n\r"
						   "Enter your choice here: \n\r";

	while(1)
	{
		int status = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
		status = xQueueSend(print_QueueHandle, &msg_manu, portMAX_DELAY);		// Send data in print
 8001a68:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <start_menu_task+0x100>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f107 0108 	add.w	r1, r7, #8
 8001a70:	2300      	movs	r3, #0
 8001a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a76:	f00c feab 	bl	800e7d0 <xQueueGenericSend>
 8001a7a:	61f8      	str	r0, [r7, #28]
		if(status != pdPASS)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d002      	beq.n	8001a88 <start_menu_task+0x30>
		{
			// ERROR
			int ggg =999;
 8001a82:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001a86:	61bb      	str	r3, [r7, #24]
		}

		//xQueueSendToBack(print_QueueHandle, &msg_manu, portMAX_DELAY);
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);					// Waiting for selected menu (waiting the choise) (from 'process_command' function)
 8001a88:	f107 020c 	add.w	r2, r7, #12
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a90:	2100      	movs	r1, #0
 8001a92:	2000      	movs	r0, #0
 8001a94:	f00e fa1c 	bl	800fed0 <xTaskNotifyWait>
		cmd = (command_t*)cmd_addr;										// If number selected menu are selected, save it
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)												// Checking, must be one number, not more
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	7a9b      	ldrb	r3, [r3, #10]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d146      	bne.n	8001b32 <start_menu_task+0xda>
		{
			option = cmd -> payload[0] - 48;							// Convert from char to number, and write it on struct
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	3b30      	subs	r3, #48	; 0x30
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d836      	bhi.n	8001b20 <start_menu_task+0xc8>
 8001ab2:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <start_menu_task+0x60>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001adf 	.word	0x08001adf
 8001ac0:	08001af5 	.word	0x08001af5
 8001ac4:	08001b0b 	.word	0x08001b0b

			switch (option)
			{
				case 0:													// If selected LED menu
					curr_state = sLedEffect;
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <start_menu_task+0x104>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
					xTaskNotify(led_taskHandle, 0 ,eNoAction);
 8001ace:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <start_menu_task+0x108>)
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f00e fa5a 	bl	800ff90 <xTaskGenericNotify>
					break;
 8001adc:	e032      	b.n	8001b44 <start_menu_task+0xec>

				case 1:
					curr_state = sRtcMenu;								// If selected RTC menu
 8001ade:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <start_menu_task+0x104>)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	701a      	strb	r2, [r3, #0]
					xTaskNotify(rtc_taskHandle, 0, eNoAction);
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <start_menu_task+0x10c>)
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	f00e fa4f 	bl	800ff90 <xTaskGenericNotify>
					break;
 8001af2:	e027      	b.n	8001b44 <start_menu_task+0xec>

				case 2:
					curr_state = sTestMenu;
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <start_menu_task+0x104>)
 8001af6:	2206      	movs	r2, #6
 8001af8:	701a      	strb	r2, [r3, #0]
					xTaskNotify(test_taskHandle, 0 ,eNoAction);
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <start_menu_task+0x110>)
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	f00e fa44 	bl	800ff90 <xTaskGenericNotify>
					break;
 8001b08:	e01c      	b.n	8001b44 <start_menu_task+0xec>

				case 3:		// EXIT   (Return to main menu and print it)
					curr_state = sMainMenu;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <start_menu_task+0x104>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(menu_taskHandle, 0 ,eNoAction);
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <start_menu_task+0x114>)
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	2300      	movs	r3, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	f00e fa39 	bl	800ff90 <xTaskGenericNotify>
					break;
 8001b1e:	e011      	b.n	8001b44 <start_menu_task+0xec>

				default:															// If input sign uncorrect
					xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);			// Print message: /// Invalid option ///
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <start_menu_task+0x100>)
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	2300      	movs	r3, #0
 8001b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b2a:	4911      	ldr	r1, [pc, #68]	; (8001b70 <start_menu_task+0x118>)
 8001b2c:	f00c fe50 	bl	800e7d0 <xQueueGenericSend>
					continue;														// Return to while(1)
 8001b30:	e00f      	b.n	8001b52 <start_menu_task+0xfa>
			}
		}
		else															// Invalid entry (entered more than one char)
		{
			xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);		// Print message: /// Invalid option ///
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <start_menu_task+0x100>)
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	2300      	movs	r3, #0
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b3c:	490c      	ldr	r1, [pc, #48]	; (8001b70 <start_menu_task+0x118>)
 8001b3e:	f00c fe47 	bl	800e7d0 <xQueueGenericSend>
			continue;													// Return to while(1)
 8001b42:	e006      	b.n	8001b52 <start_menu_task+0xfa>
		}

		// Wait to run again when some other task notifies.
		// After notify return to "while(1)" main loop again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f00e f9bf 	bl	800fed0 <xTaskNotifyWait>
	{
 8001b52:	e787      	b.n	8001a64 <start_menu_task+0xc>
 8001b54:	08012480 	.word	0x08012480
 8001b58:	20004c60 	.word	0x20004c60
 8001b5c:	200000d7 	.word	0x200000d7
 8001b60:	20004bd0 	.word	0x20004bd0
 8001b64:	20004c64 	.word	0x20004c64
 8001b68:	20004b78 	.word	0x20004b78
 8001b6c:	20004d04 	.word	0x20004d04
 8001b70:	20000000 	.word	0x20000000

08001b74 <start_led_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_led_task */
void start_led_task(void *argument)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
//	{
//		osDelay(100);
//	}
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n\r"
 8001b7c:	4b46      	ldr	r3, [pc, #280]	; (8001c98 <start_led_task+0x124>)
 8001b7e:	60fb      	str	r3, [r7, #12]
						  "(none, e1, e2, e3, e4, on, off)  \n\r"
						  "Enter your choice here : \n\r";

	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);					  	// Wait for notification (selected LEDs effect)
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f00e f9a1 	bl	800fed0 <xTaskNotifyWait>
		xQueueSend(print_QueueHandle, &msg_led, portMAX_DELAY);			// Send data to print (Print LED menu)
 8001b8e:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <start_led_task+0x128>)
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	f107 010c 	add.w	r1, r7, #12
 8001b96:	2300      	movs	r3, #0
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b9c:	f00c fe18 	bl	800e7d0 <xQueueGenericSend>

		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);				// Wait for LED command
 8001ba0:	f107 0210 	add.w	r2, r7, #16
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2000      	movs	r0, #0
 8001bac:	f00e f990 	bl	800fed0 <xTaskNotifyWait>
		cmd = (command_t*) cmd_addr;
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	617b      	str	r3, [r7, #20]

		if(cmd -> len <= 4)											    // Check input command (max input size must be less then 4)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	7a9b      	ldrb	r3, [r3, #10]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d859      	bhi.n	8001c70 <start_led_task+0xfc>
		{
			// Select LED effect
			if( ! strcmp((char*)cmd->payload, "none" ))
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	4938      	ldr	r1, [pc, #224]	; (8001ca0 <start_led_task+0x12c>)
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fb05 	bl	80001d0 <strcmp>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <start_led_task+0x5e>
			{
				led_effect_stop();
 8001bcc:	f7ff fc54 	bl	8001478 <led_effect_stop>
 8001bd0:	e056      	b.n	8001c80 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e1"))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	4933      	ldr	r1, [pc, #204]	; (8001ca4 <start_led_task+0x130>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fafa 	bl	80001d0 <strcmp>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d103      	bne.n	8001bea <start_led_task+0x76>
			{
				led_effect(1);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7ff fc68 	bl	80014b8 <led_effect>
 8001be8:	e04a      	b.n	8001c80 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e2"))
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	492e      	ldr	r1, [pc, #184]	; (8001ca8 <start_led_task+0x134>)
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe faee 	bl	80001d0 <strcmp>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d103      	bne.n	8001c02 <start_led_task+0x8e>
			{
				led_effect(2);
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f7ff fc5c 	bl	80014b8 <led_effect>
 8001c00:	e03e      	b.n	8001c80 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e3"))
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	4929      	ldr	r1, [pc, #164]	; (8001cac <start_led_task+0x138>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fae2 	bl	80001d0 <strcmp>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d103      	bne.n	8001c1a <start_led_task+0xa6>
			{
				led_effect(3);
 8001c12:	2003      	movs	r0, #3
 8001c14:	f7ff fc50 	bl	80014b8 <led_effect>
 8001c18:	e032      	b.n	8001c80 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e4"))
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	4924      	ldr	r1, [pc, #144]	; (8001cb0 <start_led_task+0x13c>)
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fad6 	bl	80001d0 <strcmp>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <start_led_task+0xbe>
			{
				led_effect(4);
 8001c2a:	2004      	movs	r0, #4
 8001c2c:	f7ff fc44 	bl	80014b8 <led_effect>
 8001c30:	e026      	b.n	8001c80 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "on"))			// Work
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	491f      	ldr	r1, [pc, #124]	; (8001cb4 <start_led_task+0x140>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe faca 	bl	80001d0 <strcmp>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <start_led_task+0xd4>
			{
				turn_on_all_leds();
 8001c42:	f7ff fc75 	bl	8001530 <turn_on_all_leds>
 8001c46:	e01b      	b.n	8001c80 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "off"))		// Work
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	491b      	ldr	r1, [pc, #108]	; (8001cb8 <start_led_task+0x144>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fabf 	bl	80001d0 <strcmp>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <start_led_task+0xea>
			{
				turn_off_all_leds();
 8001c58:	f7ff fc4c 	bl	80014f4 <turn_off_all_leds>
 8001c5c:	e010      	b.n	8001c80 <start_led_task+0x10c>
			}
			else
			{
				xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);				// Print invalid massage
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <start_led_task+0x128>)
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	2300      	movs	r3, #0
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c68:	4914      	ldr	r1, [pc, #80]	; (8001cbc <start_led_task+0x148>)
 8001c6a:	f00c fdb1 	bl	800e7d0 <xQueueGenericSend>
 8001c6e:	e007      	b.n	8001c80 <start_led_task+0x10c>
			}
		}
		else
		{
			xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);					// Print invalid massage
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <start_led_task+0x128>)
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	2300      	movs	r3, #0
 8001c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c7a:	4910      	ldr	r1, [pc, #64]	; (8001cbc <start_led_task+0x148>)
 8001c7c:	f00c fda8 	bl	800e7d0 <xQueueGenericSend>
		}

		curr_state = sMainMenu;								// Return to mai menu
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <start_led_task+0x14c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
		xTaskNotify(menu_taskHandle, 0, eNoAction);			// Notify menu task
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <start_led_task+0x150>)
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	f00e f97e 	bl	800ff90 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);					  	// Wait for notification (selected LEDs effect)
 8001c94:	e774      	b.n	8001b80 <start_led_task+0xc>
 8001c96:	bf00      	nop
 8001c98:	08012554 	.word	0x08012554
 8001c9c:	20004c60 	.word	0x20004c60
 8001ca0:	080125e4 	.word	0x080125e4
 8001ca4:	080125ec 	.word	0x080125ec
 8001ca8:	080125f0 	.word	0x080125f0
 8001cac:	080125f4 	.word	0x080125f4
 8001cb0:	080125f8 	.word	0x080125f8
 8001cb4:	080125fc 	.word	0x080125fc
 8001cb8:	08012600 	.word	0x08012600
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	200000d7 	.word	0x200000d7
 8001cc4:	20004d04 	.word	0x20004d04

08001cc8 <start_rtc_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_rtc_task */
void start_rtc_task(void *argument)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b098      	sub	sp, #96	; 0x60
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_rtc_task */
  /* Infinite loop */

	const char* msg_rtc1 = "========================\n\r"
 8001cd0:	4bba      	ldr	r3, [pc, #744]	; (8001fbc <start_rtc_task+0x2f4>)
 8001cd2:	64bb      	str	r3, [r7, #72]	; 0x48
						   "Configure Date   ----> 1\n\r"
						   "Enable reporting ----> 2\n\r"
			               "Exit             ----> 3\n\r"
			  	  	  	   "Enter your choice here : \n\r";

	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001cd4:	4bba      	ldr	r3, [pc, #744]	; (8001fc0 <start_rtc_task+0x2f8>)
 8001cd6:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001cd8:	4bba      	ldr	r3, [pc, #744]	; (8001fc4 <start_rtc_task+0x2fc>)
 8001cda:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001cdc:	4bba      	ldr	r3, [pc, #744]	; (8001fc8 <start_rtc_task+0x300>)
 8001cde:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001ce0:	4bba      	ldr	r3, [pc, #744]	; (8001fcc <start_rtc_task+0x304>)
 8001ce2:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001ce4:	4bba      	ldr	r3, [pc, #744]	; (8001fd0 <start_rtc_task+0x308>)
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8001ce8:	4bba      	ldr	r3, [pc, #744]	; (8001fd4 <start_rtc_task+0x30c>)
 8001cea:	65fb      	str	r3, [r7, #92]	; 0x5c
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001cec:	4bba      	ldr	r3, [pc, #744]	; (8001fd8 <start_rtc_task+0x310>)
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30

	const char *msg_conf = "Configuration successful\n";
 8001cf0:	4bba      	ldr	r3, [pc, #744]	; (8001fdc <start_rtc_task+0x314>)
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001cf4:	4bba      	ldr	r3, [pc, #744]	; (8001fe0 <start_rtc_task+0x318>)
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
	#define YEAR_CONFIG		2
	#define DAY_CONFIG		3

	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);								// Notify wait (wait till someone notifies)
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2000      	movs	r0, #0
 8001d02:	f00e f8e5 	bl	800fed0 <xTaskNotifyWait>
		xQueueSend(print_QueueHandle, &msg_rtc1, portMAX_DELAY);			    // Print the menu
 8001d06:	4bb7      	ldr	r3, [pc, #732]	; (8001fe4 <start_rtc_task+0x31c>)
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d14:	f00c fd5c 	bl	800e7d0 <xQueueGenericSend>
		show_time_date();														// Print the current date and time information
 8001d18:	f7ff fd98 	bl	800184c <show_time_date>
		//osDelay(100);


		//xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
		//xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);		 			// Wait for command notification (Notify wait)
		while(curr_state != sMainMenu)
 8001d1c:	bf00      	nop
 8001d1e:	e19e      	b.n	800205e <start_rtc_task+0x396>
//
//			if(cmd -> len <= 4)											    // Check input command (max input size must be less then 4)
//					{

			/////////////////////////////////////////////
			int ret_status = xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);		 			// Waiting for command notification (Notify wait)
 8001d20:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f00e f8d0 	bl	800fed0 <xTaskNotifyWait>
 8001d30:	65b8      	str	r0, [r7, #88]	; 0x58
			// Return 0x410908 and  cmd_addr = 0x410908
			cmd = (command_t*)cmd_addr;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	657b      	str	r3, [r7, #84]	; 0x54


			//int test_var = cmd -> len;		 	// For test   HARD FOULT <<<<<<<<<<<<<<<<<<<<<<<<<

			switch(curr_state)
 8001d36:	4bac      	ldr	r3, [pc, #688]	; (8001fe8 <start_rtc_task+0x320>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	3b02      	subs	r3, #2
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	f200 818e 	bhi.w	800205e <start_rtc_task+0x396>
 8001d42:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <start_rtc_task+0x80>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001d59 	.word	0x08001d59
 8001d4c:	08001e0f 	.word	0x08001e0f
 8001d50:	08001f01 	.word	0x08001f01
 8001d54:	0800205d 	.word	0x0800205d
			{
				case sRtcMenu:{
					if((cmd -> len) == 1)			// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5a:	7a9b      	ldrb	r3, [r3, #10]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d14a      	bne.n	8001df6 <start_rtc_task+0x12e>
					{
						menu_code = cmd -> payload[0] - 48;
 8001d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	3b30      	subs	r3, #48	; 0x30
 8001d66:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
						switch(menu_code)
 8001d6a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d835      	bhi.n	8001dde <start_rtc_task+0x116>
 8001d72:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <start_rtc_task+0xb0>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001da3 	.word	0x08001da3
 8001d80:	08001dbd 	.word	0x08001dbd
 8001d84:	08001dd7 	.word	0x08001dd7
						{
						case 0:
							curr_state = sRtcTimeConfig;
 8001d88:	4b97      	ldr	r3, [pc, #604]	; (8001fe8 <start_rtc_task+0x320>)
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_hh, portMAX_DELAY);
 8001d8e:	4b95      	ldr	r3, [pc, #596]	; (8001fe4 <start_rtc_task+0x31c>)
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001d96:	2300      	movs	r3, #0
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d9c:	f00c fd18 	bl	800e7d0 <xQueueGenericSend>
							break;
 8001da0:	e034      	b.n	8001e0c <start_rtc_task+0x144>

						case 1:
							curr_state = sRtcDateConfig;
 8001da2:	4b91      	ldr	r3, [pc, #580]	; (8001fe8 <start_rtc_task+0x320>)
 8001da4:	2204      	movs	r2, #4
 8001da6:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_dd, portMAX_DELAY);
 8001da8:	4b8e      	ldr	r3, [pc, #568]	; (8001fe4 <start_rtc_task+0x31c>)
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001db0:	2300      	movs	r3, #0
 8001db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001db6:	f00c fd0b 	bl	800e7d0 <xQueueGenericSend>
							break;
 8001dba:	e027      	b.n	8001e0c <start_rtc_task+0x144>

						case 2:
							curr_state = sRtcReport;
 8001dbc:	4b8a      	ldr	r3, [pc, #552]	; (8001fe8 <start_rtc_task+0x320>)
 8001dbe:	2205      	movs	r2, #5
 8001dc0:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_report, portMAX_DELAY);
 8001dc2:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <start_rtc_task+0x31c>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dd0:	f00c fcfe 	bl	800e7d0 <xQueueGenericSend>
							break;
 8001dd4:	e01a      	b.n	8001e0c <start_rtc_task+0x144>

						case 3:
							curr_state = sMainMenu;
 8001dd6:	4b84      	ldr	r3, [pc, #528]	; (8001fe8 <start_rtc_task+0x320>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
							break;
 8001ddc:	e016      	b.n	8001e0c <start_rtc_task+0x144>
						default:
							curr_state = sMainMenu;
 8001dde:	4b82      	ldr	r3, [pc, #520]	; (8001fe8 <start_rtc_task+0x320>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
 8001de4:	4b7f      	ldr	r3, [pc, #508]	; (8001fe4 <start_rtc_task+0x31c>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	2300      	movs	r3, #0
 8001dea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dee:	497f      	ldr	r1, [pc, #508]	; (8001fec <start_rtc_task+0x324>)
 8001df0:	f00c fcee 	bl	800e7d0 <xQueueGenericSend>
 8001df4:	e133      	b.n	800205e <start_rtc_task+0x396>
						}
					}
					else
					{
						curr_state = sMainMenu;			// Go back to the main manu
 8001df6:	4b7c      	ldr	r3, [pc, #496]	; (8001fe8 <start_rtc_task+0x320>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
						xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);		// Send invalid message
 8001dfc:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <start_rtc_task+0x31c>)
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	2300      	movs	r3, #0
 8001e02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e06:	4979      	ldr	r1, [pc, #484]	; (8001fec <start_rtc_task+0x324>)
 8001e08:	f00c fce2 	bl	800e7d0 <xQueueGenericSend>
					}
					break;}
 8001e0c:	e127      	b.n	800205e <start_rtc_task+0x396>

				case sRtcTimeConfig:{
					//  get hh, mm, ss infor and configure RTC
					//rtc_configure_time();
					// take care of invalid entries
					switch (rtc_state)
 8001e0e:	4b78      	ldr	r3, [pc, #480]	; (8001ff0 <start_rtc_task+0x328>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d03a      	beq.n	8001e8c <start_rtc_task+0x1c4>
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	dc6e      	bgt.n	8001ef8 <start_rtc_task+0x230>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <start_rtc_task+0x15c>
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d01a      	beq.n	8001e58 <start_rtc_task+0x190>
 8001e22:	e069      	b.n	8001ef8 <start_rtc_task+0x230>
					{
						case HH_CONFIG:{
							uint8_t hour = getnumber(cmd -> payload, cmd -> len);
 8001e24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e28:	7a9b      	ldrb	r3, [r3, #10]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	f7ff fd9b 	bl	8001968 <getnumber>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
							time.Hours = hour;
 8001e38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e3c:	743b      	strb	r3, [r7, #16]
							rtc_state = MM_CONFIG;
 8001e3e:	4b6c      	ldr	r3, [pc, #432]	; (8001ff0 <start_rtc_task+0x328>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_mm, portMAX_DELAY);
 8001e44:	4b67      	ldr	r3, [pc, #412]	; (8001fe4 <start_rtc_task+0x31c>)
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e52:	f00c fcbd 	bl	800e7d0 <xQueueGenericSend>
							break;}				// back to: while(curr_state != sMainMenu)
 8001e56:	e04f      	b.n	8001ef8 <start_rtc_task+0x230>

						case MM_CONFIG:{
							uint8_t minute = getnumber(cmd -> payload, cmd -> len);
 8001e58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5c:	7a9b      	ldrb	r3, [r3, #10]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4610      	mov	r0, r2
 8001e62:	f7ff fd81 	bl	8001968 <getnumber>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
							time.Minutes = minute;
 8001e6c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001e70:	747b      	strb	r3, [r7, #17]
							rtc_state = SS_CONFIG;
 8001e72:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <start_rtc_task+0x328>)
 8001e74:	2202      	movs	r2, #2
 8001e76:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_ss, portMAX_DELAY);
 8001e78:	4b5a      	ldr	r3, [pc, #360]	; (8001fe4 <start_rtc_task+0x31c>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001e80:	2300      	movs	r3, #0
 8001e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e86:	f00c fca3 	bl	800e7d0 <xQueueGenericSend>
							break;}
 8001e8a:	e035      	b.n	8001ef8 <start_rtc_task+0x230>
						case SS_CONFIG:{
							uint8_t second = getnumber(cmd -> payload, cmd -> len);
 8001e8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e90:	7a9b      	ldrb	r3, [r3, #10]
 8001e92:	4619      	mov	r1, r3
 8001e94:	4610      	mov	r0, r2
 8001e96:	f7ff fd67 	bl	8001968 <getnumber>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
							time.Seconds = second;
 8001ea0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ea4:	74bb      	strb	r3, [r7, #18]

							if(!validate_rtc_information(&time, NULL))
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fd7f 	bl	80019b0 <validate_rtc_information>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d110      	bne.n	8001eda <start_rtc_task+0x212>
							{
								// If input data is correct
								rtc_configure_time(&time);
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fd31 	bl	8001924 <rtc_configure_time>
								xQueueSend(print_QueueHandle, &msg_conf, portMAX_DELAY);
 8001ec2:	4b48      	ldr	r3, [pc, #288]	; (8001fe4 <start_rtc_task+0x31c>)
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ed0:	f00c fc7e 	bl	800e7d0 <xQueueGenericSend>
								show_time_date();
 8001ed4:	f7ff fcba 	bl	800184c <show_time_date>
 8001ed8:	e007      	b.n	8001eea <start_rtc_task+0x222>
							}
							else
							{
								// If Input data isn't correct
								xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);		// Send invalid message
 8001eda:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <start_rtc_task+0x31c>)
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ee4:	4941      	ldr	r1, [pc, #260]	; (8001fec <start_rtc_task+0x324>)
 8001ee6:	f00c fc73 	bl	800e7d0 <xQueueGenericSend>
							}
							curr_state = sMainMenu;			// Back to main menu
 8001eea:	4b3f      	ldr	r3, [pc, #252]	; (8001fe8 <start_rtc_task+0x320>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
							rtc_state = 0;					// Set first: case HH_CONFIG:{
 8001ef0:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <start_rtc_task+0x328>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
							break;}
 8001ef6:	bf00      	nop
					}

					curr_state = sMainMenu;			// Go back to the main manu
 8001ef8:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <start_rtc_task+0x320>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
					break;}
 8001efe:	e0ae      	b.n	800205e <start_rtc_task+0x396>

				case sRtcDateConfig:{
					switch (rtc_state)
 8001f00:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <start_rtc_task+0x328>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	f200 80a5 	bhi.w	8002054 <start_rtc_task+0x38c>
 8001f0a:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <start_rtc_task+0x248>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f21 	.word	0x08001f21
 8001f14:	08001f89 	.word	0x08001f89
 8001f18:	08001ff5 	.word	0x08001ff5
 8001f1c:	08001f55 	.word	0x08001f55
					{
						case DATE_CONFIG:{
							uint8_t d = getnumber(cmd -> payload, cmd -> len);
 8001f20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f24:	7a9b      	ldrb	r3, [r3, #10]
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f7ff fd1d 	bl	8001968 <getnumber>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
							date.Date = d;
 8001f34:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001f38:	73bb      	strb	r3, [r7, #14]
							rtc_state = DAY_CONFIG;
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <start_rtc_task+0x328>)
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_mo, portMAX_DELAY);
 8001f40:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <start_rtc_task+0x31c>)
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f4e:	f00c fc3f 	bl	800e7d0 <xQueueGenericSend>
							break;}
 8001f52:	e07f      	b.n	8002054 <start_rtc_task+0x38c>

						case DAY_CONFIG:{
							uint8_t d = getnumber(cmd -> payload, cmd -> len);
 8001f54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f58:	7a9b      	ldrb	r3, [r3, #10]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	f7ff fd03 	bl	8001968 <getnumber>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
							date.Year = d;
 8001f68:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001f6c:	73fb      	strb	r3, [r7, #15]
							rtc_state = MONTH_CONFIG;
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <start_rtc_task+0x328>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_yr, portMAX_DELAY);
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <start_rtc_task+0x31c>)
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f82:	f00c fc25 	bl	800e7d0 <xQueueGenericSend>
							break;}
 8001f86:	e065      	b.n	8002054 <start_rtc_task+0x38c>

						case MONTH_CONFIG:{
							uint8_t m = getnumber(cmd -> payload, cmd -> len);
 8001f88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8c:	7a9b      	ldrb	r3, [r3, #10]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4610      	mov	r0, r2
 8001f92:	f7ff fce9 	bl	8001968 <getnumber>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
							date.Month = m;
 8001f9c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001fa0:	737b      	strb	r3, [r7, #13]
							rtc_state = YEAR_CONFIG;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <start_rtc_task+0x328>)
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_yr, portMAX_DELAY);
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <start_rtc_task+0x31c>)
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fb6:	f00c fc0b 	bl	800e7d0 <xQueueGenericSend>
							break;}
 8001fba:	e04b      	b.n	8002054 <start_rtc_task+0x38c>
 8001fbc:	08012604 	.word	0x08012604
 8001fc0:	080126d8 	.word	0x080126d8
 8001fc4:	080126ec 	.word	0x080126ec
 8001fc8:	08012704 	.word	0x08012704
 8001fcc:	0801271c 	.word	0x0801271c
 8001fd0:	08012730 	.word	0x08012730
 8001fd4:	08012744 	.word	0x08012744
 8001fd8:	0801275c 	.word	0x0801275c
 8001fdc:	08012770 	.word	0x08012770
 8001fe0:	0801278c 	.word	0x0801278c
 8001fe4:	20004c60 	.word	0x20004c60
 8001fe8:	200000d7 	.word	0x200000d7
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	20000138 	.word	0x20000138

						case YEAR_CONFIG:{
							uint8_t y = getnumber(cmd -> payload, cmd -> len);
 8001ff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff8:	7a9b      	ldrb	r3, [r3, #10]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f7ff fcb3 	bl	8001968 <getnumber>
 8002002:	4603      	mov	r3, r0
 8002004:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
							date.Year = y;
 8002008:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800200c:	73fb      	strb	r3, [r7, #15]

							if(!validate_rtc_information(NULL, &date))
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	4619      	mov	r1, r3
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff fccb 	bl	80019b0 <validate_rtc_information>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d110      	bne.n	8002042 <start_rtc_task+0x37a>
							{
								rtc_configure_date(&date);
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fc8f 	bl	8001948 <rtc_configure_date>
								xQueueSend(print_QueueHandle, &msg_conf, portMAX_DELAY);
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <start_rtc_task+0x3b0>)
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002032:	2300      	movs	r3, #0
 8002034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002038:	f00c fbca 	bl	800e7d0 <xQueueGenericSend>
								show_time_date();
 800203c:	f7ff fc06 	bl	800184c <show_time_date>
							{
								xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
							}


							break;}
 8002040:	e007      	b.n	8002052 <start_rtc_task+0x38a>
								xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <start_rtc_task+0x3b0>)
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	2300      	movs	r3, #0
 8002048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800204c:	490b      	ldr	r1, [pc, #44]	; (800207c <start_rtc_task+0x3b4>)
 800204e:	f00c fbbf 	bl	800e7d0 <xQueueGenericSend>
							break;}
 8002052:	bf00      	nop
					//rtc_configure_date();
					/*TODO: take care of invalid entries */



					curr_state = sMainMenu;			// Go back to the main manu
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <start_rtc_task+0x3b8>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
					break;}
 800205a:	e000      	b.n	800205e <start_rtc_task+0x396>

				case sRtcReport:{
					/*TODO: enable or disable RTC current time reporting over ITM printf */
					break;}
 800205c:	bf00      	nop
		while(curr_state != sMainMenu)
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <start_rtc_task+0x3b8>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f47f ae5c 	bne.w	8001d20 <start_rtc_task+0x58>
				}// switch end
//			}


		} //while end
		xTaskNotify(menu_taskHandle, 0, eNoAction);		// Notify menu task
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <start_rtc_task+0x3bc>)
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	2300      	movs	r3, #0
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	f00d ff8d 	bl	800ff90 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);								// Notify wait (wait till someone notifies)
 8002076:	e63f      	b.n	8001cf8 <start_rtc_task+0x30>
 8002078:	20004c60 	.word	0x20004c60
 800207c:	20000000 	.word	0x20000000
 8002080:	200000d7 	.word	0x200000d7
 8002084:	20004d04 	.word	0x20004d04

08002088 <start_print>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_print */
void start_print(void *argument)
{
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	uint32_t *msg;

	while(1)
	{
		int status = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
		status = xQueueReceive(print_QueueHandle, &msg, portMAX_DELAY);
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <start_print+0x50>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f107 0108 	add.w	r1, r7, #8
 800209c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020a0:	4618      	mov	r0, r3
 80020a2:	f00c fd2f 	bl	800eb04 <xQueueReceive>
 80020a6:	6178      	str	r0, [r7, #20]
		if(status != pdPASS)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d002      	beq.n	80020b4 <start_print+0x2c>
		{
			// ERROR
			int ggg =999;
 80020ae:	f240 33e7 	movw	r3, #999	; 0x3e7
 80020b2:	613b      	str	r3, [r7, #16]
		}
	    HAL_UART_Transmit(&huart2,(uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);					// Doesen't work =(
 80020b4:	68bc      	ldr	r4, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe f893 	bl	80001e4 <strlen>
 80020be:	4603      	mov	r3, r0
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020c6:	4621      	mov	r1, r4
 80020c8:	4804      	ldr	r0, [pc, #16]	; (80020dc <start_print+0x54>)
 80020ca:	f007 fe6e 	bl	8009daa <HAL_UART_Transmit>
	    int ggg = 888;
 80020ce:	f44f 735e 	mov.w	r3, #888	; 0x378
 80020d2:	60fb      	str	r3, [r7, #12]
	{
 80020d4:	e7dc      	b.n	8002090 <start_print+0x8>
 80020d6:	bf00      	nop
 80020d8:	20004c60 	.word	0x20004c60
 80020dc:	20004cc0 	.word	0x20004cc0

080020e0 <start_cmd_handl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_cmd_handl */
void start_cmd_handl(void *argument)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	command_t cmd;			// Create command variable

	for(;;)
	{
		// Waiting on notify from HAL_UART_RxCpltCallback
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	2000      	movs	r0, #0
 80020f2:	f00d feed 	bl	800fed0 <xTaskNotifyWait>
 80020f6:	6178      	str	r0, [r7, #20]
		if(ret == pdTRUE)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d1f4      	bne.n	80020e8 <start_cmd_handl+0x8>
		{
			process_command(&cmd);
 80020fe:	f107 0308 	add.w	r3, r7, #8
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fb18 	bl	8001738 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002108:	e7ee      	b.n	80020e8 <start_cmd_handl+0x8>
	...

0800210c <StartOLED_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLED_RTC */
void StartOLED_RTC(void *argument)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0a0      	sub	sp, #128	; 0x80
 8002110:	af04      	add	r7, sp, #16
 8002112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLED_RTC */
  /* Infinite loop */

	osDelay(1000);
 8002114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002118:	f00b ffe8 	bl	800e0ec <osDelay>

		// For resd time
		char time[20] = {0};
 800211c:	2300      	movs	r3, #0
 800211e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002120:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
		char date[40] = {0};
 800212e:	2300      	movs	r3, #0
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
 8002132:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f00f fc6a 	bl	8011a14 <memset>
		char time_buf[10] = {0};
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	809a      	strh	r2, [r3, #4]
		char time_buf_2[10] = {0};
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	809a      	strh	r2, [r3, #4]

		uint8_t seconds = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	75fb      	strb	r3, [r7, #23]
		uint8_t minutes = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	75bb      	strb	r3, [r7, #22]
		uint8_t hours = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	757b      	strb	r3, [r7, #21]
		uint8_t day = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	753b      	strb	r3, [r7, #20]
		uint8_t date_day = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	74fb      	strb	r3, [r7, #19]
		uint8_t mounth = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	74bb      	strb	r3, [r7, #18]
		uint8_t year = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	747b      	strb	r3, [r7, #17]
		uint8_t status = 9;
 8002178:	2309      	movs	r3, #9
 800217a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		//

		oled_init();
 800217e:	f002 f813 	bl	80041a8 <oled_init>
		oled_update();
 8002182:	f001 ffbd 	bl	8004100 <oled_update>
		ds3231_I2C_init();
 8002186:	f7fe fa8f 	bl	80006a8 <ds3231_I2C_init>

		// Encoder
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800218a:	213c      	movs	r1, #60	; 0x3c
 800218c:	48c9      	ldr	r0, [pc, #804]	; (80024b4 <StartOLED_RTC+0x3a8>)
 800218e:	f007 faaa 	bl	80096e6 <HAL_TIM_Encoder_Start>
		int32_t prevCounter = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
		//

		for(;;)
		{
			switch (klick)
 8002196:	4bc8      	ldr	r3, [pc, #800]	; (80024b8 <StartOLED_RTC+0x3ac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b0f      	cmp	r3, #15
 800219c:	d8fb      	bhi.n	8002196 <StartOLED_RTC+0x8a>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <StartOLED_RTC+0x98>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021e5 	.word	0x080021e5
 80021a8:	08002815 	.word	0x08002815
 80021ac:	08002197 	.word	0x08002197
 80021b0:	0800297f 	.word	0x0800297f
 80021b4:	08002197 	.word	0x08002197
 80021b8:	08002abb 	.word	0x08002abb
 80021bc:	08002197 	.word	0x08002197
 80021c0:	08002c29 	.word	0x08002c29
 80021c4:	08002197 	.word	0x08002197
 80021c8:	08002d6f 	.word	0x08002d6f
 80021cc:	08002197 	.word	0x08002197
 80021d0:	08002ebf 	.word	0x08002ebf
 80021d4:	08002197 	.word	0x08002197
 80021d8:	08002fe5 	.word	0x08002fe5
 80021dc:	08002197 	.word	0x08002197
 80021e0:	08003137 	.word	0x08003137
			{
				case 0:					// Read time and data from DS3231

					strcat(time_buf, "TIME");
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fd fffb 	bl	80001e4 <strlen>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f6:	4413      	add	r3, r2
 80021f8:	4ab0      	ldr	r2, [pc, #704]	; (80024bc <StartOLED_RTC+0x3b0>)
 80021fa:	6810      	ldr	r0, [r2, #0]
 80021fc:	6018      	str	r0, [r3, #0]
 80021fe:	7912      	ldrb	r2, [r2, #4]
 8002200:	711a      	strb	r2, [r3, #4]
					graphics_text(40, 10, 3, time_buf);
 8002202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002206:	2203      	movs	r2, #3
 8002208:	210a      	movs	r1, #10
 800220a:	2028      	movs	r0, #40	; 0x28
 800220c:	f001 fec4 	bl	8003f98 <graphics_text>
					oled_update();
 8002210:	f001 ff76 	bl	8004100 <oled_update>
					osDelay(2000);
 8002214:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002218:	f00b ff68 	bl	800e0ec <osDelay>
					clear();
 800221c:	f001 fd08 	bl	8003c30 <clear>
					oled_update();
 8002220:	f001 ff6e 	bl	8004100 <oled_update>

					while(klick == 0)
 8002224:	e2ef      	b.n	8002806 <StartOLED_RTC+0x6fa>
					{
						memset(time, 0, sizeof(time));
 8002226:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800222a:	2214      	movs	r2, #20
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f00f fbf0 	bl	8011a14 <memset>
						memset(date, 0, sizeof(date));
 8002234:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002238:	2228      	movs	r2, #40	; 0x28
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f00f fbe9 	bl	8011a14 <memset>
						memset(time_buf, 0, sizeof(time_buf));
 8002242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002246:	220a      	movs	r2, #10
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f00f fbe2 	bl	8011a14 <memset>
						memset(time_buf_2, 0, sizeof(time_buf_2));
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	220a      	movs	r2, #10
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f00f fbdb 	bl	8011a14 <memset>

						// 1. Read time from RTS
						// Red status (Detect DS3231)
						uint8_t buff= 0;
 800225e:	2300      	movs	r3, #0
 8002260:	72fb      	strb	r3, [r7, #11]
						status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	9302      	str	r3, [sp, #8]
 8002268:	2301      	movs	r3, #1
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	f107 030b 	add.w	r3, r7, #11
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2301      	movs	r3, #1
 8002274:	2200      	movs	r2, #0
 8002276:	21d0      	movs	r1, #208	; 0xd0
 8002278:	4891      	ldr	r0, [pc, #580]	; (80024c0 <StartOLED_RTC+0x3b4>)
 800227a:	f004 fca9 	bl	8006bd0 <HAL_I2C_Mem_Read>
 800227e:	4603      	mov	r3, r0
 8002280:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if(status != HAL_OK )								// If DS3231 doesen'e detect
 8002284:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002288:	2b00      	cmp	r3, #0
 800228a:	d050      	beq.n	800232e <StartOLED_RTC+0x222>
						{
							clear();
 800228c:	f001 fcd0 	bl	8003c30 <clear>
							while(status != HAL_OK)							// If ERROR
 8002290:	e046      	b.n	8002320 <StartOLED_RTC+0x214>
							{
								strcat(time_buf, "RTC ERROR");
 8002292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002296:	4618      	mov	r0, r3
 8002298:	f7fd ffa4 	bl	80001e4 <strlen>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a4:	4413      	add	r3, r2
 80022a6:	4987      	ldr	r1, [pc, #540]	; (80024c4 <StartOLED_RTC+0x3b8>)
 80022a8:	461a      	mov	r2, r3
 80022aa:	460b      	mov	r3, r1
 80022ac:	cb03      	ldmia	r3!, {r0, r1}
 80022ae:	6010      	str	r0, [r2, #0]
 80022b0:	6051      	str	r1, [r2, #4]
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	8113      	strh	r3, [r2, #8]
								graphics_text(8, 5, 3, time_buf);
 80022b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ba:	2203      	movs	r2, #3
 80022bc:	2105      	movs	r1, #5
 80022be:	2008      	movs	r0, #8
 80022c0:	f001 fe6a 	bl	8003f98 <graphics_text>
								oled_update();
 80022c4:	f001 ff1c 	bl	8004100 <oled_update>
								memset(time_buf, 0, sizeof(time_buf));
 80022c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022cc:	220a      	movs	r2, #10
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f00f fb9f 	bl	8011a14 <memset>
								osDelay(300);
 80022d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022da:	f00b ff07 	bl	800e0ec <osDelay>

								invert_rectangle(0, 0, 128, 32);
 80022de:	2320      	movs	r3, #32
 80022e0:	2280      	movs	r2, #128	; 0x80
 80022e2:	2100      	movs	r1, #0
 80022e4:	2000      	movs	r0, #0
 80022e6:	f001 fc75 	bl	8003bd4 <invert_rectangle>
								oled_update();
 80022ea:	f001 ff09 	bl	8004100 <oled_update>
								osDelay(300);
 80022ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022f2:	f00b fefb 	bl	800e0ec <osDelay>

								clear();
 80022f6:	f001 fc9b 	bl	8003c30 <clear>
								oled_update();
 80022fa:	f001 ff01 	bl	8004100 <oled_update>

								status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 80022fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	2301      	movs	r3, #1
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	f107 030b 	add.w	r3, r7, #11
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2301      	movs	r3, #1
 8002310:	2200      	movs	r2, #0
 8002312:	21d0      	movs	r1, #208	; 0xd0
 8002314:	486a      	ldr	r0, [pc, #424]	; (80024c0 <StartOLED_RTC+0x3b4>)
 8002316:	f004 fc5b 	bl	8006bd0 <HAL_I2C_Mem_Read>
 800231a:	4603      	mov	r3, r0
 800231c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							while(status != HAL_OK)							// If ERROR
 8002320:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1b4      	bne.n	8002292 <StartOLED_RTC+0x186>
							}
							clear();
 8002328:	f001 fc82 	bl	8003c30 <clear>
 800232c:	e26b      	b.n	8002806 <StartOLED_RTC+0x6fa>
						}

						else	// If all DS3231 detected, read time and date
						{
							ds3231_read(DS3231_REGISTER_SECONDS_DEFAULT, &seconds);
 800232e:	f107 0317 	add.w	r3, r7, #23
 8002332:	4619      	mov	r1, r3
 8002334:	2000      	movs	r0, #0
 8002336:	f7fe f9bf 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_MINUTES_DEFAULT, &minutes);
 800233a:	f107 0316 	add.w	r3, r7, #22
 800233e:	4619      	mov	r1, r3
 8002340:	2001      	movs	r0, #1
 8002342:	f7fe f9b9 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_HOURS_DEFAULT, &hours);
 8002346:	f107 0315 	add.w	r3, r7, #21
 800234a:	4619      	mov	r1, r3
 800234c:	2002      	movs	r0, #2
 800234e:	f7fe f9b3 	bl	80006b8 <ds3231_read>

							ds3231_read(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &day);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	2003      	movs	r0, #3
 800235a:	f7fe f9ad 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_DATE_DEFAULT, &date_day);
 800235e:	f107 0313 	add.w	r3, r7, #19
 8002362:	4619      	mov	r1, r3
 8002364:	2004      	movs	r0, #4
 8002366:	f7fe f9a7 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_MONTH_DEFAULT, &mounth);
 800236a:	f107 0312 	add.w	r3, r7, #18
 800236e:	4619      	mov	r1, r3
 8002370:	2005      	movs	r0, #5
 8002372:	f7fe f9a1 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_YEAR_DEFAULT, &year);
 8002376:	f107 0311 	add.w	r3, r7, #17
 800237a:	4619      	mov	r1, r3
 800237c:	2006      	movs	r0, #6
 800237e:	f7fe f99b 	bl	80006b8 <ds3231_read>

							// Convert in string
							// Print minutes on OLED
							if(hours < 10)
 8002382:	7d7b      	ldrb	r3, [r7, #21]
 8002384:	2b09      	cmp	r3, #9
 8002386:	d835      	bhi.n	80023f4 <StartOLED_RTC+0x2e8>
							{
								memset(time_buf, 0, sizeof(time_buf));
 8002388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238c:	220a      	movs	r2, #10
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f00f fb3f 	bl	8011a14 <memset>
								sprintf(time_buf, "%c", '0');
 8002396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239a:	2230      	movs	r2, #48	; 0x30
 800239c:	494a      	ldr	r1, [pc, #296]	; (80024c8 <StartOLED_RTC+0x3bc>)
 800239e:	4618      	mov	r0, r3
 80023a0:	f00f fc64 	bl	8011c6c <siprintf>
								sprintf(time_buf_2, "%d", hours);
 80023a4:	7d7b      	ldrb	r3, [r7, #21]
 80023a6:	461a      	mov	r2, r3
 80023a8:	f107 0318 	add.w	r3, r7, #24
 80023ac:	4947      	ldr	r1, [pc, #284]	; (80024cc <StartOLED_RTC+0x3c0>)
 80023ae:	4618      	mov	r0, r3
 80023b0:	f00f fc5c 	bl	8011c6c <siprintf>
								strcat(time_buf, time_buf_2);
 80023b4:	f107 0218 	add.w	r2, r7, #24
 80023b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f00f fc74 	bl	8011cac <strcat>
								strcat(time, time_buf);
 80023c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80023c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f00f fc6c 	bl	8011cac <strcat>
								strcat(time, ":");
 80023d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fd ff03 	bl	80001e4 <strlen>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023e6:	4413      	add	r3, r2
 80023e8:	4939      	ldr	r1, [pc, #228]	; (80024d0 <StartOLED_RTC+0x3c4>)
 80023ea:	461a      	mov	r2, r3
 80023ec:	460b      	mov	r3, r1
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	8013      	strh	r3, [r2, #0]
 80023f2:	e025      	b.n	8002440 <StartOLED_RTC+0x334>
							}
							else
							{
								sprintf(time_buf, "%d", hours);
 80023f4:	7d7b      	ldrb	r3, [r7, #21]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fc:	4933      	ldr	r1, [pc, #204]	; (80024cc <StartOLED_RTC+0x3c0>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f00f fc34 	bl	8011c6c <siprintf>
								strcat(time, time_buf);
 8002404:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002408:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f00f fc4c 	bl	8011cac <strcat>
								strcat(time, ":");
 8002414:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002418:	4618      	mov	r0, r3
 800241a:	f7fd fee3 	bl	80001e4 <strlen>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002426:	4413      	add	r3, r2
 8002428:	4929      	ldr	r1, [pc, #164]	; (80024d0 <StartOLED_RTC+0x3c4>)
 800242a:	461a      	mov	r2, r3
 800242c:	460b      	mov	r3, r1
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	8013      	strh	r3, [r2, #0]
								memset(time_buf, 0, sizeof(time_buf));
 8002432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002436:	220a      	movs	r2, #10
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f00f faea 	bl	8011a14 <memset>
							}

							// Print minutes on OLED
							if(minutes < 10)
 8002440:	7dbb      	ldrb	r3, [r7, #22]
 8002442:	2b09      	cmp	r3, #9
 8002444:	d846      	bhi.n	80024d4 <StartOLED_RTC+0x3c8>
							{
								memset(time_buf, 0, sizeof(time_buf));
 8002446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244a:	220a      	movs	r2, #10
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f00f fae0 	bl	8011a14 <memset>
								sprintf(time_buf, "%c", '0');
 8002454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002458:	2230      	movs	r2, #48	; 0x30
 800245a:	491b      	ldr	r1, [pc, #108]	; (80024c8 <StartOLED_RTC+0x3bc>)
 800245c:	4618      	mov	r0, r3
 800245e:	f00f fc05 	bl	8011c6c <siprintf>
								sprintf(time_buf_2, "%d", minutes);
 8002462:	7dbb      	ldrb	r3, [r7, #22]
 8002464:	461a      	mov	r2, r3
 8002466:	f107 0318 	add.w	r3, r7, #24
 800246a:	4918      	ldr	r1, [pc, #96]	; (80024cc <StartOLED_RTC+0x3c0>)
 800246c:	4618      	mov	r0, r3
 800246e:	f00f fbfd 	bl	8011c6c <siprintf>
								strcat(time_buf, time_buf_2);
 8002472:	f107 0218 	add.w	r2, r7, #24
 8002476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f00f fc15 	bl	8011cac <strcat>
								strcat(time, time_buf);
 8002482:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002486:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f00f fc0d 	bl	8011cac <strcat>
								strcat(time, ":");
 8002492:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd fea4 	bl	80001e4 <strlen>
 800249c:	4603      	mov	r3, r0
 800249e:	461a      	mov	r2, r3
 80024a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024a4:	4413      	add	r3, r2
 80024a6:	490a      	ldr	r1, [pc, #40]	; (80024d0 <StartOLED_RTC+0x3c4>)
 80024a8:	461a      	mov	r2, r3
 80024aa:	460b      	mov	r3, r1
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	8013      	strh	r3, [r2, #0]
 80024b0:	e036      	b.n	8002520 <StartOLED_RTC+0x414>
 80024b2:	bf00      	nop
 80024b4:	20004c14 	.word	0x20004c14
 80024b8:	200000dc 	.word	0x200000dc
 80024bc:	080127b0 	.word	0x080127b0
 80024c0:	20004b24 	.word	0x20004b24
 80024c4:	080127b8 	.word	0x080127b8
 80024c8:	080127c4 	.word	0x080127c4
 80024cc:	080127c8 	.word	0x080127c8
 80024d0:	080127cc 	.word	0x080127cc
							}
							else
							{
								sprintf(time_buf, "%d", minutes);
 80024d4:	7dbb      	ldrb	r3, [r7, #22]
 80024d6:	461a      	mov	r2, r3
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	49d7      	ldr	r1, [pc, #860]	; (800283c <StartOLED_RTC+0x730>)
 80024de:	4618      	mov	r0, r3
 80024e0:	f00f fbc4 	bl	8011c6c <siprintf>
								strcat(time, time_buf);
 80024e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80024e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f00f fbdc 	bl	8011cac <strcat>
								strcat(time, ":");
 80024f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd fe73 	bl	80001e4 <strlen>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002506:	4413      	add	r3, r2
 8002508:	49cd      	ldr	r1, [pc, #820]	; (8002840 <StartOLED_RTC+0x734>)
 800250a:	461a      	mov	r2, r3
 800250c:	460b      	mov	r3, r1
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	8013      	strh	r3, [r2, #0]
								memset(time_buf, 0, sizeof(time_buf));
 8002512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002516:	220a      	movs	r2, #10
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f00f fa7a 	bl	8011a14 <memset>
							}

							// Print seconds on OLED
							if(seconds == 0)
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <StartOLED_RTC+0x422>
							{
								clear();
 8002526:	f001 fb83 	bl	8003c30 <clear>
								oled_update();
 800252a:	f001 fde9 	bl	8004100 <oled_update>
							}
							if(seconds < 10)
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	2b09      	cmp	r3, #9
 8002532:	d826      	bhi.n	8002582 <StartOLED_RTC+0x476>
							{
								memset(time_buf, 0, sizeof(time_buf));
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	220a      	movs	r2, #10
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f00f fa69 	bl	8011a14 <memset>
								sprintf(time_buf, "%c", '0');
 8002542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002546:	2230      	movs	r2, #48	; 0x30
 8002548:	49be      	ldr	r1, [pc, #760]	; (8002844 <StartOLED_RTC+0x738>)
 800254a:	4618      	mov	r0, r3
 800254c:	f00f fb8e 	bl	8011c6c <siprintf>
								sprintf(time_buf_2, "%d", seconds);
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	461a      	mov	r2, r3
 8002554:	f107 0318 	add.w	r3, r7, #24
 8002558:	49b8      	ldr	r1, [pc, #736]	; (800283c <StartOLED_RTC+0x730>)
 800255a:	4618      	mov	r0, r3
 800255c:	f00f fb86 	bl	8011c6c <siprintf>
								strcat(time_buf, time_buf_2);
 8002560:	f107 0218 	add.w	r2, r7, #24
 8002564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f00f fb9e 	bl	8011cac <strcat>
								strcat(time, time_buf);
 8002570:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002574:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f00f fb96 	bl	8011cac <strcat>
 8002580:	e016      	b.n	80025b0 <StartOLED_RTC+0x4a4>
							}
							else
							{
								sprintf(time_buf, "%d", seconds);
 8002582:	7dfb      	ldrb	r3, [r7, #23]
 8002584:	461a      	mov	r2, r3
 8002586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258a:	49ac      	ldr	r1, [pc, #688]	; (800283c <StartOLED_RTC+0x730>)
 800258c:	4618      	mov	r0, r3
 800258e:	f00f fb6d 	bl	8011c6c <siprintf>
								strcat(time, time_buf);
 8002592:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002596:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f00f fb85 	bl	8011cac <strcat>
								memset(time_buf, 0, sizeof(time_buf));
 80025a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a6:	220a      	movs	r2, #10
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f00f fa32 	bl	8011a14 <memset>
							}

							uint8_t second_line = seconds*2;
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
							line_h(5, second_line, 19, 2, add);
 80025b8:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 80025bc:	2301      	movs	r3, #1
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2302      	movs	r3, #2
 80025c2:	2213      	movs	r2, #19
 80025c4:	2005      	movs	r0, #5
 80025c6:	f001 fb5b 	bl	8003c80 <line_h>
	//						line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode);
							//invert_rectangle(5, 15, second_line, 5);

							// Print date
							sprintf(time_buf, "%d", date_day);
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	461a      	mov	r2, r3
 80025ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d2:	499a      	ldr	r1, [pc, #616]	; (800283c <StartOLED_RTC+0x730>)
 80025d4:	4618      	mov	r0, r3
 80025d6:	f00f fb49 	bl	8011c6c <siprintf>
							strcat(date, time_buf);
 80025da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f00f fb61 	bl	8011cac <strcat>
							strcat(date, ".");
 80025ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd fdf8 	bl	80001e4 <strlen>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025fc:	4413      	add	r3, r2
 80025fe:	4992      	ldr	r1, [pc, #584]	; (8002848 <StartOLED_RTC+0x73c>)
 8002600:	461a      	mov	r2, r3
 8002602:	460b      	mov	r3, r1
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 8002608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260c:	220a      	movs	r2, #10
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f00f f9ff 	bl	8011a14 <memset>

							sprintf(time_buf, "%d", mounth);
 8002616:	7cbb      	ldrb	r3, [r7, #18]
 8002618:	461a      	mov	r2, r3
 800261a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261e:	4987      	ldr	r1, [pc, #540]	; (800283c <StartOLED_RTC+0x730>)
 8002620:	4618      	mov	r0, r3
 8002622:	f00f fb23 	bl	8011c6c <siprintf>
							strcat(date, time_buf);
 8002626:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800262a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f00f fb3b 	bl	8011cac <strcat>
							strcat(date, ".");
 8002636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd fdd2 	bl	80001e4 <strlen>
 8002640:	4603      	mov	r3, r0
 8002642:	461a      	mov	r2, r3
 8002644:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002648:	4413      	add	r3, r2
 800264a:	497f      	ldr	r1, [pc, #508]	; (8002848 <StartOLED_RTC+0x73c>)
 800264c:	461a      	mov	r2, r3
 800264e:	460b      	mov	r3, r1
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 8002654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002658:	220a      	movs	r2, #10
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f00f f9d9 	bl	8011a14 <memset>

							sprintf(time_buf, "%d", year);
 8002662:	7c7b      	ldrb	r3, [r7, #17]
 8002664:	461a      	mov	r2, r3
 8002666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266a:	4974      	ldr	r1, [pc, #464]	; (800283c <StartOLED_RTC+0x730>)
 800266c:	4618      	mov	r0, r3
 800266e:	f00f fafd 	bl	8011c6c <siprintf>
							strcat(date, "20");
 8002672:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd fdb4 	bl	80001e4 <strlen>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002684:	4413      	add	r3, r2
 8002686:	4a71      	ldr	r2, [pc, #452]	; (800284c <StartOLED_RTC+0x740>)
 8002688:	8811      	ldrh	r1, [r2, #0]
 800268a:	7892      	ldrb	r2, [r2, #2]
 800268c:	8019      	strh	r1, [r3, #0]
 800268e:	709a      	strb	r2, [r3, #2]
							strcat(date, time_buf);
 8002690:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002694:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f00f fb06 	bl	8011cac <strcat>
							memset(time_buf, 0, sizeof(time_buf));
 80026a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a4:	220a      	movs	r2, #10
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f00f f9b3 	bl	8011a14 <memset>

							// day
							switch (day)
 80026ae:	7d3b      	ldrb	r3, [r7, #20]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	f200 8093 	bhi.w	80027de <StartOLED_RTC+0x6d2>
 80026b8:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <StartOLED_RTC+0x5b4>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026dd 	.word	0x080026dd
 80026c4:	080026ff 	.word	0x080026ff
 80026c8:	08002725 	.word	0x08002725
 80026cc:	0800274f 	.word	0x0800274f
 80026d0:	08002775 	.word	0x08002775
 80026d4:	08002797 	.word	0x08002797
 80026d8:	080027bd 	.word	0x080027bd
							{
								case 1:
									strcat(date, " Monday");
 80026dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd fd7f 	bl	80001e4 <strlen>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026ee:	4413      	add	r3, r2
 80026f0:	4957      	ldr	r1, [pc, #348]	; (8002850 <StartOLED_RTC+0x744>)
 80026f2:	461a      	mov	r2, r3
 80026f4:	460b      	mov	r3, r1
 80026f6:	cb03      	ldmia	r3!, {r0, r1}
 80026f8:	6010      	str	r0, [r2, #0]
 80026fa:	6051      	str	r1, [r2, #4]
									break;
 80026fc:	e06f      	b.n	80027de <StartOLED_RTC+0x6d2>
								case 2:
									strcat(date, " Tuesday");
 80026fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002702:	4618      	mov	r0, r3
 8002704:	f7fd fd6e 	bl	80001e4 <strlen>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002710:	4413      	add	r3, r2
 8002712:	4950      	ldr	r1, [pc, #320]	; (8002854 <StartOLED_RTC+0x748>)
 8002714:	461a      	mov	r2, r3
 8002716:	460b      	mov	r3, r1
 8002718:	cb03      	ldmia	r3!, {r0, r1}
 800271a:	6010      	str	r0, [r2, #0]
 800271c:	6051      	str	r1, [r2, #4]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	7213      	strb	r3, [r2, #8]
									break;
 8002722:	e05c      	b.n	80027de <StartOLED_RTC+0x6d2>
								case 3:
									strcat(date, " Wednesday");
 8002724:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fd5b 	bl	80001e4 <strlen>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002736:	4413      	add	r3, r2
 8002738:	4947      	ldr	r1, [pc, #284]	; (8002858 <StartOLED_RTC+0x74c>)
 800273a:	461a      	mov	r2, r3
 800273c:	460b      	mov	r3, r1
 800273e:	cb03      	ldmia	r3!, {r0, r1}
 8002740:	6010      	str	r0, [r2, #0]
 8002742:	6051      	str	r1, [r2, #4]
 8002744:	8819      	ldrh	r1, [r3, #0]
 8002746:	789b      	ldrb	r3, [r3, #2]
 8002748:	8111      	strh	r1, [r2, #8]
 800274a:	7293      	strb	r3, [r2, #10]
									break;
 800274c:	e047      	b.n	80027de <StartOLED_RTC+0x6d2>
								case 4:
									strcat(date, " Thursday");
 800274e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd fd46 	bl	80001e4 <strlen>
 8002758:	4603      	mov	r3, r0
 800275a:	461a      	mov	r2, r3
 800275c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002760:	4413      	add	r3, r2
 8002762:	493e      	ldr	r1, [pc, #248]	; (800285c <StartOLED_RTC+0x750>)
 8002764:	461a      	mov	r2, r3
 8002766:	460b      	mov	r3, r1
 8002768:	cb03      	ldmia	r3!, {r0, r1}
 800276a:	6010      	str	r0, [r2, #0]
 800276c:	6051      	str	r1, [r2, #4]
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	8113      	strh	r3, [r2, #8]
									break;
 8002772:	e034      	b.n	80027de <StartOLED_RTC+0x6d2>
								case 5:
									strcat(date, " Friday");
 8002774:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd fd33 	bl	80001e4 <strlen>
 800277e:	4603      	mov	r3, r0
 8002780:	461a      	mov	r2, r3
 8002782:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002786:	4413      	add	r3, r2
 8002788:	4935      	ldr	r1, [pc, #212]	; (8002860 <StartOLED_RTC+0x754>)
 800278a:	461a      	mov	r2, r3
 800278c:	460b      	mov	r3, r1
 800278e:	cb03      	ldmia	r3!, {r0, r1}
 8002790:	6010      	str	r0, [r2, #0]
 8002792:	6051      	str	r1, [r2, #4]
									break;
 8002794:	e023      	b.n	80027de <StartOLED_RTC+0x6d2>
								case 6:
									strcat(date, " Saturday");
 8002796:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fd22 	bl	80001e4 <strlen>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027a8:	4413      	add	r3, r2
 80027aa:	492e      	ldr	r1, [pc, #184]	; (8002864 <StartOLED_RTC+0x758>)
 80027ac:	461a      	mov	r2, r3
 80027ae:	460b      	mov	r3, r1
 80027b0:	cb03      	ldmia	r3!, {r0, r1}
 80027b2:	6010      	str	r0, [r2, #0]
 80027b4:	6051      	str	r1, [r2, #4]
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	8113      	strh	r3, [r2, #8]
									break;
 80027ba:	e010      	b.n	80027de <StartOLED_RTC+0x6d2>
								case 7:
									strcat(date, " Sunday");
 80027bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fd0f 	bl	80001e4 <strlen>
 80027c6:	4603      	mov	r3, r0
 80027c8:	461a      	mov	r2, r3
 80027ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ce:	4413      	add	r3, r2
 80027d0:	4925      	ldr	r1, [pc, #148]	; (8002868 <StartOLED_RTC+0x75c>)
 80027d2:	461a      	mov	r2, r3
 80027d4:	460b      	mov	r3, r1
 80027d6:	cb03      	ldmia	r3!, {r0, r1}
 80027d8:	6010      	str	r0, [r2, #0]
 80027da:	6051      	str	r1, [r2, #4]
									break;
 80027dc:	bf00      	nop
							}

							graphics_text(40, 0, 3, time);
 80027de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027e2:	2203      	movs	r2, #3
 80027e4:	2100      	movs	r1, #0
 80027e6:	2028      	movs	r0, #40	; 0x28
 80027e8:	f001 fbd6 	bl	8003f98 <graphics_text>
							graphics_text(0, 24, 2, date);
 80027ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027f0:	2202      	movs	r2, #2
 80027f2:	2118      	movs	r1, #24
 80027f4:	2000      	movs	r0, #0
 80027f6:	f001 fbcf 	bl	8003f98 <graphics_text>
							oled_update();
 80027fa:	f001 fc81 	bl	8004100 <oled_update>

							osDelay(1000);
 80027fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002802:	f00b fc73 	bl	800e0ec <osDelay>
					while(klick == 0)
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <StartOLED_RTC+0x760>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f43f ad0b 	beq.w	8002226 <StartOLED_RTC+0x11a>
						}
					}
			  		break;
 8002810:	f000 bccd 	b.w	80031ae <StartOLED_RTC+0x10a2>


				case 1:
					// Set yer
					graphics_text(0, 0, 1, "   SET:");
 8002814:	4b16      	ldr	r3, [pc, #88]	; (8002870 <StartOLED_RTC+0x764>)
 8002816:	2201      	movs	r2, #1
 8002818:	2100      	movs	r1, #0
 800281a:	2000      	movs	r0, #0
 800281c:	f001 fbbc 	bl	8003f98 <graphics_text>
					graphics_text(0, 8, 1, "YEAR   ");
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <StartOLED_RTC+0x768>)
 8002822:	2201      	movs	r2, #1
 8002824:	2108      	movs	r1, #8
 8002826:	2000      	movs	r0, #0
 8002828:	f001 fbb6 	bl	8003f98 <graphics_text>
					oled_update();
 800282c:	f001 fc68 	bl	8004100 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);								// Start count encoder from 0
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <StartOLED_RTC+0x76c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2200      	movs	r2, #0
 8002836:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 1)
 8002838:	e071      	b.n	800291e <StartOLED_RTC+0x812>
 800283a:	bf00      	nop
 800283c:	080127c8 	.word	0x080127c8
 8002840:	080127cc 	.word	0x080127cc
 8002844:	080127c4 	.word	0x080127c4
 8002848:	080127d0 	.word	0x080127d0
 800284c:	080127d4 	.word	0x080127d4
 8002850:	080127d8 	.word	0x080127d8
 8002854:	080127e0 	.word	0x080127e0
 8002858:	080127ec 	.word	0x080127ec
 800285c:	080127f8 	.word	0x080127f8
 8002860:	08012804 	.word	0x08012804
 8002864:	0801280c 	.word	0x0801280c
 8002868:	08012818 	.word	0x08012818
 800286c:	200000dc 	.word	0x200000dc
 8002870:	08012820 	.word	0x08012820
 8002874:	08012828 	.word	0x08012828
 8002878:	20004c14 	.word	0x20004c14
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 800287c:	4b99      	ldr	r3, [pc, #612]	; (8002ae4 <StartOLED_RTC+0x9d8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	461a      	mov	r2, r3
 8002884:	4b98      	ldr	r3, [pc, #608]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 8002886:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002888:	4b97      	ldr	r3, [pc, #604]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	b29b      	uxth	r3, r3
 8002890:	0fda      	lsrs	r2, r3, #31
 8002892:	4413      	add	r3, r2
 8002894:	105b      	asrs	r3, r3, #1
 8002896:	425b      	negs	r3, r3
 8002898:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800289c:	337f      	adds	r3, #127	; 0x7f
 800289e:	4a92      	ldr	r2, [pc, #584]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80028a0:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 80028a2:	4b91      	ldr	r3, [pc, #580]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d038      	beq.n	800291e <StartOLED_RTC+0x812>
						{
							prevCounter = currCounter;
 80028ac:	4b8e      	ldr	r3, [pc, #568]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
							if(currCounter > 100)									// Encoder count from 0 to 100
 80028b2:	4b8d      	ldr	r3, [pc, #564]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	dd06      	ble.n	80028c8 <StartOLED_RTC+0x7bc>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 80028ba:	4b8a      	ldr	r3, [pc, #552]	; (8002ae4 <StartOLED_RTC+0x9d8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2200      	movs	r2, #0
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 80028c2:	4b89      	ldr	r3, [pc, #548]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 80028c8:	4b87      	ldr	r3, [pc, #540]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da06      	bge.n	80028de <StartOLED_RTC+0x7d2>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 80028d0:	4b84      	ldr	r3, [pc, #528]	; (8002ae4 <StartOLED_RTC+0x9d8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2200      	movs	r2, #0
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 80028d8:	4b83      	ldr	r3, [pc, #524]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 80028de:	4b83      	ldr	r3, [pc, #524]	; (8002aec <StartOLED_RTC+0x9e0>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	2110      	movs	r1, #16
 80028e4:	2000      	movs	r0, #0
 80028e6:	f001 fb57 	bl	8003f98 <graphics_text>
							oled_update();
 80028ea:	f001 fc09 	bl	8004100 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 80028ee:	4b7e      	ldr	r3, [pc, #504]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f6:	497e      	ldr	r1, [pc, #504]	; (8002af0 <StartOLED_RTC+0x9e4>)
 80028f8:	4618      	mov	r0, r3
 80028fa:	f00f f9b7 	bl	8011c6c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 80028fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002902:	2201      	movs	r2, #1
 8002904:	2110      	movs	r1, #16
 8002906:	2000      	movs	r0, #0
 8002908:	f001 fb46 	bl	8003f98 <graphics_text>
							oled_update();
 800290c:	f001 fbf8 	bl	8004100 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002914:	220a      	movs	r2, #10
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f00f f87b 	bl	8011a14 <memset>
					while(klick == 1)
 800291e:	4b75      	ldr	r3, [pc, #468]	; (8002af4 <StartOLED_RTC+0x9e8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d0aa      	beq.n	800287c <StartOLED_RTC+0x770>
						}
					}
					if(klick == 2)
 8002926:	4b73      	ldr	r3, [pc, #460]	; (8002af4 <StartOLED_RTC+0x9e8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b02      	cmp	r3, #2
 800292c:	f040 842f 	bne.w	800318e <StartOLED_RTC+0x1082>
					{
						// write data
						ds3231_set(DS3231_REGISTER_YEAR_DEFAULT, &prevCounter);
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	4619      	mov	r1, r3
 8002936:	2006      	movs	r0, #6
 8002938:	f7fd ff7e 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 800293c:	4b6e      	ldr	r3, [pc, #440]	; (8002af8 <StartOLED_RTC+0x9ec>)
 800293e:	2201      	movs	r2, #1
 8002940:	2110      	movs	r1, #16
 8002942:	2000      	movs	r0, #0
 8002944:	f001 fb28 	bl	8003f98 <graphics_text>
						oled_update();
 8002948:	f001 fbda 	bl	8004100 <oled_update>

						graphics_text(0, 16, 1, "installed");
 800294c:	4b6b      	ldr	r3, [pc, #428]	; (8002afc <StartOLED_RTC+0x9f0>)
 800294e:	2201      	movs	r2, #1
 8002950:	2110      	movs	r1, #16
 8002952:	2000      	movs	r0, #0
 8002954:	f001 fb20 	bl	8003f98 <graphics_text>
						oled_update();
 8002958:	f001 fbd2 	bl	8004100 <oled_update>

						osDelay(800);
 800295c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002960:	f00b fbc4 	bl	800e0ec <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002964:	4b64      	ldr	r3, [pc, #400]	; (8002af8 <StartOLED_RTC+0x9ec>)
 8002966:	2201      	movs	r2, #1
 8002968:	2110      	movs	r1, #16
 800296a:	2000      	movs	r0, #0
 800296c:	f001 fb14 	bl	8003f98 <graphics_text>
						oled_update();
 8002970:	f001 fbc6 	bl	8004100 <oled_update>

						klick = 3;
 8002974:	4b5f      	ldr	r3, [pc, #380]	; (8002af4 <StartOLED_RTC+0x9e8>)
 8002976:	2203      	movs	r2, #3
 8002978:	601a      	str	r2, [r3, #0]
					}
					break;
 800297a:	f000 bc08 	b.w	800318e <StartOLED_RTC+0x1082>

				case 3:
					// set month
					graphics_text(0, 8, 1, "MONTH");
 800297e:	4b60      	ldr	r3, [pc, #384]	; (8002b00 <StartOLED_RTC+0x9f4>)
 8002980:	2201      	movs	r2, #1
 8002982:	2108      	movs	r1, #8
 8002984:	2000      	movs	r0, #0
 8002986:	f001 fb07 	bl	8003f98 <graphics_text>
					oled_update();
 800298a:	f001 fbb9 	bl	8004100 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 800298e:	4b55      	ldr	r3, [pc, #340]	; (8002ae4 <StartOLED_RTC+0x9d8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
					currCounter = 1;
 8002996:	4b54      	ldr	r3, [pc, #336]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]

					while(klick == 3)
 800299c:	e050      	b.n	8002a40 <StartOLED_RTC+0x934>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 800299e:	4b51      	ldr	r3, [pc, #324]	; (8002ae4 <StartOLED_RTC+0x9d8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80029a8:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80029aa:	4b4f      	ldr	r3, [pc, #316]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	0fda      	lsrs	r2, r3, #31
 80029b4:	4413      	add	r3, r2
 80029b6:	105b      	asrs	r3, r3, #1
 80029b8:	425b      	negs	r3, r3
 80029ba:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80029be:	337f      	adds	r3, #127	; 0x7f
 80029c0:	4a49      	ldr	r2, [pc, #292]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80029c2:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 80029c4:	4b48      	ldr	r3, [pc, #288]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d038      	beq.n	8002a40 <StartOLED_RTC+0x934>
						{
							prevCounter = currCounter;
 80029ce:	4b46      	ldr	r3, [pc, #280]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

							if(currCounter > 12)
 80029d4:	4b44      	ldr	r3, [pc, #272]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b0c      	cmp	r3, #12
 80029da:	dd06      	ble.n	80029ea <StartOLED_RTC+0x8de>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 80029dc:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <StartOLED_RTC+0x9d8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2201      	movs	r2, #1
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 80029e4:	4b40      	ldr	r3, [pc, #256]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
							}

							if(currCounter < 1)
 80029ea:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	dc06      	bgt.n	8002a00 <StartOLED_RTC+0x8f4>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 80029f2:	4b3c      	ldr	r3, [pc, #240]	; (8002ae4 <StartOLED_RTC+0x9d8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2201      	movs	r2, #1
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 80029fa:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
							}


							graphics_text(0, 16, 1, "           ");
 8002a00:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <StartOLED_RTC+0x9e0>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	2110      	movs	r1, #16
 8002a06:	2000      	movs	r0, #0
 8002a08:	f001 fac6 	bl	8003f98 <graphics_text>
							oled_update();
 8002a0c:	f001 fb78 	bl	8004100 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002a10:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a18:	4935      	ldr	r1, [pc, #212]	; (8002af0 <StartOLED_RTC+0x9e4>)
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f00f f926 	bl	8011c6c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a24:	2201      	movs	r2, #1
 8002a26:	2110      	movs	r1, #16
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f001 fab5 	bl	8003f98 <graphics_text>
							oled_update();
 8002a2e:	f001 fb67 	bl	8004100 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a36:	220a      	movs	r2, #10
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f00e ffea 	bl	8011a14 <memset>
					while(klick == 3)
 8002a40:	4b2c      	ldr	r3, [pc, #176]	; (8002af4 <StartOLED_RTC+0x9e8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d0aa      	beq.n	800299e <StartOLED_RTC+0x892>

						}
					}
					if(klick == 4)
 8002a48:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <StartOLED_RTC+0x9e8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	f040 83a1 	bne.w	8003194 <StartOLED_RTC+0x1088>
					{
						if((currCounter < 1) || (currCounter > 12))
 8002a52:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	dd03      	ble.n	8002a62 <StartOLED_RTC+0x956>
 8002a5a:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <StartOLED_RTC+0x9dc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	dd05      	ble.n	8002a6e <StartOLED_RTC+0x962>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002a62:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <StartOLED_RTC+0x9d8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2201      	movs	r2, #1
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	4619      	mov	r1, r3
 8002a74:	2005      	movs	r0, #5
 8002a76:	f7fd fedf 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002a7a:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <StartOLED_RTC+0x9ec>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	2110      	movs	r1, #16
 8002a80:	2000      	movs	r0, #0
 8002a82:	f001 fa89 	bl	8003f98 <graphics_text>
						oled_update();
 8002a86:	f001 fb3b 	bl	8004100 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002a8a:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <StartOLED_RTC+0x9f0>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	2110      	movs	r1, #16
 8002a90:	2000      	movs	r0, #0
 8002a92:	f001 fa81 	bl	8003f98 <graphics_text>
						oled_update();
 8002a96:	f001 fb33 	bl	8004100 <oled_update>

						osDelay(800);
 8002a9a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002a9e:	f00b fb25 	bl	800e0ec <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <StartOLED_RTC+0x9ec>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	2110      	movs	r1, #16
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f001 fa75 	bl	8003f98 <graphics_text>
						oled_update();
 8002aae:	f001 fb27 	bl	8004100 <oled_update>

						klick = 5;
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <StartOLED_RTC+0x9e8>)
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	601a      	str	r2, [r3, #0]
					}

					break;
 8002ab8:	e36c      	b.n	8003194 <StartOLED_RTC+0x1088>

				case 5:
					// Set date

					graphics_text(0, 8, 1, "              ");
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <StartOLED_RTC+0x9f8>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	2108      	movs	r1, #8
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f001 fa69 	bl	8003f98 <graphics_text>
					oled_update();
 8002ac6:	f001 fb1b 	bl	8004100 <oled_update>
					graphics_text(0, 8, 1, "DATE");
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <StartOLED_RTC+0x9fc>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	2108      	movs	r1, #8
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f001 fa61 	bl	8003f98 <graphics_text>
					oled_update();
 8002ad6:	f001 fb13 	bl	8004100 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 8002ada:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <StartOLED_RTC+0x9d8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 5)
 8002ae2:	e064      	b.n	8002bae <StartOLED_RTC+0xaa2>
 8002ae4:	20004c14 	.word	0x20004c14
 8002ae8:	200000d8 	.word	0x200000d8
 8002aec:	08012830 	.word	0x08012830
 8002af0:	080127c8 	.word	0x080127c8
 8002af4:	200000dc 	.word	0x200000dc
 8002af8:	0801283c 	.word	0x0801283c
 8002afc:	08012850 	.word	0x08012850
 8002b00:	0801285c 	.word	0x0801285c
 8002b04:	08012864 	.word	0x08012864
 8002b08:	08012874 	.word	0x08012874
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002b0c:	4ba2      	ldr	r3, [pc, #648]	; (8002d98 <StartOLED_RTC+0xc8c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	461a      	mov	r2, r3
 8002b14:	4ba1      	ldr	r3, [pc, #644]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002b16:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002b18:	4ba0      	ldr	r3, [pc, #640]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	0fda      	lsrs	r2, r3, #31
 8002b22:	4413      	add	r3, r2
 8002b24:	105b      	asrs	r3, r3, #1
 8002b26:	425b      	negs	r3, r3
 8002b28:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002b2c:	337f      	adds	r3, #127	; 0x7f
 8002b2e:	4a9b      	ldr	r2, [pc, #620]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002b30:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002b32:	4b9a      	ldr	r3, [pc, #616]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d038      	beq.n	8002bae <StartOLED_RTC+0xaa2>
						{
							prevCounter = currCounter;
 8002b3c:	4b97      	ldr	r3, [pc, #604]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]

							if(currCounter > 31)
 8002b42:	4b96      	ldr	r3, [pc, #600]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b1f      	cmp	r3, #31
 8002b48:	dd06      	ble.n	8002b58 <StartOLED_RTC+0xa4c>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8002b4a:	4b93      	ldr	r3, [pc, #588]	; (8002d98 <StartOLED_RTC+0xc8c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002b52:	4b92      	ldr	r3, [pc, #584]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 1)
 8002b58:	4b90      	ldr	r3, [pc, #576]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	dc06      	bgt.n	8002b6e <StartOLED_RTC+0xa62>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8002b60:	4b8d      	ldr	r3, [pc, #564]	; (8002d98 <StartOLED_RTC+0xc8c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2201      	movs	r2, #1
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002b68:	4b8c      	ldr	r3, [pc, #560]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8002b6e:	4b8c      	ldr	r3, [pc, #560]	; (8002da0 <StartOLED_RTC+0xc94>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	2110      	movs	r1, #16
 8002b74:	2000      	movs	r0, #0
 8002b76:	f001 fa0f 	bl	8003f98 <graphics_text>
							oled_update();
 8002b7a:	f001 fac1 	bl	8004100 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002b7e:	4b87      	ldr	r3, [pc, #540]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b86:	4987      	ldr	r1, [pc, #540]	; (8002da4 <StartOLED_RTC+0xc98>)
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f00f f86f 	bl	8011c6c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b92:	2201      	movs	r2, #1
 8002b94:	2110      	movs	r1, #16
 8002b96:	2000      	movs	r0, #0
 8002b98:	f001 f9fe 	bl	8003f98 <graphics_text>
							oled_update();
 8002b9c:	f001 fab0 	bl	8004100 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba4:	220a      	movs	r2, #10
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f00e ff33 	bl	8011a14 <memset>
					while(klick == 5)
 8002bae:	4b7e      	ldr	r3, [pc, #504]	; (8002da8 <StartOLED_RTC+0xc9c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d0aa      	beq.n	8002b0c <StartOLED_RTC+0xa00>

						}
					}
					if(klick == 6)
 8002bb6:	4b7c      	ldr	r3, [pc, #496]	; (8002da8 <StartOLED_RTC+0xc9c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	f040 82ed 	bne.w	800319a <StartOLED_RTC+0x108e>
					{
						if((currCounter < 1) || (currCounter > 32))
 8002bc0:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	dd03      	ble.n	8002bd0 <StartOLED_RTC+0xac4>
 8002bc8:	4b74      	ldr	r3, [pc, #464]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	dd05      	ble.n	8002bdc <StartOLED_RTC+0xad0>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002bd0:	4b71      	ldr	r3, [pc, #452]	; (8002d98 <StartOLED_RTC+0xc8c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_DATE_DEFAULT, &prevCounter);
 8002bdc:	f107 030c 	add.w	r3, r7, #12
 8002be0:	4619      	mov	r1, r3
 8002be2:	2004      	movs	r0, #4
 8002be4:	f7fd fe28 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002be8:	4b70      	ldr	r3, [pc, #448]	; (8002dac <StartOLED_RTC+0xca0>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	2110      	movs	r1, #16
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f001 f9d2 	bl	8003f98 <graphics_text>
						oled_update();
 8002bf4:	f001 fa84 	bl	8004100 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002bf8:	4b6d      	ldr	r3, [pc, #436]	; (8002db0 <StartOLED_RTC+0xca4>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	2110      	movs	r1, #16
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f001 f9ca 	bl	8003f98 <graphics_text>
						oled_update();
 8002c04:	f001 fa7c 	bl	8004100 <oled_update>

						osDelay(800);
 8002c08:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002c0c:	f00b fa6e 	bl	800e0ec <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002c10:	4b66      	ldr	r3, [pc, #408]	; (8002dac <StartOLED_RTC+0xca0>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	2110      	movs	r1, #16
 8002c16:	2000      	movs	r0, #0
 8002c18:	f001 f9be 	bl	8003f98 <graphics_text>
						oled_update();
 8002c1c:	f001 fa70 	bl	8004100 <oled_update>

						klick = 7;
 8002c20:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <StartOLED_RTC+0xc9c>)
 8002c22:	2207      	movs	r2, #7
 8002c24:	601a      	str	r2, [r3, #0]
					}

					break;
 8002c26:	e2b8      	b.n	800319a <StartOLED_RTC+0x108e>

				case 7:
					// Set day of week

					graphics_text(0, 8, 1, "              ");
 8002c28:	4b62      	ldr	r3, [pc, #392]	; (8002db4 <StartOLED_RTC+0xca8>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	2108      	movs	r1, #8
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f001 f9b2 	bl	8003f98 <graphics_text>
					oled_update();
 8002c34:	f001 fa64 	bl	8004100 <oled_update>
					graphics_text(0, 8, 1, "DAY");
 8002c38:	4b5f      	ldr	r3, [pc, #380]	; (8002db8 <StartOLED_RTC+0xcac>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	2108      	movs	r1, #8
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f001 f9aa 	bl	8003f98 <graphics_text>
					oled_update();
 8002c44:	f001 fa5c 	bl	8004100 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002c48:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <StartOLED_RTC+0xc8c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 7)
 8002c50:	e050      	b.n	8002cf4 <StartOLED_RTC+0xbe8>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002c52:	4b51      	ldr	r3, [pc, #324]	; (8002d98 <StartOLED_RTC+0xc8c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b50      	ldr	r3, [pc, #320]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002c5c:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002c5e:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	0fda      	lsrs	r2, r3, #31
 8002c68:	4413      	add	r3, r2
 8002c6a:	105b      	asrs	r3, r3, #1
 8002c6c:	425b      	negs	r3, r3
 8002c6e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002c72:	337f      	adds	r3, #127	; 0x7f
 8002c74:	4a49      	ldr	r2, [pc, #292]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002c76:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002c78:	4b48      	ldr	r3, [pc, #288]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d038      	beq.n	8002cf4 <StartOLED_RTC+0xbe8>
						{
							prevCounter = currCounter;
 8002c82:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]
							if(currCounter > 7)
 8002c88:	4b44      	ldr	r3, [pc, #272]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b07      	cmp	r3, #7
 8002c8e:	dd06      	ble.n	8002c9e <StartOLED_RTC+0xb92>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002c90:	4b41      	ldr	r3, [pc, #260]	; (8002d98 <StartOLED_RTC+0xc8c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002c98:	4b40      	ldr	r3, [pc, #256]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 1)
 8002c9e:	4b3f      	ldr	r3, [pc, #252]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	dc06      	bgt.n	8002cb4 <StartOLED_RTC+0xba8>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002ca6:	4b3c      	ldr	r3, [pc, #240]	; (8002d98 <StartOLED_RTC+0xc8c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2201      	movs	r2, #1
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002cae:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8002cb4:	4b3a      	ldr	r3, [pc, #232]	; (8002da0 <StartOLED_RTC+0xc94>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	2110      	movs	r1, #16
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f001 f96c 	bl	8003f98 <graphics_text>
							oled_update();
 8002cc0:	f001 fa1e 	bl	8004100 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002cc4:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ccc:	4935      	ldr	r1, [pc, #212]	; (8002da4 <StartOLED_RTC+0xc98>)
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f00e ffcc 	bl	8011c6c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd8:	2201      	movs	r2, #1
 8002cda:	2110      	movs	r1, #16
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f001 f95b 	bl	8003f98 <graphics_text>
							oled_update();
 8002ce2:	f001 fa0d 	bl	8004100 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cea:	220a      	movs	r2, #10
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f00e fe90 	bl	8011a14 <memset>
					while(klick == 7)
 8002cf4:	4b2c      	ldr	r3, [pc, #176]	; (8002da8 <StartOLED_RTC+0xc9c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b07      	cmp	r3, #7
 8002cfa:	d0aa      	beq.n	8002c52 <StartOLED_RTC+0xb46>

						}
					}
					if(klick == 8)
 8002cfc:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <StartOLED_RTC+0xc9c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	f040 824d 	bne.w	80031a0 <StartOLED_RTC+0x1094>
					{
						if((currCounter < 1) || (currCounter > 7))
 8002d06:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	dd03      	ble.n	8002d16 <StartOLED_RTC+0xc0a>
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <StartOLED_RTC+0xc90>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b07      	cmp	r3, #7
 8002d14:	dd05      	ble.n	8002d22 <StartOLED_RTC+0xc16>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <StartOLED_RTC+0xc8c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &prevCounter);
 8002d22:	f107 030c 	add.w	r3, r7, #12
 8002d26:	4619      	mov	r1, r3
 8002d28:	2003      	movs	r0, #3
 8002d2a:	f7fd fd85 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002d2e:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <StartOLED_RTC+0xca0>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	2110      	movs	r1, #16
 8002d34:	2000      	movs	r0, #0
 8002d36:	f001 f92f 	bl	8003f98 <graphics_text>
						oled_update();
 8002d3a:	f001 f9e1 	bl	8004100 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002d3e:	4b1c      	ldr	r3, [pc, #112]	; (8002db0 <StartOLED_RTC+0xca4>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	2110      	movs	r1, #16
 8002d44:	2000      	movs	r0, #0
 8002d46:	f001 f927 	bl	8003f98 <graphics_text>
						oled_update();
 8002d4a:	f001 f9d9 	bl	8004100 <oled_update>

						osDelay(800);
 8002d4e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002d52:	f00b f9cb 	bl	800e0ec <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <StartOLED_RTC+0xca0>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	2110      	movs	r1, #16
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f001 f91b 	bl	8003f98 <graphics_text>
						oled_update();
 8002d62:	f001 f9cd 	bl	8004100 <oled_update>

						klick = 9;
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <StartOLED_RTC+0xc9c>)
 8002d68:	2209      	movs	r2, #9
 8002d6a:	601a      	str	r2, [r3, #0]
					}
					break;
 8002d6c:	e218      	b.n	80031a0 <StartOLED_RTC+0x1094>

				case 9:
					// Set hour

					graphics_text(0, 8, 1, "              ");
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <StartOLED_RTC+0xca8>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	2108      	movs	r1, #8
 8002d74:	2000      	movs	r0, #0
 8002d76:	f001 f90f 	bl	8003f98 <graphics_text>
					oled_update();
 8002d7a:	f001 f9c1 	bl	8004100 <oled_update>
					graphics_text(0, 8, 1, "HOUR");
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <StartOLED_RTC+0xcb0>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	2108      	movs	r1, #8
 8002d84:	2000      	movs	r0, #0
 8002d86:	f001 f907 	bl	8003f98 <graphics_text>
					oled_update();
 8002d8a:	f001 f9b9 	bl	8004100 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002d8e:	4b02      	ldr	r3, [pc, #8]	; (8002d98 <StartOLED_RTC+0xc8c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 9)
 8002d96:	e08d      	b.n	8002eb4 <StartOLED_RTC+0xda8>
 8002d98:	20004c14 	.word	0x20004c14
 8002d9c:	200000d8 	.word	0x200000d8
 8002da0:	08012830 	.word	0x08012830
 8002da4:	080127c8 	.word	0x080127c8
 8002da8:	200000dc 	.word	0x200000dc
 8002dac:	0801283c 	.word	0x0801283c
 8002db0:	08012850 	.word	0x08012850
 8002db4:	08012864 	.word	0x08012864
 8002db8:	0801287c 	.word	0x0801287c
 8002dbc:	08012880 	.word	0x08012880
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002dc0:	4b93      	ldr	r3, [pc, #588]	; (8003010 <StartOLED_RTC+0xf04>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4b92      	ldr	r3, [pc, #584]	; (8003014 <StartOLED_RTC+0xf08>)
 8002dca:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002dcc:	4b91      	ldr	r3, [pc, #580]	; (8003014 <StartOLED_RTC+0xf08>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	0fda      	lsrs	r2, r3, #31
 8002dd6:	4413      	add	r3, r2
 8002dd8:	105b      	asrs	r3, r3, #1
 8002dda:	425b      	negs	r3, r3
 8002ddc:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002de0:	337f      	adds	r3, #127	; 0x7f
 8002de2:	4a8c      	ldr	r2, [pc, #560]	; (8003014 <StartOLED_RTC+0xf08>)
 8002de4:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002de6:	4b8b      	ldr	r3, [pc, #556]	; (8003014 <StartOLED_RTC+0xf08>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d038      	beq.n	8002e62 <StartOLED_RTC+0xd56>
						{
							prevCounter = currCounter;
 8002df0:	4b88      	ldr	r3, [pc, #544]	; (8003014 <StartOLED_RTC+0xf08>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]
							if(currCounter > 23)
 8002df6:	4b87      	ldr	r3, [pc, #540]	; (8003014 <StartOLED_RTC+0xf08>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b17      	cmp	r3, #23
 8002dfc:	dd06      	ble.n	8002e0c <StartOLED_RTC+0xd00>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002dfe:	4b84      	ldr	r3, [pc, #528]	; (8003010 <StartOLED_RTC+0xf04>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8002e06:	4b83      	ldr	r3, [pc, #524]	; (8003014 <StartOLED_RTC+0xf08>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 8002e0c:	4b81      	ldr	r3, [pc, #516]	; (8003014 <StartOLED_RTC+0xf08>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	da06      	bge.n	8002e22 <StartOLED_RTC+0xd16>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002e14:	4b7e      	ldr	r3, [pc, #504]	; (8003010 <StartOLED_RTC+0xf04>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8002e1c:	4b7d      	ldr	r3, [pc, #500]	; (8003014 <StartOLED_RTC+0xf08>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8002e22:	4b7d      	ldr	r3, [pc, #500]	; (8003018 <StartOLED_RTC+0xf0c>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	2110      	movs	r1, #16
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f001 f8b5 	bl	8003f98 <graphics_text>
							oled_update();
 8002e2e:	f001 f967 	bl	8004100 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002e32:	4b78      	ldr	r3, [pc, #480]	; (8003014 <StartOLED_RTC+0xf08>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3a:	4978      	ldr	r1, [pc, #480]	; (800301c <StartOLED_RTC+0xf10>)
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f00e ff15 	bl	8011c6c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e46:	2201      	movs	r2, #1
 8002e48:	2110      	movs	r1, #16
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f001 f8a4 	bl	8003f98 <graphics_text>
							oled_update();
 8002e50:	f001 f956 	bl	8004100 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e58:	220a      	movs	r2, #10
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f00e fdd9 	bl	8011a14 <memset>
						}

						if(klick == 10)
 8002e62:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <StartOLED_RTC+0xf14>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b0a      	cmp	r3, #10
 8002e68:	d124      	bne.n	8002eb4 <StartOLED_RTC+0xda8>
						{
							// write data
							ds3231_set(DS3231_REGISTER_HOURS_DEFAULT, &prevCounter);
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	4619      	mov	r1, r3
 8002e70:	2002      	movs	r0, #2
 8002e72:	f7fd fce1 	bl	8000838 <ds3231_set>

							graphics_text(0, 16, 1, "                 ");
 8002e76:	4b6b      	ldr	r3, [pc, #428]	; (8003024 <StartOLED_RTC+0xf18>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f001 f88b 	bl	8003f98 <graphics_text>
							oled_update();
 8002e82:	f001 f93d 	bl	8004100 <oled_update>

							graphics_text(0, 16, 1, "installed");
 8002e86:	4b68      	ldr	r3, [pc, #416]	; (8003028 <StartOLED_RTC+0xf1c>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f001 f883 	bl	8003f98 <graphics_text>
							oled_update();
 8002e92:	f001 f935 	bl	8004100 <oled_update>

							osDelay(800);
 8002e96:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002e9a:	f00b f927 	bl	800e0ec <osDelay>

							graphics_text(0, 16, 1, "                 ");
 8002e9e:	4b61      	ldr	r3, [pc, #388]	; (8003024 <StartOLED_RTC+0xf18>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	2110      	movs	r1, #16
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f001 f877 	bl	8003f98 <graphics_text>
							oled_update();
 8002eaa:	f001 f929 	bl	8004100 <oled_update>

							klick = 11;
 8002eae:	4b5c      	ldr	r3, [pc, #368]	; (8003020 <StartOLED_RTC+0xf14>)
 8002eb0:	220b      	movs	r2, #11
 8002eb2:	601a      	str	r2, [r3, #0]
					while(klick == 9)
 8002eb4:	4b5a      	ldr	r3, [pc, #360]	; (8003020 <StartOLED_RTC+0xf14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b09      	cmp	r3, #9
 8002eba:	d081      	beq.n	8002dc0 <StartOLED_RTC+0xcb4>
						}
					}
					break;
 8002ebc:	e177      	b.n	80031ae <StartOLED_RTC+0x10a2>

				case 11:
					// Set minutes

					graphics_text(0, 8, 1, "              ");
 8002ebe:	4b5b      	ldr	r3, [pc, #364]	; (800302c <StartOLED_RTC+0xf20>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	2108      	movs	r1, #8
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f001 f867 	bl	8003f98 <graphics_text>
					oled_update();
 8002eca:	f001 f919 	bl	8004100 <oled_update>
					graphics_text(0, 8, 1, "MINUTES");
 8002ece:	4b58      	ldr	r3, [pc, #352]	; (8003030 <StartOLED_RTC+0xf24>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	2108      	movs	r1, #8
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f001 f85f 	bl	8003f98 <graphics_text>
					oled_update();
 8002eda:	f001 f911 	bl	8004100 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002ede:	4b4c      	ldr	r3, [pc, #304]	; (8003010 <StartOLED_RTC+0xf04>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 11)
 8002ee6:	e04e      	b.n	8002f86 <StartOLED_RTC+0xe7a>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002ee8:	4b49      	ldr	r3, [pc, #292]	; (8003010 <StartOLED_RTC+0xf04>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b48      	ldr	r3, [pc, #288]	; (8003014 <StartOLED_RTC+0xf08>)
 8002ef2:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002ef4:	4b47      	ldr	r3, [pc, #284]	; (8003014 <StartOLED_RTC+0xf08>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	0fda      	lsrs	r2, r3, #31
 8002efe:	4413      	add	r3, r2
 8002f00:	105b      	asrs	r3, r3, #1
 8002f02:	425b      	negs	r3, r3
 8002f04:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002f08:	337f      	adds	r3, #127	; 0x7f
 8002f0a:	4a42      	ldr	r2, [pc, #264]	; (8003014 <StartOLED_RTC+0xf08>)
 8002f0c:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002f0e:	4b41      	ldr	r3, [pc, #260]	; (8003014 <StartOLED_RTC+0xf08>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d036      	beq.n	8002f86 <StartOLED_RTC+0xe7a>
						{
							prevCounter = currCounter;
 8002f18:	4b3e      	ldr	r3, [pc, #248]	; (8003014 <StartOLED_RTC+0xf08>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
							if(currCounter > 59)
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <StartOLED_RTC+0xf08>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b3b      	cmp	r3, #59	; 0x3b
 8002f24:	dd05      	ble.n	8002f32 <StartOLED_RTC+0xe26>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002f26:	4b3a      	ldr	r3, [pc, #232]	; (8003010 <StartOLED_RTC+0xf04>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24
								prevCounter = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
							}
							if(currCounter < 0)
 8002f32:	4b38      	ldr	r3, [pc, #224]	; (8003014 <StartOLED_RTC+0xf08>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	da05      	bge.n	8002f46 <StartOLED_RTC+0xe3a>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002f3a:	4b35      	ldr	r3, [pc, #212]	; (8003010 <StartOLED_RTC+0xf04>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24
								prevCounter = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
							}

							graphics_text(0, 16, 1, "           ");
 8002f46:	4b34      	ldr	r3, [pc, #208]	; (8003018 <StartOLED_RTC+0xf0c>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	2110      	movs	r1, #16
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f001 f823 	bl	8003f98 <graphics_text>
							oled_update();
 8002f52:	f001 f8d5 	bl	8004100 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <StartOLED_RTC+0xf08>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5e:	492f      	ldr	r1, [pc, #188]	; (800301c <StartOLED_RTC+0xf10>)
 8002f60:	4618      	mov	r0, r3
 8002f62:	f00e fe83 	bl	8011c6c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	2110      	movs	r1, #16
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f001 f812 	bl	8003f98 <graphics_text>
							oled_update();
 8002f74:	f001 f8c4 	bl	8004100 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7c:	220a      	movs	r2, #10
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f00e fd47 	bl	8011a14 <memset>
					while(klick == 11)
 8002f86:	4b26      	ldr	r3, [pc, #152]	; (8003020 <StartOLED_RTC+0xf14>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b0b      	cmp	r3, #11
 8002f8c:	d0ac      	beq.n	8002ee8 <StartOLED_RTC+0xddc>
						}
					}
					if(klick == 12)
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <StartOLED_RTC+0xf14>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	f040 8107 	bne.w	80031a6 <StartOLED_RTC+0x109a>
					{
						// write data
						ds3231_set(DS3231_REGISTER_MINUTES_DEFAULT, &prevCounter);
 8002f98:	f107 030c 	add.w	r3, r7, #12
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f7fd fc4a 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <StartOLED_RTC+0xf18>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	2110      	movs	r1, #16
 8002faa:	2000      	movs	r0, #0
 8002fac:	f000 fff4 	bl	8003f98 <graphics_text>
						oled_update();
 8002fb0:	f001 f8a6 	bl	8004100 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <StartOLED_RTC+0xf1c>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	2110      	movs	r1, #16
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f000 ffec 	bl	8003f98 <graphics_text>
						oled_update();
 8002fc0:	f001 f89e 	bl	8004100 <oled_update>

						osDelay(800);
 8002fc4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002fc8:	f00b f890 	bl	800e0ec <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002fcc:	4b15      	ldr	r3, [pc, #84]	; (8003024 <StartOLED_RTC+0xf18>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	2110      	movs	r1, #16
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f000 ffe0 	bl	8003f98 <graphics_text>
						oled_update();
 8002fd8:	f001 f892 	bl	8004100 <oled_update>

						klick = 13;
 8002fdc:	4b10      	ldr	r3, [pc, #64]	; (8003020 <StartOLED_RTC+0xf14>)
 8002fde:	220d      	movs	r2, #13
 8002fe0:	601a      	str	r2, [r3, #0]
					}
					break;
 8002fe2:	e0e0      	b.n	80031a6 <StartOLED_RTC+0x109a>

				case 13:
					// Set minutes

					graphics_text(0, 8, 1, "              ");
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <StartOLED_RTC+0xf20>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	2108      	movs	r1, #8
 8002fea:	2000      	movs	r0, #0
 8002fec:	f000 ffd4 	bl	8003f98 <graphics_text>
					oled_update();
 8002ff0:	f001 f886 	bl	8004100 <oled_update>
					graphics_text(0, 8, 1, "SECONDS");
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <StartOLED_RTC+0xf28>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	2108      	movs	r1, #8
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f000 ffcc 	bl	8003f98 <graphics_text>
					oled_update();
 8003000:	f001 f87e 	bl	8004100 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003004:	4b02      	ldr	r3, [pc, #8]	; (8003010 <StartOLED_RTC+0xf04>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2200      	movs	r2, #0
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 13)
 800300c:	e065      	b.n	80030da <StartOLED_RTC+0xfce>
 800300e:	bf00      	nop
 8003010:	20004c14 	.word	0x20004c14
 8003014:	200000d8 	.word	0x200000d8
 8003018:	08012830 	.word	0x08012830
 800301c:	080127c8 	.word	0x080127c8
 8003020:	200000dc 	.word	0x200000dc
 8003024:	0801283c 	.word	0x0801283c
 8003028:	08012850 	.word	0x08012850
 800302c:	08012864 	.word	0x08012864
 8003030:	08012888 	.word	0x08012888
 8003034:	08012890 	.word	0x08012890
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8003038:	4b5e      	ldr	r3, [pc, #376]	; (80031b4 <StartOLED_RTC+0x10a8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	461a      	mov	r2, r3
 8003040:	4b5d      	ldr	r3, [pc, #372]	; (80031b8 <StartOLED_RTC+0x10ac>)
 8003042:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8003044:	4b5c      	ldr	r3, [pc, #368]	; (80031b8 <StartOLED_RTC+0x10ac>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3b01      	subs	r3, #1
 800304a:	b29b      	uxth	r3, r3
 800304c:	0fda      	lsrs	r2, r3, #31
 800304e:	4413      	add	r3, r2
 8003050:	105b      	asrs	r3, r3, #1
 8003052:	425b      	negs	r3, r3
 8003054:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003058:	337f      	adds	r3, #127	; 0x7f
 800305a:	4a57      	ldr	r2, [pc, #348]	; (80031b8 <StartOLED_RTC+0x10ac>)
 800305c:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 800305e:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <StartOLED_RTC+0x10ac>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	429a      	cmp	r2, r3
 8003066:	d038      	beq.n	80030da <StartOLED_RTC+0xfce>
						{
							prevCounter = currCounter;
 8003068:	4b53      	ldr	r3, [pc, #332]	; (80031b8 <StartOLED_RTC+0x10ac>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
							if(currCounter > 59)
 800306e:	4b52      	ldr	r3, [pc, #328]	; (80031b8 <StartOLED_RTC+0x10ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b3b      	cmp	r3, #59	; 0x3b
 8003074:	dd06      	ble.n	8003084 <StartOLED_RTC+0xf78>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003076:	4b4f      	ldr	r3, [pc, #316]	; (80031b4 <StartOLED_RTC+0x10a8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 800307e:	4b4e      	ldr	r3, [pc, #312]	; (80031b8 <StartOLED_RTC+0x10ac>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 8003084:	4b4c      	ldr	r3, [pc, #304]	; (80031b8 <StartOLED_RTC+0x10ac>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	da06      	bge.n	800309a <StartOLED_RTC+0xf8e>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 800308c:	4b49      	ldr	r3, [pc, #292]	; (80031b4 <StartOLED_RTC+0x10a8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2200      	movs	r2, #0
 8003092:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8003094:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <StartOLED_RTC+0x10ac>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
							}
							graphics_text(0, 16, 1, "           ");
 800309a:	4b48      	ldr	r3, [pc, #288]	; (80031bc <StartOLED_RTC+0x10b0>)
 800309c:	2201      	movs	r2, #1
 800309e:	2110      	movs	r1, #16
 80030a0:	2000      	movs	r0, #0
 80030a2:	f000 ff79 	bl	8003f98 <graphics_text>
							oled_update();
 80030a6:	f001 f82b 	bl	8004100 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 80030aa:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <StartOLED_RTC+0x10ac>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b2:	4943      	ldr	r1, [pc, #268]	; (80031c0 <StartOLED_RTC+0x10b4>)
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00e fdd9 	bl	8011c6c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 80030ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030be:	2201      	movs	r2, #1
 80030c0:	2110      	movs	r1, #16
 80030c2:	2000      	movs	r0, #0
 80030c4:	f000 ff68 	bl	8003f98 <graphics_text>
							oled_update();
 80030c8:	f001 f81a 	bl	8004100 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 80030cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d0:	220a      	movs	r2, #10
 80030d2:	2100      	movs	r1, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f00e fc9d 	bl	8011a14 <memset>
					while(klick == 13)
 80030da:	4b3a      	ldr	r3, [pc, #232]	; (80031c4 <StartOLED_RTC+0x10b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b0d      	cmp	r3, #13
 80030e0:	d0aa      	beq.n	8003038 <StartOLED_RTC+0xf2c>
						}
					}
					if(klick == 14)
 80030e2:	4b38      	ldr	r3, [pc, #224]	; (80031c4 <StartOLED_RTC+0x10b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b0e      	cmp	r3, #14
 80030e8:	d160      	bne.n	80031ac <StartOLED_RTC+0x10a0>
					{
						// write data
						ds3231_set(DS3231_REGISTER_SECONDS_DEFAULT, &prevCounter);
 80030ea:	f107 030c 	add.w	r3, r7, #12
 80030ee:	4619      	mov	r1, r3
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7fd fba1 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 80030f6:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <StartOLED_RTC+0x10bc>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	2110      	movs	r1, #16
 80030fc:	2000      	movs	r0, #0
 80030fe:	f000 ff4b 	bl	8003f98 <graphics_text>
						oled_update();
 8003102:	f000 fffd 	bl	8004100 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8003106:	4b31      	ldr	r3, [pc, #196]	; (80031cc <StartOLED_RTC+0x10c0>)
 8003108:	2201      	movs	r2, #1
 800310a:	2110      	movs	r1, #16
 800310c:	2000      	movs	r0, #0
 800310e:	f000 ff43 	bl	8003f98 <graphics_text>
						oled_update();
 8003112:	f000 fff5 	bl	8004100 <oled_update>

						osDelay(800);
 8003116:	f44f 7048 	mov.w	r0, #800	; 0x320
 800311a:	f00a ffe7 	bl	800e0ec <osDelay>

						graphics_text(0, 16, 1, "                 ");
 800311e:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <StartOLED_RTC+0x10bc>)
 8003120:	2201      	movs	r2, #1
 8003122:	2110      	movs	r1, #16
 8003124:	2000      	movs	r0, #0
 8003126:	f000 ff37 	bl	8003f98 <graphics_text>
						oled_update();
 800312a:	f000 ffe9 	bl	8004100 <oled_update>

						klick = 15;
 800312e:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <StartOLED_RTC+0x10b8>)
 8003130:	220f      	movs	r2, #15
 8003132:	601a      	str	r2, [r3, #0]
					}
					break;
 8003134:	e03a      	b.n	80031ac <StartOLED_RTC+0x10a0>

				case 15:		// EXIT

					osDelay(500);
 8003136:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800313a:	f00a ffd7 	bl	800e0ec <osDelay>
					clear();
 800313e:	f000 fd77 	bl	8003c30 <clear>
					oled_update();
 8003142:	f000 ffdd 	bl	8004100 <oled_update>

					for(uint8_t q = 0; q < 3; q ++)
 8003146:	2300      	movs	r3, #0
 8003148:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800314c:	e017      	b.n	800317e <StartOLED_RTC+0x1072>
					{
						graphics_text(20, 16, 2, "THE TIME IS SET");
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <StartOLED_RTC+0x10c4>)
 8003150:	2202      	movs	r2, #2
 8003152:	2110      	movs	r1, #16
 8003154:	2014      	movs	r0, #20
 8003156:	f000 ff1f 	bl	8003f98 <graphics_text>
						oled_update();
 800315a:	f000 ffd1 	bl	8004100 <oled_update>
						osDelay(400);
 800315e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003162:	f00a ffc3 	bl	800e0ec <osDelay>

						clear();
 8003166:	f000 fd63 	bl	8003c30 <clear>
						oled_update();
 800316a:	f000 ffc9 	bl	8004100 <oled_update>
						osDelay(200);
 800316e:	20c8      	movs	r0, #200	; 0xc8
 8003170:	f00a ffbc 	bl	800e0ec <osDelay>
					for(uint8_t q = 0; q < 3; q ++)
 8003174:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003178:	3301      	adds	r3, #1
 800317a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800317e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003182:	2b02      	cmp	r3, #2
 8003184:	d9e3      	bls.n	800314e <StartOLED_RTC+0x1042>
					}
					klick = 0;					// Return to show time
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <StartOLED_RTC+0x10b8>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

					break;
 800318c:	e00f      	b.n	80031ae <StartOLED_RTC+0x10a2>
					break;
 800318e:	bf00      	nop
 8003190:	f7ff b801 	b.w	8002196 <StartOLED_RTC+0x8a>
					break;
 8003194:	bf00      	nop
 8003196:	f7fe bffe 	b.w	8002196 <StartOLED_RTC+0x8a>
					break;
 800319a:	bf00      	nop
 800319c:	f7fe bffb 	b.w	8002196 <StartOLED_RTC+0x8a>
					break;
 80031a0:	bf00      	nop
 80031a2:	f7fe bff8 	b.w	8002196 <StartOLED_RTC+0x8a>
					break;
 80031a6:	bf00      	nop
 80031a8:	f7fe bff5 	b.w	8002196 <StartOLED_RTC+0x8a>
					break;
 80031ac:	bf00      	nop
			switch (klick)
 80031ae:	f7fe bff2 	b.w	8002196 <StartOLED_RTC+0x8a>
 80031b2:	bf00      	nop
 80031b4:	20004c14 	.word	0x20004c14
 80031b8:	200000d8 	.word	0x200000d8
 80031bc:	08012830 	.word	0x08012830
 80031c0:	080127c8 	.word	0x080127c8
 80031c4:	200000dc 	.word	0x200000dc
 80031c8:	0801283c 	.word	0x0801283c
 80031cc:	08012850 	.word	0x08012850
 80031d0:	08012898 	.word	0x08012898

080031d4 <start_test_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_test_task */
void start_test_task(void *argument)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_test_task */
  /* Infinite loop */

		const char* test_print = "===== TEST MENU ===\n\r"
 80031dc:	4b49      	ldr	r3, [pc, #292]	; (8003304 <start_test_task+0x130>)
 80031de:	61bb      	str	r3, [r7, #24]
								 "BLUE LED OFF----> 2\n\r"
								 "menu 3      ----> 3\n\r"
								 "EXIT     ----> exit\n\r"
								 "Enter your choice here : \n\r";

		const char* led_on_msg = "BLUE LED ON\n\r";
 80031e0:	4b49      	ldr	r3, [pc, #292]	; (8003308 <start_test_task+0x134>)
 80031e2:	617b      	str	r3, [r7, #20]
		const char* led_off_msg = "BLUE LED OFF\n\r";
 80031e4:	4b49      	ldr	r3, [pc, #292]	; (800330c <start_test_task+0x138>)
 80031e6:	613b      	str	r3, [r7, #16]
		const char* nothing_msg = "Nothing\n\r";
 80031e8:	4b49      	ldr	r3, [pc, #292]	; (8003310 <start_test_task+0x13c>)
 80031ea:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    //osDelay(1);

	  xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80031ec:	f107 0208 	add.w	r2, r7, #8
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f4:	2100      	movs	r1, #0
 80031f6:	2000      	movs	r0, #0
 80031f8:	f00c fe6a 	bl	800fed0 <xTaskNotifyWait>
//	  xQueueSend(print_QueueHandle, &test_print, portMAX_DELAY);

	  while(curr_state != sMainMenu)
 80031fc:	e07c      	b.n	80032f8 <start_test_task+0x124>
	  {
		  xQueueSend(print_QueueHandle, &test_print, portMAX_DELAY);
 80031fe:	4b45      	ldr	r3, [pc, #276]	; (8003314 <start_test_task+0x140>)
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	f107 0118 	add.w	r1, r7, #24
 8003206:	2300      	movs	r3, #0
 8003208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800320c:	f00b fae0 	bl	800e7d0 <xQueueGenericSend>
		  xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);				// Wait  command
 8003210:	f107 0208 	add.w	r2, r7, #8
 8003214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003218:	2100      	movs	r1, #0
 800321a:	2000      	movs	r0, #0
 800321c:	f00c fe58 	bl	800fed0 <xTaskNotifyWait>
		  cmd = (command_t*) cmd_addr;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	61fb      	str	r3, [r7, #28]

		  if(cmd -> len <= 4)											    // Check input command (max input size must be less then 4)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	7a9b      	ldrb	r3, [r3, #10]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d85d      	bhi.n	80032e8 <start_test_task+0x114>
		  {
			// Select LED effect
			  if( ! strcmp((char*)cmd->payload, "1" ))
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	493a      	ldr	r1, [pc, #232]	; (8003318 <start_test_task+0x144>)
 8003230:	4618      	mov	r0, r3
 8003232:	f7fc ffcd 	bl	80001d0 <strcmp>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10f      	bne.n	800325c <start_test_task+0x88>
			  {
				  HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 800323c:	2201      	movs	r2, #1
 800323e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003242:	4836      	ldr	r0, [pc, #216]	; (800331c <start_test_task+0x148>)
 8003244:	f001 fbda 	bl	80049fc <HAL_GPIO_WritePin>

				  xQueueSend(print_QueueHandle, &led_on_msg, portMAX_DELAY);
 8003248:	4b32      	ldr	r3, [pc, #200]	; (8003314 <start_test_task+0x140>)
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	f107 0114 	add.w	r1, r7, #20
 8003250:	2300      	movs	r3, #0
 8003252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003256:	f00b fabb 	bl	800e7d0 <xQueueGenericSend>
 800325a:	e04d      	b.n	80032f8 <start_test_task+0x124>

			  }
			  else if(! strcmp((char*)cmd->payload, "2" ))
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	4930      	ldr	r1, [pc, #192]	; (8003320 <start_test_task+0x14c>)
 8003260:	4618      	mov	r0, r3
 8003262:	f7fc ffb5 	bl	80001d0 <strcmp>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10f      	bne.n	800328c <start_test_task+0xb8>
			  {
				  HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 800326c:	2200      	movs	r2, #0
 800326e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003272:	482a      	ldr	r0, [pc, #168]	; (800331c <start_test_task+0x148>)
 8003274:	f001 fbc2 	bl	80049fc <HAL_GPIO_WritePin>

				  xQueueSend(print_QueueHandle, &led_off_msg, portMAX_DELAY);
 8003278:	4b26      	ldr	r3, [pc, #152]	; (8003314 <start_test_task+0x140>)
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	f107 0110 	add.w	r1, r7, #16
 8003280:	2300      	movs	r3, #0
 8003282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003286:	f00b faa3 	bl	800e7d0 <xQueueGenericSend>
 800328a:	e035      	b.n	80032f8 <start_test_task+0x124>


			  }
			  else if(! strcmp((char*)cmd->payload, "3" ))
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4925      	ldr	r1, [pc, #148]	; (8003324 <start_test_task+0x150>)
 8003290:	4618      	mov	r0, r3
 8003292:	f7fc ff9d 	bl	80001d0 <strcmp>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <start_test_task+0xdc>
			  {
				  xQueueSend(print_QueueHandle, &nothing_msg, portMAX_DELAY);
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <start_test_task+0x140>)
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	f107 010c 	add.w	r1, r7, #12
 80032a4:	2300      	movs	r3, #0
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032aa:	f00b fa91 	bl	800e7d0 <xQueueGenericSend>
 80032ae:	e023      	b.n	80032f8 <start_test_task+0x124>


			  }
			  else if(! strcmp((char*)cmd->payload, "exit" ))
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	491d      	ldr	r1, [pc, #116]	; (8003328 <start_test_task+0x154>)
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fc ff8b 	bl	80001d0 <strcmp>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <start_test_task+0x102>
			  {
				  curr_state = sMainMenu;									// Go back to the main manu
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <start_test_task+0x158>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
				  xTaskNotify(menu_taskHandle, 0, eNoAction);				// Notify menu task
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <start_test_task+0x15c>)
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	2300      	movs	r3, #0
 80032cc:	2200      	movs	r2, #0
 80032ce:	2100      	movs	r1, #0
 80032d0:	f00c fe5e 	bl	800ff90 <xTaskGenericNotify>
 80032d4:	e010      	b.n	80032f8 <start_test_task+0x124>
			  }
			  else
			  {
				  xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <start_test_task+0x140>)
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	2300      	movs	r3, #0
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032e0:	4914      	ldr	r1, [pc, #80]	; (8003334 <start_test_task+0x160>)
 80032e2:	f00b fa75 	bl	800e7d0 <xQueueGenericSend>
 80032e6:	e007      	b.n	80032f8 <start_test_task+0x124>
			  }

		  }
		  else
		  {
			  xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
 80032e8:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <start_test_task+0x140>)
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032f2:	4910      	ldr	r1, [pc, #64]	; (8003334 <start_test_task+0x160>)
 80032f4:	f00b fa6c 	bl	800e7d0 <xQueueGenericSend>
	  while(curr_state != sMainMenu)
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <start_test_task+0x158>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f47f af7e 	bne.w	80031fe <start_test_task+0x2a>
	  xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8003302:	e773      	b.n	80031ec <start_test_task+0x18>
 8003304:	080128a8 	.word	0x080128a8
 8003308:	08012930 	.word	0x08012930
 800330c:	08012940 	.word	0x08012940
 8003310:	08012950 	.word	0x08012950
 8003314:	20004c60 	.word	0x20004c60
 8003318:	0801295c 	.word	0x0801295c
 800331c:	40020c00 	.word	0x40020c00
 8003320:	08012960 	.word	0x08012960
 8003324:	08012964 	.word	0x08012964
 8003328:	08012968 	.word	0x08012968
 800332c:	200000d7 	.word	0x200000d7
 8003330:	20004d04 	.word	0x20004d04
 8003334:	20000000 	.word	0x20000000

08003338 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800334a:	f000 ffeb 	bl	8004324 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40001000 	.word	0x40001000

0800335c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003360:	b672      	cpsid	i
}
 8003362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003364:	e7fe      	b.n	8003364 <Error_Handler+0x8>
	...

08003368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_MspInit+0x54>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	4a11      	ldr	r2, [pc, #68]	; (80033bc <HAL_MspInit+0x54>)
 8003378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800337c:	6453      	str	r3, [r2, #68]	; 0x44
 800337e:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <HAL_MspInit+0x54>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_MspInit+0x54>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <HAL_MspInit+0x54>)
 8003394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003398:	6413      	str	r3, [r2, #64]	; 0x40
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_MspInit+0x54>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033a6:	2200      	movs	r2, #0
 80033a8:	210f      	movs	r1, #15
 80033aa:	f06f 0001 	mvn.w	r0, #1
 80033ae:	f001 f8b5 	bl	800451c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08c      	sub	sp, #48	; 0x30
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c8:	f107 031c 	add.w	r3, r7, #28
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a42      	ldr	r2, [pc, #264]	; (80034e8 <HAL_I2C_MspInit+0x128>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d12d      	bne.n	800343e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a40      	ldr	r2, [pc, #256]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b3e      	ldr	r3, [pc, #248]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80033fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003404:	2312      	movs	r3, #18
 8003406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003408:	2301      	movs	r3, #1
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340c:	2300      	movs	r3, #0
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003410:	2304      	movs	r3, #4
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003414:	f107 031c 	add.w	r3, r7, #28
 8003418:	4619      	mov	r1, r3
 800341a:	4835      	ldr	r0, [pc, #212]	; (80034f0 <HAL_I2C_MspInit+0x130>)
 800341c:	f001 f93a 	bl	8004694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	4b31      	ldr	r3, [pc, #196]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	4a30      	ldr	r2, [pc, #192]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 800342a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800342e:	6413      	str	r3, [r2, #64]	; 0x40
 8003430:	4b2e      	ldr	r3, [pc, #184]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800343c:	e050      	b.n	80034e0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2c      	ldr	r2, [pc, #176]	; (80034f4 <HAL_I2C_MspInit+0x134>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d14b      	bne.n	80034e0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	4a26      	ldr	r2, [pc, #152]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6313      	str	r3, [r2, #48]	; 0x30
 8003458:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6313      	str	r3, [r2, #48]	; 0x30
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003486:	2312      	movs	r3, #18
 8003488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348e:	2303      	movs	r3, #3
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003492:	2304      	movs	r3, #4
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003496:	f107 031c 	add.w	r3, r7, #28
 800349a:	4619      	mov	r1, r3
 800349c:	4816      	ldr	r0, [pc, #88]	; (80034f8 <HAL_I2C_MspInit+0x138>)
 800349e:	f001 f8f9 	bl	8004694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034a8:	2312      	movs	r3, #18
 80034aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b0:	2303      	movs	r3, #3
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80034b4:	2304      	movs	r3, #4
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b8:	f107 031c 	add.w	r3, r7, #28
 80034bc:	4619      	mov	r1, r3
 80034be:	480f      	ldr	r0, [pc, #60]	; (80034fc <HAL_I2C_MspInit+0x13c>)
 80034c0:	f001 f8e8 	bl	8004694 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80034c4:	2300      	movs	r3, #0
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	4a07      	ldr	r2, [pc, #28]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 80034ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034d2:	6413      	str	r3, [r2, #64]	; 0x40
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_I2C_MspInit+0x12c>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]
}
 80034e0:	bf00      	nop
 80034e2:	3730      	adds	r7, #48	; 0x30
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40005400 	.word	0x40005400
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40020400 	.word	0x40020400
 80034f4:	40005c00 	.word	0x40005c00
 80034f8:	40020800 	.word	0x40020800
 80034fc:	40020000 	.word	0x40020000

08003500 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08e      	sub	sp, #56	; 0x38
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a31      	ldr	r2, [pc, #196]	; (80035f0 <HAL_I2S_MspInit+0xf0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d15a      	bne.n	80035e6 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003530:	2301      	movs	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003534:	23c0      	movs	r3, #192	; 0xc0
 8003536:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003538:	2302      	movs	r3, #2
 800353a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	4618      	mov	r0, r3
 8003542:	f005 fa8f 	bl	8008a64 <HAL_RCCEx_PeriphCLKConfig>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800354c:	f7ff ff06 	bl	800335c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <HAL_I2S_MspInit+0xf4>)
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <HAL_I2S_MspInit+0xf4>)
 800355a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355e:	6413      	str	r3, [r2, #64]	; 0x40
 8003560:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <HAL_I2S_MspInit+0xf4>)
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <HAL_I2S_MspInit+0xf4>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <HAL_I2S_MspInit+0xf4>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6313      	str	r3, [r2, #48]	; 0x30
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <HAL_I2S_MspInit+0xf4>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_I2S_MspInit+0xf4>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <HAL_I2S_MspInit+0xf4>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6313      	str	r3, [r2, #48]	; 0x30
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <HAL_I2S_MspInit+0xf4>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80035a4:	2310      	movs	r3, #16
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a8:	2302      	movs	r3, #2
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b0:	2300      	movs	r3, #0
 80035b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035b4:	2306      	movs	r3, #6
 80035b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80035b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035bc:	4619      	mov	r1, r3
 80035be:	480e      	ldr	r0, [pc, #56]	; (80035f8 <HAL_I2S_MspInit+0xf8>)
 80035c0:	f001 f868 	bl	8004694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80035c4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d2:	2300      	movs	r3, #0
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035d6:	2306      	movs	r3, #6
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035de:	4619      	mov	r1, r3
 80035e0:	4806      	ldr	r0, [pc, #24]	; (80035fc <HAL_I2S_MspInit+0xfc>)
 80035e2:	f001 f857 	bl	8004694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80035e6:	bf00      	nop
 80035e8:	3738      	adds	r7, #56	; 0x38
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40003c00 	.word	0x40003c00
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40020000 	.word	0x40020000
 80035fc:	40020800 	.word	0x40020800

08003600 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003608:	f107 0308 	add.w	r3, r7, #8
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a0c      	ldr	r2, [pc, #48]	; (800364c <HAL_RTC_MspInit+0x4c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d111      	bne.n	8003644 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003620:	2302      	movs	r3, #2
 8003622:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003628:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800362a:	f107 0308 	add.w	r3, r7, #8
 800362e:	4618      	mov	r0, r3
 8003630:	f005 fa18 	bl	8008a64 <HAL_RCCEx_PeriphCLKConfig>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800363a:	f7ff fe8f 	bl	800335c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800363e:	4b04      	ldr	r3, [pc, #16]	; (8003650 <HAL_RTC_MspInit+0x50>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003644:	bf00      	nop
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40002800 	.word	0x40002800
 8003650:	42470e3c 	.word	0x42470e3c

08003654 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a19      	ldr	r2, [pc, #100]	; (80036d8 <HAL_SPI_MspInit+0x84>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d12b      	bne.n	80036ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	4b18      	ldr	r3, [pc, #96]	; (80036dc <HAL_SPI_MspInit+0x88>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	4a17      	ldr	r2, [pc, #92]	; (80036dc <HAL_SPI_MspInit+0x88>)
 8003680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003684:	6453      	str	r3, [r2, #68]	; 0x44
 8003686:	4b15      	ldr	r3, [pc, #84]	; (80036dc <HAL_SPI_MspInit+0x88>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b11      	ldr	r3, [pc, #68]	; (80036dc <HAL_SPI_MspInit+0x88>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4a10      	ldr	r2, [pc, #64]	; (80036dc <HAL_SPI_MspInit+0x88>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6313      	str	r3, [r2, #48]	; 0x30
 80036a2:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <HAL_SPI_MspInit+0x88>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80036ae:	23e0      	movs	r3, #224	; 0xe0
 80036b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b2:	2302      	movs	r3, #2
 80036b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ba:	2300      	movs	r3, #0
 80036bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036be:	2305      	movs	r3, #5
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c2:	f107 0314 	add.w	r3, r7, #20
 80036c6:	4619      	mov	r1, r3
 80036c8:	4805      	ldr	r0, [pc, #20]	; (80036e0 <HAL_SPI_MspInit+0x8c>)
 80036ca:	f000 ffe3 	bl	8004694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80036ce:	bf00      	nop
 80036d0:	3728      	adds	r7, #40	; 0x28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40013000 	.word	0x40013000
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40020000 	.word	0x40020000

080036e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <HAL_TIM_Encoder_MspInit+0x94>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d134      	bne.n	8003770 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	4b1c      	ldr	r3, [pc, #112]	; (800377c <HAL_TIM_Encoder_MspInit+0x98>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	4a1b      	ldr	r2, [pc, #108]	; (800377c <HAL_TIM_Encoder_MspInit+0x98>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6453      	str	r3, [r2, #68]	; 0x44
 8003716:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_TIM_Encoder_MspInit+0x98>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <HAL_TIM_Encoder_MspInit+0x98>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a14      	ldr	r2, [pc, #80]	; (800377c <HAL_TIM_Encoder_MspInit+0x98>)
 800372c:	f043 0310 	orr.w	r3, r3, #16
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_TIM_Encoder_MspInit+0x98>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800373e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374c:	2300      	movs	r3, #0
 800374e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003750:	2301      	movs	r3, #1
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4619      	mov	r1, r3
 800375a:	4809      	ldr	r0, [pc, #36]	; (8003780 <HAL_TIM_Encoder_MspInit+0x9c>)
 800375c:	f000 ff9a 	bl	8004694 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003760:	2200      	movs	r2, #0
 8003762:	2105      	movs	r1, #5
 8003764:	2019      	movs	r0, #25
 8003766:	f000 fed9 	bl	800451c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800376a:	2019      	movs	r0, #25
 800376c:	f000 fef2 	bl	8004554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003770:	bf00      	nop
 8003772:	3728      	adds	r7, #40	; 0x28
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40010000 	.word	0x40010000
 800377c:	40023800 	.word	0x40023800
 8003780:	40021000 	.word	0x40021000

08003784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <HAL_TIM_Base_MspInit+0x48>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d115      	bne.n	80037c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HAL_TIM_Base_MspInit+0x4c>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <HAL_TIM_Base_MspInit+0x4c>)
 80037a0:	f043 0320 	orr.w	r3, r3, #32
 80037a4:	6413      	str	r3, [r2, #64]	; 0x40
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_TIM_Base_MspInit+0x4c>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80037b2:	2200      	movs	r2, #0
 80037b4:	2105      	movs	r1, #5
 80037b6:	2037      	movs	r0, #55	; 0x37
 80037b8:	f000 feb0 	bl	800451c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80037bc:	2037      	movs	r0, #55	; 0x37
 80037be:	f000 fec9 	bl	8004554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40001400 	.word	0x40001400
 80037d0:	40023800 	.word	0x40023800

080037d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	; 0x28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	60da      	str	r2, [r3, #12]
 80037ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <HAL_UART_MspInit+0x94>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d133      	bne.n	800385e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	4b1c      	ldr	r3, [pc, #112]	; (800386c <HAL_UART_MspInit+0x98>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a1b      	ldr	r2, [pc, #108]	; (800386c <HAL_UART_MspInit+0x98>)
 8003800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
 8003806:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_UART_MspInit+0x98>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <HAL_UART_MspInit+0x98>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	4a14      	ldr	r2, [pc, #80]	; (800386c <HAL_UART_MspInit+0x98>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6313      	str	r3, [r2, #48]	; 0x30
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_UART_MspInit+0x98>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800382e:	230c      	movs	r3, #12
 8003830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003832:	2302      	movs	r3, #2
 8003834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383a:	2303      	movs	r3, #3
 800383c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800383e:	2307      	movs	r3, #7
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003842:	f107 0314 	add.w	r3, r7, #20
 8003846:	4619      	mov	r1, r3
 8003848:	4809      	ldr	r0, [pc, #36]	; (8003870 <HAL_UART_MspInit+0x9c>)
 800384a:	f000 ff23 	bl	8004694 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800384e:	2200      	movs	r2, #0
 8003850:	2106      	movs	r1, #6
 8003852:	2026      	movs	r0, #38	; 0x26
 8003854:	f000 fe62 	bl	800451c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003858:	2026      	movs	r0, #38	; 0x26
 800385a:	f000 fe7b 	bl	8004554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800385e:	bf00      	nop
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40004400 	.word	0x40004400
 800386c:	40023800 	.word	0x40023800
 8003870:	40020000 	.word	0x40020000

08003874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08c      	sub	sp, #48	; 0x30
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003884:	2200      	movs	r2, #0
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	2036      	movs	r0, #54	; 0x36
 800388a:	f000 fe47 	bl	800451c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800388e:	2036      	movs	r0, #54	; 0x36
 8003890:	f000 fe60 	bl	8004554 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <HAL_InitTick+0xa4>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <HAL_InitTick+0xa4>)
 800389e:	f043 0310 	orr.w	r3, r3, #16
 80038a2:	6413      	str	r3, [r2, #64]	; 0x40
 80038a4:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <HAL_InitTick+0xa4>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038b0:	f107 0210 	add.w	r2, r7, #16
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f005 f8a0 	bl	8008a00 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038c0:	f005 f876 	bl	80089b0 <HAL_RCC_GetPCLK1Freq>
 80038c4:	4603      	mov	r3, r0
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	4a13      	ldr	r2, [pc, #76]	; (800391c <HAL_InitTick+0xa8>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0c9b      	lsrs	r3, r3, #18
 80038d4:	3b01      	subs	r3, #1
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <HAL_InitTick+0xac>)
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <HAL_InitTick+0xb0>)
 80038dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <HAL_InitTick+0xac>)
 80038e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038e6:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <HAL_InitTick+0xac>)
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <HAL_InitTick+0xac>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_InitTick+0xac>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80038f8:	4809      	ldr	r0, [pc, #36]	; (8003920 <HAL_InitTick+0xac>)
 80038fa:	f005 fd5f 	bl	80093bc <HAL_TIM_Base_Init>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003904:	4806      	ldr	r0, [pc, #24]	; (8003920 <HAL_InitTick+0xac>)
 8003906:	f005 fda9 	bl	800945c <HAL_TIM_Base_Start_IT>
 800390a:	4603      	mov	r3, r0
 800390c:	e000      	b.n	8003910 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
}
 8003910:	4618      	mov	r0, r3
 8003912:	3730      	adds	r7, #48	; 0x30
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	431bde83 	.word	0x431bde83
 8003920:	20004d98 	.word	0x20004d98
 8003924:	40001000 	.word	0x40001000

08003928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800392c:	e7fe      	b.n	800392c <NMI_Handler+0x4>

0800392e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003932:	e7fe      	b.n	8003932 <HardFault_Handler+0x4>

08003934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003938:	e7fe      	b.n	8003938 <MemManage_Handler+0x4>

0800393a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800393e:	e7fe      	b.n	800393e <BusFault_Handler+0x4>

08003940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003944:	e7fe      	b.n	8003944 <UsageFault_Handler+0x4>

08003946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003958:	4802      	ldr	r0, [pc, #8]	; (8003964 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800395a:	f005 ff52 	bl	8009802 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20004c14 	.word	0x20004c14

08003968 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800396c:	4802      	ldr	r0, [pc, #8]	; (8003978 <USART2_IRQHandler+0x10>)
 800396e:	f006 fadf 	bl	8009f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data , 1);
  /* USER CODE END USART2_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20004cc0 	.word	0x20004cc0

0800397c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  HAL_TIM_Base_Start_IT(&htim7);								//	Turn on Timer with 100Hz period = 0,01 sec
 8003980:	4804      	ldr	r0, [pc, #16]	; (8003994 <EXTI15_10_IRQHandler+0x18>)
 8003982:	f005 fd6b 	bl	800945c <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC15_OSC32_OUT_Pin);
 8003986:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800398a:	f001 f851 	bl	8004a30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20004d08 	.word	0x20004d08

08003998 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800399c:	4802      	ldr	r0, [pc, #8]	; (80039a8 <TIM6_DAC_IRQHandler+0x10>)
 800399e:	f005 ff30 	bl	8009802 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20004d98 	.word	0x20004d98

080039ac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(tim_val == 4)											// Waiting 3 period of timer7: (0,01 *3 = 0,03 second)
 80039b0:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <TIM7_IRQHandler+0x5c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d11d      	bne.n	80039f4 <TIM7_IRQHandler+0x48>
		{
			tim_val = 0;
 80039b8:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <TIM7_IRQHandler+0x5c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)	// If button steel pressed
 80039be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039c2:	4812      	ldr	r0, [pc, #72]	; (8003a0c <TIM7_IRQHandler+0x60>)
 80039c4:	f001 f802 	bl	80049cc <HAL_GPIO_ReadPin>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10e      	bne.n	80039ec <TIM7_IRQHandler+0x40>
			{
				klick++;
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <TIM7_IRQHandler+0x64>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3301      	adds	r3, #1
 80039d4:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <TIM7_IRQHandler+0x64>)
 80039d6:	6013      	str	r3, [r2, #0]
				if(klick >= 15)										// it mean we have only 4 LEDs
 80039d8:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <TIM7_IRQHandler+0x64>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b0e      	cmp	r3, #14
 80039de:	dd02      	ble.n	80039e6 <TIM7_IRQHandler+0x3a>
				{
					klick = 0;
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <TIM7_IRQHandler+0x64>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
				}
				HAL_TIM_Base_Stop_IT(&htim7);						// Stop timer (becouse counter can turn on only encoder key)
 80039e6:	480b      	ldr	r0, [pc, #44]	; (8003a14 <TIM7_IRQHandler+0x68>)
 80039e8:	f005 fda8 	bl	800953c <HAL_TIM_Base_Stop_IT>
			}
			HAL_TIM_Base_Stop_IT(&htim7);
 80039ec:	4809      	ldr	r0, [pc, #36]	; (8003a14 <TIM7_IRQHandler+0x68>)
 80039ee:	f005 fda5 	bl	800953c <HAL_TIM_Base_Stop_IT>
 80039f2:	e004      	b.n	80039fe <TIM7_IRQHandler+0x52>
		}
		else
		{
			tim_val++;
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <TIM7_IRQHandler+0x5c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	4a03      	ldr	r2, [pc, #12]	; (8003a08 <TIM7_IRQHandler+0x5c>)
 80039fc:	6013      	str	r3, [r2, #0]
		}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80039fe:	4805      	ldr	r0, [pc, #20]	; (8003a14 <TIM7_IRQHandler+0x68>)
 8003a00:	f005 feff 	bl	8009802 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	2000013c 	.word	0x2000013c
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	200000dc 	.word	0x200000dc
 8003a14:	20004d08 	.word	0x20004d08

08003a18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <OTG_FS_IRQHandler+0x10>)
 8003a1e:	f001 fa95 	bl	8004f4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	2000542c 	.word	0x2000542c

08003a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a34:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <_sbrk+0x5c>)
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <_sbrk+0x60>)
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <_sbrk+0x64>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <_sbrk+0x64>)
 8003a4a:	4a12      	ldr	r2, [pc, #72]	; (8003a94 <_sbrk+0x68>)
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <_sbrk+0x64>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d207      	bcs.n	8003a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a5c:	f00d ff90 	bl	8011980 <__errno>
 8003a60:	4603      	mov	r3, r0
 8003a62:	220c      	movs	r2, #12
 8003a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a6a:	e009      	b.n	8003a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <_sbrk+0x64>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <_sbrk+0x64>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <_sbrk+0x64>)
 8003a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20020000 	.word	0x20020000
 8003a8c:	00000400 	.word	0x00000400
 8003a90:	20000140 	.word	0x20000140
 8003a94:	20005740 	.word	0x20005740

08003a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <SystemInit+0x20>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	4a05      	ldr	r2, [pc, #20]	; (8003ab8 <SystemInit+0x20>)
 8003aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71fb      	strb	r3, [r7, #7]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	71bb      	strb	r3, [r7, #6]
 8003aca:	4613      	mov	r3, r2
 8003acc:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	db3b      	blt.n	8003b4e <draw_pixel+0x92>
 8003ad6:	79bb      	ldrb	r3, [r7, #6]
 8003ad8:	2b1f      	cmp	r3, #31
 8003ada:	d838      	bhi.n	8003b4e <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 8003ae0:	79bb      	ldrb	r3, [r7, #6]
 8003ae2:	08db      	lsrs	r3, r3, #3
 8003ae4:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	79bb      	ldrb	r3, [r7, #6]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	737b      	strb	r3, [r7, #13]
		if(color)
 8003af4:	797b      	ldrb	r3, [r7, #5]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d012      	beq.n	8003b20 <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8003afa:	7bba      	ldrb	r2, [r7, #14]
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	4917      	ldr	r1, [pc, #92]	; (8003b5c <draw_pixel+0xa0>)
 8003b00:	01d2      	lsls	r2, r2, #7
 8003b02:	440a      	add	r2, r1
 8003b04:	4413      	add	r3, r2
 8003b06:	7818      	ldrb	r0, [r3, #0]
 8003b08:	7bba      	ldrb	r2, [r7, #14]
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	7b79      	ldrb	r1, [r7, #13]
 8003b0e:	4301      	orrs	r1, r0
 8003b10:	b2c8      	uxtb	r0, r1
 8003b12:	4912      	ldr	r1, [pc, #72]	; (8003b5c <draw_pixel+0xa0>)
 8003b14:	01d2      	lsls	r2, r2, #7
 8003b16:	440a      	add	r2, r1
 8003b18:	4413      	add	r3, r2
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 8003b1e:	e016      	b.n	8003b4e <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 8003b20:	7bba      	ldrb	r2, [r7, #14]
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	490d      	ldr	r1, [pc, #52]	; (8003b5c <draw_pixel+0xa0>)
 8003b26:	01d2      	lsls	r2, r2, #7
 8003b28:	440a      	add	r2, r1
 8003b2a:	4413      	add	r3, r2
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b25a      	sxtb	r2, r3
 8003b30:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	b25b      	sxtb	r3, r3
 8003b38:	4013      	ands	r3, r2
 8003b3a:	b259      	sxtb	r1, r3
 8003b3c:	7bba      	ldrb	r2, [r7, #14]
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	b2c8      	uxtb	r0, r1
 8003b42:	4906      	ldr	r1, [pc, #24]	; (8003b5c <draw_pixel+0xa0>)
 8003b44:	01d2      	lsls	r2, r2, #7
 8003b46:	440a      	add	r2, r1
 8003b48:	4413      	add	r3, r2
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	701a      	strb	r2, [r3, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20004de0 	.word	0x20004de0

08003b60 <invert_pixel>:
				draw_pixel(x*3+i,y*3+j,color);
	}
}

void invert_pixel(uint8_t x, uint8_t y)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	460a      	mov	r2, r1
 8003b6a:	71fb      	strb	r3, [r7, #7]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	71bb      	strb	r3, [r7, #6]
	if(x<128 && y<32)
 8003b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	db24      	blt.n	8003bc2 <invert_pixel+0x62>
 8003b78:	79bb      	ldrb	r3, [r7, #6]
 8003b7a:	2b1f      	cmp	r3, #31
 8003b7c:	d821      	bhi.n	8003bc2 <invert_pixel+0x62>
	{
		uint8_t pixel = 0x01;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
		gddram[y>>3][x] ^= pixel<<(y%8);
 8003b82:	79bb      	ldrb	r3, [r7, #6]
 8003b84:	08db      	lsrs	r3, r3, #3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	4910      	ldr	r1, [pc, #64]	; (8003bd0 <invert_pixel+0x70>)
 8003b8e:	01d2      	lsls	r2, r2, #7
 8003b90:	440a      	add	r2, r1
 8003b92:	4413      	add	r3, r2
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b25a      	sxtb	r2, r3
 8003b98:	7bf9      	ldrb	r1, [r7, #15]
 8003b9a:	79bb      	ldrb	r3, [r7, #6]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	b25b      	sxtb	r3, r3
 8003ba6:	4053      	eors	r3, r2
 8003ba8:	b259      	sxtb	r1, r3
 8003baa:	79bb      	ldrb	r3, [r7, #6]
 8003bac:	08db      	lsrs	r3, r3, #3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	b2c8      	uxtb	r0, r1
 8003bb6:	4906      	ldr	r1, [pc, #24]	; (8003bd0 <invert_pixel+0x70>)
 8003bb8:	01d2      	lsls	r2, r2, #7
 8003bba:	440a      	add	r2, r1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	701a      	strb	r2, [r3, #0]
	}
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20004de0 	.word	0x20004de0

08003bd4 <invert_rectangle>:

void invert_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4604      	mov	r4, r0
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4623      	mov	r3, r4
 8003be4:	71fb      	strb	r3, [r7, #7]
 8003be6:	4603      	mov	r3, r0
 8003be8:	71bb      	strb	r3, [r7, #6]
 8003bea:	460b      	mov	r3, r1
 8003bec:	717b      	strb	r3, [r7, #5]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	713b      	strb	r3, [r7, #4]
	uint8_t i,j;
	for(i=x0;i<x1;i++)
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	e012      	b.n	8003c1e <invert_rectangle+0x4a>
		for(j=y0;j<y1;j++)
 8003bf8:	79bb      	ldrb	r3, [r7, #6]
 8003bfa:	73bb      	strb	r3, [r7, #14]
 8003bfc:	e008      	b.n	8003c10 <invert_rectangle+0x3c>
			invert_pixel(i,j);
 8003bfe:	7bba      	ldrb	r2, [r7, #14]
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff ffab 	bl	8003b60 <invert_pixel>
		for(j=y0;j<y1;j++)
 8003c0a:	7bbb      	ldrb	r3, [r7, #14]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	73bb      	strb	r3, [r7, #14]
 8003c10:	7bba      	ldrb	r2, [r7, #14]
 8003c12:	793b      	ldrb	r3, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d3f2      	bcc.n	8003bfe <invert_rectangle+0x2a>
	for(i=x0;i<x1;i++)
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	7bfa      	ldrb	r2, [r7, #15]
 8003c20:	797b      	ldrb	r3, [r7, #5]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d3e8      	bcc.n	8003bf8 <invert_rectangle+0x24>
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd90      	pop	{r4, r7, pc}

08003c30 <clear>:

void clear(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(i=0;i<4;i++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	71fb      	strb	r3, [r7, #7]
 8003c3a:	e014      	b.n	8003c66 <clear+0x36>
		for(j=0;j<128;j++)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	71bb      	strb	r3, [r7, #6]
 8003c40:	e00a      	b.n	8003c58 <clear+0x28>
			gddram[i][j]=0x00;
 8003c42:	79fa      	ldrb	r2, [r7, #7]
 8003c44:	79bb      	ldrb	r3, [r7, #6]
 8003c46:	490d      	ldr	r1, [pc, #52]	; (8003c7c <clear+0x4c>)
 8003c48:	01d2      	lsls	r2, r2, #7
 8003c4a:	440a      	add	r2, r1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
		for(j=0;j<128;j++)
 8003c52:	79bb      	ldrb	r3, [r7, #6]
 8003c54:	3301      	adds	r3, #1
 8003c56:	71bb      	strb	r3, [r7, #6]
 8003c58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	daf0      	bge.n	8003c42 <clear+0x12>
	for(i=0;i<4;i++)
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	3301      	adds	r3, #1
 8003c64:	71fb      	strb	r3, [r7, #7]
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d9e7      	bls.n	8003c3c <clear+0xc>
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20004de0 	.word	0x20004de0

08003c80 <line_h>:
			break;
	}
}

void line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode)
{
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4604      	mov	r4, r0
 8003c88:	4608      	mov	r0, r1
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4623      	mov	r3, r4
 8003c90:	71fb      	strb	r3, [r7, #7]
 8003c92:	4603      	mov	r3, r0
 8003c94:	71bb      	strb	r3, [r7, #6]
 8003c96:	460b      	mov	r3, r1
 8003c98:	717b      	strb	r3, [r7, #5]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	713b      	strb	r3, [r7, #4]
	if(x0>x1)
 8003c9e:	79fa      	ldrb	r2, [r7, #7]
 8003ca0:	79bb      	ldrb	r3, [r7, #6]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d905      	bls.n	8003cb2 <line_h+0x32>
	{
		uint8_t temp = x0;
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	757b      	strb	r3, [r7, #21]
		x0 = x1;
 8003caa:	79bb      	ldrb	r3, [r7, #6]
 8003cac:	71fb      	strb	r3, [r7, #7]
		x1 = temp;
 8003cae:	7d7b      	ldrb	r3, [r7, #21]
 8003cb0:	71bb      	strb	r3, [r7, #6]
	}
	uint8_t i,j;
	switch(mode)
 8003cb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	f000 80ac 	beq.w	8003e14 <line_h+0x194>
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	f300 80fb 	bgt.w	8003eb8 <line_h+0x238>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d054      	beq.n	8003d70 <line_h+0xf0>
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	f040 80f6 	bne.w	8003eb8 <line_h+0x238>
	{
		case add :
			if(width%2)
 8003ccc:	793b      	ldrb	r3, [r7, #4]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d027      	beq.n	8003d28 <line_h+0xa8>
			{
				uint8_t start = y0-(width-1)/2;
 8003cd8:	793b      	ldrb	r3, [r7, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	0fda      	lsrs	r2, r3, #31
 8003cde:	4413      	add	r3, r2
 8003ce0:	105b      	asrs	r3, r3, #1
 8003ce2:	425b      	negs	r3, r3
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	797b      	ldrb	r3, [r7, #5]
 8003ce8:	4413      	add	r3, r2
 8003cea:	747b      	strb	r3, [r7, #17]
				for(i=0;i<width;i++)
 8003cec:	2300      	movs	r3, #0
 8003cee:	75fb      	strb	r3, [r7, #23]
 8003cf0:	e015      	b.n	8003d1e <line_h+0x9e>
					for(j=x0;j<=x1;j++)
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	75bb      	strb	r3, [r7, #22]
 8003cf6:	e00b      	b.n	8003d10 <line_h+0x90>
						draw_pixel(j,start+i,1);
 8003cf8:	7c7a      	ldrb	r2, [r7, #17]
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	b2d9      	uxtb	r1, r3
 8003d00:	7dbb      	ldrb	r3, [r7, #22]
 8003d02:	2201      	movs	r2, #1
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fed9 	bl	8003abc <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003d0a:	7dbb      	ldrb	r3, [r7, #22]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	75bb      	strb	r3, [r7, #22]
 8003d10:	7dba      	ldrb	r2, [r7, #22]
 8003d12:	79bb      	ldrb	r3, [r7, #6]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d9ef      	bls.n	8003cf8 <line_h+0x78>
				for(i=0;i<width;i++)
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	75fb      	strb	r3, [r7, #23]
 8003d1e:	7dfa      	ldrb	r2, [r7, #23]
 8003d20:	793b      	ldrb	r3, [r7, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d3e5      	bcc.n	8003cf2 <line_h+0x72>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,1);
			}
			break;
 8003d26:	e0c7      	b.n	8003eb8 <line_h+0x238>
				uint8_t start = y0-width/2;
 8003d28:	793b      	ldrb	r3, [r7, #4]
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	797a      	ldrb	r2, [r7, #5]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	74bb      	strb	r3, [r7, #18]
				for(i=0;i<width;i++)
 8003d34:	2300      	movs	r3, #0
 8003d36:	75fb      	strb	r3, [r7, #23]
 8003d38:	e015      	b.n	8003d66 <line_h+0xe6>
					for(j=x0;j<=x1;j++)
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	75bb      	strb	r3, [r7, #22]
 8003d3e:	e00b      	b.n	8003d58 <line_h+0xd8>
						draw_pixel(j,start+i,1);
 8003d40:	7cba      	ldrb	r2, [r7, #18]
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	4413      	add	r3, r2
 8003d46:	b2d9      	uxtb	r1, r3
 8003d48:	7dbb      	ldrb	r3, [r7, #22]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff feb5 	bl	8003abc <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003d52:	7dbb      	ldrb	r3, [r7, #22]
 8003d54:	3301      	adds	r3, #1
 8003d56:	75bb      	strb	r3, [r7, #22]
 8003d58:	7dba      	ldrb	r2, [r7, #22]
 8003d5a:	79bb      	ldrb	r3, [r7, #6]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d9ef      	bls.n	8003d40 <line_h+0xc0>
				for(i=0;i<width;i++)
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	3301      	adds	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
 8003d66:	7dfa      	ldrb	r2, [r7, #23]
 8003d68:	793b      	ldrb	r3, [r7, #4]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d3e5      	bcc.n	8003d3a <line_h+0xba>
			break;
 8003d6e:	e0a3      	b.n	8003eb8 <line_h+0x238>

		case erase :
			if(width%2)
 8003d70:	793b      	ldrb	r3, [r7, #4]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d027      	beq.n	8003dcc <line_h+0x14c>
			{
				uint8_t start = y0-(width-1)/2;
 8003d7c:	793b      	ldrb	r3, [r7, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	0fda      	lsrs	r2, r3, #31
 8003d82:	4413      	add	r3, r2
 8003d84:	105b      	asrs	r3, r3, #1
 8003d86:	425b      	negs	r3, r3
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	797b      	ldrb	r3, [r7, #5]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	73fb      	strb	r3, [r7, #15]
				for(i=0;i<width;i++)
 8003d90:	2300      	movs	r3, #0
 8003d92:	75fb      	strb	r3, [r7, #23]
 8003d94:	e015      	b.n	8003dc2 <line_h+0x142>
					for(j=x0;j<=x1;j++)
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	75bb      	strb	r3, [r7, #22]
 8003d9a:	e00b      	b.n	8003db4 <line_h+0x134>
						draw_pixel(j,start+i,0);
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	4413      	add	r3, r2
 8003da2:	b2d9      	uxtb	r1, r3
 8003da4:	7dbb      	ldrb	r3, [r7, #22]
 8003da6:	2200      	movs	r2, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fe87 	bl	8003abc <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003dae:	7dbb      	ldrb	r3, [r7, #22]
 8003db0:	3301      	adds	r3, #1
 8003db2:	75bb      	strb	r3, [r7, #22]
 8003db4:	7dba      	ldrb	r2, [r7, #22]
 8003db6:	79bb      	ldrb	r3, [r7, #6]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d9ef      	bls.n	8003d9c <line_h+0x11c>
				for(i=0;i<width;i++)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
 8003dc2:	7dfa      	ldrb	r2, [r7, #23]
 8003dc4:	793b      	ldrb	r3, [r7, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d3e5      	bcc.n	8003d96 <line_h+0x116>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,0);
			}
			break;
 8003dca:	e075      	b.n	8003eb8 <line_h+0x238>
				uint8_t start = y0-width/2;
 8003dcc:	793b      	ldrb	r3, [r7, #4]
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	797a      	ldrb	r2, [r7, #5]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	743b      	strb	r3, [r7, #16]
				for(i=0;i<width;i++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	75fb      	strb	r3, [r7, #23]
 8003ddc:	e015      	b.n	8003e0a <line_h+0x18a>
					for(j=x0;j<=x1;j++)
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	75bb      	strb	r3, [r7, #22]
 8003de2:	e00b      	b.n	8003dfc <line_h+0x17c>
						draw_pixel(j,start+i,0);
 8003de4:	7c3a      	ldrb	r2, [r7, #16]
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	4413      	add	r3, r2
 8003dea:	b2d9      	uxtb	r1, r3
 8003dec:	7dbb      	ldrb	r3, [r7, #22]
 8003dee:	2200      	movs	r2, #0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fe63 	bl	8003abc <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003df6:	7dbb      	ldrb	r3, [r7, #22]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	75bb      	strb	r3, [r7, #22]
 8003dfc:	7dba      	ldrb	r2, [r7, #22]
 8003dfe:	79bb      	ldrb	r3, [r7, #6]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d9ef      	bls.n	8003de4 <line_h+0x164>
				for(i=0;i<width;i++)
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	3301      	adds	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
 8003e0a:	7dfa      	ldrb	r2, [r7, #23]
 8003e0c:	793b      	ldrb	r3, [r7, #4]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d3e5      	bcc.n	8003dde <line_h+0x15e>
			break;
 8003e12:	e051      	b.n	8003eb8 <line_h+0x238>

		case invert :
			if(width%2)
 8003e14:	793b      	ldrb	r3, [r7, #4]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d027      	beq.n	8003e70 <line_h+0x1f0>
			{
				uint8_t start = y0-(width-1)/2;
 8003e20:	793b      	ldrb	r3, [r7, #4]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	0fda      	lsrs	r2, r3, #31
 8003e26:	4413      	add	r3, r2
 8003e28:	105b      	asrs	r3, r3, #1
 8003e2a:	425b      	negs	r3, r3
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	797b      	ldrb	r3, [r7, #5]
 8003e30:	4413      	add	r3, r2
 8003e32:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<width;i++)
 8003e34:	2300      	movs	r3, #0
 8003e36:	75fb      	strb	r3, [r7, #23]
 8003e38:	e015      	b.n	8003e66 <line_h+0x1e6>
					for(j=x0;j<=x1;j++)
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	75bb      	strb	r3, [r7, #22]
 8003e3e:	e00b      	b.n	8003e58 <line_h+0x1d8>
						invert_pixel(j,start+i);
 8003e40:	7cfa      	ldrb	r2, [r7, #19]
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	4413      	add	r3, r2
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	7dbb      	ldrb	r3, [r7, #22]
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fe87 	bl	8003b60 <invert_pixel>
					for(j=x0;j<=x1;j++)
 8003e52:	7dbb      	ldrb	r3, [r7, #22]
 8003e54:	3301      	adds	r3, #1
 8003e56:	75bb      	strb	r3, [r7, #22]
 8003e58:	7dba      	ldrb	r2, [r7, #22]
 8003e5a:	79bb      	ldrb	r3, [r7, #6]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d9ef      	bls.n	8003e40 <line_h+0x1c0>
				for(i=0;i<width;i++)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	3301      	adds	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
 8003e66:	7dfa      	ldrb	r2, [r7, #23]
 8003e68:	793b      	ldrb	r3, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d3e5      	bcc.n	8003e3a <line_h+0x1ba>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						invert_pixel(j,start+i);
			}
			break;
 8003e6e:	e022      	b.n	8003eb6 <line_h+0x236>
				uint8_t start = y0-width/2;
 8003e70:	793b      	ldrb	r3, [r7, #4]
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	797a      	ldrb	r2, [r7, #5]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	753b      	strb	r3, [r7, #20]
				for(i=0;i<width;i++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	75fb      	strb	r3, [r7, #23]
 8003e80:	e015      	b.n	8003eae <line_h+0x22e>
					for(j=x0;j<=x1;j++)
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	75bb      	strb	r3, [r7, #22]
 8003e86:	e00b      	b.n	8003ea0 <line_h+0x220>
						invert_pixel(j,start+i);
 8003e88:	7d3a      	ldrb	r2, [r7, #20]
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	7dbb      	ldrb	r3, [r7, #22]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff fe63 	bl	8003b60 <invert_pixel>
					for(j=x0;j<=x1;j++)
 8003e9a:	7dbb      	ldrb	r3, [r7, #22]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	75bb      	strb	r3, [r7, #22]
 8003ea0:	7dba      	ldrb	r2, [r7, #22]
 8003ea2:	79bb      	ldrb	r3, [r7, #6]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d9ef      	bls.n	8003e88 <line_h+0x208>
				for(i=0;i<width;i++)
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
 8003eae:	7dfa      	ldrb	r2, [r7, #23]
 8003eb0:	793b      	ldrb	r3, [r7, #4]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d3e5      	bcc.n	8003e82 <line_h+0x202>
			break;
 8003eb6:	bf00      	nop

	}
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd90      	pop	{r4, r7, pc}

08003ec0 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 8003ec0:	b590      	push	{r4, r7, lr}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	4608      	mov	r0, r1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4623      	mov	r3, r4
 8003ed0:	71fb      	strb	r3, [r7, #7]
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	71bb      	strb	r3, [r7, #6]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	717b      	strb	r3, [r7, #5]
 8003eda:	4613      	mov	r3, r2
 8003edc:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	75fb      	strb	r3, [r7, #23]
 8003ee6:	e04d      	b.n	8003f84 <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 8003ee8:	2300      	movs	r3, #0
 8003eea:	75bb      	strb	r3, [r7, #22]
 8003eec:	e042      	b.n	8003f74 <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	08db      	lsrs	r3, r3, #3
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	7dbb      	ldrb	r3, [r7, #22]
 8003ef6:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003efa:	fb11 f303 	smulbb	r3, r1, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	4413      	add	r3, r2
 8003f02:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4413      	add	r3, r2
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	2201      	movs	r2, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 8003f1e:	7bba      	ldrb	r2, [r7, #14]
 8003f20:	7b7b      	ldrb	r3, [r7, #13]
 8003f22:	4013      	ands	r3, r2
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00f      	beq.n	8003f4a <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 8003f2a:	79fa      	ldrb	r2, [r7, #7]
 8003f2c:	797b      	ldrb	r3, [r7, #5]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
 8003f34:	4413      	add	r3, r2
 8003f36:	b2d8      	uxtb	r0, r3
 8003f38:	7dba      	ldrb	r2, [r7, #22]
 8003f3a:	79bb      	ldrb	r3, [r7, #6]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2201      	movs	r2, #1
 8003f42:	4619      	mov	r1, r3
 8003f44:	f7ff fdba 	bl	8003abc <draw_pixel>
 8003f48:	e00e      	b.n	8003f68 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 8003f4a:	79fa      	ldrb	r2, [r7, #7]
 8003f4c:	797b      	ldrb	r3, [r7, #5]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	4413      	add	r3, r2
 8003f56:	b2d8      	uxtb	r0, r3
 8003f58:	7dba      	ldrb	r2, [r7, #22]
 8003f5a:	79bb      	ldrb	r3, [r7, #6]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2200      	movs	r2, #0
 8003f62:	4619      	mov	r1, r3
 8003f64:	f7ff fdaa 	bl	8003abc <draw_pixel>
		for (y=0; y<height; y++)
 8003f68:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	75bb      	strb	r3, [r7, #22]
 8003f74:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8003f78:	793b      	ldrb	r3, [r7, #4]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	dbb7      	blt.n	8003eee <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	3301      	adds	r3, #1
 8003f82:	75fb      	strb	r3, [r7, #23]
 8003f84:	7dfa      	ldrb	r2, [r7, #23]
 8003f86:	797b      	ldrb	r3, [r7, #5]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d3ad      	bcc.n	8003ee8 <graphics_Glyph+0x28>
		}
	}
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd90      	pop	{r4, r7, pc}
	...

08003f98 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b089      	sub	sp, #36	; 0x24
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	71fb      	strb	r3, [r7, #7]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	71bb      	strb	r3, [r7, #6]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 8003fb0:	e081      	b.n	80040b6 <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 8003fb8:	797a      	ldrb	r2, [r7, #5]
 8003fba:	4944      	ldr	r1, [pc, #272]	; (80040cc <graphics_text+0x134>)
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	3310      	adds	r3, #16
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	7dba      	ldrb	r2, [r7, #22]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d30b      	bcc.n	8003fe8 <graphics_text+0x50>
 8003fd0:	797a      	ldrb	r2, [r7, #5]
 8003fd2:	493e      	ldr	r1, [pc, #248]	; (80040cc <graphics_text+0x134>)
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3311      	adds	r3, #17
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	7dba      	ldrb	r2, [r7, #22]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d909      	bls.n	8003ffc <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 8003fe8:	797a      	ldrb	r2, [r7, #5]
 8003fea:	4938      	ldr	r1, [pc, #224]	; (80040cc <graphics_text+0x134>)
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3312      	adds	r3, #18
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 8003ffc:	797a      	ldrb	r2, [r7, #5]
 8003ffe:	4933      	ldr	r1, [pc, #204]	; (80040cc <graphics_text+0x134>)
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	3310      	adds	r3, #16
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	7dba      	ldrb	r2, [r7, #22]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 8004014:	797a      	ldrb	r2, [r7, #5]
 8004016:	492d      	ldr	r1, [pc, #180]	; (80040cc <graphics_text+0x134>)
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	3308      	adds	r3, #8
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8004028:	7d7b      	ldrb	r3, [r7, #21]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10c      	bne.n	8004048 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 800402e:	797a      	ldrb	r2, [r7, #5]
 8004030:	4926      	ldr	r1, [pc, #152]	; (80040cc <graphics_text+0x134>)
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	330c      	adds	r3, #12
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	7dbb      	ldrb	r3, [r7, #22]
 8004042:	4413      	add	r3, r2
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8004048:	797a      	ldrb	r2, [r7, #5]
 800404a:	4920      	ldr	r1, [pc, #128]	; (80040cc <graphics_text+0x134>)
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	3301      	adds	r3, #1
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 800405c:	797a      	ldrb	r2, [r7, #5]
 800405e:	491b      	ldr	r1, [pc, #108]	; (80040cc <graphics_text+0x134>)
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 800406e:	797a      	ldrb	r2, [r7, #5]
 8004070:	4916      	ldr	r1, [pc, #88]	; (80040cc <graphics_text+0x134>)
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	3304      	adds	r3, #4
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	7dbb      	ldrb	r3, [r7, #22]
 8004082:	7cf9      	ldrb	r1, [r7, #19]
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	7d39      	ldrb	r1, [r7, #20]
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	4413      	add	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]


		x+=width;
 8004092:	7dfa      	ldrb	r2, [r7, #23]
 8004094:	7d7b      	ldrb	r3, [r7, #21]
 8004096:	4413      	add	r3, r2
 8004098:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 800409a:	7d3c      	ldrb	r4, [r7, #20]
 800409c:	7d7a      	ldrb	r2, [r7, #21]
 800409e:	79b9      	ldrb	r1, [r7, #6]
 80040a0:	7df8      	ldrb	r0, [r7, #23]
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	4623      	mov	r3, r4
 80040ac:	f7ff ff08 	bl	8003ec0 <graphics_Glyph>
		str++;								/* point to next character in string */
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f47f af79 	bne.w	8003fb2 <graphics_text+0x1a>
	}

}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd90      	pop	{r4, r7, pc}
 80040ca:	bf00      	nop
 80040cc:	08012b00 	.word	0x08012b00

080040d0 <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	4603      	mov	r3, r0
 80040d8:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 80040da:	2300      	movs	r3, #0
 80040dc:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 80040e2:	f107 020c 	add.w	r2, r7, #12
 80040e6:	2332      	movs	r3, #50	; 0x32
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2302      	movs	r3, #2
 80040ec:	2178      	movs	r1, #120	; 0x78
 80040ee:	4803      	ldr	r0, [pc, #12]	; (80040fc <ssd1306_command+0x2c>)
 80040f0:	f002 fb76 	bl	80067e0 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20004b24 	.word	0x20004b24

08004100 <oled_update>:

void oled_update(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 8004106:	2021      	movs	r0, #33	; 0x21
 8004108:	f7ff ffe2 	bl	80040d0 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 800410c:	2000      	movs	r0, #0
 800410e:	f7ff ffdf 	bl	80040d0 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 8004112:	207f      	movs	r0, #127	; 0x7f
 8004114:	f7ff ffdc 	bl	80040d0 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 8004118:	2022      	movs	r0, #34	; 0x22
 800411a:	f7ff ffd9 	bl	80040d0 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 800411e:	2000      	movs	r0, #0
 8004120:	f7ff ffd6 	bl	80040d0 <ssd1306_command>
  ssd1306_command(3); // Page end address
 8004124:	2003      	movs	r0, #3
 8004126:	f7ff ffd3 	bl	80040d0 <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 800412a:	2340      	movs	r3, #64	; 0x40
 800412c:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 800412e:	2300      	movs	r3, #0
 8004130:	82fb      	strh	r3, [r7, #22]
 8004132:	e02d      	b.n	8004190 <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 8004134:	2300      	movs	r3, #0
 8004136:	757b      	strb	r3, [r7, #21]
 8004138:	e024      	b.n	8004184 <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 800413a:	2301      	movs	r3, #1
 800413c:	753b      	strb	r3, [r7, #20]
 800413e:	e012      	b.n	8004166 <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8004140:	8af9      	ldrh	r1, [r7, #22]
 8004142:	7d7a      	ldrb	r2, [r7, #21]
 8004144:	7d3b      	ldrb	r3, [r7, #20]
 8004146:	4413      	add	r3, r2
 8004148:	1e5a      	subs	r2, r3, #1
 800414a:	7d3b      	ldrb	r3, [r7, #20]
 800414c:	4814      	ldr	r0, [pc, #80]	; (80041a0 <oled_update+0xa0>)
 800414e:	01c9      	lsls	r1, r1, #7
 8004150:	4401      	add	r1, r0
 8004152:	440a      	add	r2, r1
 8004154:	7812      	ldrb	r2, [r2, #0]
 8004156:	f107 0118 	add.w	r1, r7, #24
 800415a:	440b      	add	r3, r1
 800415c:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8004160:	7d3b      	ldrb	r3, [r7, #20]
 8004162:	3301      	adds	r3, #1
 8004164:	753b      	strb	r3, [r7, #20]
 8004166:	7d3b      	ldrb	r3, [r7, #20]
 8004168:	2b10      	cmp	r3, #16
 800416a:	d9e9      	bls.n	8004140 <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 800416c:	463a      	mov	r2, r7
 800416e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	2311      	movs	r3, #17
 8004176:	2178      	movs	r1, #120	; 0x78
 8004178:	480a      	ldr	r0, [pc, #40]	; (80041a4 <oled_update+0xa4>)
 800417a:	f002 fb31 	bl	80067e0 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 800417e:	7d7b      	ldrb	r3, [r7, #21]
 8004180:	3310      	adds	r3, #16
 8004182:	757b      	strb	r3, [r7, #21]
 8004184:	7d7b      	ldrb	r3, [r7, #21]
 8004186:	2b7e      	cmp	r3, #126	; 0x7e
 8004188:	d9d7      	bls.n	800413a <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 800418a:	8afb      	ldrh	r3, [r7, #22]
 800418c:	3301      	adds	r3, #1
 800418e:	82fb      	strh	r3, [r7, #22]
 8004190:	8afb      	ldrh	r3, [r7, #22]
 8004192:	2b03      	cmp	r3, #3
 8004194:	d9ce      	bls.n	8004134 <oled_update+0x34>
		}
	}

}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20004de0 	.word	0x20004de0
 80041a4:	20004b24 	.word	0x20004b24

080041a8 <oled_init>:

void oled_init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 80041ae:	20ae      	movs	r0, #174	; 0xae
 80041b0:	f7ff ff8e 	bl	80040d0 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 80041b4:	20d5      	movs	r0, #213	; 0xd5
 80041b6:	f7ff ff8b 	bl	80040d0 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 80041ba:	2080      	movs	r0, #128	; 0x80
 80041bc:	f7ff ff88 	bl	80040d0 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 80041c0:	20a8      	movs	r0, #168	; 0xa8
 80041c2:	f7ff ff85 	bl	80040d0 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 80041c6:	201f      	movs	r0, #31
 80041c8:	f7ff ff82 	bl	80040d0 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 80041cc:	20d3      	movs	r0, #211	; 0xd3
 80041ce:	f7ff ff7f 	bl	80040d0 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7ff ff7c 	bl	80040d0 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 80041d8:	2040      	movs	r0, #64	; 0x40
 80041da:	f7ff ff79 	bl	80040d0 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 80041de:	208d      	movs	r0, #141	; 0x8d
 80041e0:	f7ff ff76 	bl	80040d0 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 80041e4:	2014      	movs	r0, #20
 80041e6:	f7ff ff73 	bl	80040d0 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 80041ea:	2020      	movs	r0, #32
 80041ec:	f7ff ff70 	bl	80040d0 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 80041f0:	2000      	movs	r0, #0
 80041f2:	f7ff ff6d 	bl	80040d0 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 80041f6:	20a1      	movs	r0, #161	; 0xa1
 80041f8:	f7ff ff6a 	bl	80040d0 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 80041fc:	20c8      	movs	r0, #200	; 0xc8
 80041fe:	f7ff ff67 	bl	80040d0 <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 8004202:	20da      	movs	r0, #218	; 0xda
 8004204:	f7ff ff64 	bl	80040d0 <ssd1306_command>
  ssd1306_command(0x02);
 8004208:	2002      	movs	r0, #2
 800420a:	f7ff ff61 	bl	80040d0 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 800420e:	2081      	movs	r0, #129	; 0x81
 8004210:	f7ff ff5e 	bl	80040d0 <ssd1306_command>
  ssd1306_command(0x8F);
 8004214:	208f      	movs	r0, #143	; 0x8f
 8004216:	f7ff ff5b 	bl	80040d0 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 800421a:	20d9      	movs	r0, #217	; 0xd9
 800421c:	f7ff ff58 	bl	80040d0 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 8004220:	20f1      	movs	r0, #241	; 0xf1
 8004222:	f7ff ff55 	bl	80040d0 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 8004226:	20db      	movs	r0, #219	; 0xdb
 8004228:	f7ff ff52 	bl	80040d0 <ssd1306_command>
  ssd1306_command(0x40);
 800422c:	2040      	movs	r0, #64	; 0x40
 800422e:	f7ff ff4f 	bl	80040d0 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 8004232:	20a4      	movs	r0, #164	; 0xa4
 8004234:	f7ff ff4c 	bl	80040d0 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8004238:	20a6      	movs	r0, #166	; 0xa6
 800423a:	f7ff ff49 	bl	80040d0 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 800423e:	202e      	movs	r0, #46	; 0x2e
 8004240:	f7ff ff46 	bl	80040d0 <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8004244:	20af      	movs	r0, #175	; 0xaf
 8004246:	f7ff ff43 	bl	80040d0 <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 800424a:	2300      	movs	r3, #0
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	e013      	b.n	8004278 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8004250:	2300      	movs	r3, #0
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	e00a      	b.n	800426c <oled_init+0xc4>
			gddram[i][j] = 0x00;
 8004256:	4a0c      	ldr	r2, [pc, #48]	; (8004288 <oled_init+0xe0>)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	01db      	lsls	r3, r3, #7
 800425c:	441a      	add	r2, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	4413      	add	r3, r2
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	3301      	adds	r3, #1
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b7f      	cmp	r3, #127	; 0x7f
 8004270:	ddf1      	ble.n	8004256 <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3301      	adds	r3, #1
 8004276:	607b      	str	r3, [r7, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b03      	cmp	r3, #3
 800427c:	dde8      	ble.n	8004250 <oled_init+0xa8>
}
 800427e:	bf00      	nop
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20004de0 	.word	0x20004de0

0800428c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800428c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004290:	480d      	ldr	r0, [pc, #52]	; (80042c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004292:	490e      	ldr	r1, [pc, #56]	; (80042cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004294:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004298:	e002      	b.n	80042a0 <LoopCopyDataInit>

0800429a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800429a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800429c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429e:	3304      	adds	r3, #4

080042a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a4:	d3f9      	bcc.n	800429a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a6:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042a8:	4c0b      	ldr	r4, [pc, #44]	; (80042d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80042aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042ac:	e001      	b.n	80042b2 <LoopFillZerobss>

080042ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b0:	3204      	adds	r2, #4

080042b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b4:	d3fb      	bcc.n	80042ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042b6:	f7ff fbef 	bl	8003a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ba:	f00d fb67 	bl	801198c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042be:	f7fc fc87 	bl	8000bd0 <main>
  bx  lr    
 80042c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042cc:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80042d0:	0801500c 	.word	0x0801500c
  ldr r2, =_sbss
 80042d4:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80042d8:	20005740 	.word	0x20005740

080042dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042dc:	e7fe      	b.n	80042dc <ADC_IRQHandler>
	...

080042e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <HAL_Init+0x40>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <HAL_Init+0x40>)
 80042ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_Init+0x40>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <HAL_Init+0x40>)
 80042f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_Init+0x40>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a07      	ldr	r2, [pc, #28]	; (8004320 <HAL_Init+0x40>)
 8004302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004308:	2003      	movs	r0, #3
 800430a:	f000 f8fc 	bl	8004506 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800430e:	200f      	movs	r0, #15
 8004310:	f7ff fab0 	bl	8003874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004314:	f7ff f828 	bl	8003368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40023c00 	.word	0x40023c00

08004324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <HAL_IncTick+0x20>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_IncTick+0x24>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4413      	add	r3, r2
 8004334:	4a04      	ldr	r2, [pc, #16]	; (8004348 <HAL_IncTick+0x24>)
 8004336:	6013      	str	r3, [r2, #0]
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	2000001c 	.word	0x2000001c
 8004348:	20004fe0 	.word	0x20004fe0

0800434c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  return uwTick;
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <HAL_GetTick+0x14>)
 8004352:	681b      	ldr	r3, [r3, #0]
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20004fe0 	.word	0x20004fe0

08004364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800436c:	f7ff ffee 	bl	800434c <HAL_GetTick>
 8004370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800437c:	d005      	beq.n	800438a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_Delay+0x44>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800438a:	bf00      	nop
 800438c:	f7ff ffde 	bl	800434c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	d8f7      	bhi.n	800438c <HAL_Delay+0x28>
  {
  }
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	2000001c 	.word	0x2000001c

080043ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c8:	4013      	ands	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043de:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <__NVIC_SetPriorityGrouping+0x44>)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	60d3      	str	r3, [r2, #12]
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <__NVIC_GetPriorityGrouping+0x18>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	0a1b      	lsrs	r3, r3, #8
 80043fe:	f003 0307 	and.w	r3, r3, #7
}
 8004402:	4618      	mov	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441e:	2b00      	cmp	r3, #0
 8004420:	db0b      	blt.n	800443a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	f003 021f 	and.w	r2, r3, #31
 8004428:	4907      	ldr	r1, [pc, #28]	; (8004448 <__NVIC_EnableIRQ+0x38>)
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	2001      	movs	r0, #1
 8004432:	fa00 f202 	lsl.w	r2, r0, r2
 8004436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	e000e100 	.word	0xe000e100

0800444c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	6039      	str	r1, [r7, #0]
 8004456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445c:	2b00      	cmp	r3, #0
 800445e:	db0a      	blt.n	8004476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	490c      	ldr	r1, [pc, #48]	; (8004498 <__NVIC_SetPriority+0x4c>)
 8004466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446a:	0112      	lsls	r2, r2, #4
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	440b      	add	r3, r1
 8004470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004474:	e00a      	b.n	800448c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	4908      	ldr	r1, [pc, #32]	; (800449c <__NVIC_SetPriority+0x50>)
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	3b04      	subs	r3, #4
 8004484:	0112      	lsls	r2, r2, #4
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	440b      	add	r3, r1
 800448a:	761a      	strb	r2, [r3, #24]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	e000e100 	.word	0xe000e100
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b089      	sub	sp, #36	; 0x24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f1c3 0307 	rsb	r3, r3, #7
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	bf28      	it	cs
 80044be:	2304      	movcs	r3, #4
 80044c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2b06      	cmp	r3, #6
 80044c8:	d902      	bls.n	80044d0 <NVIC_EncodePriority+0x30>
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3b03      	subs	r3, #3
 80044ce:	e000      	b.n	80044d2 <NVIC_EncodePriority+0x32>
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43da      	mvns	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	401a      	ands	r2, r3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	43d9      	mvns	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f8:	4313      	orrs	r3, r2
         );
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3724      	adds	r7, #36	; 0x24
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff ff4c 	bl	80043ac <__NVIC_SetPriorityGrouping>
}
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800452e:	f7ff ff61 	bl	80043f4 <__NVIC_GetPriorityGrouping>
 8004532:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	6978      	ldr	r0, [r7, #20]
 800453a:	f7ff ffb1 	bl	80044a0 <NVIC_EncodePriority>
 800453e:	4602      	mov	r2, r0
 8004540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004544:	4611      	mov	r1, r2
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff ff80 	bl	800444c <__NVIC_SetPriority>
}
 800454c:	bf00      	nop
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ff54 	bl	8004410 <__NVIC_EnableIRQ>
}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800457e:	f7ff fee5 	bl	800434c <HAL_GetTick>
 8004582:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d008      	beq.n	80045a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2280      	movs	r2, #128	; 0x80
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e052      	b.n	8004648 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0216 	bic.w	r2, r2, #22
 80045b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <HAL_DMA_Abort+0x62>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0208 	bic.w	r2, r2, #8
 80045e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045f2:	e013      	b.n	800461c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045f4:	f7ff feaa 	bl	800434c <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d90c      	bls.n	800461c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2203      	movs	r2, #3
 800460c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e015      	b.n	8004648 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e4      	bne.n	80045f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462e:	223f      	movs	r2, #63	; 0x3f
 8004630:	409a      	lsls	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d004      	beq.n	800466e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e00c      	b.n	8004688 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2205      	movs	r2, #5
 8004672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	e16b      	b.n	8004988 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046b0:	2201      	movs	r2, #1
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	f040 815a 	bne.w	8004982 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d005      	beq.n	80046e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d130      	bne.n	8004748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	2203      	movs	r2, #3
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43db      	mvns	r3, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4013      	ands	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800471c:	2201      	movs	r2, #1
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f003 0201 	and.w	r2, r3, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	2b03      	cmp	r3, #3
 8004752:	d017      	beq.n	8004784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	2203      	movs	r2, #3
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d123      	bne.n	80047d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	08da      	lsrs	r2, r3, #3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3208      	adds	r2, #8
 8004798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	220f      	movs	r2, #15
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	08da      	lsrs	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3208      	adds	r2, #8
 80047d2:	69b9      	ldr	r1, [r7, #24]
 80047d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2203      	movs	r2, #3
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 0203 	and.w	r2, r3, #3
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80b4 	beq.w	8004982 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	4b60      	ldr	r3, [pc, #384]	; (80049a0 <HAL_GPIO_Init+0x30c>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	4a5f      	ldr	r2, [pc, #380]	; (80049a0 <HAL_GPIO_Init+0x30c>)
 8004824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004828:	6453      	str	r3, [r2, #68]	; 0x44
 800482a:	4b5d      	ldr	r3, [pc, #372]	; (80049a0 <HAL_GPIO_Init+0x30c>)
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004836:	4a5b      	ldr	r2, [pc, #364]	; (80049a4 <HAL_GPIO_Init+0x310>)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	3302      	adds	r3, #2
 800483e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	220f      	movs	r2, #15
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a52      	ldr	r2, [pc, #328]	; (80049a8 <HAL_GPIO_Init+0x314>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d02b      	beq.n	80048ba <HAL_GPIO_Init+0x226>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a51      	ldr	r2, [pc, #324]	; (80049ac <HAL_GPIO_Init+0x318>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d025      	beq.n	80048b6 <HAL_GPIO_Init+0x222>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a50      	ldr	r2, [pc, #320]	; (80049b0 <HAL_GPIO_Init+0x31c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01f      	beq.n	80048b2 <HAL_GPIO_Init+0x21e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4f      	ldr	r2, [pc, #316]	; (80049b4 <HAL_GPIO_Init+0x320>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d019      	beq.n	80048ae <HAL_GPIO_Init+0x21a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4e      	ldr	r2, [pc, #312]	; (80049b8 <HAL_GPIO_Init+0x324>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_GPIO_Init+0x216>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a4d      	ldr	r2, [pc, #308]	; (80049bc <HAL_GPIO_Init+0x328>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00d      	beq.n	80048a6 <HAL_GPIO_Init+0x212>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4c      	ldr	r2, [pc, #304]	; (80049c0 <HAL_GPIO_Init+0x32c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <HAL_GPIO_Init+0x20e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a4b      	ldr	r2, [pc, #300]	; (80049c4 <HAL_GPIO_Init+0x330>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <HAL_GPIO_Init+0x20a>
 800489a:	2307      	movs	r3, #7
 800489c:	e00e      	b.n	80048bc <HAL_GPIO_Init+0x228>
 800489e:	2308      	movs	r3, #8
 80048a0:	e00c      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048a2:	2306      	movs	r3, #6
 80048a4:	e00a      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048a6:	2305      	movs	r3, #5
 80048a8:	e008      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048aa:	2304      	movs	r3, #4
 80048ac:	e006      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048ae:	2303      	movs	r3, #3
 80048b0:	e004      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e002      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048ba:	2300      	movs	r3, #0
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	f002 0203 	and.w	r2, r2, #3
 80048c2:	0092      	lsls	r2, r2, #2
 80048c4:	4093      	lsls	r3, r2
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048cc:	4935      	ldr	r1, [pc, #212]	; (80049a4 <HAL_GPIO_Init+0x310>)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	089b      	lsrs	r3, r3, #2
 80048d2:	3302      	adds	r3, #2
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048da:	4b3b      	ldr	r3, [pc, #236]	; (80049c8 <HAL_GPIO_Init+0x334>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	43db      	mvns	r3, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4013      	ands	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048fe:	4a32      	ldr	r2, [pc, #200]	; (80049c8 <HAL_GPIO_Init+0x334>)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004904:	4b30      	ldr	r3, [pc, #192]	; (80049c8 <HAL_GPIO_Init+0x334>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004928:	4a27      	ldr	r2, [pc, #156]	; (80049c8 <HAL_GPIO_Init+0x334>)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800492e:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <HAL_GPIO_Init+0x334>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	43db      	mvns	r3, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004952:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <HAL_GPIO_Init+0x334>)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004958:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <HAL_GPIO_Init+0x334>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800497c:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <HAL_GPIO_Init+0x334>)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3301      	adds	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	f67f ae90 	bls.w	80046b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	3724      	adds	r7, #36	; 0x24
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800
 80049a4:	40013800 	.word	0x40013800
 80049a8:	40020000 	.word	0x40020000
 80049ac:	40020400 	.word	0x40020400
 80049b0:	40020800 	.word	0x40020800
 80049b4:	40020c00 	.word	0x40020c00
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40021400 	.word	0x40021400
 80049c0:	40021800 	.word	0x40021800
 80049c4:	40021c00 	.word	0x40021c00
 80049c8:	40013c00 	.word	0x40013c00

080049cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	887b      	ldrh	r3, [r7, #2]
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049e4:	2301      	movs	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	e001      	b.n	80049ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	807b      	strh	r3, [r7, #2]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a0c:	787b      	ldrb	r3, [r7, #1]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a12:	887a      	ldrh	r2, [r7, #2]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a18:	e003      	b.n	8004a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a1a:	887b      	ldrh	r3, [r7, #2]
 8004a1c:	041a      	lsls	r2, r3, #16
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	619a      	str	r2, [r3, #24]
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a3a:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a46:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a4c:	88fb      	ldrh	r3, [r7, #6]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f806 	bl	8004a60 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40013c00 	.word	0x40013c00

08004a60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a78:	b08f      	sub	sp, #60	; 0x3c
 8004a7a:	af0a      	add	r7, sp, #40	; 0x28
 8004a7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e054      	b.n	8004b32 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f00c fcbe 	bl	8011424 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2203      	movs	r2, #3
 8004aac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f006 f95c 	bl	800ad84 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	687e      	ldr	r6, [r7, #4]
 8004ad4:	466d      	mov	r5, sp
 8004ad6:	f106 0410 	add.w	r4, r6, #16
 8004ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ae2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ae6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004aea:	1d33      	adds	r3, r6, #4
 8004aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aee:	6838      	ldr	r0, [r7, #0]
 8004af0:	f006 f8d6 	bl	800aca0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2101      	movs	r1, #1
 8004afa:	4618      	mov	r0, r3
 8004afc:	f006 f953 	bl	800ada6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	687e      	ldr	r6, [r7, #4]
 8004b08:	466d      	mov	r5, sp
 8004b0a:	f106 0410 	add.w	r4, r6, #16
 8004b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b1e:	1d33      	adds	r3, r6, #4
 8004b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b22:	6838      	ldr	r0, [r7, #0]
 8004b24:	f006 faba 	bl	800b09c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b3a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004b3a:	b590      	push	{r4, r7, lr}
 8004b3c:	b089      	sub	sp, #36	; 0x24
 8004b3e:	af04      	add	r7, sp, #16
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	4608      	mov	r0, r1
 8004b44:	4611      	mov	r1, r2
 8004b46:	461a      	mov	r2, r3
 8004b48:	4603      	mov	r3, r0
 8004b4a:	70fb      	strb	r3, [r7, #3]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	70bb      	strb	r3, [r7, #2]
 8004b50:	4613      	mov	r3, r2
 8004b52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_HCD_HC_Init+0x28>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e076      	b.n	8004c50 <HAL_HCD_HC_Init+0x116>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	212c      	movs	r1, #44	; 0x2c
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	333d      	adds	r3, #61	; 0x3d
 8004b78:	2200      	movs	r2, #0
 8004b7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	212c      	movs	r1, #44	; 0x2c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	3338      	adds	r3, #56	; 0x38
 8004b8a:	787a      	ldrb	r2, [r7, #1]
 8004b8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	212c      	movs	r1, #44	; 0x2c
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	3340      	adds	r3, #64	; 0x40
 8004b9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b9e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	212c      	movs	r1, #44	; 0x2c
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	3339      	adds	r3, #57	; 0x39
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	212c      	movs	r1, #44	; 0x2c
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	333f      	adds	r3, #63	; 0x3f
 8004bc0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004bc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	78ba      	ldrb	r2, [r7, #2]
 8004bca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bce:	b2d0      	uxtb	r0, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	333a      	adds	r3, #58	; 0x3a
 8004bdc:	4602      	mov	r2, r0
 8004bde:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004be0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	da09      	bge.n	8004bfc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	212c      	movs	r1, #44	; 0x2c
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	333b      	adds	r3, #59	; 0x3b
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e008      	b.n	8004c0e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	212c      	movs	r1, #44	; 0x2c
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	333b      	adds	r3, #59	; 0x3b
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	212c      	movs	r1, #44	; 0x2c
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	333c      	adds	r3, #60	; 0x3c
 8004c1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004c20:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	787c      	ldrb	r4, [r7, #1]
 8004c28:	78ba      	ldrb	r2, [r7, #2]
 8004c2a:	78f9      	ldrb	r1, [r7, #3]
 8004c2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c2e:	9302      	str	r3, [sp, #8]
 8004c30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	4623      	mov	r3, r4
 8004c3e:	f006 fba7 	bl	800b390 <USB_HC_Init>
 8004c42:	4603      	mov	r3, r0
 8004c44:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd90      	pop	{r4, r7, pc}

08004c58 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_HCD_HC_Halt+0x1e>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e00f      	b.n	8004c96 <HAL_HCD_HC_Halt+0x3e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	4611      	mov	r1, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f006 fde3 	bl	800b852 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	4608      	mov	r0, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	461a      	mov	r2, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	70fb      	strb	r3, [r7, #3]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	70bb      	strb	r3, [r7, #2]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	333b      	adds	r3, #59	; 0x3b
 8004cc8:	78ba      	ldrb	r2, [r7, #2]
 8004cca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	212c      	movs	r1, #44	; 0x2c
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	333f      	adds	r3, #63	; 0x3f
 8004cda:	787a      	ldrb	r2, [r7, #1]
 8004cdc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004cde:	7c3b      	ldrb	r3, [r7, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d112      	bne.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	212c      	movs	r1, #44	; 0x2c
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	3342      	adds	r3, #66	; 0x42
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	212c      	movs	r1, #44	; 0x2c
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	333d      	adds	r3, #61	; 0x3d
 8004d04:	7f3a      	ldrb	r2, [r7, #28]
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e008      	b.n	8004d1c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	3342      	adds	r3, #66	; 0x42
 8004d18:	2202      	movs	r2, #2
 8004d1a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004d1c:	787b      	ldrb	r3, [r7, #1]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	f200 80c6 	bhi.w	8004eb0 <HAL_HCD_HC_SubmitRequest+0x210>
 8004d24:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d3d 	.word	0x08004d3d
 8004d30:	08004e9d 	.word	0x08004e9d
 8004d34:	08004da1 	.word	0x08004da1
 8004d38:	08004e1f 	.word	0x08004e1f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004d3c:	7c3b      	ldrb	r3, [r7, #16]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	f040 80b8 	bne.w	8004eb4 <HAL_HCD_HC_SubmitRequest+0x214>
 8004d44:	78bb      	ldrb	r3, [r7, #2]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f040 80b4 	bne.w	8004eb4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004d4c:	8b3b      	ldrh	r3, [r7, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d108      	bne.n	8004d64 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3355      	adds	r3, #85	; 0x55
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	212c      	movs	r1, #44	; 0x2c
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	4413      	add	r3, r2
 8004d70:	3355      	adds	r3, #85	; 0x55
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	212c      	movs	r1, #44	; 0x2c
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
 8004d82:	4413      	add	r3, r2
 8004d84:	3342      	adds	r3, #66	; 0x42
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004d8a:	e093      	b.n	8004eb4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	212c      	movs	r1, #44	; 0x2c
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	4413      	add	r3, r2
 8004d98:	3342      	adds	r3, #66	; 0x42
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	701a      	strb	r2, [r3, #0]
      break;
 8004d9e:	e089      	b.n	8004eb4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004da0:	78bb      	ldrb	r3, [r7, #2]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d11d      	bne.n	8004de2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	212c      	movs	r1, #44	; 0x2c
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	4413      	add	r3, r2
 8004db2:	3355      	adds	r3, #85	; 0x55
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3342      	adds	r3, #66	; 0x42
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004dcc:	e073      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	212c      	movs	r1, #44	; 0x2c
 8004dd4:	fb01 f303 	mul.w	r3, r1, r3
 8004dd8:	4413      	add	r3, r2
 8004dda:	3342      	adds	r3, #66	; 0x42
 8004ddc:	2202      	movs	r2, #2
 8004dde:	701a      	strb	r2, [r3, #0]
      break;
 8004de0:	e069      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	212c      	movs	r1, #44	; 0x2c
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	4413      	add	r3, r2
 8004dee:	3354      	adds	r3, #84	; 0x54
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	212c      	movs	r1, #44	; 0x2c
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	4413      	add	r3, r2
 8004e02:	3342      	adds	r3, #66	; 0x42
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
      break;
 8004e08:	e055      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	212c      	movs	r1, #44	; 0x2c
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	4413      	add	r3, r2
 8004e16:	3342      	adds	r3, #66	; 0x42
 8004e18:	2202      	movs	r2, #2
 8004e1a:	701a      	strb	r2, [r3, #0]
      break;
 8004e1c:	e04b      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004e1e:	78bb      	ldrb	r3, [r7, #2]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d11d      	bne.n	8004e60 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	212c      	movs	r1, #44	; 0x2c
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	4413      	add	r3, r2
 8004e30:	3355      	adds	r3, #85	; 0x55
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	212c      	movs	r1, #44	; 0x2c
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	4413      	add	r3, r2
 8004e44:	3342      	adds	r3, #66	; 0x42
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004e4a:	e034      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	212c      	movs	r1, #44	; 0x2c
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	3342      	adds	r3, #66	; 0x42
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	701a      	strb	r2, [r3, #0]
      break;
 8004e5e:	e02a      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	212c      	movs	r1, #44	; 0x2c
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3354      	adds	r3, #84	; 0x54
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d109      	bne.n	8004e88 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	212c      	movs	r1, #44	; 0x2c
 8004e7a:	fb01 f303 	mul.w	r3, r1, r3
 8004e7e:	4413      	add	r3, r2
 8004e80:	3342      	adds	r3, #66	; 0x42
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
      break;
 8004e86:	e016      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	212c      	movs	r1, #44	; 0x2c
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	4413      	add	r3, r2
 8004e94:	3342      	adds	r3, #66	; 0x42
 8004e96:	2202      	movs	r2, #2
 8004e98:	701a      	strb	r2, [r3, #0]
      break;
 8004e9a:	e00c      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	212c      	movs	r1, #44	; 0x2c
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3342      	adds	r3, #66	; 0x42
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
      break;
 8004eae:	e002      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004eb0:	bf00      	nop
 8004eb2:	e000      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004eb4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	212c      	movs	r1, #44	; 0x2c
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3344      	adds	r3, #68	; 0x44
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	8b3a      	ldrh	r2, [r7, #24]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	202c      	movs	r0, #44	; 0x2c
 8004ed0:	fb00 f303 	mul.w	r3, r0, r3
 8004ed4:	440b      	add	r3, r1
 8004ed6:	334c      	adds	r3, #76	; 0x4c
 8004ed8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3360      	adds	r3, #96	; 0x60
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	212c      	movs	r1, #44	; 0x2c
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3350      	adds	r3, #80	; 0x50
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	212c      	movs	r1, #44	; 0x2c
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	4413      	add	r3, r2
 8004f0a:	3339      	adds	r3, #57	; 0x39
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	212c      	movs	r1, #44	; 0x2c
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3361      	adds	r3, #97	; 0x61
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	222c      	movs	r2, #44	; 0x2c
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	3338      	adds	r3, #56	; 0x38
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	18d1      	adds	r1, r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f006 fb36 	bl	800b5ac <USB_HC_StartXfer>
 8004f40:	4603      	mov	r3, r0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop

08004f4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f006 f859 	bl	800b01a <USB_GetMode>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	f040 80f6 	bne.w	800515c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f006 f83d 	bl	800aff4 <USB_ReadInterrupts>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80ec 	beq.w	800515a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f006 f834 	bl	800aff4 <USB_ReadInterrupts>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f96:	d104      	bne.n	8004fa2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f006 f824 	bl	800aff4 <USB_ReadInterrupts>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb6:	d104      	bne.n	8004fc2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f006 f814 	bl	800aff4 <USB_ReadInterrupts>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fd6:	d104      	bne.n	8004fe2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004fe0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f006 f804 	bl	800aff4 <USB_ReadInterrupts>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d103      	bne.n	8004ffe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f005 fff6 	bl	800aff4 <USB_ReadInterrupts>
 8005008:	4603      	mov	r3, r0
 800500a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800500e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005012:	d11c      	bne.n	800504e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800501c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10f      	bne.n	800504e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800502e:	2110      	movs	r1, #16
 8005030:	6938      	ldr	r0, [r7, #16]
 8005032:	f005 ff05 	bl	800ae40 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005036:	6938      	ldr	r0, [r7, #16]
 8005038:	f005 ff26 	bl	800ae88 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2101      	movs	r1, #1
 8005042:	4618      	mov	r0, r3
 8005044:	f006 f8de 	bl	800b204 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f00c fa69 	bl	8011520 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f005 ffce 	bl	800aff4 <USB_ReadInterrupts>
 8005058:	4603      	mov	r3, r0
 800505a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800505e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005062:	d102      	bne.n	800506a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f001 fa03 	bl	8006470 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f005 ffc0 	bl	800aff4 <USB_ReadInterrupts>
 8005074:	4603      	mov	r3, r0
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b08      	cmp	r3, #8
 800507c:	d106      	bne.n	800508c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f00c fa32 	bl	80114e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2208      	movs	r2, #8
 800508a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f005 ffaf 	bl	800aff4 <USB_ReadInterrupts>
 8005096:	4603      	mov	r3, r0
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b10      	cmp	r3, #16
 800509e:	d101      	bne.n	80050a4 <HAL_HCD_IRQHandler+0x158>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <HAL_HCD_IRQHandler+0x15a>
 80050a4:	2300      	movs	r3, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d012      	beq.n	80050d0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0210 	bic.w	r2, r2, #16
 80050b8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f001 f906 	bl	80062cc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0210 	orr.w	r2, r2, #16
 80050ce:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f005 ff8d 	bl	800aff4 <USB_ReadInterrupts>
 80050da:	4603      	mov	r3, r0
 80050dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050e4:	d13a      	bne.n	800515c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f006 fba0 	bl	800b830 <USB_HC_ReadInterrupt>
 80050f0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	e025      	b.n	8005144 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d018      	beq.n	800513e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800511e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005122:	d106      	bne.n	8005132 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	4619      	mov	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f8ab 	bl	8005286 <HCD_HC_IN_IRQHandler>
 8005130:	e005      	b.n	800513e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fcc6 	bl	8005aca <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	3301      	adds	r3, #1
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	429a      	cmp	r2, r3
 800514c:	d3d4      	bcc.n	80050f8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005156:	615a      	str	r2, [r3, #20]
 8005158:	e000      	b.n	800515c <HAL_HCD_IRQHandler+0x210>
      return;
 800515a:	bf00      	nop
    }
  }
}
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_HCD_Start+0x16>
 8005174:	2302      	movs	r3, #2
 8005176:	e013      	b.n	80051a0 <HAL_HCD_Start+0x3e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2101      	movs	r1, #1
 8005186:	4618      	mov	r0, r3
 8005188:	f006 f8a0 	bl	800b2cc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f005 fde6 	bl	800ad62 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_HCD_Stop+0x16>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e00d      	b.n	80051da <HAL_HCD_Stop+0x32>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f006 fc9a 	bl	800bb04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f006 f842 	bl	800b278 <USB_ResetPort>
 80051f4:	4603      	mov	r3, r0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	460b      	mov	r3, r1
 8005208:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	212c      	movs	r1, #44	; 0x2c
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	4413      	add	r3, r2
 8005216:	3360      	adds	r3, #96	; 0x60
 8005218:	781b      	ldrb	r3, [r3, #0]
}
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	212c      	movs	r1, #44	; 0x2c
 8005238:	fb01 f303 	mul.w	r3, r1, r3
 800523c:	4413      	add	r3, r2
 800523e:	3350      	adds	r3, #80	; 0x50
 8005240:	681b      	ldr	r3, [r3, #0]
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f006 f886 	bl	800b36c <USB_GetCurrentFrame>
 8005260:	4603      	mov	r3, r0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f006 f861 	bl	800b33e <USB_GetHostSpeed>
 800527c:	4603      	mov	r3, r0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	460b      	mov	r3, r1
 8005290:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d119      	bne.n	80052ea <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c2:	461a      	mov	r2, r3
 80052c4:	2304      	movs	r3, #4
 80052c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e2:	f043 0302 	orr.w	r3, r3, #2
 80052e6:	60d3      	str	r3, [r2, #12]
 80052e8:	e101      	b.n	80054ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005300:	d12b      	bne.n	800535a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	461a      	mov	r2, r3
 8005310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005314:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	212c      	movs	r1, #44	; 0x2c
 800531c:	fb01 f303 	mul.w	r3, r1, r3
 8005320:	4413      	add	r3, r2
 8005322:	3361      	adds	r3, #97	; 0x61
 8005324:	2207      	movs	r2, #7
 8005326:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	440a      	add	r2, r1
 800533e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005342:	f043 0302 	orr.w	r3, r3, #2
 8005346:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	4611      	mov	r1, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f006 fa7d 	bl	800b852 <USB_HC_Halt>
 8005358:	e0c9      	b.n	80054ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b20      	cmp	r3, #32
 800536e:	d109      	bne.n	8005384 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	461a      	mov	r2, r3
 800537e:	2320      	movs	r3, #32
 8005380:	6093      	str	r3, [r2, #8]
 8005382:	e0b4      	b.n	80054ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4413      	add	r3, r2
 800538c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b08      	cmp	r3, #8
 8005398:	d133      	bne.n	8005402 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b4:	f043 0302 	orr.w	r3, r3, #2
 80053b8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	212c      	movs	r1, #44	; 0x2c
 80053c0:	fb01 f303 	mul.w	r3, r1, r3
 80053c4:	4413      	add	r3, r2
 80053c6:	3361      	adds	r3, #97	; 0x61
 80053c8:	2205      	movs	r2, #5
 80053ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d8:	461a      	mov	r2, r3
 80053da:	2310      	movs	r3, #16
 80053dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ea:	461a      	mov	r2, r3
 80053ec:	2308      	movs	r3, #8
 80053ee:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	4611      	mov	r1, r2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f006 fa29 	bl	800b852 <USB_HC_Halt>
 8005400:	e075      	b.n	80054ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005418:	d134      	bne.n	8005484 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	440a      	add	r2, r1
 8005430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005434:	f043 0302 	orr.w	r3, r3, #2
 8005438:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	212c      	movs	r1, #44	; 0x2c
 8005440:	fb01 f303 	mul.w	r3, r1, r3
 8005444:	4413      	add	r3, r2
 8005446:	3361      	adds	r3, #97	; 0x61
 8005448:	2208      	movs	r2, #8
 800544a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4413      	add	r3, r2
 8005454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005458:	461a      	mov	r2, r3
 800545a:	2310      	movs	r3, #16
 800545c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4413      	add	r3, r2
 8005466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546a:	461a      	mov	r2, r3
 800546c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005470:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	4611      	mov	r1, r2
 800547c:	4618      	mov	r0, r3
 800547e:	f006 f9e8 	bl	800b852 <USB_HC_Halt>
 8005482:	e034      	b.n	80054ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4413      	add	r3, r2
 800548c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005496:	2b80      	cmp	r3, #128	; 0x80
 8005498:	d129      	bne.n	80054ee <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	212c      	movs	r1, #44	; 0x2c
 80054c0:	fb01 f303 	mul.w	r3, r1, r3
 80054c4:	4413      	add	r3, r2
 80054c6:	3361      	adds	r3, #97	; 0x61
 80054c8:	2206      	movs	r2, #6
 80054ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f006 f9bb 	bl	800b852 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e8:	461a      	mov	r2, r3
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005504:	d122      	bne.n	800554c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4413      	add	r3, r2
 800550e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	440a      	add	r2, r1
 800551c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	4611      	mov	r1, r2
 8005530:	4618      	mov	r0, r3
 8005532:	f006 f98e 	bl	800b852 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005542:	461a      	mov	r2, r3
 8005544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005548:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800554a:	e2ba      	b.n	8005ac2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	4413      	add	r3, r2
 8005554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b01      	cmp	r3, #1
 8005560:	f040 811b 	bne.w	800579a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d019      	beq.n	80055a0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	212c      	movs	r1, #44	; 0x2c
 8005572:	fb01 f303 	mul.w	r3, r1, r3
 8005576:	4413      	add	r3, r2
 8005578:	3348      	adds	r3, #72	; 0x48
 800557a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	0159      	lsls	r1, r3, #5
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	440b      	add	r3, r1
 8005584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	202c      	movs	r0, #44	; 0x2c
 8005596:	fb00 f303 	mul.w	r3, r0, r3
 800559a:	440b      	add	r3, r1
 800559c:	3350      	adds	r3, #80	; 0x50
 800559e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	212c      	movs	r1, #44	; 0x2c
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	4413      	add	r3, r2
 80055ac:	3361      	adds	r3, #97	; 0x61
 80055ae:	2201      	movs	r2, #1
 80055b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	212c      	movs	r1, #44	; 0x2c
 80055b8:	fb01 f303 	mul.w	r3, r1, r3
 80055bc:	4413      	add	r3, r2
 80055be:	335c      	adds	r3, #92	; 0x5c
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d0:	461a      	mov	r2, r3
 80055d2:	2301      	movs	r3, #1
 80055d4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	212c      	movs	r1, #44	; 0x2c
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	4413      	add	r3, r2
 80055e2:	333f      	adds	r3, #63	; 0x3f
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	212c      	movs	r1, #44	; 0x2c
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	4413      	add	r3, r2
 80055f6:	333f      	adds	r3, #63	; 0x3f
 80055f8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d121      	bne.n	8005642 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	440a      	add	r2, r1
 8005614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005618:	f043 0302 	orr.w	r3, r3, #2
 800561c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f006 f912 	bl	800b852 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	461a      	mov	r2, r3
 800563c:	2310      	movs	r3, #16
 800563e:	6093      	str	r3, [r2, #8]
 8005640:	e066      	b.n	8005710 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	212c      	movs	r1, #44	; 0x2c
 8005648:	fb01 f303 	mul.w	r3, r1, r3
 800564c:	4413      	add	r3, r2
 800564e:	333f      	adds	r3, #63	; 0x3f
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b03      	cmp	r3, #3
 8005654:	d127      	bne.n	80056a6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	440a      	add	r2, r1
 800566c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005670:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005674:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	212c      	movs	r1, #44	; 0x2c
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	4413      	add	r3, r2
 8005682:	3360      	adds	r3, #96	; 0x60
 8005684:	2201      	movs	r2, #1
 8005686:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	b2d9      	uxtb	r1, r3
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	202c      	movs	r0, #44	; 0x2c
 8005692:	fb00 f303 	mul.w	r3, r0, r3
 8005696:	4413      	add	r3, r2
 8005698:	3360      	adds	r3, #96	; 0x60
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f00b ff4c 	bl	801153c <HAL_HCD_HC_NotifyURBChange_Callback>
 80056a4:	e034      	b.n	8005710 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	212c      	movs	r1, #44	; 0x2c
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	4413      	add	r3, r2
 80056b2:	333f      	adds	r3, #63	; 0x3f
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d12a      	bne.n	8005710 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	212c      	movs	r1, #44	; 0x2c
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	4413      	add	r3, r2
 80056c6:	3360      	adds	r3, #96	; 0x60
 80056c8:	2201      	movs	r2, #1
 80056ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	212c      	movs	r1, #44	; 0x2c
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	3354      	adds	r3, #84	; 0x54
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	f083 0301 	eor.w	r3, r3, #1
 80056e0:	b2d8      	uxtb	r0, r3
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	212c      	movs	r1, #44	; 0x2c
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	4413      	add	r3, r2
 80056ee:	3354      	adds	r3, #84	; 0x54
 80056f0:	4602      	mov	r2, r0
 80056f2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	b2d9      	uxtb	r1, r3
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	202c      	movs	r0, #44	; 0x2c
 80056fe:	fb00 f303 	mul.w	r3, r0, r3
 8005702:	4413      	add	r3, r2
 8005704:	3360      	adds	r3, #96	; 0x60
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f00b ff16 	bl	801153c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d12b      	bne.n	8005770 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	212c      	movs	r1, #44	; 0x2c
 800571e:	fb01 f303 	mul.w	r3, r1, r3
 8005722:	4413      	add	r3, r2
 8005724:	3348      	adds	r3, #72	; 0x48
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	202c      	movs	r0, #44	; 0x2c
 800572e:	fb00 f202 	mul.w	r2, r0, r2
 8005732:	440a      	add	r2, r1
 8005734:	3240      	adds	r2, #64	; 0x40
 8005736:	8812      	ldrh	r2, [r2, #0]
 8005738:	fbb3 f3f2 	udiv	r3, r3, r2
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 81be 	beq.w	8005ac2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	212c      	movs	r1, #44	; 0x2c
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	4413      	add	r3, r2
 8005752:	3354      	adds	r3, #84	; 0x54
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f083 0301 	eor.w	r3, r3, #1
 800575a:	b2d8      	uxtb	r0, r3
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	212c      	movs	r1, #44	; 0x2c
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	4413      	add	r3, r2
 8005768:	3354      	adds	r3, #84	; 0x54
 800576a:	4602      	mov	r2, r0
 800576c:	701a      	strb	r2, [r3, #0]
}
 800576e:	e1a8      	b.n	8005ac2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	212c      	movs	r1, #44	; 0x2c
 8005776:	fb01 f303 	mul.w	r3, r1, r3
 800577a:	4413      	add	r3, r2
 800577c:	3354      	adds	r3, #84	; 0x54
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f083 0301 	eor.w	r3, r3, #1
 8005784:	b2d8      	uxtb	r0, r3
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	212c      	movs	r1, #44	; 0x2c
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	4413      	add	r3, r2
 8005792:	3354      	adds	r3, #84	; 0x54
 8005794:	4602      	mov	r2, r0
 8005796:	701a      	strb	r2, [r3, #0]
}
 8005798:	e193      	b.n	8005ac2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	f040 8106 	bne.w	80059be <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057cc:	f023 0302 	bic.w	r3, r3, #2
 80057d0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	212c      	movs	r1, #44	; 0x2c
 80057d8:	fb01 f303 	mul.w	r3, r1, r3
 80057dc:	4413      	add	r3, r2
 80057de:	3361      	adds	r3, #97	; 0x61
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d109      	bne.n	80057fa <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	212c      	movs	r1, #44	; 0x2c
 80057ec:	fb01 f303 	mul.w	r3, r1, r3
 80057f0:	4413      	add	r3, r2
 80057f2:	3360      	adds	r3, #96	; 0x60
 80057f4:	2201      	movs	r2, #1
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e0c9      	b.n	800598e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	212c      	movs	r1, #44	; 0x2c
 8005800:	fb01 f303 	mul.w	r3, r1, r3
 8005804:	4413      	add	r3, r2
 8005806:	3361      	adds	r3, #97	; 0x61
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b05      	cmp	r3, #5
 800580c:	d109      	bne.n	8005822 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	212c      	movs	r1, #44	; 0x2c
 8005814:	fb01 f303 	mul.w	r3, r1, r3
 8005818:	4413      	add	r3, r2
 800581a:	3360      	adds	r3, #96	; 0x60
 800581c:	2205      	movs	r2, #5
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e0b5      	b.n	800598e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	212c      	movs	r1, #44	; 0x2c
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	4413      	add	r3, r2
 800582e:	3361      	adds	r3, #97	; 0x61
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b06      	cmp	r3, #6
 8005834:	d009      	beq.n	800584a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	212c      	movs	r1, #44	; 0x2c
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	4413      	add	r3, r2
 8005842:	3361      	adds	r3, #97	; 0x61
 8005844:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005846:	2b08      	cmp	r3, #8
 8005848:	d150      	bne.n	80058ec <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	212c      	movs	r1, #44	; 0x2c
 8005850:	fb01 f303 	mul.w	r3, r1, r3
 8005854:	4413      	add	r3, r2
 8005856:	335c      	adds	r3, #92	; 0x5c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	202c      	movs	r0, #44	; 0x2c
 8005862:	fb00 f303 	mul.w	r3, r0, r3
 8005866:	440b      	add	r3, r1
 8005868:	335c      	adds	r3, #92	; 0x5c
 800586a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	212c      	movs	r1, #44	; 0x2c
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	4413      	add	r3, r2
 8005878:	335c      	adds	r3, #92	; 0x5c
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d912      	bls.n	80058a6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	212c      	movs	r1, #44	; 0x2c
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	4413      	add	r3, r2
 800588c:	335c      	adds	r3, #92	; 0x5c
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	212c      	movs	r1, #44	; 0x2c
 8005898:	fb01 f303 	mul.w	r3, r1, r3
 800589c:	4413      	add	r3, r2
 800589e:	3360      	adds	r3, #96	; 0x60
 80058a0:	2204      	movs	r2, #4
 80058a2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80058a4:	e073      	b.n	800598e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	212c      	movs	r1, #44	; 0x2c
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	4413      	add	r3, r2
 80058b2:	3360      	adds	r3, #96	; 0x60
 80058b4:	2202      	movs	r2, #2
 80058b6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058ce:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058d6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e4:	461a      	mov	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80058ea:	e050      	b.n	800598e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	212c      	movs	r1, #44	; 0x2c
 80058f2:	fb01 f303 	mul.w	r3, r1, r3
 80058f6:	4413      	add	r3, r2
 80058f8:	3361      	adds	r3, #97	; 0x61
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d122      	bne.n	8005946 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	212c      	movs	r1, #44	; 0x2c
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	4413      	add	r3, r2
 800590c:	3360      	adds	r3, #96	; 0x60
 800590e:	2202      	movs	r2, #2
 8005910:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4413      	add	r3, r2
 800591a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005928:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005930:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	461a      	mov	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	e023      	b.n	800598e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	212c      	movs	r1, #44	; 0x2c
 800594c:	fb01 f303 	mul.w	r3, r1, r3
 8005950:	4413      	add	r3, r2
 8005952:	3361      	adds	r3, #97	; 0x61
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b07      	cmp	r3, #7
 8005958:	d119      	bne.n	800598e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	212c      	movs	r1, #44	; 0x2c
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	4413      	add	r3, r2
 8005966:	335c      	adds	r3, #92	; 0x5c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	202c      	movs	r0, #44	; 0x2c
 8005972:	fb00 f303 	mul.w	r3, r0, r3
 8005976:	440b      	add	r3, r1
 8005978:	335c      	adds	r3, #92	; 0x5c
 800597a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	212c      	movs	r1, #44	; 0x2c
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	4413      	add	r3, r2
 8005988:	3360      	adds	r3, #96	; 0x60
 800598a:	2204      	movs	r2, #4
 800598c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599a:	461a      	mov	r2, r3
 800599c:	2302      	movs	r3, #2
 800599e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	b2d9      	uxtb	r1, r3
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	202c      	movs	r0, #44	; 0x2c
 80059aa:	fb00 f303 	mul.w	r3, r0, r3
 80059ae:	4413      	add	r3, r2
 80059b0:	3360      	adds	r3, #96	; 0x60
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f00b fdc0 	bl	801153c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80059bc:	e081      	b.n	8005ac2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d176      	bne.n	8005ac2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	212c      	movs	r1, #44	; 0x2c
 80059da:	fb01 f303 	mul.w	r3, r1, r3
 80059de:	4413      	add	r3, r2
 80059e0:	333f      	adds	r3, #63	; 0x3f
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d121      	bne.n	8005a2c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	212c      	movs	r1, #44	; 0x2c
 80059ee:	fb01 f303 	mul.w	r3, r1, r3
 80059f2:	4413      	add	r3, r2
 80059f4:	335c      	adds	r3, #92	; 0x5c
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a14:	f043 0302 	orr.w	r3, r3, #2
 8005a18:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	4611      	mov	r1, r2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f005 ff14 	bl	800b852 <USB_HC_Halt>
 8005a2a:	e041      	b.n	8005ab0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	212c      	movs	r1, #44	; 0x2c
 8005a32:	fb01 f303 	mul.w	r3, r1, r3
 8005a36:	4413      	add	r3, r2
 8005a38:	333f      	adds	r3, #63	; 0x3f
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d009      	beq.n	8005a54 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	212c      	movs	r1, #44	; 0x2c
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	333f      	adds	r3, #63	; 0x3f
 8005a4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d12d      	bne.n	8005ab0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	212c      	movs	r1, #44	; 0x2c
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	4413      	add	r3, r2
 8005a60:	335c      	adds	r3, #92	; 0x5c
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d120      	bne.n	8005ab0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	212c      	movs	r1, #44	; 0x2c
 8005a74:	fb01 f303 	mul.w	r3, r1, r3
 8005a78:	4413      	add	r3, r2
 8005a7a:	3361      	adds	r3, #97	; 0x61
 8005a7c:	2203      	movs	r2, #3
 8005a7e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	0151      	lsls	r1, r2, #5
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	440a      	add	r2, r1
 8005a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a9a:	f043 0302 	orr.w	r3, r3, #2
 8005a9e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f005 fed1 	bl	800b852 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abc:	461a      	mov	r2, r3
 8005abe:	2310      	movs	r3, #16
 8005ac0:	6093      	str	r3, [r2, #8]
}
 8005ac2:	bf00      	nop
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b088      	sub	sp, #32
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d119      	bne.n	8005b2e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b06:	461a      	mov	r2, r3
 8005b08:	2304      	movs	r3, #4
 8005b0a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b26:	f043 0302 	orr.w	r3, r3, #2
 8005b2a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005b2c:	e3ca      	b.n	80062c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d13e      	bne.n	8005bc2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b50:	461a      	mov	r2, r3
 8005b52:	2320      	movs	r3, #32
 8005b54:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	212c      	movs	r1, #44	; 0x2c
 8005b5c:	fb01 f303 	mul.w	r3, r1, r3
 8005b60:	4413      	add	r3, r2
 8005b62:	333d      	adds	r3, #61	; 0x3d
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	f040 83ac 	bne.w	80062c4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	212c      	movs	r1, #44	; 0x2c
 8005b72:	fb01 f303 	mul.w	r3, r1, r3
 8005b76:	4413      	add	r3, r2
 8005b78:	333d      	adds	r3, #61	; 0x3d
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	212c      	movs	r1, #44	; 0x2c
 8005b84:	fb01 f303 	mul.w	r3, r1, r3
 8005b88:	4413      	add	r3, r2
 8005b8a:	3360      	adds	r3, #96	; 0x60
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005baa:	f043 0302 	orr.w	r3, r3, #2
 8005bae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	4611      	mov	r1, r2
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f005 fe49 	bl	800b852 <USB_HC_Halt>
}
 8005bc0:	e380      	b.n	80062c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd8:	d122      	bne.n	8005c20 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf4:	f043 0302 	orr.w	r3, r3, #2
 8005bf8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	4611      	mov	r1, r2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f005 fe24 	bl	800b852 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c16:	461a      	mov	r2, r3
 8005c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c1c:	6093      	str	r3, [r2, #8]
}
 8005c1e:	e351      	b.n	80062c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d150      	bne.n	8005cd8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	212c      	movs	r1, #44	; 0x2c
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	4413      	add	r3, r2
 8005c42:	335c      	adds	r3, #92	; 0x5c
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d111      	bne.n	8005c82 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	212c      	movs	r1, #44	; 0x2c
 8005c64:	fb01 f303 	mul.w	r3, r1, r3
 8005c68:	4413      	add	r3, r2
 8005c6a:	333d      	adds	r3, #61	; 0x3d
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	2340      	movs	r3, #64	; 0x40
 8005c80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c9c:	f043 0302 	orr.w	r3, r3, #2
 8005ca0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	4611      	mov	r1, r2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f005 fdd0 	bl	800b852 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	212c      	movs	r1, #44	; 0x2c
 8005cca:	fb01 f303 	mul.w	r3, r1, r3
 8005cce:	4413      	add	r3, r2
 8005cd0:	3361      	adds	r3, #97	; 0x61
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	701a      	strb	r2, [r3, #0]
}
 8005cd6:	e2f5      	b.n	80062c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d13c      	bne.n	8005d68 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	212c      	movs	r1, #44	; 0x2c
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3361      	adds	r3, #97	; 0x61
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	212c      	movs	r1, #44	; 0x2c
 8005d06:	fb01 f303 	mul.w	r3, r1, r3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	333d      	adds	r3, #61	; 0x3d
 8005d0e:	2201      	movs	r2, #1
 8005d10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	212c      	movs	r1, #44	; 0x2c
 8005d18:	fb01 f303 	mul.w	r3, r1, r3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	335c      	adds	r3, #92	; 0x5c
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	0151      	lsls	r1, r2, #5
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	440a      	add	r2, r1
 8005d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d3e:	f043 0302 	orr.w	r3, r3, #2
 8005d42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f005 fd7f 	bl	800b852 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d60:	461a      	mov	r2, r3
 8005d62:	2340      	movs	r3, #64	; 0x40
 8005d64:	6093      	str	r3, [r2, #8]
}
 8005d66:	e2ad      	b.n	80062c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d12a      	bne.n	8005dd4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005daa:	f043 0302 	orr.w	r3, r3, #2
 8005dae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	4611      	mov	r1, r2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f005 fd49 	bl	800b852 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	212c      	movs	r1, #44	; 0x2c
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	4413      	add	r3, r2
 8005dcc:	3361      	adds	r3, #97	; 0x61
 8005dce:	2205      	movs	r2, #5
 8005dd0:	701a      	strb	r2, [r3, #0]
}
 8005dd2:	e277      	b.n	80062c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	2b10      	cmp	r3, #16
 8005de8:	d150      	bne.n	8005e8c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	212c      	movs	r1, #44	; 0x2c
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	335c      	adds	r3, #92	; 0x5c
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	212c      	movs	r1, #44	; 0x2c
 8005e02:	fb01 f303 	mul.w	r3, r1, r3
 8005e06:	4413      	add	r3, r2
 8005e08:	3361      	adds	r3, #97	; 0x61
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	212c      	movs	r1, #44	; 0x2c
 8005e14:	fb01 f303 	mul.w	r3, r1, r3
 8005e18:	4413      	add	r3, r2
 8005e1a:	333d      	adds	r3, #61	; 0x3d
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d112      	bne.n	8005e48 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	212c      	movs	r1, #44	; 0x2c
 8005e28:	fb01 f303 	mul.w	r3, r1, r3
 8005e2c:	4413      	add	r3, r2
 8005e2e:	333c      	adds	r3, #60	; 0x3c
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d108      	bne.n	8005e48 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	212c      	movs	r1, #44	; 0x2c
 8005e3c:	fb01 f303 	mul.w	r3, r1, r3
 8005e40:	4413      	add	r3, r2
 8005e42:	333d      	adds	r3, #61	; 0x3d
 8005e44:	2201      	movs	r2, #1
 8005e46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	0151      	lsls	r1, r2, #5
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	440a      	add	r2, r1
 8005e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e62:	f043 0302 	orr.w	r3, r3, #2
 8005e66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	4611      	mov	r1, r2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f005 fced 	bl	800b852 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e84:	461a      	mov	r2, r3
 8005e86:	2310      	movs	r3, #16
 8005e88:	6093      	str	r3, [r2, #8]
}
 8005e8a:	e21b      	b.n	80062c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9e:	2b80      	cmp	r3, #128	; 0x80
 8005ea0:	d174      	bne.n	8005f8c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d121      	bne.n	8005eee <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	212c      	movs	r1, #44	; 0x2c
 8005eb0:	fb01 f303 	mul.w	r3, r1, r3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	3361      	adds	r3, #97	; 0x61
 8005eb8:	2206      	movs	r2, #6
 8005eba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed6:	f043 0302 	orr.w	r3, r3, #2
 8005eda:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f005 fcb3 	bl	800b852 <USB_HC_Halt>
 8005eec:	e044      	b.n	8005f78 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	212c      	movs	r1, #44	; 0x2c
 8005ef4:	fb01 f303 	mul.w	r3, r1, r3
 8005ef8:	4413      	add	r3, r2
 8005efa:	335c      	adds	r3, #92	; 0x5c
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	202c      	movs	r0, #44	; 0x2c
 8005f06:	fb00 f303 	mul.w	r3, r0, r3
 8005f0a:	440b      	add	r3, r1
 8005f0c:	335c      	adds	r3, #92	; 0x5c
 8005f0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	212c      	movs	r1, #44	; 0x2c
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	335c      	adds	r3, #92	; 0x5c
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d920      	bls.n	8005f66 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	212c      	movs	r1, #44	; 0x2c
 8005f2a:	fb01 f303 	mul.w	r3, r1, r3
 8005f2e:	4413      	add	r3, r2
 8005f30:	335c      	adds	r3, #92	; 0x5c
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	212c      	movs	r1, #44	; 0x2c
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	4413      	add	r3, r2
 8005f42:	3360      	adds	r3, #96	; 0x60
 8005f44:	2204      	movs	r2, #4
 8005f46:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	b2d9      	uxtb	r1, r3
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	202c      	movs	r0, #44	; 0x2c
 8005f52:	fb00 f303 	mul.w	r3, r0, r3
 8005f56:	4413      	add	r3, r2
 8005f58:	3360      	adds	r3, #96	; 0x60
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f00b faec 	bl	801153c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005f64:	e008      	b.n	8005f78 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	212c      	movs	r1, #44	; 0x2c
 8005f6c:	fb01 f303 	mul.w	r3, r1, r3
 8005f70:	4413      	add	r3, r2
 8005f72:	3360      	adds	r3, #96	; 0x60
 8005f74:	2202      	movs	r2, #2
 8005f76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f84:	461a      	mov	r2, r3
 8005f86:	2380      	movs	r3, #128	; 0x80
 8005f88:	6093      	str	r3, [r2, #8]
}
 8005f8a:	e19b      	b.n	80062c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa2:	d134      	bne.n	800600e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fbe:	f043 0302 	orr.w	r3, r3, #2
 8005fc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f005 fc3f 	bl	800b852 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	2310      	movs	r3, #16
 8005fe4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	212c      	movs	r1, #44	; 0x2c
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	4413      	add	r3, r2
 8006006:	3361      	adds	r3, #97	; 0x61
 8006008:	2208      	movs	r2, #8
 800600a:	701a      	strb	r2, [r3, #0]
}
 800600c:	e15a      	b.n	80062c4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	4413      	add	r3, r2
 8006016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b02      	cmp	r3, #2
 8006022:	f040 814f 	bne.w	80062c4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	4413      	add	r3, r2
 800602e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	0151      	lsls	r1, r2, #5
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	440a      	add	r2, r1
 800603c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006040:	f023 0302 	bic.w	r3, r3, #2
 8006044:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	212c      	movs	r1, #44	; 0x2c
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	4413      	add	r3, r2
 8006052:	3361      	adds	r3, #97	; 0x61
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d17d      	bne.n	8006156 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	212c      	movs	r1, #44	; 0x2c
 8006060:	fb01 f303 	mul.w	r3, r1, r3
 8006064:	4413      	add	r3, r2
 8006066:	3360      	adds	r3, #96	; 0x60
 8006068:	2201      	movs	r2, #1
 800606a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	212c      	movs	r1, #44	; 0x2c
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	4413      	add	r3, r2
 8006078:	333f      	adds	r3, #63	; 0x3f
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d00a      	beq.n	8006096 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	212c      	movs	r1, #44	; 0x2c
 8006086:	fb01 f303 	mul.w	r3, r1, r3
 800608a:	4413      	add	r3, r2
 800608c:	333f      	adds	r3, #63	; 0x3f
 800608e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006090:	2b03      	cmp	r3, #3
 8006092:	f040 8100 	bne.w	8006296 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d113      	bne.n	80060c6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	212c      	movs	r1, #44	; 0x2c
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	4413      	add	r3, r2
 80060aa:	3355      	adds	r3, #85	; 0x55
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	f083 0301 	eor.w	r3, r3, #1
 80060b2:	b2d8      	uxtb	r0, r3
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	212c      	movs	r1, #44	; 0x2c
 80060ba:	fb01 f303 	mul.w	r3, r1, r3
 80060be:	4413      	add	r3, r2
 80060c0:	3355      	adds	r3, #85	; 0x55
 80060c2:	4602      	mov	r2, r0
 80060c4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	f040 80e3 	bne.w	8006296 <HCD_HC_OUT_IRQHandler+0x7cc>
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	212c      	movs	r1, #44	; 0x2c
 80060d6:	fb01 f303 	mul.w	r3, r1, r3
 80060da:	4413      	add	r3, r2
 80060dc:	334c      	adds	r3, #76	; 0x4c
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 80d8 	beq.w	8006296 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	212c      	movs	r1, #44	; 0x2c
 80060ec:	fb01 f303 	mul.w	r3, r1, r3
 80060f0:	4413      	add	r3, r2
 80060f2:	334c      	adds	r3, #76	; 0x4c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	202c      	movs	r0, #44	; 0x2c
 80060fc:	fb00 f202 	mul.w	r2, r0, r2
 8006100:	440a      	add	r2, r1
 8006102:	3240      	adds	r2, #64	; 0x40
 8006104:	8812      	ldrh	r2, [r2, #0]
 8006106:	4413      	add	r3, r2
 8006108:	3b01      	subs	r3, #1
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	202c      	movs	r0, #44	; 0x2c
 8006110:	fb00 f202 	mul.w	r2, r0, r2
 8006114:	440a      	add	r2, r1
 8006116:	3240      	adds	r2, #64	; 0x40
 8006118:	8812      	ldrh	r2, [r2, #0]
 800611a:	fbb3 f3f2 	udiv	r3, r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 80b5 	beq.w	8006296 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	212c      	movs	r1, #44	; 0x2c
 8006132:	fb01 f303 	mul.w	r3, r1, r3
 8006136:	4413      	add	r3, r2
 8006138:	3355      	adds	r3, #85	; 0x55
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	f083 0301 	eor.w	r3, r3, #1
 8006140:	b2d8      	uxtb	r0, r3
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	212c      	movs	r1, #44	; 0x2c
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	4413      	add	r3, r2
 800614e:	3355      	adds	r3, #85	; 0x55
 8006150:	4602      	mov	r2, r0
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e09f      	b.n	8006296 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	212c      	movs	r1, #44	; 0x2c
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	4413      	add	r3, r2
 8006162:	3361      	adds	r3, #97	; 0x61
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b03      	cmp	r3, #3
 8006168:	d109      	bne.n	800617e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	212c      	movs	r1, #44	; 0x2c
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	4413      	add	r3, r2
 8006176:	3360      	adds	r3, #96	; 0x60
 8006178:	2202      	movs	r2, #2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	e08b      	b.n	8006296 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	212c      	movs	r1, #44	; 0x2c
 8006184:	fb01 f303 	mul.w	r3, r1, r3
 8006188:	4413      	add	r3, r2
 800618a:	3361      	adds	r3, #97	; 0x61
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b04      	cmp	r3, #4
 8006190:	d109      	bne.n	80061a6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	212c      	movs	r1, #44	; 0x2c
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	4413      	add	r3, r2
 800619e:	3360      	adds	r3, #96	; 0x60
 80061a0:	2202      	movs	r2, #2
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	e077      	b.n	8006296 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	212c      	movs	r1, #44	; 0x2c
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	3361      	adds	r3, #97	; 0x61
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b05      	cmp	r3, #5
 80061b8:	d109      	bne.n	80061ce <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	212c      	movs	r1, #44	; 0x2c
 80061c0:	fb01 f303 	mul.w	r3, r1, r3
 80061c4:	4413      	add	r3, r2
 80061c6:	3360      	adds	r3, #96	; 0x60
 80061c8:	2205      	movs	r2, #5
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	e063      	b.n	8006296 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	212c      	movs	r1, #44	; 0x2c
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	4413      	add	r3, r2
 80061da:	3361      	adds	r3, #97	; 0x61
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b06      	cmp	r3, #6
 80061e0:	d009      	beq.n	80061f6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	212c      	movs	r1, #44	; 0x2c
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	4413      	add	r3, r2
 80061ee:	3361      	adds	r3, #97	; 0x61
 80061f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d14f      	bne.n	8006296 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	212c      	movs	r1, #44	; 0x2c
 80061fc:	fb01 f303 	mul.w	r3, r1, r3
 8006200:	4413      	add	r3, r2
 8006202:	335c      	adds	r3, #92	; 0x5c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	202c      	movs	r0, #44	; 0x2c
 800620e:	fb00 f303 	mul.w	r3, r0, r3
 8006212:	440b      	add	r3, r1
 8006214:	335c      	adds	r3, #92	; 0x5c
 8006216:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	212c      	movs	r1, #44	; 0x2c
 800621e:	fb01 f303 	mul.w	r3, r1, r3
 8006222:	4413      	add	r3, r2
 8006224:	335c      	adds	r3, #92	; 0x5c
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d912      	bls.n	8006252 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	212c      	movs	r1, #44	; 0x2c
 8006232:	fb01 f303 	mul.w	r3, r1, r3
 8006236:	4413      	add	r3, r2
 8006238:	335c      	adds	r3, #92	; 0x5c
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	212c      	movs	r1, #44	; 0x2c
 8006244:	fb01 f303 	mul.w	r3, r1, r3
 8006248:	4413      	add	r3, r2
 800624a:	3360      	adds	r3, #96	; 0x60
 800624c:	2204      	movs	r2, #4
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	e021      	b.n	8006296 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	212c      	movs	r1, #44	; 0x2c
 8006258:	fb01 f303 	mul.w	r3, r1, r3
 800625c:	4413      	add	r3, r2
 800625e:	3360      	adds	r3, #96	; 0x60
 8006260:	2202      	movs	r2, #2
 8006262:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	4413      	add	r3, r2
 800626c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800627a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006282:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	4413      	add	r3, r2
 800628c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006290:	461a      	mov	r2, r3
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	4413      	add	r3, r2
 800629e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a2:	461a      	mov	r2, r3
 80062a4:	2302      	movs	r3, #2
 80062a6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	b2d9      	uxtb	r1, r3
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	202c      	movs	r0, #44	; 0x2c
 80062b2:	fb00 f303 	mul.w	r3, r0, r3
 80062b6:	4413      	add	r3, r2
 80062b8:	3360      	adds	r3, #96	; 0x60
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f00b f93c 	bl	801153c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80062c4:	bf00      	nop
 80062c6:	3720      	adds	r7, #32
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	; 0x28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	0c5b      	lsrs	r3, r3, #17
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	091b      	lsrs	r3, r3, #4
 80062fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006300:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b02      	cmp	r3, #2
 8006306:	d004      	beq.n	8006312 <HCD_RXQLVL_IRQHandler+0x46>
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2b05      	cmp	r3, #5
 800630c:	f000 80a9 	beq.w	8006462 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006310:	e0aa      	b.n	8006468 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80a6 	beq.w	8006466 <HCD_RXQLVL_IRQHandler+0x19a>
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	212c      	movs	r1, #44	; 0x2c
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	4413      	add	r3, r2
 8006326:	3344      	adds	r3, #68	; 0x44
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 809b 	beq.w	8006466 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	212c      	movs	r1, #44	; 0x2c
 8006336:	fb01 f303 	mul.w	r3, r1, r3
 800633a:	4413      	add	r3, r2
 800633c:	3350      	adds	r3, #80	; 0x50
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	441a      	add	r2, r3
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	202c      	movs	r0, #44	; 0x2c
 800634a:	fb00 f303 	mul.w	r3, r0, r3
 800634e:	440b      	add	r3, r1
 8006350:	334c      	adds	r3, #76	; 0x4c
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d87a      	bhi.n	800644e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	212c      	movs	r1, #44	; 0x2c
 8006362:	fb01 f303 	mul.w	r3, r1, r3
 8006366:	4413      	add	r3, r2
 8006368:	3344      	adds	r3, #68	; 0x44
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	b292      	uxth	r2, r2
 8006370:	4619      	mov	r1, r3
 8006372:	f004 fde7 	bl	800af44 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	212c      	movs	r1, #44	; 0x2c
 800637c:	fb01 f303 	mul.w	r3, r1, r3
 8006380:	4413      	add	r3, r2
 8006382:	3344      	adds	r3, #68	; 0x44
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	441a      	add	r2, r3
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	202c      	movs	r0, #44	; 0x2c
 8006390:	fb00 f303 	mul.w	r3, r0, r3
 8006394:	440b      	add	r3, r1
 8006396:	3344      	adds	r3, #68	; 0x44
 8006398:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	212c      	movs	r1, #44	; 0x2c
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	4413      	add	r3, r2
 80063a6:	3350      	adds	r3, #80	; 0x50
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	441a      	add	r2, r3
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	202c      	movs	r0, #44	; 0x2c
 80063b4:	fb00 f303 	mul.w	r3, r0, r3
 80063b8:	440b      	add	r3, r1
 80063ba:	3350      	adds	r3, #80	; 0x50
 80063bc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	0cdb      	lsrs	r3, r3, #19
 80063ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	212c      	movs	r1, #44	; 0x2c
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	4413      	add	r3, r2
 80063e0:	3340      	adds	r3, #64	; 0x40
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d13c      	bne.n	8006466 <HCD_RXQLVL_IRQHandler+0x19a>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d039      	beq.n	8006466 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006408:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006410:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641e:	461a      	mov	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	212c      	movs	r1, #44	; 0x2c
 800642a:	fb01 f303 	mul.w	r3, r1, r3
 800642e:	4413      	add	r3, r2
 8006430:	3354      	adds	r3, #84	; 0x54
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f083 0301 	eor.w	r3, r3, #1
 8006438:	b2d8      	uxtb	r0, r3
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	212c      	movs	r1, #44	; 0x2c
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	4413      	add	r3, r2
 8006446:	3354      	adds	r3, #84	; 0x54
 8006448:	4602      	mov	r2, r0
 800644a:	701a      	strb	r2, [r3, #0]
      break;
 800644c:	e00b      	b.n	8006466 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	212c      	movs	r1, #44	; 0x2c
 8006454:	fb01 f303 	mul.w	r3, r1, r3
 8006458:	4413      	add	r3, r2
 800645a:	3360      	adds	r3, #96	; 0x60
 800645c:	2204      	movs	r2, #4
 800645e:	701a      	strb	r2, [r3, #0]
      break;
 8006460:	e001      	b.n	8006466 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006462:	bf00      	nop
 8006464:	e000      	b.n	8006468 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006466:	bf00      	nop
  }
}
 8006468:	bf00      	nop
 800646a:	3728      	adds	r7, #40	; 0x28
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800649c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d10b      	bne.n	80064c0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d102      	bne.n	80064b8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f00b f826 	bl	8011504 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f043 0302 	orr.w	r3, r3, #2
 80064be:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d132      	bne.n	8006530 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f043 0308 	orr.w	r3, r3, #8
 80064d0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d126      	bne.n	800652a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d113      	bne.n	800650c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80064ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064ee:	d106      	bne.n	80064fe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2102      	movs	r1, #2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f004 fe84 	bl	800b204 <USB_InitFSLSPClkSel>
 80064fc:	e011      	b.n	8006522 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2101      	movs	r1, #1
 8006504:	4618      	mov	r0, r3
 8006506:	f004 fe7d 	bl	800b204 <USB_InitFSLSPClkSel>
 800650a:	e00a      	b.n	8006522 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d106      	bne.n	8006522 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800651a:	461a      	mov	r2, r3
 800651c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006520:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f00b f81c 	bl	8011560 <HAL_HCD_PortEnabled_Callback>
 8006528:	e002      	b.n	8006530 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f00b f826 	bl	801157c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b20      	cmp	r3, #32
 8006538:	d103      	bne.n	8006542 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f043 0320 	orr.w	r3, r3, #32
 8006540:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006548:	461a      	mov	r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6013      	str	r3, [r2, #0]
}
 800654e:	bf00      	nop
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e12b      	b.n	80067c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fc ff1e 	bl	80033c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2224      	movs	r2, #36	; 0x24
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0201 	bic.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065bc:	f002 f9f8 	bl	80089b0 <HAL_RCC_GetPCLK1Freq>
 80065c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	4a81      	ldr	r2, [pc, #516]	; (80067cc <HAL_I2C_Init+0x274>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d807      	bhi.n	80065dc <HAL_I2C_Init+0x84>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4a80      	ldr	r2, [pc, #512]	; (80067d0 <HAL_I2C_Init+0x278>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	bf94      	ite	ls
 80065d4:	2301      	movls	r3, #1
 80065d6:	2300      	movhi	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	e006      	b.n	80065ea <HAL_I2C_Init+0x92>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4a7d      	ldr	r2, [pc, #500]	; (80067d4 <HAL_I2C_Init+0x27c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	bf94      	ite	ls
 80065e4:	2301      	movls	r3, #1
 80065e6:	2300      	movhi	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e0e7      	b.n	80067c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4a78      	ldr	r2, [pc, #480]	; (80067d8 <HAL_I2C_Init+0x280>)
 80065f6:	fba2 2303 	umull	r2, r3, r2, r3
 80065fa:	0c9b      	lsrs	r3, r3, #18
 80065fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4a6a      	ldr	r2, [pc, #424]	; (80067cc <HAL_I2C_Init+0x274>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d802      	bhi.n	800662c <HAL_I2C_Init+0xd4>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	3301      	adds	r3, #1
 800662a:	e009      	b.n	8006640 <HAL_I2C_Init+0xe8>
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006632:	fb02 f303 	mul.w	r3, r2, r3
 8006636:	4a69      	ldr	r2, [pc, #420]	; (80067dc <HAL_I2C_Init+0x284>)
 8006638:	fba2 2303 	umull	r2, r3, r2, r3
 800663c:	099b      	lsrs	r3, r3, #6
 800663e:	3301      	adds	r3, #1
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	430b      	orrs	r3, r1
 8006646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	495c      	ldr	r1, [pc, #368]	; (80067cc <HAL_I2C_Init+0x274>)
 800665c:	428b      	cmp	r3, r1
 800665e:	d819      	bhi.n	8006694 <HAL_I2C_Init+0x13c>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1e59      	subs	r1, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	fbb1 f3f3 	udiv	r3, r1, r3
 800666e:	1c59      	adds	r1, r3, #1
 8006670:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006674:	400b      	ands	r3, r1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <HAL_I2C_Init+0x138>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	1e59      	subs	r1, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	fbb1 f3f3 	udiv	r3, r1, r3
 8006688:	3301      	adds	r3, #1
 800668a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800668e:	e051      	b.n	8006734 <HAL_I2C_Init+0x1dc>
 8006690:	2304      	movs	r3, #4
 8006692:	e04f      	b.n	8006734 <HAL_I2C_Init+0x1dc>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d111      	bne.n	80066c0 <HAL_I2C_Init+0x168>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1e58      	subs	r0, r3, #1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6859      	ldr	r1, [r3, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	440b      	add	r3, r1
 80066aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80066ae:	3301      	adds	r3, #1
 80066b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bf0c      	ite	eq
 80066b8:	2301      	moveq	r3, #1
 80066ba:	2300      	movne	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	e012      	b.n	80066e6 <HAL_I2C_Init+0x18e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	1e58      	subs	r0, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6859      	ldr	r1, [r3, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	0099      	lsls	r1, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066d6:	3301      	adds	r3, #1
 80066d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066dc:	2b00      	cmp	r3, #0
 80066de:	bf0c      	ite	eq
 80066e0:	2301      	moveq	r3, #1
 80066e2:	2300      	movne	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <HAL_I2C_Init+0x196>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e022      	b.n	8006734 <HAL_I2C_Init+0x1dc>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10e      	bne.n	8006714 <HAL_I2C_Init+0x1bc>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	1e58      	subs	r0, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6859      	ldr	r1, [r3, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	440b      	add	r3, r1
 8006704:	fbb0 f3f3 	udiv	r3, r0, r3
 8006708:	3301      	adds	r3, #1
 800670a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800670e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006712:	e00f      	b.n	8006734 <HAL_I2C_Init+0x1dc>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	1e58      	subs	r0, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6859      	ldr	r1, [r3, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	0099      	lsls	r1, r3, #2
 8006724:	440b      	add	r3, r1
 8006726:	fbb0 f3f3 	udiv	r3, r0, r3
 800672a:	3301      	adds	r3, #1
 800672c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	6809      	ldr	r1, [r1, #0]
 8006738:	4313      	orrs	r3, r2
 800673a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69da      	ldr	r2, [r3, #28]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6911      	ldr	r1, [r2, #16]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	68d2      	ldr	r2, [r2, #12]
 800676e:	4311      	orrs	r1, r2
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6812      	ldr	r2, [r2, #0]
 8006774:	430b      	orrs	r3, r1
 8006776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	000186a0 	.word	0x000186a0
 80067d0:	001e847f 	.word	0x001e847f
 80067d4:	003d08ff 	.word	0x003d08ff
 80067d8:	431bde83 	.word	0x431bde83
 80067dc:	10624dd3 	.word	0x10624dd3

080067e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	607a      	str	r2, [r7, #4]
 80067ea:	461a      	mov	r2, r3
 80067ec:	460b      	mov	r3, r1
 80067ee:	817b      	strh	r3, [r7, #10]
 80067f0:	4613      	mov	r3, r2
 80067f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067f4:	f7fd fdaa 	bl	800434c <HAL_GetTick>
 80067f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b20      	cmp	r3, #32
 8006804:	f040 80e0 	bne.w	80069c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	2319      	movs	r3, #25
 800680e:	2201      	movs	r2, #1
 8006810:	4970      	ldr	r1, [pc, #448]	; (80069d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 fe02 	bl	800741c <I2C_WaitOnFlagUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800681e:	2302      	movs	r3, #2
 8006820:	e0d3      	b.n	80069ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_I2C_Master_Transmit+0x50>
 800682c:	2302      	movs	r3, #2
 800682e:	e0cc      	b.n	80069ca <HAL_I2C_Master_Transmit+0x1ea>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b01      	cmp	r3, #1
 8006844:	d007      	beq.n	8006856 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0201 	orr.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006864:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2221      	movs	r2, #33	; 0x21
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2210      	movs	r2, #16
 8006872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	893a      	ldrh	r2, [r7, #8]
 8006886:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4a50      	ldr	r2, [pc, #320]	; (80069d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006896:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006898:	8979      	ldrh	r1, [r7, #10]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	6a3a      	ldr	r2, [r7, #32]
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 fbbc 	bl	800701c <I2C_MasterRequestWrite>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e08d      	b.n	80069ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80068c4:	e066      	b.n	8006994 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	6a39      	ldr	r1, [r7, #32]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fe7c 	bl	80075c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00d      	beq.n	80068f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d107      	bne.n	80068ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e06b      	b.n	80069ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	781a      	ldrb	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690c:	b29b      	uxth	r3, r3
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	f003 0304 	and.w	r3, r3, #4
 800692c:	2b04      	cmp	r3, #4
 800692e:	d11b      	bne.n	8006968 <HAL_I2C_Master_Transmit+0x188>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006934:	2b00      	cmp	r3, #0
 8006936:	d017      	beq.n	8006968 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	6a39      	ldr	r1, [r7, #32]
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fe6c 	bl	800764a <I2C_WaitOnBTFFlagUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00d      	beq.n	8006994 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	2b04      	cmp	r3, #4
 800697e:	d107      	bne.n	8006990 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800698e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e01a      	b.n	80069ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	d194      	bne.n	80068c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	e000      	b.n	80069ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80069c8:	2302      	movs	r3, #2
  }
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	00100002 	.word	0x00100002
 80069d8:	ffff0000 	.word	0xffff0000

080069dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af02      	add	r7, sp, #8
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	4608      	mov	r0, r1
 80069e6:	4611      	mov	r1, r2
 80069e8:	461a      	mov	r2, r3
 80069ea:	4603      	mov	r3, r0
 80069ec:	817b      	strh	r3, [r7, #10]
 80069ee:	460b      	mov	r3, r1
 80069f0:	813b      	strh	r3, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069f6:	f7fd fca9 	bl	800434c <HAL_GetTick>
 80069fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	f040 80d9 	bne.w	8006bbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	2319      	movs	r3, #25
 8006a10:	2201      	movs	r2, #1
 8006a12:	496d      	ldr	r1, [pc, #436]	; (8006bc8 <HAL_I2C_Mem_Write+0x1ec>)
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 fd01 	bl	800741c <I2C_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a20:	2302      	movs	r3, #2
 8006a22:	e0cc      	b.n	8006bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_I2C_Mem_Write+0x56>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e0c5      	b.n	8006bbe <HAL_I2C_Mem_Write+0x1e2>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d007      	beq.n	8006a58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0201 	orr.w	r2, r2, #1
 8006a56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2221      	movs	r2, #33	; 0x21
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2240      	movs	r2, #64	; 0x40
 8006a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a3a      	ldr	r2, [r7, #32]
 8006a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4a4d      	ldr	r2, [pc, #308]	; (8006bcc <HAL_I2C_Mem_Write+0x1f0>)
 8006a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a9a:	88f8      	ldrh	r0, [r7, #6]
 8006a9c:	893a      	ldrh	r2, [r7, #8]
 8006a9e:	8979      	ldrh	r1, [r7, #10]
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fb38 	bl	8007120 <I2C_RequestMemoryWrite>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d052      	beq.n	8006b5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e081      	b.n	8006bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 fd82 	bl	80075c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00d      	beq.n	8006ae6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d107      	bne.n	8006ae2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e06b      	b.n	8006bbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	781a      	ldrb	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b00:	3b01      	subs	r3, #1
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	f003 0304 	and.w	r3, r3, #4
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d11b      	bne.n	8006b5c <HAL_I2C_Mem_Write+0x180>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d017      	beq.n	8006b5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	781a      	ldrb	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1aa      	bne.n	8006aba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 fd6e 	bl	800764a <I2C_WaitOnBTFFlagUntilTimeout>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00d      	beq.n	8006b90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d107      	bne.n	8006b8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e016      	b.n	8006bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	00100002 	.word	0x00100002
 8006bcc:	ffff0000 	.word	0xffff0000

08006bd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08c      	sub	sp, #48	; 0x30
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	4608      	mov	r0, r1
 8006bda:	4611      	mov	r1, r2
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4603      	mov	r3, r0
 8006be0:	817b      	strh	r3, [r7, #10]
 8006be2:	460b      	mov	r3, r1
 8006be4:	813b      	strh	r3, [r7, #8]
 8006be6:	4613      	mov	r3, r2
 8006be8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bea:	f7fd fbaf 	bl	800434c <HAL_GetTick>
 8006bee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	f040 8208 	bne.w	800700e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	2319      	movs	r3, #25
 8006c04:	2201      	movs	r2, #1
 8006c06:	497b      	ldr	r1, [pc, #492]	; (8006df4 <HAL_I2C_Mem_Read+0x224>)
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 fc07 	bl	800741c <I2C_WaitOnFlagUntilTimeout>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c14:	2302      	movs	r3, #2
 8006c16:	e1fb      	b.n	8007010 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <HAL_I2C_Mem_Read+0x56>
 8006c22:	2302      	movs	r3, #2
 8006c24:	e1f4      	b.n	8007010 <HAL_I2C_Mem_Read+0x440>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d007      	beq.n	8006c4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0201 	orr.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2222      	movs	r2, #34	; 0x22
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2240      	movs	r2, #64	; 0x40
 8006c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4a5b      	ldr	r2, [pc, #364]	; (8006df8 <HAL_I2C_Mem_Read+0x228>)
 8006c8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c8e:	88f8      	ldrh	r0, [r7, #6]
 8006c90:	893a      	ldrh	r2, [r7, #8]
 8006c92:	8979      	ldrh	r1, [r7, #10]
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fad4 	bl	800724c <I2C_RequestMemoryRead>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e1b0      	b.n	8007010 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d113      	bne.n	8006cde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	623b      	str	r3, [r7, #32]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	623b      	str	r3, [r7, #32]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	623b      	str	r3, [r7, #32]
 8006cca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e184      	b.n	8006fe8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d11b      	bne.n	8006d1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	61fb      	str	r3, [r7, #28]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	e164      	b.n	8006fe8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d11b      	bne.n	8006d5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d46:	2300      	movs	r3, #0
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	61bb      	str	r3, [r7, #24]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	e144      	b.n	8006fe8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d5e:	2300      	movs	r3, #0
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d74:	e138      	b.n	8006fe8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	f200 80f1 	bhi.w	8006f62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d123      	bne.n	8006dd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 fc9d 	bl	80076cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e139      	b.n	8007010 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691a      	ldr	r2, [r3, #16]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dce:	e10b      	b.n	8006fe8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d14e      	bne.n	8006e76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	2200      	movs	r2, #0
 8006de0:	4906      	ldr	r1, [pc, #24]	; (8006dfc <HAL_I2C_Mem_Read+0x22c>)
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fb1a 	bl	800741c <I2C_WaitOnFlagUntilTimeout>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d008      	beq.n	8006e00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e10e      	b.n	8007010 <HAL_I2C_Mem_Read+0x440>
 8006df2:	bf00      	nop
 8006df4:	00100002 	.word	0x00100002
 8006df8:	ffff0000 	.word	0xffff0000
 8006dfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691a      	ldr	r2, [r3, #16]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e74:	e0b8      	b.n	8006fe8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4966      	ldr	r1, [pc, #408]	; (8007018 <HAL_I2C_Mem_Read+0x448>)
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 facb 	bl	800741c <I2C_WaitOnFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0bf      	b.n	8007010 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691a      	ldr	r2, [r3, #16]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	2200      	movs	r2, #0
 8006eda:	494f      	ldr	r1, [pc, #316]	; (8007018 <HAL_I2C_Mem_Read+0x448>)
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 fa9d 	bl	800741c <I2C_WaitOnFlagUntilTimeout>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e091      	b.n	8007010 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	691a      	ldr	r2, [r3, #16]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f60:	e042      	b.n	8006fe8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fbb0 	bl	80076cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e04c      	b.n	8007010 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	f003 0304 	and.w	r3, r3, #4
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	d118      	bne.n	8006fe8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f47f aec2 	bne.w	8006d76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	e000      	b.n	8007010 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800700e:	2302      	movs	r3, #2
  }
}
 8007010:	4618      	mov	r0, r3
 8007012:	3728      	adds	r7, #40	; 0x28
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	00010004 	.word	0x00010004

0800701c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af02      	add	r7, sp, #8
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	607a      	str	r2, [r7, #4]
 8007026:	603b      	str	r3, [r7, #0]
 8007028:	460b      	mov	r3, r1
 800702a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b08      	cmp	r3, #8
 8007036:	d006      	beq.n	8007046 <I2C_MasterRequestWrite+0x2a>
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d003      	beq.n	8007046 <I2C_MasterRequestWrite+0x2a>
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007044:	d108      	bne.n	8007058 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	e00b      	b.n	8007070 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705c:	2b12      	cmp	r3, #18
 800705e:	d107      	bne.n	8007070 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800706e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f9cd 	bl	800741c <I2C_WaitOnFlagUntilTimeout>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00d      	beq.n	80070a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007096:	d103      	bne.n	80070a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800709e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e035      	b.n	8007110 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ac:	d108      	bne.n	80070c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070ae:	897b      	ldrh	r3, [r7, #10]
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	461a      	mov	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070bc:	611a      	str	r2, [r3, #16]
 80070be:	e01b      	b.n	80070f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070c0:	897b      	ldrh	r3, [r7, #10]
 80070c2:	11db      	asrs	r3, r3, #7
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	f003 0306 	and.w	r3, r3, #6
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	f063 030f 	orn	r3, r3, #15
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	490e      	ldr	r1, [pc, #56]	; (8007118 <I2C_MasterRequestWrite+0xfc>)
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 f9f3 	bl	80074ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e010      	b.n	8007110 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80070ee:	897b      	ldrh	r3, [r7, #10]
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	4907      	ldr	r1, [pc, #28]	; (800711c <I2C_MasterRequestWrite+0x100>)
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f9e3 	bl	80074ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e000      	b.n	8007110 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	00010008 	.word	0x00010008
 800711c:	00010002 	.word	0x00010002

08007120 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b088      	sub	sp, #32
 8007124:	af02      	add	r7, sp, #8
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	4608      	mov	r0, r1
 800712a:	4611      	mov	r1, r2
 800712c:	461a      	mov	r2, r3
 800712e:	4603      	mov	r3, r0
 8007130:	817b      	strh	r3, [r7, #10]
 8007132:	460b      	mov	r3, r1
 8007134:	813b      	strh	r3, [r7, #8]
 8007136:	4613      	mov	r3, r2
 8007138:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007148:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	2200      	movs	r2, #0
 8007152:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f960 	bl	800741c <I2C_WaitOnFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00d      	beq.n	800717e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007170:	d103      	bne.n	800717a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007178:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e05f      	b.n	800723e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800717e:	897b      	ldrh	r3, [r7, #10]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800718c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	6a3a      	ldr	r2, [r7, #32]
 8007192:	492d      	ldr	r1, [pc, #180]	; (8007248 <I2C_RequestMemoryWrite+0x128>)
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f998 	bl	80074ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e04c      	b.n	800723e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071bc:	6a39      	ldr	r1, [r7, #32]
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fa02 	bl	80075c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00d      	beq.n	80071e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d107      	bne.n	80071e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e02b      	b.n	800723e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d105      	bne.n	80071f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071ec:	893b      	ldrh	r3, [r7, #8]
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	611a      	str	r2, [r3, #16]
 80071f6:	e021      	b.n	800723c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071f8:	893b      	ldrh	r3, [r7, #8]
 80071fa:	0a1b      	lsrs	r3, r3, #8
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007208:	6a39      	ldr	r1, [r7, #32]
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 f9dc 	bl	80075c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00d      	beq.n	8007232 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	2b04      	cmp	r3, #4
 800721c:	d107      	bne.n	800722e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800722c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e005      	b.n	800723e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007232:	893b      	ldrh	r3, [r7, #8]
 8007234:	b2da      	uxtb	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	00010002 	.word	0x00010002

0800724c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af02      	add	r7, sp, #8
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	4608      	mov	r0, r1
 8007256:	4611      	mov	r1, r2
 8007258:	461a      	mov	r2, r3
 800725a:	4603      	mov	r3, r0
 800725c:	817b      	strh	r3, [r7, #10]
 800725e:	460b      	mov	r3, r1
 8007260:	813b      	strh	r3, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007274:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007284:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	2200      	movs	r2, #0
 800728e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f8c2 	bl	800741c <I2C_WaitOnFlagUntilTimeout>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00d      	beq.n	80072ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ac:	d103      	bne.n	80072b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e0aa      	b.n	8007410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072ba:	897b      	ldrh	r3, [r7, #10]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	461a      	mov	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	6a3a      	ldr	r2, [r7, #32]
 80072ce:	4952      	ldr	r1, [pc, #328]	; (8007418 <I2C_RequestMemoryRead+0x1cc>)
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f8fa 	bl	80074ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e097      	b.n	8007410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f8:	6a39      	ldr	r1, [r7, #32]
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 f964 	bl	80075c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00d      	beq.n	8007322 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	2b04      	cmp	r3, #4
 800730c:	d107      	bne.n	800731e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800731c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e076      	b.n	8007410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007322:	88fb      	ldrh	r3, [r7, #6]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d105      	bne.n	8007334 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007328:	893b      	ldrh	r3, [r7, #8]
 800732a:	b2da      	uxtb	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	611a      	str	r2, [r3, #16]
 8007332:	e021      	b.n	8007378 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007334:	893b      	ldrh	r3, [r7, #8]
 8007336:	0a1b      	lsrs	r3, r3, #8
 8007338:	b29b      	uxth	r3, r3
 800733a:	b2da      	uxtb	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007344:	6a39      	ldr	r1, [r7, #32]
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 f93e 	bl	80075c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00d      	beq.n	800736e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	2b04      	cmp	r3, #4
 8007358:	d107      	bne.n	800736a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007368:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e050      	b.n	8007410 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800736e:	893b      	ldrh	r3, [r7, #8]
 8007370:	b2da      	uxtb	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800737a:	6a39      	ldr	r1, [r7, #32]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 f923 	bl	80075c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00d      	beq.n	80073a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	2b04      	cmp	r3, #4
 800738e:	d107      	bne.n	80073a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800739e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e035      	b.n	8007410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 f82b 	bl	800741c <I2C_WaitOnFlagUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00d      	beq.n	80073e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073da:	d103      	bne.n	80073e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e013      	b.n	8007410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073e8:	897b      	ldrh	r3, [r7, #10]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	f043 0301 	orr.w	r3, r3, #1
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	6a3a      	ldr	r2, [r7, #32]
 80073fc:	4906      	ldr	r1, [pc, #24]	; (8007418 <I2C_RequestMemoryRead+0x1cc>)
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 f863 	bl	80074ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e000      	b.n	8007410 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	00010002 	.word	0x00010002

0800741c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	4613      	mov	r3, r2
 800742a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800742c:	e025      	b.n	800747a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007434:	d021      	beq.n	800747a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007436:	f7fc ff89 	bl	800434c <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d302      	bcc.n	800744c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d116      	bne.n	800747a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2220      	movs	r2, #32
 8007456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	f043 0220 	orr.w	r2, r3, #32
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e023      	b.n	80074c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	0c1b      	lsrs	r3, r3, #16
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b01      	cmp	r3, #1
 8007482:	d10d      	bne.n	80074a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	43da      	mvns	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4013      	ands	r3, r2
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	bf0c      	ite	eq
 8007496:	2301      	moveq	r3, #1
 8007498:	2300      	movne	r3, #0
 800749a:	b2db      	uxtb	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	e00c      	b.n	80074ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	43da      	mvns	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4013      	ands	r3, r2
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bf0c      	ite	eq
 80074b2:	2301      	moveq	r3, #1
 80074b4:	2300      	movne	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d0b6      	beq.n	800742e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
 80074d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074d8:	e051      	b.n	800757e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e8:	d123      	bne.n	8007532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007502:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2220      	movs	r2, #32
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f043 0204 	orr.w	r2, r3, #4
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e046      	b.n	80075c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007538:	d021      	beq.n	800757e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800753a:	f7fc ff07 	bl	800434c <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	429a      	cmp	r2, r3
 8007548:	d302      	bcc.n	8007550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d116      	bne.n	800757e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f043 0220 	orr.w	r2, r3, #32
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e020      	b.n	80075c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	0c1b      	lsrs	r3, r3, #16
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	d10c      	bne.n	80075a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	43da      	mvns	r2, r3
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4013      	ands	r3, r2
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	bf14      	ite	ne
 800759a:	2301      	movne	r3, #1
 800759c:	2300      	moveq	r3, #0
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	e00b      	b.n	80075ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	43da      	mvns	r2, r3
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	4013      	ands	r3, r2
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bf14      	ite	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	2300      	moveq	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d18d      	bne.n	80074da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075d4:	e02d      	b.n	8007632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f8ce 	bl	8007778 <I2C_IsAcknowledgeFailed>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e02d      	b.n	8007642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ec:	d021      	beq.n	8007632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ee:	f7fc fead 	bl	800434c <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d302      	bcc.n	8007604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d116      	bne.n	8007632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2220      	movs	r2, #32
 800760e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	f043 0220 	orr.w	r2, r3, #32
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e007      	b.n	8007642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800763c:	2b80      	cmp	r3, #128	; 0x80
 800763e:	d1ca      	bne.n	80075d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007656:	e02d      	b.n	80076b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 f88d 	bl	8007778 <I2C_IsAcknowledgeFailed>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e02d      	b.n	80076c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800766e:	d021      	beq.n	80076b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007670:	f7fc fe6c 	bl	800434c <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	429a      	cmp	r2, r3
 800767e:	d302      	bcc.n	8007686 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d116      	bne.n	80076b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	f043 0220 	orr.w	r2, r3, #32
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e007      	b.n	80076c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d1ca      	bne.n	8007658 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076d8:	e042      	b.n	8007760 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	f003 0310 	and.w	r3, r3, #16
 80076e4:	2b10      	cmp	r3, #16
 80076e6:	d119      	bne.n	800771c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0210 	mvn.w	r2, #16
 80076f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e029      	b.n	8007770 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771c:	f7fc fe16 	bl	800434c <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	429a      	cmp	r2, r3
 800772a:	d302      	bcc.n	8007732 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d116      	bne.n	8007760 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774c:	f043 0220 	orr.w	r2, r3, #32
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e007      	b.n	8007770 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776a:	2b40      	cmp	r3, #64	; 0x40
 800776c:	d1b5      	bne.n	80076da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800778a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778e:	d11b      	bne.n	80077c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007798:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	f043 0204 	orr.w	r2, r3, #4
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e000      	b.n	80077ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e128      	b.n	8007a3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d109      	bne.n	800780a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a90      	ldr	r2, [pc, #576]	; (8007a44 <HAL_I2S_Init+0x26c>)
 8007802:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fb fe7b 	bl	8003500 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2202      	movs	r2, #2
 800780e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	6812      	ldr	r2, [r2, #0]
 800781c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007820:	f023 030f 	bic.w	r3, r3, #15
 8007824:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2202      	movs	r2, #2
 800782c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	2b02      	cmp	r3, #2
 8007834:	d060      	beq.n	80078f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d102      	bne.n	8007844 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800783e:	2310      	movs	r3, #16
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	e001      	b.n	8007848 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007844:	2320      	movs	r3, #32
 8007846:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b20      	cmp	r3, #32
 800784e:	d802      	bhi.n	8007856 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007856:	2001      	movs	r0, #1
 8007858:	f001 f9e6 	bl	8008c28 <HAL_RCCEx_GetPeriphCLKFreq>
 800785c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007866:	d125      	bne.n	80078b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d010      	beq.n	8007892 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	fbb2 f2f3 	udiv	r2, r2, r3
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	461a      	mov	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	fbb2 f3f3 	udiv	r3, r2, r3
 800788c:	3305      	adds	r3, #5
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	e01f      	b.n	80078d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	fbb2 f2f3 	udiv	r2, r2, r3
 800789c:	4613      	mov	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	461a      	mov	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ae:	3305      	adds	r3, #5
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	e00e      	b.n	80078d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80078bc:	4613      	mov	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	461a      	mov	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ce:	3305      	adds	r3, #5
 80078d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	4a5c      	ldr	r2, [pc, #368]	; (8007a48 <HAL_I2S_Init+0x270>)
 80078d6:	fba2 2303 	umull	r2, r3, r2, r3
 80078da:	08db      	lsrs	r3, r3, #3
 80078dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	085b      	lsrs	r3, r3, #1
 80078ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	e003      	b.n	8007900 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80078f8:	2302      	movs	r3, #2
 80078fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d902      	bls.n	800790c <HAL_I2S_Init+0x134>
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	2bff      	cmp	r3, #255	; 0xff
 800790a:	d907      	bls.n	800791c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007910:	f043 0210 	orr.w	r2, r3, #16
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e08f      	b.n	8007a3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	691a      	ldr	r2, [r3, #16]
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	ea42 0103 	orr.w	r1, r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	430a      	orrs	r2, r1
 800792e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800793a:	f023 030f 	bic.w	r3, r3, #15
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6851      	ldr	r1, [r2, #4]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6892      	ldr	r2, [r2, #8]
 8007946:	4311      	orrs	r1, r2
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	68d2      	ldr	r2, [r2, #12]
 800794c:	4311      	orrs	r1, r2
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6992      	ldr	r2, [r2, #24]
 8007952:	430a      	orrs	r2, r1
 8007954:	431a      	orrs	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800795e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d161      	bne.n	8007a2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a38      	ldr	r2, [pc, #224]	; (8007a4c <HAL_I2S_Init+0x274>)
 800796c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a37      	ldr	r2, [pc, #220]	; (8007a50 <HAL_I2S_Init+0x278>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d101      	bne.n	800797c <HAL_I2S_Init+0x1a4>
 8007978:	4b36      	ldr	r3, [pc, #216]	; (8007a54 <HAL_I2S_Init+0x27c>)
 800797a:	e001      	b.n	8007980 <HAL_I2S_Init+0x1a8>
 800797c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6812      	ldr	r2, [r2, #0]
 8007986:	4932      	ldr	r1, [pc, #200]	; (8007a50 <HAL_I2S_Init+0x278>)
 8007988:	428a      	cmp	r2, r1
 800798a:	d101      	bne.n	8007990 <HAL_I2S_Init+0x1b8>
 800798c:	4a31      	ldr	r2, [pc, #196]	; (8007a54 <HAL_I2S_Init+0x27c>)
 800798e:	e001      	b.n	8007994 <HAL_I2S_Init+0x1bc>
 8007990:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8007994:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007998:	f023 030f 	bic.w	r3, r3, #15
 800799c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a2b      	ldr	r2, [pc, #172]	; (8007a50 <HAL_I2S_Init+0x278>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d101      	bne.n	80079ac <HAL_I2S_Init+0x1d4>
 80079a8:	4b2a      	ldr	r3, [pc, #168]	; (8007a54 <HAL_I2S_Init+0x27c>)
 80079aa:	e001      	b.n	80079b0 <HAL_I2S_Init+0x1d8>
 80079ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079b0:	2202      	movs	r2, #2
 80079b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a25      	ldr	r2, [pc, #148]	; (8007a50 <HAL_I2S_Init+0x278>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d101      	bne.n	80079c2 <HAL_I2S_Init+0x1ea>
 80079be:	4b25      	ldr	r3, [pc, #148]	; (8007a54 <HAL_I2S_Init+0x27c>)
 80079c0:	e001      	b.n	80079c6 <HAL_I2S_Init+0x1ee>
 80079c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d2:	d003      	beq.n	80079dc <HAL_I2S_Init+0x204>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d103      	bne.n	80079e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80079dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	e001      	b.n	80079e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80079e4:	2300      	movs	r3, #0
 80079e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80079f2:	4313      	orrs	r3, r2
 80079f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80079fc:	4313      	orrs	r3, r2
 80079fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007a06:	4313      	orrs	r3, r2
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	897b      	ldrh	r3, [r7, #10]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a0d      	ldr	r2, [pc, #52]	; (8007a50 <HAL_I2S_Init+0x278>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d101      	bne.n	8007a24 <HAL_I2S_Init+0x24c>
 8007a20:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <HAL_I2S_Init+0x27c>)
 8007a22:	e001      	b.n	8007a28 <HAL_I2S_Init+0x250>
 8007a24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a28:	897a      	ldrh	r2, [r7, #10]
 8007a2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3720      	adds	r7, #32
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	08007b4f 	.word	0x08007b4f
 8007a48:	cccccccd 	.word	0xcccccccd
 8007a4c:	08007c65 	.word	0x08007c65
 8007a50:	40003800 	.word	0x40003800
 8007a54:	40003400 	.word	0x40003400

08007a58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	881a      	ldrh	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	1c9a      	adds	r2, r3, #2
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10e      	bne.n	8007ae8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ad8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7ff ffb8 	bl	8007a58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b02:	b292      	uxth	r2, r2
 8007b04:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	1c9a      	adds	r2, r3, #2
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10e      	bne.n	8007b46 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff ff93 	bl	8007a6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b086      	sub	sp, #24
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	d13a      	bne.n	8007be0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d109      	bne.n	8007b88 <I2S_IRQHandler+0x3a>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7e:	2b40      	cmp	r3, #64	; 0x40
 8007b80:	d102      	bne.n	8007b88 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff ffb4 	bl	8007af0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8e:	2b40      	cmp	r3, #64	; 0x40
 8007b90:	d126      	bne.n	8007be0 <I2S_IRQHandler+0x92>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	d11f      	bne.n	8007be0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007bae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	613b      	str	r3, [r7, #16]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	613b      	str	r3, [r7, #16]
 8007bc4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd2:	f043 0202 	orr.w	r2, r3, #2
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff ff50 	bl	8007a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b03      	cmp	r3, #3
 8007bea:	d136      	bne.n	8007c5a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d109      	bne.n	8007c0a <I2S_IRQHandler+0xbc>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c00:	2b80      	cmp	r3, #128	; 0x80
 8007c02:	d102      	bne.n	8007c0a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7ff ff45 	bl	8007a94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d122      	bne.n	8007c5a <I2S_IRQHandler+0x10c>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b20      	cmp	r3, #32
 8007c20:	d11b      	bne.n	8007c5a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c30:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4c:	f043 0204 	orr.w	r2, r3, #4
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7ff ff13 	bl	8007a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007c5a:	bf00      	nop
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
	...

08007c64 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4aa2      	ldr	r2, [pc, #648]	; (8007f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d101      	bne.n	8007c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007c7e:	4ba2      	ldr	r3, [pc, #648]	; (8007f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007c80:	e001      	b.n	8007c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a9b      	ldr	r2, [pc, #620]	; (8007f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d101      	bne.n	8007ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007c9c:	4b9a      	ldr	r3, [pc, #616]	; (8007f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007c9e:	e001      	b.n	8007ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb0:	d004      	beq.n	8007cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f040 8099 	bne.w	8007dee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d107      	bne.n	8007cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f925 	bl	8007f20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d107      	bne.n	8007cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f9c8 	bl	8008080 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf6:	2b40      	cmp	r3, #64	; 0x40
 8007cf8:	d13a      	bne.n	8007d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d035      	beq.n	8007d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a7e      	ldr	r2, [pc, #504]	; (8007f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d101      	bne.n	8007d12 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007d0e:	4b7e      	ldr	r3, [pc, #504]	; (8007f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007d10:	e001      	b.n	8007d16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007d12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4979      	ldr	r1, [pc, #484]	; (8007f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007d1e:	428b      	cmp	r3, r1
 8007d20:	d101      	bne.n	8007d26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007d22:	4b79      	ldr	r3, [pc, #484]	; (8007f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007d24:	e001      	b.n	8007d2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007d26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007d2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d2e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d62:	f043 0202 	orr.w	r2, r3, #2
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff fe88 	bl	8007a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	f003 0308 	and.w	r3, r3, #8
 8007d76:	2b08      	cmp	r3, #8
 8007d78:	f040 80be 	bne.w	8007ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 80b8 	beq.w	8007ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a59      	ldr	r2, [pc, #356]	; (8007f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d101      	bne.n	8007da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007da2:	4b59      	ldr	r3, [pc, #356]	; (8007f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007da4:	e001      	b.n	8007daa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4954      	ldr	r1, [pc, #336]	; (8007f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007db2:	428b      	cmp	r3, r1
 8007db4:	d101      	bne.n	8007dba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007db6:	4b54      	ldr	r3, [pc, #336]	; (8007f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007db8:	e001      	b.n	8007dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007dbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007dc2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60bb      	str	r3, [r7, #8]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	60bb      	str	r3, [r7, #8]
 8007dd0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dde:	f043 0204 	orr.w	r2, r3, #4
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff fe4a 	bl	8007a80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007dec:	e084      	b.n	8007ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d107      	bne.n	8007e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f8be 	bl	8007f84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d107      	bne.n	8007e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f8fd 	bl	800801c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e28:	2b40      	cmp	r3, #64	; 0x40
 8007e2a:	d12f      	bne.n	8007e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d02a      	beq.n	8007e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007e44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a2e      	ldr	r2, [pc, #184]	; (8007f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d101      	bne.n	8007e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007e50:	4b2d      	ldr	r3, [pc, #180]	; (8007f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007e52:	e001      	b.n	8007e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4929      	ldr	r1, [pc, #164]	; (8007f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007e60:	428b      	cmp	r3, r1
 8007e62:	d101      	bne.n	8007e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007e64:	4b28      	ldr	r3, [pc, #160]	; (8007f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007e66:	e001      	b.n	8007e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7e:	f043 0202 	orr.w	r2, r3, #2
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff fdfa 	bl	8007a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	f003 0308 	and.w	r3, r3, #8
 8007e92:	2b08      	cmp	r3, #8
 8007e94:	d131      	bne.n	8007efa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d02c      	beq.n	8007efa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a17      	ldr	r2, [pc, #92]	; (8007f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d101      	bne.n	8007eae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007eaa:	4b17      	ldr	r3, [pc, #92]	; (8007f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007eac:	e001      	b.n	8007eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007eae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4912      	ldr	r1, [pc, #72]	; (8007f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007eba:	428b      	cmp	r3, r1
 8007ebc:	d101      	bne.n	8007ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007ebe:	4b12      	ldr	r3, [pc, #72]	; (8007f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007ec0:	e001      	b.n	8007ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ec6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007eca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007eda:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee8:	f043 0204 	orr.w	r2, r3, #4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff fdc5 	bl	8007a80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007ef6:	e000      	b.n	8007efa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007ef8:	bf00      	nop
}
 8007efa:	bf00      	nop
 8007efc:	3720      	adds	r7, #32
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	40003800 	.word	0x40003800
 8007f08:	40003400 	.word	0x40003400

08007f0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	1c99      	adds	r1, r3, #2
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6251      	str	r1, [r2, #36]	; 0x24
 8007f32:	881a      	ldrh	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3b01      	subs	r3, #1
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d113      	bne.n	8007f7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007f60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d106      	bne.n	8007f7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff ffc9 	bl	8007f0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007f7a:	bf00      	nop
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
	...

08007f84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	1c99      	adds	r1, r3, #2
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	6251      	str	r1, [r2, #36]	; 0x24
 8007f96:	8819      	ldrh	r1, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a1d      	ldr	r2, [pc, #116]	; (8008014 <I2SEx_TxISR_I2SExt+0x90>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d101      	bne.n	8007fa6 <I2SEx_TxISR_I2SExt+0x22>
 8007fa2:	4b1d      	ldr	r3, [pc, #116]	; (8008018 <I2SEx_TxISR_I2SExt+0x94>)
 8007fa4:	e001      	b.n	8007faa <I2SEx_TxISR_I2SExt+0x26>
 8007fa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007faa:	460a      	mov	r2, r1
 8007fac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d121      	bne.n	800800a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a12      	ldr	r2, [pc, #72]	; (8008014 <I2SEx_TxISR_I2SExt+0x90>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d101      	bne.n	8007fd4 <I2SEx_TxISR_I2SExt+0x50>
 8007fd0:	4b11      	ldr	r3, [pc, #68]	; (8008018 <I2SEx_TxISR_I2SExt+0x94>)
 8007fd2:	e001      	b.n	8007fd8 <I2SEx_TxISR_I2SExt+0x54>
 8007fd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	490d      	ldr	r1, [pc, #52]	; (8008014 <I2SEx_TxISR_I2SExt+0x90>)
 8007fe0:	428b      	cmp	r3, r1
 8007fe2:	d101      	bne.n	8007fe8 <I2SEx_TxISR_I2SExt+0x64>
 8007fe4:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <I2SEx_TxISR_I2SExt+0x94>)
 8007fe6:	e001      	b.n	8007fec <I2SEx_TxISR_I2SExt+0x68>
 8007fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007fec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ff0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff ff81 	bl	8007f0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800800a:	bf00      	nop
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	40003800 	.word	0x40003800
 8008018:	40003400 	.word	0x40003400

0800801c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68d8      	ldr	r0, [r3, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	1c99      	adds	r1, r3, #2
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008034:	b282      	uxth	r2, r0
 8008036:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29a      	uxth	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d113      	bne.n	8008078 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800805e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008064:	b29b      	uxth	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff ff4a 	bl	8007f0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a20      	ldr	r2, [pc, #128]	; (8008110 <I2SEx_RxISR_I2SExt+0x90>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d101      	bne.n	8008096 <I2SEx_RxISR_I2SExt+0x16>
 8008092:	4b20      	ldr	r3, [pc, #128]	; (8008114 <I2SEx_RxISR_I2SExt+0x94>)
 8008094:	e001      	b.n	800809a <I2SEx_RxISR_I2SExt+0x1a>
 8008096:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800809a:	68d8      	ldr	r0, [r3, #12]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	1c99      	adds	r1, r3, #2
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80080a6:	b282      	uxth	r2, r0
 80080a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d121      	bne.n	8008106 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a12      	ldr	r2, [pc, #72]	; (8008110 <I2SEx_RxISR_I2SExt+0x90>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d101      	bne.n	80080d0 <I2SEx_RxISR_I2SExt+0x50>
 80080cc:	4b11      	ldr	r3, [pc, #68]	; (8008114 <I2SEx_RxISR_I2SExt+0x94>)
 80080ce:	e001      	b.n	80080d4 <I2SEx_RxISR_I2SExt+0x54>
 80080d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	490d      	ldr	r1, [pc, #52]	; (8008110 <I2SEx_RxISR_I2SExt+0x90>)
 80080dc:	428b      	cmp	r3, r1
 80080de:	d101      	bne.n	80080e4 <I2SEx_RxISR_I2SExt+0x64>
 80080e0:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <I2SEx_RxISR_I2SExt+0x94>)
 80080e2:	e001      	b.n	80080e8 <I2SEx_RxISR_I2SExt+0x68>
 80080e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80080e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80080ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d106      	bne.n	8008106 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff ff03 	bl	8007f0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	40003800 	.word	0x40003800
 8008114:	40003400 	.word	0x40003400

08008118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e264      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d075      	beq.n	8008222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008136:	4ba3      	ldr	r3, [pc, #652]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f003 030c 	and.w	r3, r3, #12
 800813e:	2b04      	cmp	r3, #4
 8008140:	d00c      	beq.n	800815c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008142:	4ba0      	ldr	r3, [pc, #640]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800814a:	2b08      	cmp	r3, #8
 800814c:	d112      	bne.n	8008174 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800814e:	4b9d      	ldr	r3, [pc, #628]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800815a:	d10b      	bne.n	8008174 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800815c:	4b99      	ldr	r3, [pc, #612]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d05b      	beq.n	8008220 <HAL_RCC_OscConfig+0x108>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d157      	bne.n	8008220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e23f      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800817c:	d106      	bne.n	800818c <HAL_RCC_OscConfig+0x74>
 800817e:	4b91      	ldr	r3, [pc, #580]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a90      	ldr	r2, [pc, #576]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	e01d      	b.n	80081c8 <HAL_RCC_OscConfig+0xb0>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008194:	d10c      	bne.n	80081b0 <HAL_RCC_OscConfig+0x98>
 8008196:	4b8b      	ldr	r3, [pc, #556]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a8a      	ldr	r2, [pc, #552]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 800819c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	4b88      	ldr	r3, [pc, #544]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a87      	ldr	r2, [pc, #540]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 80081a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	e00b      	b.n	80081c8 <HAL_RCC_OscConfig+0xb0>
 80081b0:	4b84      	ldr	r3, [pc, #528]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a83      	ldr	r2, [pc, #524]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 80081b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081ba:	6013      	str	r3, [r2, #0]
 80081bc:	4b81      	ldr	r3, [pc, #516]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a80      	ldr	r2, [pc, #512]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 80081c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d013      	beq.n	80081f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081d0:	f7fc f8bc 	bl	800434c <HAL_GetTick>
 80081d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081d6:	e008      	b.n	80081ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081d8:	f7fc f8b8 	bl	800434c <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	2b64      	cmp	r3, #100	; 0x64
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e204      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081ea:	4b76      	ldr	r3, [pc, #472]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0f0      	beq.n	80081d8 <HAL_RCC_OscConfig+0xc0>
 80081f6:	e014      	b.n	8008222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081f8:	f7fc f8a8 	bl	800434c <HAL_GetTick>
 80081fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008200:	f7fc f8a4 	bl	800434c <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b64      	cmp	r3, #100	; 0x64
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e1f0      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008212:	4b6c      	ldr	r3, [pc, #432]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1f0      	bne.n	8008200 <HAL_RCC_OscConfig+0xe8>
 800821e:	e000      	b.n	8008222 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d063      	beq.n	80082f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800822e:	4b65      	ldr	r3, [pc, #404]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f003 030c 	and.w	r3, r3, #12
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00b      	beq.n	8008252 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800823a:	4b62      	ldr	r3, [pc, #392]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008242:	2b08      	cmp	r3, #8
 8008244:	d11c      	bne.n	8008280 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008246:	4b5f      	ldr	r3, [pc, #380]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d116      	bne.n	8008280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008252:	4b5c      	ldr	r3, [pc, #368]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <HAL_RCC_OscConfig+0x152>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d001      	beq.n	800826a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e1c4      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800826a:	4b56      	ldr	r3, [pc, #344]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	4952      	ldr	r1, [pc, #328]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 800827a:	4313      	orrs	r3, r2
 800827c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800827e:	e03a      	b.n	80082f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d020      	beq.n	80082ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008288:	4b4f      	ldr	r3, [pc, #316]	; (80083c8 <HAL_RCC_OscConfig+0x2b0>)
 800828a:	2201      	movs	r2, #1
 800828c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800828e:	f7fc f85d 	bl	800434c <HAL_GetTick>
 8008292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008294:	e008      	b.n	80082a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008296:	f7fc f859 	bl	800434c <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d901      	bls.n	80082a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e1a5      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082a8:	4b46      	ldr	r3, [pc, #280]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0f0      	beq.n	8008296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082b4:	4b43      	ldr	r3, [pc, #268]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	4940      	ldr	r1, [pc, #256]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	600b      	str	r3, [r1, #0]
 80082c8:	e015      	b.n	80082f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082ca:	4b3f      	ldr	r3, [pc, #252]	; (80083c8 <HAL_RCC_OscConfig+0x2b0>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d0:	f7fc f83c 	bl	800434c <HAL_GetTick>
 80082d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082d6:	e008      	b.n	80082ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082d8:	f7fc f838 	bl	800434c <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d901      	bls.n	80082ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e184      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082ea:	4b36      	ldr	r3, [pc, #216]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1f0      	bne.n	80082d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0308 	and.w	r3, r3, #8
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d030      	beq.n	8008364 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d016      	beq.n	8008338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800830a:	4b30      	ldr	r3, [pc, #192]	; (80083cc <HAL_RCC_OscConfig+0x2b4>)
 800830c:	2201      	movs	r2, #1
 800830e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008310:	f7fc f81c 	bl	800434c <HAL_GetTick>
 8008314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008316:	e008      	b.n	800832a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008318:	f7fc f818 	bl	800434c <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d901      	bls.n	800832a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e164      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800832a:	4b26      	ldr	r3, [pc, #152]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 800832c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0f0      	beq.n	8008318 <HAL_RCC_OscConfig+0x200>
 8008336:	e015      	b.n	8008364 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008338:	4b24      	ldr	r3, [pc, #144]	; (80083cc <HAL_RCC_OscConfig+0x2b4>)
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800833e:	f7fc f805 	bl	800434c <HAL_GetTick>
 8008342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008344:	e008      	b.n	8008358 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008346:	f7fc f801 	bl	800434c <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	2b02      	cmp	r3, #2
 8008352:	d901      	bls.n	8008358 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e14d      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008358:	4b1a      	ldr	r3, [pc, #104]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 800835a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1f0      	bne.n	8008346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 80a0 	beq.w	80084b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008372:	2300      	movs	r3, #0
 8008374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008376:	4b13      	ldr	r3, [pc, #76]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10f      	bne.n	80083a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008382:	2300      	movs	r3, #0
 8008384:	60bb      	str	r3, [r7, #8]
 8008386:	4b0f      	ldr	r3, [pc, #60]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	4a0e      	ldr	r2, [pc, #56]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 800838c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008390:	6413      	str	r3, [r2, #64]	; 0x40
 8008392:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <HAL_RCC_OscConfig+0x2ac>)
 8008394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800839a:	60bb      	str	r3, [r7, #8]
 800839c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800839e:	2301      	movs	r3, #1
 80083a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083a2:	4b0b      	ldr	r3, [pc, #44]	; (80083d0 <HAL_RCC_OscConfig+0x2b8>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d121      	bne.n	80083f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083ae:	4b08      	ldr	r3, [pc, #32]	; (80083d0 <HAL_RCC_OscConfig+0x2b8>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a07      	ldr	r2, [pc, #28]	; (80083d0 <HAL_RCC_OscConfig+0x2b8>)
 80083b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083ba:	f7fb ffc7 	bl	800434c <HAL_GetTick>
 80083be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083c0:	e011      	b.n	80083e6 <HAL_RCC_OscConfig+0x2ce>
 80083c2:	bf00      	nop
 80083c4:	40023800 	.word	0x40023800
 80083c8:	42470000 	.word	0x42470000
 80083cc:	42470e80 	.word	0x42470e80
 80083d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083d4:	f7fb ffba 	bl	800434c <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e106      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083e6:	4b85      	ldr	r3, [pc, #532]	; (80085fc <HAL_RCC_OscConfig+0x4e4>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d0f0      	beq.n	80083d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d106      	bne.n	8008408 <HAL_RCC_OscConfig+0x2f0>
 80083fa:	4b81      	ldr	r3, [pc, #516]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	4a80      	ldr	r2, [pc, #512]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 8008400:	f043 0301 	orr.w	r3, r3, #1
 8008404:	6713      	str	r3, [r2, #112]	; 0x70
 8008406:	e01c      	b.n	8008442 <HAL_RCC_OscConfig+0x32a>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	2b05      	cmp	r3, #5
 800840e:	d10c      	bne.n	800842a <HAL_RCC_OscConfig+0x312>
 8008410:	4b7b      	ldr	r3, [pc, #492]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 8008412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008414:	4a7a      	ldr	r2, [pc, #488]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 8008416:	f043 0304 	orr.w	r3, r3, #4
 800841a:	6713      	str	r3, [r2, #112]	; 0x70
 800841c:	4b78      	ldr	r3, [pc, #480]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 800841e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008420:	4a77      	ldr	r2, [pc, #476]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 8008422:	f043 0301 	orr.w	r3, r3, #1
 8008426:	6713      	str	r3, [r2, #112]	; 0x70
 8008428:	e00b      	b.n	8008442 <HAL_RCC_OscConfig+0x32a>
 800842a:	4b75      	ldr	r3, [pc, #468]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 800842c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842e:	4a74      	ldr	r2, [pc, #464]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 8008430:	f023 0301 	bic.w	r3, r3, #1
 8008434:	6713      	str	r3, [r2, #112]	; 0x70
 8008436:	4b72      	ldr	r3, [pc, #456]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 8008438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843a:	4a71      	ldr	r2, [pc, #452]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 800843c:	f023 0304 	bic.w	r3, r3, #4
 8008440:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d015      	beq.n	8008476 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800844a:	f7fb ff7f 	bl	800434c <HAL_GetTick>
 800844e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008450:	e00a      	b.n	8008468 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008452:	f7fb ff7b 	bl	800434c <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008460:	4293      	cmp	r3, r2
 8008462:	d901      	bls.n	8008468 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e0c5      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008468:	4b65      	ldr	r3, [pc, #404]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 800846a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846c:	f003 0302 	and.w	r3, r3, #2
 8008470:	2b00      	cmp	r3, #0
 8008472:	d0ee      	beq.n	8008452 <HAL_RCC_OscConfig+0x33a>
 8008474:	e014      	b.n	80084a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008476:	f7fb ff69 	bl	800434c <HAL_GetTick>
 800847a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800847c:	e00a      	b.n	8008494 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800847e:	f7fb ff65 	bl	800434c <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	f241 3288 	movw	r2, #5000	; 0x1388
 800848c:	4293      	cmp	r3, r2
 800848e:	d901      	bls.n	8008494 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	e0af      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008494:	4b5a      	ldr	r3, [pc, #360]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 8008496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008498:	f003 0302 	and.w	r3, r3, #2
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1ee      	bne.n	800847e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d105      	bne.n	80084b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084a6:	4b56      	ldr	r3, [pc, #344]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 80084a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084aa:	4a55      	ldr	r2, [pc, #340]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 80084ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f000 809b 	beq.w	80085f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084bc:	4b50      	ldr	r3, [pc, #320]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f003 030c 	and.w	r3, r3, #12
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d05c      	beq.n	8008582 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d141      	bne.n	8008554 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084d0:	4b4c      	ldr	r3, [pc, #304]	; (8008604 <HAL_RCC_OscConfig+0x4ec>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084d6:	f7fb ff39 	bl	800434c <HAL_GetTick>
 80084da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084dc:	e008      	b.n	80084f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084de:	f7fb ff35 	bl	800434c <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d901      	bls.n	80084f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e081      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f0:	4b43      	ldr	r3, [pc, #268]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1f0      	bne.n	80084de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	69da      	ldr	r2, [r3, #28]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	431a      	orrs	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	019b      	lsls	r3, r3, #6
 800850c:	431a      	orrs	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	085b      	lsrs	r3, r3, #1
 8008514:	3b01      	subs	r3, #1
 8008516:	041b      	lsls	r3, r3, #16
 8008518:	431a      	orrs	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	061b      	lsls	r3, r3, #24
 8008520:	4937      	ldr	r1, [pc, #220]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 8008522:	4313      	orrs	r3, r2
 8008524:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008526:	4b37      	ldr	r3, [pc, #220]	; (8008604 <HAL_RCC_OscConfig+0x4ec>)
 8008528:	2201      	movs	r2, #1
 800852a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800852c:	f7fb ff0e 	bl	800434c <HAL_GetTick>
 8008530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008532:	e008      	b.n	8008546 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008534:	f7fb ff0a 	bl	800434c <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e056      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008546:	4b2e      	ldr	r3, [pc, #184]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0f0      	beq.n	8008534 <HAL_RCC_OscConfig+0x41c>
 8008552:	e04e      	b.n	80085f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008554:	4b2b      	ldr	r3, [pc, #172]	; (8008604 <HAL_RCC_OscConfig+0x4ec>)
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800855a:	f7fb fef7 	bl	800434c <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008560:	e008      	b.n	8008574 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008562:	f7fb fef3 	bl	800434c <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d901      	bls.n	8008574 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e03f      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008574:	4b22      	ldr	r3, [pc, #136]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1f0      	bne.n	8008562 <HAL_RCC_OscConfig+0x44a>
 8008580:	e037      	b.n	80085f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d101      	bne.n	800858e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e032      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800858e:	4b1c      	ldr	r3, [pc, #112]	; (8008600 <HAL_RCC_OscConfig+0x4e8>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d028      	beq.n	80085ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d121      	bne.n	80085ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d11a      	bne.n	80085ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80085be:	4013      	ands	r3, r2
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d111      	bne.n	80085ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d4:	085b      	lsrs	r3, r3, #1
 80085d6:	3b01      	subs	r3, #1
 80085d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085da:	429a      	cmp	r2, r3
 80085dc:	d107      	bne.n	80085ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d001      	beq.n	80085f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e000      	b.n	80085f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	40007000 	.word	0x40007000
 8008600:	40023800 	.word	0x40023800
 8008604:	42470060 	.word	0x42470060

08008608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e0cc      	b.n	80087b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800861c:	4b68      	ldr	r3, [pc, #416]	; (80087c0 <HAL_RCC_ClockConfig+0x1b8>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d90c      	bls.n	8008644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800862a:	4b65      	ldr	r3, [pc, #404]	; (80087c0 <HAL_RCC_ClockConfig+0x1b8>)
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	b2d2      	uxtb	r2, r2
 8008630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008632:	4b63      	ldr	r3, [pc, #396]	; (80087c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	429a      	cmp	r2, r3
 800863e:	d001      	beq.n	8008644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e0b8      	b.n	80087b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d020      	beq.n	8008692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	d005      	beq.n	8008668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800865c:	4b59      	ldr	r3, [pc, #356]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	4a58      	ldr	r2, [pc, #352]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0308 	and.w	r3, r3, #8
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008674:	4b53      	ldr	r3, [pc, #332]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	4a52      	ldr	r2, [pc, #328]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 800867a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800867e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008680:	4b50      	ldr	r3, [pc, #320]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	494d      	ldr	r1, [pc, #308]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 800868e:	4313      	orrs	r3, r2
 8008690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0301 	and.w	r3, r3, #1
 800869a:	2b00      	cmp	r3, #0
 800869c:	d044      	beq.n	8008728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d107      	bne.n	80086b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086a6:	4b47      	ldr	r3, [pc, #284]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d119      	bne.n	80086e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e07f      	b.n	80087b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d003      	beq.n	80086c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d107      	bne.n	80086d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086c6:	4b3f      	ldr	r3, [pc, #252]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d109      	bne.n	80086e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e06f      	b.n	80087b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086d6:	4b3b      	ldr	r3, [pc, #236]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e067      	b.n	80087b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086e6:	4b37      	ldr	r3, [pc, #220]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f023 0203 	bic.w	r2, r3, #3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	4934      	ldr	r1, [pc, #208]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086f8:	f7fb fe28 	bl	800434c <HAL_GetTick>
 80086fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086fe:	e00a      	b.n	8008716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008700:	f7fb fe24 	bl	800434c <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	f241 3288 	movw	r2, #5000	; 0x1388
 800870e:	4293      	cmp	r3, r2
 8008710:	d901      	bls.n	8008716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e04f      	b.n	80087b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008716:	4b2b      	ldr	r3, [pc, #172]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f003 020c 	and.w	r2, r3, #12
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	429a      	cmp	r2, r3
 8008726:	d1eb      	bne.n	8008700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008728:	4b25      	ldr	r3, [pc, #148]	; (80087c0 <HAL_RCC_ClockConfig+0x1b8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0307 	and.w	r3, r3, #7
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d20c      	bcs.n	8008750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008736:	4b22      	ldr	r3, [pc, #136]	; (80087c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	b2d2      	uxtb	r2, r2
 800873c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800873e:	4b20      	ldr	r3, [pc, #128]	; (80087c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	429a      	cmp	r2, r3
 800874a:	d001      	beq.n	8008750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e032      	b.n	80087b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d008      	beq.n	800876e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800875c:	4b19      	ldr	r3, [pc, #100]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	4916      	ldr	r1, [pc, #88]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 800876a:	4313      	orrs	r3, r2
 800876c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0308 	and.w	r3, r3, #8
 8008776:	2b00      	cmp	r3, #0
 8008778:	d009      	beq.n	800878e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800877a:	4b12      	ldr	r3, [pc, #72]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	490e      	ldr	r1, [pc, #56]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 800878a:	4313      	orrs	r3, r2
 800878c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800878e:	f000 f821 	bl	80087d4 <HAL_RCC_GetSysClockFreq>
 8008792:	4602      	mov	r2, r0
 8008794:	4b0b      	ldr	r3, [pc, #44]	; (80087c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	091b      	lsrs	r3, r3, #4
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	490a      	ldr	r1, [pc, #40]	; (80087c8 <HAL_RCC_ClockConfig+0x1c0>)
 80087a0:	5ccb      	ldrb	r3, [r1, r3]
 80087a2:	fa22 f303 	lsr.w	r3, r2, r3
 80087a6:	4a09      	ldr	r2, [pc, #36]	; (80087cc <HAL_RCC_ClockConfig+0x1c4>)
 80087a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <HAL_RCC_ClockConfig+0x1c8>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fb f860 	bl	8003874 <HAL_InitTick>

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	40023c00 	.word	0x40023c00
 80087c4:	40023800 	.word	0x40023800
 80087c8:	08012ae8 	.word	0x08012ae8
 80087cc:	20000014 	.word	0x20000014
 80087d0:	20000018 	.word	0x20000018

080087d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	607b      	str	r3, [r7, #4]
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	2300      	movs	r3, #0
 80087e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087ec:	4b67      	ldr	r3, [pc, #412]	; (800898c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f003 030c 	and.w	r3, r3, #12
 80087f4:	2b08      	cmp	r3, #8
 80087f6:	d00d      	beq.n	8008814 <HAL_RCC_GetSysClockFreq+0x40>
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	f200 80bd 	bhi.w	8008978 <HAL_RCC_GetSysClockFreq+0x1a4>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <HAL_RCC_GetSysClockFreq+0x34>
 8008802:	2b04      	cmp	r3, #4
 8008804:	d003      	beq.n	800880e <HAL_RCC_GetSysClockFreq+0x3a>
 8008806:	e0b7      	b.n	8008978 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008808:	4b61      	ldr	r3, [pc, #388]	; (8008990 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800880a:	60bb      	str	r3, [r7, #8]
       break;
 800880c:	e0b7      	b.n	800897e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800880e:	4b61      	ldr	r3, [pc, #388]	; (8008994 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008810:	60bb      	str	r3, [r7, #8]
      break;
 8008812:	e0b4      	b.n	800897e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008814:	4b5d      	ldr	r3, [pc, #372]	; (800898c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800881c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800881e:	4b5b      	ldr	r3, [pc, #364]	; (800898c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d04d      	beq.n	80088c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800882a:	4b58      	ldr	r3, [pc, #352]	; (800898c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	099b      	lsrs	r3, r3, #6
 8008830:	461a      	mov	r2, r3
 8008832:	f04f 0300 	mov.w	r3, #0
 8008836:	f240 10ff 	movw	r0, #511	; 0x1ff
 800883a:	f04f 0100 	mov.w	r1, #0
 800883e:	ea02 0800 	and.w	r8, r2, r0
 8008842:	ea03 0901 	and.w	r9, r3, r1
 8008846:	4640      	mov	r0, r8
 8008848:	4649      	mov	r1, r9
 800884a:	f04f 0200 	mov.w	r2, #0
 800884e:	f04f 0300 	mov.w	r3, #0
 8008852:	014b      	lsls	r3, r1, #5
 8008854:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008858:	0142      	lsls	r2, r0, #5
 800885a:	4610      	mov	r0, r2
 800885c:	4619      	mov	r1, r3
 800885e:	ebb0 0008 	subs.w	r0, r0, r8
 8008862:	eb61 0109 	sbc.w	r1, r1, r9
 8008866:	f04f 0200 	mov.w	r2, #0
 800886a:	f04f 0300 	mov.w	r3, #0
 800886e:	018b      	lsls	r3, r1, #6
 8008870:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008874:	0182      	lsls	r2, r0, #6
 8008876:	1a12      	subs	r2, r2, r0
 8008878:	eb63 0301 	sbc.w	r3, r3, r1
 800887c:	f04f 0000 	mov.w	r0, #0
 8008880:	f04f 0100 	mov.w	r1, #0
 8008884:	00d9      	lsls	r1, r3, #3
 8008886:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800888a:	00d0      	lsls	r0, r2, #3
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	eb12 0208 	adds.w	r2, r2, r8
 8008894:	eb43 0309 	adc.w	r3, r3, r9
 8008898:	f04f 0000 	mov.w	r0, #0
 800889c:	f04f 0100 	mov.w	r1, #0
 80088a0:	0259      	lsls	r1, r3, #9
 80088a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80088a6:	0250      	lsls	r0, r2, #9
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4610      	mov	r0, r2
 80088ae:	4619      	mov	r1, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	461a      	mov	r2, r3
 80088b4:	f04f 0300 	mov.w	r3, #0
 80088b8:	f7f7 fcf2 	bl	80002a0 <__aeabi_uldivmod>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4613      	mov	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	e04a      	b.n	800895c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088c6:	4b31      	ldr	r3, [pc, #196]	; (800898c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	099b      	lsrs	r3, r3, #6
 80088cc:	461a      	mov	r2, r3
 80088ce:	f04f 0300 	mov.w	r3, #0
 80088d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80088d6:	f04f 0100 	mov.w	r1, #0
 80088da:	ea02 0400 	and.w	r4, r2, r0
 80088de:	ea03 0501 	and.w	r5, r3, r1
 80088e2:	4620      	mov	r0, r4
 80088e4:	4629      	mov	r1, r5
 80088e6:	f04f 0200 	mov.w	r2, #0
 80088ea:	f04f 0300 	mov.w	r3, #0
 80088ee:	014b      	lsls	r3, r1, #5
 80088f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80088f4:	0142      	lsls	r2, r0, #5
 80088f6:	4610      	mov	r0, r2
 80088f8:	4619      	mov	r1, r3
 80088fa:	1b00      	subs	r0, r0, r4
 80088fc:	eb61 0105 	sbc.w	r1, r1, r5
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	018b      	lsls	r3, r1, #6
 800890a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800890e:	0182      	lsls	r2, r0, #6
 8008910:	1a12      	subs	r2, r2, r0
 8008912:	eb63 0301 	sbc.w	r3, r3, r1
 8008916:	f04f 0000 	mov.w	r0, #0
 800891a:	f04f 0100 	mov.w	r1, #0
 800891e:	00d9      	lsls	r1, r3, #3
 8008920:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008924:	00d0      	lsls	r0, r2, #3
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	1912      	adds	r2, r2, r4
 800892c:	eb45 0303 	adc.w	r3, r5, r3
 8008930:	f04f 0000 	mov.w	r0, #0
 8008934:	f04f 0100 	mov.w	r1, #0
 8008938:	0299      	lsls	r1, r3, #10
 800893a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800893e:	0290      	lsls	r0, r2, #10
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4610      	mov	r0, r2
 8008946:	4619      	mov	r1, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	461a      	mov	r2, r3
 800894c:	f04f 0300 	mov.w	r3, #0
 8008950:	f7f7 fca6 	bl	80002a0 <__aeabi_uldivmod>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4613      	mov	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800895c:	4b0b      	ldr	r3, [pc, #44]	; (800898c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	0c1b      	lsrs	r3, r3, #16
 8008962:	f003 0303 	and.w	r3, r3, #3
 8008966:	3301      	adds	r3, #1
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	fbb2 f3f3 	udiv	r3, r2, r3
 8008974:	60bb      	str	r3, [r7, #8]
      break;
 8008976:	e002      	b.n	800897e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008978:	4b05      	ldr	r3, [pc, #20]	; (8008990 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800897a:	60bb      	str	r3, [r7, #8]
      break;
 800897c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800897e:	68bb      	ldr	r3, [r7, #8]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800898a:	bf00      	nop
 800898c:	40023800 	.word	0x40023800
 8008990:	00f42400 	.word	0x00f42400
 8008994:	007a1200 	.word	0x007a1200

08008998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008998:	b480      	push	{r7}
 800899a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800899c:	4b03      	ldr	r3, [pc, #12]	; (80089ac <HAL_RCC_GetHCLKFreq+0x14>)
 800899e:	681b      	ldr	r3, [r3, #0]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	20000014 	.word	0x20000014

080089b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80089b4:	f7ff fff0 	bl	8008998 <HAL_RCC_GetHCLKFreq>
 80089b8:	4602      	mov	r2, r0
 80089ba:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	0a9b      	lsrs	r3, r3, #10
 80089c0:	f003 0307 	and.w	r3, r3, #7
 80089c4:	4903      	ldr	r1, [pc, #12]	; (80089d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089c6:	5ccb      	ldrb	r3, [r1, r3]
 80089c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	40023800 	.word	0x40023800
 80089d4:	08012af8 	.word	0x08012af8

080089d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80089dc:	f7ff ffdc 	bl	8008998 <HAL_RCC_GetHCLKFreq>
 80089e0:	4602      	mov	r2, r0
 80089e2:	4b05      	ldr	r3, [pc, #20]	; (80089f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	0b5b      	lsrs	r3, r3, #13
 80089e8:	f003 0307 	and.w	r3, r3, #7
 80089ec:	4903      	ldr	r1, [pc, #12]	; (80089fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80089ee:	5ccb      	ldrb	r3, [r1, r3]
 80089f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	40023800 	.word	0x40023800
 80089fc:	08012af8 	.word	0x08012af8

08008a00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	220f      	movs	r2, #15
 8008a0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008a10:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <HAL_RCC_GetClockConfig+0x5c>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f003 0203 	and.w	r2, r3, #3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008a1c:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <HAL_RCC_GetClockConfig+0x5c>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008a28:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <HAL_RCC_GetClockConfig+0x5c>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008a34:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <HAL_RCC_GetClockConfig+0x5c>)
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	08db      	lsrs	r3, r3, #3
 8008a3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008a42:	4b07      	ldr	r3, [pc, #28]	; (8008a60 <HAL_RCC_GetClockConfig+0x60>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0207 	and.w	r2, r3, #7
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	601a      	str	r2, [r3, #0]
}
 8008a4e:	bf00      	nop
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	40023800 	.word	0x40023800
 8008a60:	40023c00 	.word	0x40023c00

08008a64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d105      	bne.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d035      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008a8c:	4b62      	ldr	r3, [pc, #392]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a92:	f7fb fc5b 	bl	800434c <HAL_GetTick>
 8008a96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a98:	e008      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008a9a:	f7fb fc57 	bl	800434c <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d901      	bls.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e0b0      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008aac:	4b5b      	ldr	r3, [pc, #364]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1f0      	bne.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	019a      	lsls	r2, r3, #6
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	071b      	lsls	r3, r3, #28
 8008ac4:	4955      	ldr	r1, [pc, #340]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008acc:	4b52      	ldr	r3, [pc, #328]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008ace:	2201      	movs	r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ad2:	f7fb fc3b 	bl	800434c <HAL_GetTick>
 8008ad6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008ad8:	e008      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008ada:	f7fb fc37 	bl	800434c <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d901      	bls.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e090      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008aec:	4b4b      	ldr	r3, [pc, #300]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0f0      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 8083 	beq.w	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008b06:	2300      	movs	r3, #0
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	4b44      	ldr	r3, [pc, #272]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	4a43      	ldr	r2, [pc, #268]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b14:	6413      	str	r3, [r2, #64]	; 0x40
 8008b16:	4b41      	ldr	r3, [pc, #260]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008b22:	4b3f      	ldr	r3, [pc, #252]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a3e      	ldr	r2, [pc, #248]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b2e:	f7fb fc0d 	bl	800434c <HAL_GetTick>
 8008b32:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b34:	e008      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b36:	f7fb fc09 	bl	800434c <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d901      	bls.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e062      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b48:	4b35      	ldr	r3, [pc, #212]	; (8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d0f0      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b54:	4b31      	ldr	r3, [pc, #196]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b5c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d02f      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d028      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b72:	4b2a      	ldr	r3, [pc, #168]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b7c:	4b29      	ldr	r3, [pc, #164]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008b7e:	2201      	movs	r2, #1
 8008b80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b82:	4b28      	ldr	r3, [pc, #160]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008b88:	4a24      	ldr	r2, [pc, #144]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b8e:	4b23      	ldr	r3, [pc, #140]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d114      	bne.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008b9a:	f7fb fbd7 	bl	800434c <HAL_GetTick>
 8008b9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ba0:	e00a      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ba2:	f7fb fbd3 	bl	800434c <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d901      	bls.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e02a      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bb8:	4b18      	ldr	r3, [pc, #96]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bbc:	f003 0302 	and.w	r3, r3, #2
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d0ee      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bd0:	d10d      	bne.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008bd2:	4b12      	ldr	r3, [pc, #72]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be6:	490d      	ldr	r1, [pc, #52]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	608b      	str	r3, [r1, #8]
 8008bec:	e005      	b.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008bee:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	4a0a      	ldr	r2, [pc, #40]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008bf4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008bf8:	6093      	str	r3, [r2, #8]
 8008bfa:	4b08      	ldr	r3, [pc, #32]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008bfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c06:	4905      	ldr	r1, [pc, #20]	; (8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	42470068 	.word	0x42470068
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	40007000 	.word	0x40007000
 8008c24:	42470e40 	.word	0x42470e40

08008c28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d13e      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008c46:	4b23      	ldr	r3, [pc, #140]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d005      	beq.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d12f      	bne.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c5c:	4b1e      	ldr	r3, [pc, #120]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c5e:	617b      	str	r3, [r7, #20]
          break;
 8008c60:	e02f      	b.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008c62:	4b1c      	ldr	r3, [pc, #112]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c6e:	d108      	bne.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008c70:	4b18      	ldr	r3, [pc, #96]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c78:	4a18      	ldr	r2, [pc, #96]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7e:	613b      	str	r3, [r7, #16]
 8008c80:	e007      	b.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008c82:	4b14      	ldr	r3, [pc, #80]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c8a:	4a15      	ldr	r2, [pc, #84]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c90:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008c92:	4b10      	ldr	r3, [pc, #64]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c98:	099b      	lsrs	r3, r3, #6
 8008c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	fb02 f303 	mul.w	r3, r2, r3
 8008ca4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008ca6:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cac:	0f1b      	lsrs	r3, r3, #28
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb8:	617b      	str	r3, [r7, #20]
          break;
 8008cba:	e002      	b.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	617b      	str	r3, [r7, #20]
          break;
 8008cc0:	bf00      	nop
        }
      }
      break;
 8008cc2:	bf00      	nop
    }
  }
  return frequency;
 8008cc4:	697b      	ldr	r3, [r7, #20]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	371c      	adds	r7, #28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	40023800 	.word	0x40023800
 8008cd8:	00bb8000 	.word	0x00bb8000
 8008cdc:	007a1200 	.word	0x007a1200
 8008ce0:	00f42400 	.word	0x00f42400

08008ce4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e083      	b.n	8008dfe <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	7f5b      	ldrb	r3, [r3, #29]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d105      	bne.n	8008d0c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7fa fc7a 	bl	8003600 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	22ca      	movs	r2, #202	; 0xca
 8008d18:	625a      	str	r2, [r3, #36]	; 0x24
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2253      	movs	r2, #83	; 0x53
 8008d20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa59 	bl	80091da <RTC_EnterInitMode>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d008      	beq.n	8008d40 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	22ff      	movs	r2, #255	; 0xff
 8008d34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2204      	movs	r2, #4
 8008d3a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e05e      	b.n	8008dfe <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6812      	ldr	r2, [r2, #0]
 8008d4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d52:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6899      	ldr	r1, [r3, #8]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	431a      	orrs	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	68d2      	ldr	r2, [r2, #12]
 8008d7a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6919      	ldr	r1, [r3, #16]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	041a      	lsls	r2, r3, #16
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d9e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f003 0320 	and.w	r3, r3, #32
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10e      	bne.n	8008dcc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f9eb 	bl	800918a <HAL_RTC_WaitForSynchro>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d008      	beq.n	8008dcc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	22ff      	movs	r2, #255	; 0xff
 8008dc0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2204      	movs	r2, #4
 8008dc6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e018      	b.n	8008dfe <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008dda:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	699a      	ldr	r2, [r3, #24]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	22ff      	movs	r2, #255	; 0xff
 8008df4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
  }
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e06:	b590      	push	{r4, r7, lr}
 8008e08:	b087      	sub	sp, #28
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	60f8      	str	r0, [r7, #12]
 8008e0e:	60b9      	str	r1, [r7, #8]
 8008e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	7f1b      	ldrb	r3, [r3, #28]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d101      	bne.n	8008e22 <HAL_RTC_SetTime+0x1c>
 8008e1e:	2302      	movs	r3, #2
 8008e20:	e0aa      	b.n	8008f78 <HAL_RTC_SetTime+0x172>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2201      	movs	r2, #1
 8008e26:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d126      	bne.n	8008e82 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d102      	bne.n	8008e48 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2200      	movs	r2, #0
 8008e46:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 f9f0 	bl	8009232 <RTC_ByteToBcd2>
 8008e52:	4603      	mov	r3, r0
 8008e54:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	785b      	ldrb	r3, [r3, #1]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f9e9 	bl	8009232 <RTC_ByteToBcd2>
 8008e60:	4603      	mov	r3, r0
 8008e62:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008e64:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	789b      	ldrb	r3, [r3, #2]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 f9e1 	bl	8009232 <RTC_ByteToBcd2>
 8008e70:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008e72:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	78db      	ldrb	r3, [r3, #3]
 8008e7a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	617b      	str	r3, [r7, #20]
 8008e80:	e018      	b.n	8008eb4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d102      	bne.n	8008e96 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2200      	movs	r2, #0
 8008e94:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	785b      	ldrb	r3, [r3, #1]
 8008ea0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008ea2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008ea8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	78db      	ldrb	r3, [r3, #3]
 8008eae:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	22ca      	movs	r2, #202	; 0xca
 8008eba:	625a      	str	r2, [r3, #36]	; 0x24
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2253      	movs	r2, #83	; 0x53
 8008ec2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 f988 	bl	80091da <RTC_EnterInitMode>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	22ff      	movs	r2, #255	; 0xff
 8008ed6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2204      	movs	r2, #4
 8008edc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e047      	b.n	8008f78 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008ef2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008ef6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f06:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6899      	ldr	r1, [r3, #8]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	68da      	ldr	r2, [r3, #12]
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f2e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f003 0320 	and.w	r3, r3, #32
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d111      	bne.n	8008f62 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 f923 	bl	800918a <HAL_RTC_WaitForSynchro>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00b      	beq.n	8008f62 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	22ff      	movs	r2, #255	; 0xff
 8008f50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2204      	movs	r2, #4
 8008f56:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e00a      	b.n	8008f78 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	22ff      	movs	r2, #255	; 0xff
 8008f68:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008f76:	2300      	movs	r3, #0
  }
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	371c      	adds	r7, #28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd90      	pop	{r4, r7, pc}

08008f80 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008fb2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008fb6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	0c1b      	lsrs	r3, r3, #16
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	0a1b      	lsrs	r3, r3, #8
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	0c1b      	lsrs	r3, r3, #16
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d11a      	bne.n	8009032 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	4618      	mov	r0, r3
 8009002:	f000 f934 	bl	800926e <RTC_Bcd2ToByte>
 8009006:	4603      	mov	r3, r0
 8009008:	461a      	mov	r2, r3
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	785b      	ldrb	r3, [r3, #1]
 8009012:	4618      	mov	r0, r3
 8009014:	f000 f92b 	bl	800926e <RTC_Bcd2ToByte>
 8009018:	4603      	mov	r3, r0
 800901a:	461a      	mov	r2, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	789b      	ldrb	r3, [r3, #2]
 8009024:	4618      	mov	r0, r3
 8009026:	f000 f922 	bl	800926e <RTC_Bcd2ToByte>
 800902a:	4603      	mov	r3, r0
 800902c:	461a      	mov	r2, r3
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800903c:	b590      	push	{r4, r7, lr}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	7f1b      	ldrb	r3, [r3, #28]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_RTC_SetDate+0x1c>
 8009054:	2302      	movs	r3, #2
 8009056:	e094      	b.n	8009182 <HAL_RTC_SetDate+0x146>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2201      	movs	r2, #1
 800905c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2202      	movs	r2, #2
 8009062:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10e      	bne.n	8009088 <HAL_RTC_SetDate+0x4c>
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	785b      	ldrb	r3, [r3, #1]
 800906e:	f003 0310 	and.w	r3, r3, #16
 8009072:	2b00      	cmp	r3, #0
 8009074:	d008      	beq.n	8009088 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	785b      	ldrb	r3, [r3, #1]
 800907a:	f023 0310 	bic.w	r3, r3, #16
 800907e:	b2db      	uxtb	r3, r3
 8009080:	330a      	adds	r3, #10
 8009082:	b2da      	uxtb	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d11c      	bne.n	80090c8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	78db      	ldrb	r3, [r3, #3]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f8cd 	bl	8009232 <RTC_ByteToBcd2>
 8009098:	4603      	mov	r3, r0
 800909a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	785b      	ldrb	r3, [r3, #1]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f8c6 	bl	8009232 <RTC_ByteToBcd2>
 80090a6:	4603      	mov	r3, r0
 80090a8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80090aa:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	789b      	ldrb	r3, [r3, #2]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 f8be 	bl	8009232 <RTC_ByteToBcd2>
 80090b6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80090b8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80090c2:	4313      	orrs	r3, r2
 80090c4:	617b      	str	r3, [r7, #20]
 80090c6:	e00e      	b.n	80090e6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	78db      	ldrb	r3, [r3, #3]
 80090cc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	785b      	ldrb	r3, [r3, #1]
 80090d2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80090d4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80090da:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80090e2:	4313      	orrs	r3, r2
 80090e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	22ca      	movs	r2, #202	; 0xca
 80090ec:	625a      	str	r2, [r3, #36]	; 0x24
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2253      	movs	r2, #83	; 0x53
 80090f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 f86f 	bl	80091da <RTC_EnterInitMode>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00b      	beq.n	800911a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	22ff      	movs	r2, #255	; 0xff
 8009108:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2204      	movs	r2, #4
 800910e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e033      	b.n	8009182 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009124:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009128:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68da      	ldr	r2, [r3, #12]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009138:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f003 0320 	and.w	r3, r3, #32
 8009144:	2b00      	cmp	r3, #0
 8009146:	d111      	bne.n	800916c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 f81e 	bl	800918a <HAL_RTC_WaitForSynchro>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00b      	beq.n	800916c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	22ff      	movs	r2, #255	; 0xff
 800915a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2204      	movs	r2, #4
 8009160:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e00a      	b.n	8009182 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	22ff      	movs	r2, #255	; 0xff
 8009172:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2201      	movs	r2, #1
 8009178:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009180:	2300      	movs	r3, #0
  }
}
 8009182:	4618      	mov	r0, r3
 8009184:	371c      	adds	r7, #28
 8009186:	46bd      	mov	sp, r7
 8009188:	bd90      	pop	{r4, r7, pc}

0800918a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68da      	ldr	r2, [r3, #12]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80091a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091a6:	f7fb f8d1 	bl	800434c <HAL_GetTick>
 80091aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80091ac:	e009      	b.n	80091c2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80091ae:	f7fb f8cd 	bl	800434c <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091bc:	d901      	bls.n	80091c2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e007      	b.n	80091d2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	f003 0320 	and.w	r3, r3, #32
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0ee      	beq.n	80091ae <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d119      	bne.n	8009228 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091fe:	f7fb f8a5 	bl	800434c <HAL_GetTick>
 8009202:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009204:	e009      	b.n	800921a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009206:	f7fb f8a1 	bl	800434c <HAL_GetTick>
 800920a:	4602      	mov	r2, r0
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009214:	d901      	bls.n	800921a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009216:	2303      	movs	r3, #3
 8009218:	e007      	b.n	800922a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009224:	2b00      	cmp	r3, #0
 8009226:	d0ee      	beq.n	8009206 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009232:	b480      	push	{r7}
 8009234:	b085      	sub	sp, #20
 8009236:	af00      	add	r7, sp, #0
 8009238:	4603      	mov	r3, r0
 800923a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800923c:	2300      	movs	r3, #0
 800923e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8009240:	e005      	b.n	800924e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3301      	adds	r3, #1
 8009246:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009248:	79fb      	ldrb	r3, [r7, #7]
 800924a:	3b0a      	subs	r3, #10
 800924c:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800924e:	79fb      	ldrb	r3, [r7, #7]
 8009250:	2b09      	cmp	r3, #9
 8009252:	d8f6      	bhi.n	8009242 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	011b      	lsls	r3, r3, #4
 800925a:	b2da      	uxtb	r2, r3
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	4313      	orrs	r3, r2
 8009260:	b2db      	uxtb	r3, r3
}
 8009262:	4618      	mov	r0, r3
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800926e:	b480      	push	{r7}
 8009270:	b085      	sub	sp, #20
 8009272:	af00      	add	r7, sp, #0
 8009274:	4603      	mov	r3, r0
 8009276:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800927c:	79fb      	ldrb	r3, [r7, #7]
 800927e:	091b      	lsrs	r3, r3, #4
 8009280:	b2db      	uxtb	r3, r3
 8009282:	461a      	mov	r2, r3
 8009284:	4613      	mov	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	005b      	lsls	r3, r3, #1
 800928c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800928e:	79fb      	ldrb	r3, [r7, #7]
 8009290:	f003 030f 	and.w	r3, r3, #15
 8009294:	b2da      	uxtb	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	b2db      	uxtb	r3, r3
 800929a:	4413      	add	r3, r2
 800929c:	b2db      	uxtb	r3, r3
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e07b      	b.n	80093b4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d108      	bne.n	80092d6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092cc:	d009      	beq.n	80092e2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	61da      	str	r2, [r3, #28]
 80092d4:	e005      	b.n	80092e2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d106      	bne.n	8009302 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7fa f9a9 	bl	8003654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2202      	movs	r2, #2
 8009306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009318:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800932a:	431a      	orrs	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009334:	431a      	orrs	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	431a      	orrs	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	695b      	ldr	r3, [r3, #20]
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	431a      	orrs	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009352:	431a      	orrs	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009366:	ea42 0103 	orr.w	r1, r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	0c1b      	lsrs	r3, r3, #16
 8009380:	f003 0104 	and.w	r1, r3, #4
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	f003 0210 	and.w	r2, r3, #16
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	430a      	orrs	r2, r1
 8009392:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	69da      	ldr	r2, [r3, #28]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e041      	b.n	8009452 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7fa f9ce 	bl	8003784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3304      	adds	r3, #4
 80093f8:	4619      	mov	r1, r3
 80093fa:	4610      	mov	r0, r2
 80093fc:	f000 fb32 	bl	8009a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
	...

0800945c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b01      	cmp	r3, #1
 800946e:	d001      	beq.n	8009474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e04e      	b.n	8009512 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68da      	ldr	r2, [r3, #12]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f042 0201 	orr.w	r2, r2, #1
 800948a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a23      	ldr	r2, [pc, #140]	; (8009520 <HAL_TIM_Base_Start_IT+0xc4>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d022      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x80>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800949e:	d01d      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x80>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a1f      	ldr	r2, [pc, #124]	; (8009524 <HAL_TIM_Base_Start_IT+0xc8>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d018      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x80>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a1e      	ldr	r2, [pc, #120]	; (8009528 <HAL_TIM_Base_Start_IT+0xcc>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d013      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x80>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a1c      	ldr	r2, [pc, #112]	; (800952c <HAL_TIM_Base_Start_IT+0xd0>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d00e      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x80>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a1b      	ldr	r2, [pc, #108]	; (8009530 <HAL_TIM_Base_Start_IT+0xd4>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d009      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x80>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a19      	ldr	r2, [pc, #100]	; (8009534 <HAL_TIM_Base_Start_IT+0xd8>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d004      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x80>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a18      	ldr	r2, [pc, #96]	; (8009538 <HAL_TIM_Base_Start_IT+0xdc>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d111      	bne.n	8009500 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b06      	cmp	r3, #6
 80094ec:	d010      	beq.n	8009510 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f042 0201 	orr.w	r2, r2, #1
 80094fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094fe:	e007      	b.n	8009510 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0201 	orr.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	40010000 	.word	0x40010000
 8009524:	40000400 	.word	0x40000400
 8009528:	40000800 	.word	0x40000800
 800952c:	40000c00 	.word	0x40000c00
 8009530:	40010400 	.word	0x40010400
 8009534:	40014000 	.word	0x40014000
 8009538:	40001800 	.word	0x40001800

0800953c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0201 	bic.w	r2, r2, #1
 8009552:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6a1a      	ldr	r2, [r3, #32]
 800955a:	f241 1311 	movw	r3, #4369	; 0x1111
 800955e:	4013      	ands	r3, r2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10f      	bne.n	8009584 <HAL_TIM_Base_Stop_IT+0x48>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6a1a      	ldr	r2, [r3, #32]
 800956a:	f240 4344 	movw	r3, #1092	; 0x444
 800956e:	4013      	ands	r3, r2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d107      	bne.n	8009584 <HAL_TIM_Base_Stop_IT+0x48>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f022 0201 	bic.w	r2, r2, #1
 8009582:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b086      	sub	sp, #24
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e097      	b.n	80096de <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d106      	bne.n	80095c8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7fa f88e 	bl	80036e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2202      	movs	r2, #2
 80095cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	6812      	ldr	r2, [r2, #0]
 80095da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095de:	f023 0307 	bic.w	r3, r3, #7
 80095e2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3304      	adds	r3, #4
 80095ec:	4619      	mov	r1, r3
 80095ee:	4610      	mov	r0, r2
 80095f0:	f000 fa38 	bl	8009a64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	4313      	orrs	r3, r2
 8009614:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800961c:	f023 0303 	bic.w	r3, r3, #3
 8009620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	689a      	ldr	r2, [r3, #8]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	021b      	lsls	r3, r3, #8
 800962c:	4313      	orrs	r3, r2
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	4313      	orrs	r3, r2
 8009632:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800963a:	f023 030c 	bic.w	r3, r3, #12
 800963e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800964a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	021b      	lsls	r3, r3, #8
 8009656:	4313      	orrs	r3, r2
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	4313      	orrs	r3, r2
 800965c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	011a      	lsls	r2, r3, #4
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	031b      	lsls	r3, r3, #12
 800966a:	4313      	orrs	r3, r2
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	4313      	orrs	r3, r2
 8009670:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009678:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009680:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	011b      	lsls	r3, r3, #4
 800968c:	4313      	orrs	r3, r2
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	4313      	orrs	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096f6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096fe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009706:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800970e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d110      	bne.n	8009738 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d102      	bne.n	8009722 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800971c:	7b7b      	ldrb	r3, [r7, #13]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d001      	beq.n	8009726 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e069      	b.n	80097fa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2202      	movs	r2, #2
 800972a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2202      	movs	r2, #2
 8009732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009736:	e031      	b.n	800979c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b04      	cmp	r3, #4
 800973c:	d110      	bne.n	8009760 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d102      	bne.n	800974a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009744:	7b3b      	ldrb	r3, [r7, #12]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d001      	beq.n	800974e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e055      	b.n	80097fa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2202      	movs	r2, #2
 8009752:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2202      	movs	r2, #2
 800975a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800975e:	e01d      	b.n	800979c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d108      	bne.n	8009778 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009766:	7bbb      	ldrb	r3, [r7, #14]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d105      	bne.n	8009778 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800976c:	7b7b      	ldrb	r3, [r7, #13]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d102      	bne.n	8009778 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009772:	7b3b      	ldrb	r3, [r7, #12]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d001      	beq.n	800977c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e03e      	b.n	80097fa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2202      	movs	r2, #2
 8009780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <HAL_TIM_Encoder_Start+0xc4>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b04      	cmp	r3, #4
 80097a6:	d008      	beq.n	80097ba <HAL_TIM_Encoder_Start+0xd4>
 80097a8:	e00f      	b.n	80097ca <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2201      	movs	r2, #1
 80097b0:	2100      	movs	r1, #0
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 f9f6 	bl	8009ba4 <TIM_CCxChannelCmd>
      break;
 80097b8:	e016      	b.n	80097e8 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2201      	movs	r2, #1
 80097c0:	2104      	movs	r1, #4
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 f9ee 	bl	8009ba4 <TIM_CCxChannelCmd>
      break;
 80097c8:	e00e      	b.n	80097e8 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2201      	movs	r2, #1
 80097d0:	2100      	movs	r1, #0
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 f9e6 	bl	8009ba4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2201      	movs	r2, #1
 80097de:	2104      	movs	r1, #4
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 f9df 	bl	8009ba4 <TIM_CCxChannelCmd>
      break;
 80097e6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0201 	orr.w	r2, r2, #1
 80097f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	f003 0302 	and.w	r3, r3, #2
 8009814:	2b02      	cmp	r3, #2
 8009816:	d122      	bne.n	800985e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f003 0302 	and.w	r3, r3, #2
 8009822:	2b02      	cmp	r3, #2
 8009824:	d11b      	bne.n	800985e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f06f 0202 	mvn.w	r2, #2
 800982e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	f003 0303 	and.w	r3, r3, #3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d003      	beq.n	800984c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f8ee 	bl	8009a26 <HAL_TIM_IC_CaptureCallback>
 800984a:	e005      	b.n	8009858 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 f8e0 	bl	8009a12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f8f1 	bl	8009a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	f003 0304 	and.w	r3, r3, #4
 8009868:	2b04      	cmp	r3, #4
 800986a:	d122      	bne.n	80098b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	f003 0304 	and.w	r3, r3, #4
 8009876:	2b04      	cmp	r3, #4
 8009878:	d11b      	bne.n	80098b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f06f 0204 	mvn.w	r2, #4
 8009882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009894:	2b00      	cmp	r3, #0
 8009896:	d003      	beq.n	80098a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f8c4 	bl	8009a26 <HAL_TIM_IC_CaptureCallback>
 800989e:	e005      	b.n	80098ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f8b6 	bl	8009a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f8c7 	bl	8009a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	2b08      	cmp	r3, #8
 80098be:	d122      	bne.n	8009906 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	f003 0308 	and.w	r3, r3, #8
 80098ca:	2b08      	cmp	r3, #8
 80098cc:	d11b      	bne.n	8009906 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f06f 0208 	mvn.w	r2, #8
 80098d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2204      	movs	r2, #4
 80098dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69db      	ldr	r3, [r3, #28]
 80098e4:	f003 0303 	and.w	r3, r3, #3
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d003      	beq.n	80098f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f89a 	bl	8009a26 <HAL_TIM_IC_CaptureCallback>
 80098f2:	e005      	b.n	8009900 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f88c 	bl	8009a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f89d 	bl	8009a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	f003 0310 	and.w	r3, r3, #16
 8009910:	2b10      	cmp	r3, #16
 8009912:	d122      	bne.n	800995a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f003 0310 	and.w	r3, r3, #16
 800991e:	2b10      	cmp	r3, #16
 8009920:	d11b      	bne.n	800995a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f06f 0210 	mvn.w	r2, #16
 800992a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2208      	movs	r2, #8
 8009930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	69db      	ldr	r3, [r3, #28]
 8009938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f870 	bl	8009a26 <HAL_TIM_IC_CaptureCallback>
 8009946:	e005      	b.n	8009954 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f862 	bl	8009a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f873 	bl	8009a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	2b01      	cmp	r3, #1
 8009966:	d10e      	bne.n	8009986 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b01      	cmp	r3, #1
 8009974:	d107      	bne.n	8009986 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f06f 0201 	mvn.w	r2, #1
 800997e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7f9 fcd9 	bl	8003338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009990:	2b80      	cmp	r3, #128	; 0x80
 8009992:	d10e      	bne.n	80099b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800999e:	2b80      	cmp	r3, #128	; 0x80
 80099a0:	d107      	bne.n	80099b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f9a5 	bl	8009cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099bc:	2b40      	cmp	r3, #64	; 0x40
 80099be:	d10e      	bne.n	80099de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ca:	2b40      	cmp	r3, #64	; 0x40
 80099cc:	d107      	bne.n	80099de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f838 	bl	8009a4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	f003 0320 	and.w	r3, r3, #32
 80099e8:	2b20      	cmp	r3, #32
 80099ea:	d10e      	bne.n	8009a0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	f003 0320 	and.w	r3, r3, #32
 80099f6:	2b20      	cmp	r3, #32
 80099f8:	d107      	bne.n	8009a0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f06f 0220 	mvn.w	r2, #32
 8009a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f96f 	bl	8009ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a0a:	bf00      	nop
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b083      	sub	sp, #12
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a1a:	bf00      	nop
 8009a1c:	370c      	adds	r7, #12
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b083      	sub	sp, #12
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a2e:	bf00      	nop
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr

08009a3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b083      	sub	sp, #12
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a42:	bf00      	nop
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b083      	sub	sp, #12
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a56:	bf00      	nop
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
	...

08009a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a40      	ldr	r2, [pc, #256]	; (8009b78 <TIM_Base_SetConfig+0x114>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d013      	beq.n	8009aa4 <TIM_Base_SetConfig+0x40>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a82:	d00f      	beq.n	8009aa4 <TIM_Base_SetConfig+0x40>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a3d      	ldr	r2, [pc, #244]	; (8009b7c <TIM_Base_SetConfig+0x118>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d00b      	beq.n	8009aa4 <TIM_Base_SetConfig+0x40>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a3c      	ldr	r2, [pc, #240]	; (8009b80 <TIM_Base_SetConfig+0x11c>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d007      	beq.n	8009aa4 <TIM_Base_SetConfig+0x40>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a3b      	ldr	r2, [pc, #236]	; (8009b84 <TIM_Base_SetConfig+0x120>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d003      	beq.n	8009aa4 <TIM_Base_SetConfig+0x40>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a3a      	ldr	r2, [pc, #232]	; (8009b88 <TIM_Base_SetConfig+0x124>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d108      	bne.n	8009ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a2f      	ldr	r2, [pc, #188]	; (8009b78 <TIM_Base_SetConfig+0x114>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d02b      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ac4:	d027      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a2c      	ldr	r2, [pc, #176]	; (8009b7c <TIM_Base_SetConfig+0x118>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d023      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a2b      	ldr	r2, [pc, #172]	; (8009b80 <TIM_Base_SetConfig+0x11c>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d01f      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a2a      	ldr	r2, [pc, #168]	; (8009b84 <TIM_Base_SetConfig+0x120>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d01b      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a29      	ldr	r2, [pc, #164]	; (8009b88 <TIM_Base_SetConfig+0x124>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d017      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a28      	ldr	r2, [pc, #160]	; (8009b8c <TIM_Base_SetConfig+0x128>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d013      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a27      	ldr	r2, [pc, #156]	; (8009b90 <TIM_Base_SetConfig+0x12c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d00f      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a26      	ldr	r2, [pc, #152]	; (8009b94 <TIM_Base_SetConfig+0x130>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d00b      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a25      	ldr	r2, [pc, #148]	; (8009b98 <TIM_Base_SetConfig+0x134>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d007      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a24      	ldr	r2, [pc, #144]	; (8009b9c <TIM_Base_SetConfig+0x138>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d003      	beq.n	8009b16 <TIM_Base_SetConfig+0xb2>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a23      	ldr	r2, [pc, #140]	; (8009ba0 <TIM_Base_SetConfig+0x13c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d108      	bne.n	8009b28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a0a      	ldr	r2, [pc, #40]	; (8009b78 <TIM_Base_SetConfig+0x114>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d003      	beq.n	8009b5c <TIM_Base_SetConfig+0xf8>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a0c      	ldr	r2, [pc, #48]	; (8009b88 <TIM_Base_SetConfig+0x124>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d103      	bne.n	8009b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	691a      	ldr	r2, [r3, #16]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	615a      	str	r2, [r3, #20]
}
 8009b6a:	bf00      	nop
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	40010000 	.word	0x40010000
 8009b7c:	40000400 	.word	0x40000400
 8009b80:	40000800 	.word	0x40000800
 8009b84:	40000c00 	.word	0x40000c00
 8009b88:	40010400 	.word	0x40010400
 8009b8c:	40014000 	.word	0x40014000
 8009b90:	40014400 	.word	0x40014400
 8009b94:	40014800 	.word	0x40014800
 8009b98:	40001800 	.word	0x40001800
 8009b9c:	40001c00 	.word	0x40001c00
 8009ba0:	40002000 	.word	0x40002000

08009ba4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	f003 031f 	and.w	r3, r3, #31
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6a1a      	ldr	r2, [r3, #32]
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	43db      	mvns	r3, r3
 8009bc6:	401a      	ands	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6a1a      	ldr	r2, [r3, #32]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	f003 031f 	and.w	r3, r3, #31
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	621a      	str	r2, [r3, #32]
}
 8009be2:	bf00      	nop
 8009be4:	371c      	adds	r7, #28
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
	...

08009bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d101      	bne.n	8009c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c04:	2302      	movs	r3, #2
 8009c06:	e05a      	b.n	8009cbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a21      	ldr	r2, [pc, #132]	; (8009ccc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d022      	beq.n	8009c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c54:	d01d      	beq.n	8009c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a1d      	ldr	r2, [pc, #116]	; (8009cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d018      	beq.n	8009c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a1b      	ldr	r2, [pc, #108]	; (8009cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d013      	beq.n	8009c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a1a      	ldr	r2, [pc, #104]	; (8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d00e      	beq.n	8009c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a18      	ldr	r2, [pc, #96]	; (8009cdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d009      	beq.n	8009c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a17      	ldr	r2, [pc, #92]	; (8009ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d004      	beq.n	8009c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a15      	ldr	r2, [pc, #84]	; (8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d10c      	bne.n	8009cac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	40010000 	.word	0x40010000
 8009cd0:	40000400 	.word	0x40000400
 8009cd4:	40000800 	.word	0x40000800
 8009cd8:	40000c00 	.word	0x40000c00
 8009cdc:	40010400 	.word	0x40010400
 8009ce0:	40014000 	.word	0x40014000
 8009ce4:	40001800 	.word	0x40001800

08009ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e03f      	b.n	8009da2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d106      	bne.n	8009d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7f9 fd4c 	bl	80037d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2224      	movs	r2, #36	; 0x24
 8009d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68da      	ldr	r2, [r3, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fddb 	bl	800a910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	691a      	ldr	r2, [r3, #16]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	695a      	ldr	r2, [r3, #20]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68da      	ldr	r2, [r3, #12]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2220      	movs	r2, #32
 8009d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b08a      	sub	sp, #40	; 0x28
 8009dae:	af02      	add	r7, sp, #8
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	60b9      	str	r1, [r7, #8]
 8009db4:	603b      	str	r3, [r7, #0]
 8009db6:	4613      	mov	r3, r2
 8009db8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b20      	cmp	r3, #32
 8009dc8:	d17c      	bne.n	8009ec4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <HAL_UART_Transmit+0x2c>
 8009dd0:	88fb      	ldrh	r3, [r7, #6]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e075      	b.n	8009ec6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d101      	bne.n	8009de8 <HAL_UART_Transmit+0x3e>
 8009de4:	2302      	movs	r3, #2
 8009de6:	e06e      	b.n	8009ec6 <HAL_UART_Transmit+0x11c>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2221      	movs	r2, #33	; 0x21
 8009dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009dfe:	f7fa faa5 	bl	800434c <HAL_GetTick>
 8009e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	88fa      	ldrh	r2, [r7, #6]
 8009e08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	88fa      	ldrh	r2, [r7, #6]
 8009e0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e18:	d108      	bne.n	8009e2c <HAL_UART_Transmit+0x82>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d104      	bne.n	8009e2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	61bb      	str	r3, [r7, #24]
 8009e2a:	e003      	b.n	8009e34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e30:	2300      	movs	r3, #0
 8009e32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009e3c:	e02a      	b.n	8009e94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2200      	movs	r2, #0
 8009e46:	2180      	movs	r1, #128	; 0x80
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 fb1f 	bl	800a48c <UART_WaitOnFlagUntilTimeout>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009e54:	2303      	movs	r3, #3
 8009e56:	e036      	b.n	8009ec6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10b      	bne.n	8009e76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	461a      	mov	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	3302      	adds	r3, #2
 8009e72:	61bb      	str	r3, [r7, #24]
 8009e74:	e007      	b.n	8009e86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	781a      	ldrb	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	3301      	adds	r3, #1
 8009e84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1cf      	bne.n	8009e3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2140      	movs	r1, #64	; 0x40
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f000 faef 	bl	800a48c <UART_WaitOnFlagUntilTimeout>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e006      	b.n	8009ec6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2220      	movs	r2, #32
 8009ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	e000      	b.n	8009ec6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009ec4:	2302      	movs	r3, #2
  }
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3720      	adds	r7, #32
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	60b9      	str	r1, [r7, #8]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	2b20      	cmp	r3, #32
 8009ee6:	d11d      	bne.n	8009f24 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <HAL_UART_Receive_IT+0x26>
 8009eee:	88fb      	ldrh	r3, [r7, #6]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e016      	b.n	8009f26 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d101      	bne.n	8009f06 <HAL_UART_Receive_IT+0x38>
 8009f02:	2302      	movs	r3, #2
 8009f04:	e00f      	b.n	8009f26 <HAL_UART_Receive_IT+0x58>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009f14:	88fb      	ldrh	r3, [r7, #6]
 8009f16:	461a      	mov	r2, r3
 8009f18:	68b9      	ldr	r1, [r7, #8]
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f000 fb24 	bl	800a568 <UART_Start_Receive_IT>
 8009f20:	4603      	mov	r3, r0
 8009f22:	e000      	b.n	8009f26 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009f24:	2302      	movs	r3, #2
  }
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b0ba      	sub	sp, #232	; 0xe8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	695b      	ldr	r3, [r3, #20]
 8009f52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009f56:	2300      	movs	r3, #0
 8009f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f66:	f003 030f 	and.w	r3, r3, #15
 8009f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10f      	bne.n	8009f96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f7a:	f003 0320 	and.w	r3, r3, #32
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d009      	beq.n	8009f96 <HAL_UART_IRQHandler+0x66>
 8009f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f86:	f003 0320 	and.w	r3, r3, #32
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fc03 	bl	800a79a <UART_Receive_IT>
      return;
 8009f94:	e256      	b.n	800a444 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 80de 	beq.w	800a15c <HAL_UART_IRQHandler+0x22c>
 8009fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d106      	bne.n	8009fba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f000 80d1 	beq.w	800a15c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00b      	beq.n	8009fde <HAL_UART_IRQHandler+0xae>
 8009fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d005      	beq.n	8009fde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd6:	f043 0201 	orr.w	r2, r3, #1
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fe2:	f003 0304 	and.w	r3, r3, #4
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00b      	beq.n	800a002 <HAL_UART_IRQHandler+0xd2>
 8009fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d005      	beq.n	800a002 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffa:	f043 0202 	orr.w	r2, r3, #2
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00b      	beq.n	800a026 <HAL_UART_IRQHandler+0xf6>
 800a00e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b00      	cmp	r3, #0
 800a018:	d005      	beq.n	800a026 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01e:	f043 0204 	orr.w	r2, r3, #4
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a02a:	f003 0308 	and.w	r3, r3, #8
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d011      	beq.n	800a056 <HAL_UART_IRQHandler+0x126>
 800a032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d105      	bne.n	800a04a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a03e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d005      	beq.n	800a056 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04e:	f043 0208 	orr.w	r2, r3, #8
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 81ed 	beq.w	800a43a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a064:	f003 0320 	and.w	r3, r3, #32
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d008      	beq.n	800a07e <HAL_UART_IRQHandler+0x14e>
 800a06c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a070:	f003 0320 	and.w	r3, r3, #32
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fb8e 	bl	800a79a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a088:	2b40      	cmp	r3, #64	; 0x40
 800a08a:	bf0c      	ite	eq
 800a08c:	2301      	moveq	r3, #1
 800a08e:	2300      	movne	r3, #0
 800a090:	b2db      	uxtb	r3, r3
 800a092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09a:	f003 0308 	and.w	r3, r3, #8
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d103      	bne.n	800a0aa <HAL_UART_IRQHandler+0x17a>
 800a0a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d04f      	beq.n	800a14a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fa96 	bl	800a5dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ba:	2b40      	cmp	r3, #64	; 0x40
 800a0bc:	d141      	bne.n	800a142 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3314      	adds	r3, #20
 800a0c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0cc:	e853 3f00 	ldrex	r3, [r3]
 800a0d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a0d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	3314      	adds	r3, #20
 800a0e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a0ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a0ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a0f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a0fa:	e841 2300 	strex	r3, r2, [r1]
 800a0fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1d9      	bne.n	800a0be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d013      	beq.n	800a13a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a116:	4a7d      	ldr	r2, [pc, #500]	; (800a30c <HAL_UART_IRQHandler+0x3dc>)
 800a118:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fa fa96 	bl	8004650 <HAL_DMA_Abort_IT>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d016      	beq.n	800a158 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a134:	4610      	mov	r0, r2
 800a136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a138:	e00e      	b.n	800a158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f990 	bl	800a460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a140:	e00a      	b.n	800a158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f98c 	bl	800a460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a148:	e006      	b.n	800a158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f988 	bl	800a460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a156:	e170      	b.n	800a43a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a158:	bf00      	nop
    return;
 800a15a:	e16e      	b.n	800a43a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a160:	2b01      	cmp	r3, #1
 800a162:	f040 814a 	bne.w	800a3fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a16a:	f003 0310 	and.w	r3, r3, #16
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f000 8143 	beq.w	800a3fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a178:	f003 0310 	and.w	r3, r3, #16
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 813c 	beq.w	800a3fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a182:	2300      	movs	r3, #0
 800a184:	60bb      	str	r3, [r7, #8]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	60bb      	str	r3, [r7, #8]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	60bb      	str	r3, [r7, #8]
 800a196:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a2:	2b40      	cmp	r3, #64	; 0x40
 800a1a4:	f040 80b4 	bne.w	800a310 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a1b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 8140 	beq.w	800a43e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	f080 8139 	bcs.w	800a43e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d8:	69db      	ldr	r3, [r3, #28]
 800a1da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1de:	f000 8088 	beq.w	800a2f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	330c      	adds	r3, #12
 800a1e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a1f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	330c      	adds	r3, #12
 800a20a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a20e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a216:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a21a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a21e:	e841 2300 	strex	r3, r2, [r1]
 800a222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1d9      	bne.n	800a1e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3314      	adds	r3, #20
 800a234:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a238:	e853 3f00 	ldrex	r3, [r3]
 800a23c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a23e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a240:	f023 0301 	bic.w	r3, r3, #1
 800a244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3314      	adds	r3, #20
 800a24e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a252:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a256:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a258:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a25a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a25e:	e841 2300 	strex	r3, r2, [r1]
 800a262:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1e1      	bne.n	800a22e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	3314      	adds	r3, #20
 800a270:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a274:	e853 3f00 	ldrex	r3, [r3]
 800a278:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a27a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a27c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	3314      	adds	r3, #20
 800a28a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a28e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a290:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a292:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a294:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a296:	e841 2300 	strex	r3, r2, [r1]
 800a29a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a29c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1e3      	bne.n	800a26a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2220      	movs	r2, #32
 800a2a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	330c      	adds	r3, #12
 800a2b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ba:	e853 3f00 	ldrex	r3, [r3]
 800a2be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2c2:	f023 0310 	bic.w	r3, r3, #16
 800a2c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	330c      	adds	r3, #12
 800a2d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a2d4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a2d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a2da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2dc:	e841 2300 	strex	r3, r2, [r1]
 800a2e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1e3      	bne.n	800a2b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fa f93f 	bl	8004570 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	4619      	mov	r1, r3
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f8b6 	bl	800a474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a308:	e099      	b.n	800a43e <HAL_UART_IRQHandler+0x50e>
 800a30a:	bf00      	nop
 800a30c:	0800a6a3 	.word	0x0800a6a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a318:	b29b      	uxth	r3, r3
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a324:	b29b      	uxth	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 808b 	beq.w	800a442 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a32c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a330:	2b00      	cmp	r3, #0
 800a332:	f000 8086 	beq.w	800a442 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	330c      	adds	r3, #12
 800a33c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a340:	e853 3f00 	ldrex	r3, [r3]
 800a344:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a34c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	330c      	adds	r3, #12
 800a356:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a35a:	647a      	str	r2, [r7, #68]	; 0x44
 800a35c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a362:	e841 2300 	strex	r3, r2, [r1]
 800a366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e3      	bne.n	800a336 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3314      	adds	r3, #20
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	623b      	str	r3, [r7, #32]
   return(result);
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	f023 0301 	bic.w	r3, r3, #1
 800a384:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3314      	adds	r3, #20
 800a38e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a392:	633a      	str	r2, [r7, #48]	; 0x30
 800a394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a39a:	e841 2300 	strex	r3, r2, [r1]
 800a39e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1e3      	bne.n	800a36e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	330c      	adds	r3, #12
 800a3ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	e853 3f00 	ldrex	r3, [r3]
 800a3c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f023 0310 	bic.w	r3, r3, #16
 800a3ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	330c      	adds	r3, #12
 800a3d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a3d8:	61fa      	str	r2, [r7, #28]
 800a3da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3dc:	69b9      	ldr	r1, [r7, #24]
 800a3de:	69fa      	ldr	r2, [r7, #28]
 800a3e0:	e841 2300 	strex	r3, r2, [r1]
 800a3e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1e3      	bne.n	800a3b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f83e 	bl	800a474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a3f8:	e023      	b.n	800a442 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a3fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a402:	2b00      	cmp	r3, #0
 800a404:	d009      	beq.n	800a41a <HAL_UART_IRQHandler+0x4ea>
 800a406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a40a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f959 	bl	800a6ca <UART_Transmit_IT>
    return;
 800a418:	e014      	b.n	800a444 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a41a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a41e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00e      	beq.n	800a444 <HAL_UART_IRQHandler+0x514>
 800a426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d008      	beq.n	800a444 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f999 	bl	800a76a <UART_EndTransmit_IT>
    return;
 800a438:	e004      	b.n	800a444 <HAL_UART_IRQHandler+0x514>
    return;
 800a43a:	bf00      	nop
 800a43c:	e002      	b.n	800a444 <HAL_UART_IRQHandler+0x514>
      return;
 800a43e:	bf00      	nop
 800a440:	e000      	b.n	800a444 <HAL_UART_IRQHandler+0x514>
      return;
 800a442:	bf00      	nop
  }
}
 800a444:	37e8      	adds	r7, #232	; 0xe8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop

0800a44c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b090      	sub	sp, #64	; 0x40
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	603b      	str	r3, [r7, #0]
 800a498:	4613      	mov	r3, r2
 800a49a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a49c:	e050      	b.n	800a540 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a49e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4a4:	d04c      	beq.n	800a540 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d007      	beq.n	800a4bc <UART_WaitOnFlagUntilTimeout+0x30>
 800a4ac:	f7f9 ff4e 	bl	800434c <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d241      	bcs.n	800a540 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	330c      	adds	r3, #12
 800a4c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	330c      	adds	r3, #12
 800a4da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4dc:	637a      	str	r2, [r7, #52]	; 0x34
 800a4de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e5      	bne.n	800a4bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3314      	adds	r3, #20
 800a4f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	e853 3f00 	ldrex	r3, [r3]
 800a4fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	f023 0301 	bic.w	r3, r3, #1
 800a506:	63bb      	str	r3, [r7, #56]	; 0x38
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3314      	adds	r3, #20
 800a50e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a510:	623a      	str	r2, [r7, #32]
 800a512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a514:	69f9      	ldr	r1, [r7, #28]
 800a516:	6a3a      	ldr	r2, [r7, #32]
 800a518:	e841 2300 	strex	r3, r2, [r1]
 800a51c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e5      	bne.n	800a4f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2220      	movs	r2, #32
 800a528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2220      	movs	r2, #32
 800a530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e00f      	b.n	800a560 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	4013      	ands	r3, r2
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	bf0c      	ite	eq
 800a550:	2301      	moveq	r3, #1
 800a552:	2300      	movne	r3, #0
 800a554:	b2db      	uxtb	r3, r3
 800a556:	461a      	mov	r2, r3
 800a558:	79fb      	ldrb	r3, [r7, #7]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d09f      	beq.n	800a49e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3740      	adds	r7, #64	; 0x40
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	4613      	mov	r3, r2
 800a574:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	88fa      	ldrh	r2, [r7, #6]
 800a580:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	88fa      	ldrh	r2, [r7, #6]
 800a586:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2222      	movs	r2, #34	; 0x22
 800a592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68da      	ldr	r2, [r3, #12]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5ac:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	695a      	ldr	r2, [r3, #20]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f042 0201 	orr.w	r2, r2, #1
 800a5bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68da      	ldr	r2, [r3, #12]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f042 0220 	orr.w	r2, r2, #32
 800a5cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b095      	sub	sp, #84	; 0x54
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	330c      	adds	r3, #12
 800a5ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ee:	e853 3f00 	ldrex	r3, [r3]
 800a5f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	330c      	adds	r3, #12
 800a602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a604:	643a      	str	r2, [r7, #64]	; 0x40
 800a606:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a608:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a60a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a60c:	e841 2300 	strex	r3, r2, [r1]
 800a610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1e5      	bne.n	800a5e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3314      	adds	r3, #20
 800a61e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	e853 3f00 	ldrex	r3, [r3]
 800a626:	61fb      	str	r3, [r7, #28]
   return(result);
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	f023 0301 	bic.w	r3, r3, #1
 800a62e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3314      	adds	r3, #20
 800a636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a63a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a63e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a640:	e841 2300 	strex	r3, r2, [r1]
 800a644:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1e5      	bne.n	800a618 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a650:	2b01      	cmp	r3, #1
 800a652:	d119      	bne.n	800a688 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	330c      	adds	r3, #12
 800a65a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	e853 3f00 	ldrex	r3, [r3]
 800a662:	60bb      	str	r3, [r7, #8]
   return(result);
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f023 0310 	bic.w	r3, r3, #16
 800a66a:	647b      	str	r3, [r7, #68]	; 0x44
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	330c      	adds	r3, #12
 800a672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a674:	61ba      	str	r2, [r7, #24]
 800a676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a678:	6979      	ldr	r1, [r7, #20]
 800a67a:	69ba      	ldr	r2, [r7, #24]
 800a67c:	e841 2300 	strex	r3, r2, [r1]
 800a680:	613b      	str	r3, [r7, #16]
   return(result);
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1e5      	bne.n	800a654 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2220      	movs	r2, #32
 800a68c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a696:	bf00      	nop
 800a698:	3754      	adds	r7, #84	; 0x54
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b084      	sub	sp, #16
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7ff fecf 	bl	800a460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6c2:	bf00      	nop
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b085      	sub	sp, #20
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b21      	cmp	r3, #33	; 0x21
 800a6dc:	d13e      	bne.n	800a75c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6e6:	d114      	bne.n	800a712 <UART_Transmit_IT+0x48>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d110      	bne.n	800a712 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a1b      	ldr	r3, [r3, #32]
 800a6f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a704:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	1c9a      	adds	r2, r3, #2
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	621a      	str	r2, [r3, #32]
 800a710:	e008      	b.n	800a724 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a1b      	ldr	r3, [r3, #32]
 800a716:	1c59      	adds	r1, r3, #1
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	6211      	str	r1, [r2, #32]
 800a71c:	781a      	ldrb	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a728:	b29b      	uxth	r3, r3
 800a72a:	3b01      	subs	r3, #1
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	4619      	mov	r1, r3
 800a732:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10f      	bne.n	800a758 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68da      	ldr	r2, [r3, #12]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a746:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68da      	ldr	r2, [r3, #12]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a756:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	e000      	b.n	800a75e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a75c:	2302      	movs	r3, #2
  }
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68da      	ldr	r2, [r3, #12]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a780:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2220      	movs	r2, #32
 800a786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7ff fe5e 	bl	800a44c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b08c      	sub	sp, #48	; 0x30
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b22      	cmp	r3, #34	; 0x22
 800a7ac:	f040 80ab 	bne.w	800a906 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7b8:	d117      	bne.n	800a7ea <UART_Receive_IT+0x50>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d113      	bne.n	800a7ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e2:	1c9a      	adds	r2, r3, #2
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	629a      	str	r2, [r3, #40]	; 0x28
 800a7e8:	e026      	b.n	800a838 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7fc:	d007      	beq.n	800a80e <UART_Receive_IT+0x74>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10a      	bne.n	800a81c <UART_Receive_IT+0x82>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d106      	bne.n	800a81c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	b2da      	uxtb	r2, r3
 800a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a818:	701a      	strb	r2, [r3, #0]
 800a81a:	e008      	b.n	800a82e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	b2db      	uxtb	r3, r3
 800a824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a832:	1c5a      	adds	r2, r3, #1
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	3b01      	subs	r3, #1
 800a840:	b29b      	uxth	r3, r3
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	4619      	mov	r1, r3
 800a846:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d15a      	bne.n	800a902 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68da      	ldr	r2, [r3, #12]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f022 0220 	bic.w	r2, r2, #32
 800a85a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68da      	ldr	r2, [r3, #12]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a86a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	695a      	ldr	r2, [r3, #20]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f022 0201 	bic.w	r2, r2, #1
 800a87a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2220      	movs	r2, #32
 800a880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d135      	bne.n	800a8f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	330c      	adds	r3, #12
 800a898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	e853 3f00 	ldrex	r3, [r3]
 800a8a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f023 0310 	bic.w	r3, r3, #16
 800a8a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	330c      	adds	r3, #12
 800a8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b2:	623a      	str	r2, [r7, #32]
 800a8b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b6:	69f9      	ldr	r1, [r7, #28]
 800a8b8:	6a3a      	ldr	r2, [r7, #32]
 800a8ba:	e841 2300 	strex	r3, r2, [r1]
 800a8be:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1e5      	bne.n	800a892 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 0310 	and.w	r3, r3, #16
 800a8d0:	2b10      	cmp	r3, #16
 800a8d2:	d10a      	bne.n	800a8ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	60fb      	str	r3, [r7, #12]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7ff fdbf 	bl	800a474 <HAL_UARTEx_RxEventCallback>
 800a8f6:	e002      	b.n	800a8fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7f6 fd71 	bl	80013e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	e002      	b.n	800a908 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	e000      	b.n	800a908 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a906:	2302      	movs	r3, #2
  }
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3730      	adds	r7, #48	; 0x30
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	b09f      	sub	sp, #124	; 0x7c
 800a916:	af00      	add	r7, sp, #0
 800a918:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a91a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a926:	68d9      	ldr	r1, [r3, #12]
 800a928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	ea40 0301 	orr.w	r3, r0, r1
 800a930:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a934:	689a      	ldr	r2, [r3, #8]
 800a936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	431a      	orrs	r2, r3
 800a93c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	431a      	orrs	r2, r3
 800a942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a944:	69db      	ldr	r3, [r3, #28]
 800a946:	4313      	orrs	r3, r2
 800a948:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a94a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a954:	f021 010c 	bic.w	r1, r1, #12
 800a958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a95e:	430b      	orrs	r3, r1
 800a960:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	695b      	ldr	r3, [r3, #20]
 800a968:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a96c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a96e:	6999      	ldr	r1, [r3, #24]
 800a970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	ea40 0301 	orr.w	r3, r0, r1
 800a978:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a97a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	4bc5      	ldr	r3, [pc, #788]	; (800ac94 <UART_SetConfig+0x384>)
 800a980:	429a      	cmp	r2, r3
 800a982:	d004      	beq.n	800a98e <UART_SetConfig+0x7e>
 800a984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	4bc3      	ldr	r3, [pc, #780]	; (800ac98 <UART_SetConfig+0x388>)
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d103      	bne.n	800a996 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a98e:	f7fe f823 	bl	80089d8 <HAL_RCC_GetPCLK2Freq>
 800a992:	6778      	str	r0, [r7, #116]	; 0x74
 800a994:	e002      	b.n	800a99c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a996:	f7fe f80b 	bl	80089b0 <HAL_RCC_GetPCLK1Freq>
 800a99a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a99e:	69db      	ldr	r3, [r3, #28]
 800a9a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9a4:	f040 80b6 	bne.w	800ab14 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a9a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9aa:	461c      	mov	r4, r3
 800a9ac:	f04f 0500 	mov.w	r5, #0
 800a9b0:	4622      	mov	r2, r4
 800a9b2:	462b      	mov	r3, r5
 800a9b4:	1891      	adds	r1, r2, r2
 800a9b6:	6439      	str	r1, [r7, #64]	; 0x40
 800a9b8:	415b      	adcs	r3, r3
 800a9ba:	647b      	str	r3, [r7, #68]	; 0x44
 800a9bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a9c0:	1912      	adds	r2, r2, r4
 800a9c2:	eb45 0303 	adc.w	r3, r5, r3
 800a9c6:	f04f 0000 	mov.w	r0, #0
 800a9ca:	f04f 0100 	mov.w	r1, #0
 800a9ce:	00d9      	lsls	r1, r3, #3
 800a9d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a9d4:	00d0      	lsls	r0, r2, #3
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	1911      	adds	r1, r2, r4
 800a9dc:	6639      	str	r1, [r7, #96]	; 0x60
 800a9de:	416b      	adcs	r3, r5
 800a9e0:	667b      	str	r3, [r7, #100]	; 0x64
 800a9e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f04f 0300 	mov.w	r3, #0
 800a9ec:	1891      	adds	r1, r2, r2
 800a9ee:	63b9      	str	r1, [r7, #56]	; 0x38
 800a9f0:	415b      	adcs	r3, r3
 800a9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a9f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a9fc:	f7f5 fc50 	bl	80002a0 <__aeabi_uldivmod>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	4ba5      	ldr	r3, [pc, #660]	; (800ac9c <UART_SetConfig+0x38c>)
 800aa06:	fba3 2302 	umull	r2, r3, r3, r2
 800aa0a:	095b      	lsrs	r3, r3, #5
 800aa0c:	011e      	lsls	r6, r3, #4
 800aa0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa10:	461c      	mov	r4, r3
 800aa12:	f04f 0500 	mov.w	r5, #0
 800aa16:	4622      	mov	r2, r4
 800aa18:	462b      	mov	r3, r5
 800aa1a:	1891      	adds	r1, r2, r2
 800aa1c:	6339      	str	r1, [r7, #48]	; 0x30
 800aa1e:	415b      	adcs	r3, r3
 800aa20:	637b      	str	r3, [r7, #52]	; 0x34
 800aa22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800aa26:	1912      	adds	r2, r2, r4
 800aa28:	eb45 0303 	adc.w	r3, r5, r3
 800aa2c:	f04f 0000 	mov.w	r0, #0
 800aa30:	f04f 0100 	mov.w	r1, #0
 800aa34:	00d9      	lsls	r1, r3, #3
 800aa36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aa3a:	00d0      	lsls	r0, r2, #3
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	1911      	adds	r1, r2, r4
 800aa42:	65b9      	str	r1, [r7, #88]	; 0x58
 800aa44:	416b      	adcs	r3, r5
 800aa46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	f04f 0300 	mov.w	r3, #0
 800aa52:	1891      	adds	r1, r2, r2
 800aa54:	62b9      	str	r1, [r7, #40]	; 0x28
 800aa56:	415b      	adcs	r3, r3
 800aa58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800aa62:	f7f5 fc1d 	bl	80002a0 <__aeabi_uldivmod>
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	4b8c      	ldr	r3, [pc, #560]	; (800ac9c <UART_SetConfig+0x38c>)
 800aa6c:	fba3 1302 	umull	r1, r3, r3, r2
 800aa70:	095b      	lsrs	r3, r3, #5
 800aa72:	2164      	movs	r1, #100	; 0x64
 800aa74:	fb01 f303 	mul.w	r3, r1, r3
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	3332      	adds	r3, #50	; 0x32
 800aa7e:	4a87      	ldr	r2, [pc, #540]	; (800ac9c <UART_SetConfig+0x38c>)
 800aa80:	fba2 2303 	umull	r2, r3, r2, r3
 800aa84:	095b      	lsrs	r3, r3, #5
 800aa86:	005b      	lsls	r3, r3, #1
 800aa88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aa8c:	441e      	add	r6, r3
 800aa8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa90:	4618      	mov	r0, r3
 800aa92:	f04f 0100 	mov.w	r1, #0
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	1894      	adds	r4, r2, r2
 800aa9c:	623c      	str	r4, [r7, #32]
 800aa9e:	415b      	adcs	r3, r3
 800aaa0:	627b      	str	r3, [r7, #36]	; 0x24
 800aaa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aaa6:	1812      	adds	r2, r2, r0
 800aaa8:	eb41 0303 	adc.w	r3, r1, r3
 800aaac:	f04f 0400 	mov.w	r4, #0
 800aab0:	f04f 0500 	mov.w	r5, #0
 800aab4:	00dd      	lsls	r5, r3, #3
 800aab6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aaba:	00d4      	lsls	r4, r2, #3
 800aabc:	4622      	mov	r2, r4
 800aabe:	462b      	mov	r3, r5
 800aac0:	1814      	adds	r4, r2, r0
 800aac2:	653c      	str	r4, [r7, #80]	; 0x50
 800aac4:	414b      	adcs	r3, r1
 800aac6:	657b      	str	r3, [r7, #84]	; 0x54
 800aac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	461a      	mov	r2, r3
 800aace:	f04f 0300 	mov.w	r3, #0
 800aad2:	1891      	adds	r1, r2, r2
 800aad4:	61b9      	str	r1, [r7, #24]
 800aad6:	415b      	adcs	r3, r3
 800aad8:	61fb      	str	r3, [r7, #28]
 800aada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aade:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800aae2:	f7f5 fbdd 	bl	80002a0 <__aeabi_uldivmod>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	4b6c      	ldr	r3, [pc, #432]	; (800ac9c <UART_SetConfig+0x38c>)
 800aaec:	fba3 1302 	umull	r1, r3, r3, r2
 800aaf0:	095b      	lsrs	r3, r3, #5
 800aaf2:	2164      	movs	r1, #100	; 0x64
 800aaf4:	fb01 f303 	mul.w	r3, r1, r3
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	00db      	lsls	r3, r3, #3
 800aafc:	3332      	adds	r3, #50	; 0x32
 800aafe:	4a67      	ldr	r2, [pc, #412]	; (800ac9c <UART_SetConfig+0x38c>)
 800ab00:	fba2 2303 	umull	r2, r3, r2, r3
 800ab04:	095b      	lsrs	r3, r3, #5
 800ab06:	f003 0207 	and.w	r2, r3, #7
 800ab0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4432      	add	r2, r6
 800ab10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab12:	e0b9      	b.n	800ac88 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab16:	461c      	mov	r4, r3
 800ab18:	f04f 0500 	mov.w	r5, #0
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	462b      	mov	r3, r5
 800ab20:	1891      	adds	r1, r2, r2
 800ab22:	6139      	str	r1, [r7, #16]
 800ab24:	415b      	adcs	r3, r3
 800ab26:	617b      	str	r3, [r7, #20]
 800ab28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ab2c:	1912      	adds	r2, r2, r4
 800ab2e:	eb45 0303 	adc.w	r3, r5, r3
 800ab32:	f04f 0000 	mov.w	r0, #0
 800ab36:	f04f 0100 	mov.w	r1, #0
 800ab3a:	00d9      	lsls	r1, r3, #3
 800ab3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab40:	00d0      	lsls	r0, r2, #3
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	eb12 0804 	adds.w	r8, r2, r4
 800ab4a:	eb43 0905 	adc.w	r9, r3, r5
 800ab4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f04f 0100 	mov.w	r1, #0
 800ab58:	f04f 0200 	mov.w	r2, #0
 800ab5c:	f04f 0300 	mov.w	r3, #0
 800ab60:	008b      	lsls	r3, r1, #2
 800ab62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ab66:	0082      	lsls	r2, r0, #2
 800ab68:	4640      	mov	r0, r8
 800ab6a:	4649      	mov	r1, r9
 800ab6c:	f7f5 fb98 	bl	80002a0 <__aeabi_uldivmod>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4b49      	ldr	r3, [pc, #292]	; (800ac9c <UART_SetConfig+0x38c>)
 800ab76:	fba3 2302 	umull	r2, r3, r3, r2
 800ab7a:	095b      	lsrs	r3, r3, #5
 800ab7c:	011e      	lsls	r6, r3, #4
 800ab7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab80:	4618      	mov	r0, r3
 800ab82:	f04f 0100 	mov.w	r1, #0
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	1894      	adds	r4, r2, r2
 800ab8c:	60bc      	str	r4, [r7, #8]
 800ab8e:	415b      	adcs	r3, r3
 800ab90:	60fb      	str	r3, [r7, #12]
 800ab92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab96:	1812      	adds	r2, r2, r0
 800ab98:	eb41 0303 	adc.w	r3, r1, r3
 800ab9c:	f04f 0400 	mov.w	r4, #0
 800aba0:	f04f 0500 	mov.w	r5, #0
 800aba4:	00dd      	lsls	r5, r3, #3
 800aba6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800abaa:	00d4      	lsls	r4, r2, #3
 800abac:	4622      	mov	r2, r4
 800abae:	462b      	mov	r3, r5
 800abb0:	1814      	adds	r4, r2, r0
 800abb2:	64bc      	str	r4, [r7, #72]	; 0x48
 800abb4:	414b      	adcs	r3, r1
 800abb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f04f 0100 	mov.w	r1, #0
 800abc2:	f04f 0200 	mov.w	r2, #0
 800abc6:	f04f 0300 	mov.w	r3, #0
 800abca:	008b      	lsls	r3, r1, #2
 800abcc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800abd0:	0082      	lsls	r2, r0, #2
 800abd2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800abd6:	f7f5 fb63 	bl	80002a0 <__aeabi_uldivmod>
 800abda:	4602      	mov	r2, r0
 800abdc:	460b      	mov	r3, r1
 800abde:	4b2f      	ldr	r3, [pc, #188]	; (800ac9c <UART_SetConfig+0x38c>)
 800abe0:	fba3 1302 	umull	r1, r3, r3, r2
 800abe4:	095b      	lsrs	r3, r3, #5
 800abe6:	2164      	movs	r1, #100	; 0x64
 800abe8:	fb01 f303 	mul.w	r3, r1, r3
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	011b      	lsls	r3, r3, #4
 800abf0:	3332      	adds	r3, #50	; 0x32
 800abf2:	4a2a      	ldr	r2, [pc, #168]	; (800ac9c <UART_SetConfig+0x38c>)
 800abf4:	fba2 2303 	umull	r2, r3, r2, r3
 800abf8:	095b      	lsrs	r3, r3, #5
 800abfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abfe:	441e      	add	r6, r3
 800ac00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac02:	4618      	mov	r0, r3
 800ac04:	f04f 0100 	mov.w	r1, #0
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	1894      	adds	r4, r2, r2
 800ac0e:	603c      	str	r4, [r7, #0]
 800ac10:	415b      	adcs	r3, r3
 800ac12:	607b      	str	r3, [r7, #4]
 800ac14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac18:	1812      	adds	r2, r2, r0
 800ac1a:	eb41 0303 	adc.w	r3, r1, r3
 800ac1e:	f04f 0400 	mov.w	r4, #0
 800ac22:	f04f 0500 	mov.w	r5, #0
 800ac26:	00dd      	lsls	r5, r3, #3
 800ac28:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ac2c:	00d4      	lsls	r4, r2, #3
 800ac2e:	4622      	mov	r2, r4
 800ac30:	462b      	mov	r3, r5
 800ac32:	eb12 0a00 	adds.w	sl, r2, r0
 800ac36:	eb43 0b01 	adc.w	fp, r3, r1
 800ac3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f04f 0100 	mov.w	r1, #0
 800ac44:	f04f 0200 	mov.w	r2, #0
 800ac48:	f04f 0300 	mov.w	r3, #0
 800ac4c:	008b      	lsls	r3, r1, #2
 800ac4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ac52:	0082      	lsls	r2, r0, #2
 800ac54:	4650      	mov	r0, sl
 800ac56:	4659      	mov	r1, fp
 800ac58:	f7f5 fb22 	bl	80002a0 <__aeabi_uldivmod>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4b0e      	ldr	r3, [pc, #56]	; (800ac9c <UART_SetConfig+0x38c>)
 800ac62:	fba3 1302 	umull	r1, r3, r3, r2
 800ac66:	095b      	lsrs	r3, r3, #5
 800ac68:	2164      	movs	r1, #100	; 0x64
 800ac6a:	fb01 f303 	mul.w	r3, r1, r3
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	011b      	lsls	r3, r3, #4
 800ac72:	3332      	adds	r3, #50	; 0x32
 800ac74:	4a09      	ldr	r2, [pc, #36]	; (800ac9c <UART_SetConfig+0x38c>)
 800ac76:	fba2 2303 	umull	r2, r3, r2, r3
 800ac7a:	095b      	lsrs	r3, r3, #5
 800ac7c:	f003 020f 	and.w	r2, r3, #15
 800ac80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4432      	add	r2, r6
 800ac86:	609a      	str	r2, [r3, #8]
}
 800ac88:	bf00      	nop
 800ac8a:	377c      	adds	r7, #124	; 0x7c
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac92:	bf00      	nop
 800ac94:	40011000 	.word	0x40011000
 800ac98:	40011400 	.word	0x40011400
 800ac9c:	51eb851f 	.word	0x51eb851f

0800aca0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aca0:	b084      	sub	sp, #16
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	f107 001c 	add.w	r0, r7, #28
 800acae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d122      	bne.n	800acfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800accc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ace0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d105      	bne.n	800acf2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f9a0 	bl	800b038 <USB_CoreReset>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]
 800acfc:	e01a      	b.n	800ad34 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f994 	bl	800b038 <USB_CoreReset>
 800ad10:	4603      	mov	r3, r0
 800ad12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ad14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d106      	bne.n	800ad28 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	639a      	str	r2, [r3, #56]	; 0x38
 800ad26:	e005      	b.n	800ad34 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d10b      	bne.n	800ad52 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f043 0206 	orr.w	r2, r3, #6
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f043 0220 	orr.w	r2, r3, #32
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad5e:	b004      	add	sp, #16
 800ad60:	4770      	bx	lr

0800ad62 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b083      	sub	sp, #12
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f043 0201 	orr.w	r2, r3, #1
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	f023 0201 	bic.w	r2, r3, #1
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	460b      	mov	r3, r1
 800adb0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800adc2:	78fb      	ldrb	r3, [r7, #3]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d115      	bne.n	800adf4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800add4:	2001      	movs	r0, #1
 800add6:	f7f9 fac5 	bl	8004364 <HAL_Delay>
      ms++;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	3301      	adds	r3, #1
 800adde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f91a 	bl	800b01a <USB_GetMode>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d01e      	beq.n	800ae2a <USB_SetCurrentMode+0x84>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2b31      	cmp	r3, #49	; 0x31
 800adf0:	d9f0      	bls.n	800add4 <USB_SetCurrentMode+0x2e>
 800adf2:	e01a      	b.n	800ae2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800adf4:	78fb      	ldrb	r3, [r7, #3]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d115      	bne.n	800ae26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ae06:	2001      	movs	r0, #1
 800ae08:	f7f9 faac 	bl	8004364 <HAL_Delay>
      ms++;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f901 	bl	800b01a <USB_GetMode>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d005      	beq.n	800ae2a <USB_SetCurrentMode+0x84>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2b31      	cmp	r3, #49	; 0x31
 800ae22:	d9f0      	bls.n	800ae06 <USB_SetCurrentMode+0x60>
 800ae24:	e001      	b.n	800ae2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e005      	b.n	800ae36 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2b32      	cmp	r3, #50	; 0x32
 800ae2e:	d101      	bne.n	800ae34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e000      	b.n	800ae36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
	...

0800ae40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	019b      	lsls	r3, r3, #6
 800ae52:	f043 0220 	orr.w	r2, r3, #32
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	60fb      	str	r3, [r7, #12]
 800ae60:	4a08      	ldr	r2, [pc, #32]	; (800ae84 <USB_FlushTxFifo+0x44>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d901      	bls.n	800ae6a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800ae66:	2303      	movs	r3, #3
 800ae68:	e006      	b.n	800ae78 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	f003 0320 	and.w	r3, r3, #32
 800ae72:	2b20      	cmp	r3, #32
 800ae74:	d0f1      	beq.n	800ae5a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	00030d40 	.word	0x00030d40

0800ae88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae90:	2300      	movs	r3, #0
 800ae92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2210      	movs	r2, #16
 800ae98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	4a08      	ldr	r2, [pc, #32]	; (800aec4 <USB_FlushRxFifo+0x3c>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d901      	bls.n	800aeaa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800aea6:	2303      	movs	r3, #3
 800aea8:	e006      	b.n	800aeb8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	f003 0310 	and.w	r3, r3, #16
 800aeb2:	2b10      	cmp	r3, #16
 800aeb4:	d0f1      	beq.n	800ae9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	00030d40 	.word	0x00030d40

0800aec8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b089      	sub	sp, #36	; 0x24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	4611      	mov	r1, r2
 800aed4:	461a      	mov	r2, r3
 800aed6:	460b      	mov	r3, r1
 800aed8:	71fb      	strb	r3, [r7, #7]
 800aeda:	4613      	mov	r3, r2
 800aedc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aee6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d123      	bne.n	800af36 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aeee:	88bb      	ldrh	r3, [r7, #4]
 800aef0:	3303      	adds	r3, #3
 800aef2:	089b      	lsrs	r3, r3, #2
 800aef4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aef6:	2300      	movs	r3, #0
 800aef8:	61bb      	str	r3, [r7, #24]
 800aefa:	e018      	b.n	800af2e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aefc:	79fb      	ldrb	r3, [r7, #7]
 800aefe:	031a      	lsls	r2, r3, #12
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	4413      	add	r3, r2
 800af04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af08:	461a      	mov	r2, r3
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	3301      	adds	r3, #1
 800af14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	3301      	adds	r3, #1
 800af1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	3301      	adds	r3, #1
 800af20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	3301      	adds	r3, #1
 800af26:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	3301      	adds	r3, #1
 800af2c:	61bb      	str	r3, [r7, #24]
 800af2e:	69ba      	ldr	r2, [r7, #24]
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	429a      	cmp	r2, r3
 800af34:	d3e2      	bcc.n	800aefc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3724      	adds	r7, #36	; 0x24
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800af44:	b480      	push	{r7}
 800af46:	b08b      	sub	sp, #44	; 0x2c
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	4613      	mov	r3, r2
 800af50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800af5a:	88fb      	ldrh	r3, [r7, #6]
 800af5c:	089b      	lsrs	r3, r3, #2
 800af5e:	b29b      	uxth	r3, r3
 800af60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800af62:	88fb      	ldrh	r3, [r7, #6]
 800af64:	f003 0303 	and.w	r3, r3, #3
 800af68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800af6a:	2300      	movs	r3, #0
 800af6c:	623b      	str	r3, [r7, #32]
 800af6e:	e014      	b.n	800af9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	601a      	str	r2, [r3, #0]
    pDest++;
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	3301      	adds	r3, #1
 800af80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800af82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af84:	3301      	adds	r3, #1
 800af86:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	3301      	adds	r3, #1
 800af8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800af8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af90:	3301      	adds	r3, #1
 800af92:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	3301      	adds	r3, #1
 800af98:	623b      	str	r3, [r7, #32]
 800af9a:	6a3a      	ldr	r2, [r7, #32]
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d3e6      	bcc.n	800af70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800afa2:	8bfb      	ldrh	r3, [r7, #30]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d01e      	beq.n	800afe6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800afa8:	2300      	movs	r3, #0
 800afaa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afb2:	461a      	mov	r2, r3
 800afb4:	f107 0310 	add.w	r3, r7, #16
 800afb8:	6812      	ldr	r2, [r2, #0]
 800afba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	6a3b      	ldr	r3, [r7, #32]
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	00db      	lsls	r3, r3, #3
 800afc4:	fa22 f303 	lsr.w	r3, r2, r3
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	701a      	strb	r2, [r3, #0]
      i++;
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	3301      	adds	r3, #1
 800afd2:	623b      	str	r3, [r7, #32]
      pDest++;
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	3301      	adds	r3, #1
 800afd8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800afda:	8bfb      	ldrh	r3, [r7, #30]
 800afdc:	3b01      	subs	r3, #1
 800afde:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800afe0:	8bfb      	ldrh	r3, [r7, #30]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1ea      	bne.n	800afbc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afe8:	4618      	mov	r0, r3
 800afea:	372c      	adds	r7, #44	; 0x2c
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	699b      	ldr	r3, [r3, #24]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	4013      	ands	r3, r2
 800b00a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b00c:	68fb      	ldr	r3, [r7, #12]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b01a:	b480      	push	{r7}
 800b01c:	b083      	sub	sp, #12
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	695b      	ldr	r3, [r3, #20]
 800b026:	f003 0301 	and.w	r3, r3, #1
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	370c      	adds	r7, #12
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
	...

0800b038 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b040:	2300      	movs	r3, #0
 800b042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3301      	adds	r3, #1
 800b048:	60fb      	str	r3, [r7, #12]
 800b04a:	4a13      	ldr	r2, [pc, #76]	; (800b098 <USB_CoreReset+0x60>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d901      	bls.n	800b054 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e01a      	b.n	800b08a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	daf3      	bge.n	800b044 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b05c:	2300      	movs	r3, #0
 800b05e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	f043 0201 	orr.w	r2, r3, #1
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	3301      	adds	r3, #1
 800b070:	60fb      	str	r3, [r7, #12]
 800b072:	4a09      	ldr	r2, [pc, #36]	; (800b098 <USB_CoreReset+0x60>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d901      	bls.n	800b07c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b078:	2303      	movs	r3, #3
 800b07a:	e006      	b.n	800b08a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b01      	cmp	r3, #1
 800b086:	d0f1      	beq.n	800b06c <USB_CoreReset+0x34>

  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	00030d40 	.word	0x00030d40

0800b09c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b09c:	b084      	sub	sp, #16
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	f107 001c 	add.w	r0, r7, #28
 800b0aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d018      	beq.n	800b120 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d10a      	bne.n	800b10a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b102:	f043 0304 	orr.w	r3, r3, #4
 800b106:	6013      	str	r3, [r2, #0]
 800b108:	e014      	b.n	800b134 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b118:	f023 0304 	bic.w	r3, r3, #4
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	e009      	b.n	800b134 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b12e:	f023 0304 	bic.w	r3, r3, #4
 800b132:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b134:	2110      	movs	r1, #16
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7ff fe82 	bl	800ae40 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f7ff fea3 	bl	800ae88 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b142:	2300      	movs	r3, #0
 800b144:	60fb      	str	r3, [r7, #12]
 800b146:	e015      	b.n	800b174 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	015a      	lsls	r2, r3, #5
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	4413      	add	r3, r2
 800b150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b154:	461a      	mov	r2, r3
 800b156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b15a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	015a      	lsls	r2, r3, #5
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	4413      	add	r3, r2
 800b164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b168:	461a      	mov	r2, r3
 800b16a:	2300      	movs	r3, #0
 800b16c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3301      	adds	r3, #1
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	6a3b      	ldr	r3, [r7, #32]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d3e5      	bcc.n	800b148 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b188:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00b      	beq.n	800b1ae <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b19c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a13      	ldr	r2, [pc, #76]	; (800b1f0 <USB_HostInit+0x154>)
 800b1a2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a13      	ldr	r2, [pc, #76]	; (800b1f4 <USB_HostInit+0x158>)
 800b1a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b1ac:	e009      	b.n	800b1c2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2280      	movs	r2, #128	; 0x80
 800b1b2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a10      	ldr	r2, [pc, #64]	; (800b1f8 <USB_HostInit+0x15c>)
 800b1b8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4a0f      	ldr	r2, [pc, #60]	; (800b1fc <USB_HostInit+0x160>)
 800b1be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d105      	bne.n	800b1d4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	f043 0210 	orr.w	r2, r3, #16
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	699a      	ldr	r2, [r3, #24]
 800b1d8:	4b09      	ldr	r3, [pc, #36]	; (800b200 <USB_HostInit+0x164>)
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b1ec:	b004      	add	sp, #16
 800b1ee:	4770      	bx	lr
 800b1f0:	01000200 	.word	0x01000200
 800b1f4:	00e00300 	.word	0x00e00300
 800b1f8:	00600080 	.word	0x00600080
 800b1fc:	004000e0 	.word	0x004000e0
 800b200:	a3200008 	.word	0xa3200008

0800b204 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	460b      	mov	r3, r1
 800b20e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b222:	f023 0303 	bic.w	r3, r3, #3
 800b226:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	f003 0303 	and.w	r3, r3, #3
 800b236:	68f9      	ldr	r1, [r7, #12]
 800b238:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b23c:	4313      	orrs	r3, r2
 800b23e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b240:	78fb      	ldrb	r3, [r7, #3]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d107      	bne.n	800b256 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b24c:	461a      	mov	r2, r3
 800b24e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b252:	6053      	str	r3, [r2, #4]
 800b254:	e009      	b.n	800b26a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b256:	78fb      	ldrb	r3, [r7, #3]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d106      	bne.n	800b26a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b262:	461a      	mov	r2, r3
 800b264:	f241 7370 	movw	r3, #6000	; 0x1770
 800b268:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b284:	2300      	movs	r3, #0
 800b286:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b298:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b2a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b2a8:	2064      	movs	r0, #100	; 0x64
 800b2aa:	f7f9 f85b 	bl	8004364 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b2b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b2bc:	200a      	movs	r0, #10
 800b2be:	f7f9 f851 	bl	8004364 <HAL_Delay>

  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b2f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d109      	bne.n	800b310 <USB_DriveVbus+0x44>
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d106      	bne.n	800b310 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b30a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b30e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b31a:	d109      	bne.n	800b330 <USB_DriveVbus+0x64>
 800b31c:	78fb      	ldrb	r3, [r7, #3]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d106      	bne.n	800b330 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b32a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b32e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3714      	adds	r7, #20
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b33e:	b480      	push	{r7}
 800b340:	b085      	sub	sp, #20
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	0c5b      	lsrs	r3, r3, #17
 800b35c:	f003 0303 	and.w	r3, r3, #3
}
 800b360:	4618      	mov	r0, r3
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	b29b      	uxth	r3, r3
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
	...

0800b390 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b088      	sub	sp, #32
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	4608      	mov	r0, r1
 800b39a:	4611      	mov	r1, r2
 800b39c:	461a      	mov	r2, r3
 800b39e:	4603      	mov	r3, r0
 800b3a0:	70fb      	strb	r3, [r7, #3]
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	70bb      	strb	r3, [r7, #2]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b3b2:	78fb      	ldrb	r3, [r7, #3]
 800b3b4:	015a      	lsls	r2, r3, #5
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3c4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b3c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d87e      	bhi.n	800b4cc <USB_HC_Init+0x13c>
 800b3ce:	a201      	add	r2, pc, #4	; (adr r2, 800b3d4 <USB_HC_Init+0x44>)
 800b3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d4:	0800b3e5 	.word	0x0800b3e5
 800b3d8:	0800b48f 	.word	0x0800b48f
 800b3dc:	0800b3e5 	.word	0x0800b3e5
 800b3e0:	0800b451 	.word	0x0800b451
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b3e4:	78fb      	ldrb	r3, [r7, #3]
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	f240 439d 	movw	r3, #1181	; 0x49d
 800b3f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b3f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	da10      	bge.n	800b422 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b400:	78fb      	ldrb	r3, [r7, #3]
 800b402:	015a      	lsls	r2, r3, #5
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	4413      	add	r3, r2
 800b408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	78fa      	ldrb	r2, [r7, #3]
 800b410:	0151      	lsls	r1, r2, #5
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	440a      	add	r2, r1
 800b416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b41a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b41e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800b420:	e057      	b.n	800b4d2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d051      	beq.n	800b4d2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b42e:	78fb      	ldrb	r3, [r7, #3]
 800b430:	015a      	lsls	r2, r3, #5
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	4413      	add	r3, r2
 800b436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	78fa      	ldrb	r2, [r7, #3]
 800b43e:	0151      	lsls	r1, r2, #5
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	440a      	add	r2, r1
 800b444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b448:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b44c:	60d3      	str	r3, [r2, #12]
      break;
 800b44e:	e040      	b.n	800b4d2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b450:	78fb      	ldrb	r3, [r7, #3]
 800b452:	015a      	lsls	r2, r3, #5
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	4413      	add	r3, r2
 800b458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b45c:	461a      	mov	r2, r3
 800b45e:	f240 639d 	movw	r3, #1693	; 0x69d
 800b462:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b464:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	da34      	bge.n	800b4d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b46c:	78fb      	ldrb	r3, [r7, #3]
 800b46e:	015a      	lsls	r2, r3, #5
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	4413      	add	r3, r2
 800b474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	78fa      	ldrb	r2, [r7, #3]
 800b47c:	0151      	lsls	r1, r2, #5
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	440a      	add	r2, r1
 800b482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b48a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b48c:	e023      	b.n	800b4d6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b48e:	78fb      	ldrb	r3, [r7, #3]
 800b490:	015a      	lsls	r2, r3, #5
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	4413      	add	r3, r2
 800b496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b49a:	461a      	mov	r2, r3
 800b49c:	f240 2325 	movw	r3, #549	; 0x225
 800b4a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b4a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	da17      	bge.n	800b4da <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b4aa:	78fb      	ldrb	r3, [r7, #3]
 800b4ac:	015a      	lsls	r2, r3, #5
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	78fa      	ldrb	r2, [r7, #3]
 800b4ba:	0151      	lsls	r1, r2, #5
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	440a      	add	r2, r1
 800b4c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4c4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b4c8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b4ca:	e006      	b.n	800b4da <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	77fb      	strb	r3, [r7, #31]
      break;
 800b4d0:	e004      	b.n	800b4dc <USB_HC_Init+0x14c>
      break;
 800b4d2:	bf00      	nop
 800b4d4:	e002      	b.n	800b4dc <USB_HC_Init+0x14c>
      break;
 800b4d6:	bf00      	nop
 800b4d8:	e000      	b.n	800b4dc <USB_HC_Init+0x14c>
      break;
 800b4da:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b4e2:	699a      	ldr	r2, [r3, #24]
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	f003 030f 	and.w	r3, r3, #15
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	fa01 f303 	lsl.w	r3, r1, r3
 800b4f0:	6939      	ldr	r1, [r7, #16]
 800b4f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b506:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	da03      	bge.n	800b516 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b50e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b512:	61bb      	str	r3, [r7, #24]
 800b514:	e001      	b.n	800b51a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800b516:	2300      	movs	r3, #0
 800b518:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7ff ff0f 	bl	800b33e <USB_GetHostSpeed>
 800b520:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b522:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b526:	2b02      	cmp	r3, #2
 800b528:	d106      	bne.n	800b538 <USB_HC_Init+0x1a8>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2b02      	cmp	r3, #2
 800b52e:	d003      	beq.n	800b538 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b534:	617b      	str	r3, [r7, #20]
 800b536:	e001      	b.n	800b53c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b538:	2300      	movs	r3, #0
 800b53a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b53c:	787b      	ldrb	r3, [r7, #1]
 800b53e:	059b      	lsls	r3, r3, #22
 800b540:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b544:	78bb      	ldrb	r3, [r7, #2]
 800b546:	02db      	lsls	r3, r3, #11
 800b548:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b54c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b54e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b552:	049b      	lsls	r3, r3, #18
 800b554:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b558:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b55a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b55c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b560:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b562:	69bb      	ldr	r3, [r7, #24]
 800b564:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b566:	78fb      	ldrb	r3, [r7, #3]
 800b568:	0159      	lsls	r1, r3, #5
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	440b      	add	r3, r1
 800b56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b572:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b578:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b57a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b57e:	2b03      	cmp	r3, #3
 800b580:	d10f      	bne.n	800b5a2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b582:	78fb      	ldrb	r3, [r7, #3]
 800b584:	015a      	lsls	r2, r3, #5
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	4413      	add	r3, r2
 800b58a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	78fa      	ldrb	r2, [r7, #3]
 800b592:	0151      	lsls	r1, r2, #5
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	440a      	add	r2, r1
 800b598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b59c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5a0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b5a2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3720      	adds	r7, #32
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08c      	sub	sp, #48	; 0x30
 800b5b0:	af02      	add	r7, sp, #8
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	785b      	ldrb	r3, [r3, #1]
 800b5c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b5c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5c8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d02d      	beq.n	800b632 <USB_HC_StartXfer+0x86>
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	791b      	ldrb	r3, [r3, #4]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d129      	bne.n	800b632 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d117      	bne.n	800b614 <USB_HC_StartXfer+0x68>
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	79db      	ldrb	r3, [r3, #7]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <USB_HC_StartXfer+0x48>
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	79db      	ldrb	r3, [r3, #7]
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	d10f      	bne.n	800b614 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	015a      	lsls	r2, r3, #5
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	69fa      	ldr	r2, [r7, #28]
 800b604:	0151      	lsls	r1, r2, #5
 800b606:	6a3a      	ldr	r2, [r7, #32]
 800b608:	440a      	add	r2, r1
 800b60a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b612:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800b614:	79fb      	ldrb	r3, [r7, #7]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d10b      	bne.n	800b632 <USB_HC_StartXfer+0x86>
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	795b      	ldrb	r3, [r3, #5]
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d107      	bne.n	800b632 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	785b      	ldrb	r3, [r3, #1]
 800b626:	4619      	mov	r1, r3
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f000 fa2f 	bl	800ba8c <USB_DoPing>
      return HAL_OK;
 800b62e:	2300      	movs	r3, #0
 800b630:	e0f8      	b.n	800b824 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	695b      	ldr	r3, [r3, #20]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d018      	beq.n	800b66c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	695b      	ldr	r3, [r3, #20]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	8912      	ldrh	r2, [r2, #8]
 800b642:	4413      	add	r3, r2
 800b644:	3b01      	subs	r3, #1
 800b646:	68ba      	ldr	r2, [r7, #8]
 800b648:	8912      	ldrh	r2, [r2, #8]
 800b64a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b64e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b650:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b652:	8b7b      	ldrh	r3, [r7, #26]
 800b654:	429a      	cmp	r2, r3
 800b656:	d90b      	bls.n	800b670 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800b658:	8b7b      	ldrh	r3, [r7, #26]
 800b65a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b65c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	8912      	ldrh	r2, [r2, #8]
 800b662:	fb02 f203 	mul.w	r2, r2, r3
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	611a      	str	r2, [r3, #16]
 800b66a:	e001      	b.n	800b670 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800b66c:	2301      	movs	r3, #1
 800b66e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	78db      	ldrb	r3, [r3, #3]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d007      	beq.n	800b688 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b678:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	8912      	ldrh	r2, [r2, #8]
 800b67e:	fb02 f203 	mul.w	r2, r2, r3
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	611a      	str	r2, [r3, #16]
 800b686:	e003      	b.n	800b690 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	695a      	ldr	r2, [r3, #20]
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b69a:	04d9      	lsls	r1, r3, #19
 800b69c:	4b63      	ldr	r3, [pc, #396]	; (800b82c <USB_HC_StartXfer+0x280>)
 800b69e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b6a0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	7a9b      	ldrb	r3, [r3, #10]
 800b6a6:	075b      	lsls	r3, r3, #29
 800b6a8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b6ac:	69f9      	ldr	r1, [r7, #28]
 800b6ae:	0148      	lsls	r0, r1, #5
 800b6b0:	6a39      	ldr	r1, [r7, #32]
 800b6b2:	4401      	add	r1, r0
 800b6b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b6b8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b6ba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b6bc:	79fb      	ldrb	r3, [r7, #7]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d009      	beq.n	800b6d6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	68d9      	ldr	r1, [r3, #12]
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	015a      	lsls	r2, r3, #5
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6d2:	460a      	mov	r2, r1
 800b6d4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	f003 0301 	and.w	r3, r3, #1
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	bf0c      	ite	eq
 800b6e6:	2301      	moveq	r3, #1
 800b6e8:	2300      	movne	r3, #0
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	015a      	lsls	r2, r3, #5
 800b6f2:	6a3b      	ldr	r3, [r7, #32]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	69fa      	ldr	r2, [r7, #28]
 800b6fe:	0151      	lsls	r1, r2, #5
 800b700:	6a3a      	ldr	r2, [r7, #32]
 800b702:	440a      	add	r2, r1
 800b704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b708:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b70c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	015a      	lsls	r2, r3, #5
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	4413      	add	r3, r2
 800b716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	7e7b      	ldrb	r3, [r7, #25]
 800b71e:	075b      	lsls	r3, r3, #29
 800b720:	69f9      	ldr	r1, [r7, #28]
 800b722:	0148      	lsls	r0, r1, #5
 800b724:	6a39      	ldr	r1, [r7, #32]
 800b726:	4401      	add	r1, r0
 800b728:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b72c:	4313      	orrs	r3, r2
 800b72e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	015a      	lsls	r2, r3, #5
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	4413      	add	r3, r2
 800b738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b746:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	78db      	ldrb	r3, [r3, #3]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d004      	beq.n	800b75a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b756:	613b      	str	r3, [r7, #16]
 800b758:	e003      	b.n	800b762 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b760:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b768:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	015a      	lsls	r2, r3, #5
 800b76e:	6a3b      	ldr	r3, [r7, #32]
 800b770:	4413      	add	r3, r2
 800b772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b776:	461a      	mov	r2, r3
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b77c:	79fb      	ldrb	r3, [r7, #7]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d001      	beq.n	800b786 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	e04e      	b.n	800b824 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	78db      	ldrb	r3, [r3, #3]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d149      	bne.n	800b822 <USB_HC_StartXfer+0x276>
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	695b      	ldr	r3, [r3, #20]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d045      	beq.n	800b822 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	79db      	ldrb	r3, [r3, #7]
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d830      	bhi.n	800b800 <USB_HC_StartXfer+0x254>
 800b79e:	a201      	add	r2, pc, #4	; (adr r2, 800b7a4 <USB_HC_StartXfer+0x1f8>)
 800b7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a4:	0800b7b5 	.word	0x0800b7b5
 800b7a8:	0800b7d9 	.word	0x0800b7d9
 800b7ac:	0800b7b5 	.word	0x0800b7b5
 800b7b0:	0800b7d9 	.word	0x0800b7d9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	695b      	ldr	r3, [r3, #20]
 800b7b8:	3303      	adds	r3, #3
 800b7ba:	089b      	lsrs	r3, r3, #2
 800b7bc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b7be:	8afa      	ldrh	r2, [r7, #22]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d91c      	bls.n	800b804 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	f043 0220 	orr.w	r2, r3, #32
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	619a      	str	r2, [r3, #24]
        }
        break;
 800b7d6:	e015      	b.n	800b804 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	3303      	adds	r3, #3
 800b7de:	089b      	lsrs	r3, r3, #2
 800b7e0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b7e2:	8afa      	ldrh	r2, [r7, #22]
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d90a      	bls.n	800b808 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	699b      	ldr	r3, [r3, #24]
 800b7f6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	619a      	str	r2, [r3, #24]
        }
        break;
 800b7fe:	e003      	b.n	800b808 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b800:	bf00      	nop
 800b802:	e002      	b.n	800b80a <USB_HC_StartXfer+0x25e>
        break;
 800b804:	bf00      	nop
 800b806:	e000      	b.n	800b80a <USB_HC_StartXfer+0x25e>
        break;
 800b808:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	68d9      	ldr	r1, [r3, #12]
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	785a      	ldrb	r2, [r3, #1]
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	b29b      	uxth	r3, r3
 800b818:	2000      	movs	r0, #0
 800b81a:	9000      	str	r0, [sp, #0]
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f7ff fb53 	bl	800aec8 <USB_WritePacket>
  }

  return HAL_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3728      	adds	r7, #40	; 0x28
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	1ff80000 	.word	0x1ff80000

0800b830 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	b29b      	uxth	r3, r3
}
 800b846:	4618      	mov	r0, r3
 800b848:	3714      	adds	r7, #20
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr

0800b852 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b852:	b480      	push	{r7}
 800b854:	b089      	sub	sp, #36	; 0x24
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	460b      	mov	r3, r1
 800b85c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800b862:	78fb      	ldrb	r3, [r7, #3]
 800b864:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800b866:	2300      	movs	r3, #0
 800b868:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	015a      	lsls	r2, r3, #5
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	4413      	add	r3, r2
 800b872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	0c9b      	lsrs	r3, r3, #18
 800b87a:	f003 0303 	and.w	r3, r3, #3
 800b87e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	015a      	lsls	r2, r3, #5
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	4413      	add	r3, r2
 800b888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	0fdb      	lsrs	r3, r3, #31
 800b890:	f003 0301 	and.w	r3, r3, #1
 800b894:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	f003 0320 	and.w	r3, r3, #32
 800b89e:	2b20      	cmp	r3, #32
 800b8a0:	d104      	bne.n	800b8ac <USB_HC_Halt+0x5a>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	e0e8      	b.n	800ba7e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d002      	beq.n	800b8b8 <USB_HC_Halt+0x66>
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d173      	bne.n	800b9a0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	015a      	lsls	r2, r3, #5
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	4413      	add	r3, r2
 800b8c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	0151      	lsls	r1, r2, #5
 800b8ca:	69ba      	ldr	r2, [r7, #24]
 800b8cc:	440a      	add	r2, r1
 800b8ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b8d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8d6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	f003 0320 	and.w	r3, r3, #32
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f040 80cb 	bne.w	800ba7c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d143      	bne.n	800b97a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	015a      	lsls	r2, r3, #5
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	697a      	ldr	r2, [r7, #20]
 800b902:	0151      	lsls	r1, r2, #5
 800b904:	69ba      	ldr	r2, [r7, #24]
 800b906:	440a      	add	r2, r1
 800b908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b90c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b910:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	015a      	lsls	r2, r3, #5
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	4413      	add	r3, r2
 800b91a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	0151      	lsls	r1, r2, #5
 800b924:	69ba      	ldr	r2, [r7, #24]
 800b926:	440a      	add	r2, r1
 800b928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b92c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b930:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	015a      	lsls	r2, r3, #5
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	4413      	add	r3, r2
 800b93a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	697a      	ldr	r2, [r7, #20]
 800b942:	0151      	lsls	r1, r2, #5
 800b944:	69ba      	ldr	r2, [r7, #24]
 800b946:	440a      	add	r2, r1
 800b948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b94c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b950:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	3301      	adds	r3, #1
 800b956:	61fb      	str	r3, [r7, #28]
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b95e:	d81d      	bhi.n	800b99c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	015a      	lsls	r2, r3, #5
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	4413      	add	r3, r2
 800b968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b976:	d0ec      	beq.n	800b952 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b978:	e080      	b.n	800ba7c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	015a      	lsls	r2, r3, #5
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	4413      	add	r3, r2
 800b982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	697a      	ldr	r2, [r7, #20]
 800b98a:	0151      	lsls	r1, r2, #5
 800b98c:	69ba      	ldr	r2, [r7, #24]
 800b98e:	440a      	add	r2, r1
 800b990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b994:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b998:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b99a:	e06f      	b.n	800ba7c <USB_HC_Halt+0x22a>
            break;
 800b99c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b99e:	e06d      	b.n	800ba7c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	0151      	lsls	r1, r2, #5
 800b9b2:	69ba      	ldr	r2, [r7, #24]
 800b9b4:	440a      	add	r2, r1
 800b9b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d143      	bne.n	800ba58 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	015a      	lsls	r2, r3, #5
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	697a      	ldr	r2, [r7, #20]
 800b9e0:	0151      	lsls	r1, r2, #5
 800b9e2:	69ba      	ldr	r2, [r7, #24]
 800b9e4:	440a      	add	r2, r1
 800b9e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b9ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	015a      	lsls	r2, r3, #5
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	697a      	ldr	r2, [r7, #20]
 800ba00:	0151      	lsls	r1, r2, #5
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	440a      	add	r2, r1
 800ba06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	015a      	lsls	r2, r3, #5
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	4413      	add	r3, r2
 800ba18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	0151      	lsls	r1, r2, #5
 800ba22:	69ba      	ldr	r2, [r7, #24]
 800ba24:	440a      	add	r2, r1
 800ba26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba2e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	3301      	adds	r3, #1
 800ba34:	61fb      	str	r3, [r7, #28]
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba3c:	d81d      	bhi.n	800ba7a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	015a      	lsls	r2, r3, #5
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	4413      	add	r3, r2
 800ba46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba54:	d0ec      	beq.n	800ba30 <USB_HC_Halt+0x1de>
 800ba56:	e011      	b.n	800ba7c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	015a      	lsls	r2, r3, #5
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	4413      	add	r3, r2
 800ba60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	0151      	lsls	r1, r2, #5
 800ba6a:	69ba      	ldr	r2, [r7, #24]
 800ba6c:	440a      	add	r2, r1
 800ba6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ba72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ba76:	6013      	str	r3, [r2, #0]
 800ba78:	e000      	b.n	800ba7c <USB_HC_Halt+0x22a>
          break;
 800ba7a:	bf00      	nop
    }
  }

  return HAL_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3724      	adds	r7, #36	; 0x24
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr
	...

0800ba8c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	460b      	mov	r3, r1
 800ba96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ba9c:	78fb      	ldrb	r3, [r7, #3]
 800ba9e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800baa0:	2301      	movs	r3, #1
 800baa2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	04da      	lsls	r2, r3, #19
 800baa8:	4b15      	ldr	r3, [pc, #84]	; (800bb00 <USB_DoPing+0x74>)
 800baaa:	4013      	ands	r3, r2
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	0151      	lsls	r1, r2, #5
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	440a      	add	r2, r1
 800bab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800babc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	015a      	lsls	r2, r3, #5
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	4413      	add	r3, r2
 800bac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bad4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800badc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	015a      	lsls	r2, r3, #5
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	4413      	add	r3, r2
 800bae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baea:	461a      	mov	r2, r3
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	371c      	adds	r7, #28
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	1ff80000 	.word	0x1ff80000

0800bb04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bb10:	2300      	movs	r3, #0
 800bb12:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7ff f935 	bl	800ad84 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800bb1a:	2110      	movs	r1, #16
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff f98f 	bl	800ae40 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff f9b0 	bl	800ae88 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bb28:	2300      	movs	r3, #0
 800bb2a:	613b      	str	r3, [r7, #16]
 800bb2c:	e01f      	b.n	800bb6e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	015a      	lsls	r2, r3, #5
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	4413      	add	r3, r2
 800bb36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb44:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb4c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb54:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	015a      	lsls	r2, r3, #5
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb62:	461a      	mov	r2, r3
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	613b      	str	r3, [r7, #16]
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	2b0f      	cmp	r3, #15
 800bb72:	d9dc      	bls.n	800bb2e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bb74:	2300      	movs	r3, #0
 800bb76:	613b      	str	r3, [r7, #16]
 800bb78:	e034      	b.n	800bbe4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	015a      	lsls	r2, r3, #5
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	4413      	add	r3, r2
 800bb82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb90:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb98:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bba0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbae:	461a      	mov	r2, r3
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	617b      	str	r3, [r7, #20]
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbc0:	d80c      	bhi.n	800bbdc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	015a      	lsls	r2, r3, #5
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	4413      	add	r3, r2
 800bbca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbd8:	d0ec      	beq.n	800bbb4 <USB_StopHost+0xb0>
 800bbda:	e000      	b.n	800bbde <USB_StopHost+0xda>
        break;
 800bbdc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	613b      	str	r3, [r7, #16]
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	2b0f      	cmp	r3, #15
 800bbe8:	d9c7      	bls.n	800bb7a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbf6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbfe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f7ff f8ae 	bl	800ad62 <USB_EnableGlobalInt>

  return HAL_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bc10:	b590      	push	{r4, r7, lr}
 800bc12:	b089      	sub	sp, #36	; 0x24
 800bc14:	af04      	add	r7, sp, #16
 800bc16:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bc18:	2301      	movs	r3, #1
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	2102      	movs	r1, #2
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 fcb2 	bl	800c588 <USBH_FindInterface>
 800bc24:	4603      	mov	r3, r0
 800bc26:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
 800bc2a:	2bff      	cmp	r3, #255	; 0xff
 800bc2c:	d002      	beq.n	800bc34 <USBH_CDC_InterfaceInit+0x24>
 800bc2e:	7bfb      	ldrb	r3, [r7, #15]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d901      	bls.n	800bc38 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bc34:	2302      	movs	r3, #2
 800bc36:	e13d      	b.n	800beb4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fc87 	bl	800c550 <USBH_SelectInterface>
 800bc42:	4603      	mov	r3, r0
 800bc44:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bc46:	7bbb      	ldrb	r3, [r7, #14]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800bc4c:	2302      	movs	r3, #2
 800bc4e:	e131      	b.n	800beb4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800bc56:	2050      	movs	r0, #80	; 0x50
 800bc58:	f005 febe 	bl	80119d8 <malloc>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc66:	69db      	ldr	r3, [r3, #28]
 800bc68:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800bc70:	2302      	movs	r3, #2
 800bc72:	e11f      	b.n	800beb4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800bc74:	2250      	movs	r2, #80	; 0x50
 800bc76:	2100      	movs	r1, #0
 800bc78:	68b8      	ldr	r0, [r7, #8]
 800bc7a:	f005 fecb 	bl	8011a14 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bc7e:	7bfb      	ldrb	r3, [r7, #15]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	211a      	movs	r1, #26
 800bc84:	fb01 f303 	mul.w	r3, r1, r3
 800bc88:	4413      	add	r3, r2
 800bc8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	b25b      	sxtb	r3, r3
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	da15      	bge.n	800bcc2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	211a      	movs	r1, #26
 800bc9c:	fb01 f303 	mul.w	r3, r1, r3
 800bca0:	4413      	add	r3, r2
 800bca2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bca6:	781a      	ldrb	r2, [r3, #0]
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	211a      	movs	r1, #26
 800bcb2:	fb01 f303 	mul.w	r3, r1, r3
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bcbc:	881a      	ldrh	r2, [r3, #0]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	785b      	ldrb	r3, [r3, #1]
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f002 f88c 	bl	800dde6 <USBH_AllocPipe>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	7819      	ldrb	r1, [r3, #0]
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	7858      	ldrb	r0, [r3, #1]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	8952      	ldrh	r2, [r2, #10]
 800bcee:	9202      	str	r2, [sp, #8]
 800bcf0:	2203      	movs	r2, #3
 800bcf2:	9201      	str	r2, [sp, #4]
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	4623      	mov	r3, r4
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f002 f844 	bl	800dd88 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	2200      	movs	r2, #0
 800bd06:	4619      	mov	r1, r3
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f005 fdb5 	bl	8011878 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bd0e:	2300      	movs	r3, #0
 800bd10:	2200      	movs	r2, #0
 800bd12:	210a      	movs	r1, #10
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 fc37 	bl	800c588 <USBH_FindInterface>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	2bff      	cmp	r3, #255	; 0xff
 800bd22:	d002      	beq.n	800bd2a <USBH_CDC_InterfaceInit+0x11a>
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d901      	bls.n	800bd2e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	e0c2      	b.n	800beb4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	211a      	movs	r1, #26
 800bd34:	fb01 f303 	mul.w	r3, r1, r3
 800bd38:	4413      	add	r3, r2
 800bd3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	b25b      	sxtb	r3, r3
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	da16      	bge.n	800bd74 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	211a      	movs	r1, #26
 800bd4c:	fb01 f303 	mul.w	r3, r1, r3
 800bd50:	4413      	add	r3, r2
 800bd52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bd56:	781a      	ldrb	r2, [r3, #0]
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bd5c:	7bfb      	ldrb	r3, [r7, #15]
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	211a      	movs	r1, #26
 800bd62:	fb01 f303 	mul.w	r3, r1, r3
 800bd66:	4413      	add	r3, r2
 800bd68:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bd6c:	881a      	ldrh	r2, [r3, #0]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	835a      	strh	r2, [r3, #26]
 800bd72:	e015      	b.n	800bda0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bd74:	7bfb      	ldrb	r3, [r7, #15]
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	211a      	movs	r1, #26
 800bd7a:	fb01 f303 	mul.w	r3, r1, r3
 800bd7e:	4413      	add	r3, r2
 800bd80:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bd84:	781a      	ldrb	r2, [r3, #0]
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	211a      	movs	r1, #26
 800bd90:	fb01 f303 	mul.w	r3, r1, r3
 800bd94:	4413      	add	r3, r2
 800bd96:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bd9a:	881a      	ldrh	r2, [r3, #0]
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800bda0:	7bfb      	ldrb	r3, [r7, #15]
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	211a      	movs	r1, #26
 800bda6:	fb01 f303 	mul.w	r3, r1, r3
 800bdaa:	4413      	add	r3, r2
 800bdac:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	b25b      	sxtb	r3, r3
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	da16      	bge.n	800bde6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bdb8:	7bfb      	ldrb	r3, [r7, #15]
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	211a      	movs	r1, #26
 800bdbe:	fb01 f303 	mul.w	r3, r1, r3
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bdc8:	781a      	ldrb	r2, [r3, #0]
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	211a      	movs	r1, #26
 800bdd4:	fb01 f303 	mul.w	r3, r1, r3
 800bdd8:	4413      	add	r3, r2
 800bdda:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bdde:	881a      	ldrh	r2, [r3, #0]
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	835a      	strh	r2, [r3, #26]
 800bde4:	e015      	b.n	800be12 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bde6:	7bfb      	ldrb	r3, [r7, #15]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	211a      	movs	r1, #26
 800bdec:	fb01 f303 	mul.w	r3, r1, r3
 800bdf0:	4413      	add	r3, r2
 800bdf2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bdf6:	781a      	ldrb	r2, [r3, #0]
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bdfc:	7bfb      	ldrb	r3, [r7, #15]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	211a      	movs	r1, #26
 800be02:	fb01 f303 	mul.w	r3, r1, r3
 800be06:	4413      	add	r3, r2
 800be08:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800be0c:	881a      	ldrh	r2, [r3, #0]
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	7b9b      	ldrb	r3, [r3, #14]
 800be16:	4619      	mov	r1, r3
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f001 ffe4 	bl	800dde6 <USBH_AllocPipe>
 800be1e:	4603      	mov	r3, r0
 800be20:	461a      	mov	r2, r3
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	7bdb      	ldrb	r3, [r3, #15]
 800be2a:	4619      	mov	r1, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f001 ffda 	bl	800dde6 <USBH_AllocPipe>
 800be32:	4603      	mov	r3, r0
 800be34:	461a      	mov	r2, r3
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	7b59      	ldrb	r1, [r3, #13]
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	7b98      	ldrb	r0, [r3, #14]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	8b12      	ldrh	r2, [r2, #24]
 800be52:	9202      	str	r2, [sp, #8]
 800be54:	2202      	movs	r2, #2
 800be56:	9201      	str	r2, [sp, #4]
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	4623      	mov	r3, r4
 800be5c:	4602      	mov	r2, r0
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f001 ff92 	bl	800dd88 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	7b19      	ldrb	r1, [r3, #12]
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	7bd8      	ldrb	r0, [r3, #15]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	8b52      	ldrh	r2, [r2, #26]
 800be7c:	9202      	str	r2, [sp, #8]
 800be7e:	2202      	movs	r2, #2
 800be80:	9201      	str	r2, [sp, #4]
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	4623      	mov	r3, r4
 800be86:	4602      	mov	r2, r0
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f001 ff7d 	bl	800dd88 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	7b5b      	ldrb	r3, [r3, #13]
 800be9a:	2200      	movs	r2, #0
 800be9c:	4619      	mov	r1, r3
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f005 fcea 	bl	8011878 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	7b1b      	ldrb	r3, [r3, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	4619      	mov	r1, r3
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f005 fce3 	bl	8011878 <USBH_LL_SetToggle>

  return USBH_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3714      	adds	r7, #20
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd90      	pop	{r4, r7, pc}

0800bebc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800beca:	69db      	ldr	r3, [r3, #28]
 800becc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00e      	beq.n	800bef4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	4619      	mov	r1, r3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f001 ff72 	bl	800ddc6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f001 ff9d 	bl	800de28 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2200      	movs	r2, #0
 800bef2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	7b1b      	ldrb	r3, [r3, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00e      	beq.n	800bf1a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	7b1b      	ldrb	r3, [r3, #12]
 800bf00:	4619      	mov	r1, r3
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f001 ff5f 	bl	800ddc6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	7b1b      	ldrb	r3, [r3, #12]
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f001 ff8a 	bl	800de28 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	7b5b      	ldrb	r3, [r3, #13]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00e      	beq.n	800bf40 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	7b5b      	ldrb	r3, [r3, #13]
 800bf26:	4619      	mov	r1, r3
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f001 ff4c 	bl	800ddc6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	7b5b      	ldrb	r3, [r3, #13]
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f001 ff77 	bl	800de28 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf46:	69db      	ldr	r3, [r3, #28]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00b      	beq.n	800bf64 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf52:	69db      	ldr	r3, [r3, #28]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f005 fd47 	bl	80119e8 <free>
    phost->pActiveClass->pData = 0U;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf60:	2200      	movs	r2, #0
 800bf62:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b084      	sub	sp, #16
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf7c:	69db      	ldr	r3, [r3, #28]
 800bf7e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	3340      	adds	r3, #64	; 0x40
 800bf84:	4619      	mov	r1, r3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 f8b1 	bl	800c0ee <GetLineCoding>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800bf90:	7afb      	ldrb	r3, [r7, #11]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d105      	bne.n	800bfa2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf9c:	2102      	movs	r1, #2
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800bfa2:	7afb      	ldrb	r3, [r7, #11]
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfc2:	69db      	ldr	r3, [r3, #28]
 800bfc4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800bfcc:	2b04      	cmp	r3, #4
 800bfce:	d877      	bhi.n	800c0c0 <USBH_CDC_Process+0x114>
 800bfd0:	a201      	add	r2, pc, #4	; (adr r2, 800bfd8 <USBH_CDC_Process+0x2c>)
 800bfd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd6:	bf00      	nop
 800bfd8:	0800bfed 	.word	0x0800bfed
 800bfdc:	0800bff3 	.word	0x0800bff3
 800bfe0:	0800c023 	.word	0x0800c023
 800bfe4:	0800c097 	.word	0x0800c097
 800bfe8:	0800c0a5 	.word	0x0800c0a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800bfec:	2300      	movs	r3, #0
 800bfee:	73fb      	strb	r3, [r7, #15]
      break;
 800bff0:	e06d      	b.n	800c0ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bff6:	4619      	mov	r1, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 f897 	bl	800c12c <SetLineCoding>
 800bffe:	4603      	mov	r3, r0
 800c000:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c002:	7bbb      	ldrb	r3, [r7, #14]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d104      	bne.n	800c012 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	2202      	movs	r2, #2
 800c00c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c010:	e058      	b.n	800c0c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c012:	7bbb      	ldrb	r3, [r7, #14]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d055      	beq.n	800c0c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2204      	movs	r2, #4
 800c01c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c020:	e050      	b.n	800c0c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	3340      	adds	r3, #64	; 0x40
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 f860 	bl	800c0ee <GetLineCoding>
 800c02e:	4603      	mov	r3, r0
 800c030:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c032:	7bbb      	ldrb	r3, [r7, #14]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d126      	bne.n	800c086 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c04a:	791b      	ldrb	r3, [r3, #4]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d13b      	bne.n	800c0c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c05a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d133      	bne.n	800c0c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c06a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d12b      	bne.n	800c0c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c078:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d124      	bne.n	800c0c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f982 	bl	800c388 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c084:	e020      	b.n	800c0c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c086:	7bbb      	ldrb	r3, [r7, #14]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d01d      	beq.n	800c0c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	2204      	movs	r2, #4
 800c090:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c094:	e018      	b.n	800c0c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f867 	bl	800c16a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 f8f6 	bl	800c28e <CDC_ProcessReception>
      break;
 800c0a2:	e014      	b.n	800c0ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f001 f94d 	bl	800d346 <USBH_ClrFeature>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d10a      	bne.n	800c0cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c0be:	e005      	b.n	800c0cc <USBH_CDC_Process+0x120>

    default:
      break;
 800c0c0:	bf00      	nop
 800c0c2:	e004      	b.n	800c0ce <USBH_CDC_Process+0x122>
      break;
 800c0c4:	bf00      	nop
 800c0c6:	e002      	b.n	800c0ce <USBH_CDC_Process+0x122>
      break;
 800c0c8:	bf00      	nop
 800c0ca:	e000      	b.n	800c0ce <USBH_CDC_Process+0x122>
      break;
 800c0cc:	bf00      	nop

  }

  return status;
 800c0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	370c      	adds	r7, #12
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b082      	sub	sp, #8
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	22a1      	movs	r2, #161	; 0xa1
 800c0fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2221      	movs	r2, #33	; 0x21
 800c102:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2207      	movs	r2, #7
 800c114:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	2207      	movs	r2, #7
 800c11a:	4619      	mov	r1, r3
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f001 faf2 	bl	800d706 <USBH_CtlReq>
 800c122:	4603      	mov	r3, r0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2221      	movs	r2, #33	; 0x21
 800c13a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2220      	movs	r2, #32
 800c140:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2207      	movs	r2, #7
 800c152:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	2207      	movs	r2, #7
 800c158:	4619      	mov	r1, r3
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f001 fad3 	bl	800d706 <USBH_CtlReq>
 800c160:	4603      	mov	r3, r0
}
 800c162:	4618      	mov	r0, r3
 800c164:	3708      	adds	r7, #8
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b086      	sub	sp, #24
 800c16e:	af02      	add	r7, sp, #8
 800c170:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c178:	69db      	ldr	r3, [r3, #28]
 800c17a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c17c:	2300      	movs	r3, #0
 800c17e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c186:	2b01      	cmp	r3, #1
 800c188:	d002      	beq.n	800c190 <CDC_ProcessTransmission+0x26>
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d023      	beq.n	800c1d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c18e:	e07a      	b.n	800c286 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	8b12      	ldrh	r2, [r2, #24]
 800c198:	4293      	cmp	r3, r2
 800c19a:	d90b      	bls.n	800c1b4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	69d9      	ldr	r1, [r3, #28]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	8b1a      	ldrh	r2, [r3, #24]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	7b5b      	ldrb	r3, [r3, #13]
 800c1a8:	2001      	movs	r0, #1
 800c1aa:	9000      	str	r0, [sp, #0]
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f001 fda8 	bl	800dd02 <USBH_BulkSendData>
 800c1b2:	e00b      	b.n	800c1cc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	7b5b      	ldrb	r3, [r3, #13]
 800c1c2:	2001      	movs	r0, #1
 800c1c4:	9000      	str	r0, [sp, #0]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f001 fd9b 	bl	800dd02 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c1d4:	e057      	b.n	800c286 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	7b5b      	ldrb	r3, [r3, #13]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f005 fb21 	bl	8011824 <USBH_LL_GetURBState>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c1e6:	7afb      	ldrb	r3, [r7, #11]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d136      	bne.n	800c25a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	8b12      	ldrh	r2, [r2, #24]
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d90e      	bls.n	800c216 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	8b12      	ldrh	r2, [r2, #24]
 800c200:	1a9a      	subs	r2, r3, r2
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	8b12      	ldrh	r2, [r2, #24]
 800c20e:	441a      	add	r2, r3
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	61da      	str	r2, [r3, #28]
 800c214:	e002      	b.n	800c21c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c220:	2b00      	cmp	r3, #0
 800c222:	d004      	beq.n	800c22e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c22c:	e006      	b.n	800c23c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f892 	bl	800c360 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2204      	movs	r2, #4
 800c240:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c250:	2300      	movs	r3, #0
 800c252:	2200      	movs	r2, #0
 800c254:	f001 ffd8 	bl	800e208 <osMessageQueuePut>
      break;
 800c258:	e014      	b.n	800c284 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800c25a:	7afb      	ldrb	r3, [r7, #11]
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d111      	bne.n	800c284 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2201      	movs	r2, #1
 800c264:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2204      	movs	r2, #4
 800c26c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c27c:	2300      	movs	r3, #0
 800c27e:	2200      	movs	r2, #0
 800c280:	f001 ffc2 	bl	800e208 <osMessageQueuePut>
      break;
 800c284:	bf00      	nop
  }
}
 800c286:	bf00      	nop
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b086      	sub	sp, #24
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c29c:	69db      	ldr	r3, [r3, #28]
 800c29e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c2aa:	2b03      	cmp	r3, #3
 800c2ac:	d002      	beq.n	800c2b4 <CDC_ProcessReception+0x26>
 800c2ae:	2b04      	cmp	r3, #4
 800c2b0:	d00e      	beq.n	800c2d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c2b2:	e051      	b.n	800c358 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	6a19      	ldr	r1, [r3, #32]
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	8b5a      	ldrh	r2, [r3, #26]
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	7b1b      	ldrb	r3, [r3, #12]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f001 fd43 	bl	800dd4c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2204      	movs	r2, #4
 800c2ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c2ce:	e043      	b.n	800c358 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	7b1b      	ldrb	r3, [r3, #12]
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f005 faa4 	bl	8011824 <USBH_LL_GetURBState>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c2e0:	7cfb      	ldrb	r3, [r7, #19]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d137      	bne.n	800c356 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	7b1b      	ldrb	r3, [r3, #12]
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f005 fa07 	bl	8011700 <USBH_LL_GetLastXferSize>
 800c2f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d016      	beq.n	800c32c <CDC_ProcessReception+0x9e>
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	8b5b      	ldrh	r3, [r3, #26]
 800c302:	461a      	mov	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	4293      	cmp	r3, r2
 800c308:	d910      	bls.n	800c32c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	1ad2      	subs	r2, r2, r3
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	6a1a      	ldr	r2, [r3, #32]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	441a      	add	r2, r3
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	2203      	movs	r2, #3
 800c326:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c32a:	e006      	b.n	800c33a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 f81d 	bl	800c374 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2204      	movs	r2, #4
 800c33e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c34e:	2300      	movs	r3, #0
 800c350:	2200      	movs	r2, #0
 800c352:	f001 ff59 	bl	800e208 <osMessageQueuePut>
      break;
 800c356:	bf00      	nop
  }
}
 800c358:	bf00      	nop
 800c35a:	3718      	adds	r7, #24
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c390:	bf00      	nop
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	e044      	b.n	800c43e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	79fa      	ldrb	r2, [r7, #7]
 800c3b8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c3cc:	68f8      	ldr	r0, [r7, #12]
 800c3ce:	f000 f841 	bl	800c454 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d003      	beq.n	800c400 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800c400:	2200      	movs	r2, #0
 800c402:	2104      	movs	r1, #4
 800c404:	2010      	movs	r0, #16
 800c406:	f001 fe8c 	bl	800e122 <osMessageQueueNew>
 800c40a:	4602      	mov	r2, r0
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800c412:	4b0d      	ldr	r3, [pc, #52]	; (800c448 <USBH_Init+0xac>)
 800c414:	4a0d      	ldr	r2, [pc, #52]	; (800c44c <USBH_Init+0xb0>)
 800c416:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800c418:	4b0b      	ldr	r3, [pc, #44]	; (800c448 <USBH_Init+0xac>)
 800c41a:	2280      	movs	r2, #128	; 0x80
 800c41c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800c41e:	4b0a      	ldr	r3, [pc, #40]	; (800c448 <USBH_Init+0xac>)
 800c420:	2218      	movs	r2, #24
 800c422:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800c424:	4a08      	ldr	r2, [pc, #32]	; (800c448 <USBH_Init+0xac>)
 800c426:	68f9      	ldr	r1, [r7, #12]
 800c428:	4809      	ldr	r0, [pc, #36]	; (800c450 <USBH_Init+0xb4>)
 800c42a:	f001 fdcd 	bl	800dfc8 <osThreadNew>
 800c42e:	4602      	mov	r2, r0
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	f005 f8ae 	bl	8011598 <USBH_LL_Init>

  return USBH_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	20004fe4 	.word	0x20004fe4
 800c44c:	08012974 	.word	0x08012974
 800c450:	0800d0bd 	.word	0x0800d0bd

0800c454 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c45c:	2300      	movs	r3, #0
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c460:	2300      	movs	r3, #0
 800c462:	60fb      	str	r3, [r7, #12]
 800c464:	e009      	b.n	800c47a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	33e0      	adds	r3, #224	; 0xe0
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	4413      	add	r3, r2
 800c470:	2200      	movs	r2, #0
 800c472:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	3301      	adds	r3, #1
 800c478:	60fb      	str	r3, [r7, #12]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2b0e      	cmp	r3, #14
 800c47e:	d9f2      	bls.n	800c466 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c480:	2300      	movs	r3, #0
 800c482:	60fb      	str	r3, [r7, #12]
 800c484:	e009      	b.n	800c49a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	4413      	add	r3, r2
 800c48c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c490:	2200      	movs	r2, #0
 800c492:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	3301      	adds	r3, #1
 800c498:	60fb      	str	r3, [r7, #12]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4a0:	d3f1      	bcc.n	800c486 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2240      	movs	r2, #64	; 0x40
 800c4c6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c4ee:	2300      	movs	r3, #0
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3714      	adds	r7, #20
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c506:	2300      	movs	r3, #0
 800c508:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d016      	beq.n	800c53e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10e      	bne.n	800c538 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c520:	1c59      	adds	r1, r3, #1
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	33de      	adds	r3, #222	; 0xde
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c532:	2300      	movs	r3, #0
 800c534:	73fb      	strb	r3, [r7, #15]
 800c536:	e004      	b.n	800c542 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c538:	2302      	movs	r3, #2
 800c53a:	73fb      	strb	r3, [r7, #15]
 800c53c:	e001      	b.n	800c542 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c53e:	2302      	movs	r3, #2
 800c540:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c542:	7bfb      	ldrb	r3, [r7, #15]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	460b      	mov	r3, r1
 800c55a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c55c:	2300      	movs	r3, #0
 800c55e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c566:	78fa      	ldrb	r2, [r7, #3]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d204      	bcs.n	800c576 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	78fa      	ldrb	r2, [r7, #3]
 800c570:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c574:	e001      	b.n	800c57a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c576:	2302      	movs	r3, #2
 800c578:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3714      	adds	r7, #20
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	4608      	mov	r0, r1
 800c592:	4611      	mov	r1, r2
 800c594:	461a      	mov	r2, r3
 800c596:	4603      	mov	r3, r0
 800c598:	70fb      	strb	r3, [r7, #3]
 800c59a:	460b      	mov	r3, r1
 800c59c:	70bb      	strb	r3, [r7, #2]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c5b0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c5b2:	e025      	b.n	800c600 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c5b4:	7dfb      	ldrb	r3, [r7, #23]
 800c5b6:	221a      	movs	r2, #26
 800c5b8:	fb02 f303 	mul.w	r3, r2, r3
 800c5bc:	3308      	adds	r3, #8
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	3302      	adds	r3, #2
 800c5c4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	795b      	ldrb	r3, [r3, #5]
 800c5ca:	78fa      	ldrb	r2, [r7, #3]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d002      	beq.n	800c5d6 <USBH_FindInterface+0x4e>
 800c5d0:	78fb      	ldrb	r3, [r7, #3]
 800c5d2:	2bff      	cmp	r3, #255	; 0xff
 800c5d4:	d111      	bne.n	800c5fa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c5da:	78ba      	ldrb	r2, [r7, #2]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d002      	beq.n	800c5e6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c5e0:	78bb      	ldrb	r3, [r7, #2]
 800c5e2:	2bff      	cmp	r3, #255	; 0xff
 800c5e4:	d109      	bne.n	800c5fa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c5ea:	787a      	ldrb	r2, [r7, #1]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d002      	beq.n	800c5f6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c5f0:	787b      	ldrb	r3, [r7, #1]
 800c5f2:	2bff      	cmp	r3, #255	; 0xff
 800c5f4:	d101      	bne.n	800c5fa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c5f6:	7dfb      	ldrb	r3, [r7, #23]
 800c5f8:	e006      	b.n	800c608 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c5fa:	7dfb      	ldrb	r3, [r7, #23]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c600:	7dfb      	ldrb	r3, [r7, #23]
 800c602:	2b01      	cmp	r3, #1
 800c604:	d9d6      	bls.n	800c5b4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c606:	23ff      	movs	r3, #255	; 0xff
}
 800c608:	4618      	mov	r0, r3
 800c60a:	371c      	adds	r7, #28
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f004 fff7 	bl	8011610 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c622:	2101      	movs	r1, #1
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f005 f910 	bl	801184a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3708      	adds	r7, #8
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b088      	sub	sp, #32
 800c638:	af04      	add	r7, sp, #16
 800c63a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c63c:	2302      	movs	r3, #2
 800c63e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c640:	2300      	movs	r3, #0
 800c642:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d102      	bne.n	800c656 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2203      	movs	r2, #3
 800c654:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b0b      	cmp	r3, #11
 800c65e:	f200 823c 	bhi.w	800cada <USBH_Process+0x4a6>
 800c662:	a201      	add	r2, pc, #4	; (adr r2, 800c668 <USBH_Process+0x34>)
 800c664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c668:	0800c699 	.word	0x0800c699
 800c66c:	0800c6e7 	.word	0x0800c6e7
 800c670:	0800c76b 	.word	0x0800c76b
 800c674:	0800ca59 	.word	0x0800ca59
 800c678:	0800cadb 	.word	0x0800cadb
 800c67c:	0800c82b 	.word	0x0800c82b
 800c680:	0800c9e3 	.word	0x0800c9e3
 800c684:	0800c87d 	.word	0x0800c87d
 800c688:	0800c8b9 	.word	0x0800c8b9
 800c68c:	0800c8f3 	.word	0x0800c8f3
 800c690:	0800c93b 	.word	0x0800c93b
 800c694:	0800ca41 	.word	0x0800ca41
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f000 821c 	beq.w	800cade <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c6ac:	20c8      	movs	r0, #200	; 0xc8
 800c6ae:	f005 f913 	bl	80118d8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f005 f809 	bl	80116ca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c6dc:	2300      	movs	r3, #0
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f001 fd92 	bl	800e208 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c6e4:	e1fb      	b.n	800cade <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d107      	bne.n	800c700 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	701a      	strb	r2, [r3, #0]
 800c6fe:	e025      	b.n	800c74c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c70a:	d914      	bls.n	800c736 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c712:	3301      	adds	r3, #1
 800c714:	b2da      	uxtb	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c722:	2b03      	cmp	r3, #3
 800c724:	d903      	bls.n	800c72e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	220d      	movs	r2, #13
 800c72a:	701a      	strb	r2, [r3, #0]
 800c72c:	e00e      	b.n	800c74c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	701a      	strb	r2, [r3, #0]
 800c734:	e00a      	b.n	800c74c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c73c:	f103 020a 	add.w	r2, r3, #10
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c746:	200a      	movs	r0, #10
 800c748:	f005 f8c6 	bl	80118d8 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c760:	2300      	movs	r3, #0
 800c762:	2200      	movs	r2, #0
 800c764:	f001 fd50 	bl	800e208 <osMessageQueuePut>
#endif
#endif
      break;
 800c768:	e1c0      	b.n	800caec <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c770:	2b00      	cmp	r3, #0
 800c772:	d005      	beq.n	800c780 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c77a:	2104      	movs	r1, #4
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c780:	2064      	movs	r0, #100	; 0x64
 800c782:	f005 f8a9 	bl	80118d8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f004 ff78 	bl	801167c <USBH_LL_GetSpeed>
 800c78c:	4603      	mov	r3, r0
 800c78e:	461a      	mov	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2205      	movs	r2, #5
 800c79a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c79c:	2100      	movs	r1, #0
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f001 fb21 	bl	800dde6 <USBH_AllocPipe>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c7ac:	2180      	movs	r1, #128	; 0x80
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f001 fb19 	bl	800dde6 <USBH_AllocPipe>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	7919      	ldrb	r1, [r3, #4]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c7d0:	b292      	uxth	r2, r2
 800c7d2:	9202      	str	r2, [sp, #8]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	9201      	str	r2, [sp, #4]
 800c7d8:	9300      	str	r3, [sp, #0]
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2280      	movs	r2, #128	; 0x80
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f001 fad2 	bl	800dd88 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	7959      	ldrb	r1, [r3, #5]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c7f8:	b292      	uxth	r2, r2
 800c7fa:	9202      	str	r2, [sp, #8]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	9201      	str	r2, [sp, #4]
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	4603      	mov	r3, r0
 800c804:	2200      	movs	r2, #0
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f001 fabe 	bl	800dd88 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2201      	movs	r2, #1
 800c810:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c820:	2300      	movs	r3, #0
 800c822:	2200      	movs	r2, #0
 800c824:	f001 fcf0 	bl	800e208 <osMessageQueuePut>
#endif
#endif
      break;
 800c828:	e160      	b.n	800caec <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f964 	bl	800caf8 <USBH_HandleEnum>
 800c830:	4603      	mov	r3, r0
 800c832:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c834:	7bbb      	ldrb	r3, [r7, #14]
 800c836:	b2db      	uxtb	r3, r3
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f040 8152 	bne.w	800cae2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d103      	bne.n	800c858 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2208      	movs	r2, #8
 800c854:	701a      	strb	r2, [r3, #0]
 800c856:	e002      	b.n	800c85e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2207      	movs	r2, #7
 800c85c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2205      	movs	r2, #5
 800c862:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c872:	2300      	movs	r3, #0
 800c874:	2200      	movs	r2, #0
 800c876:	f001 fcc7 	bl	800e208 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c87a:	e132      	b.n	800cae2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c882:	2b00      	cmp	r3, #0
 800c884:	f000 812f 	beq.w	800cae6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c88e:	2101      	movs	r1, #1
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2208      	movs	r2, #8
 800c898:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2205      	movs	r2, #5
 800c89e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f001 fca9 	bl	800e208 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800c8b6:	e116      	b.n	800cae6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fcf8 	bl	800d2b8 <USBH_SetCfg>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d102      	bne.n	800c8d4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2209      	movs	r2, #9
 800c8d2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f001 fc8c 	bl	800e208 <osMessageQueuePut>
#endif
#endif
      break;
 800c8f0:	e0fc      	b.n	800caec <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c8f8:	f003 0320 	and.w	r3, r3, #32
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00a      	beq.n	800c916 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c900:	2101      	movs	r1, #1
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fcfb 	bl	800d2fe <USBH_SetFeature>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d106      	bne.n	800c91c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	220a      	movs	r2, #10
 800c912:	701a      	strb	r2, [r3, #0]
 800c914:	e002      	b.n	800c91c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	220a      	movs	r2, #10
 800c91a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2201      	movs	r2, #1
 800c920:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c930:	2300      	movs	r3, #0
 800c932:	2200      	movs	r2, #0
 800c934:	f001 fc68 	bl	800e208 <osMessageQueuePut>
#endif
#endif
      break;
 800c938:	e0d8      	b.n	800caec <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c940:	2b00      	cmp	r3, #0
 800c942:	d03f      	beq.n	800c9c4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c94c:	2300      	movs	r3, #0
 800c94e:	73fb      	strb	r3, [r7, #15]
 800c950:	e016      	b.n	800c980 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c952:	7bfa      	ldrb	r2, [r7, #15]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	32de      	adds	r2, #222	; 0xde
 800c958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c95c:	791a      	ldrb	r2, [r3, #4]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c964:	429a      	cmp	r2, r3
 800c966:	d108      	bne.n	800c97a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c968:	7bfa      	ldrb	r2, [r7, #15]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	32de      	adds	r2, #222	; 0xde
 800c96e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c978:	e005      	b.n	800c986 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c97a:	7bfb      	ldrb	r3, [r7, #15]
 800c97c:	3301      	adds	r3, #1
 800c97e:	73fb      	strb	r3, [r7, #15]
 800c980:	7bfb      	ldrb	r3, [r7, #15]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d0e5      	beq.n	800c952 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d016      	beq.n	800c9be <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	4798      	blx	r3
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d109      	bne.n	800c9b6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2206      	movs	r2, #6
 800c9a6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9ae:	2103      	movs	r1, #3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	4798      	blx	r3
 800c9b4:	e006      	b.n	800c9c4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	220d      	movs	r2, #13
 800c9ba:	701a      	strb	r2, [r3, #0]
 800c9bc:	e002      	b.n	800c9c4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	220d      	movs	r2, #13
 800c9c2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2205      	movs	r2, #5
 800c9c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c9d8:	2300      	movs	r3, #0
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f001 fc14 	bl	800e208 <osMessageQueuePut>
#endif
#endif
      break;
 800c9e0:	e084      	b.n	800caec <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d017      	beq.n	800ca1c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	4798      	blx	r3
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c9fc:	7bbb      	ldrb	r3, [r7, #14]
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d103      	bne.n	800ca0c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	220b      	movs	r2, #11
 800ca08:	701a      	strb	r2, [r3, #0]
 800ca0a:	e00a      	b.n	800ca22 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800ca0c:	7bbb      	ldrb	r3, [r7, #14]
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d106      	bne.n	800ca22 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	220d      	movs	r2, #13
 800ca18:	701a      	strb	r2, [r3, #0]
 800ca1a:	e002      	b.n	800ca22 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	220d      	movs	r2, #13
 800ca20:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2205      	movs	r2, #5
 800ca26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca36:	2300      	movs	r3, #0
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f001 fbe5 	bl	800e208 <osMessageQueuePut>
#endif
#endif
      break;
 800ca3e:	e055      	b.n	800caec <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d04f      	beq.n	800caea <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca50:	695b      	ldr	r3, [r3, #20]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	4798      	blx	r3
      }
      break;
 800ca56:	e048      	b.n	800caea <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7ff fcf7 	bl	800c454 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d009      	beq.n	800ca84 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d005      	beq.n	800ca9a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca94:	2105      	movs	r1, #5
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d107      	bne.n	800cab6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7ff fdb0 	bl	800c614 <USBH_Start>
 800cab4:	e002      	b.n	800cabc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f004 fdaa 	bl	8011610 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cad0:	2300      	movs	r3, #0
 800cad2:	2200      	movs	r2, #0
 800cad4:	f001 fb98 	bl	800e208 <osMessageQueuePut>
#endif
#endif
      break;
 800cad8:	e008      	b.n	800caec <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800cada:	bf00      	nop
 800cadc:	e006      	b.n	800caec <USBH_Process+0x4b8>
      break;
 800cade:	bf00      	nop
 800cae0:	e004      	b.n	800caec <USBH_Process+0x4b8>
      break;
 800cae2:	bf00      	nop
 800cae4:	e002      	b.n	800caec <USBH_Process+0x4b8>
    break;
 800cae6:	bf00      	nop
 800cae8:	e000      	b.n	800caec <USBH_Process+0x4b8>
      break;
 800caea:	bf00      	nop
  }
  return USBH_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop

0800caf8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b088      	sub	sp, #32
 800cafc:	af04      	add	r7, sp, #16
 800cafe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cb00:	2301      	movs	r3, #1
 800cb02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cb04:	2301      	movs	r3, #1
 800cb06:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	785b      	ldrb	r3, [r3, #1]
 800cb0c:	2b07      	cmp	r3, #7
 800cb0e:	f200 8208 	bhi.w	800cf22 <USBH_HandleEnum+0x42a>
 800cb12:	a201      	add	r2, pc, #4	; (adr r2, 800cb18 <USBH_HandleEnum+0x20>)
 800cb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb18:	0800cb39 	.word	0x0800cb39
 800cb1c:	0800cbf7 	.word	0x0800cbf7
 800cb20:	0800cc61 	.word	0x0800cc61
 800cb24:	0800ccef 	.word	0x0800ccef
 800cb28:	0800cd59 	.word	0x0800cd59
 800cb2c:	0800cdc9 	.word	0x0800cdc9
 800cb30:	0800ce65 	.word	0x0800ce65
 800cb34:	0800cee3 	.word	0x0800cee3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cb38:	2108      	movs	r1, #8
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 faec 	bl	800d118 <USBH_Get_DevDesc>
 800cb40:	4603      	mov	r3, r0
 800cb42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cb44:	7bbb      	ldrb	r3, [r7, #14]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d130      	bne.n	800cbac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2201      	movs	r2, #1
 800cb58:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	7919      	ldrb	r1, [r3, #4]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cb6e:	b292      	uxth	r2, r2
 800cb70:	9202      	str	r2, [sp, #8]
 800cb72:	2200      	movs	r2, #0
 800cb74:	9201      	str	r2, [sp, #4]
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2280      	movs	r2, #128	; 0x80
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f001 f903 	bl	800dd88 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	7959      	ldrb	r1, [r3, #5]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cb96:	b292      	uxth	r2, r2
 800cb98:	9202      	str	r2, [sp, #8]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	9201      	str	r2, [sp, #4]
 800cb9e:	9300      	str	r3, [sp, #0]
 800cba0:	4603      	mov	r3, r0
 800cba2:	2200      	movs	r2, #0
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f001 f8ef 	bl	800dd88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cbaa:	e1bc      	b.n	800cf26 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
 800cbae:	2b03      	cmp	r3, #3
 800cbb0:	f040 81b9 	bne.w	800cf26 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cbba:	3301      	adds	r3, #1
 800cbbc:	b2da      	uxtb	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d903      	bls.n	800cbd6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	220d      	movs	r2, #13
 800cbd2:	701a      	strb	r2, [r3, #0]
      break;
 800cbd4:	e1a7      	b.n	800cf26 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	795b      	ldrb	r3, [r3, #5]
 800cbda:	4619      	mov	r1, r3
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f001 f923 	bl	800de28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	791b      	ldrb	r3, [r3, #4]
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f001 f91d 	bl	800de28 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	701a      	strb	r2, [r3, #0]
      break;
 800cbf4:	e197      	b.n	800cf26 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cbf6:	2112      	movs	r1, #18
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 fa8d 	bl	800d118 <USBH_Get_DevDesc>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc02:	7bbb      	ldrb	r3, [r7, #14]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d103      	bne.n	800cc10 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cc0e:	e18c      	b.n	800cf2a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
 800cc12:	2b03      	cmp	r3, #3
 800cc14:	f040 8189 	bne.w	800cf2a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cc1e:	3301      	adds	r3, #1
 800cc20:	b2da      	uxtb	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cc2e:	2b03      	cmp	r3, #3
 800cc30:	d903      	bls.n	800cc3a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	220d      	movs	r2, #13
 800cc36:	701a      	strb	r2, [r3, #0]
      break;
 800cc38:	e177      	b.n	800cf2a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	795b      	ldrb	r3, [r3, #5]
 800cc3e:	4619      	mov	r1, r3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f001 f8f1 	bl	800de28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	791b      	ldrb	r3, [r3, #4]
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f001 f8eb 	bl	800de28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	701a      	strb	r2, [r3, #0]
      break;
 800cc5e:	e164      	b.n	800cf2a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cc60:	2101      	movs	r1, #1
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fb04 	bl	800d270 <USBH_SetAddress>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc6c:	7bbb      	ldrb	r3, [r7, #14]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d132      	bne.n	800ccd8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800cc72:	2002      	movs	r0, #2
 800cc74:	f004 fe30 	bl	80118d8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2203      	movs	r2, #3
 800cc84:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	7919      	ldrb	r1, [r3, #4]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cc9a:	b292      	uxth	r2, r2
 800cc9c:	9202      	str	r2, [sp, #8]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	9201      	str	r2, [sp, #4]
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	4603      	mov	r3, r0
 800cca6:	2280      	movs	r2, #128	; 0x80
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f001 f86d 	bl	800dd88 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	7959      	ldrb	r1, [r3, #5]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ccc2:	b292      	uxth	r2, r2
 800ccc4:	9202      	str	r2, [sp, #8]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	9201      	str	r2, [sp, #4]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	4603      	mov	r3, r0
 800ccce:	2200      	movs	r2, #0
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f001 f859 	bl	800dd88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ccd6:	e12a      	b.n	800cf2e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ccd8:	7bbb      	ldrb	r3, [r7, #14]
 800ccda:	2b03      	cmp	r3, #3
 800ccdc:	f040 8127 	bne.w	800cf2e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	220d      	movs	r2, #13
 800cce4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	705a      	strb	r2, [r3, #1]
      break;
 800ccec:	e11f      	b.n	800cf2e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ccee:	2109      	movs	r1, #9
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 fa39 	bl	800d168 <USBH_Get_CfgDesc>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ccfa:	7bbb      	ldrb	r3, [r7, #14]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d103      	bne.n	800cd08 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2204      	movs	r2, #4
 800cd04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cd06:	e114      	b.n	800cf32 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd08:	7bbb      	ldrb	r3, [r7, #14]
 800cd0a:	2b03      	cmp	r3, #3
 800cd0c:	f040 8111 	bne.w	800cf32 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd16:	3301      	adds	r3, #1
 800cd18:	b2da      	uxtb	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd26:	2b03      	cmp	r3, #3
 800cd28:	d903      	bls.n	800cd32 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	220d      	movs	r2, #13
 800cd2e:	701a      	strb	r2, [r3, #0]
      break;
 800cd30:	e0ff      	b.n	800cf32 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	795b      	ldrb	r3, [r3, #5]
 800cd36:	4619      	mov	r1, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f001 f875 	bl	800de28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	791b      	ldrb	r3, [r3, #4]
 800cd42:	4619      	mov	r1, r3
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f001 f86f 	bl	800de28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2200      	movs	r2, #0
 800cd54:	701a      	strb	r2, [r3, #0]
      break;
 800cd56:	e0ec      	b.n	800cf32 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cd5e:	4619      	mov	r1, r3
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 fa01 	bl	800d168 <USBH_Get_CfgDesc>
 800cd66:	4603      	mov	r3, r0
 800cd68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd6a:	7bbb      	ldrb	r3, [r7, #14]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d103      	bne.n	800cd78 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2205      	movs	r2, #5
 800cd74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cd76:	e0de      	b.n	800cf36 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd78:	7bbb      	ldrb	r3, [r7, #14]
 800cd7a:	2b03      	cmp	r3, #3
 800cd7c:	f040 80db 	bne.w	800cf36 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd86:	3301      	adds	r3, #1
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd96:	2b03      	cmp	r3, #3
 800cd98:	d903      	bls.n	800cda2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	220d      	movs	r2, #13
 800cd9e:	701a      	strb	r2, [r3, #0]
      break;
 800cda0:	e0c9      	b.n	800cf36 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	795b      	ldrb	r3, [r3, #5]
 800cda6:	4619      	mov	r1, r3
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f001 f83d 	bl	800de28 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	791b      	ldrb	r3, [r3, #4]
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f001 f837 	bl	800de28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	701a      	strb	r2, [r3, #0]
      break;
 800cdc6:	e0b6      	b.n	800cf36 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d036      	beq.n	800ce40 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cdde:	23ff      	movs	r3, #255	; 0xff
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 f9e5 	bl	800d1b0 <USBH_Get_StringDesc>
 800cde6:	4603      	mov	r3, r0
 800cde8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cdea:	7bbb      	ldrb	r3, [r7, #14]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d111      	bne.n	800ce14 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2206      	movs	r2, #6
 800cdf4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2205      	movs	r2, #5
 800cdfa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f001 f9fb 	bl	800e208 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ce12:	e092      	b.n	800cf3a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce14:	7bbb      	ldrb	r3, [r7, #14]
 800ce16:	2b03      	cmp	r3, #3
 800ce18:	f040 808f 	bne.w	800cf3a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2206      	movs	r2, #6
 800ce20:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2205      	movs	r2, #5
 800ce26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce36:	2300      	movs	r3, #0
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f001 f9e5 	bl	800e208 <osMessageQueuePut>
      break;
 800ce3e:	e07c      	b.n	800cf3a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2206      	movs	r2, #6
 800ce44:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2205      	movs	r2, #5
 800ce4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f001 f9d3 	bl	800e208 <osMessageQueuePut>
      break;
 800ce62:	e06a      	b.n	800cf3a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d027      	beq.n	800cebe <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ce7a:	23ff      	movs	r3, #255	; 0xff
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 f997 	bl	800d1b0 <USBH_Get_StringDesc>
 800ce82:	4603      	mov	r3, r0
 800ce84:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ce86:	7bbb      	ldrb	r3, [r7, #14]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d103      	bne.n	800ce94 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2207      	movs	r2, #7
 800ce90:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ce92:	e054      	b.n	800cf3e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce94:	7bbb      	ldrb	r3, [r7, #14]
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d151      	bne.n	800cf3e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2207      	movs	r2, #7
 800ce9e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2205      	movs	r2, #5
 800cea4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f001 f9a6 	bl	800e208 <osMessageQueuePut>
      break;
 800cebc:	e03f      	b.n	800cf3e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2207      	movs	r2, #7
 800cec2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2205      	movs	r2, #5
 800cec8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ced8:	2300      	movs	r3, #0
 800ceda:	2200      	movs	r2, #0
 800cedc:	f001 f994 	bl	800e208 <osMessageQueuePut>
      break;
 800cee0:	e02d      	b.n	800cf3e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d017      	beq.n	800cf1c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cef8:	23ff      	movs	r3, #255	; 0xff
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 f958 	bl	800d1b0 <USBH_Get_StringDesc>
 800cf00:	4603      	mov	r3, r0
 800cf02:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cf04:	7bbb      	ldrb	r3, [r7, #14]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d102      	bne.n	800cf10 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cf0e:	e018      	b.n	800cf42 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf10:	7bbb      	ldrb	r3, [r7, #14]
 800cf12:	2b03      	cmp	r3, #3
 800cf14:	d115      	bne.n	800cf42 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800cf16:	2300      	movs	r3, #0
 800cf18:	73fb      	strb	r3, [r7, #15]
      break;
 800cf1a:	e012      	b.n	800cf42 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf20:	e00f      	b.n	800cf42 <USBH_HandleEnum+0x44a>

    default:
      break;
 800cf22:	bf00      	nop
 800cf24:	e00e      	b.n	800cf44 <USBH_HandleEnum+0x44c>
      break;
 800cf26:	bf00      	nop
 800cf28:	e00c      	b.n	800cf44 <USBH_HandleEnum+0x44c>
      break;
 800cf2a:	bf00      	nop
 800cf2c:	e00a      	b.n	800cf44 <USBH_HandleEnum+0x44c>
      break;
 800cf2e:	bf00      	nop
 800cf30:	e008      	b.n	800cf44 <USBH_HandleEnum+0x44c>
      break;
 800cf32:	bf00      	nop
 800cf34:	e006      	b.n	800cf44 <USBH_HandleEnum+0x44c>
      break;
 800cf36:	bf00      	nop
 800cf38:	e004      	b.n	800cf44 <USBH_HandleEnum+0x44c>
      break;
 800cf3a:	bf00      	nop
 800cf3c:	e002      	b.n	800cf44 <USBH_HandleEnum+0x44c>
      break;
 800cf3e:	bf00      	nop
 800cf40:	e000      	b.n	800cf44 <USBH_HandleEnum+0x44c>
      break;
 800cf42:	bf00      	nop
  }
  return Status;
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop

0800cf50 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800cf62:	bf00      	nop
 800cf64:	370c      	adds	r7, #12
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr

0800cf6e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b082      	sub	sp, #8
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf7c:	1c5a      	adds	r2, r3, #1
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 f804 	bl	800cf92 <USBH_HandleSof>
}
 800cf8a:	bf00      	nop
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b082      	sub	sp, #8
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	2b0b      	cmp	r3, #11
 800cfa2:	d10a      	bne.n	800cfba <USBH_HandleSof+0x28>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d005      	beq.n	800cfba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfb4:	699b      	ldr	r3, [r3, #24]
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	4798      	blx	r3
  }
}
 800cfba:	bf00      	nop
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f001 f90d 	bl	800e208 <osMessageQueuePut>
#endif
#endif

  return;
 800cfee:	bf00      	nop
}
 800cff0:	3708      	adds	r7, #8
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}

0800cff6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cff6:	b480      	push	{r7}
 800cff8:	b083      	sub	sp, #12
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d006:	bf00      	nop
}
 800d008:	370c      	adds	r7, #12
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b082      	sub	sp, #8
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2201      	movs	r2, #1
 800d01e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d046:	2300      	movs	r3, #0
 800d048:	2200      	movs	r2, #0
 800d04a:	f001 f8dd 	bl	800e208 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f004 fae4 	bl	8011646 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	791b      	ldrb	r3, [r3, #4]
 800d082:	4619      	mov	r1, r3
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 fecf 	bl	800de28 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	795b      	ldrb	r3, [r3, #5]
 800d08e:	4619      	mov	r1, r3
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 fec9 	bl	800de28 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2201      	movs	r2, #1
 800d09a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f001 f8ab 	bl	800e208 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d0b2:	2300      	movs	r3, #0
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d0d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f001 f8f7 	bl	800e2c8 <osMessageQueueGet>
 800d0da:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1f0      	bne.n	800d0c4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7ff faa6 	bl	800c634 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d0e8:	e7ec      	b.n	800d0c4 <USBH_Process_OS+0x8>

0800d0ea <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b082      	sub	sp, #8
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d106:	2300      	movs	r3, #0
 800d108:	2200      	movs	r2, #0
 800d10a:	f001 f87d 	bl	800e208 <osMessageQueuePut>
#endif

  return USBH_OK;
 800d10e:	2300      	movs	r3, #0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b086      	sub	sp, #24
 800d11c:	af02      	add	r7, sp, #8
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	460b      	mov	r3, r1
 800d122:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d12a:	78fb      	ldrb	r3, [r7, #3]
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	4613      	mov	r3, r2
 800d132:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d136:	2100      	movs	r1, #0
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f864 	bl	800d206 <USBH_GetDescriptor>
 800d13e:	4603      	mov	r3, r0
 800d140:	73fb      	strb	r3, [r7, #15]
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10a      	bne.n	800d15e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d154:	78fa      	ldrb	r2, [r7, #3]
 800d156:	b292      	uxth	r2, r2
 800d158:	4619      	mov	r1, r3
 800d15a:	f000 f918 	bl	800d38e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af02      	add	r7, sp, #8
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	460b      	mov	r3, r1
 800d172:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	331c      	adds	r3, #28
 800d178:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d17a:	887b      	ldrh	r3, [r7, #2]
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d184:	2100      	movs	r1, #0
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 f83d 	bl	800d206 <USBH_GetDescriptor>
 800d18c:	4603      	mov	r3, r0
 800d18e:	72fb      	strb	r3, [r7, #11]
 800d190:	7afb      	ldrb	r3, [r7, #11]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d107      	bne.n	800d1a6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d19c:	887a      	ldrh	r2, [r7, #2]
 800d19e:	68f9      	ldr	r1, [r7, #12]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 f964 	bl	800d46e <USBH_ParseCfgDesc>
  }

  return status;
 800d1a6:	7afb      	ldrb	r3, [r7, #11]
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b088      	sub	sp, #32
 800d1b4:	af02      	add	r7, sp, #8
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	607a      	str	r2, [r7, #4]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	460b      	mov	r3, r1
 800d1be:	72fb      	strb	r3, [r7, #11]
 800d1c0:	4613      	mov	r3, r2
 800d1c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d1c4:	7afb      	ldrb	r3, [r7, #11]
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d1cc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d1d4:	893b      	ldrh	r3, [r7, #8]
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	460b      	mov	r3, r1
 800d1da:	2100      	movs	r1, #0
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f000 f812 	bl	800d206 <USBH_GetDescriptor>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	75fb      	strb	r3, [r7, #23]
 800d1e6:	7dfb      	ldrb	r3, [r7, #23]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d107      	bne.n	800d1fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d1f2:	893a      	ldrh	r2, [r7, #8]
 800d1f4:	6879      	ldr	r1, [r7, #4]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f000 fa37 	bl	800d66a <USBH_ParseStringDesc>
  }

  return status;
 800d1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3718      	adds	r7, #24
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}

0800d206 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d206:	b580      	push	{r7, lr}
 800d208:	b084      	sub	sp, #16
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	60f8      	str	r0, [r7, #12]
 800d20e:	607b      	str	r3, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	72fb      	strb	r3, [r7, #11]
 800d214:	4613      	mov	r3, r2
 800d216:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	789b      	ldrb	r3, [r3, #2]
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d11c      	bne.n	800d25a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d220:	7afb      	ldrb	r3, [r7, #11]
 800d222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d226:	b2da      	uxtb	r2, r3
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2206      	movs	r2, #6
 800d230:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	893a      	ldrh	r2, [r7, #8]
 800d236:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d238:	893b      	ldrh	r3, [r7, #8]
 800d23a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d23e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d242:	d104      	bne.n	800d24e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f240 4209 	movw	r2, #1033	; 0x409
 800d24a:	829a      	strh	r2, [r3, #20]
 800d24c:	e002      	b.n	800d254 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2200      	movs	r2, #0
 800d252:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	8b3a      	ldrh	r2, [r7, #24]
 800d258:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d25a:	8b3b      	ldrh	r3, [r7, #24]
 800d25c:	461a      	mov	r2, r3
 800d25e:	6879      	ldr	r1, [r7, #4]
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f000 fa50 	bl	800d706 <USBH_CtlReq>
 800d266:	4603      	mov	r3, r0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	460b      	mov	r3, r1
 800d27a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	789b      	ldrb	r3, [r3, #2]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d10f      	bne.n	800d2a4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2200      	movs	r2, #0
 800d288:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2205      	movs	r2, #5
 800d28e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d290:	78fb      	ldrb	r3, [r7, #3]
 800d292:	b29a      	uxth	r2, r3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	2100      	movs	r1, #0
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 fa2c 	bl	800d706 <USBH_CtlReq>
 800d2ae:	4603      	mov	r3, r0
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	789b      	ldrb	r3, [r3, #2]
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d10e      	bne.n	800d2ea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2209      	movs	r2, #9
 800d2d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	887a      	ldrh	r2, [r7, #2]
 800d2dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 fa09 	bl	800d706 <USBH_CtlReq>
 800d2f4:	4603      	mov	r3, r0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3708      	adds	r7, #8
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b082      	sub	sp, #8
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	460b      	mov	r3, r1
 800d308:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	789b      	ldrb	r3, [r3, #2]
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d10f      	bne.n	800d332 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2203      	movs	r2, #3
 800d31c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d31e:	78fb      	ldrb	r3, [r7, #3]
 800d320:	b29a      	uxth	r2, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d332:	2200      	movs	r2, #0
 800d334:	2100      	movs	r1, #0
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 f9e5 	bl	800d706 <USBH_CtlReq>
 800d33c:	4603      	mov	r3, r0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b082      	sub	sp, #8
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
 800d34e:	460b      	mov	r3, r1
 800d350:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	789b      	ldrb	r3, [r3, #2]
 800d356:	2b01      	cmp	r3, #1
 800d358:	d10f      	bne.n	800d37a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2202      	movs	r2, #2
 800d35e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2201      	movs	r2, #1
 800d364:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d36c:	78fb      	ldrb	r3, [r7, #3]
 800d36e:	b29a      	uxth	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d37a:	2200      	movs	r2, #0
 800d37c:	2100      	movs	r1, #0
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f9c1 	bl	800d706 <USBH_CtlReq>
 800d384:	4603      	mov	r3, r0
}
 800d386:	4618      	mov	r0, r3
 800d388:	3708      	adds	r7, #8
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d38e:	b480      	push	{r7}
 800d390:	b085      	sub	sp, #20
 800d392:	af00      	add	r7, sp, #0
 800d394:	60f8      	str	r0, [r7, #12]
 800d396:	60b9      	str	r1, [r7, #8]
 800d398:	4613      	mov	r3, r2
 800d39a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	781a      	ldrb	r2, [r3, #0]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	785a      	ldrb	r2, [r3, #1]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	3302      	adds	r3, #2
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	3303      	adds	r3, #3
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	021b      	lsls	r3, r3, #8
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	791a      	ldrb	r2, [r3, #4]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	795a      	ldrb	r2, [r3, #5]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	799a      	ldrb	r2, [r3, #6]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	79da      	ldrb	r2, [r3, #7]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d3e8:	88fb      	ldrh	r3, [r7, #6]
 800d3ea:	2b08      	cmp	r3, #8
 800d3ec:	d939      	bls.n	800d462 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	3308      	adds	r3, #8
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	3309      	adds	r3, #9
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	021b      	lsls	r3, r3, #8
 800d400:	b29b      	uxth	r3, r3
 800d402:	4313      	orrs	r3, r2
 800d404:	b29a      	uxth	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	330a      	adds	r3, #10
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	b29a      	uxth	r2, r3
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	330b      	adds	r3, #11
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	b29b      	uxth	r3, r3
 800d41a:	021b      	lsls	r3, r3, #8
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	4313      	orrs	r3, r2
 800d420:	b29a      	uxth	r2, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	330c      	adds	r3, #12
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	330d      	adds	r3, #13
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	b29b      	uxth	r3, r3
 800d436:	021b      	lsls	r3, r3, #8
 800d438:	b29b      	uxth	r3, r3
 800d43a:	4313      	orrs	r3, r2
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	7b9a      	ldrb	r2, [r3, #14]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	7bda      	ldrb	r2, [r3, #15]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	7c1a      	ldrb	r2, [r3, #16]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	7c5a      	ldrb	r2, [r3, #17]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	745a      	strb	r2, [r3, #17]
  }
}
 800d462:	bf00      	nop
 800d464:	3714      	adds	r7, #20
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr

0800d46e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b08a      	sub	sp, #40	; 0x28
 800d472:	af00      	add	r7, sp, #0
 800d474:	60f8      	str	r0, [r7, #12]
 800d476:	60b9      	str	r1, [r7, #8]
 800d478:	4613      	mov	r3, r2
 800d47a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d480:	2300      	movs	r3, #0
 800d482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d486:	2300      	movs	r3, #0
 800d488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	781a      	ldrb	r2, [r3, #0]
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	785a      	ldrb	r2, [r3, #1]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	3302      	adds	r3, #2
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	3303      	adds	r3, #3
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	021b      	lsls	r3, r3, #8
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	791a      	ldrb	r2, [r3, #4]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	795a      	ldrb	r2, [r3, #5]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	799a      	ldrb	r2, [r3, #6]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	79da      	ldrb	r2, [r3, #7]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	7a1a      	ldrb	r2, [r3, #8]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d4e4:	88fb      	ldrh	r3, [r7, #6]
 800d4e6:	2b09      	cmp	r3, #9
 800d4e8:	d95f      	bls.n	800d5aa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d4ea:	2309      	movs	r3, #9
 800d4ec:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d4f2:	e051      	b.n	800d598 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d4f4:	f107 0316 	add.w	r3, r7, #22
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4fc:	f000 f8e8 	bl	800d6d0 <USBH_GetNextDesc>
 800d500:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d504:	785b      	ldrb	r3, [r3, #1]
 800d506:	2b04      	cmp	r3, #4
 800d508:	d146      	bne.n	800d598 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d50a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d50e:	221a      	movs	r2, #26
 800d510:	fb02 f303 	mul.w	r3, r2, r3
 800d514:	3308      	adds	r3, #8
 800d516:	68fa      	ldr	r2, [r7, #12]
 800d518:	4413      	add	r3, r2
 800d51a:	3302      	adds	r3, #2
 800d51c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d51e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d520:	69f8      	ldr	r0, [r7, #28]
 800d522:	f000 f846 	bl	800d5b2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d526:	2300      	movs	r3, #0
 800d528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d52c:	2300      	movs	r3, #0
 800d52e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d530:	e022      	b.n	800d578 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d532:	f107 0316 	add.w	r3, r7, #22
 800d536:	4619      	mov	r1, r3
 800d538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d53a:	f000 f8c9 	bl	800d6d0 <USBH_GetNextDesc>
 800d53e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d542:	785b      	ldrb	r3, [r3, #1]
 800d544:	2b05      	cmp	r3, #5
 800d546:	d117      	bne.n	800d578 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d54c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d550:	3201      	adds	r2, #1
 800d552:	00d2      	lsls	r2, r2, #3
 800d554:	211a      	movs	r1, #26
 800d556:	fb01 f303 	mul.w	r3, r1, r3
 800d55a:	4413      	add	r3, r2
 800d55c:	3308      	adds	r3, #8
 800d55e:	68fa      	ldr	r2, [r7, #12]
 800d560:	4413      	add	r3, r2
 800d562:	3304      	adds	r3, #4
 800d564:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d568:	69b8      	ldr	r0, [r7, #24]
 800d56a:	f000 f851 	bl	800d610 <USBH_ParseEPDesc>
            ep_ix++;
 800d56e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d572:	3301      	adds	r3, #1
 800d574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	791b      	ldrb	r3, [r3, #4]
 800d57c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d580:	429a      	cmp	r2, r3
 800d582:	d204      	bcs.n	800d58e <USBH_ParseCfgDesc+0x120>
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	885a      	ldrh	r2, [r3, #2]
 800d588:	8afb      	ldrh	r3, [r7, #22]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d8d1      	bhi.n	800d532 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d58e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d592:	3301      	adds	r3, #1
 800d594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d598:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d804      	bhi.n	800d5aa <USBH_ParseCfgDesc+0x13c>
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	885a      	ldrh	r2, [r3, #2]
 800d5a4:	8afb      	ldrh	r3, [r7, #22]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d8a4      	bhi.n	800d4f4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d5aa:	bf00      	nop
 800d5ac:	3728      	adds	r7, #40	; 0x28
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d5b2:	b480      	push	{r7}
 800d5b4:	b083      	sub	sp, #12
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	781a      	ldrb	r2, [r3, #0]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	785a      	ldrb	r2, [r3, #1]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	789a      	ldrb	r2, [r3, #2]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	78da      	ldrb	r2, [r3, #3]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	791a      	ldrb	r2, [r3, #4]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	795a      	ldrb	r2, [r3, #5]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	799a      	ldrb	r2, [r3, #6]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	79da      	ldrb	r2, [r3, #7]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	7a1a      	ldrb	r2, [r3, #8]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	721a      	strb	r2, [r3, #8]
}
 800d604:	bf00      	nop
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	781a      	ldrb	r2, [r3, #0]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	785a      	ldrb	r2, [r3, #1]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	789a      	ldrb	r2, [r3, #2]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	78da      	ldrb	r2, [r3, #3]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	3304      	adds	r3, #4
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	b29a      	uxth	r2, r3
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	3305      	adds	r3, #5
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	b29b      	uxth	r3, r3
 800d64a:	021b      	lsls	r3, r3, #8
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	4313      	orrs	r3, r2
 800d650:	b29a      	uxth	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	799a      	ldrb	r2, [r3, #6]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	719a      	strb	r2, [r3, #6]
}
 800d65e:	bf00      	nop
 800d660:	370c      	adds	r7, #12
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr

0800d66a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d66a:	b480      	push	{r7}
 800d66c:	b087      	sub	sp, #28
 800d66e:	af00      	add	r7, sp, #0
 800d670:	60f8      	str	r0, [r7, #12]
 800d672:	60b9      	str	r1, [r7, #8]
 800d674:	4613      	mov	r3, r2
 800d676:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	3301      	adds	r3, #1
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	2b03      	cmp	r3, #3
 800d680:	d120      	bne.n	800d6c4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	1e9a      	subs	r2, r3, #2
 800d688:	88fb      	ldrh	r3, [r7, #6]
 800d68a:	4293      	cmp	r3, r2
 800d68c:	bf28      	it	cs
 800d68e:	4613      	movcs	r3, r2
 800d690:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	3302      	adds	r3, #2
 800d696:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d698:	2300      	movs	r3, #0
 800d69a:	82fb      	strh	r3, [r7, #22]
 800d69c:	e00b      	b.n	800d6b6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d69e:	8afb      	ldrh	r3, [r7, #22]
 800d6a0:	68fa      	ldr	r2, [r7, #12]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	781a      	ldrb	r2, [r3, #0]
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d6b0:	8afb      	ldrh	r3, [r7, #22]
 800d6b2:	3302      	adds	r3, #2
 800d6b4:	82fb      	strh	r3, [r7, #22]
 800d6b6:	8afa      	ldrh	r2, [r7, #22]
 800d6b8:	8abb      	ldrh	r3, [r7, #20]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d3ef      	bcc.n	800d69e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	701a      	strb	r2, [r3, #0]
  }
}
 800d6c4:	bf00      	nop
 800d6c6:	371c      	adds	r7, #28
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	881a      	ldrh	r2, [r3, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	4413      	add	r3, r2
 800d6e6:	b29a      	uxth	r2, r3
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3714      	adds	r7, #20
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr

0800d706 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b086      	sub	sp, #24
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	60f8      	str	r0, [r7, #12]
 800d70e:	60b9      	str	r1, [r7, #8]
 800d710:	4613      	mov	r3, r2
 800d712:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d714:	2301      	movs	r3, #1
 800d716:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	789b      	ldrb	r3, [r3, #2]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d002      	beq.n	800d726 <USBH_CtlReq+0x20>
 800d720:	2b02      	cmp	r3, #2
 800d722:	d01d      	beq.n	800d760 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d724:	e043      	b.n	800d7ae <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	68ba      	ldr	r2, [r7, #8]
 800d72a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	88fa      	ldrh	r2, [r7, #6]
 800d730:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2201      	movs	r2, #1
 800d736:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2202      	movs	r2, #2
 800d73c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d73e:	2301      	movs	r3, #1
 800d740:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2203      	movs	r2, #3
 800d746:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d756:	2300      	movs	r3, #0
 800d758:	2200      	movs	r2, #0
 800d75a:	f000 fd55 	bl	800e208 <osMessageQueuePut>
      break;
 800d75e:	e026      	b.n	800d7ae <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f000 f829 	bl	800d7b8 <USBH_HandleControl>
 800d766:	4603      	mov	r3, r0
 800d768:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d76a:	7dfb      	ldrb	r3, [r7, #23]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d002      	beq.n	800d776 <USBH_CtlReq+0x70>
 800d770:	7dfb      	ldrb	r3, [r7, #23]
 800d772:	2b03      	cmp	r3, #3
 800d774:	d106      	bne.n	800d784 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2201      	movs	r2, #1
 800d77a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2200      	movs	r2, #0
 800d780:	761a      	strb	r2, [r3, #24]
 800d782:	e005      	b.n	800d790 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800d784:	7dfb      	ldrb	r3, [r7, #23]
 800d786:	2b02      	cmp	r3, #2
 800d788:	d102      	bne.n	800d790 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2201      	movs	r2, #1
 800d78e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2203      	movs	r2, #3
 800d794:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f000 fd2e 	bl	800e208 <osMessageQueuePut>
      break;
 800d7ac:	bf00      	nop
  }
  return status;
 800d7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3718      	adds	r7, #24
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b086      	sub	sp, #24
 800d7bc:	af02      	add	r7, sp, #8
 800d7be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	7e1b      	ldrb	r3, [r3, #24]
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	2b0a      	cmp	r3, #10
 800d7d0:	f200 8229 	bhi.w	800dc26 <USBH_HandleControl+0x46e>
 800d7d4:	a201      	add	r2, pc, #4	; (adr r2, 800d7dc <USBH_HandleControl+0x24>)
 800d7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7da:	bf00      	nop
 800d7dc:	0800d809 	.word	0x0800d809
 800d7e0:	0800d823 	.word	0x0800d823
 800d7e4:	0800d8c5 	.word	0x0800d8c5
 800d7e8:	0800d8eb 	.word	0x0800d8eb
 800d7ec:	0800d977 	.word	0x0800d977
 800d7f0:	0800d9a1 	.word	0x0800d9a1
 800d7f4:	0800da63 	.word	0x0800da63
 800d7f8:	0800da85 	.word	0x0800da85
 800d7fc:	0800db17 	.word	0x0800db17
 800d800:	0800db3d 	.word	0x0800db3d
 800d804:	0800dbcf 	.word	0x0800dbcf
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f103 0110 	add.w	r1, r3, #16
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	795b      	ldrb	r3, [r3, #5]
 800d812:	461a      	mov	r2, r3
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 fa17 	bl	800dc48 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2202      	movs	r2, #2
 800d81e:	761a      	strb	r2, [r3, #24]
      break;
 800d820:	e20c      	b.n	800dc3c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	795b      	ldrb	r3, [r3, #5]
 800d826:	4619      	mov	r1, r3
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f003 fffb 	bl	8011824 <USBH_LL_GetURBState>
 800d82e:	4603      	mov	r3, r0
 800d830:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d832:	7bbb      	ldrb	r3, [r7, #14]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d12c      	bne.n	800d892 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	7c1b      	ldrb	r3, [r3, #16]
 800d83c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d840:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	8adb      	ldrh	r3, [r3, #22]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00a      	beq.n	800d860 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d84a:	7b7b      	ldrb	r3, [r7, #13]
 800d84c:	2b80      	cmp	r3, #128	; 0x80
 800d84e:	d103      	bne.n	800d858 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2203      	movs	r2, #3
 800d854:	761a      	strb	r2, [r3, #24]
 800d856:	e00d      	b.n	800d874 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2205      	movs	r2, #5
 800d85c:	761a      	strb	r2, [r3, #24]
 800d85e:	e009      	b.n	800d874 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800d860:	7b7b      	ldrb	r3, [r7, #13]
 800d862:	2b80      	cmp	r3, #128	; 0x80
 800d864:	d103      	bne.n	800d86e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2209      	movs	r2, #9
 800d86a:	761a      	strb	r2, [r3, #24]
 800d86c:	e002      	b.n	800d874 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2207      	movs	r2, #7
 800d872:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2203      	movs	r2, #3
 800d878:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d888:	2300      	movs	r3, #0
 800d88a:	2200      	movs	r2, #0
 800d88c:	f000 fcbc 	bl	800e208 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d890:	e1cb      	b.n	800dc2a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d892:	7bbb      	ldrb	r3, [r7, #14]
 800d894:	2b04      	cmp	r3, #4
 800d896:	d003      	beq.n	800d8a0 <USBH_HandleControl+0xe8>
 800d898:	7bbb      	ldrb	r3, [r7, #14]
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	f040 81c5 	bne.w	800dc2a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	220b      	movs	r2, #11
 800d8a4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2203      	movs	r2, #3
 800d8aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f000 fca3 	bl	800e208 <osMessageQueuePut>
      break;
 800d8c2:	e1b2      	b.n	800dc2a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6899      	ldr	r1, [r3, #8]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	899a      	ldrh	r2, [r3, #12]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	791b      	ldrb	r3, [r3, #4]
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 f9f2 	bl	800dcc6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2204      	movs	r2, #4
 800d8e6:	761a      	strb	r2, [r3, #24]
      break;
 800d8e8:	e1a8      	b.n	800dc3c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	791b      	ldrb	r3, [r3, #4]
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f003 ff97 	bl	8011824 <USBH_LL_GetURBState>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d8fa:	7bbb      	ldrb	r3, [r7, #14]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d110      	bne.n	800d922 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2209      	movs	r2, #9
 800d904:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2203      	movs	r2, #3
 800d90a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d91a:	2300      	movs	r3, #0
 800d91c:	2200      	movs	r2, #0
 800d91e:	f000 fc73 	bl	800e208 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d922:	7bbb      	ldrb	r3, [r7, #14]
 800d924:	2b05      	cmp	r3, #5
 800d926:	d110      	bne.n	800d94a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d928:	2303      	movs	r3, #3
 800d92a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2203      	movs	r2, #3
 800d930:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d940:	2300      	movs	r3, #0
 800d942:	2200      	movs	r2, #0
 800d944:	f000 fc60 	bl	800e208 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d948:	e171      	b.n	800dc2e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800d94a:	7bbb      	ldrb	r3, [r7, #14]
 800d94c:	2b04      	cmp	r3, #4
 800d94e:	f040 816e 	bne.w	800dc2e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	220b      	movs	r2, #11
 800d956:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2203      	movs	r2, #3
 800d95c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d96c:	2300      	movs	r3, #0
 800d96e:	2200      	movs	r2, #0
 800d970:	f000 fc4a 	bl	800e208 <osMessageQueuePut>
      break;
 800d974:	e15b      	b.n	800dc2e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6899      	ldr	r1, [r3, #8]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	899a      	ldrh	r2, [r3, #12]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	795b      	ldrb	r3, [r3, #5]
 800d982:	2001      	movs	r0, #1
 800d984:	9000      	str	r0, [sp, #0]
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 f978 	bl	800dc7c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d992:	b29a      	uxth	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2206      	movs	r2, #6
 800d99c:	761a      	strb	r2, [r3, #24]
      break;
 800d99e:	e14d      	b.n	800dc3c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	795b      	ldrb	r3, [r3, #5]
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f003 ff3c 	bl	8011824 <USBH_LL_GetURBState>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d9b0:	7bbb      	ldrb	r3, [r7, #14]
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d111      	bne.n	800d9da <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2207      	movs	r2, #7
 800d9ba:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2203      	movs	r2, #3
 800d9c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f000 fc18 	bl	800e208 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d9d8:	e12b      	b.n	800dc32 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800d9da:	7bbb      	ldrb	r3, [r7, #14]
 800d9dc:	2b05      	cmp	r3, #5
 800d9de:	d113      	bne.n	800da08 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	220c      	movs	r2, #12
 800d9e4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d9e6:	2303      	movs	r3, #3
 800d9e8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2203      	movs	r2, #3
 800d9ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d9fe:	2300      	movs	r3, #0
 800da00:	2200      	movs	r2, #0
 800da02:	f000 fc01 	bl	800e208 <osMessageQueuePut>
      break;
 800da06:	e114      	b.n	800dc32 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800da08:	7bbb      	ldrb	r3, [r7, #14]
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d111      	bne.n	800da32 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2205      	movs	r2, #5
 800da12:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2203      	movs	r2, #3
 800da18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da28:	2300      	movs	r3, #0
 800da2a:	2200      	movs	r2, #0
 800da2c:	f000 fbec 	bl	800e208 <osMessageQueuePut>
      break;
 800da30:	e0ff      	b.n	800dc32 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800da32:	7bbb      	ldrb	r3, [r7, #14]
 800da34:	2b04      	cmp	r3, #4
 800da36:	f040 80fc 	bne.w	800dc32 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	220b      	movs	r2, #11
 800da3e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800da40:	2302      	movs	r3, #2
 800da42:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2203      	movs	r2, #3
 800da48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da58:	2300      	movs	r3, #0
 800da5a:	2200      	movs	r2, #0
 800da5c:	f000 fbd4 	bl	800e208 <osMessageQueuePut>
      break;
 800da60:	e0e7      	b.n	800dc32 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	791b      	ldrb	r3, [r3, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	2100      	movs	r1, #0
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f92b 	bl	800dcc6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800da76:	b29a      	uxth	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2208      	movs	r2, #8
 800da80:	761a      	strb	r2, [r3, #24]

      break;
 800da82:	e0db      	b.n	800dc3c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	791b      	ldrb	r3, [r3, #4]
 800da88:	4619      	mov	r1, r3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f003 feca 	bl	8011824 <USBH_LL_GetURBState>
 800da90:	4603      	mov	r3, r0
 800da92:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800da94:	7bbb      	ldrb	r3, [r7, #14]
 800da96:	2b01      	cmp	r3, #1
 800da98:	d113      	bne.n	800dac2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	220d      	movs	r2, #13
 800da9e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800daa0:	2300      	movs	r3, #0
 800daa2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2203      	movs	r2, #3
 800daa8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dab8:	2300      	movs	r3, #0
 800daba:	2200      	movs	r2, #0
 800dabc:	f000 fba4 	bl	800e208 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dac0:	e0b9      	b.n	800dc36 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800dac2:	7bbb      	ldrb	r3, [r7, #14]
 800dac4:	2b04      	cmp	r3, #4
 800dac6:	d111      	bne.n	800daec <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	220b      	movs	r2, #11
 800dacc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2203      	movs	r2, #3
 800dad2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dae2:	2300      	movs	r3, #0
 800dae4:	2200      	movs	r2, #0
 800dae6:	f000 fb8f 	bl	800e208 <osMessageQueuePut>
      break;
 800daea:	e0a4      	b.n	800dc36 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800daec:	7bbb      	ldrb	r3, [r7, #14]
 800daee:	2b05      	cmp	r3, #5
 800daf0:	f040 80a1 	bne.w	800dc36 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800daf4:	2303      	movs	r3, #3
 800daf6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2203      	movs	r2, #3
 800dafc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db0c:	2300      	movs	r3, #0
 800db0e:	2200      	movs	r2, #0
 800db10:	f000 fb7a 	bl	800e208 <osMessageQueuePut>
      break;
 800db14:	e08f      	b.n	800dc36 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	795b      	ldrb	r3, [r3, #5]
 800db1a:	2201      	movs	r2, #1
 800db1c:	9200      	str	r2, [sp, #0]
 800db1e:	2200      	movs	r2, #0
 800db20:	2100      	movs	r1, #0
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 f8aa 	bl	800dc7c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db2e:	b29a      	uxth	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	220a      	movs	r2, #10
 800db38:	761a      	strb	r2, [r3, #24]
      break;
 800db3a:	e07f      	b.n	800dc3c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	795b      	ldrb	r3, [r3, #5]
 800db40:	4619      	mov	r1, r3
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f003 fe6e 	bl	8011824 <USBH_LL_GetURBState>
 800db48:	4603      	mov	r3, r0
 800db4a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800db4c:	7bbb      	ldrb	r3, [r7, #14]
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d113      	bne.n	800db7a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800db52:	2300      	movs	r3, #0
 800db54:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	220d      	movs	r2, #13
 800db5a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2203      	movs	r2, #3
 800db60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db70:	2300      	movs	r3, #0
 800db72:	2200      	movs	r2, #0
 800db74:	f000 fb48 	bl	800e208 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800db78:	e05f      	b.n	800dc3a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800db7a:	7bbb      	ldrb	r3, [r7, #14]
 800db7c:	2b02      	cmp	r3, #2
 800db7e:	d111      	bne.n	800dba4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2209      	movs	r2, #9
 800db84:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2203      	movs	r2, #3
 800db8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db9a:	2300      	movs	r3, #0
 800db9c:	2200      	movs	r2, #0
 800db9e:	f000 fb33 	bl	800e208 <osMessageQueuePut>
      break;
 800dba2:	e04a      	b.n	800dc3a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800dba4:	7bbb      	ldrb	r3, [r7, #14]
 800dba6:	2b04      	cmp	r3, #4
 800dba8:	d147      	bne.n	800dc3a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	220b      	movs	r2, #11
 800dbae:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2203      	movs	r2, #3
 800dbb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f000 fb1e 	bl	800e208 <osMessageQueuePut>
      break;
 800dbcc:	e035      	b.n	800dc3a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	7e5b      	ldrb	r3, [r3, #25]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	765a      	strb	r2, [r3, #25]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	7e5b      	ldrb	r3, [r3, #25]
 800dbde:	2b02      	cmp	r3, #2
 800dbe0:	d806      	bhi.n	800dbf0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800dbee:	e025      	b.n	800dc3c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dbf6:	2106      	movs	r1, #6
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	795b      	ldrb	r3, [r3, #5]
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 f90d 	bl	800de28 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	791b      	ldrb	r3, [r3, #4]
 800dc12:	4619      	mov	r1, r3
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 f907 	bl	800de28 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800dc20:	2302      	movs	r3, #2
 800dc22:	73fb      	strb	r3, [r7, #15]
      break;
 800dc24:	e00a      	b.n	800dc3c <USBH_HandleControl+0x484>

    default:
      break;
 800dc26:	bf00      	nop
 800dc28:	e008      	b.n	800dc3c <USBH_HandleControl+0x484>
      break;
 800dc2a:	bf00      	nop
 800dc2c:	e006      	b.n	800dc3c <USBH_HandleControl+0x484>
      break;
 800dc2e:	bf00      	nop
 800dc30:	e004      	b.n	800dc3c <USBH_HandleControl+0x484>
      break;
 800dc32:	bf00      	nop
 800dc34:	e002      	b.n	800dc3c <USBH_HandleControl+0x484>
      break;
 800dc36:	bf00      	nop
 800dc38:	e000      	b.n	800dc3c <USBH_HandleControl+0x484>
      break;
 800dc3a:	bf00      	nop
  }

  return status;
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop

0800dc48 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b088      	sub	sp, #32
 800dc4c:	af04      	add	r7, sp, #16
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	4613      	mov	r3, r2
 800dc54:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dc56:	79f9      	ldrb	r1, [r7, #7]
 800dc58:	2300      	movs	r3, #0
 800dc5a:	9303      	str	r3, [sp, #12]
 800dc5c:	2308      	movs	r3, #8
 800dc5e:	9302      	str	r3, [sp, #8]
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	9301      	str	r3, [sp, #4]
 800dc64:	2300      	movs	r3, #0
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	2300      	movs	r3, #0
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f003 fda8 	bl	80117c2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b088      	sub	sp, #32
 800dc80:	af04      	add	r7, sp, #16
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	4611      	mov	r1, r2
 800dc88:	461a      	mov	r2, r3
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	80fb      	strh	r3, [r7, #6]
 800dc8e:	4613      	mov	r3, r2
 800dc90:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d001      	beq.n	800dca0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dca0:	7979      	ldrb	r1, [r7, #5]
 800dca2:	7e3b      	ldrb	r3, [r7, #24]
 800dca4:	9303      	str	r3, [sp, #12]
 800dca6:	88fb      	ldrh	r3, [r7, #6]
 800dca8:	9302      	str	r3, [sp, #8]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	9301      	str	r3, [sp, #4]
 800dcae:	2301      	movs	r3, #1
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	68f8      	ldr	r0, [r7, #12]
 800dcb8:	f003 fd83 	bl	80117c2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b088      	sub	sp, #32
 800dcca:	af04      	add	r7, sp, #16
 800dccc:	60f8      	str	r0, [r7, #12]
 800dcce:	60b9      	str	r1, [r7, #8]
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	80fb      	strh	r3, [r7, #6]
 800dcd8:	4613      	mov	r3, r2
 800dcda:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dcdc:	7979      	ldrb	r1, [r7, #5]
 800dcde:	2300      	movs	r3, #0
 800dce0:	9303      	str	r3, [sp, #12]
 800dce2:	88fb      	ldrh	r3, [r7, #6]
 800dce4:	9302      	str	r3, [sp, #8]
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	2301      	movs	r3, #1
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	2300      	movs	r3, #0
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f003 fd65 	bl	80117c2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dcf8:	2300      	movs	r3, #0

}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b088      	sub	sp, #32
 800dd06:	af04      	add	r7, sp, #16
 800dd08:	60f8      	str	r0, [r7, #12]
 800dd0a:	60b9      	str	r1, [r7, #8]
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	461a      	mov	r2, r3
 800dd10:	460b      	mov	r3, r1
 800dd12:	80fb      	strh	r3, [r7, #6]
 800dd14:	4613      	mov	r3, r2
 800dd16:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d001      	beq.n	800dd26 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dd22:	2300      	movs	r3, #0
 800dd24:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dd26:	7979      	ldrb	r1, [r7, #5]
 800dd28:	7e3b      	ldrb	r3, [r7, #24]
 800dd2a:	9303      	str	r3, [sp, #12]
 800dd2c:	88fb      	ldrh	r3, [r7, #6]
 800dd2e:	9302      	str	r3, [sp, #8]
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	9301      	str	r3, [sp, #4]
 800dd34:	2301      	movs	r3, #1
 800dd36:	9300      	str	r3, [sp, #0]
 800dd38:	2302      	movs	r3, #2
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f003 fd40 	bl	80117c2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dd42:	2300      	movs	r3, #0
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3710      	adds	r7, #16
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b088      	sub	sp, #32
 800dd50:	af04      	add	r7, sp, #16
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	4611      	mov	r1, r2
 800dd58:	461a      	mov	r2, r3
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	80fb      	strh	r3, [r7, #6]
 800dd5e:	4613      	mov	r3, r2
 800dd60:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dd62:	7979      	ldrb	r1, [r7, #5]
 800dd64:	2300      	movs	r3, #0
 800dd66:	9303      	str	r3, [sp, #12]
 800dd68:	88fb      	ldrh	r3, [r7, #6]
 800dd6a:	9302      	str	r3, [sp, #8]
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	9301      	str	r3, [sp, #4]
 800dd70:	2301      	movs	r3, #1
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	2302      	movs	r3, #2
 800dd76:	2201      	movs	r2, #1
 800dd78:	68f8      	ldr	r0, [r7, #12]
 800dd7a:	f003 fd22 	bl	80117c2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af04      	add	r7, sp, #16
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	4608      	mov	r0, r1
 800dd92:	4611      	mov	r1, r2
 800dd94:	461a      	mov	r2, r3
 800dd96:	4603      	mov	r3, r0
 800dd98:	70fb      	strb	r3, [r7, #3]
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	70bb      	strb	r3, [r7, #2]
 800dd9e:	4613      	mov	r3, r2
 800dda0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800dda2:	7878      	ldrb	r0, [r7, #1]
 800dda4:	78ba      	ldrb	r2, [r7, #2]
 800dda6:	78f9      	ldrb	r1, [r7, #3]
 800dda8:	8b3b      	ldrh	r3, [r7, #24]
 800ddaa:	9302      	str	r3, [sp, #8]
 800ddac:	7d3b      	ldrb	r3, [r7, #20]
 800ddae:	9301      	str	r3, [sp, #4]
 800ddb0:	7c3b      	ldrb	r3, [r7, #16]
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f003 fcb5 	bl	8011726 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ddbc:	2300      	movs	r3, #0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b082      	sub	sp, #8
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
 800ddce:	460b      	mov	r3, r1
 800ddd0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ddd2:	78fb      	ldrb	r3, [r7, #3]
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f003 fcd4 	bl	8011784 <USBH_LL_ClosePipe>

  return USBH_OK;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3708      	adds	r7, #8
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b084      	sub	sp, #16
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
 800ddee:	460b      	mov	r3, r1
 800ddf0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f836 	bl	800de64 <USBH_GetFreePipe>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ddfc:	89fb      	ldrh	r3, [r7, #14]
 800ddfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de02:	4293      	cmp	r3, r2
 800de04:	d00a      	beq.n	800de1c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800de06:	78fa      	ldrb	r2, [r7, #3]
 800de08:	89fb      	ldrh	r3, [r7, #14]
 800de0a:	f003 030f 	and.w	r3, r3, #15
 800de0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de12:	6879      	ldr	r1, [r7, #4]
 800de14:	33e0      	adds	r3, #224	; 0xe0
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	440b      	add	r3, r1
 800de1a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800de1c:	89fb      	ldrh	r3, [r7, #14]
 800de1e:	b2db      	uxtb	r3, r3
}
 800de20:	4618      	mov	r0, r3
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	460b      	mov	r3, r1
 800de32:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800de34:	78fb      	ldrb	r3, [r7, #3]
 800de36:	2b0a      	cmp	r3, #10
 800de38:	d80d      	bhi.n	800de56 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800de3a:	78fb      	ldrb	r3, [r7, #3]
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	33e0      	adds	r3, #224	; 0xe0
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	4413      	add	r3, r2
 800de44:	685a      	ldr	r2, [r3, #4]
 800de46:	78fb      	ldrb	r3, [r7, #3]
 800de48:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800de4c:	6879      	ldr	r1, [r7, #4]
 800de4e:	33e0      	adds	r3, #224	; 0xe0
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	440b      	add	r3, r1
 800de54:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	370c      	adds	r7, #12
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800de6c:	2300      	movs	r3, #0
 800de6e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800de70:	2300      	movs	r3, #0
 800de72:	73fb      	strb	r3, [r7, #15]
 800de74:	e00f      	b.n	800de96 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800de76:	7bfb      	ldrb	r3, [r7, #15]
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	33e0      	adds	r3, #224	; 0xe0
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	4413      	add	r3, r2
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de86:	2b00      	cmp	r3, #0
 800de88:	d102      	bne.n	800de90 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800de8a:	7bfb      	ldrb	r3, [r7, #15]
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	e007      	b.n	800dea0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800de90:	7bfb      	ldrb	r3, [r7, #15]
 800de92:	3301      	adds	r3, #1
 800de94:	73fb      	strb	r3, [r7, #15]
 800de96:	7bfb      	ldrb	r3, [r7, #15]
 800de98:	2b0a      	cmp	r3, #10
 800de9a:	d9ec      	bls.n	800de76 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800de9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <__NVIC_SetPriority>:
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	4603      	mov	r3, r0
 800deb4:	6039      	str	r1, [r7, #0]
 800deb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800deb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800debc:	2b00      	cmp	r3, #0
 800debe:	db0a      	blt.n	800ded6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	b2da      	uxtb	r2, r3
 800dec4:	490c      	ldr	r1, [pc, #48]	; (800def8 <__NVIC_SetPriority+0x4c>)
 800dec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800deca:	0112      	lsls	r2, r2, #4
 800decc:	b2d2      	uxtb	r2, r2
 800dece:	440b      	add	r3, r1
 800ded0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ded4:	e00a      	b.n	800deec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	4908      	ldr	r1, [pc, #32]	; (800defc <__NVIC_SetPriority+0x50>)
 800dedc:	79fb      	ldrb	r3, [r7, #7]
 800dede:	f003 030f 	and.w	r3, r3, #15
 800dee2:	3b04      	subs	r3, #4
 800dee4:	0112      	lsls	r2, r2, #4
 800dee6:	b2d2      	uxtb	r2, r2
 800dee8:	440b      	add	r3, r1
 800deea:	761a      	strb	r2, [r3, #24]
}
 800deec:	bf00      	nop
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr
 800def8:	e000e100 	.word	0xe000e100
 800defc:	e000ed00 	.word	0xe000ed00

0800df00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800df00:	b580      	push	{r7, lr}
 800df02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800df04:	4b05      	ldr	r3, [pc, #20]	; (800df1c <SysTick_Handler+0x1c>)
 800df06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800df08:	f001 ff56 	bl	800fdb8 <xTaskGetSchedulerState>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d001      	beq.n	800df16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800df12:	f002 ffb9 	bl	8010e88 <xPortSysTickHandler>
  }
}
 800df16:	bf00      	nop
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	e000e010 	.word	0xe000e010

0800df20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800df20:	b580      	push	{r7, lr}
 800df22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800df24:	2100      	movs	r1, #0
 800df26:	f06f 0004 	mvn.w	r0, #4
 800df2a:	f7ff ffbf 	bl	800deac <__NVIC_SetPriority>
#endif
}
 800df2e:	bf00      	nop
 800df30:	bd80      	pop	{r7, pc}
	...

0800df34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df3a:	f3ef 8305 	mrs	r3, IPSR
 800df3e:	603b      	str	r3, [r7, #0]
  return(result);
 800df40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df42:	2b00      	cmp	r3, #0
 800df44:	d003      	beq.n	800df4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800df46:	f06f 0305 	mvn.w	r3, #5
 800df4a:	607b      	str	r3, [r7, #4]
 800df4c:	e00c      	b.n	800df68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800df4e:	4b0a      	ldr	r3, [pc, #40]	; (800df78 <osKernelInitialize+0x44>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d105      	bne.n	800df62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800df56:	4b08      	ldr	r3, [pc, #32]	; (800df78 <osKernelInitialize+0x44>)
 800df58:	2201      	movs	r2, #1
 800df5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800df5c:	2300      	movs	r3, #0
 800df5e:	607b      	str	r3, [r7, #4]
 800df60:	e002      	b.n	800df68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800df62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800df68:	687b      	ldr	r3, [r7, #4]
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop
 800df78:	20000144 	.word	0x20000144

0800df7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df82:	f3ef 8305 	mrs	r3, IPSR
 800df86:	603b      	str	r3, [r7, #0]
  return(result);
 800df88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d003      	beq.n	800df96 <osKernelStart+0x1a>
    stat = osErrorISR;
 800df8e:	f06f 0305 	mvn.w	r3, #5
 800df92:	607b      	str	r3, [r7, #4]
 800df94:	e010      	b.n	800dfb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800df96:	4b0b      	ldr	r3, [pc, #44]	; (800dfc4 <osKernelStart+0x48>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d109      	bne.n	800dfb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800df9e:	f7ff ffbf 	bl	800df20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dfa2:	4b08      	ldr	r3, [pc, #32]	; (800dfc4 <osKernelStart+0x48>)
 800dfa4:	2202      	movs	r2, #2
 800dfa6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dfa8:	f001 faaa 	bl	800f500 <vTaskStartScheduler>
      stat = osOK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	607b      	str	r3, [r7, #4]
 800dfb0:	e002      	b.n	800dfb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dfb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dfb8:	687b      	ldr	r3, [r7, #4]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3708      	adds	r7, #8
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20000144 	.word	0x20000144

0800dfc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b08e      	sub	sp, #56	; 0x38
 800dfcc:	af04      	add	r7, sp, #16
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfd8:	f3ef 8305 	mrs	r3, IPSR
 800dfdc:	617b      	str	r3, [r7, #20]
  return(result);
 800dfde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d17e      	bne.n	800e0e2 <osThreadNew+0x11a>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d07b      	beq.n	800e0e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dfea:	2380      	movs	r3, #128	; 0x80
 800dfec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dfee:	2318      	movs	r3, #24
 800dff0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dff2:	2300      	movs	r3, #0
 800dff4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dffa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d045      	beq.n	800e08e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d002      	beq.n	800e010 <osThreadNew+0x48>
        name = attr->name;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	699b      	ldr	r3, [r3, #24]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	699b      	ldr	r3, [r3, #24]
 800e01c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d008      	beq.n	800e036 <osThreadNew+0x6e>
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	2b38      	cmp	r3, #56	; 0x38
 800e028:	d805      	bhi.n	800e036 <osThreadNew+0x6e>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	f003 0301 	and.w	r3, r3, #1
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <osThreadNew+0x72>
        return (NULL);
 800e036:	2300      	movs	r3, #0
 800e038:	e054      	b.n	800e0e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	695b      	ldr	r3, [r3, #20]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d003      	beq.n	800e04a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	695b      	ldr	r3, [r3, #20]
 800e046:	089b      	lsrs	r3, r3, #2
 800e048:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d00e      	beq.n	800e070 <osThreadNew+0xa8>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	2bbb      	cmp	r3, #187	; 0xbb
 800e058:	d90a      	bls.n	800e070 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d006      	beq.n	800e070 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	695b      	ldr	r3, [r3, #20]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d002      	beq.n	800e070 <osThreadNew+0xa8>
        mem = 1;
 800e06a:	2301      	movs	r3, #1
 800e06c:	61bb      	str	r3, [r7, #24]
 800e06e:	e010      	b.n	800e092 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d10c      	bne.n	800e092 <osThreadNew+0xca>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d108      	bne.n	800e092 <osThreadNew+0xca>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	691b      	ldr	r3, [r3, #16]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d104      	bne.n	800e092 <osThreadNew+0xca>
          mem = 0;
 800e088:	2300      	movs	r3, #0
 800e08a:	61bb      	str	r3, [r7, #24]
 800e08c:	e001      	b.n	800e092 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	2b01      	cmp	r3, #1
 800e096:	d110      	bne.n	800e0ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e0a0:	9202      	str	r2, [sp, #8]
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	6a3a      	ldr	r2, [r7, #32]
 800e0ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	f001 f83a 	bl	800f128 <xTaskCreateStatic>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	613b      	str	r3, [r7, #16]
 800e0b8:	e013      	b.n	800e0e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d110      	bne.n	800e0e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e0c0:	6a3b      	ldr	r3, [r7, #32]
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	f107 0310 	add.w	r3, r7, #16
 800e0c8:	9301      	str	r3, [sp, #4]
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	9300      	str	r3, [sp, #0]
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0d2:	68f8      	ldr	r0, [r7, #12]
 800e0d4:	f001 f885 	bl	800f1e2 <xTaskCreate>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d001      	beq.n	800e0e2 <osThreadNew+0x11a>
            hTask = NULL;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e0e2:	693b      	ldr	r3, [r7, #16]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3728      	adds	r7, #40	; 0x28
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0f4:	f3ef 8305 	mrs	r3, IPSR
 800e0f8:	60bb      	str	r3, [r7, #8]
  return(result);
 800e0fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d003      	beq.n	800e108 <osDelay+0x1c>
    stat = osErrorISR;
 800e100:	f06f 0305 	mvn.w	r3, #5
 800e104:	60fb      	str	r3, [r7, #12]
 800e106:	e007      	b.n	800e118 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e108:	2300      	movs	r3, #0
 800e10a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d002      	beq.n	800e118 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f001 f9c0 	bl	800f498 <vTaskDelay>
    }
  }

  return (stat);
 800e118:	68fb      	ldr	r3, [r7, #12]
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e122:	b580      	push	{r7, lr}
 800e124:	b08a      	sub	sp, #40	; 0x28
 800e126:	af02      	add	r7, sp, #8
 800e128:	60f8      	str	r0, [r7, #12]
 800e12a:	60b9      	str	r1, [r7, #8]
 800e12c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e12e:	2300      	movs	r3, #0
 800e130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e132:	f3ef 8305 	mrs	r3, IPSR
 800e136:	613b      	str	r3, [r7, #16]
  return(result);
 800e138:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d15f      	bne.n	800e1fe <osMessageQueueNew+0xdc>
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d05c      	beq.n	800e1fe <osMessageQueueNew+0xdc>
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d059      	beq.n	800e1fe <osMessageQueueNew+0xdc>
    mem = -1;
 800e14a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e14e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d029      	beq.n	800e1aa <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	689b      	ldr	r3, [r3, #8]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d012      	beq.n	800e184 <osMessageQueueNew+0x62>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	2b4f      	cmp	r3, #79	; 0x4f
 800e164:	d90e      	bls.n	800e184 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00a      	beq.n	800e184 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	695a      	ldr	r2, [r3, #20]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	68b9      	ldr	r1, [r7, #8]
 800e176:	fb01 f303 	mul.w	r3, r1, r3
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d302      	bcc.n	800e184 <osMessageQueueNew+0x62>
        mem = 1;
 800e17e:	2301      	movs	r3, #1
 800e180:	61bb      	str	r3, [r7, #24]
 800e182:	e014      	b.n	800e1ae <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d110      	bne.n	800e1ae <osMessageQueueNew+0x8c>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10c      	bne.n	800e1ae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d108      	bne.n	800e1ae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	695b      	ldr	r3, [r3, #20]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d104      	bne.n	800e1ae <osMessageQueueNew+0x8c>
          mem = 0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	61bb      	str	r3, [r7, #24]
 800e1a8:	e001      	b.n	800e1ae <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d10b      	bne.n	800e1cc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	691a      	ldr	r2, [r3, #16]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	689b      	ldr	r3, [r3, #8]
 800e1bc:	2100      	movs	r1, #0
 800e1be:	9100      	str	r1, [sp, #0]
 800e1c0:	68b9      	ldr	r1, [r7, #8]
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	f000 fa2e 	bl	800e624 <xQueueGenericCreateStatic>
 800e1c8:	61f8      	str	r0, [r7, #28]
 800e1ca:	e008      	b.n	800e1de <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d105      	bne.n	800e1de <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	68b9      	ldr	r1, [r7, #8]
 800e1d6:	68f8      	ldr	r0, [r7, #12]
 800e1d8:	f000 fa9c 	bl	800e714 <xQueueGenericCreate>
 800e1dc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00c      	beq.n	800e1fe <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d003      	beq.n	800e1f2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	617b      	str	r3, [r7, #20]
 800e1f0:	e001      	b.n	800e1f6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e1f6:	6979      	ldr	r1, [r7, #20]
 800e1f8:	69f8      	ldr	r0, [r7, #28]
 800e1fa:	f000 ff37 	bl	800f06c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e1fe:	69fb      	ldr	r3, [r7, #28]
}
 800e200:	4618      	mov	r0, r3
 800e202:	3720      	adds	r7, #32
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e208:	b580      	push	{r7, lr}
 800e20a:	b088      	sub	sp, #32
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	603b      	str	r3, [r7, #0]
 800e214:	4613      	mov	r3, r2
 800e216:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e21c:	2300      	movs	r3, #0
 800e21e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e220:	f3ef 8305 	mrs	r3, IPSR
 800e224:	617b      	str	r3, [r7, #20]
  return(result);
 800e226:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d028      	beq.n	800e27e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d005      	beq.n	800e23e <osMessageQueuePut+0x36>
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <osMessageQueuePut+0x36>
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d003      	beq.n	800e246 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e23e:	f06f 0303 	mvn.w	r3, #3
 800e242:	61fb      	str	r3, [r7, #28]
 800e244:	e038      	b.n	800e2b8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e246:	2300      	movs	r3, #0
 800e248:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e24a:	f107 0210 	add.w	r2, r7, #16
 800e24e:	2300      	movs	r3, #0
 800e250:	68b9      	ldr	r1, [r7, #8]
 800e252:	69b8      	ldr	r0, [r7, #24]
 800e254:	f000 fbba 	bl	800e9cc <xQueueGenericSendFromISR>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	d003      	beq.n	800e266 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e25e:	f06f 0302 	mvn.w	r3, #2
 800e262:	61fb      	str	r3, [r7, #28]
 800e264:	e028      	b.n	800e2b8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d025      	beq.n	800e2b8 <osMessageQueuePut+0xb0>
 800e26c:	4b15      	ldr	r3, [pc, #84]	; (800e2c4 <osMessageQueuePut+0xbc>)
 800e26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e272:	601a      	str	r2, [r3, #0]
 800e274:	f3bf 8f4f 	dsb	sy
 800e278:	f3bf 8f6f 	isb	sy
 800e27c:	e01c      	b.n	800e2b8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <osMessageQueuePut+0x82>
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d103      	bne.n	800e292 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e28a:	f06f 0303 	mvn.w	r3, #3
 800e28e:	61fb      	str	r3, [r7, #28]
 800e290:	e012      	b.n	800e2b8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e292:	2300      	movs	r3, #0
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	68b9      	ldr	r1, [r7, #8]
 800e298:	69b8      	ldr	r0, [r7, #24]
 800e29a:	f000 fa99 	bl	800e7d0 <xQueueGenericSend>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d009      	beq.n	800e2b8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d003      	beq.n	800e2b2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e2aa:	f06f 0301 	mvn.w	r3, #1
 800e2ae:	61fb      	str	r3, [r7, #28]
 800e2b0:	e002      	b.n	800e2b8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e2b2:	f06f 0302 	mvn.w	r3, #2
 800e2b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e2b8:	69fb      	ldr	r3, [r7, #28]
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3720      	adds	r7, #32
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	e000ed04 	.word	0xe000ed04

0800e2c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b088      	sub	sp, #32
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	607a      	str	r2, [r7, #4]
 800e2d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2de:	f3ef 8305 	mrs	r3, IPSR
 800e2e2:	617b      	str	r3, [r7, #20]
  return(result);
 800e2e4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d028      	beq.n	800e33c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d005      	beq.n	800e2fc <osMessageQueueGet+0x34>
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d002      	beq.n	800e2fc <osMessageQueueGet+0x34>
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d003      	beq.n	800e304 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e2fc:	f06f 0303 	mvn.w	r3, #3
 800e300:	61fb      	str	r3, [r7, #28]
 800e302:	e037      	b.n	800e374 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e304:	2300      	movs	r3, #0
 800e306:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e308:	f107 0310 	add.w	r3, r7, #16
 800e30c:	461a      	mov	r2, r3
 800e30e:	68b9      	ldr	r1, [r7, #8]
 800e310:	69b8      	ldr	r0, [r7, #24]
 800e312:	f000 fcd7 	bl	800ecc4 <xQueueReceiveFromISR>
 800e316:	4603      	mov	r3, r0
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d003      	beq.n	800e324 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e31c:	f06f 0302 	mvn.w	r3, #2
 800e320:	61fb      	str	r3, [r7, #28]
 800e322:	e027      	b.n	800e374 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d024      	beq.n	800e374 <osMessageQueueGet+0xac>
 800e32a:	4b15      	ldr	r3, [pc, #84]	; (800e380 <osMessageQueueGet+0xb8>)
 800e32c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e330:	601a      	str	r2, [r3, #0]
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	e01b      	b.n	800e374 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d002      	beq.n	800e348 <osMessageQueueGet+0x80>
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d103      	bne.n	800e350 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e348:	f06f 0303 	mvn.w	r3, #3
 800e34c:	61fb      	str	r3, [r7, #28]
 800e34e:	e011      	b.n	800e374 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e350:	683a      	ldr	r2, [r7, #0]
 800e352:	68b9      	ldr	r1, [r7, #8]
 800e354:	69b8      	ldr	r0, [r7, #24]
 800e356:	f000 fbd5 	bl	800eb04 <xQueueReceive>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d009      	beq.n	800e374 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d003      	beq.n	800e36e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e366:	f06f 0301 	mvn.w	r3, #1
 800e36a:	61fb      	str	r3, [r7, #28]
 800e36c:	e002      	b.n	800e374 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e36e:	f06f 0302 	mvn.w	r3, #2
 800e372:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e374:	69fb      	ldr	r3, [r7, #28]
}
 800e376:	4618      	mov	r0, r3
 800e378:	3720      	adds	r7, #32
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	e000ed04 	.word	0xe000ed04

0800e384 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	4a07      	ldr	r2, [pc, #28]	; (800e3b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800e394:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	4a06      	ldr	r2, [pc, #24]	; (800e3b4 <vApplicationGetIdleTaskMemory+0x30>)
 800e39a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2280      	movs	r2, #128	; 0x80
 800e3a0:	601a      	str	r2, [r3, #0]
}
 800e3a2:	bf00      	nop
 800e3a4:	3714      	adds	r7, #20
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	20000148 	.word	0x20000148
 800e3b4:	20000204 	.word	0x20000204

0800e3b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	4a07      	ldr	r2, [pc, #28]	; (800e3e4 <vApplicationGetTimerTaskMemory+0x2c>)
 800e3c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	4a06      	ldr	r2, [pc, #24]	; (800e3e8 <vApplicationGetTimerTaskMemory+0x30>)
 800e3ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3d6:	601a      	str	r2, [r3, #0]
}
 800e3d8:	bf00      	nop
 800e3da:	3714      	adds	r7, #20
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	20000404 	.word	0x20000404
 800e3e8:	200004c0 	.word	0x200004c0

0800e3ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f103 0208 	add.w	r2, r3, #8
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e404:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f103 0208 	add.w	r2, r3, #8
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f103 0208 	add.w	r2, r3, #8
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e43a:	bf00      	nop
 800e43c:	370c      	adds	r7, #12
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr

0800e446 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e446:	b480      	push	{r7}
 800e448:	b085      	sub	sp, #20
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
 800e44e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	689a      	ldr	r2, [r3, #8]
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	683a      	ldr	r2, [r7, #0]
 800e46a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	683a      	ldr	r2, [r7, #0]
 800e470:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	1c5a      	adds	r2, r3, #1
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	601a      	str	r2, [r3, #0]
}
 800e482:	bf00      	nop
 800e484:	3714      	adds	r7, #20
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr

0800e48e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e48e:	b480      	push	{r7}
 800e490:	b085      	sub	sp, #20
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
 800e496:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4a4:	d103      	bne.n	800e4ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	60fb      	str	r3, [r7, #12]
 800e4ac:	e00c      	b.n	800e4c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	3308      	adds	r3, #8
 800e4b2:	60fb      	str	r3, [r7, #12]
 800e4b4:	e002      	b.n	800e4bc <vListInsert+0x2e>
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	60fb      	str	r3, [r7, #12]
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	68ba      	ldr	r2, [r7, #8]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d2f6      	bcs.n	800e4b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	683a      	ldr	r2, [r7, #0]
 800e4d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	68fa      	ldr	r2, [r7, #12]
 800e4dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	683a      	ldr	r2, [r7, #0]
 800e4e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	1c5a      	adds	r2, r3, #1
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	601a      	str	r2, [r3, #0]
}
 800e4f4:	bf00      	nop
 800e4f6:	3714      	adds	r7, #20
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	691b      	ldr	r3, [r3, #16]
 800e50c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	6892      	ldr	r2, [r2, #8]
 800e516:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	689b      	ldr	r3, [r3, #8]
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	6852      	ldr	r2, [r2, #4]
 800e520:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d103      	bne.n	800e534 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	689a      	ldr	r2, [r3, #8]
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2200      	movs	r2, #0
 800e538:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	1e5a      	subs	r2, r3, #1
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3714      	adds	r7, #20
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d10a      	bne.n	800e57e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56c:	f383 8811 	msr	BASEPRI, r3
 800e570:	f3bf 8f6f 	isb	sy
 800e574:	f3bf 8f4f 	dsb	sy
 800e578:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e57a:	bf00      	nop
 800e57c:	e7fe      	b.n	800e57c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e57e:	f002 fbf1 	bl	8010d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e58a:	68f9      	ldr	r1, [r7, #12]
 800e58c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e58e:	fb01 f303 	mul.w	r3, r1, r3
 800e592:	441a      	add	r2, r3
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2200      	movs	r2, #0
 800e59c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ae:	3b01      	subs	r3, #1
 800e5b0:	68f9      	ldr	r1, [r7, #12]
 800e5b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e5b4:	fb01 f303 	mul.w	r3, r1, r3
 800e5b8:	441a      	add	r2, r3
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	22ff      	movs	r2, #255	; 0xff
 800e5c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	22ff      	movs	r2, #255	; 0xff
 800e5ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d114      	bne.n	800e5fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	691b      	ldr	r3, [r3, #16]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d01a      	beq.n	800e612 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	3310      	adds	r3, #16
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f001 fa27 	bl	800fa34 <xTaskRemoveFromEventList>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d012      	beq.n	800e612 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e5ec:	4b0c      	ldr	r3, [pc, #48]	; (800e620 <xQueueGenericReset+0xcc>)
 800e5ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5f2:	601a      	str	r2, [r3, #0]
 800e5f4:	f3bf 8f4f 	dsb	sy
 800e5f8:	f3bf 8f6f 	isb	sy
 800e5fc:	e009      	b.n	800e612 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	3310      	adds	r3, #16
 800e602:	4618      	mov	r0, r3
 800e604:	f7ff fef2 	bl	800e3ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	3324      	adds	r3, #36	; 0x24
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7ff feed 	bl	800e3ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e612:	f002 fbd7 	bl	8010dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e616:	2301      	movs	r3, #1
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3710      	adds	r7, #16
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	e000ed04 	.word	0xe000ed04

0800e624 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e624:	b580      	push	{r7, lr}
 800e626:	b08e      	sub	sp, #56	; 0x38
 800e628:	af02      	add	r7, sp, #8
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	60b9      	str	r1, [r7, #8]
 800e62e:	607a      	str	r2, [r7, #4]
 800e630:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10a      	bne.n	800e64e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63c:	f383 8811 	msr	BASEPRI, r3
 800e640:	f3bf 8f6f 	isb	sy
 800e644:	f3bf 8f4f 	dsb	sy
 800e648:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e64a:	bf00      	nop
 800e64c:	e7fe      	b.n	800e64c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d10a      	bne.n	800e66a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e666:	bf00      	nop
 800e668:	e7fe      	b.n	800e668 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d002      	beq.n	800e676 <xQueueGenericCreateStatic+0x52>
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d001      	beq.n	800e67a <xQueueGenericCreateStatic+0x56>
 800e676:	2301      	movs	r3, #1
 800e678:	e000      	b.n	800e67c <xQueueGenericCreateStatic+0x58>
 800e67a:	2300      	movs	r3, #0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d10a      	bne.n	800e696 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e684:	f383 8811 	msr	BASEPRI, r3
 800e688:	f3bf 8f6f 	isb	sy
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	623b      	str	r3, [r7, #32]
}
 800e692:	bf00      	nop
 800e694:	e7fe      	b.n	800e694 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d102      	bne.n	800e6a2 <xQueueGenericCreateStatic+0x7e>
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d101      	bne.n	800e6a6 <xQueueGenericCreateStatic+0x82>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e000      	b.n	800e6a8 <xQueueGenericCreateStatic+0x84>
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d10a      	bne.n	800e6c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b0:	f383 8811 	msr	BASEPRI, r3
 800e6b4:	f3bf 8f6f 	isb	sy
 800e6b8:	f3bf 8f4f 	dsb	sy
 800e6bc:	61fb      	str	r3, [r7, #28]
}
 800e6be:	bf00      	nop
 800e6c0:	e7fe      	b.n	800e6c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e6c2:	2350      	movs	r3, #80	; 0x50
 800e6c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	2b50      	cmp	r3, #80	; 0x50
 800e6ca:	d00a      	beq.n	800e6e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d0:	f383 8811 	msr	BASEPRI, r3
 800e6d4:	f3bf 8f6f 	isb	sy
 800e6d8:	f3bf 8f4f 	dsb	sy
 800e6dc:	61bb      	str	r3, [r7, #24]
}
 800e6de:	bf00      	nop
 800e6e0:	e7fe      	b.n	800e6e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e6e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00d      	beq.n	800e70a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e6f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	4613      	mov	r3, r2
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	68b9      	ldr	r1, [r7, #8]
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f000 f83f 	bl	800e788 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3730      	adds	r7, #48	; 0x30
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e714:	b580      	push	{r7, lr}
 800e716:	b08a      	sub	sp, #40	; 0x28
 800e718:	af02      	add	r7, sp, #8
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	4613      	mov	r3, r2
 800e720:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d10a      	bne.n	800e73e <xQueueGenericCreate+0x2a>
	__asm volatile
 800e728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72c:	f383 8811 	msr	BASEPRI, r3
 800e730:	f3bf 8f6f 	isb	sy
 800e734:	f3bf 8f4f 	dsb	sy
 800e738:	613b      	str	r3, [r7, #16]
}
 800e73a:	bf00      	nop
 800e73c:	e7fe      	b.n	800e73c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	68ba      	ldr	r2, [r7, #8]
 800e742:	fb02 f303 	mul.w	r3, r2, r3
 800e746:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	3350      	adds	r3, #80	; 0x50
 800e74c:	4618      	mov	r0, r3
 800e74e:	f002 fc2b 	bl	8010fa8 <pvPortMalloc>
 800e752:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d011      	beq.n	800e77e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	3350      	adds	r3, #80	; 0x50
 800e762:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	2200      	movs	r2, #0
 800e768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e76c:	79fa      	ldrb	r2, [r7, #7]
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	9300      	str	r3, [sp, #0]
 800e772:	4613      	mov	r3, r2
 800e774:	697a      	ldr	r2, [r7, #20]
 800e776:	68b9      	ldr	r1, [r7, #8]
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f000 f805 	bl	800e788 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e77e:	69bb      	ldr	r3, [r7, #24]
	}
 800e780:	4618      	mov	r0, r3
 800e782:	3720      	adds	r7, #32
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	607a      	str	r2, [r7, #4]
 800e794:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d103      	bne.n	800e7a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	69ba      	ldr	r2, [r7, #24]
 800e7a0:	601a      	str	r2, [r3, #0]
 800e7a2:	e002      	b.n	800e7aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e7b6:	2101      	movs	r1, #1
 800e7b8:	69b8      	ldr	r0, [r7, #24]
 800e7ba:	f7ff fecb 	bl	800e554 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	78fa      	ldrb	r2, [r7, #3]
 800e7c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e7c6:	bf00      	nop
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
	...

0800e7d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b08e      	sub	sp, #56	; 0x38
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
 800e7dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d10a      	bne.n	800e802 <xQueueGenericSend+0x32>
	__asm volatile
 800e7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f0:	f383 8811 	msr	BASEPRI, r3
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e7fe:	bf00      	nop
 800e800:	e7fe      	b.n	800e800 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d103      	bne.n	800e810 <xQueueGenericSend+0x40>
 800e808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d101      	bne.n	800e814 <xQueueGenericSend+0x44>
 800e810:	2301      	movs	r3, #1
 800e812:	e000      	b.n	800e816 <xQueueGenericSend+0x46>
 800e814:	2300      	movs	r3, #0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d10a      	bne.n	800e830 <xQueueGenericSend+0x60>
	__asm volatile
 800e81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e81e:	f383 8811 	msr	BASEPRI, r3
 800e822:	f3bf 8f6f 	isb	sy
 800e826:	f3bf 8f4f 	dsb	sy
 800e82a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e82c:	bf00      	nop
 800e82e:	e7fe      	b.n	800e82e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	2b02      	cmp	r3, #2
 800e834:	d103      	bne.n	800e83e <xQueueGenericSend+0x6e>
 800e836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d101      	bne.n	800e842 <xQueueGenericSend+0x72>
 800e83e:	2301      	movs	r3, #1
 800e840:	e000      	b.n	800e844 <xQueueGenericSend+0x74>
 800e842:	2300      	movs	r3, #0
 800e844:	2b00      	cmp	r3, #0
 800e846:	d10a      	bne.n	800e85e <xQueueGenericSend+0x8e>
	__asm volatile
 800e848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84c:	f383 8811 	msr	BASEPRI, r3
 800e850:	f3bf 8f6f 	isb	sy
 800e854:	f3bf 8f4f 	dsb	sy
 800e858:	623b      	str	r3, [r7, #32]
}
 800e85a:	bf00      	nop
 800e85c:	e7fe      	b.n	800e85c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e85e:	f001 faab 	bl	800fdb8 <xTaskGetSchedulerState>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d102      	bne.n	800e86e <xQueueGenericSend+0x9e>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d101      	bne.n	800e872 <xQueueGenericSend+0xa2>
 800e86e:	2301      	movs	r3, #1
 800e870:	e000      	b.n	800e874 <xQueueGenericSend+0xa4>
 800e872:	2300      	movs	r3, #0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d10a      	bne.n	800e88e <xQueueGenericSend+0xbe>
	__asm volatile
 800e878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	f3bf 8f6f 	isb	sy
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	61fb      	str	r3, [r7, #28]
}
 800e88a:	bf00      	nop
 800e88c:	e7fe      	b.n	800e88c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e88e:	f002 fa69 	bl	8010d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d302      	bcc.n	800e8a4 <xQueueGenericSend+0xd4>
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	2b02      	cmp	r3, #2
 800e8a2:	d129      	bne.n	800e8f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	68b9      	ldr	r1, [r7, #8]
 800e8a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8aa:	f000 faa9 	bl	800ee00 <prvCopyDataToQueue>
 800e8ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d010      	beq.n	800e8da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ba:	3324      	adds	r3, #36	; 0x24
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f001 f8b9 	bl	800fa34 <xTaskRemoveFromEventList>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d013      	beq.n	800e8f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e8c8:	4b3f      	ldr	r3, [pc, #252]	; (800e9c8 <xQueueGenericSend+0x1f8>)
 800e8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ce:	601a      	str	r2, [r3, #0]
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	f3bf 8f6f 	isb	sy
 800e8d8:	e00a      	b.n	800e8f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d007      	beq.n	800e8f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e8e0:	4b39      	ldr	r3, [pc, #228]	; (800e9c8 <xQueueGenericSend+0x1f8>)
 800e8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8e6:	601a      	str	r2, [r3, #0]
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e8f0:	f002 fa68 	bl	8010dc4 <vPortExitCritical>
				return pdPASS;
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	e063      	b.n	800e9c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d103      	bne.n	800e906 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e8fe:	f002 fa61 	bl	8010dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e902:	2300      	movs	r3, #0
 800e904:	e05c      	b.n	800e9c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d106      	bne.n	800e91a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e90c:	f107 0314 	add.w	r3, r7, #20
 800e910:	4618      	mov	r0, r3
 800e912:	f001 f8f3 	bl	800fafc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e916:	2301      	movs	r3, #1
 800e918:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e91a:	f002 fa53 	bl	8010dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e91e:	f000 fe5f 	bl	800f5e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e922:	f002 fa1f 	bl	8010d64 <vPortEnterCritical>
 800e926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e92c:	b25b      	sxtb	r3, r3
 800e92e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e932:	d103      	bne.n	800e93c <xQueueGenericSend+0x16c>
 800e934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e936:	2200      	movs	r2, #0
 800e938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e942:	b25b      	sxtb	r3, r3
 800e944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e948:	d103      	bne.n	800e952 <xQueueGenericSend+0x182>
 800e94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94c:	2200      	movs	r2, #0
 800e94e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e952:	f002 fa37 	bl	8010dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e956:	1d3a      	adds	r2, r7, #4
 800e958:	f107 0314 	add.w	r3, r7, #20
 800e95c:	4611      	mov	r1, r2
 800e95e:	4618      	mov	r0, r3
 800e960:	f001 f8e2 	bl	800fb28 <xTaskCheckForTimeOut>
 800e964:	4603      	mov	r3, r0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d124      	bne.n	800e9b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e96a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e96c:	f000 fb40 	bl	800eff0 <prvIsQueueFull>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	d018      	beq.n	800e9a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e978:	3310      	adds	r3, #16
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	4611      	mov	r1, r2
 800e97e:	4618      	mov	r0, r3
 800e980:	f001 f808 	bl	800f994 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e986:	f000 facb 	bl	800ef20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e98a:	f000 fe37 	bl	800f5fc <xTaskResumeAll>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	f47f af7c 	bne.w	800e88e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e996:	4b0c      	ldr	r3, [pc, #48]	; (800e9c8 <xQueueGenericSend+0x1f8>)
 800e998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e99c:	601a      	str	r2, [r3, #0]
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	e772      	b.n	800e88e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e9a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9aa:	f000 fab9 	bl	800ef20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9ae:	f000 fe25 	bl	800f5fc <xTaskResumeAll>
 800e9b2:	e76c      	b.n	800e88e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e9b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9b6:	f000 fab3 	bl	800ef20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9ba:	f000 fe1f 	bl	800f5fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e9be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3738      	adds	r7, #56	; 0x38
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	e000ed04 	.word	0xe000ed04

0800e9cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b090      	sub	sp, #64	; 0x40
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	607a      	str	r2, [r7, #4]
 800e9d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10a      	bne.n	800e9fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e8:	f383 8811 	msr	BASEPRI, r3
 800e9ec:	f3bf 8f6f 	isb	sy
 800e9f0:	f3bf 8f4f 	dsb	sy
 800e9f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e9f6:	bf00      	nop
 800e9f8:	e7fe      	b.n	800e9f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d103      	bne.n	800ea08 <xQueueGenericSendFromISR+0x3c>
 800ea00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d101      	bne.n	800ea0c <xQueueGenericSendFromISR+0x40>
 800ea08:	2301      	movs	r3, #1
 800ea0a:	e000      	b.n	800ea0e <xQueueGenericSendFromISR+0x42>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d10a      	bne.n	800ea28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ea12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea16:	f383 8811 	msr	BASEPRI, r3
 800ea1a:	f3bf 8f6f 	isb	sy
 800ea1e:	f3bf 8f4f 	dsb	sy
 800ea22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ea24:	bf00      	nop
 800ea26:	e7fe      	b.n	800ea26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	d103      	bne.n	800ea36 <xQueueGenericSendFromISR+0x6a>
 800ea2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d101      	bne.n	800ea3a <xQueueGenericSendFromISR+0x6e>
 800ea36:	2301      	movs	r3, #1
 800ea38:	e000      	b.n	800ea3c <xQueueGenericSendFromISR+0x70>
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d10a      	bne.n	800ea56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ea40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea44:	f383 8811 	msr	BASEPRI, r3
 800ea48:	f3bf 8f6f 	isb	sy
 800ea4c:	f3bf 8f4f 	dsb	sy
 800ea50:	623b      	str	r3, [r7, #32]
}
 800ea52:	bf00      	nop
 800ea54:	e7fe      	b.n	800ea54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea56:	f002 fa67 	bl	8010f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ea5a:	f3ef 8211 	mrs	r2, BASEPRI
 800ea5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea62:	f383 8811 	msr	BASEPRI, r3
 800ea66:	f3bf 8f6f 	isb	sy
 800ea6a:	f3bf 8f4f 	dsb	sy
 800ea6e:	61fa      	str	r2, [r7, #28]
 800ea70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ea72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d302      	bcc.n	800ea88 <xQueueGenericSendFromISR+0xbc>
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d12f      	bne.n	800eae8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ea88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea98:	683a      	ldr	r2, [r7, #0]
 800ea9a:	68b9      	ldr	r1, [r7, #8]
 800ea9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea9e:	f000 f9af 	bl	800ee00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eaa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800eaa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaaa:	d112      	bne.n	800ead2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d016      	beq.n	800eae2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab6:	3324      	adds	r3, #36	; 0x24
 800eab8:	4618      	mov	r0, r3
 800eaba:	f000 ffbb 	bl	800fa34 <xTaskRemoveFromEventList>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00e      	beq.n	800eae2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d00b      	beq.n	800eae2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2201      	movs	r2, #1
 800eace:	601a      	str	r2, [r3, #0]
 800ead0:	e007      	b.n	800eae2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ead2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ead6:	3301      	adds	r3, #1
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	b25a      	sxtb	r2, r3
 800eadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eae2:	2301      	movs	r3, #1
 800eae4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800eae6:	e001      	b.n	800eaec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eae8:	2300      	movs	r3, #0
 800eaea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eaec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eaf6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eaf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3740      	adds	r7, #64	; 0x40
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
	...

0800eb04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b08c      	sub	sp, #48	; 0x30
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eb10:	2300      	movs	r3, #0
 800eb12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d10a      	bne.n	800eb34 <xQueueReceive+0x30>
	__asm volatile
 800eb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb22:	f383 8811 	msr	BASEPRI, r3
 800eb26:	f3bf 8f6f 	isb	sy
 800eb2a:	f3bf 8f4f 	dsb	sy
 800eb2e:	623b      	str	r3, [r7, #32]
}
 800eb30:	bf00      	nop
 800eb32:	e7fe      	b.n	800eb32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d103      	bne.n	800eb42 <xQueueReceive+0x3e>
 800eb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d101      	bne.n	800eb46 <xQueueReceive+0x42>
 800eb42:	2301      	movs	r3, #1
 800eb44:	e000      	b.n	800eb48 <xQueueReceive+0x44>
 800eb46:	2300      	movs	r3, #0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d10a      	bne.n	800eb62 <xQueueReceive+0x5e>
	__asm volatile
 800eb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb50:	f383 8811 	msr	BASEPRI, r3
 800eb54:	f3bf 8f6f 	isb	sy
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	61fb      	str	r3, [r7, #28]
}
 800eb5e:	bf00      	nop
 800eb60:	e7fe      	b.n	800eb60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb62:	f001 f929 	bl	800fdb8 <xTaskGetSchedulerState>
 800eb66:	4603      	mov	r3, r0
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d102      	bne.n	800eb72 <xQueueReceive+0x6e>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d101      	bne.n	800eb76 <xQueueReceive+0x72>
 800eb72:	2301      	movs	r3, #1
 800eb74:	e000      	b.n	800eb78 <xQueueReceive+0x74>
 800eb76:	2300      	movs	r3, #0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d10a      	bne.n	800eb92 <xQueueReceive+0x8e>
	__asm volatile
 800eb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb80:	f383 8811 	msr	BASEPRI, r3
 800eb84:	f3bf 8f6f 	isb	sy
 800eb88:	f3bf 8f4f 	dsb	sy
 800eb8c:	61bb      	str	r3, [r7, #24]
}
 800eb8e:	bf00      	nop
 800eb90:	e7fe      	b.n	800eb90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb92:	f002 f8e7 	bl	8010d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d01f      	beq.n	800ebe2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eba2:	68b9      	ldr	r1, [r7, #8]
 800eba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eba6:	f000 f995 	bl	800eed4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ebaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebac:	1e5a      	subs	r2, r3, #1
 800ebae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00f      	beq.n	800ebda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbc:	3310      	adds	r3, #16
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f000 ff38 	bl	800fa34 <xTaskRemoveFromEventList>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d007      	beq.n	800ebda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ebca:	4b3d      	ldr	r3, [pc, #244]	; (800ecc0 <xQueueReceive+0x1bc>)
 800ebcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebd0:	601a      	str	r2, [r3, #0]
 800ebd2:	f3bf 8f4f 	dsb	sy
 800ebd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ebda:	f002 f8f3 	bl	8010dc4 <vPortExitCritical>
				return pdPASS;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e069      	b.n	800ecb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d103      	bne.n	800ebf0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ebe8:	f002 f8ec 	bl	8010dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ebec:	2300      	movs	r3, #0
 800ebee:	e062      	b.n	800ecb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ebf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d106      	bne.n	800ec04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebf6:	f107 0310 	add.w	r3, r7, #16
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f000 ff7e 	bl	800fafc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec00:	2301      	movs	r3, #1
 800ec02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec04:	f002 f8de 	bl	8010dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec08:	f000 fcea 	bl	800f5e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec0c:	f002 f8aa 	bl	8010d64 <vPortEnterCritical>
 800ec10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec16:	b25b      	sxtb	r3, r3
 800ec18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec1c:	d103      	bne.n	800ec26 <xQueueReceive+0x122>
 800ec1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec20:	2200      	movs	r2, #0
 800ec22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec2c:	b25b      	sxtb	r3, r3
 800ec2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec32:	d103      	bne.n	800ec3c <xQueueReceive+0x138>
 800ec34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec36:	2200      	movs	r2, #0
 800ec38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec3c:	f002 f8c2 	bl	8010dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec40:	1d3a      	adds	r2, r7, #4
 800ec42:	f107 0310 	add.w	r3, r7, #16
 800ec46:	4611      	mov	r1, r2
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f000 ff6d 	bl	800fb28 <xTaskCheckForTimeOut>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d123      	bne.n	800ec9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec56:	f000 f9b5 	bl	800efc4 <prvIsQueueEmpty>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d017      	beq.n	800ec90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec62:	3324      	adds	r3, #36	; 0x24
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	4611      	mov	r1, r2
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f000 fe93 	bl	800f994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec70:	f000 f956 	bl	800ef20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec74:	f000 fcc2 	bl	800f5fc <xTaskResumeAll>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d189      	bne.n	800eb92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ec7e:	4b10      	ldr	r3, [pc, #64]	; (800ecc0 <xQueueReceive+0x1bc>)
 800ec80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec84:	601a      	str	r2, [r3, #0]
 800ec86:	f3bf 8f4f 	dsb	sy
 800ec8a:	f3bf 8f6f 	isb	sy
 800ec8e:	e780      	b.n	800eb92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ec90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec92:	f000 f945 	bl	800ef20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec96:	f000 fcb1 	bl	800f5fc <xTaskResumeAll>
 800ec9a:	e77a      	b.n	800eb92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ec9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec9e:	f000 f93f 	bl	800ef20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eca2:	f000 fcab 	bl	800f5fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eca8:	f000 f98c 	bl	800efc4 <prvIsQueueEmpty>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	f43f af6f 	beq.w	800eb92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ecb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3730      	adds	r7, #48	; 0x30
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	e000ed04 	.word	0xe000ed04

0800ecc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b08e      	sub	sp, #56	; 0x38
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ecd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d10a      	bne.n	800ecf0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ecda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecde:	f383 8811 	msr	BASEPRI, r3
 800ece2:	f3bf 8f6f 	isb	sy
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	623b      	str	r3, [r7, #32]
}
 800ecec:	bf00      	nop
 800ecee:	e7fe      	b.n	800ecee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d103      	bne.n	800ecfe <xQueueReceiveFromISR+0x3a>
 800ecf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d101      	bne.n	800ed02 <xQueueReceiveFromISR+0x3e>
 800ecfe:	2301      	movs	r3, #1
 800ed00:	e000      	b.n	800ed04 <xQueueReceiveFromISR+0x40>
 800ed02:	2300      	movs	r3, #0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d10a      	bne.n	800ed1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ed08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0c:	f383 8811 	msr	BASEPRI, r3
 800ed10:	f3bf 8f6f 	isb	sy
 800ed14:	f3bf 8f4f 	dsb	sy
 800ed18:	61fb      	str	r3, [r7, #28]
}
 800ed1a:	bf00      	nop
 800ed1c:	e7fe      	b.n	800ed1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed1e:	f002 f903 	bl	8010f28 <vPortValidateInterruptPriority>
	__asm volatile
 800ed22:	f3ef 8211 	mrs	r2, BASEPRI
 800ed26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2a:	f383 8811 	msr	BASEPRI, r3
 800ed2e:	f3bf 8f6f 	isb	sy
 800ed32:	f3bf 8f4f 	dsb	sy
 800ed36:	61ba      	str	r2, [r7, #24]
 800ed38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ed3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d02f      	beq.n	800edaa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ed4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ed54:	68b9      	ldr	r1, [r7, #8]
 800ed56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed58:	f000 f8bc 	bl	800eed4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5e:	1e5a      	subs	r2, r3, #1
 800ed60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ed64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed6c:	d112      	bne.n	800ed94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed70:	691b      	ldr	r3, [r3, #16]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d016      	beq.n	800eda4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed78:	3310      	adds	r3, #16
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f000 fe5a 	bl	800fa34 <xTaskRemoveFromEventList>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d00e      	beq.n	800eda4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00b      	beq.n	800eda4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2201      	movs	r2, #1
 800ed90:	601a      	str	r2, [r3, #0]
 800ed92:	e007      	b.n	800eda4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ed94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed98:	3301      	adds	r3, #1
 800ed9a:	b2db      	uxtb	r3, r3
 800ed9c:	b25a      	sxtb	r2, r3
 800ed9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800eda4:	2301      	movs	r3, #1
 800eda6:	637b      	str	r3, [r7, #52]	; 0x34
 800eda8:	e001      	b.n	800edae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800edaa:	2300      	movs	r3, #0
 800edac:	637b      	str	r3, [r7, #52]	; 0x34
 800edae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	f383 8811 	msr	BASEPRI, r3
}
 800edb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800edba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3738      	adds	r7, #56	; 0x38
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d10a      	bne.n	800ede8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800edd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd6:	f383 8811 	msr	BASEPRI, r3
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	f3bf 8f4f 	dsb	sy
 800ede2:	60bb      	str	r3, [r7, #8]
}
 800ede4:	bf00      	nop
 800ede6:	e7fe      	b.n	800ede6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ede8:	f001 ffbc 	bl	8010d64 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800edf2:	f001 ffe7 	bl	8010dc4 <vPortExitCritical>

	return uxReturn;
 800edf6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800edf8:	4618      	mov	r0, r3
 800edfa:	3710      	adds	r7, #16
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b086      	sub	sp, #24
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d10d      	bne.n	800ee3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d14d      	bne.n	800eec2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f000 ffe2 	bl	800fdf4 <xTaskPriorityDisinherit>
 800ee30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2200      	movs	r2, #0
 800ee36:	609a      	str	r2, [r3, #8]
 800ee38:	e043      	b.n	800eec2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d119      	bne.n	800ee74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6858      	ldr	r0, [r3, #4]
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee48:	461a      	mov	r2, r3
 800ee4a:	68b9      	ldr	r1, [r7, #8]
 800ee4c:	f002 fdd4 	bl	80119f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	685a      	ldr	r2, [r3, #4]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee58:	441a      	add	r2, r3
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	685a      	ldr	r2, [r3, #4]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d32b      	bcc.n	800eec2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	605a      	str	r2, [r3, #4]
 800ee72:	e026      	b.n	800eec2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	68d8      	ldr	r0, [r3, #12]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	68b9      	ldr	r1, [r7, #8]
 800ee80:	f002 fdba 	bl	80119f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	68da      	ldr	r2, [r3, #12]
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee8c:	425b      	negs	r3, r3
 800ee8e:	441a      	add	r2, r3
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	68da      	ldr	r2, [r3, #12]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d207      	bcs.n	800eeb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	689a      	ldr	r2, [r3, #8]
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea8:	425b      	negs	r3, r3
 800eeaa:	441a      	add	r2, r3
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2b02      	cmp	r3, #2
 800eeb4:	d105      	bne.n	800eec2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d002      	beq.n	800eec2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	3b01      	subs	r3, #1
 800eec0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	1c5a      	adds	r2, r3, #1
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eeca:	697b      	ldr	r3, [r7, #20]
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3718      	adds	r7, #24
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d018      	beq.n	800ef18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	68da      	ldr	r2, [r3, #12]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeee:	441a      	add	r2, r3
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	68da      	ldr	r2, [r3, #12]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	689b      	ldr	r3, [r3, #8]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d303      	bcc.n	800ef08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	68d9      	ldr	r1, [r3, #12]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef10:	461a      	mov	r2, r3
 800ef12:	6838      	ldr	r0, [r7, #0]
 800ef14:	f002 fd70 	bl	80119f8 <memcpy>
	}
}
 800ef18:	bf00      	nop
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ef28:	f001 ff1c 	bl	8010d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef34:	e011      	b.n	800ef5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d012      	beq.n	800ef64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	3324      	adds	r3, #36	; 0x24
 800ef42:	4618      	mov	r0, r3
 800ef44:	f000 fd76 	bl	800fa34 <xTaskRemoveFromEventList>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ef4e:	f000 fe4d 	bl	800fbec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ef52:	7bfb      	ldrb	r3, [r7, #15]
 800ef54:	3b01      	subs	r3, #1
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	dce9      	bgt.n	800ef36 <prvUnlockQueue+0x16>
 800ef62:	e000      	b.n	800ef66 <prvUnlockQueue+0x46>
					break;
 800ef64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	22ff      	movs	r2, #255	; 0xff
 800ef6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ef6e:	f001 ff29 	bl	8010dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ef72:	f001 fef7 	bl	8010d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef7e:	e011      	b.n	800efa4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	691b      	ldr	r3, [r3, #16]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d012      	beq.n	800efae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	3310      	adds	r3, #16
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f000 fd51 	bl	800fa34 <xTaskRemoveFromEventList>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d001      	beq.n	800ef9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ef98:	f000 fe28 	bl	800fbec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ef9c:	7bbb      	ldrb	r3, [r7, #14]
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800efa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	dce9      	bgt.n	800ef80 <prvUnlockQueue+0x60>
 800efac:	e000      	b.n	800efb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800efae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	22ff      	movs	r2, #255	; 0xff
 800efb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800efb8:	f001 ff04 	bl	8010dc4 <vPortExitCritical>
}
 800efbc:	bf00      	nop
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b084      	sub	sp, #16
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800efcc:	f001 feca 	bl	8010d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d102      	bne.n	800efde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800efd8:	2301      	movs	r3, #1
 800efda:	60fb      	str	r3, [r7, #12]
 800efdc:	e001      	b.n	800efe2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800efde:	2300      	movs	r3, #0
 800efe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800efe2:	f001 feef 	bl	8010dc4 <vPortExitCritical>

	return xReturn;
 800efe6:	68fb      	ldr	r3, [r7, #12]
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3710      	adds	r7, #16
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eff8:	f001 feb4 	bl	8010d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f004:	429a      	cmp	r2, r3
 800f006:	d102      	bne.n	800f00e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f008:	2301      	movs	r3, #1
 800f00a:	60fb      	str	r3, [r7, #12]
 800f00c:	e001      	b.n	800f012 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f00e:	2300      	movs	r3, #0
 800f010:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f012:	f001 fed7 	bl	8010dc4 <vPortExitCritical>

	return xReturn;
 800f016:	68fb      	ldr	r3, [r7, #12]
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800f020:	b480      	push	{r7}
 800f022:	b087      	sub	sp, #28
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d10a      	bne.n	800f048 <xQueueIsQueueFullFromISR+0x28>
	__asm volatile
 800f032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f036:	f383 8811 	msr	BASEPRI, r3
 800f03a:	f3bf 8f6f 	isb	sy
 800f03e:	f3bf 8f4f 	dsb	sy
 800f042:	60fb      	str	r3, [r7, #12]
}
 800f044:	bf00      	nop
 800f046:	e7fe      	b.n	800f046 <xQueueIsQueueFullFromISR+0x26>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f050:	429a      	cmp	r2, r3
 800f052:	d102      	bne.n	800f05a <xQueueIsQueueFullFromISR+0x3a>
	{
		xReturn = pdTRUE;
 800f054:	2301      	movs	r3, #1
 800f056:	617b      	str	r3, [r7, #20]
 800f058:	e001      	b.n	800f05e <xQueueIsQueueFullFromISR+0x3e>
	}
	else
	{
		xReturn = pdFALSE;
 800f05a:	2300      	movs	r3, #0
 800f05c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f05e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f060:	4618      	mov	r0, r3
 800f062:	371c      	adds	r7, #28
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f06c:	b480      	push	{r7}
 800f06e:	b085      	sub	sp, #20
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f076:	2300      	movs	r3, #0
 800f078:	60fb      	str	r3, [r7, #12]
 800f07a:	e014      	b.n	800f0a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f07c:	4a0f      	ldr	r2, [pc, #60]	; (800f0bc <vQueueAddToRegistry+0x50>)
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d10b      	bne.n	800f0a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f088:	490c      	ldr	r1, [pc, #48]	; (800f0bc <vQueueAddToRegistry+0x50>)
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	683a      	ldr	r2, [r7, #0]
 800f08e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f092:	4a0a      	ldr	r2, [pc, #40]	; (800f0bc <vQueueAddToRegistry+0x50>)
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	00db      	lsls	r3, r3, #3
 800f098:	4413      	add	r3, r2
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f09e:	e006      	b.n	800f0ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	60fb      	str	r3, [r7, #12]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2b07      	cmp	r3, #7
 800f0aa:	d9e7      	bls.n	800f07c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f0ac:	bf00      	nop
 800f0ae:	bf00      	nop
 800f0b0:	3714      	adds	r7, #20
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop
 800f0bc:	20005008 	.word	0x20005008

0800f0c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b086      	sub	sp, #24
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f0d0:	f001 fe48 	bl	8010d64 <vPortEnterCritical>
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0da:	b25b      	sxtb	r3, r3
 800f0dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0e0:	d103      	bne.n	800f0ea <vQueueWaitForMessageRestricted+0x2a>
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0f0:	b25b      	sxtb	r3, r3
 800f0f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0f6:	d103      	bne.n	800f100 <vQueueWaitForMessageRestricted+0x40>
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f100:	f001 fe60 	bl	8010dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d106      	bne.n	800f11a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	3324      	adds	r3, #36	; 0x24
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	68b9      	ldr	r1, [r7, #8]
 800f114:	4618      	mov	r0, r3
 800f116:	f000 fc61 	bl	800f9dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f11a:	6978      	ldr	r0, [r7, #20]
 800f11c:	f7ff ff00 	bl	800ef20 <prvUnlockQueue>
	}
 800f120:	bf00      	nop
 800f122:	3718      	adds	r7, #24
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b08e      	sub	sp, #56	; 0x38
 800f12c:	af04      	add	r7, sp, #16
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
 800f134:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d10a      	bne.n	800f152 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f140:	f383 8811 	msr	BASEPRI, r3
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	623b      	str	r3, [r7, #32]
}
 800f14e:	bf00      	nop
 800f150:	e7fe      	b.n	800f150 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f154:	2b00      	cmp	r3, #0
 800f156:	d10a      	bne.n	800f16e <xTaskCreateStatic+0x46>
	__asm volatile
 800f158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15c:	f383 8811 	msr	BASEPRI, r3
 800f160:	f3bf 8f6f 	isb	sy
 800f164:	f3bf 8f4f 	dsb	sy
 800f168:	61fb      	str	r3, [r7, #28]
}
 800f16a:	bf00      	nop
 800f16c:	e7fe      	b.n	800f16c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f16e:	23bc      	movs	r3, #188	; 0xbc
 800f170:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	2bbc      	cmp	r3, #188	; 0xbc
 800f176:	d00a      	beq.n	800f18e <xTaskCreateStatic+0x66>
	__asm volatile
 800f178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17c:	f383 8811 	msr	BASEPRI, r3
 800f180:	f3bf 8f6f 	isb	sy
 800f184:	f3bf 8f4f 	dsb	sy
 800f188:	61bb      	str	r3, [r7, #24]
}
 800f18a:	bf00      	nop
 800f18c:	e7fe      	b.n	800f18c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f18e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f192:	2b00      	cmp	r3, #0
 800f194:	d01e      	beq.n	800f1d4 <xTaskCreateStatic+0xac>
 800f196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d01b      	beq.n	800f1d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a8:	2202      	movs	r2, #2
 800f1aa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	9303      	str	r3, [sp, #12]
 800f1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b4:	9302      	str	r3, [sp, #8]
 800f1b6:	f107 0314 	add.w	r3, r7, #20
 800f1ba:	9301      	str	r3, [sp, #4]
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1be:	9300      	str	r3, [sp, #0]
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	68b9      	ldr	r1, [r7, #8]
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	f000 f850 	bl	800f26c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f1cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1ce:	f000 f8f3 	bl	800f3b8 <prvAddNewTaskToReadyList>
 800f1d2:	e001      	b.n	800f1d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f1d8:	697b      	ldr	r3, [r7, #20]
	}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3728      	adds	r7, #40	; 0x28
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b08c      	sub	sp, #48	; 0x30
 800f1e6:	af04      	add	r7, sp, #16
 800f1e8:	60f8      	str	r0, [r7, #12]
 800f1ea:	60b9      	str	r1, [r7, #8]
 800f1ec:	603b      	str	r3, [r7, #0]
 800f1ee:	4613      	mov	r3, r2
 800f1f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f1f2:	88fb      	ldrh	r3, [r7, #6]
 800f1f4:	009b      	lsls	r3, r3, #2
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f001 fed6 	bl	8010fa8 <pvPortMalloc>
 800f1fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00e      	beq.n	800f222 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f204:	20bc      	movs	r0, #188	; 0xbc
 800f206:	f001 fecf 	bl	8010fa8 <pvPortMalloc>
 800f20a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d003      	beq.n	800f21a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f212:	69fb      	ldr	r3, [r7, #28]
 800f214:	697a      	ldr	r2, [r7, #20]
 800f216:	631a      	str	r2, [r3, #48]	; 0x30
 800f218:	e005      	b.n	800f226 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f21a:	6978      	ldr	r0, [r7, #20]
 800f21c:	f001 ff90 	bl	8011140 <vPortFree>
 800f220:	e001      	b.n	800f226 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f222:	2300      	movs	r3, #0
 800f224:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f226:	69fb      	ldr	r3, [r7, #28]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d017      	beq.n	800f25c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	2200      	movs	r2, #0
 800f230:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f234:	88fa      	ldrh	r2, [r7, #6]
 800f236:	2300      	movs	r3, #0
 800f238:	9303      	str	r3, [sp, #12]
 800f23a:	69fb      	ldr	r3, [r7, #28]
 800f23c:	9302      	str	r3, [sp, #8]
 800f23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f240:	9301      	str	r3, [sp, #4]
 800f242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f244:	9300      	str	r3, [sp, #0]
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	68b9      	ldr	r1, [r7, #8]
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	f000 f80e 	bl	800f26c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f250:	69f8      	ldr	r0, [r7, #28]
 800f252:	f000 f8b1 	bl	800f3b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f256:	2301      	movs	r3, #1
 800f258:	61bb      	str	r3, [r7, #24]
 800f25a:	e002      	b.n	800f262 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f25c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f260:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f262:	69bb      	ldr	r3, [r7, #24]
	}
 800f264:	4618      	mov	r0, r3
 800f266:	3720      	adds	r7, #32
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b088      	sub	sp, #32
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
 800f278:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	009b      	lsls	r3, r3, #2
 800f282:	461a      	mov	r2, r3
 800f284:	21a5      	movs	r1, #165	; 0xa5
 800f286:	f002 fbc5 	bl	8011a14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f294:	3b01      	subs	r3, #1
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	4413      	add	r3, r2
 800f29a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	f023 0307 	bic.w	r3, r3, #7
 800f2a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	f003 0307 	and.w	r3, r3, #7
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00a      	beq.n	800f2c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b2:	f383 8811 	msr	BASEPRI, r3
 800f2b6:	f3bf 8f6f 	isb	sy
 800f2ba:	f3bf 8f4f 	dsb	sy
 800f2be:	617b      	str	r3, [r7, #20]
}
 800f2c0:	bf00      	nop
 800f2c2:	e7fe      	b.n	800f2c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d01f      	beq.n	800f30a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	61fb      	str	r3, [r7, #28]
 800f2ce:	e012      	b.n	800f2f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f2d0:	68ba      	ldr	r2, [r7, #8]
 800f2d2:	69fb      	ldr	r3, [r7, #28]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	7819      	ldrb	r1, [r3, #0]
 800f2d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	4413      	add	r3, r2
 800f2de:	3334      	adds	r3, #52	; 0x34
 800f2e0:	460a      	mov	r2, r1
 800f2e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f2e4:	68ba      	ldr	r2, [r7, #8]
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d006      	beq.n	800f2fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f2f0:	69fb      	ldr	r3, [r7, #28]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	61fb      	str	r3, [r7, #28]
 800f2f6:	69fb      	ldr	r3, [r7, #28]
 800f2f8:	2b0f      	cmp	r3, #15
 800f2fa:	d9e9      	bls.n	800f2d0 <prvInitialiseNewTask+0x64>
 800f2fc:	e000      	b.n	800f300 <prvInitialiseNewTask+0x94>
			{
				break;
 800f2fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f302:	2200      	movs	r2, #0
 800f304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f308:	e003      	b.n	800f312 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30c:	2200      	movs	r2, #0
 800f30e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f314:	2b37      	cmp	r3, #55	; 0x37
 800f316:	d901      	bls.n	800f31c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f318:	2337      	movs	r3, #55	; 0x37
 800f31a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f320:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f326:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32a:	2200      	movs	r2, #0
 800f32c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f330:	3304      	adds	r3, #4
 800f332:	4618      	mov	r0, r3
 800f334:	f7ff f87a 	bl	800e42c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33a:	3318      	adds	r3, #24
 800f33c:	4618      	mov	r0, r3
 800f33e:	f7ff f875 	bl	800e42c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f346:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f350:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f356:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35a:	2200      	movs	r2, #0
 800f35c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f362:	2200      	movs	r2, #0
 800f364:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36a:	3354      	adds	r3, #84	; 0x54
 800f36c:	2260      	movs	r2, #96	; 0x60
 800f36e:	2100      	movs	r1, #0
 800f370:	4618      	mov	r0, r3
 800f372:	f002 fb4f 	bl	8011a14 <memset>
 800f376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f378:	4a0c      	ldr	r2, [pc, #48]	; (800f3ac <prvInitialiseNewTask+0x140>)
 800f37a:	659a      	str	r2, [r3, #88]	; 0x58
 800f37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37e:	4a0c      	ldr	r2, [pc, #48]	; (800f3b0 <prvInitialiseNewTask+0x144>)
 800f380:	65da      	str	r2, [r3, #92]	; 0x5c
 800f382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f384:	4a0b      	ldr	r2, [pc, #44]	; (800f3b4 <prvInitialiseNewTask+0x148>)
 800f386:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f388:	683a      	ldr	r2, [r7, #0]
 800f38a:	68f9      	ldr	r1, [r7, #12]
 800f38c:	69b8      	ldr	r0, [r7, #24]
 800f38e:	f001 fbbf 	bl	8010b10 <pxPortInitialiseStack>
 800f392:	4602      	mov	r2, r0
 800f394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f396:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d002      	beq.n	800f3a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3a4:	bf00      	nop
 800f3a6:	3720      	adds	r7, #32
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	08014f88 	.word	0x08014f88
 800f3b0:	08014fa8 	.word	0x08014fa8
 800f3b4:	08014f68 	.word	0x08014f68

0800f3b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f3c0:	f001 fcd0 	bl	8010d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f3c4:	4b2d      	ldr	r3, [pc, #180]	; (800f47c <prvAddNewTaskToReadyList+0xc4>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	4a2c      	ldr	r2, [pc, #176]	; (800f47c <prvAddNewTaskToReadyList+0xc4>)
 800f3cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f3ce:	4b2c      	ldr	r3, [pc, #176]	; (800f480 <prvAddNewTaskToReadyList+0xc8>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d109      	bne.n	800f3ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f3d6:	4a2a      	ldr	r2, [pc, #168]	; (800f480 <prvAddNewTaskToReadyList+0xc8>)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f3dc:	4b27      	ldr	r3, [pc, #156]	; (800f47c <prvAddNewTaskToReadyList+0xc4>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d110      	bne.n	800f406 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f3e4:	f000 fc26 	bl	800fc34 <prvInitialiseTaskLists>
 800f3e8:	e00d      	b.n	800f406 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f3ea:	4b26      	ldr	r3, [pc, #152]	; (800f484 <prvAddNewTaskToReadyList+0xcc>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d109      	bne.n	800f406 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f3f2:	4b23      	ldr	r3, [pc, #140]	; (800f480 <prvAddNewTaskToReadyList+0xc8>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d802      	bhi.n	800f406 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f400:	4a1f      	ldr	r2, [pc, #124]	; (800f480 <prvAddNewTaskToReadyList+0xc8>)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f406:	4b20      	ldr	r3, [pc, #128]	; (800f488 <prvAddNewTaskToReadyList+0xd0>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	3301      	adds	r3, #1
 800f40c:	4a1e      	ldr	r2, [pc, #120]	; (800f488 <prvAddNewTaskToReadyList+0xd0>)
 800f40e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f410:	4b1d      	ldr	r3, [pc, #116]	; (800f488 <prvAddNewTaskToReadyList+0xd0>)
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f41c:	4b1b      	ldr	r3, [pc, #108]	; (800f48c <prvAddNewTaskToReadyList+0xd4>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	429a      	cmp	r2, r3
 800f422:	d903      	bls.n	800f42c <prvAddNewTaskToReadyList+0x74>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f428:	4a18      	ldr	r2, [pc, #96]	; (800f48c <prvAddNewTaskToReadyList+0xd4>)
 800f42a:	6013      	str	r3, [r2, #0]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f430:	4613      	mov	r3, r2
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	4413      	add	r3, r2
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	4a15      	ldr	r2, [pc, #84]	; (800f490 <prvAddNewTaskToReadyList+0xd8>)
 800f43a:	441a      	add	r2, r3
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	3304      	adds	r3, #4
 800f440:	4619      	mov	r1, r3
 800f442:	4610      	mov	r0, r2
 800f444:	f7fe ffff 	bl	800e446 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f448:	f001 fcbc 	bl	8010dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f44c:	4b0d      	ldr	r3, [pc, #52]	; (800f484 <prvAddNewTaskToReadyList+0xcc>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d00e      	beq.n	800f472 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f454:	4b0a      	ldr	r3, [pc, #40]	; (800f480 <prvAddNewTaskToReadyList+0xc8>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f45e:	429a      	cmp	r2, r3
 800f460:	d207      	bcs.n	800f472 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f462:	4b0c      	ldr	r3, [pc, #48]	; (800f494 <prvAddNewTaskToReadyList+0xdc>)
 800f464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f468:	601a      	str	r2, [r3, #0]
 800f46a:	f3bf 8f4f 	dsb	sy
 800f46e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f472:	bf00      	nop
 800f474:	3708      	adds	r7, #8
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	20000d94 	.word	0x20000d94
 800f480:	200008c0 	.word	0x200008c0
 800f484:	20000da0 	.word	0x20000da0
 800f488:	20000db0 	.word	0x20000db0
 800f48c:	20000d9c 	.word	0x20000d9c
 800f490:	200008c4 	.word	0x200008c4
 800f494:	e000ed04 	.word	0xe000ed04

0800f498 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d017      	beq.n	800f4da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f4aa:	4b13      	ldr	r3, [pc, #76]	; (800f4f8 <vTaskDelay+0x60>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d00a      	beq.n	800f4c8 <vTaskDelay+0x30>
	__asm volatile
 800f4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b6:	f383 8811 	msr	BASEPRI, r3
 800f4ba:	f3bf 8f6f 	isb	sy
 800f4be:	f3bf 8f4f 	dsb	sy
 800f4c2:	60bb      	str	r3, [r7, #8]
}
 800f4c4:	bf00      	nop
 800f4c6:	e7fe      	b.n	800f4c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f4c8:	f000 f88a 	bl	800f5e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 ff00 	bl	80102d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f4d4:	f000 f892 	bl	800f5fc <xTaskResumeAll>
 800f4d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d107      	bne.n	800f4f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f4e0:	4b06      	ldr	r3, [pc, #24]	; (800f4fc <vTaskDelay+0x64>)
 800f4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4e6:	601a      	str	r2, [r3, #0]
 800f4e8:	f3bf 8f4f 	dsb	sy
 800f4ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f4f0:	bf00      	nop
 800f4f2:	3710      	adds	r7, #16
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	20000dbc 	.word	0x20000dbc
 800f4fc:	e000ed04 	.word	0xe000ed04

0800f500 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b08a      	sub	sp, #40	; 0x28
 800f504:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f506:	2300      	movs	r3, #0
 800f508:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f50a:	2300      	movs	r3, #0
 800f50c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f50e:	463a      	mov	r2, r7
 800f510:	1d39      	adds	r1, r7, #4
 800f512:	f107 0308 	add.w	r3, r7, #8
 800f516:	4618      	mov	r0, r3
 800f518:	f7fe ff34 	bl	800e384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f51c:	6839      	ldr	r1, [r7, #0]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	68ba      	ldr	r2, [r7, #8]
 800f522:	9202      	str	r2, [sp, #8]
 800f524:	9301      	str	r3, [sp, #4]
 800f526:	2300      	movs	r3, #0
 800f528:	9300      	str	r3, [sp, #0]
 800f52a:	2300      	movs	r3, #0
 800f52c:	460a      	mov	r2, r1
 800f52e:	4924      	ldr	r1, [pc, #144]	; (800f5c0 <vTaskStartScheduler+0xc0>)
 800f530:	4824      	ldr	r0, [pc, #144]	; (800f5c4 <vTaskStartScheduler+0xc4>)
 800f532:	f7ff fdf9 	bl	800f128 <xTaskCreateStatic>
 800f536:	4603      	mov	r3, r0
 800f538:	4a23      	ldr	r2, [pc, #140]	; (800f5c8 <vTaskStartScheduler+0xc8>)
 800f53a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f53c:	4b22      	ldr	r3, [pc, #136]	; (800f5c8 <vTaskStartScheduler+0xc8>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d002      	beq.n	800f54a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f544:	2301      	movs	r3, #1
 800f546:	617b      	str	r3, [r7, #20]
 800f548:	e001      	b.n	800f54e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f54a:	2300      	movs	r3, #0
 800f54c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	2b01      	cmp	r3, #1
 800f552:	d102      	bne.n	800f55a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f554:	f000 ff12 	bl	801037c <xTimerCreateTimerTask>
 800f558:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d11b      	bne.n	800f598 <vTaskStartScheduler+0x98>
	__asm volatile
 800f560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f564:	f383 8811 	msr	BASEPRI, r3
 800f568:	f3bf 8f6f 	isb	sy
 800f56c:	f3bf 8f4f 	dsb	sy
 800f570:	613b      	str	r3, [r7, #16]
}
 800f572:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f574:	4b15      	ldr	r3, [pc, #84]	; (800f5cc <vTaskStartScheduler+0xcc>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	3354      	adds	r3, #84	; 0x54
 800f57a:	4a15      	ldr	r2, [pc, #84]	; (800f5d0 <vTaskStartScheduler+0xd0>)
 800f57c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f57e:	4b15      	ldr	r3, [pc, #84]	; (800f5d4 <vTaskStartScheduler+0xd4>)
 800f580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f584:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f586:	4b14      	ldr	r3, [pc, #80]	; (800f5d8 <vTaskStartScheduler+0xd8>)
 800f588:	2201      	movs	r2, #1
 800f58a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f58c:	4b13      	ldr	r3, [pc, #76]	; (800f5dc <vTaskStartScheduler+0xdc>)
 800f58e:	2200      	movs	r2, #0
 800f590:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f592:	f001 fb45 	bl	8010c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f596:	e00e      	b.n	800f5b6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f59e:	d10a      	bne.n	800f5b6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800f5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a4:	f383 8811 	msr	BASEPRI, r3
 800f5a8:	f3bf 8f6f 	isb	sy
 800f5ac:	f3bf 8f4f 	dsb	sy
 800f5b0:	60fb      	str	r3, [r7, #12]
}
 800f5b2:	bf00      	nop
 800f5b4:	e7fe      	b.n	800f5b4 <vTaskStartScheduler+0xb4>
}
 800f5b6:	bf00      	nop
 800f5b8:	3718      	adds	r7, #24
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	08012980 	.word	0x08012980
 800f5c4:	0800fc05 	.word	0x0800fc05
 800f5c8:	20000db8 	.word	0x20000db8
 800f5cc:	200008c0 	.word	0x200008c0
 800f5d0:	20000044 	.word	0x20000044
 800f5d4:	20000db4 	.word	0x20000db4
 800f5d8:	20000da0 	.word	0x20000da0
 800f5dc:	20000d98 	.word	0x20000d98

0800f5e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f5e4:	4b04      	ldr	r3, [pc, #16]	; (800f5f8 <vTaskSuspendAll+0x18>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	4a03      	ldr	r2, [pc, #12]	; (800f5f8 <vTaskSuspendAll+0x18>)
 800f5ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f5ee:	bf00      	nop
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr
 800f5f8:	20000dbc 	.word	0x20000dbc

0800f5fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f602:	2300      	movs	r3, #0
 800f604:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f606:	2300      	movs	r3, #0
 800f608:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f60a:	4b42      	ldr	r3, [pc, #264]	; (800f714 <xTaskResumeAll+0x118>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d10a      	bne.n	800f628 <xTaskResumeAll+0x2c>
	__asm volatile
 800f612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f616:	f383 8811 	msr	BASEPRI, r3
 800f61a:	f3bf 8f6f 	isb	sy
 800f61e:	f3bf 8f4f 	dsb	sy
 800f622:	603b      	str	r3, [r7, #0]
}
 800f624:	bf00      	nop
 800f626:	e7fe      	b.n	800f626 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f628:	f001 fb9c 	bl	8010d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f62c:	4b39      	ldr	r3, [pc, #228]	; (800f714 <xTaskResumeAll+0x118>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	3b01      	subs	r3, #1
 800f632:	4a38      	ldr	r2, [pc, #224]	; (800f714 <xTaskResumeAll+0x118>)
 800f634:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f636:	4b37      	ldr	r3, [pc, #220]	; (800f714 <xTaskResumeAll+0x118>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d162      	bne.n	800f704 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f63e:	4b36      	ldr	r3, [pc, #216]	; (800f718 <xTaskResumeAll+0x11c>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d05e      	beq.n	800f704 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f646:	e02f      	b.n	800f6a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f648:	4b34      	ldr	r3, [pc, #208]	; (800f71c <xTaskResumeAll+0x120>)
 800f64a:	68db      	ldr	r3, [r3, #12]
 800f64c:	68db      	ldr	r3, [r3, #12]
 800f64e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	3318      	adds	r3, #24
 800f654:	4618      	mov	r0, r3
 800f656:	f7fe ff53 	bl	800e500 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	3304      	adds	r3, #4
 800f65e:	4618      	mov	r0, r3
 800f660:	f7fe ff4e 	bl	800e500 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f668:	4b2d      	ldr	r3, [pc, #180]	; (800f720 <xTaskResumeAll+0x124>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d903      	bls.n	800f678 <xTaskResumeAll+0x7c>
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f674:	4a2a      	ldr	r2, [pc, #168]	; (800f720 <xTaskResumeAll+0x124>)
 800f676:	6013      	str	r3, [r2, #0]
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f67c:	4613      	mov	r3, r2
 800f67e:	009b      	lsls	r3, r3, #2
 800f680:	4413      	add	r3, r2
 800f682:	009b      	lsls	r3, r3, #2
 800f684:	4a27      	ldr	r2, [pc, #156]	; (800f724 <xTaskResumeAll+0x128>)
 800f686:	441a      	add	r2, r3
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	3304      	adds	r3, #4
 800f68c:	4619      	mov	r1, r3
 800f68e:	4610      	mov	r0, r2
 800f690:	f7fe fed9 	bl	800e446 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f698:	4b23      	ldr	r3, [pc, #140]	; (800f728 <xTaskResumeAll+0x12c>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d302      	bcc.n	800f6a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f6a2:	4b22      	ldr	r3, [pc, #136]	; (800f72c <xTaskResumeAll+0x130>)
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f6a8:	4b1c      	ldr	r3, [pc, #112]	; (800f71c <xTaskResumeAll+0x120>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1cb      	bne.n	800f648 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d001      	beq.n	800f6ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f6b6:	f000 fb5f 	bl	800fd78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f6ba:	4b1d      	ldr	r3, [pc, #116]	; (800f730 <xTaskResumeAll+0x134>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d010      	beq.n	800f6e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f6c6:	f000 f847 	bl	800f758 <xTaskIncrementTick>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d002      	beq.n	800f6d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f6d0:	4b16      	ldr	r3, [pc, #88]	; (800f72c <xTaskResumeAll+0x130>)
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	3b01      	subs	r3, #1
 800f6da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d1f1      	bne.n	800f6c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f6e2:	4b13      	ldr	r3, [pc, #76]	; (800f730 <xTaskResumeAll+0x134>)
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f6e8:	4b10      	ldr	r3, [pc, #64]	; (800f72c <xTaskResumeAll+0x130>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d009      	beq.n	800f704 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f6f4:	4b0f      	ldr	r3, [pc, #60]	; (800f734 <xTaskResumeAll+0x138>)
 800f6f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6fa:	601a      	str	r2, [r3, #0]
 800f6fc:	f3bf 8f4f 	dsb	sy
 800f700:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f704:	f001 fb5e 	bl	8010dc4 <vPortExitCritical>

	return xAlreadyYielded;
 800f708:	68bb      	ldr	r3, [r7, #8]
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	20000dbc 	.word	0x20000dbc
 800f718:	20000d94 	.word	0x20000d94
 800f71c:	20000d54 	.word	0x20000d54
 800f720:	20000d9c 	.word	0x20000d9c
 800f724:	200008c4 	.word	0x200008c4
 800f728:	200008c0 	.word	0x200008c0
 800f72c:	20000da8 	.word	0x20000da8
 800f730:	20000da4 	.word	0x20000da4
 800f734:	e000ed04 	.word	0xe000ed04

0800f738 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f73e:	4b05      	ldr	r3, [pc, #20]	; (800f754 <xTaskGetTickCount+0x1c>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f744:	687b      	ldr	r3, [r7, #4]
}
 800f746:	4618      	mov	r0, r3
 800f748:	370c      	adds	r7, #12
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr
 800f752:	bf00      	nop
 800f754:	20000d98 	.word	0x20000d98

0800f758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b086      	sub	sp, #24
 800f75c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f75e:	2300      	movs	r3, #0
 800f760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f762:	4b4f      	ldr	r3, [pc, #316]	; (800f8a0 <xTaskIncrementTick+0x148>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	f040 808f 	bne.w	800f88a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f76c:	4b4d      	ldr	r3, [pc, #308]	; (800f8a4 <xTaskIncrementTick+0x14c>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	3301      	adds	r3, #1
 800f772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f774:	4a4b      	ldr	r2, [pc, #300]	; (800f8a4 <xTaskIncrementTick+0x14c>)
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d120      	bne.n	800f7c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f780:	4b49      	ldr	r3, [pc, #292]	; (800f8a8 <xTaskIncrementTick+0x150>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d00a      	beq.n	800f7a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800f78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f78e:	f383 8811 	msr	BASEPRI, r3
 800f792:	f3bf 8f6f 	isb	sy
 800f796:	f3bf 8f4f 	dsb	sy
 800f79a:	603b      	str	r3, [r7, #0]
}
 800f79c:	bf00      	nop
 800f79e:	e7fe      	b.n	800f79e <xTaskIncrementTick+0x46>
 800f7a0:	4b41      	ldr	r3, [pc, #260]	; (800f8a8 <xTaskIncrementTick+0x150>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	60fb      	str	r3, [r7, #12]
 800f7a6:	4b41      	ldr	r3, [pc, #260]	; (800f8ac <xTaskIncrementTick+0x154>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4a3f      	ldr	r2, [pc, #252]	; (800f8a8 <xTaskIncrementTick+0x150>)
 800f7ac:	6013      	str	r3, [r2, #0]
 800f7ae:	4a3f      	ldr	r2, [pc, #252]	; (800f8ac <xTaskIncrementTick+0x154>)
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6013      	str	r3, [r2, #0]
 800f7b4:	4b3e      	ldr	r3, [pc, #248]	; (800f8b0 <xTaskIncrementTick+0x158>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	4a3d      	ldr	r2, [pc, #244]	; (800f8b0 <xTaskIncrementTick+0x158>)
 800f7bc:	6013      	str	r3, [r2, #0]
 800f7be:	f000 fadb 	bl	800fd78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f7c2:	4b3c      	ldr	r3, [pc, #240]	; (800f8b4 <xTaskIncrementTick+0x15c>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	693a      	ldr	r2, [r7, #16]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d349      	bcc.n	800f860 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f7cc:	4b36      	ldr	r3, [pc, #216]	; (800f8a8 <xTaskIncrementTick+0x150>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d104      	bne.n	800f7e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7d6:	4b37      	ldr	r3, [pc, #220]	; (800f8b4 <xTaskIncrementTick+0x15c>)
 800f7d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f7dc:	601a      	str	r2, [r3, #0]
					break;
 800f7de:	e03f      	b.n	800f860 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7e0:	4b31      	ldr	r3, [pc, #196]	; (800f8a8 <xTaskIncrementTick+0x150>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f7f0:	693a      	ldr	r2, [r7, #16]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d203      	bcs.n	800f800 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f7f8:	4a2e      	ldr	r2, [pc, #184]	; (800f8b4 <xTaskIncrementTick+0x15c>)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f7fe:	e02f      	b.n	800f860 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	3304      	adds	r3, #4
 800f804:	4618      	mov	r0, r3
 800f806:	f7fe fe7b 	bl	800e500 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d004      	beq.n	800f81c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	3318      	adds	r3, #24
 800f816:	4618      	mov	r0, r3
 800f818:	f7fe fe72 	bl	800e500 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f820:	4b25      	ldr	r3, [pc, #148]	; (800f8b8 <xTaskIncrementTick+0x160>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	429a      	cmp	r2, r3
 800f826:	d903      	bls.n	800f830 <xTaskIncrementTick+0xd8>
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f82c:	4a22      	ldr	r2, [pc, #136]	; (800f8b8 <xTaskIncrementTick+0x160>)
 800f82e:	6013      	str	r3, [r2, #0]
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f834:	4613      	mov	r3, r2
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	4413      	add	r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	4a1f      	ldr	r2, [pc, #124]	; (800f8bc <xTaskIncrementTick+0x164>)
 800f83e:	441a      	add	r2, r3
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	3304      	adds	r3, #4
 800f844:	4619      	mov	r1, r3
 800f846:	4610      	mov	r0, r2
 800f848:	f7fe fdfd 	bl	800e446 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f850:	4b1b      	ldr	r3, [pc, #108]	; (800f8c0 <xTaskIncrementTick+0x168>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f856:	429a      	cmp	r2, r3
 800f858:	d3b8      	bcc.n	800f7cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f85a:	2301      	movs	r3, #1
 800f85c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f85e:	e7b5      	b.n	800f7cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f860:	4b17      	ldr	r3, [pc, #92]	; (800f8c0 <xTaskIncrementTick+0x168>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f866:	4915      	ldr	r1, [pc, #84]	; (800f8bc <xTaskIncrementTick+0x164>)
 800f868:	4613      	mov	r3, r2
 800f86a:	009b      	lsls	r3, r3, #2
 800f86c:	4413      	add	r3, r2
 800f86e:	009b      	lsls	r3, r3, #2
 800f870:	440b      	add	r3, r1
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	2b01      	cmp	r3, #1
 800f876:	d901      	bls.n	800f87c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f878:	2301      	movs	r3, #1
 800f87a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f87c:	4b11      	ldr	r3, [pc, #68]	; (800f8c4 <xTaskIncrementTick+0x16c>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d007      	beq.n	800f894 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f884:	2301      	movs	r3, #1
 800f886:	617b      	str	r3, [r7, #20]
 800f888:	e004      	b.n	800f894 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f88a:	4b0f      	ldr	r3, [pc, #60]	; (800f8c8 <xTaskIncrementTick+0x170>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	3301      	adds	r3, #1
 800f890:	4a0d      	ldr	r2, [pc, #52]	; (800f8c8 <xTaskIncrementTick+0x170>)
 800f892:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f894:	697b      	ldr	r3, [r7, #20]
}
 800f896:	4618      	mov	r0, r3
 800f898:	3718      	adds	r7, #24
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	20000dbc 	.word	0x20000dbc
 800f8a4:	20000d98 	.word	0x20000d98
 800f8a8:	20000d4c 	.word	0x20000d4c
 800f8ac:	20000d50 	.word	0x20000d50
 800f8b0:	20000dac 	.word	0x20000dac
 800f8b4:	20000db4 	.word	0x20000db4
 800f8b8:	20000d9c 	.word	0x20000d9c
 800f8bc:	200008c4 	.word	0x200008c4
 800f8c0:	200008c0 	.word	0x200008c0
 800f8c4:	20000da8 	.word	0x20000da8
 800f8c8:	20000da4 	.word	0x20000da4

0800f8cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f8d2:	4b2a      	ldr	r3, [pc, #168]	; (800f97c <vTaskSwitchContext+0xb0>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d003      	beq.n	800f8e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f8da:	4b29      	ldr	r3, [pc, #164]	; (800f980 <vTaskSwitchContext+0xb4>)
 800f8dc:	2201      	movs	r2, #1
 800f8de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f8e0:	e046      	b.n	800f970 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f8e2:	4b27      	ldr	r3, [pc, #156]	; (800f980 <vTaskSwitchContext+0xb4>)
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8e8:	4b26      	ldr	r3, [pc, #152]	; (800f984 <vTaskSwitchContext+0xb8>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	60fb      	str	r3, [r7, #12]
 800f8ee:	e010      	b.n	800f912 <vTaskSwitchContext+0x46>
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d10a      	bne.n	800f90c <vTaskSwitchContext+0x40>
	__asm volatile
 800f8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8fa:	f383 8811 	msr	BASEPRI, r3
 800f8fe:	f3bf 8f6f 	isb	sy
 800f902:	f3bf 8f4f 	dsb	sy
 800f906:	607b      	str	r3, [r7, #4]
}
 800f908:	bf00      	nop
 800f90a:	e7fe      	b.n	800f90a <vTaskSwitchContext+0x3e>
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	3b01      	subs	r3, #1
 800f910:	60fb      	str	r3, [r7, #12]
 800f912:	491d      	ldr	r1, [pc, #116]	; (800f988 <vTaskSwitchContext+0xbc>)
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	4613      	mov	r3, r2
 800f918:	009b      	lsls	r3, r3, #2
 800f91a:	4413      	add	r3, r2
 800f91c:	009b      	lsls	r3, r3, #2
 800f91e:	440b      	add	r3, r1
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d0e4      	beq.n	800f8f0 <vTaskSwitchContext+0x24>
 800f926:	68fa      	ldr	r2, [r7, #12]
 800f928:	4613      	mov	r3, r2
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	4413      	add	r3, r2
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	4a15      	ldr	r2, [pc, #84]	; (800f988 <vTaskSwitchContext+0xbc>)
 800f932:	4413      	add	r3, r2
 800f934:	60bb      	str	r3, [r7, #8]
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	685a      	ldr	r2, [r3, #4]
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	605a      	str	r2, [r3, #4]
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	685a      	ldr	r2, [r3, #4]
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	3308      	adds	r3, #8
 800f948:	429a      	cmp	r2, r3
 800f94a:	d104      	bne.n	800f956 <vTaskSwitchContext+0x8a>
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	685a      	ldr	r2, [r3, #4]
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	605a      	str	r2, [r3, #4]
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	4a0b      	ldr	r2, [pc, #44]	; (800f98c <vTaskSwitchContext+0xc0>)
 800f95e:	6013      	str	r3, [r2, #0]
 800f960:	4a08      	ldr	r2, [pc, #32]	; (800f984 <vTaskSwitchContext+0xb8>)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f966:	4b09      	ldr	r3, [pc, #36]	; (800f98c <vTaskSwitchContext+0xc0>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	3354      	adds	r3, #84	; 0x54
 800f96c:	4a08      	ldr	r2, [pc, #32]	; (800f990 <vTaskSwitchContext+0xc4>)
 800f96e:	6013      	str	r3, [r2, #0]
}
 800f970:	bf00      	nop
 800f972:	3714      	adds	r7, #20
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr
 800f97c:	20000dbc 	.word	0x20000dbc
 800f980:	20000da8 	.word	0x20000da8
 800f984:	20000d9c 	.word	0x20000d9c
 800f988:	200008c4 	.word	0x200008c4
 800f98c:	200008c0 	.word	0x200008c0
 800f990:	20000044 	.word	0x20000044

0800f994 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d10a      	bne.n	800f9ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a8:	f383 8811 	msr	BASEPRI, r3
 800f9ac:	f3bf 8f6f 	isb	sy
 800f9b0:	f3bf 8f4f 	dsb	sy
 800f9b4:	60fb      	str	r3, [r7, #12]
}
 800f9b6:	bf00      	nop
 800f9b8:	e7fe      	b.n	800f9b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f9ba:	4b07      	ldr	r3, [pc, #28]	; (800f9d8 <vTaskPlaceOnEventList+0x44>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	3318      	adds	r3, #24
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7fe fd63 	bl	800e48e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f9c8:	2101      	movs	r1, #1
 800f9ca:	6838      	ldr	r0, [r7, #0]
 800f9cc:	f000 fc82 	bl	80102d4 <prvAddCurrentTaskToDelayedList>
}
 800f9d0:	bf00      	nop
 800f9d2:	3710      	adds	r7, #16
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	200008c0 	.word	0x200008c0

0800f9dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b086      	sub	sp, #24
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	60b9      	str	r1, [r7, #8]
 800f9e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d10a      	bne.n	800fa04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f2:	f383 8811 	msr	BASEPRI, r3
 800f9f6:	f3bf 8f6f 	isb	sy
 800f9fa:	f3bf 8f4f 	dsb	sy
 800f9fe:	617b      	str	r3, [r7, #20]
}
 800fa00:	bf00      	nop
 800fa02:	e7fe      	b.n	800fa02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa04:	4b0a      	ldr	r3, [pc, #40]	; (800fa30 <vTaskPlaceOnEventListRestricted+0x54>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	3318      	adds	r3, #24
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	f7fe fd1a 	bl	800e446 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d002      	beq.n	800fa1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fa18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fa1e:	6879      	ldr	r1, [r7, #4]
 800fa20:	68b8      	ldr	r0, [r7, #8]
 800fa22:	f000 fc57 	bl	80102d4 <prvAddCurrentTaskToDelayedList>
	}
 800fa26:	bf00      	nop
 800fa28:	3718      	adds	r7, #24
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
 800fa2e:	bf00      	nop
 800fa30:	200008c0 	.word	0x200008c0

0800fa34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b086      	sub	sp, #24
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	68db      	ldr	r3, [r3, #12]
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d10a      	bne.n	800fa60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	60fb      	str	r3, [r7, #12]
}
 800fa5c:	bf00      	nop
 800fa5e:	e7fe      	b.n	800fa5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	3318      	adds	r3, #24
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fe fd4b 	bl	800e500 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa6a:	4b1e      	ldr	r3, [pc, #120]	; (800fae4 <xTaskRemoveFromEventList+0xb0>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d11d      	bne.n	800faae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	3304      	adds	r3, #4
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fe fd42 	bl	800e500 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa80:	4b19      	ldr	r3, [pc, #100]	; (800fae8 <xTaskRemoveFromEventList+0xb4>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d903      	bls.n	800fa90 <xTaskRemoveFromEventList+0x5c>
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa8c:	4a16      	ldr	r2, [pc, #88]	; (800fae8 <xTaskRemoveFromEventList+0xb4>)
 800fa8e:	6013      	str	r3, [r2, #0]
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa94:	4613      	mov	r3, r2
 800fa96:	009b      	lsls	r3, r3, #2
 800fa98:	4413      	add	r3, r2
 800fa9a:	009b      	lsls	r3, r3, #2
 800fa9c:	4a13      	ldr	r2, [pc, #76]	; (800faec <xTaskRemoveFromEventList+0xb8>)
 800fa9e:	441a      	add	r2, r3
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	3304      	adds	r3, #4
 800faa4:	4619      	mov	r1, r3
 800faa6:	4610      	mov	r0, r2
 800faa8:	f7fe fccd 	bl	800e446 <vListInsertEnd>
 800faac:	e005      	b.n	800faba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	3318      	adds	r3, #24
 800fab2:	4619      	mov	r1, r3
 800fab4:	480e      	ldr	r0, [pc, #56]	; (800faf0 <xTaskRemoveFromEventList+0xbc>)
 800fab6:	f7fe fcc6 	bl	800e446 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fabe:	4b0d      	ldr	r3, [pc, #52]	; (800faf4 <xTaskRemoveFromEventList+0xc0>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d905      	bls.n	800fad4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fac8:	2301      	movs	r3, #1
 800faca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800facc:	4b0a      	ldr	r3, [pc, #40]	; (800faf8 <xTaskRemoveFromEventList+0xc4>)
 800face:	2201      	movs	r2, #1
 800fad0:	601a      	str	r2, [r3, #0]
 800fad2:	e001      	b.n	800fad8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fad4:	2300      	movs	r3, #0
 800fad6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fad8:	697b      	ldr	r3, [r7, #20]
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3718      	adds	r7, #24
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
 800fae2:	bf00      	nop
 800fae4:	20000dbc 	.word	0x20000dbc
 800fae8:	20000d9c 	.word	0x20000d9c
 800faec:	200008c4 	.word	0x200008c4
 800faf0:	20000d54 	.word	0x20000d54
 800faf4:	200008c0 	.word	0x200008c0
 800faf8:	20000da8 	.word	0x20000da8

0800fafc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fb04:	4b06      	ldr	r3, [pc, #24]	; (800fb20 <vTaskInternalSetTimeOutState+0x24>)
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fb0c:	4b05      	ldr	r3, [pc, #20]	; (800fb24 <vTaskInternalSetTimeOutState+0x28>)
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	605a      	str	r2, [r3, #4]
}
 800fb14:	bf00      	nop
 800fb16:	370c      	adds	r7, #12
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	20000dac 	.word	0x20000dac
 800fb24:	20000d98 	.word	0x20000d98

0800fb28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b088      	sub	sp, #32
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d10a      	bne.n	800fb4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3c:	f383 8811 	msr	BASEPRI, r3
 800fb40:	f3bf 8f6f 	isb	sy
 800fb44:	f3bf 8f4f 	dsb	sy
 800fb48:	613b      	str	r3, [r7, #16]
}
 800fb4a:	bf00      	nop
 800fb4c:	e7fe      	b.n	800fb4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d10a      	bne.n	800fb6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb58:	f383 8811 	msr	BASEPRI, r3
 800fb5c:	f3bf 8f6f 	isb	sy
 800fb60:	f3bf 8f4f 	dsb	sy
 800fb64:	60fb      	str	r3, [r7, #12]
}
 800fb66:	bf00      	nop
 800fb68:	e7fe      	b.n	800fb68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fb6a:	f001 f8fb 	bl	8010d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fb6e:	4b1d      	ldr	r3, [pc, #116]	; (800fbe4 <xTaskCheckForTimeOut+0xbc>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	69ba      	ldr	r2, [r7, #24]
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb86:	d102      	bne.n	800fb8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	61fb      	str	r3, [r7, #28]
 800fb8c:	e023      	b.n	800fbd6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	4b15      	ldr	r3, [pc, #84]	; (800fbe8 <xTaskCheckForTimeOut+0xc0>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d007      	beq.n	800fbaa <xTaskCheckForTimeOut+0x82>
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	69ba      	ldr	r2, [r7, #24]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d302      	bcc.n	800fbaa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fba4:	2301      	movs	r3, #1
 800fba6:	61fb      	str	r3, [r7, #28]
 800fba8:	e015      	b.n	800fbd6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	697a      	ldr	r2, [r7, #20]
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d20b      	bcs.n	800fbcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	1ad2      	subs	r2, r2, r3
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f7ff ff9b 	bl	800fafc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	61fb      	str	r3, [r7, #28]
 800fbca:	e004      	b.n	800fbd6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fbd6:	f001 f8f5 	bl	8010dc4 <vPortExitCritical>

	return xReturn;
 800fbda:	69fb      	ldr	r3, [r7, #28]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3720      	adds	r7, #32
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	20000d98 	.word	0x20000d98
 800fbe8:	20000dac 	.word	0x20000dac

0800fbec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fbec:	b480      	push	{r7}
 800fbee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fbf0:	4b03      	ldr	r3, [pc, #12]	; (800fc00 <vTaskMissedYield+0x14>)
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	601a      	str	r2, [r3, #0]
}
 800fbf6:	bf00      	nop
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr
 800fc00:	20000da8 	.word	0x20000da8

0800fc04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fc0c:	f000 f852 	bl	800fcb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fc10:	4b06      	ldr	r3, [pc, #24]	; (800fc2c <prvIdleTask+0x28>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d9f9      	bls.n	800fc0c <prvIdleTask+0x8>
			{
				taskYIELD();
 800fc18:	4b05      	ldr	r3, [pc, #20]	; (800fc30 <prvIdleTask+0x2c>)
 800fc1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc1e:	601a      	str	r2, [r3, #0]
 800fc20:	f3bf 8f4f 	dsb	sy
 800fc24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fc28:	e7f0      	b.n	800fc0c <prvIdleTask+0x8>
 800fc2a:	bf00      	nop
 800fc2c:	200008c4 	.word	0x200008c4
 800fc30:	e000ed04 	.word	0xe000ed04

0800fc34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	607b      	str	r3, [r7, #4]
 800fc3e:	e00c      	b.n	800fc5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	4613      	mov	r3, r2
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	4413      	add	r3, r2
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	4a12      	ldr	r2, [pc, #72]	; (800fc94 <prvInitialiseTaskLists+0x60>)
 800fc4c:	4413      	add	r3, r2
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f7fe fbcc 	bl	800e3ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	3301      	adds	r3, #1
 800fc58:	607b      	str	r3, [r7, #4]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2b37      	cmp	r3, #55	; 0x37
 800fc5e:	d9ef      	bls.n	800fc40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fc60:	480d      	ldr	r0, [pc, #52]	; (800fc98 <prvInitialiseTaskLists+0x64>)
 800fc62:	f7fe fbc3 	bl	800e3ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fc66:	480d      	ldr	r0, [pc, #52]	; (800fc9c <prvInitialiseTaskLists+0x68>)
 800fc68:	f7fe fbc0 	bl	800e3ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fc6c:	480c      	ldr	r0, [pc, #48]	; (800fca0 <prvInitialiseTaskLists+0x6c>)
 800fc6e:	f7fe fbbd 	bl	800e3ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fc72:	480c      	ldr	r0, [pc, #48]	; (800fca4 <prvInitialiseTaskLists+0x70>)
 800fc74:	f7fe fbba 	bl	800e3ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fc78:	480b      	ldr	r0, [pc, #44]	; (800fca8 <prvInitialiseTaskLists+0x74>)
 800fc7a:	f7fe fbb7 	bl	800e3ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fc7e:	4b0b      	ldr	r3, [pc, #44]	; (800fcac <prvInitialiseTaskLists+0x78>)
 800fc80:	4a05      	ldr	r2, [pc, #20]	; (800fc98 <prvInitialiseTaskLists+0x64>)
 800fc82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fc84:	4b0a      	ldr	r3, [pc, #40]	; (800fcb0 <prvInitialiseTaskLists+0x7c>)
 800fc86:	4a05      	ldr	r2, [pc, #20]	; (800fc9c <prvInitialiseTaskLists+0x68>)
 800fc88:	601a      	str	r2, [r3, #0]
}
 800fc8a:	bf00      	nop
 800fc8c:	3708      	adds	r7, #8
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop
 800fc94:	200008c4 	.word	0x200008c4
 800fc98:	20000d24 	.word	0x20000d24
 800fc9c:	20000d38 	.word	0x20000d38
 800fca0:	20000d54 	.word	0x20000d54
 800fca4:	20000d68 	.word	0x20000d68
 800fca8:	20000d80 	.word	0x20000d80
 800fcac:	20000d4c 	.word	0x20000d4c
 800fcb0:	20000d50 	.word	0x20000d50

0800fcb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fcba:	e019      	b.n	800fcf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fcbc:	f001 f852 	bl	8010d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcc0:	4b10      	ldr	r3, [pc, #64]	; (800fd04 <prvCheckTasksWaitingTermination+0x50>)
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	3304      	adds	r3, #4
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fe fc17 	bl	800e500 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fcd2:	4b0d      	ldr	r3, [pc, #52]	; (800fd08 <prvCheckTasksWaitingTermination+0x54>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	3b01      	subs	r3, #1
 800fcd8:	4a0b      	ldr	r2, [pc, #44]	; (800fd08 <prvCheckTasksWaitingTermination+0x54>)
 800fcda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fcdc:	4b0b      	ldr	r3, [pc, #44]	; (800fd0c <prvCheckTasksWaitingTermination+0x58>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	3b01      	subs	r3, #1
 800fce2:	4a0a      	ldr	r2, [pc, #40]	; (800fd0c <prvCheckTasksWaitingTermination+0x58>)
 800fce4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fce6:	f001 f86d 	bl	8010dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 f810 	bl	800fd10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fcf0:	4b06      	ldr	r3, [pc, #24]	; (800fd0c <prvCheckTasksWaitingTermination+0x58>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d1e1      	bne.n	800fcbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fcf8:	bf00      	nop
 800fcfa:	bf00      	nop
 800fcfc:	3708      	adds	r7, #8
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
 800fd02:	bf00      	nop
 800fd04:	20000d68 	.word	0x20000d68
 800fd08:	20000d94 	.word	0x20000d94
 800fd0c:	20000d7c 	.word	0x20000d7c

0800fd10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	3354      	adds	r3, #84	; 0x54
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f001 ff39 	bl	8011b94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d108      	bne.n	800fd3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd30:	4618      	mov	r0, r3
 800fd32:	f001 fa05 	bl	8011140 <vPortFree>
				vPortFree( pxTCB );
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f001 fa02 	bl	8011140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fd3c:	e018      	b.n	800fd70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d103      	bne.n	800fd50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f001 f9f9 	bl	8011140 <vPortFree>
	}
 800fd4e:	e00f      	b.n	800fd70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fd56:	2b02      	cmp	r3, #2
 800fd58:	d00a      	beq.n	800fd70 <prvDeleteTCB+0x60>
	__asm volatile
 800fd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd5e:	f383 8811 	msr	BASEPRI, r3
 800fd62:	f3bf 8f6f 	isb	sy
 800fd66:	f3bf 8f4f 	dsb	sy
 800fd6a:	60fb      	str	r3, [r7, #12]
}
 800fd6c:	bf00      	nop
 800fd6e:	e7fe      	b.n	800fd6e <prvDeleteTCB+0x5e>
	}
 800fd70:	bf00      	nop
 800fd72:	3710      	adds	r7, #16
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b083      	sub	sp, #12
 800fd7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd7e:	4b0c      	ldr	r3, [pc, #48]	; (800fdb0 <prvResetNextTaskUnblockTime+0x38>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d104      	bne.n	800fd92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fd88:	4b0a      	ldr	r3, [pc, #40]	; (800fdb4 <prvResetNextTaskUnblockTime+0x3c>)
 800fd8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fd90:	e008      	b.n	800fda4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd92:	4b07      	ldr	r3, [pc, #28]	; (800fdb0 <prvResetNextTaskUnblockTime+0x38>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	68db      	ldr	r3, [r3, #12]
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	685b      	ldr	r3, [r3, #4]
 800fda0:	4a04      	ldr	r2, [pc, #16]	; (800fdb4 <prvResetNextTaskUnblockTime+0x3c>)
 800fda2:	6013      	str	r3, [r2, #0]
}
 800fda4:	bf00      	nop
 800fda6:	370c      	adds	r7, #12
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr
 800fdb0:	20000d4c 	.word	0x20000d4c
 800fdb4:	20000db4 	.word	0x20000db4

0800fdb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fdb8:	b480      	push	{r7}
 800fdba:	b083      	sub	sp, #12
 800fdbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fdbe:	4b0b      	ldr	r3, [pc, #44]	; (800fdec <xTaskGetSchedulerState+0x34>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d102      	bne.n	800fdcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	607b      	str	r3, [r7, #4]
 800fdca:	e008      	b.n	800fdde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdcc:	4b08      	ldr	r3, [pc, #32]	; (800fdf0 <xTaskGetSchedulerState+0x38>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d102      	bne.n	800fdda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fdd4:	2302      	movs	r3, #2
 800fdd6:	607b      	str	r3, [r7, #4]
 800fdd8:	e001      	b.n	800fdde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fdda:	2300      	movs	r3, #0
 800fddc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fdde:	687b      	ldr	r3, [r7, #4]
	}
 800fde0:	4618      	mov	r0, r3
 800fde2:	370c      	adds	r7, #12
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr
 800fdec:	20000da0 	.word	0x20000da0
 800fdf0:	20000dbc 	.word	0x20000dbc

0800fdf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b086      	sub	sp, #24
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fe00:	2300      	movs	r3, #0
 800fe02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d056      	beq.n	800feb8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fe0a:	4b2e      	ldr	r3, [pc, #184]	; (800fec4 <xTaskPriorityDisinherit+0xd0>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	693a      	ldr	r2, [r7, #16]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d00a      	beq.n	800fe2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fe14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe18:	f383 8811 	msr	BASEPRI, r3
 800fe1c:	f3bf 8f6f 	isb	sy
 800fe20:	f3bf 8f4f 	dsb	sy
 800fe24:	60fb      	str	r3, [r7, #12]
}
 800fe26:	bf00      	nop
 800fe28:	e7fe      	b.n	800fe28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d10a      	bne.n	800fe48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fe32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe36:	f383 8811 	msr	BASEPRI, r3
 800fe3a:	f3bf 8f6f 	isb	sy
 800fe3e:	f3bf 8f4f 	dsb	sy
 800fe42:	60bb      	str	r3, [r7, #8]
}
 800fe44:	bf00      	nop
 800fe46:	e7fe      	b.n	800fe46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe4c:	1e5a      	subs	r2, r3, #1
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d02c      	beq.n	800feb8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d128      	bne.n	800feb8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	3304      	adds	r3, #4
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fe fb48 	bl	800e500 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe88:	4b0f      	ldr	r3, [pc, #60]	; (800fec8 <xTaskPriorityDisinherit+0xd4>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d903      	bls.n	800fe98 <xTaskPriorityDisinherit+0xa4>
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe94:	4a0c      	ldr	r2, [pc, #48]	; (800fec8 <xTaskPriorityDisinherit+0xd4>)
 800fe96:	6013      	str	r3, [r2, #0]
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe9c:	4613      	mov	r3, r2
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	4413      	add	r3, r2
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	4a09      	ldr	r2, [pc, #36]	; (800fecc <xTaskPriorityDisinherit+0xd8>)
 800fea6:	441a      	add	r2, r3
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	3304      	adds	r3, #4
 800feac:	4619      	mov	r1, r3
 800feae:	4610      	mov	r0, r2
 800feb0:	f7fe fac9 	bl	800e446 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800feb4:	2301      	movs	r3, #1
 800feb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800feb8:	697b      	ldr	r3, [r7, #20]
	}
 800feba:	4618      	mov	r0, r3
 800febc:	3718      	adds	r7, #24
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	200008c0 	.word	0x200008c0
 800fec8:	20000d9c 	.word	0x20000d9c
 800fecc:	200008c4 	.word	0x200008c4

0800fed0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b086      	sub	sp, #24
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	607a      	str	r2, [r7, #4]
 800fedc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800fede:	f000 ff41 	bl	8010d64 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fee2:	4b29      	ldr	r3, [pc, #164]	; (800ff88 <xTaskNotifyWait+0xb8>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800feea:	b2db      	uxtb	r3, r3
 800feec:	2b02      	cmp	r3, #2
 800feee:	d01c      	beq.n	800ff2a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800fef0:	4b25      	ldr	r3, [pc, #148]	; (800ff88 <xTaskNotifyWait+0xb8>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	43d2      	mvns	r2, r2
 800fefc:	400a      	ands	r2, r1
 800fefe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ff02:	4b21      	ldr	r3, [pc, #132]	; (800ff88 <xTaskNotifyWait+0xb8>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	2201      	movs	r2, #1
 800ff08:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d00b      	beq.n	800ff2a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff12:	2101      	movs	r1, #1
 800ff14:	6838      	ldr	r0, [r7, #0]
 800ff16:	f000 f9dd 	bl	80102d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ff1a:	4b1c      	ldr	r3, [pc, #112]	; (800ff8c <xTaskNotifyWait+0xbc>)
 800ff1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff20:	601a      	str	r2, [r3, #0]
 800ff22:	f3bf 8f4f 	dsb	sy
 800ff26:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ff2a:	f000 ff4b 	bl	8010dc4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ff2e:	f000 ff19 	bl	8010d64 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d005      	beq.n	800ff44 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ff38:	4b13      	ldr	r3, [pc, #76]	; (800ff88 <xTaskNotifyWait+0xb8>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ff44:	4b10      	ldr	r3, [pc, #64]	; (800ff88 <xTaskNotifyWait+0xb8>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	2b02      	cmp	r3, #2
 800ff50:	d002      	beq.n	800ff58 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ff52:	2300      	movs	r3, #0
 800ff54:	617b      	str	r3, [r7, #20]
 800ff56:	e00a      	b.n	800ff6e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ff58:	4b0b      	ldr	r3, [pc, #44]	; (800ff88 <xTaskNotifyWait+0xb8>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ff60:	68ba      	ldr	r2, [r7, #8]
 800ff62:	43d2      	mvns	r2, r2
 800ff64:	400a      	ands	r2, r1
 800ff66:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ff6e:	4b06      	ldr	r3, [pc, #24]	; (800ff88 <xTaskNotifyWait+0xb8>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800ff78:	f000 ff24 	bl	8010dc4 <vPortExitCritical>

		return xReturn;
 800ff7c:	697b      	ldr	r3, [r7, #20]
	}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3718      	adds	r7, #24
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop
 800ff88:	200008c0 	.word	0x200008c0
 800ff8c:	e000ed04 	.word	0xe000ed04

0800ff90 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b08a      	sub	sp, #40	; 0x28
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	603b      	str	r3, [r7, #0]
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d10a      	bne.n	800ffc0 <xTaskGenericNotify+0x30>
	__asm volatile
 800ffaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffae:	f383 8811 	msr	BASEPRI, r3
 800ffb2:	f3bf 8f6f 	isb	sy
 800ffb6:	f3bf 8f4f 	dsb	sy
 800ffba:	61bb      	str	r3, [r7, #24]
}
 800ffbc:	bf00      	nop
 800ffbe:	e7fe      	b.n	800ffbe <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ffc4:	f000 fece 	bl	8010d64 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d004      	beq.n	800ffd8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ffce:	6a3b      	ldr	r3, [r7, #32]
 800ffd0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ffd8:	6a3b      	ldr	r3, [r7, #32]
 800ffda:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ffde:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ffe0:	6a3b      	ldr	r3, [r7, #32]
 800ffe2:	2202      	movs	r2, #2
 800ffe4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800ffe8:	79fb      	ldrb	r3, [r7, #7]
 800ffea:	2b04      	cmp	r3, #4
 800ffec:	d82d      	bhi.n	801004a <xTaskGenericNotify+0xba>
 800ffee:	a201      	add	r2, pc, #4	; (adr r2, 800fff4 <xTaskGenericNotify+0x64>)
 800fff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff4:	0801006d 	.word	0x0801006d
 800fff8:	08010009 	.word	0x08010009
 800fffc:	0801001b 	.word	0x0801001b
 8010000:	0801002b 	.word	0x0801002b
 8010004:	08010035 	.word	0x08010035
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010008:	6a3b      	ldr	r3, [r7, #32]
 801000a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	431a      	orrs	r2, r3
 8010012:	6a3b      	ldr	r3, [r7, #32]
 8010014:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8010018:	e02b      	b.n	8010072 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801001a:	6a3b      	ldr	r3, [r7, #32]
 801001c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010020:	1c5a      	adds	r2, r3, #1
 8010022:	6a3b      	ldr	r3, [r7, #32]
 8010024:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8010028:	e023      	b.n	8010072 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801002a:	6a3b      	ldr	r3, [r7, #32]
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8010032:	e01e      	b.n	8010072 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010034:	7ffb      	ldrb	r3, [r7, #31]
 8010036:	2b02      	cmp	r3, #2
 8010038:	d004      	beq.n	8010044 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801003a:	6a3b      	ldr	r3, [r7, #32]
 801003c:	68ba      	ldr	r2, [r7, #8]
 801003e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010042:	e016      	b.n	8010072 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8010044:	2300      	movs	r3, #0
 8010046:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010048:	e013      	b.n	8010072 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801004a:	6a3b      	ldr	r3, [r7, #32]
 801004c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010054:	d00c      	beq.n	8010070 <xTaskGenericNotify+0xe0>
	__asm volatile
 8010056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005a:	f383 8811 	msr	BASEPRI, r3
 801005e:	f3bf 8f6f 	isb	sy
 8010062:	f3bf 8f4f 	dsb	sy
 8010066:	617b      	str	r3, [r7, #20]
}
 8010068:	bf00      	nop
 801006a:	e7fe      	b.n	801006a <xTaskGenericNotify+0xda>
					break;
 801006c:	bf00      	nop
 801006e:	e000      	b.n	8010072 <xTaskGenericNotify+0xe2>

					break;
 8010070:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010072:	7ffb      	ldrb	r3, [r7, #31]
 8010074:	2b01      	cmp	r3, #1
 8010076:	d13a      	bne.n	80100ee <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010078:	6a3b      	ldr	r3, [r7, #32]
 801007a:	3304      	adds	r3, #4
 801007c:	4618      	mov	r0, r3
 801007e:	f7fe fa3f 	bl	800e500 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010082:	6a3b      	ldr	r3, [r7, #32]
 8010084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010086:	4b1d      	ldr	r3, [pc, #116]	; (80100fc <xTaskGenericNotify+0x16c>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d903      	bls.n	8010096 <xTaskGenericNotify+0x106>
 801008e:	6a3b      	ldr	r3, [r7, #32]
 8010090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010092:	4a1a      	ldr	r2, [pc, #104]	; (80100fc <xTaskGenericNotify+0x16c>)
 8010094:	6013      	str	r3, [r2, #0]
 8010096:	6a3b      	ldr	r3, [r7, #32]
 8010098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801009a:	4613      	mov	r3, r2
 801009c:	009b      	lsls	r3, r3, #2
 801009e:	4413      	add	r3, r2
 80100a0:	009b      	lsls	r3, r3, #2
 80100a2:	4a17      	ldr	r2, [pc, #92]	; (8010100 <xTaskGenericNotify+0x170>)
 80100a4:	441a      	add	r2, r3
 80100a6:	6a3b      	ldr	r3, [r7, #32]
 80100a8:	3304      	adds	r3, #4
 80100aa:	4619      	mov	r1, r3
 80100ac:	4610      	mov	r0, r2
 80100ae:	f7fe f9ca 	bl	800e446 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80100b2:	6a3b      	ldr	r3, [r7, #32]
 80100b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d00a      	beq.n	80100d0 <xTaskGenericNotify+0x140>
	__asm volatile
 80100ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100be:	f383 8811 	msr	BASEPRI, r3
 80100c2:	f3bf 8f6f 	isb	sy
 80100c6:	f3bf 8f4f 	dsb	sy
 80100ca:	613b      	str	r3, [r7, #16]
}
 80100cc:	bf00      	nop
 80100ce:	e7fe      	b.n	80100ce <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80100d0:	6a3b      	ldr	r3, [r7, #32]
 80100d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100d4:	4b0b      	ldr	r3, [pc, #44]	; (8010104 <xTaskGenericNotify+0x174>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100da:	429a      	cmp	r2, r3
 80100dc:	d907      	bls.n	80100ee <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80100de:	4b0a      	ldr	r3, [pc, #40]	; (8010108 <xTaskGenericNotify+0x178>)
 80100e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100e4:	601a      	str	r2, [r3, #0]
 80100e6:	f3bf 8f4f 	dsb	sy
 80100ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80100ee:	f000 fe69 	bl	8010dc4 <vPortExitCritical>

		return xReturn;
 80100f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3728      	adds	r7, #40	; 0x28
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	20000d9c 	.word	0x20000d9c
 8010100:	200008c4 	.word	0x200008c4
 8010104:	200008c0 	.word	0x200008c0
 8010108:	e000ed04 	.word	0xe000ed04

0801010c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801010c:	b580      	push	{r7, lr}
 801010e:	b08e      	sub	sp, #56	; 0x38
 8010110:	af00      	add	r7, sp, #0
 8010112:	60f8      	str	r0, [r7, #12]
 8010114:	60b9      	str	r1, [r7, #8]
 8010116:	603b      	str	r3, [r7, #0]
 8010118:	4613      	mov	r3, r2
 801011a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801011c:	2301      	movs	r3, #1
 801011e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d10a      	bne.n	801013c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8010126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801012a:	f383 8811 	msr	BASEPRI, r3
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	f3bf 8f4f 	dsb	sy
 8010136:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010138:	bf00      	nop
 801013a:	e7fe      	b.n	801013a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801013c:	f000 fef4 	bl	8010f28 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8010144:	f3ef 8211 	mrs	r2, BASEPRI
 8010148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014c:	f383 8811 	msr	BASEPRI, r3
 8010150:	f3bf 8f6f 	isb	sy
 8010154:	f3bf 8f4f 	dsb	sy
 8010158:	623a      	str	r2, [r7, #32]
 801015a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801015c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801015e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d004      	beq.n	8010170 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010168:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010172:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8010176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801017a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017c:	2202      	movs	r2, #2
 801017e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8010182:	79fb      	ldrb	r3, [r7, #7]
 8010184:	2b04      	cmp	r3, #4
 8010186:	d82f      	bhi.n	80101e8 <xTaskGenericNotifyFromISR+0xdc>
 8010188:	a201      	add	r2, pc, #4	; (adr r2, 8010190 <xTaskGenericNotifyFromISR+0x84>)
 801018a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801018e:	bf00      	nop
 8010190:	0801020b 	.word	0x0801020b
 8010194:	080101a5 	.word	0x080101a5
 8010198:	080101b7 	.word	0x080101b7
 801019c:	080101c7 	.word	0x080101c7
 80101a0:	080101d1 	.word	0x080101d1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80101a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	431a      	orrs	r2, r3
 80101ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80101b4:	e02c      	b.n	8010210 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80101b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80101bc:	1c5a      	adds	r2, r3, #1
 80101be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80101c4:	e024      	b.n	8010210 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80101c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c8:	68ba      	ldr	r2, [r7, #8]
 80101ca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80101ce:	e01f      	b.n	8010210 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80101d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80101d4:	2b02      	cmp	r3, #2
 80101d6:	d004      	beq.n	80101e2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80101d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101da:	68ba      	ldr	r2, [r7, #8]
 80101dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80101e0:	e016      	b.n	8010210 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80101e2:	2300      	movs	r3, #0
 80101e4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80101e6:	e013      	b.n	8010210 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80101e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80101ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101f2:	d00c      	beq.n	801020e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80101f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f8:	f383 8811 	msr	BASEPRI, r3
 80101fc:	f3bf 8f6f 	isb	sy
 8010200:	f3bf 8f4f 	dsb	sy
 8010204:	61bb      	str	r3, [r7, #24]
}
 8010206:	bf00      	nop
 8010208:	e7fe      	b.n	8010208 <xTaskGenericNotifyFromISR+0xfc>
					break;
 801020a:	bf00      	nop
 801020c:	e000      	b.n	8010210 <xTaskGenericNotifyFromISR+0x104>
					break;
 801020e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010210:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010214:	2b01      	cmp	r3, #1
 8010216:	d146      	bne.n	80102a6 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801021c:	2b00      	cmp	r3, #0
 801021e:	d00a      	beq.n	8010236 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8010220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010224:	f383 8811 	msr	BASEPRI, r3
 8010228:	f3bf 8f6f 	isb	sy
 801022c:	f3bf 8f4f 	dsb	sy
 8010230:	617b      	str	r3, [r7, #20]
}
 8010232:	bf00      	nop
 8010234:	e7fe      	b.n	8010234 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010236:	4b21      	ldr	r3, [pc, #132]	; (80102bc <xTaskGenericNotifyFromISR+0x1b0>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d11d      	bne.n	801027a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801023e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010240:	3304      	adds	r3, #4
 8010242:	4618      	mov	r0, r3
 8010244:	f7fe f95c 	bl	800e500 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801024a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801024c:	4b1c      	ldr	r3, [pc, #112]	; (80102c0 <xTaskGenericNotifyFromISR+0x1b4>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	429a      	cmp	r2, r3
 8010252:	d903      	bls.n	801025c <xTaskGenericNotifyFromISR+0x150>
 8010254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010258:	4a19      	ldr	r2, [pc, #100]	; (80102c0 <xTaskGenericNotifyFromISR+0x1b4>)
 801025a:	6013      	str	r3, [r2, #0]
 801025c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010260:	4613      	mov	r3, r2
 8010262:	009b      	lsls	r3, r3, #2
 8010264:	4413      	add	r3, r2
 8010266:	009b      	lsls	r3, r3, #2
 8010268:	4a16      	ldr	r2, [pc, #88]	; (80102c4 <xTaskGenericNotifyFromISR+0x1b8>)
 801026a:	441a      	add	r2, r3
 801026c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026e:	3304      	adds	r3, #4
 8010270:	4619      	mov	r1, r3
 8010272:	4610      	mov	r0, r2
 8010274:	f7fe f8e7 	bl	800e446 <vListInsertEnd>
 8010278:	e005      	b.n	8010286 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801027a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027c:	3318      	adds	r3, #24
 801027e:	4619      	mov	r1, r3
 8010280:	4811      	ldr	r0, [pc, #68]	; (80102c8 <xTaskGenericNotifyFromISR+0x1bc>)
 8010282:	f7fe f8e0 	bl	800e446 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801028a:	4b10      	ldr	r3, [pc, #64]	; (80102cc <xTaskGenericNotifyFromISR+0x1c0>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010290:	429a      	cmp	r2, r3
 8010292:	d908      	bls.n	80102a6 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010296:	2b00      	cmp	r3, #0
 8010298:	d002      	beq.n	80102a0 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801029a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801029c:	2201      	movs	r2, #1
 801029e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80102a0:	4b0b      	ldr	r3, [pc, #44]	; (80102d0 <xTaskGenericNotifyFromISR+0x1c4>)
 80102a2:	2201      	movs	r2, #1
 80102a4:	601a      	str	r2, [r3, #0]
 80102a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	f383 8811 	msr	BASEPRI, r3
}
 80102b0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80102b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3738      	adds	r7, #56	; 0x38
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	20000dbc 	.word	0x20000dbc
 80102c0:	20000d9c 	.word	0x20000d9c
 80102c4:	200008c4 	.word	0x200008c4
 80102c8:	20000d54 	.word	0x20000d54
 80102cc:	200008c0 	.word	0x200008c0
 80102d0:	20000da8 	.word	0x20000da8

080102d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80102de:	4b21      	ldr	r3, [pc, #132]	; (8010364 <prvAddCurrentTaskToDelayedList+0x90>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102e4:	4b20      	ldr	r3, [pc, #128]	; (8010368 <prvAddCurrentTaskToDelayedList+0x94>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	3304      	adds	r3, #4
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7fe f908 	bl	800e500 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102f6:	d10a      	bne.n	801030e <prvAddCurrentTaskToDelayedList+0x3a>
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d007      	beq.n	801030e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102fe:	4b1a      	ldr	r3, [pc, #104]	; (8010368 <prvAddCurrentTaskToDelayedList+0x94>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	3304      	adds	r3, #4
 8010304:	4619      	mov	r1, r3
 8010306:	4819      	ldr	r0, [pc, #100]	; (801036c <prvAddCurrentTaskToDelayedList+0x98>)
 8010308:	f7fe f89d 	bl	800e446 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801030c:	e026      	b.n	801035c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801030e:	68fa      	ldr	r2, [r7, #12]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	4413      	add	r3, r2
 8010314:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010316:	4b14      	ldr	r3, [pc, #80]	; (8010368 <prvAddCurrentTaskToDelayedList+0x94>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	68ba      	ldr	r2, [r7, #8]
 801031c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	429a      	cmp	r2, r3
 8010324:	d209      	bcs.n	801033a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010326:	4b12      	ldr	r3, [pc, #72]	; (8010370 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010328:	681a      	ldr	r2, [r3, #0]
 801032a:	4b0f      	ldr	r3, [pc, #60]	; (8010368 <prvAddCurrentTaskToDelayedList+0x94>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	3304      	adds	r3, #4
 8010330:	4619      	mov	r1, r3
 8010332:	4610      	mov	r0, r2
 8010334:	f7fe f8ab 	bl	800e48e <vListInsert>
}
 8010338:	e010      	b.n	801035c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801033a:	4b0e      	ldr	r3, [pc, #56]	; (8010374 <prvAddCurrentTaskToDelayedList+0xa0>)
 801033c:	681a      	ldr	r2, [r3, #0]
 801033e:	4b0a      	ldr	r3, [pc, #40]	; (8010368 <prvAddCurrentTaskToDelayedList+0x94>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	3304      	adds	r3, #4
 8010344:	4619      	mov	r1, r3
 8010346:	4610      	mov	r0, r2
 8010348:	f7fe f8a1 	bl	800e48e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801034c:	4b0a      	ldr	r3, [pc, #40]	; (8010378 <prvAddCurrentTaskToDelayedList+0xa4>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	68ba      	ldr	r2, [r7, #8]
 8010352:	429a      	cmp	r2, r3
 8010354:	d202      	bcs.n	801035c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010356:	4a08      	ldr	r2, [pc, #32]	; (8010378 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	6013      	str	r3, [r2, #0]
}
 801035c:	bf00      	nop
 801035e:	3710      	adds	r7, #16
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}
 8010364:	20000d98 	.word	0x20000d98
 8010368:	200008c0 	.word	0x200008c0
 801036c:	20000d80 	.word	0x20000d80
 8010370:	20000d50 	.word	0x20000d50
 8010374:	20000d4c 	.word	0x20000d4c
 8010378:	20000db4 	.word	0x20000db4

0801037c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b08a      	sub	sp, #40	; 0x28
 8010380:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010382:	2300      	movs	r3, #0
 8010384:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010386:	f000 fb63 	bl	8010a50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801038a:	4b1c      	ldr	r3, [pc, #112]	; (80103fc <xTimerCreateTimerTask+0x80>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d021      	beq.n	80103d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010392:	2300      	movs	r3, #0
 8010394:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010396:	2300      	movs	r3, #0
 8010398:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801039a:	1d3a      	adds	r2, r7, #4
 801039c:	f107 0108 	add.w	r1, r7, #8
 80103a0:	f107 030c 	add.w	r3, r7, #12
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fe f807 	bl	800e3b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80103aa:	6879      	ldr	r1, [r7, #4]
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	68fa      	ldr	r2, [r7, #12]
 80103b0:	9202      	str	r2, [sp, #8]
 80103b2:	9301      	str	r3, [sp, #4]
 80103b4:	2302      	movs	r3, #2
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	2300      	movs	r3, #0
 80103ba:	460a      	mov	r2, r1
 80103bc:	4910      	ldr	r1, [pc, #64]	; (8010400 <xTimerCreateTimerTask+0x84>)
 80103be:	4811      	ldr	r0, [pc, #68]	; (8010404 <xTimerCreateTimerTask+0x88>)
 80103c0:	f7fe feb2 	bl	800f128 <xTaskCreateStatic>
 80103c4:	4603      	mov	r3, r0
 80103c6:	4a10      	ldr	r2, [pc, #64]	; (8010408 <xTimerCreateTimerTask+0x8c>)
 80103c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80103ca:	4b0f      	ldr	r3, [pc, #60]	; (8010408 <xTimerCreateTimerTask+0x8c>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d001      	beq.n	80103d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80103d2:	2301      	movs	r3, #1
 80103d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d10a      	bne.n	80103f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80103dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e0:	f383 8811 	msr	BASEPRI, r3
 80103e4:	f3bf 8f6f 	isb	sy
 80103e8:	f3bf 8f4f 	dsb	sy
 80103ec:	613b      	str	r3, [r7, #16]
}
 80103ee:	bf00      	nop
 80103f0:	e7fe      	b.n	80103f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80103f2:	697b      	ldr	r3, [r7, #20]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3718      	adds	r7, #24
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	20000df0 	.word	0x20000df0
 8010400:	08012988 	.word	0x08012988
 8010404:	080105f9 	.word	0x080105f9
 8010408:	20000df4 	.word	0x20000df4

0801040c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801040c:	b580      	push	{r7, lr}
 801040e:	b088      	sub	sp, #32
 8010410:	af02      	add	r7, sp, #8
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	607a      	str	r2, [r7, #4]
 8010418:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801041a:	202c      	movs	r0, #44	; 0x2c
 801041c:	f000 fdc4 	bl	8010fa8 <pvPortMalloc>
 8010420:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d00d      	beq.n	8010444 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	2200      	movs	r2, #0
 801042c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	9301      	str	r3, [sp, #4]
 8010434:	6a3b      	ldr	r3, [r7, #32]
 8010436:	9300      	str	r3, [sp, #0]
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	68b9      	ldr	r1, [r7, #8]
 801043e:	68f8      	ldr	r0, [r7, #12]
 8010440:	f000 f805 	bl	801044e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010444:	697b      	ldr	r3, [r7, #20]
	}
 8010446:	4618      	mov	r0, r3
 8010448:	3718      	adds	r7, #24
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801044e:	b580      	push	{r7, lr}
 8010450:	b086      	sub	sp, #24
 8010452:	af00      	add	r7, sp, #0
 8010454:	60f8      	str	r0, [r7, #12]
 8010456:	60b9      	str	r1, [r7, #8]
 8010458:	607a      	str	r2, [r7, #4]
 801045a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d10a      	bne.n	8010478 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8010462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010466:	f383 8811 	msr	BASEPRI, r3
 801046a:	f3bf 8f6f 	isb	sy
 801046e:	f3bf 8f4f 	dsb	sy
 8010472:	617b      	str	r3, [r7, #20]
}
 8010474:	bf00      	nop
 8010476:	e7fe      	b.n	8010476 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8010478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047a:	2b00      	cmp	r3, #0
 801047c:	d01e      	beq.n	80104bc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801047e:	f000 fae7 	bl	8010a50 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8010482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010484:	68fa      	ldr	r2, [r7, #12]
 8010486:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048a:	68ba      	ldr	r2, [r7, #8]
 801048c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801048e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010490:	683a      	ldr	r2, [r7, #0]
 8010492:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	6a3a      	ldr	r2, [r7, #32]
 8010498:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801049a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049c:	3304      	adds	r3, #4
 801049e:	4618      	mov	r0, r3
 80104a0:	f7fd ffc4 	bl	800e42c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d008      	beq.n	80104bc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80104aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104b0:	f043 0304 	orr.w	r3, r3, #4
 80104b4:	b2da      	uxtb	r2, r3
 80104b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80104bc:	bf00      	nop
 80104be:	3718      	adds	r7, #24
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b08a      	sub	sp, #40	; 0x28
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
 80104d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80104d2:	2300      	movs	r3, #0
 80104d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d10a      	bne.n	80104f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80104dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e0:	f383 8811 	msr	BASEPRI, r3
 80104e4:	f3bf 8f6f 	isb	sy
 80104e8:	f3bf 8f4f 	dsb	sy
 80104ec:	623b      	str	r3, [r7, #32]
}
 80104ee:	bf00      	nop
 80104f0:	e7fe      	b.n	80104f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80104f2:	4b1a      	ldr	r3, [pc, #104]	; (801055c <xTimerGenericCommand+0x98>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d02a      	beq.n	8010550 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	2b05      	cmp	r3, #5
 801050a:	dc18      	bgt.n	801053e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801050c:	f7ff fc54 	bl	800fdb8 <xTaskGetSchedulerState>
 8010510:	4603      	mov	r3, r0
 8010512:	2b02      	cmp	r3, #2
 8010514:	d109      	bne.n	801052a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010516:	4b11      	ldr	r3, [pc, #68]	; (801055c <xTimerGenericCommand+0x98>)
 8010518:	6818      	ldr	r0, [r3, #0]
 801051a:	f107 0110 	add.w	r1, r7, #16
 801051e:	2300      	movs	r3, #0
 8010520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010522:	f7fe f955 	bl	800e7d0 <xQueueGenericSend>
 8010526:	6278      	str	r0, [r7, #36]	; 0x24
 8010528:	e012      	b.n	8010550 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801052a:	4b0c      	ldr	r3, [pc, #48]	; (801055c <xTimerGenericCommand+0x98>)
 801052c:	6818      	ldr	r0, [r3, #0]
 801052e:	f107 0110 	add.w	r1, r7, #16
 8010532:	2300      	movs	r3, #0
 8010534:	2200      	movs	r2, #0
 8010536:	f7fe f94b 	bl	800e7d0 <xQueueGenericSend>
 801053a:	6278      	str	r0, [r7, #36]	; 0x24
 801053c:	e008      	b.n	8010550 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801053e:	4b07      	ldr	r3, [pc, #28]	; (801055c <xTimerGenericCommand+0x98>)
 8010540:	6818      	ldr	r0, [r3, #0]
 8010542:	f107 0110 	add.w	r1, r7, #16
 8010546:	2300      	movs	r3, #0
 8010548:	683a      	ldr	r2, [r7, #0]
 801054a:	f7fe fa3f 	bl	800e9cc <xQueueGenericSendFromISR>
 801054e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010552:	4618      	mov	r0, r3
 8010554:	3728      	adds	r7, #40	; 0x28
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	20000df0 	.word	0x20000df0

08010560 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b088      	sub	sp, #32
 8010564:	af02      	add	r7, sp, #8
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801056a:	4b22      	ldr	r3, [pc, #136]	; (80105f4 <prvProcessExpiredTimer+0x94>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	68db      	ldr	r3, [r3, #12]
 8010572:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	3304      	adds	r3, #4
 8010578:	4618      	mov	r0, r3
 801057a:	f7fd ffc1 	bl	800e500 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010584:	f003 0304 	and.w	r3, r3, #4
 8010588:	2b00      	cmp	r3, #0
 801058a:	d022      	beq.n	80105d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	699a      	ldr	r2, [r3, #24]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	18d1      	adds	r1, r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	6978      	ldr	r0, [r7, #20]
 801059a:	f000 f8d1 	bl	8010740 <prvInsertTimerInActiveList>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d01f      	beq.n	80105e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105a4:	2300      	movs	r3, #0
 80105a6:	9300      	str	r3, [sp, #0]
 80105a8:	2300      	movs	r3, #0
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	2100      	movs	r1, #0
 80105ae:	6978      	ldr	r0, [r7, #20]
 80105b0:	f7ff ff88 	bl	80104c4 <xTimerGenericCommand>
 80105b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d113      	bne.n	80105e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80105bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c0:	f383 8811 	msr	BASEPRI, r3
 80105c4:	f3bf 8f6f 	isb	sy
 80105c8:	f3bf 8f4f 	dsb	sy
 80105cc:	60fb      	str	r3, [r7, #12]
}
 80105ce:	bf00      	nop
 80105d0:	e7fe      	b.n	80105d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105d8:	f023 0301 	bic.w	r3, r3, #1
 80105dc:	b2da      	uxtb	r2, r3
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	6a1b      	ldr	r3, [r3, #32]
 80105e8:	6978      	ldr	r0, [r7, #20]
 80105ea:	4798      	blx	r3
}
 80105ec:	bf00      	nop
 80105ee:	3718      	adds	r7, #24
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	20000de8 	.word	0x20000de8

080105f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010600:	f107 0308 	add.w	r3, r7, #8
 8010604:	4618      	mov	r0, r3
 8010606:	f000 f857 	bl	80106b8 <prvGetNextExpireTime>
 801060a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	4619      	mov	r1, r3
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	f000 f803 	bl	801061c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010616:	f000 f8d5 	bl	80107c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801061a:	e7f1      	b.n	8010600 <prvTimerTask+0x8>

0801061c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010626:	f7fe ffdb 	bl	800f5e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801062a:	f107 0308 	add.w	r3, r7, #8
 801062e:	4618      	mov	r0, r3
 8010630:	f000 f866 	bl	8010700 <prvSampleTimeNow>
 8010634:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d130      	bne.n	801069e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d10a      	bne.n	8010658 <prvProcessTimerOrBlockTask+0x3c>
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	429a      	cmp	r2, r3
 8010648:	d806      	bhi.n	8010658 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801064a:	f7fe ffd7 	bl	800f5fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801064e:	68f9      	ldr	r1, [r7, #12]
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f7ff ff85 	bl	8010560 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010656:	e024      	b.n	80106a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d008      	beq.n	8010670 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801065e:	4b13      	ldr	r3, [pc, #76]	; (80106ac <prvProcessTimerOrBlockTask+0x90>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d101      	bne.n	801066c <prvProcessTimerOrBlockTask+0x50>
 8010668:	2301      	movs	r3, #1
 801066a:	e000      	b.n	801066e <prvProcessTimerOrBlockTask+0x52>
 801066c:	2300      	movs	r3, #0
 801066e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010670:	4b0f      	ldr	r3, [pc, #60]	; (80106b0 <prvProcessTimerOrBlockTask+0x94>)
 8010672:	6818      	ldr	r0, [r3, #0]
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	1ad3      	subs	r3, r2, r3
 801067a:	683a      	ldr	r2, [r7, #0]
 801067c:	4619      	mov	r1, r3
 801067e:	f7fe fd1f 	bl	800f0c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010682:	f7fe ffbb 	bl	800f5fc <xTaskResumeAll>
 8010686:	4603      	mov	r3, r0
 8010688:	2b00      	cmp	r3, #0
 801068a:	d10a      	bne.n	80106a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801068c:	4b09      	ldr	r3, [pc, #36]	; (80106b4 <prvProcessTimerOrBlockTask+0x98>)
 801068e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010692:	601a      	str	r2, [r3, #0]
 8010694:	f3bf 8f4f 	dsb	sy
 8010698:	f3bf 8f6f 	isb	sy
}
 801069c:	e001      	b.n	80106a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801069e:	f7fe ffad 	bl	800f5fc <xTaskResumeAll>
}
 80106a2:	bf00      	nop
 80106a4:	3710      	adds	r7, #16
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	20000dec 	.word	0x20000dec
 80106b0:	20000df0 	.word	0x20000df0
 80106b4:	e000ed04 	.word	0xe000ed04

080106b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80106b8:	b480      	push	{r7}
 80106ba:	b085      	sub	sp, #20
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80106c0:	4b0e      	ldr	r3, [pc, #56]	; (80106fc <prvGetNextExpireTime+0x44>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d101      	bne.n	80106ce <prvGetNextExpireTime+0x16>
 80106ca:	2201      	movs	r2, #1
 80106cc:	e000      	b.n	80106d0 <prvGetNextExpireTime+0x18>
 80106ce:	2200      	movs	r2, #0
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d105      	bne.n	80106e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106dc:	4b07      	ldr	r3, [pc, #28]	; (80106fc <prvGetNextExpireTime+0x44>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	68db      	ldr	r3, [r3, #12]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	60fb      	str	r3, [r7, #12]
 80106e6:	e001      	b.n	80106ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80106e8:	2300      	movs	r3, #0
 80106ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80106ec:	68fb      	ldr	r3, [r7, #12]
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3714      	adds	r7, #20
 80106f2:	46bd      	mov	sp, r7
 80106f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f8:	4770      	bx	lr
 80106fa:	bf00      	nop
 80106fc:	20000de8 	.word	0x20000de8

08010700 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010708:	f7ff f816 	bl	800f738 <xTaskGetTickCount>
 801070c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801070e:	4b0b      	ldr	r3, [pc, #44]	; (801073c <prvSampleTimeNow+0x3c>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	68fa      	ldr	r2, [r7, #12]
 8010714:	429a      	cmp	r2, r3
 8010716:	d205      	bcs.n	8010724 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010718:	f000 f936 	bl	8010988 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2201      	movs	r2, #1
 8010720:	601a      	str	r2, [r3, #0]
 8010722:	e002      	b.n	801072a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2200      	movs	r2, #0
 8010728:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801072a:	4a04      	ldr	r2, [pc, #16]	; (801073c <prvSampleTimeNow+0x3c>)
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010730:	68fb      	ldr	r3, [r7, #12]
}
 8010732:	4618      	mov	r0, r3
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	20000df8 	.word	0x20000df8

08010740 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b086      	sub	sp, #24
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
 801074c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801074e:	2300      	movs	r3, #0
 8010750:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	68ba      	ldr	r2, [r7, #8]
 8010756:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	68fa      	ldr	r2, [r7, #12]
 801075c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801075e:	68ba      	ldr	r2, [r7, #8]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	429a      	cmp	r2, r3
 8010764:	d812      	bhi.n	801078c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	1ad2      	subs	r2, r2, r3
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	699b      	ldr	r3, [r3, #24]
 8010770:	429a      	cmp	r2, r3
 8010772:	d302      	bcc.n	801077a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010774:	2301      	movs	r3, #1
 8010776:	617b      	str	r3, [r7, #20]
 8010778:	e01b      	b.n	80107b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801077a:	4b10      	ldr	r3, [pc, #64]	; (80107bc <prvInsertTimerInActiveList+0x7c>)
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	3304      	adds	r3, #4
 8010782:	4619      	mov	r1, r3
 8010784:	4610      	mov	r0, r2
 8010786:	f7fd fe82 	bl	800e48e <vListInsert>
 801078a:	e012      	b.n	80107b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801078c:	687a      	ldr	r2, [r7, #4]
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	429a      	cmp	r2, r3
 8010792:	d206      	bcs.n	80107a2 <prvInsertTimerInActiveList+0x62>
 8010794:	68ba      	ldr	r2, [r7, #8]
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	429a      	cmp	r2, r3
 801079a:	d302      	bcc.n	80107a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801079c:	2301      	movs	r3, #1
 801079e:	617b      	str	r3, [r7, #20]
 80107a0:	e007      	b.n	80107b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80107a2:	4b07      	ldr	r3, [pc, #28]	; (80107c0 <prvInsertTimerInActiveList+0x80>)
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	3304      	adds	r3, #4
 80107aa:	4619      	mov	r1, r3
 80107ac:	4610      	mov	r0, r2
 80107ae:	f7fd fe6e 	bl	800e48e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80107b2:	697b      	ldr	r3, [r7, #20]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3718      	adds	r7, #24
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	20000dec 	.word	0x20000dec
 80107c0:	20000de8 	.word	0x20000de8

080107c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b08e      	sub	sp, #56	; 0x38
 80107c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80107ca:	e0ca      	b.n	8010962 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	da18      	bge.n	8010804 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80107d2:	1d3b      	adds	r3, r7, #4
 80107d4:	3304      	adds	r3, #4
 80107d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80107d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d10a      	bne.n	80107f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80107de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	61fb      	str	r3, [r7, #28]
}
 80107f0:	bf00      	nop
 80107f2:	e7fe      	b.n	80107f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80107f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107fa:	6850      	ldr	r0, [r2, #4]
 80107fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107fe:	6892      	ldr	r2, [r2, #8]
 8010800:	4611      	mov	r1, r2
 8010802:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2b00      	cmp	r3, #0
 8010808:	f2c0 80aa 	blt.w	8010960 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010812:	695b      	ldr	r3, [r3, #20]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d004      	beq.n	8010822 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081a:	3304      	adds	r3, #4
 801081c:	4618      	mov	r0, r3
 801081e:	f7fd fe6f 	bl	800e500 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010822:	463b      	mov	r3, r7
 8010824:	4618      	mov	r0, r3
 8010826:	f7ff ff6b 	bl	8010700 <prvSampleTimeNow>
 801082a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2b09      	cmp	r3, #9
 8010830:	f200 8097 	bhi.w	8010962 <prvProcessReceivedCommands+0x19e>
 8010834:	a201      	add	r2, pc, #4	; (adr r2, 801083c <prvProcessReceivedCommands+0x78>)
 8010836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801083a:	bf00      	nop
 801083c:	08010865 	.word	0x08010865
 8010840:	08010865 	.word	0x08010865
 8010844:	08010865 	.word	0x08010865
 8010848:	080108d9 	.word	0x080108d9
 801084c:	080108ed 	.word	0x080108ed
 8010850:	08010937 	.word	0x08010937
 8010854:	08010865 	.word	0x08010865
 8010858:	08010865 	.word	0x08010865
 801085c:	080108d9 	.word	0x080108d9
 8010860:	080108ed 	.word	0x080108ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801086a:	f043 0301 	orr.w	r3, r3, #1
 801086e:	b2da      	uxtb	r2, r3
 8010870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010876:	68ba      	ldr	r2, [r7, #8]
 8010878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087a:	699b      	ldr	r3, [r3, #24]
 801087c:	18d1      	adds	r1, r2, r3
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010884:	f7ff ff5c 	bl	8010740 <prvInsertTimerInActiveList>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d069      	beq.n	8010962 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801088e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010890:	6a1b      	ldr	r3, [r3, #32]
 8010892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010894:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801089c:	f003 0304 	and.w	r3, r3, #4
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d05e      	beq.n	8010962 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80108a4:	68ba      	ldr	r2, [r7, #8]
 80108a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a8:	699b      	ldr	r3, [r3, #24]
 80108aa:	441a      	add	r2, r3
 80108ac:	2300      	movs	r3, #0
 80108ae:	9300      	str	r3, [sp, #0]
 80108b0:	2300      	movs	r3, #0
 80108b2:	2100      	movs	r1, #0
 80108b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108b6:	f7ff fe05 	bl	80104c4 <xTimerGenericCommand>
 80108ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80108bc:	6a3b      	ldr	r3, [r7, #32]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d14f      	bne.n	8010962 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80108c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c6:	f383 8811 	msr	BASEPRI, r3
 80108ca:	f3bf 8f6f 	isb	sy
 80108ce:	f3bf 8f4f 	dsb	sy
 80108d2:	61bb      	str	r3, [r7, #24]
}
 80108d4:	bf00      	nop
 80108d6:	e7fe      	b.n	80108d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108de:	f023 0301 	bic.w	r3, r3, #1
 80108e2:	b2da      	uxtb	r2, r3
 80108e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80108ea:	e03a      	b.n	8010962 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80108ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108f2:	f043 0301 	orr.w	r3, r3, #1
 80108f6:	b2da      	uxtb	r2, r3
 80108f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80108fe:	68ba      	ldr	r2, [r7, #8]
 8010900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010902:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010906:	699b      	ldr	r3, [r3, #24]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d10a      	bne.n	8010922 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801090c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010910:	f383 8811 	msr	BASEPRI, r3
 8010914:	f3bf 8f6f 	isb	sy
 8010918:	f3bf 8f4f 	dsb	sy
 801091c:	617b      	str	r3, [r7, #20]
}
 801091e:	bf00      	nop
 8010920:	e7fe      	b.n	8010920 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010924:	699a      	ldr	r2, [r3, #24]
 8010926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010928:	18d1      	adds	r1, r2, r3
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801092e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010930:	f7ff ff06 	bl	8010740 <prvInsertTimerInActiveList>
					break;
 8010934:	e015      	b.n	8010962 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801093c:	f003 0302 	and.w	r3, r3, #2
 8010940:	2b00      	cmp	r3, #0
 8010942:	d103      	bne.n	801094c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010946:	f000 fbfb 	bl	8011140 <vPortFree>
 801094a:	e00a      	b.n	8010962 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010952:	f023 0301 	bic.w	r3, r3, #1
 8010956:	b2da      	uxtb	r2, r3
 8010958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801095e:	e000      	b.n	8010962 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010960:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010962:	4b08      	ldr	r3, [pc, #32]	; (8010984 <prvProcessReceivedCommands+0x1c0>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	1d39      	adds	r1, r7, #4
 8010968:	2200      	movs	r2, #0
 801096a:	4618      	mov	r0, r3
 801096c:	f7fe f8ca 	bl	800eb04 <xQueueReceive>
 8010970:	4603      	mov	r3, r0
 8010972:	2b00      	cmp	r3, #0
 8010974:	f47f af2a 	bne.w	80107cc <prvProcessReceivedCommands+0x8>
	}
}
 8010978:	bf00      	nop
 801097a:	bf00      	nop
 801097c:	3730      	adds	r7, #48	; 0x30
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	20000df0 	.word	0x20000df0

08010988 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b088      	sub	sp, #32
 801098c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801098e:	e048      	b.n	8010a22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010990:	4b2d      	ldr	r3, [pc, #180]	; (8010a48 <prvSwitchTimerLists+0xc0>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	68db      	ldr	r3, [r3, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801099a:	4b2b      	ldr	r3, [pc, #172]	; (8010a48 <prvSwitchTimerLists+0xc0>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	68db      	ldr	r3, [r3, #12]
 80109a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	3304      	adds	r3, #4
 80109a8:	4618      	mov	r0, r3
 80109aa:	f7fd fda9 	bl	800e500 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	6a1b      	ldr	r3, [r3, #32]
 80109b2:	68f8      	ldr	r0, [r7, #12]
 80109b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109bc:	f003 0304 	and.w	r3, r3, #4
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d02e      	beq.n	8010a22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	699b      	ldr	r3, [r3, #24]
 80109c8:	693a      	ldr	r2, [r7, #16]
 80109ca:	4413      	add	r3, r2
 80109cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80109ce:	68ba      	ldr	r2, [r7, #8]
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d90e      	bls.n	80109f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	68ba      	ldr	r2, [r7, #8]
 80109da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	68fa      	ldr	r2, [r7, #12]
 80109e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80109e2:	4b19      	ldr	r3, [pc, #100]	; (8010a48 <prvSwitchTimerLists+0xc0>)
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	3304      	adds	r3, #4
 80109ea:	4619      	mov	r1, r3
 80109ec:	4610      	mov	r0, r2
 80109ee:	f7fd fd4e 	bl	800e48e <vListInsert>
 80109f2:	e016      	b.n	8010a22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80109f4:	2300      	movs	r3, #0
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	2300      	movs	r3, #0
 80109fa:	693a      	ldr	r2, [r7, #16]
 80109fc:	2100      	movs	r1, #0
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f7ff fd60 	bl	80104c4 <xTimerGenericCommand>
 8010a04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d10a      	bne.n	8010a22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a10:	f383 8811 	msr	BASEPRI, r3
 8010a14:	f3bf 8f6f 	isb	sy
 8010a18:	f3bf 8f4f 	dsb	sy
 8010a1c:	603b      	str	r3, [r7, #0]
}
 8010a1e:	bf00      	nop
 8010a20:	e7fe      	b.n	8010a20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a22:	4b09      	ldr	r3, [pc, #36]	; (8010a48 <prvSwitchTimerLists+0xc0>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d1b1      	bne.n	8010990 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010a2c:	4b06      	ldr	r3, [pc, #24]	; (8010a48 <prvSwitchTimerLists+0xc0>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010a32:	4b06      	ldr	r3, [pc, #24]	; (8010a4c <prvSwitchTimerLists+0xc4>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4a04      	ldr	r2, [pc, #16]	; (8010a48 <prvSwitchTimerLists+0xc0>)
 8010a38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010a3a:	4a04      	ldr	r2, [pc, #16]	; (8010a4c <prvSwitchTimerLists+0xc4>)
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	6013      	str	r3, [r2, #0]
}
 8010a40:	bf00      	nop
 8010a42:	3718      	adds	r7, #24
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}
 8010a48:	20000de8 	.word	0x20000de8
 8010a4c:	20000dec 	.word	0x20000dec

08010a50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010a56:	f000 f985 	bl	8010d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010a5a:	4b15      	ldr	r3, [pc, #84]	; (8010ab0 <prvCheckForValidListAndQueue+0x60>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d120      	bne.n	8010aa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010a62:	4814      	ldr	r0, [pc, #80]	; (8010ab4 <prvCheckForValidListAndQueue+0x64>)
 8010a64:	f7fd fcc2 	bl	800e3ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010a68:	4813      	ldr	r0, [pc, #76]	; (8010ab8 <prvCheckForValidListAndQueue+0x68>)
 8010a6a:	f7fd fcbf 	bl	800e3ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010a6e:	4b13      	ldr	r3, [pc, #76]	; (8010abc <prvCheckForValidListAndQueue+0x6c>)
 8010a70:	4a10      	ldr	r2, [pc, #64]	; (8010ab4 <prvCheckForValidListAndQueue+0x64>)
 8010a72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010a74:	4b12      	ldr	r3, [pc, #72]	; (8010ac0 <prvCheckForValidListAndQueue+0x70>)
 8010a76:	4a10      	ldr	r2, [pc, #64]	; (8010ab8 <prvCheckForValidListAndQueue+0x68>)
 8010a78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	9300      	str	r3, [sp, #0]
 8010a7e:	4b11      	ldr	r3, [pc, #68]	; (8010ac4 <prvCheckForValidListAndQueue+0x74>)
 8010a80:	4a11      	ldr	r2, [pc, #68]	; (8010ac8 <prvCheckForValidListAndQueue+0x78>)
 8010a82:	2110      	movs	r1, #16
 8010a84:	200a      	movs	r0, #10
 8010a86:	f7fd fdcd 	bl	800e624 <xQueueGenericCreateStatic>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	4a08      	ldr	r2, [pc, #32]	; (8010ab0 <prvCheckForValidListAndQueue+0x60>)
 8010a8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010a90:	4b07      	ldr	r3, [pc, #28]	; (8010ab0 <prvCheckForValidListAndQueue+0x60>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d005      	beq.n	8010aa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010a98:	4b05      	ldr	r3, [pc, #20]	; (8010ab0 <prvCheckForValidListAndQueue+0x60>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	490b      	ldr	r1, [pc, #44]	; (8010acc <prvCheckForValidListAndQueue+0x7c>)
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fe fae4 	bl	800f06c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010aa4:	f000 f98e 	bl	8010dc4 <vPortExitCritical>
}
 8010aa8:	bf00      	nop
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	20000df0 	.word	0x20000df0
 8010ab4:	20000dc0 	.word	0x20000dc0
 8010ab8:	20000dd4 	.word	0x20000dd4
 8010abc:	20000de8 	.word	0x20000de8
 8010ac0:	20000dec 	.word	0x20000dec
 8010ac4:	20000e9c 	.word	0x20000e9c
 8010ac8:	20000dfc 	.word	0x20000dfc
 8010acc:	08012990 	.word	0x08012990

08010ad0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b086      	sub	sp, #24
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d10a      	bne.n	8010af8 <pvTimerGetTimerID+0x28>
	__asm volatile
 8010ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae6:	f383 8811 	msr	BASEPRI, r3
 8010aea:	f3bf 8f6f 	isb	sy
 8010aee:	f3bf 8f4f 	dsb	sy
 8010af2:	60fb      	str	r3, [r7, #12]
}
 8010af4:	bf00      	nop
 8010af6:	e7fe      	b.n	8010af6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8010af8:	f000 f934 	bl	8010d64 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	69db      	ldr	r3, [r3, #28]
 8010b00:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8010b02:	f000 f95f 	bl	8010dc4 <vPortExitCritical>

	return pvReturn;
 8010b06:	693b      	ldr	r3, [r7, #16]
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3718      	adds	r7, #24
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b10:	b480      	push	{r7}
 8010b12:	b085      	sub	sp, #20
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	60f8      	str	r0, [r7, #12]
 8010b18:	60b9      	str	r1, [r7, #8]
 8010b1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	3b04      	subs	r3, #4
 8010b20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	3b04      	subs	r3, #4
 8010b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	f023 0201 	bic.w	r2, r3, #1
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	3b04      	subs	r3, #4
 8010b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010b40:	4a0c      	ldr	r2, [pc, #48]	; (8010b74 <pxPortInitialiseStack+0x64>)
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	3b14      	subs	r3, #20
 8010b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	3b04      	subs	r3, #4
 8010b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f06f 0202 	mvn.w	r2, #2
 8010b5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	3b20      	subs	r3, #32
 8010b64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b66:	68fb      	ldr	r3, [r7, #12]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3714      	adds	r7, #20
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr
 8010b74:	08010b79 	.word	0x08010b79

08010b78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b085      	sub	sp, #20
 8010b7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b82:	4b12      	ldr	r3, [pc, #72]	; (8010bcc <prvTaskExitError+0x54>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b8a:	d00a      	beq.n	8010ba2 <prvTaskExitError+0x2a>
	__asm volatile
 8010b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b90:	f383 8811 	msr	BASEPRI, r3
 8010b94:	f3bf 8f6f 	isb	sy
 8010b98:	f3bf 8f4f 	dsb	sy
 8010b9c:	60fb      	str	r3, [r7, #12]
}
 8010b9e:	bf00      	nop
 8010ba0:	e7fe      	b.n	8010ba0 <prvTaskExitError+0x28>
	__asm volatile
 8010ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba6:	f383 8811 	msr	BASEPRI, r3
 8010baa:	f3bf 8f6f 	isb	sy
 8010bae:	f3bf 8f4f 	dsb	sy
 8010bb2:	60bb      	str	r3, [r7, #8]
}
 8010bb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010bb6:	bf00      	nop
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d0fc      	beq.n	8010bb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010bbe:	bf00      	nop
 8010bc0:	bf00      	nop
 8010bc2:	3714      	adds	r7, #20
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr
 8010bcc:	20000040 	.word	0x20000040

08010bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010bd0:	4b07      	ldr	r3, [pc, #28]	; (8010bf0 <pxCurrentTCBConst2>)
 8010bd2:	6819      	ldr	r1, [r3, #0]
 8010bd4:	6808      	ldr	r0, [r1, #0]
 8010bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bda:	f380 8809 	msr	PSP, r0
 8010bde:	f3bf 8f6f 	isb	sy
 8010be2:	f04f 0000 	mov.w	r0, #0
 8010be6:	f380 8811 	msr	BASEPRI, r0
 8010bea:	4770      	bx	lr
 8010bec:	f3af 8000 	nop.w

08010bf0 <pxCurrentTCBConst2>:
 8010bf0:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010bf4:	bf00      	nop
 8010bf6:	bf00      	nop

08010bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010bf8:	4808      	ldr	r0, [pc, #32]	; (8010c1c <prvPortStartFirstTask+0x24>)
 8010bfa:	6800      	ldr	r0, [r0, #0]
 8010bfc:	6800      	ldr	r0, [r0, #0]
 8010bfe:	f380 8808 	msr	MSP, r0
 8010c02:	f04f 0000 	mov.w	r0, #0
 8010c06:	f380 8814 	msr	CONTROL, r0
 8010c0a:	b662      	cpsie	i
 8010c0c:	b661      	cpsie	f
 8010c0e:	f3bf 8f4f 	dsb	sy
 8010c12:	f3bf 8f6f 	isb	sy
 8010c16:	df00      	svc	0
 8010c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010c1a:	bf00      	nop
 8010c1c:	e000ed08 	.word	0xe000ed08

08010c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b086      	sub	sp, #24
 8010c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010c26:	4b46      	ldr	r3, [pc, #280]	; (8010d40 <xPortStartScheduler+0x120>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	4a46      	ldr	r2, [pc, #280]	; (8010d44 <xPortStartScheduler+0x124>)
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	d10a      	bne.n	8010c46 <xPortStartScheduler+0x26>
	__asm volatile
 8010c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c34:	f383 8811 	msr	BASEPRI, r3
 8010c38:	f3bf 8f6f 	isb	sy
 8010c3c:	f3bf 8f4f 	dsb	sy
 8010c40:	613b      	str	r3, [r7, #16]
}
 8010c42:	bf00      	nop
 8010c44:	e7fe      	b.n	8010c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010c46:	4b3e      	ldr	r3, [pc, #248]	; (8010d40 <xPortStartScheduler+0x120>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	4a3f      	ldr	r2, [pc, #252]	; (8010d48 <xPortStartScheduler+0x128>)
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d10a      	bne.n	8010c66 <xPortStartScheduler+0x46>
	__asm volatile
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	60fb      	str	r3, [r7, #12]
}
 8010c62:	bf00      	nop
 8010c64:	e7fe      	b.n	8010c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010c66:	4b39      	ldr	r3, [pc, #228]	; (8010d4c <xPortStartScheduler+0x12c>)
 8010c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	b2db      	uxtb	r3, r3
 8010c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	22ff      	movs	r2, #255	; 0xff
 8010c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	b2db      	uxtb	r3, r3
 8010c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010c80:	78fb      	ldrb	r3, [r7, #3]
 8010c82:	b2db      	uxtb	r3, r3
 8010c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010c88:	b2da      	uxtb	r2, r3
 8010c8a:	4b31      	ldr	r3, [pc, #196]	; (8010d50 <xPortStartScheduler+0x130>)
 8010c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010c8e:	4b31      	ldr	r3, [pc, #196]	; (8010d54 <xPortStartScheduler+0x134>)
 8010c90:	2207      	movs	r2, #7
 8010c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c94:	e009      	b.n	8010caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010c96:	4b2f      	ldr	r3, [pc, #188]	; (8010d54 <xPortStartScheduler+0x134>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	3b01      	subs	r3, #1
 8010c9c:	4a2d      	ldr	r2, [pc, #180]	; (8010d54 <xPortStartScheduler+0x134>)
 8010c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010ca0:	78fb      	ldrb	r3, [r7, #3]
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	005b      	lsls	r3, r3, #1
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010caa:	78fb      	ldrb	r3, [r7, #3]
 8010cac:	b2db      	uxtb	r3, r3
 8010cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cb2:	2b80      	cmp	r3, #128	; 0x80
 8010cb4:	d0ef      	beq.n	8010c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010cb6:	4b27      	ldr	r3, [pc, #156]	; (8010d54 <xPortStartScheduler+0x134>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f1c3 0307 	rsb	r3, r3, #7
 8010cbe:	2b04      	cmp	r3, #4
 8010cc0:	d00a      	beq.n	8010cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc6:	f383 8811 	msr	BASEPRI, r3
 8010cca:	f3bf 8f6f 	isb	sy
 8010cce:	f3bf 8f4f 	dsb	sy
 8010cd2:	60bb      	str	r3, [r7, #8]
}
 8010cd4:	bf00      	nop
 8010cd6:	e7fe      	b.n	8010cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010cd8:	4b1e      	ldr	r3, [pc, #120]	; (8010d54 <xPortStartScheduler+0x134>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	021b      	lsls	r3, r3, #8
 8010cde:	4a1d      	ldr	r2, [pc, #116]	; (8010d54 <xPortStartScheduler+0x134>)
 8010ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010ce2:	4b1c      	ldr	r3, [pc, #112]	; (8010d54 <xPortStartScheduler+0x134>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010cea:	4a1a      	ldr	r2, [pc, #104]	; (8010d54 <xPortStartScheduler+0x134>)
 8010cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	b2da      	uxtb	r2, r3
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010cf6:	4b18      	ldr	r3, [pc, #96]	; (8010d58 <xPortStartScheduler+0x138>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	4a17      	ldr	r2, [pc, #92]	; (8010d58 <xPortStartScheduler+0x138>)
 8010cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d02:	4b15      	ldr	r3, [pc, #84]	; (8010d58 <xPortStartScheduler+0x138>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4a14      	ldr	r2, [pc, #80]	; (8010d58 <xPortStartScheduler+0x138>)
 8010d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d0e:	f000 f8dd 	bl	8010ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d12:	4b12      	ldr	r3, [pc, #72]	; (8010d5c <xPortStartScheduler+0x13c>)
 8010d14:	2200      	movs	r2, #0
 8010d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010d18:	f000 f8fc 	bl	8010f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010d1c:	4b10      	ldr	r3, [pc, #64]	; (8010d60 <xPortStartScheduler+0x140>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	4a0f      	ldr	r2, [pc, #60]	; (8010d60 <xPortStartScheduler+0x140>)
 8010d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d28:	f7ff ff66 	bl	8010bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010d2c:	f7fe fdce 	bl	800f8cc <vTaskSwitchContext>
	prvTaskExitError();
 8010d30:	f7ff ff22 	bl	8010b78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010d34:	2300      	movs	r3, #0
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3718      	adds	r7, #24
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	e000ed00 	.word	0xe000ed00
 8010d44:	410fc271 	.word	0x410fc271
 8010d48:	410fc270 	.word	0x410fc270
 8010d4c:	e000e400 	.word	0xe000e400
 8010d50:	20000eec 	.word	0x20000eec
 8010d54:	20000ef0 	.word	0x20000ef0
 8010d58:	e000ed20 	.word	0xe000ed20
 8010d5c:	20000040 	.word	0x20000040
 8010d60:	e000ef34 	.word	0xe000ef34

08010d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010d64:	b480      	push	{r7}
 8010d66:	b083      	sub	sp, #12
 8010d68:	af00      	add	r7, sp, #0
	__asm volatile
 8010d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6e:	f383 8811 	msr	BASEPRI, r3
 8010d72:	f3bf 8f6f 	isb	sy
 8010d76:	f3bf 8f4f 	dsb	sy
 8010d7a:	607b      	str	r3, [r7, #4]
}
 8010d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010d7e:	4b0f      	ldr	r3, [pc, #60]	; (8010dbc <vPortEnterCritical+0x58>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	3301      	adds	r3, #1
 8010d84:	4a0d      	ldr	r2, [pc, #52]	; (8010dbc <vPortEnterCritical+0x58>)
 8010d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010d88:	4b0c      	ldr	r3, [pc, #48]	; (8010dbc <vPortEnterCritical+0x58>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	d10f      	bne.n	8010db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010d90:	4b0b      	ldr	r3, [pc, #44]	; (8010dc0 <vPortEnterCritical+0x5c>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d00a      	beq.n	8010db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9e:	f383 8811 	msr	BASEPRI, r3
 8010da2:	f3bf 8f6f 	isb	sy
 8010da6:	f3bf 8f4f 	dsb	sy
 8010daa:	603b      	str	r3, [r7, #0]
}
 8010dac:	bf00      	nop
 8010dae:	e7fe      	b.n	8010dae <vPortEnterCritical+0x4a>
	}
}
 8010db0:	bf00      	nop
 8010db2:	370c      	adds	r7, #12
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr
 8010dbc:	20000040 	.word	0x20000040
 8010dc0:	e000ed04 	.word	0xe000ed04

08010dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010dca:	4b12      	ldr	r3, [pc, #72]	; (8010e14 <vPortExitCritical+0x50>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d10a      	bne.n	8010de8 <vPortExitCritical+0x24>
	__asm volatile
 8010dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd6:	f383 8811 	msr	BASEPRI, r3
 8010dda:	f3bf 8f6f 	isb	sy
 8010dde:	f3bf 8f4f 	dsb	sy
 8010de2:	607b      	str	r3, [r7, #4]
}
 8010de4:	bf00      	nop
 8010de6:	e7fe      	b.n	8010de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010de8:	4b0a      	ldr	r3, [pc, #40]	; (8010e14 <vPortExitCritical+0x50>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	3b01      	subs	r3, #1
 8010dee:	4a09      	ldr	r2, [pc, #36]	; (8010e14 <vPortExitCritical+0x50>)
 8010df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010df2:	4b08      	ldr	r3, [pc, #32]	; (8010e14 <vPortExitCritical+0x50>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d105      	bne.n	8010e06 <vPortExitCritical+0x42>
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	f383 8811 	msr	BASEPRI, r3
}
 8010e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010e06:	bf00      	nop
 8010e08:	370c      	adds	r7, #12
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e10:	4770      	bx	lr
 8010e12:	bf00      	nop
 8010e14:	20000040 	.word	0x20000040
	...

08010e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e20:	f3ef 8009 	mrs	r0, PSP
 8010e24:	f3bf 8f6f 	isb	sy
 8010e28:	4b15      	ldr	r3, [pc, #84]	; (8010e80 <pxCurrentTCBConst>)
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	f01e 0f10 	tst.w	lr, #16
 8010e30:	bf08      	it	eq
 8010e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e3a:	6010      	str	r0, [r2, #0]
 8010e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010e44:	f380 8811 	msr	BASEPRI, r0
 8010e48:	f3bf 8f4f 	dsb	sy
 8010e4c:	f3bf 8f6f 	isb	sy
 8010e50:	f7fe fd3c 	bl	800f8cc <vTaskSwitchContext>
 8010e54:	f04f 0000 	mov.w	r0, #0
 8010e58:	f380 8811 	msr	BASEPRI, r0
 8010e5c:	bc09      	pop	{r0, r3}
 8010e5e:	6819      	ldr	r1, [r3, #0]
 8010e60:	6808      	ldr	r0, [r1, #0]
 8010e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e66:	f01e 0f10 	tst.w	lr, #16
 8010e6a:	bf08      	it	eq
 8010e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010e70:	f380 8809 	msr	PSP, r0
 8010e74:	f3bf 8f6f 	isb	sy
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop
 8010e7c:	f3af 8000 	nop.w

08010e80 <pxCurrentTCBConst>:
 8010e80:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010e84:	bf00      	nop
 8010e86:	bf00      	nop

08010e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8010e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e92:	f383 8811 	msr	BASEPRI, r3
 8010e96:	f3bf 8f6f 	isb	sy
 8010e9a:	f3bf 8f4f 	dsb	sy
 8010e9e:	607b      	str	r3, [r7, #4]
}
 8010ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010ea2:	f7fe fc59 	bl	800f758 <xTaskIncrementTick>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d003      	beq.n	8010eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010eac:	4b06      	ldr	r3, [pc, #24]	; (8010ec8 <xPortSysTickHandler+0x40>)
 8010eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010eb2:	601a      	str	r2, [r3, #0]
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	f383 8811 	msr	BASEPRI, r3
}
 8010ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010ec0:	bf00      	nop
 8010ec2:	3708      	adds	r7, #8
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	e000ed04 	.word	0xe000ed04

08010ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010ecc:	b480      	push	{r7}
 8010ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010ed0:	4b0b      	ldr	r3, [pc, #44]	; (8010f00 <vPortSetupTimerInterrupt+0x34>)
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010ed6:	4b0b      	ldr	r3, [pc, #44]	; (8010f04 <vPortSetupTimerInterrupt+0x38>)
 8010ed8:	2200      	movs	r2, #0
 8010eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010edc:	4b0a      	ldr	r3, [pc, #40]	; (8010f08 <vPortSetupTimerInterrupt+0x3c>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4a0a      	ldr	r2, [pc, #40]	; (8010f0c <vPortSetupTimerInterrupt+0x40>)
 8010ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ee6:	099b      	lsrs	r3, r3, #6
 8010ee8:	4a09      	ldr	r2, [pc, #36]	; (8010f10 <vPortSetupTimerInterrupt+0x44>)
 8010eea:	3b01      	subs	r3, #1
 8010eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010eee:	4b04      	ldr	r3, [pc, #16]	; (8010f00 <vPortSetupTimerInterrupt+0x34>)
 8010ef0:	2207      	movs	r2, #7
 8010ef2:	601a      	str	r2, [r3, #0]
}
 8010ef4:	bf00      	nop
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efc:	4770      	bx	lr
 8010efe:	bf00      	nop
 8010f00:	e000e010 	.word	0xe000e010
 8010f04:	e000e018 	.word	0xe000e018
 8010f08:	20000014 	.word	0x20000014
 8010f0c:	10624dd3 	.word	0x10624dd3
 8010f10:	e000e014 	.word	0xe000e014

08010f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010f24 <vPortEnableVFP+0x10>
 8010f18:	6801      	ldr	r1, [r0, #0]
 8010f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010f1e:	6001      	str	r1, [r0, #0]
 8010f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010f22:	bf00      	nop
 8010f24:	e000ed88 	.word	0xe000ed88

08010f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010f28:	b480      	push	{r7}
 8010f2a:	b085      	sub	sp, #20
 8010f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010f2e:	f3ef 8305 	mrs	r3, IPSR
 8010f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2b0f      	cmp	r3, #15
 8010f38:	d914      	bls.n	8010f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010f3a:	4a17      	ldr	r2, [pc, #92]	; (8010f98 <vPortValidateInterruptPriority+0x70>)
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	4413      	add	r3, r2
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010f44:	4b15      	ldr	r3, [pc, #84]	; (8010f9c <vPortValidateInterruptPriority+0x74>)
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	7afa      	ldrb	r2, [r7, #11]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d20a      	bcs.n	8010f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f52:	f383 8811 	msr	BASEPRI, r3
 8010f56:	f3bf 8f6f 	isb	sy
 8010f5a:	f3bf 8f4f 	dsb	sy
 8010f5e:	607b      	str	r3, [r7, #4]
}
 8010f60:	bf00      	nop
 8010f62:	e7fe      	b.n	8010f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010f64:	4b0e      	ldr	r3, [pc, #56]	; (8010fa0 <vPortValidateInterruptPriority+0x78>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010f6c:	4b0d      	ldr	r3, [pc, #52]	; (8010fa4 <vPortValidateInterruptPriority+0x7c>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d90a      	bls.n	8010f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f78:	f383 8811 	msr	BASEPRI, r3
 8010f7c:	f3bf 8f6f 	isb	sy
 8010f80:	f3bf 8f4f 	dsb	sy
 8010f84:	603b      	str	r3, [r7, #0]
}
 8010f86:	bf00      	nop
 8010f88:	e7fe      	b.n	8010f88 <vPortValidateInterruptPriority+0x60>
	}
 8010f8a:	bf00      	nop
 8010f8c:	3714      	adds	r7, #20
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop
 8010f98:	e000e3f0 	.word	0xe000e3f0
 8010f9c:	20000eec 	.word	0x20000eec
 8010fa0:	e000ed0c 	.word	0xe000ed0c
 8010fa4:	20000ef0 	.word	0x20000ef0

08010fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b08a      	sub	sp, #40	; 0x28
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010fb4:	f7fe fb14 	bl	800f5e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010fb8:	4b5b      	ldr	r3, [pc, #364]	; (8011128 <pvPortMalloc+0x180>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d101      	bne.n	8010fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010fc0:	f000 f920 	bl	8011204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010fc4:	4b59      	ldr	r3, [pc, #356]	; (801112c <pvPortMalloc+0x184>)
 8010fc6:	681a      	ldr	r2, [r3, #0]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	4013      	ands	r3, r2
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	f040 8093 	bne.w	80110f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d01d      	beq.n	8011014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010fd8:	2208      	movs	r2, #8
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	4413      	add	r3, r2
 8010fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f003 0307 	and.w	r3, r3, #7
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d014      	beq.n	8011014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f023 0307 	bic.w	r3, r3, #7
 8010ff0:	3308      	adds	r3, #8
 8010ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f003 0307 	and.w	r3, r3, #7
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d00a      	beq.n	8011014 <pvPortMalloc+0x6c>
	__asm volatile
 8010ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011002:	f383 8811 	msr	BASEPRI, r3
 8011006:	f3bf 8f6f 	isb	sy
 801100a:	f3bf 8f4f 	dsb	sy
 801100e:	617b      	str	r3, [r7, #20]
}
 8011010:	bf00      	nop
 8011012:	e7fe      	b.n	8011012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d06e      	beq.n	80110f8 <pvPortMalloc+0x150>
 801101a:	4b45      	ldr	r3, [pc, #276]	; (8011130 <pvPortMalloc+0x188>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	429a      	cmp	r2, r3
 8011022:	d869      	bhi.n	80110f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011024:	4b43      	ldr	r3, [pc, #268]	; (8011134 <pvPortMalloc+0x18c>)
 8011026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011028:	4b42      	ldr	r3, [pc, #264]	; (8011134 <pvPortMalloc+0x18c>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801102e:	e004      	b.n	801103a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	687a      	ldr	r2, [r7, #4]
 8011040:	429a      	cmp	r2, r3
 8011042:	d903      	bls.n	801104c <pvPortMalloc+0xa4>
 8011044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d1f1      	bne.n	8011030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801104c:	4b36      	ldr	r3, [pc, #216]	; (8011128 <pvPortMalloc+0x180>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011052:	429a      	cmp	r2, r3
 8011054:	d050      	beq.n	80110f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011056:	6a3b      	ldr	r3, [r7, #32]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	2208      	movs	r2, #8
 801105c:	4413      	add	r3, r2
 801105e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	6a3b      	ldr	r3, [r7, #32]
 8011066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106a:	685a      	ldr	r2, [r3, #4]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	1ad2      	subs	r2, r2, r3
 8011070:	2308      	movs	r3, #8
 8011072:	005b      	lsls	r3, r3, #1
 8011074:	429a      	cmp	r2, r3
 8011076:	d91f      	bls.n	80110b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	4413      	add	r3, r2
 801107e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011080:	69bb      	ldr	r3, [r7, #24]
 8011082:	f003 0307 	and.w	r3, r3, #7
 8011086:	2b00      	cmp	r3, #0
 8011088:	d00a      	beq.n	80110a0 <pvPortMalloc+0xf8>
	__asm volatile
 801108a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801108e:	f383 8811 	msr	BASEPRI, r3
 8011092:	f3bf 8f6f 	isb	sy
 8011096:	f3bf 8f4f 	dsb	sy
 801109a:	613b      	str	r3, [r7, #16]
}
 801109c:	bf00      	nop
 801109e:	e7fe      	b.n	801109e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80110a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a2:	685a      	ldr	r2, [r3, #4]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	1ad2      	subs	r2, r2, r3
 80110a8:	69bb      	ldr	r3, [r7, #24]
 80110aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80110ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ae:	687a      	ldr	r2, [r7, #4]
 80110b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80110b2:	69b8      	ldr	r0, [r7, #24]
 80110b4:	f000 f908 	bl	80112c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80110b8:	4b1d      	ldr	r3, [pc, #116]	; (8011130 <pvPortMalloc+0x188>)
 80110ba:	681a      	ldr	r2, [r3, #0]
 80110bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	4a1b      	ldr	r2, [pc, #108]	; (8011130 <pvPortMalloc+0x188>)
 80110c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80110c6:	4b1a      	ldr	r3, [pc, #104]	; (8011130 <pvPortMalloc+0x188>)
 80110c8:	681a      	ldr	r2, [r3, #0]
 80110ca:	4b1b      	ldr	r3, [pc, #108]	; (8011138 <pvPortMalloc+0x190>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d203      	bcs.n	80110da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80110d2:	4b17      	ldr	r3, [pc, #92]	; (8011130 <pvPortMalloc+0x188>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	4a18      	ldr	r2, [pc, #96]	; (8011138 <pvPortMalloc+0x190>)
 80110d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80110da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110dc:	685a      	ldr	r2, [r3, #4]
 80110de:	4b13      	ldr	r3, [pc, #76]	; (801112c <pvPortMalloc+0x184>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	431a      	orrs	r2, r3
 80110e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80110e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ea:	2200      	movs	r2, #0
 80110ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80110ee:	4b13      	ldr	r3, [pc, #76]	; (801113c <pvPortMalloc+0x194>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	3301      	adds	r3, #1
 80110f4:	4a11      	ldr	r2, [pc, #68]	; (801113c <pvPortMalloc+0x194>)
 80110f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80110f8:	f7fe fa80 	bl	800f5fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80110fc:	69fb      	ldr	r3, [r7, #28]
 80110fe:	f003 0307 	and.w	r3, r3, #7
 8011102:	2b00      	cmp	r3, #0
 8011104:	d00a      	beq.n	801111c <pvPortMalloc+0x174>
	__asm volatile
 8011106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110a:	f383 8811 	msr	BASEPRI, r3
 801110e:	f3bf 8f6f 	isb	sy
 8011112:	f3bf 8f4f 	dsb	sy
 8011116:	60fb      	str	r3, [r7, #12]
}
 8011118:	bf00      	nop
 801111a:	e7fe      	b.n	801111a <pvPortMalloc+0x172>
	return pvReturn;
 801111c:	69fb      	ldr	r3, [r7, #28]
}
 801111e:	4618      	mov	r0, r3
 8011120:	3728      	adds	r7, #40	; 0x28
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	20004afc 	.word	0x20004afc
 801112c:	20004b10 	.word	0x20004b10
 8011130:	20004b00 	.word	0x20004b00
 8011134:	20004af4 	.word	0x20004af4
 8011138:	20004b04 	.word	0x20004b04
 801113c:	20004b08 	.word	0x20004b08

08011140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b086      	sub	sp, #24
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d04d      	beq.n	80111ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011152:	2308      	movs	r3, #8
 8011154:	425b      	negs	r3, r3
 8011156:	697a      	ldr	r2, [r7, #20]
 8011158:	4413      	add	r3, r2
 801115a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	685a      	ldr	r2, [r3, #4]
 8011164:	4b24      	ldr	r3, [pc, #144]	; (80111f8 <vPortFree+0xb8>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	4013      	ands	r3, r2
 801116a:	2b00      	cmp	r3, #0
 801116c:	d10a      	bne.n	8011184 <vPortFree+0x44>
	__asm volatile
 801116e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	60fb      	str	r3, [r7, #12]
}
 8011180:	bf00      	nop
 8011182:	e7fe      	b.n	8011182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d00a      	beq.n	80111a2 <vPortFree+0x62>
	__asm volatile
 801118c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011190:	f383 8811 	msr	BASEPRI, r3
 8011194:	f3bf 8f6f 	isb	sy
 8011198:	f3bf 8f4f 	dsb	sy
 801119c:	60bb      	str	r3, [r7, #8]
}
 801119e:	bf00      	nop
 80111a0:	e7fe      	b.n	80111a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	685a      	ldr	r2, [r3, #4]
 80111a6:	4b14      	ldr	r3, [pc, #80]	; (80111f8 <vPortFree+0xb8>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	4013      	ands	r3, r2
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d01e      	beq.n	80111ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d11a      	bne.n	80111ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	685a      	ldr	r2, [r3, #4]
 80111bc:	4b0e      	ldr	r3, [pc, #56]	; (80111f8 <vPortFree+0xb8>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	43db      	mvns	r3, r3
 80111c2:	401a      	ands	r2, r3
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80111c8:	f7fe fa0a 	bl	800f5e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	685a      	ldr	r2, [r3, #4]
 80111d0:	4b0a      	ldr	r3, [pc, #40]	; (80111fc <vPortFree+0xbc>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	4413      	add	r3, r2
 80111d6:	4a09      	ldr	r2, [pc, #36]	; (80111fc <vPortFree+0xbc>)
 80111d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80111da:	6938      	ldr	r0, [r7, #16]
 80111dc:	f000 f874 	bl	80112c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80111e0:	4b07      	ldr	r3, [pc, #28]	; (8011200 <vPortFree+0xc0>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	3301      	adds	r3, #1
 80111e6:	4a06      	ldr	r2, [pc, #24]	; (8011200 <vPortFree+0xc0>)
 80111e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80111ea:	f7fe fa07 	bl	800f5fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80111ee:	bf00      	nop
 80111f0:	3718      	adds	r7, #24
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	20004b10 	.word	0x20004b10
 80111fc:	20004b00 	.word	0x20004b00
 8011200:	20004b0c 	.word	0x20004b0c

08011204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011204:	b480      	push	{r7}
 8011206:	b085      	sub	sp, #20
 8011208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801120a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801120e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011210:	4b27      	ldr	r3, [pc, #156]	; (80112b0 <prvHeapInit+0xac>)
 8011212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	f003 0307 	and.w	r3, r3, #7
 801121a:	2b00      	cmp	r3, #0
 801121c:	d00c      	beq.n	8011238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	3307      	adds	r3, #7
 8011222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	f023 0307 	bic.w	r3, r3, #7
 801122a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801122c:	68ba      	ldr	r2, [r7, #8]
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	1ad3      	subs	r3, r2, r3
 8011232:	4a1f      	ldr	r2, [pc, #124]	; (80112b0 <prvHeapInit+0xac>)
 8011234:	4413      	add	r3, r2
 8011236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801123c:	4a1d      	ldr	r2, [pc, #116]	; (80112b4 <prvHeapInit+0xb0>)
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011242:	4b1c      	ldr	r3, [pc, #112]	; (80112b4 <prvHeapInit+0xb0>)
 8011244:	2200      	movs	r2, #0
 8011246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	68ba      	ldr	r2, [r7, #8]
 801124c:	4413      	add	r3, r2
 801124e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011250:	2208      	movs	r2, #8
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	1a9b      	subs	r3, r3, r2
 8011256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	f023 0307 	bic.w	r3, r3, #7
 801125e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	4a15      	ldr	r2, [pc, #84]	; (80112b8 <prvHeapInit+0xb4>)
 8011264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011266:	4b14      	ldr	r3, [pc, #80]	; (80112b8 <prvHeapInit+0xb4>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2200      	movs	r2, #0
 801126c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801126e:	4b12      	ldr	r3, [pc, #72]	; (80112b8 <prvHeapInit+0xb4>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	2200      	movs	r2, #0
 8011274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	68fa      	ldr	r2, [r7, #12]
 801127e:	1ad2      	subs	r2, r2, r3
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011284:	4b0c      	ldr	r3, [pc, #48]	; (80112b8 <prvHeapInit+0xb4>)
 8011286:	681a      	ldr	r2, [r3, #0]
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	4a0a      	ldr	r2, [pc, #40]	; (80112bc <prvHeapInit+0xb8>)
 8011292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	685b      	ldr	r3, [r3, #4]
 8011298:	4a09      	ldr	r2, [pc, #36]	; (80112c0 <prvHeapInit+0xbc>)
 801129a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801129c:	4b09      	ldr	r3, [pc, #36]	; (80112c4 <prvHeapInit+0xc0>)
 801129e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80112a2:	601a      	str	r2, [r3, #0]
}
 80112a4:	bf00      	nop
 80112a6:	3714      	adds	r7, #20
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr
 80112b0:	20000ef4 	.word	0x20000ef4
 80112b4:	20004af4 	.word	0x20004af4
 80112b8:	20004afc 	.word	0x20004afc
 80112bc:	20004b04 	.word	0x20004b04
 80112c0:	20004b00 	.word	0x20004b00
 80112c4:	20004b10 	.word	0x20004b10

080112c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80112c8:	b480      	push	{r7}
 80112ca:	b085      	sub	sp, #20
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80112d0:	4b28      	ldr	r3, [pc, #160]	; (8011374 <prvInsertBlockIntoFreeList+0xac>)
 80112d2:	60fb      	str	r3, [r7, #12]
 80112d4:	e002      	b.n	80112dc <prvInsertBlockIntoFreeList+0x14>
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	60fb      	str	r3, [r7, #12]
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	687a      	ldr	r2, [r7, #4]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d8f7      	bhi.n	80112d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	685b      	ldr	r3, [r3, #4]
 80112ee:	68ba      	ldr	r2, [r7, #8]
 80112f0:	4413      	add	r3, r2
 80112f2:	687a      	ldr	r2, [r7, #4]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d108      	bne.n	801130a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	685a      	ldr	r2, [r3, #4]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	441a      	add	r2, r3
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	68ba      	ldr	r2, [r7, #8]
 8011314:	441a      	add	r2, r3
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	429a      	cmp	r2, r3
 801131c:	d118      	bne.n	8011350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681a      	ldr	r2, [r3, #0]
 8011322:	4b15      	ldr	r3, [pc, #84]	; (8011378 <prvInsertBlockIntoFreeList+0xb0>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	429a      	cmp	r2, r3
 8011328:	d00d      	beq.n	8011346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	685a      	ldr	r2, [r3, #4]
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	441a      	add	r2, r3
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	681a      	ldr	r2, [r3, #0]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	601a      	str	r2, [r3, #0]
 8011344:	e008      	b.n	8011358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011346:	4b0c      	ldr	r3, [pc, #48]	; (8011378 <prvInsertBlockIntoFreeList+0xb0>)
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	601a      	str	r2, [r3, #0]
 801134e:	e003      	b.n	8011358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011358:	68fa      	ldr	r2, [r7, #12]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	429a      	cmp	r2, r3
 801135e:	d002      	beq.n	8011366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	687a      	ldr	r2, [r7, #4]
 8011364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011366:	bf00      	nop
 8011368:	3714      	adds	r7, #20
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop
 8011374:	20004af4 	.word	0x20004af4
 8011378:	20004afc 	.word	0x20004afc

0801137c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011380:	2201      	movs	r2, #1
 8011382:	490e      	ldr	r1, [pc, #56]	; (80113bc <MX_USB_HOST_Init+0x40>)
 8011384:	480e      	ldr	r0, [pc, #56]	; (80113c0 <MX_USB_HOST_Init+0x44>)
 8011386:	f7fb f809 	bl	800c39c <USBH_Init>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d001      	beq.n	8011394 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011390:	f7f1 ffe4 	bl	800335c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011394:	490b      	ldr	r1, [pc, #44]	; (80113c4 <MX_USB_HOST_Init+0x48>)
 8011396:	480a      	ldr	r0, [pc, #40]	; (80113c0 <MX_USB_HOST_Init+0x44>)
 8011398:	f7fb f8b0 	bl	800c4fc <USBH_RegisterClass>
 801139c:	4603      	mov	r3, r0
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d001      	beq.n	80113a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80113a2:	f7f1 ffdb 	bl	800335c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80113a6:	4806      	ldr	r0, [pc, #24]	; (80113c0 <MX_USB_HOST_Init+0x44>)
 80113a8:	f7fb f934 	bl	800c614 <USBH_Start>
 80113ac:	4603      	mov	r3, r0
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d001      	beq.n	80113b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80113b2:	f7f1 ffd3 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80113b6:	bf00      	nop
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	080113c9 	.word	0x080113c9
 80113c0:	20005048 	.word	0x20005048
 80113c4:	20000020 	.word	0x20000020

080113c8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b083      	sub	sp, #12
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	460b      	mov	r3, r1
 80113d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80113d4:	78fb      	ldrb	r3, [r7, #3]
 80113d6:	3b01      	subs	r3, #1
 80113d8:	2b04      	cmp	r3, #4
 80113da:	d819      	bhi.n	8011410 <USBH_UserProcess+0x48>
 80113dc:	a201      	add	r2, pc, #4	; (adr r2, 80113e4 <USBH_UserProcess+0x1c>)
 80113de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e2:	bf00      	nop
 80113e4:	08011411 	.word	0x08011411
 80113e8:	08011401 	.word	0x08011401
 80113ec:	08011411 	.word	0x08011411
 80113f0:	08011409 	.word	0x08011409
 80113f4:	080113f9 	.word	0x080113f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80113f8:	4b09      	ldr	r3, [pc, #36]	; (8011420 <USBH_UserProcess+0x58>)
 80113fa:	2203      	movs	r2, #3
 80113fc:	701a      	strb	r2, [r3, #0]
  break;
 80113fe:	e008      	b.n	8011412 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011400:	4b07      	ldr	r3, [pc, #28]	; (8011420 <USBH_UserProcess+0x58>)
 8011402:	2202      	movs	r2, #2
 8011404:	701a      	strb	r2, [r3, #0]
  break;
 8011406:	e004      	b.n	8011412 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011408:	4b05      	ldr	r3, [pc, #20]	; (8011420 <USBH_UserProcess+0x58>)
 801140a:	2201      	movs	r2, #1
 801140c:	701a      	strb	r2, [r3, #0]
  break;
 801140e:	e000      	b.n	8011412 <USBH_UserProcess+0x4a>

  default:
  break;
 8011410:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011412:	bf00      	nop
 8011414:	370c      	adds	r7, #12
 8011416:	46bd      	mov	sp, r7
 8011418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141c:	4770      	bx	lr
 801141e:	bf00      	nop
 8011420:	20004b14 	.word	0x20004b14

08011424 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b08a      	sub	sp, #40	; 0x28
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801142c:	f107 0314 	add.w	r3, r7, #20
 8011430:	2200      	movs	r2, #0
 8011432:	601a      	str	r2, [r3, #0]
 8011434:	605a      	str	r2, [r3, #4]
 8011436:	609a      	str	r2, [r3, #8]
 8011438:	60da      	str	r2, [r3, #12]
 801143a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011444:	d147      	bne.n	80114d6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011446:	2300      	movs	r3, #0
 8011448:	613b      	str	r3, [r7, #16]
 801144a:	4b25      	ldr	r3, [pc, #148]	; (80114e0 <HAL_HCD_MspInit+0xbc>)
 801144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801144e:	4a24      	ldr	r2, [pc, #144]	; (80114e0 <HAL_HCD_MspInit+0xbc>)
 8011450:	f043 0301 	orr.w	r3, r3, #1
 8011454:	6313      	str	r3, [r2, #48]	; 0x30
 8011456:	4b22      	ldr	r3, [pc, #136]	; (80114e0 <HAL_HCD_MspInit+0xbc>)
 8011458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801145a:	f003 0301 	and.w	r3, r3, #1
 801145e:	613b      	str	r3, [r7, #16]
 8011460:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8011462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011468:	2300      	movs	r3, #0
 801146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801146c:	2300      	movs	r3, #0
 801146e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8011470:	f107 0314 	add.w	r3, r7, #20
 8011474:	4619      	mov	r1, r3
 8011476:	481b      	ldr	r0, [pc, #108]	; (80114e4 <HAL_HCD_MspInit+0xc0>)
 8011478:	f7f3 f90c 	bl	8004694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 801147c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011482:	2302      	movs	r3, #2
 8011484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011486:	2300      	movs	r3, #0
 8011488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801148a:	2300      	movs	r3, #0
 801148c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801148e:	230a      	movs	r3, #10
 8011490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011492:	f107 0314 	add.w	r3, r7, #20
 8011496:	4619      	mov	r1, r3
 8011498:	4812      	ldr	r0, [pc, #72]	; (80114e4 <HAL_HCD_MspInit+0xc0>)
 801149a:	f7f3 f8fb 	bl	8004694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801149e:	4b10      	ldr	r3, [pc, #64]	; (80114e0 <HAL_HCD_MspInit+0xbc>)
 80114a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114a2:	4a0f      	ldr	r2, [pc, #60]	; (80114e0 <HAL_HCD_MspInit+0xbc>)
 80114a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114a8:	6353      	str	r3, [r2, #52]	; 0x34
 80114aa:	2300      	movs	r3, #0
 80114ac:	60fb      	str	r3, [r7, #12]
 80114ae:	4b0c      	ldr	r3, [pc, #48]	; (80114e0 <HAL_HCD_MspInit+0xbc>)
 80114b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114b2:	4a0b      	ldr	r2, [pc, #44]	; (80114e0 <HAL_HCD_MspInit+0xbc>)
 80114b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80114b8:	6453      	str	r3, [r2, #68]	; 0x44
 80114ba:	4b09      	ldr	r3, [pc, #36]	; (80114e0 <HAL_HCD_MspInit+0xbc>)
 80114bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80114c2:	60fb      	str	r3, [r7, #12]
 80114c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80114c6:	2200      	movs	r2, #0
 80114c8:	2105      	movs	r1, #5
 80114ca:	2043      	movs	r0, #67	; 0x43
 80114cc:	f7f3 f826 	bl	800451c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80114d0:	2043      	movs	r0, #67	; 0x43
 80114d2:	f7f3 f83f 	bl	8004554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80114d6:	bf00      	nop
 80114d8:	3728      	adds	r7, #40	; 0x28
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
 80114de:	bf00      	nop
 80114e0:	40023800 	.word	0x40023800
 80114e4:	40020000 	.word	0x40020000

080114e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fb fd39 	bl	800cf6e <USBH_LL_IncTimer>
}
 80114fc:	bf00      	nop
 80114fe:	3708      	adds	r7, #8
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b082      	sub	sp, #8
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011512:	4618      	mov	r0, r3
 8011514:	f7fb fd7d 	bl	800d012 <USBH_LL_Connect>
}
 8011518:	bf00      	nop
 801151a:	3708      	adds	r7, #8
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}

08011520 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801152e:	4618      	mov	r0, r3
 8011530:	f7fb fd92 	bl	800d058 <USBH_LL_Disconnect>
}
 8011534:	bf00      	nop
 8011536:	3708      	adds	r7, #8
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b082      	sub	sp, #8
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	460b      	mov	r3, r1
 8011546:	70fb      	strb	r3, [r7, #3]
 8011548:	4613      	mov	r3, r2
 801154a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011552:	4618      	mov	r0, r3
 8011554:	f7fb fdc9 	bl	800d0ea <USBH_LL_NotifyURBChange>
#endif
}
 8011558:	bf00      	nop
 801155a:	3708      	adds	r7, #8
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801156e:	4618      	mov	r0, r3
 8011570:	f7fb fd27 	bl	800cfc2 <USBH_LL_PortEnabled>
}
 8011574:	bf00      	nop
 8011576:	3708      	adds	r7, #8
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801158a:	4618      	mov	r0, r3
 801158c:	f7fb fd33 	bl	800cff6 <USBH_LL_PortDisabled>
}
 8011590:	bf00      	nop
 8011592:	3708      	adds	r7, #8
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}

08011598 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80115a6:	2b01      	cmp	r3, #1
 80115a8:	d12a      	bne.n	8011600 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80115aa:	4a18      	ldr	r2, [pc, #96]	; (801160c <USBH_LL_Init+0x74>)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	4a15      	ldr	r2, [pc, #84]	; (801160c <USBH_LL_Init+0x74>)
 80115b6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80115ba:	4b14      	ldr	r3, [pc, #80]	; (801160c <USBH_LL_Init+0x74>)
 80115bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80115c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80115c2:	4b12      	ldr	r3, [pc, #72]	; (801160c <USBH_LL_Init+0x74>)
 80115c4:	2208      	movs	r2, #8
 80115c6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80115c8:	4b10      	ldr	r3, [pc, #64]	; (801160c <USBH_LL_Init+0x74>)
 80115ca:	2201      	movs	r2, #1
 80115cc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80115ce:	4b0f      	ldr	r3, [pc, #60]	; (801160c <USBH_LL_Init+0x74>)
 80115d0:	2200      	movs	r2, #0
 80115d2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80115d4:	4b0d      	ldr	r3, [pc, #52]	; (801160c <USBH_LL_Init+0x74>)
 80115d6:	2202      	movs	r2, #2
 80115d8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80115da:	4b0c      	ldr	r3, [pc, #48]	; (801160c <USBH_LL_Init+0x74>)
 80115dc:	2200      	movs	r2, #0
 80115de:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80115e0:	480a      	ldr	r0, [pc, #40]	; (801160c <USBH_LL_Init+0x74>)
 80115e2:	f7f3 fa48 	bl	8004a76 <HAL_HCD_Init>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d001      	beq.n	80115f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80115ec:	f7f1 feb6 	bl	800335c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80115f0:	4806      	ldr	r0, [pc, #24]	; (801160c <USBH_LL_Init+0x74>)
 80115f2:	f7f3 fe2c 	bl	800524e <HAL_HCD_GetCurrentFrame>
 80115f6:	4603      	mov	r3, r0
 80115f8:	4619      	mov	r1, r3
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f7fb fca8 	bl	800cf50 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011600:	2300      	movs	r3, #0
}
 8011602:	4618      	mov	r0, r3
 8011604:	3708      	adds	r7, #8
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
 801160a:	bf00      	nop
 801160c:	2000542c 	.word	0x2000542c

08011610 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b084      	sub	sp, #16
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011618:	2300      	movs	r3, #0
 801161a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801161c:	2300      	movs	r3, #0
 801161e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011626:	4618      	mov	r0, r3
 8011628:	f7f3 fd9b 	bl	8005162 <HAL_HCD_Start>
 801162c:	4603      	mov	r3, r0
 801162e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011630:	7bfb      	ldrb	r3, [r7, #15]
 8011632:	4618      	mov	r0, r3
 8011634:	f000 f95c 	bl	80118f0 <USBH_Get_USB_Status>
 8011638:	4603      	mov	r3, r0
 801163a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801163c:	7bbb      	ldrb	r3, [r7, #14]
}
 801163e:	4618      	mov	r0, r3
 8011640:	3710      	adds	r7, #16
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}

08011646 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011646:	b580      	push	{r7, lr}
 8011648:	b084      	sub	sp, #16
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801164e:	2300      	movs	r3, #0
 8011650:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011652:	2300      	movs	r3, #0
 8011654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801165c:	4618      	mov	r0, r3
 801165e:	f7f3 fda3 	bl	80051a8 <HAL_HCD_Stop>
 8011662:	4603      	mov	r3, r0
 8011664:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011666:	7bfb      	ldrb	r3, [r7, #15]
 8011668:	4618      	mov	r0, r3
 801166a:	f000 f941 	bl	80118f0 <USBH_Get_USB_Status>
 801166e:	4603      	mov	r3, r0
 8011670:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011672:	7bbb      	ldrb	r3, [r7, #14]
}
 8011674:	4618      	mov	r0, r3
 8011676:	3710      	adds	r7, #16
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}

0801167c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011684:	2301      	movs	r3, #1
 8011686:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801168e:	4618      	mov	r0, r3
 8011690:	f7f3 fdeb 	bl	800526a <HAL_HCD_GetCurrentSpeed>
 8011694:	4603      	mov	r3, r0
 8011696:	2b02      	cmp	r3, #2
 8011698:	d00c      	beq.n	80116b4 <USBH_LL_GetSpeed+0x38>
 801169a:	2b02      	cmp	r3, #2
 801169c:	d80d      	bhi.n	80116ba <USBH_LL_GetSpeed+0x3e>
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d002      	beq.n	80116a8 <USBH_LL_GetSpeed+0x2c>
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d003      	beq.n	80116ae <USBH_LL_GetSpeed+0x32>
 80116a6:	e008      	b.n	80116ba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80116a8:	2300      	movs	r3, #0
 80116aa:	73fb      	strb	r3, [r7, #15]
    break;
 80116ac:	e008      	b.n	80116c0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80116ae:	2301      	movs	r3, #1
 80116b0:	73fb      	strb	r3, [r7, #15]
    break;
 80116b2:	e005      	b.n	80116c0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80116b4:	2302      	movs	r3, #2
 80116b6:	73fb      	strb	r3, [r7, #15]
    break;
 80116b8:	e002      	b.n	80116c0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80116ba:	2301      	movs	r3, #1
 80116bc:	73fb      	strb	r3, [r7, #15]
    break;
 80116be:	bf00      	nop
  }
  return  speed;
 80116c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3710      	adds	r7, #16
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}

080116ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80116ca:	b580      	push	{r7, lr}
 80116cc:	b084      	sub	sp, #16
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116d2:	2300      	movs	r3, #0
 80116d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80116d6:	2300      	movs	r3, #0
 80116d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7f3 fd7e 	bl	80051e2 <HAL_HCD_ResetPort>
 80116e6:	4603      	mov	r3, r0
 80116e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80116ea:	7bfb      	ldrb	r3, [r7, #15]
 80116ec:	4618      	mov	r0, r3
 80116ee:	f000 f8ff 	bl	80118f0 <USBH_Get_USB_Status>
 80116f2:	4603      	mov	r3, r0
 80116f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3710      	adds	r7, #16
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}

08011700 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b082      	sub	sp, #8
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	460b      	mov	r3, r1
 801170a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011712:	78fa      	ldrb	r2, [r7, #3]
 8011714:	4611      	mov	r1, r2
 8011716:	4618      	mov	r0, r3
 8011718:	f7f3 fd85 	bl	8005226 <HAL_HCD_HC_GetXferCount>
 801171c:	4603      	mov	r3, r0
}
 801171e:	4618      	mov	r0, r3
 8011720:	3708      	adds	r7, #8
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}

08011726 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011726:	b590      	push	{r4, r7, lr}
 8011728:	b089      	sub	sp, #36	; 0x24
 801172a:	af04      	add	r7, sp, #16
 801172c:	6078      	str	r0, [r7, #4]
 801172e:	4608      	mov	r0, r1
 8011730:	4611      	mov	r1, r2
 8011732:	461a      	mov	r2, r3
 8011734:	4603      	mov	r3, r0
 8011736:	70fb      	strb	r3, [r7, #3]
 8011738:	460b      	mov	r3, r1
 801173a:	70bb      	strb	r3, [r7, #2]
 801173c:	4613      	mov	r3, r2
 801173e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011740:	2300      	movs	r3, #0
 8011742:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011744:	2300      	movs	r3, #0
 8011746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801174e:	787c      	ldrb	r4, [r7, #1]
 8011750:	78ba      	ldrb	r2, [r7, #2]
 8011752:	78f9      	ldrb	r1, [r7, #3]
 8011754:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011756:	9302      	str	r3, [sp, #8]
 8011758:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801175c:	9301      	str	r3, [sp, #4]
 801175e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011762:	9300      	str	r3, [sp, #0]
 8011764:	4623      	mov	r3, r4
 8011766:	f7f3 f9e8 	bl	8004b3a <HAL_HCD_HC_Init>
 801176a:	4603      	mov	r3, r0
 801176c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801176e:	7bfb      	ldrb	r3, [r7, #15]
 8011770:	4618      	mov	r0, r3
 8011772:	f000 f8bd 	bl	80118f0 <USBH_Get_USB_Status>
 8011776:	4603      	mov	r3, r0
 8011778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801177a:	7bbb      	ldrb	r3, [r7, #14]
}
 801177c:	4618      	mov	r0, r3
 801177e:	3714      	adds	r7, #20
 8011780:	46bd      	mov	sp, r7
 8011782:	bd90      	pop	{r4, r7, pc}

08011784 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	460b      	mov	r3, r1
 801178e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011790:	2300      	movs	r3, #0
 8011792:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011794:	2300      	movs	r3, #0
 8011796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801179e:	78fa      	ldrb	r2, [r7, #3]
 80117a0:	4611      	mov	r1, r2
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7f3 fa58 	bl	8004c58 <HAL_HCD_HC_Halt>
 80117a8:	4603      	mov	r3, r0
 80117aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80117ac:	7bfb      	ldrb	r3, [r7, #15]
 80117ae:	4618      	mov	r0, r3
 80117b0:	f000 f89e 	bl	80118f0 <USBH_Get_USB_Status>
 80117b4:	4603      	mov	r3, r0
 80117b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80117c2:	b590      	push	{r4, r7, lr}
 80117c4:	b089      	sub	sp, #36	; 0x24
 80117c6:	af04      	add	r7, sp, #16
 80117c8:	6078      	str	r0, [r7, #4]
 80117ca:	4608      	mov	r0, r1
 80117cc:	4611      	mov	r1, r2
 80117ce:	461a      	mov	r2, r3
 80117d0:	4603      	mov	r3, r0
 80117d2:	70fb      	strb	r3, [r7, #3]
 80117d4:	460b      	mov	r3, r1
 80117d6:	70bb      	strb	r3, [r7, #2]
 80117d8:	4613      	mov	r3, r2
 80117da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117dc:	2300      	movs	r3, #0
 80117de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80117e0:	2300      	movs	r3, #0
 80117e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80117ea:	787c      	ldrb	r4, [r7, #1]
 80117ec:	78ba      	ldrb	r2, [r7, #2]
 80117ee:	78f9      	ldrb	r1, [r7, #3]
 80117f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80117f4:	9303      	str	r3, [sp, #12]
 80117f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80117f8:	9302      	str	r3, [sp, #8]
 80117fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fc:	9301      	str	r3, [sp, #4]
 80117fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011802:	9300      	str	r3, [sp, #0]
 8011804:	4623      	mov	r3, r4
 8011806:	f7f3 fa4b 	bl	8004ca0 <HAL_HCD_HC_SubmitRequest>
 801180a:	4603      	mov	r3, r0
 801180c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801180e:	7bfb      	ldrb	r3, [r7, #15]
 8011810:	4618      	mov	r0, r3
 8011812:	f000 f86d 	bl	80118f0 <USBH_Get_USB_Status>
 8011816:	4603      	mov	r3, r0
 8011818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801181a:	7bbb      	ldrb	r3, [r7, #14]
}
 801181c:	4618      	mov	r0, r3
 801181e:	3714      	adds	r7, #20
 8011820:	46bd      	mov	sp, r7
 8011822:	bd90      	pop	{r4, r7, pc}

08011824 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	460b      	mov	r3, r1
 801182e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011836:	78fa      	ldrb	r2, [r7, #3]
 8011838:	4611      	mov	r1, r2
 801183a:	4618      	mov	r0, r3
 801183c:	f7f3 fcdf 	bl	80051fe <HAL_HCD_HC_GetURBState>
 8011840:	4603      	mov	r3, r0
}
 8011842:	4618      	mov	r0, r3
 8011844:	3708      	adds	r7, #8
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}

0801184a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801184a:	b580      	push	{r7, lr}
 801184c:	b082      	sub	sp, #8
 801184e:	af00      	add	r7, sp, #0
 8011850:	6078      	str	r0, [r7, #4]
 8011852:	460b      	mov	r3, r1
 8011854:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801185c:	2b01      	cmp	r3, #1
 801185e:	d103      	bne.n	8011868 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011860:	78fb      	ldrb	r3, [r7, #3]
 8011862:	4618      	mov	r0, r3
 8011864:	f000 f870 	bl	8011948 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011868:	20c8      	movs	r0, #200	; 0xc8
 801186a:	f7f2 fd7b 	bl	8004364 <HAL_Delay>
  return USBH_OK;
 801186e:	2300      	movs	r3, #0
}
 8011870:	4618      	mov	r0, r3
 8011872:	3708      	adds	r7, #8
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}

08011878 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011878:	b480      	push	{r7}
 801187a:	b085      	sub	sp, #20
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
 8011880:	460b      	mov	r3, r1
 8011882:	70fb      	strb	r3, [r7, #3]
 8011884:	4613      	mov	r3, r2
 8011886:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801188e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011890:	78fb      	ldrb	r3, [r7, #3]
 8011892:	68fa      	ldr	r2, [r7, #12]
 8011894:	212c      	movs	r1, #44	; 0x2c
 8011896:	fb01 f303 	mul.w	r3, r1, r3
 801189a:	4413      	add	r3, r2
 801189c:	333b      	adds	r3, #59	; 0x3b
 801189e:	781b      	ldrb	r3, [r3, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d009      	beq.n	80118b8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80118a4:	78fb      	ldrb	r3, [r7, #3]
 80118a6:	68fa      	ldr	r2, [r7, #12]
 80118a8:	212c      	movs	r1, #44	; 0x2c
 80118aa:	fb01 f303 	mul.w	r3, r1, r3
 80118ae:	4413      	add	r3, r2
 80118b0:	3354      	adds	r3, #84	; 0x54
 80118b2:	78ba      	ldrb	r2, [r7, #2]
 80118b4:	701a      	strb	r2, [r3, #0]
 80118b6:	e008      	b.n	80118ca <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80118b8:	78fb      	ldrb	r3, [r7, #3]
 80118ba:	68fa      	ldr	r2, [r7, #12]
 80118bc:	212c      	movs	r1, #44	; 0x2c
 80118be:	fb01 f303 	mul.w	r3, r1, r3
 80118c2:	4413      	add	r3, r2
 80118c4:	3355      	adds	r3, #85	; 0x55
 80118c6:	78ba      	ldrb	r2, [r7, #2]
 80118c8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80118ca:	2300      	movs	r3, #0
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3714      	adds	r7, #20
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f7f2 fd3f 	bl	8004364 <HAL_Delay>
}
 80118e6:	bf00      	nop
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
	...

080118f0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b085      	sub	sp, #20
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	4603      	mov	r3, r0
 80118f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80118fa:	2300      	movs	r3, #0
 80118fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80118fe:	79fb      	ldrb	r3, [r7, #7]
 8011900:	2b03      	cmp	r3, #3
 8011902:	d817      	bhi.n	8011934 <USBH_Get_USB_Status+0x44>
 8011904:	a201      	add	r2, pc, #4	; (adr r2, 801190c <USBH_Get_USB_Status+0x1c>)
 8011906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801190a:	bf00      	nop
 801190c:	0801191d 	.word	0x0801191d
 8011910:	08011923 	.word	0x08011923
 8011914:	08011929 	.word	0x08011929
 8011918:	0801192f 	.word	0x0801192f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801191c:	2300      	movs	r3, #0
 801191e:	73fb      	strb	r3, [r7, #15]
    break;
 8011920:	e00b      	b.n	801193a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011922:	2302      	movs	r3, #2
 8011924:	73fb      	strb	r3, [r7, #15]
    break;
 8011926:	e008      	b.n	801193a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011928:	2301      	movs	r3, #1
 801192a:	73fb      	strb	r3, [r7, #15]
    break;
 801192c:	e005      	b.n	801193a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801192e:	2302      	movs	r3, #2
 8011930:	73fb      	strb	r3, [r7, #15]
    break;
 8011932:	e002      	b.n	801193a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011934:	2302      	movs	r3, #2
 8011936:	73fb      	strb	r3, [r7, #15]
    break;
 8011938:	bf00      	nop
  }
  return usb_status;
 801193a:	7bfb      	ldrb	r3, [r7, #15]
}
 801193c:	4618      	mov	r0, r3
 801193e:	3714      	adds	r7, #20
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b084      	sub	sp, #16
 801194c:	af00      	add	r7, sp, #0
 801194e:	4603      	mov	r3, r0
 8011950:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011952:	79fb      	ldrb	r3, [r7, #7]
 8011954:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011956:	79fb      	ldrb	r3, [r7, #7]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d102      	bne.n	8011962 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801195c:	2300      	movs	r3, #0
 801195e:	73fb      	strb	r3, [r7, #15]
 8011960:	e001      	b.n	8011966 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8011962:	2301      	movs	r3, #1
 8011964:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8011966:	7bfb      	ldrb	r3, [r7, #15]
 8011968:	461a      	mov	r2, r3
 801196a:	2101      	movs	r1, #1
 801196c:	4803      	ldr	r0, [pc, #12]	; (801197c <MX_DriverVbusFS+0x34>)
 801196e:	f7f3 f845 	bl	80049fc <HAL_GPIO_WritePin>
}
 8011972:	bf00      	nop
 8011974:	3710      	adds	r7, #16
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	40020800 	.word	0x40020800

08011980 <__errno>:
 8011980:	4b01      	ldr	r3, [pc, #4]	; (8011988 <__errno+0x8>)
 8011982:	6818      	ldr	r0, [r3, #0]
 8011984:	4770      	bx	lr
 8011986:	bf00      	nop
 8011988:	20000044 	.word	0x20000044

0801198c <__libc_init_array>:
 801198c:	b570      	push	{r4, r5, r6, lr}
 801198e:	4d0d      	ldr	r5, [pc, #52]	; (80119c4 <__libc_init_array+0x38>)
 8011990:	4c0d      	ldr	r4, [pc, #52]	; (80119c8 <__libc_init_array+0x3c>)
 8011992:	1b64      	subs	r4, r4, r5
 8011994:	10a4      	asrs	r4, r4, #2
 8011996:	2600      	movs	r6, #0
 8011998:	42a6      	cmp	r6, r4
 801199a:	d109      	bne.n	80119b0 <__libc_init_array+0x24>
 801199c:	4d0b      	ldr	r5, [pc, #44]	; (80119cc <__libc_init_array+0x40>)
 801199e:	4c0c      	ldr	r4, [pc, #48]	; (80119d0 <__libc_init_array+0x44>)
 80119a0:	f000 fcd8 	bl	8012354 <_init>
 80119a4:	1b64      	subs	r4, r4, r5
 80119a6:	10a4      	asrs	r4, r4, #2
 80119a8:	2600      	movs	r6, #0
 80119aa:	42a6      	cmp	r6, r4
 80119ac:	d105      	bne.n	80119ba <__libc_init_array+0x2e>
 80119ae:	bd70      	pop	{r4, r5, r6, pc}
 80119b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80119b4:	4798      	blx	r3
 80119b6:	3601      	adds	r6, #1
 80119b8:	e7ee      	b.n	8011998 <__libc_init_array+0xc>
 80119ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80119be:	4798      	blx	r3
 80119c0:	3601      	adds	r6, #1
 80119c2:	e7f2      	b.n	80119aa <__libc_init_array+0x1e>
 80119c4:	08015004 	.word	0x08015004
 80119c8:	08015004 	.word	0x08015004
 80119cc:	08015004 	.word	0x08015004
 80119d0:	08015008 	.word	0x08015008

080119d4 <__retarget_lock_acquire_recursive>:
 80119d4:	4770      	bx	lr

080119d6 <__retarget_lock_release_recursive>:
 80119d6:	4770      	bx	lr

080119d8 <malloc>:
 80119d8:	4b02      	ldr	r3, [pc, #8]	; (80119e4 <malloc+0xc>)
 80119da:	4601      	mov	r1, r0
 80119dc:	6818      	ldr	r0, [r3, #0]
 80119de:	f000 b871 	b.w	8011ac4 <_malloc_r>
 80119e2:	bf00      	nop
 80119e4:	20000044 	.word	0x20000044

080119e8 <free>:
 80119e8:	4b02      	ldr	r3, [pc, #8]	; (80119f4 <free+0xc>)
 80119ea:	4601      	mov	r1, r0
 80119ec:	6818      	ldr	r0, [r3, #0]
 80119ee:	f000 b819 	b.w	8011a24 <_free_r>
 80119f2:	bf00      	nop
 80119f4:	20000044 	.word	0x20000044

080119f8 <memcpy>:
 80119f8:	440a      	add	r2, r1
 80119fa:	4291      	cmp	r1, r2
 80119fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011a00:	d100      	bne.n	8011a04 <memcpy+0xc>
 8011a02:	4770      	bx	lr
 8011a04:	b510      	push	{r4, lr}
 8011a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a0e:	4291      	cmp	r1, r2
 8011a10:	d1f9      	bne.n	8011a06 <memcpy+0xe>
 8011a12:	bd10      	pop	{r4, pc}

08011a14 <memset>:
 8011a14:	4402      	add	r2, r0
 8011a16:	4603      	mov	r3, r0
 8011a18:	4293      	cmp	r3, r2
 8011a1a:	d100      	bne.n	8011a1e <memset+0xa>
 8011a1c:	4770      	bx	lr
 8011a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8011a22:	e7f9      	b.n	8011a18 <memset+0x4>

08011a24 <_free_r>:
 8011a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a26:	2900      	cmp	r1, #0
 8011a28:	d048      	beq.n	8011abc <_free_r+0x98>
 8011a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a2e:	9001      	str	r0, [sp, #4]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	f1a1 0404 	sub.w	r4, r1, #4
 8011a36:	bfb8      	it	lt
 8011a38:	18e4      	addlt	r4, r4, r3
 8011a3a:	f000 f947 	bl	8011ccc <__malloc_lock>
 8011a3e:	4a20      	ldr	r2, [pc, #128]	; (8011ac0 <_free_r+0x9c>)
 8011a40:	9801      	ldr	r0, [sp, #4]
 8011a42:	6813      	ldr	r3, [r2, #0]
 8011a44:	4615      	mov	r5, r2
 8011a46:	b933      	cbnz	r3, 8011a56 <_free_r+0x32>
 8011a48:	6063      	str	r3, [r4, #4]
 8011a4a:	6014      	str	r4, [r2, #0]
 8011a4c:	b003      	add	sp, #12
 8011a4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a52:	f000 b941 	b.w	8011cd8 <__malloc_unlock>
 8011a56:	42a3      	cmp	r3, r4
 8011a58:	d90b      	bls.n	8011a72 <_free_r+0x4e>
 8011a5a:	6821      	ldr	r1, [r4, #0]
 8011a5c:	1862      	adds	r2, r4, r1
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	bf04      	itt	eq
 8011a62:	681a      	ldreq	r2, [r3, #0]
 8011a64:	685b      	ldreq	r3, [r3, #4]
 8011a66:	6063      	str	r3, [r4, #4]
 8011a68:	bf04      	itt	eq
 8011a6a:	1852      	addeq	r2, r2, r1
 8011a6c:	6022      	streq	r2, [r4, #0]
 8011a6e:	602c      	str	r4, [r5, #0]
 8011a70:	e7ec      	b.n	8011a4c <_free_r+0x28>
 8011a72:	461a      	mov	r2, r3
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	b10b      	cbz	r3, 8011a7c <_free_r+0x58>
 8011a78:	42a3      	cmp	r3, r4
 8011a7a:	d9fa      	bls.n	8011a72 <_free_r+0x4e>
 8011a7c:	6811      	ldr	r1, [r2, #0]
 8011a7e:	1855      	adds	r5, r2, r1
 8011a80:	42a5      	cmp	r5, r4
 8011a82:	d10b      	bne.n	8011a9c <_free_r+0x78>
 8011a84:	6824      	ldr	r4, [r4, #0]
 8011a86:	4421      	add	r1, r4
 8011a88:	1854      	adds	r4, r2, r1
 8011a8a:	42a3      	cmp	r3, r4
 8011a8c:	6011      	str	r1, [r2, #0]
 8011a8e:	d1dd      	bne.n	8011a4c <_free_r+0x28>
 8011a90:	681c      	ldr	r4, [r3, #0]
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	6053      	str	r3, [r2, #4]
 8011a96:	4421      	add	r1, r4
 8011a98:	6011      	str	r1, [r2, #0]
 8011a9a:	e7d7      	b.n	8011a4c <_free_r+0x28>
 8011a9c:	d902      	bls.n	8011aa4 <_free_r+0x80>
 8011a9e:	230c      	movs	r3, #12
 8011aa0:	6003      	str	r3, [r0, #0]
 8011aa2:	e7d3      	b.n	8011a4c <_free_r+0x28>
 8011aa4:	6825      	ldr	r5, [r4, #0]
 8011aa6:	1961      	adds	r1, r4, r5
 8011aa8:	428b      	cmp	r3, r1
 8011aaa:	bf04      	itt	eq
 8011aac:	6819      	ldreq	r1, [r3, #0]
 8011aae:	685b      	ldreq	r3, [r3, #4]
 8011ab0:	6063      	str	r3, [r4, #4]
 8011ab2:	bf04      	itt	eq
 8011ab4:	1949      	addeq	r1, r1, r5
 8011ab6:	6021      	streq	r1, [r4, #0]
 8011ab8:	6054      	str	r4, [r2, #4]
 8011aba:	e7c7      	b.n	8011a4c <_free_r+0x28>
 8011abc:	b003      	add	sp, #12
 8011abe:	bd30      	pop	{r4, r5, pc}
 8011ac0:	20004b18 	.word	0x20004b18

08011ac4 <_malloc_r>:
 8011ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ac6:	1ccd      	adds	r5, r1, #3
 8011ac8:	f025 0503 	bic.w	r5, r5, #3
 8011acc:	3508      	adds	r5, #8
 8011ace:	2d0c      	cmp	r5, #12
 8011ad0:	bf38      	it	cc
 8011ad2:	250c      	movcc	r5, #12
 8011ad4:	2d00      	cmp	r5, #0
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	db01      	blt.n	8011ade <_malloc_r+0x1a>
 8011ada:	42a9      	cmp	r1, r5
 8011adc:	d903      	bls.n	8011ae6 <_malloc_r+0x22>
 8011ade:	230c      	movs	r3, #12
 8011ae0:	6033      	str	r3, [r6, #0]
 8011ae2:	2000      	movs	r0, #0
 8011ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ae6:	f000 f8f1 	bl	8011ccc <__malloc_lock>
 8011aea:	4921      	ldr	r1, [pc, #132]	; (8011b70 <_malloc_r+0xac>)
 8011aec:	680a      	ldr	r2, [r1, #0]
 8011aee:	4614      	mov	r4, r2
 8011af0:	b99c      	cbnz	r4, 8011b1a <_malloc_r+0x56>
 8011af2:	4f20      	ldr	r7, [pc, #128]	; (8011b74 <_malloc_r+0xb0>)
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	b923      	cbnz	r3, 8011b02 <_malloc_r+0x3e>
 8011af8:	4621      	mov	r1, r4
 8011afa:	4630      	mov	r0, r6
 8011afc:	f000 f8a6 	bl	8011c4c <_sbrk_r>
 8011b00:	6038      	str	r0, [r7, #0]
 8011b02:	4629      	mov	r1, r5
 8011b04:	4630      	mov	r0, r6
 8011b06:	f000 f8a1 	bl	8011c4c <_sbrk_r>
 8011b0a:	1c43      	adds	r3, r0, #1
 8011b0c:	d123      	bne.n	8011b56 <_malloc_r+0x92>
 8011b0e:	230c      	movs	r3, #12
 8011b10:	6033      	str	r3, [r6, #0]
 8011b12:	4630      	mov	r0, r6
 8011b14:	f000 f8e0 	bl	8011cd8 <__malloc_unlock>
 8011b18:	e7e3      	b.n	8011ae2 <_malloc_r+0x1e>
 8011b1a:	6823      	ldr	r3, [r4, #0]
 8011b1c:	1b5b      	subs	r3, r3, r5
 8011b1e:	d417      	bmi.n	8011b50 <_malloc_r+0x8c>
 8011b20:	2b0b      	cmp	r3, #11
 8011b22:	d903      	bls.n	8011b2c <_malloc_r+0x68>
 8011b24:	6023      	str	r3, [r4, #0]
 8011b26:	441c      	add	r4, r3
 8011b28:	6025      	str	r5, [r4, #0]
 8011b2a:	e004      	b.n	8011b36 <_malloc_r+0x72>
 8011b2c:	6863      	ldr	r3, [r4, #4]
 8011b2e:	42a2      	cmp	r2, r4
 8011b30:	bf0c      	ite	eq
 8011b32:	600b      	streq	r3, [r1, #0]
 8011b34:	6053      	strne	r3, [r2, #4]
 8011b36:	4630      	mov	r0, r6
 8011b38:	f000 f8ce 	bl	8011cd8 <__malloc_unlock>
 8011b3c:	f104 000b 	add.w	r0, r4, #11
 8011b40:	1d23      	adds	r3, r4, #4
 8011b42:	f020 0007 	bic.w	r0, r0, #7
 8011b46:	1ac2      	subs	r2, r0, r3
 8011b48:	d0cc      	beq.n	8011ae4 <_malloc_r+0x20>
 8011b4a:	1a1b      	subs	r3, r3, r0
 8011b4c:	50a3      	str	r3, [r4, r2]
 8011b4e:	e7c9      	b.n	8011ae4 <_malloc_r+0x20>
 8011b50:	4622      	mov	r2, r4
 8011b52:	6864      	ldr	r4, [r4, #4]
 8011b54:	e7cc      	b.n	8011af0 <_malloc_r+0x2c>
 8011b56:	1cc4      	adds	r4, r0, #3
 8011b58:	f024 0403 	bic.w	r4, r4, #3
 8011b5c:	42a0      	cmp	r0, r4
 8011b5e:	d0e3      	beq.n	8011b28 <_malloc_r+0x64>
 8011b60:	1a21      	subs	r1, r4, r0
 8011b62:	4630      	mov	r0, r6
 8011b64:	f000 f872 	bl	8011c4c <_sbrk_r>
 8011b68:	3001      	adds	r0, #1
 8011b6a:	d1dd      	bne.n	8011b28 <_malloc_r+0x64>
 8011b6c:	e7cf      	b.n	8011b0e <_malloc_r+0x4a>
 8011b6e:	bf00      	nop
 8011b70:	20004b18 	.word	0x20004b18
 8011b74:	20004b1c 	.word	0x20004b1c

08011b78 <cleanup_glue>:
 8011b78:	b538      	push	{r3, r4, r5, lr}
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	6809      	ldr	r1, [r1, #0]
 8011b7e:	4605      	mov	r5, r0
 8011b80:	b109      	cbz	r1, 8011b86 <cleanup_glue+0xe>
 8011b82:	f7ff fff9 	bl	8011b78 <cleanup_glue>
 8011b86:	4621      	mov	r1, r4
 8011b88:	4628      	mov	r0, r5
 8011b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b8e:	f7ff bf49 	b.w	8011a24 <_free_r>
	...

08011b94 <_reclaim_reent>:
 8011b94:	4b2c      	ldr	r3, [pc, #176]	; (8011c48 <_reclaim_reent+0xb4>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	4283      	cmp	r3, r0
 8011b9a:	b570      	push	{r4, r5, r6, lr}
 8011b9c:	4604      	mov	r4, r0
 8011b9e:	d051      	beq.n	8011c44 <_reclaim_reent+0xb0>
 8011ba0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011ba2:	b143      	cbz	r3, 8011bb6 <_reclaim_reent+0x22>
 8011ba4:	68db      	ldr	r3, [r3, #12]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d14a      	bne.n	8011c40 <_reclaim_reent+0xac>
 8011baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011bac:	6819      	ldr	r1, [r3, #0]
 8011bae:	b111      	cbz	r1, 8011bb6 <_reclaim_reent+0x22>
 8011bb0:	4620      	mov	r0, r4
 8011bb2:	f7ff ff37 	bl	8011a24 <_free_r>
 8011bb6:	6961      	ldr	r1, [r4, #20]
 8011bb8:	b111      	cbz	r1, 8011bc0 <_reclaim_reent+0x2c>
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f7ff ff32 	bl	8011a24 <_free_r>
 8011bc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011bc2:	b111      	cbz	r1, 8011bca <_reclaim_reent+0x36>
 8011bc4:	4620      	mov	r0, r4
 8011bc6:	f7ff ff2d 	bl	8011a24 <_free_r>
 8011bca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011bcc:	b111      	cbz	r1, 8011bd4 <_reclaim_reent+0x40>
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f7ff ff28 	bl	8011a24 <_free_r>
 8011bd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011bd6:	b111      	cbz	r1, 8011bde <_reclaim_reent+0x4a>
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f7ff ff23 	bl	8011a24 <_free_r>
 8011bde:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011be0:	b111      	cbz	r1, 8011be8 <_reclaim_reent+0x54>
 8011be2:	4620      	mov	r0, r4
 8011be4:	f7ff ff1e 	bl	8011a24 <_free_r>
 8011be8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011bea:	b111      	cbz	r1, 8011bf2 <_reclaim_reent+0x5e>
 8011bec:	4620      	mov	r0, r4
 8011bee:	f7ff ff19 	bl	8011a24 <_free_r>
 8011bf2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011bf4:	b111      	cbz	r1, 8011bfc <_reclaim_reent+0x68>
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f7ff ff14 	bl	8011a24 <_free_r>
 8011bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bfe:	b111      	cbz	r1, 8011c06 <_reclaim_reent+0x72>
 8011c00:	4620      	mov	r0, r4
 8011c02:	f7ff ff0f 	bl	8011a24 <_free_r>
 8011c06:	69a3      	ldr	r3, [r4, #24]
 8011c08:	b1e3      	cbz	r3, 8011c44 <_reclaim_reent+0xb0>
 8011c0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	4798      	blx	r3
 8011c10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011c12:	b1b9      	cbz	r1, 8011c44 <_reclaim_reent+0xb0>
 8011c14:	4620      	mov	r0, r4
 8011c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c1a:	f7ff bfad 	b.w	8011b78 <cleanup_glue>
 8011c1e:	5949      	ldr	r1, [r1, r5]
 8011c20:	b941      	cbnz	r1, 8011c34 <_reclaim_reent+0xa0>
 8011c22:	3504      	adds	r5, #4
 8011c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c26:	2d80      	cmp	r5, #128	; 0x80
 8011c28:	68d9      	ldr	r1, [r3, #12]
 8011c2a:	d1f8      	bne.n	8011c1e <_reclaim_reent+0x8a>
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	f7ff fef9 	bl	8011a24 <_free_r>
 8011c32:	e7ba      	b.n	8011baa <_reclaim_reent+0x16>
 8011c34:	680e      	ldr	r6, [r1, #0]
 8011c36:	4620      	mov	r0, r4
 8011c38:	f7ff fef4 	bl	8011a24 <_free_r>
 8011c3c:	4631      	mov	r1, r6
 8011c3e:	e7ef      	b.n	8011c20 <_reclaim_reent+0x8c>
 8011c40:	2500      	movs	r5, #0
 8011c42:	e7ef      	b.n	8011c24 <_reclaim_reent+0x90>
 8011c44:	bd70      	pop	{r4, r5, r6, pc}
 8011c46:	bf00      	nop
 8011c48:	20000044 	.word	0x20000044

08011c4c <_sbrk_r>:
 8011c4c:	b538      	push	{r3, r4, r5, lr}
 8011c4e:	4d06      	ldr	r5, [pc, #24]	; (8011c68 <_sbrk_r+0x1c>)
 8011c50:	2300      	movs	r3, #0
 8011c52:	4604      	mov	r4, r0
 8011c54:	4608      	mov	r0, r1
 8011c56:	602b      	str	r3, [r5, #0]
 8011c58:	f7f1 fee8 	bl	8003a2c <_sbrk>
 8011c5c:	1c43      	adds	r3, r0, #1
 8011c5e:	d102      	bne.n	8011c66 <_sbrk_r+0x1a>
 8011c60:	682b      	ldr	r3, [r5, #0]
 8011c62:	b103      	cbz	r3, 8011c66 <_sbrk_r+0x1a>
 8011c64:	6023      	str	r3, [r4, #0]
 8011c66:	bd38      	pop	{r3, r4, r5, pc}
 8011c68:	2000573c 	.word	0x2000573c

08011c6c <siprintf>:
 8011c6c:	b40e      	push	{r1, r2, r3}
 8011c6e:	b500      	push	{lr}
 8011c70:	b09c      	sub	sp, #112	; 0x70
 8011c72:	ab1d      	add	r3, sp, #116	; 0x74
 8011c74:	9002      	str	r0, [sp, #8]
 8011c76:	9006      	str	r0, [sp, #24]
 8011c78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011c7c:	4809      	ldr	r0, [pc, #36]	; (8011ca4 <siprintf+0x38>)
 8011c7e:	9107      	str	r1, [sp, #28]
 8011c80:	9104      	str	r1, [sp, #16]
 8011c82:	4909      	ldr	r1, [pc, #36]	; (8011ca8 <siprintf+0x3c>)
 8011c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c88:	9105      	str	r1, [sp, #20]
 8011c8a:	6800      	ldr	r0, [r0, #0]
 8011c8c:	9301      	str	r3, [sp, #4]
 8011c8e:	a902      	add	r1, sp, #8
 8011c90:	f000 f884 	bl	8011d9c <_svfiprintf_r>
 8011c94:	9b02      	ldr	r3, [sp, #8]
 8011c96:	2200      	movs	r2, #0
 8011c98:	701a      	strb	r2, [r3, #0]
 8011c9a:	b01c      	add	sp, #112	; 0x70
 8011c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ca0:	b003      	add	sp, #12
 8011ca2:	4770      	bx	lr
 8011ca4:	20000044 	.word	0x20000044
 8011ca8:	ffff0208 	.word	0xffff0208

08011cac <strcat>:
 8011cac:	b510      	push	{r4, lr}
 8011cae:	4602      	mov	r2, r0
 8011cb0:	7814      	ldrb	r4, [r2, #0]
 8011cb2:	4613      	mov	r3, r2
 8011cb4:	3201      	adds	r2, #1
 8011cb6:	2c00      	cmp	r4, #0
 8011cb8:	d1fa      	bne.n	8011cb0 <strcat+0x4>
 8011cba:	3b01      	subs	r3, #1
 8011cbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011cc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011cc4:	2a00      	cmp	r2, #0
 8011cc6:	d1f9      	bne.n	8011cbc <strcat+0x10>
 8011cc8:	bd10      	pop	{r4, pc}
	...

08011ccc <__malloc_lock>:
 8011ccc:	4801      	ldr	r0, [pc, #4]	; (8011cd4 <__malloc_lock+0x8>)
 8011cce:	f7ff be81 	b.w	80119d4 <__retarget_lock_acquire_recursive>
 8011cd2:	bf00      	nop
 8011cd4:	20005734 	.word	0x20005734

08011cd8 <__malloc_unlock>:
 8011cd8:	4801      	ldr	r0, [pc, #4]	; (8011ce0 <__malloc_unlock+0x8>)
 8011cda:	f7ff be7c 	b.w	80119d6 <__retarget_lock_release_recursive>
 8011cde:	bf00      	nop
 8011ce0:	20005734 	.word	0x20005734

08011ce4 <__ssputs_r>:
 8011ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ce8:	688e      	ldr	r6, [r1, #8]
 8011cea:	429e      	cmp	r6, r3
 8011cec:	4682      	mov	sl, r0
 8011cee:	460c      	mov	r4, r1
 8011cf0:	4690      	mov	r8, r2
 8011cf2:	461f      	mov	r7, r3
 8011cf4:	d838      	bhi.n	8011d68 <__ssputs_r+0x84>
 8011cf6:	898a      	ldrh	r2, [r1, #12]
 8011cf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011cfc:	d032      	beq.n	8011d64 <__ssputs_r+0x80>
 8011cfe:	6825      	ldr	r5, [r4, #0]
 8011d00:	6909      	ldr	r1, [r1, #16]
 8011d02:	eba5 0901 	sub.w	r9, r5, r1
 8011d06:	6965      	ldr	r5, [r4, #20]
 8011d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d10:	3301      	adds	r3, #1
 8011d12:	444b      	add	r3, r9
 8011d14:	106d      	asrs	r5, r5, #1
 8011d16:	429d      	cmp	r5, r3
 8011d18:	bf38      	it	cc
 8011d1a:	461d      	movcc	r5, r3
 8011d1c:	0553      	lsls	r3, r2, #21
 8011d1e:	d531      	bpl.n	8011d84 <__ssputs_r+0xa0>
 8011d20:	4629      	mov	r1, r5
 8011d22:	f7ff fecf 	bl	8011ac4 <_malloc_r>
 8011d26:	4606      	mov	r6, r0
 8011d28:	b950      	cbnz	r0, 8011d40 <__ssputs_r+0x5c>
 8011d2a:	230c      	movs	r3, #12
 8011d2c:	f8ca 3000 	str.w	r3, [sl]
 8011d30:	89a3      	ldrh	r3, [r4, #12]
 8011d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d36:	81a3      	strh	r3, [r4, #12]
 8011d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d40:	6921      	ldr	r1, [r4, #16]
 8011d42:	464a      	mov	r2, r9
 8011d44:	f7ff fe58 	bl	80119f8 <memcpy>
 8011d48:	89a3      	ldrh	r3, [r4, #12]
 8011d4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d52:	81a3      	strh	r3, [r4, #12]
 8011d54:	6126      	str	r6, [r4, #16]
 8011d56:	6165      	str	r5, [r4, #20]
 8011d58:	444e      	add	r6, r9
 8011d5a:	eba5 0509 	sub.w	r5, r5, r9
 8011d5e:	6026      	str	r6, [r4, #0]
 8011d60:	60a5      	str	r5, [r4, #8]
 8011d62:	463e      	mov	r6, r7
 8011d64:	42be      	cmp	r6, r7
 8011d66:	d900      	bls.n	8011d6a <__ssputs_r+0x86>
 8011d68:	463e      	mov	r6, r7
 8011d6a:	4632      	mov	r2, r6
 8011d6c:	6820      	ldr	r0, [r4, #0]
 8011d6e:	4641      	mov	r1, r8
 8011d70:	f000 faa8 	bl	80122c4 <memmove>
 8011d74:	68a3      	ldr	r3, [r4, #8]
 8011d76:	6822      	ldr	r2, [r4, #0]
 8011d78:	1b9b      	subs	r3, r3, r6
 8011d7a:	4432      	add	r2, r6
 8011d7c:	60a3      	str	r3, [r4, #8]
 8011d7e:	6022      	str	r2, [r4, #0]
 8011d80:	2000      	movs	r0, #0
 8011d82:	e7db      	b.n	8011d3c <__ssputs_r+0x58>
 8011d84:	462a      	mov	r2, r5
 8011d86:	f000 fab7 	bl	80122f8 <_realloc_r>
 8011d8a:	4606      	mov	r6, r0
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	d1e1      	bne.n	8011d54 <__ssputs_r+0x70>
 8011d90:	6921      	ldr	r1, [r4, #16]
 8011d92:	4650      	mov	r0, sl
 8011d94:	f7ff fe46 	bl	8011a24 <_free_r>
 8011d98:	e7c7      	b.n	8011d2a <__ssputs_r+0x46>
	...

08011d9c <_svfiprintf_r>:
 8011d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da0:	4698      	mov	r8, r3
 8011da2:	898b      	ldrh	r3, [r1, #12]
 8011da4:	061b      	lsls	r3, r3, #24
 8011da6:	b09d      	sub	sp, #116	; 0x74
 8011da8:	4607      	mov	r7, r0
 8011daa:	460d      	mov	r5, r1
 8011dac:	4614      	mov	r4, r2
 8011dae:	d50e      	bpl.n	8011dce <_svfiprintf_r+0x32>
 8011db0:	690b      	ldr	r3, [r1, #16]
 8011db2:	b963      	cbnz	r3, 8011dce <_svfiprintf_r+0x32>
 8011db4:	2140      	movs	r1, #64	; 0x40
 8011db6:	f7ff fe85 	bl	8011ac4 <_malloc_r>
 8011dba:	6028      	str	r0, [r5, #0]
 8011dbc:	6128      	str	r0, [r5, #16]
 8011dbe:	b920      	cbnz	r0, 8011dca <_svfiprintf_r+0x2e>
 8011dc0:	230c      	movs	r3, #12
 8011dc2:	603b      	str	r3, [r7, #0]
 8011dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011dc8:	e0d1      	b.n	8011f6e <_svfiprintf_r+0x1d2>
 8011dca:	2340      	movs	r3, #64	; 0x40
 8011dcc:	616b      	str	r3, [r5, #20]
 8011dce:	2300      	movs	r3, #0
 8011dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8011dd2:	2320      	movs	r3, #32
 8011dd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ddc:	2330      	movs	r3, #48	; 0x30
 8011dde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011f88 <_svfiprintf_r+0x1ec>
 8011de2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011de6:	f04f 0901 	mov.w	r9, #1
 8011dea:	4623      	mov	r3, r4
 8011dec:	469a      	mov	sl, r3
 8011dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011df2:	b10a      	cbz	r2, 8011df8 <_svfiprintf_r+0x5c>
 8011df4:	2a25      	cmp	r2, #37	; 0x25
 8011df6:	d1f9      	bne.n	8011dec <_svfiprintf_r+0x50>
 8011df8:	ebba 0b04 	subs.w	fp, sl, r4
 8011dfc:	d00b      	beq.n	8011e16 <_svfiprintf_r+0x7a>
 8011dfe:	465b      	mov	r3, fp
 8011e00:	4622      	mov	r2, r4
 8011e02:	4629      	mov	r1, r5
 8011e04:	4638      	mov	r0, r7
 8011e06:	f7ff ff6d 	bl	8011ce4 <__ssputs_r>
 8011e0a:	3001      	adds	r0, #1
 8011e0c:	f000 80aa 	beq.w	8011f64 <_svfiprintf_r+0x1c8>
 8011e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e12:	445a      	add	r2, fp
 8011e14:	9209      	str	r2, [sp, #36]	; 0x24
 8011e16:	f89a 3000 	ldrb.w	r3, [sl]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	f000 80a2 	beq.w	8011f64 <_svfiprintf_r+0x1c8>
 8011e20:	2300      	movs	r3, #0
 8011e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e2a:	f10a 0a01 	add.w	sl, sl, #1
 8011e2e:	9304      	str	r3, [sp, #16]
 8011e30:	9307      	str	r3, [sp, #28]
 8011e32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e36:	931a      	str	r3, [sp, #104]	; 0x68
 8011e38:	4654      	mov	r4, sl
 8011e3a:	2205      	movs	r2, #5
 8011e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e40:	4851      	ldr	r0, [pc, #324]	; (8011f88 <_svfiprintf_r+0x1ec>)
 8011e42:	f7ee f9dd 	bl	8000200 <memchr>
 8011e46:	9a04      	ldr	r2, [sp, #16]
 8011e48:	b9d8      	cbnz	r0, 8011e82 <_svfiprintf_r+0xe6>
 8011e4a:	06d0      	lsls	r0, r2, #27
 8011e4c:	bf44      	itt	mi
 8011e4e:	2320      	movmi	r3, #32
 8011e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e54:	0711      	lsls	r1, r2, #28
 8011e56:	bf44      	itt	mi
 8011e58:	232b      	movmi	r3, #43	; 0x2b
 8011e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e62:	2b2a      	cmp	r3, #42	; 0x2a
 8011e64:	d015      	beq.n	8011e92 <_svfiprintf_r+0xf6>
 8011e66:	9a07      	ldr	r2, [sp, #28]
 8011e68:	4654      	mov	r4, sl
 8011e6a:	2000      	movs	r0, #0
 8011e6c:	f04f 0c0a 	mov.w	ip, #10
 8011e70:	4621      	mov	r1, r4
 8011e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e76:	3b30      	subs	r3, #48	; 0x30
 8011e78:	2b09      	cmp	r3, #9
 8011e7a:	d94e      	bls.n	8011f1a <_svfiprintf_r+0x17e>
 8011e7c:	b1b0      	cbz	r0, 8011eac <_svfiprintf_r+0x110>
 8011e7e:	9207      	str	r2, [sp, #28]
 8011e80:	e014      	b.n	8011eac <_svfiprintf_r+0x110>
 8011e82:	eba0 0308 	sub.w	r3, r0, r8
 8011e86:	fa09 f303 	lsl.w	r3, r9, r3
 8011e8a:	4313      	orrs	r3, r2
 8011e8c:	9304      	str	r3, [sp, #16]
 8011e8e:	46a2      	mov	sl, r4
 8011e90:	e7d2      	b.n	8011e38 <_svfiprintf_r+0x9c>
 8011e92:	9b03      	ldr	r3, [sp, #12]
 8011e94:	1d19      	adds	r1, r3, #4
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	9103      	str	r1, [sp, #12]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	bfbb      	ittet	lt
 8011e9e:	425b      	neglt	r3, r3
 8011ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8011ea4:	9307      	strge	r3, [sp, #28]
 8011ea6:	9307      	strlt	r3, [sp, #28]
 8011ea8:	bfb8      	it	lt
 8011eaa:	9204      	strlt	r2, [sp, #16]
 8011eac:	7823      	ldrb	r3, [r4, #0]
 8011eae:	2b2e      	cmp	r3, #46	; 0x2e
 8011eb0:	d10c      	bne.n	8011ecc <_svfiprintf_r+0x130>
 8011eb2:	7863      	ldrb	r3, [r4, #1]
 8011eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8011eb6:	d135      	bne.n	8011f24 <_svfiprintf_r+0x188>
 8011eb8:	9b03      	ldr	r3, [sp, #12]
 8011eba:	1d1a      	adds	r2, r3, #4
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	9203      	str	r2, [sp, #12]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	bfb8      	it	lt
 8011ec4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011ec8:	3402      	adds	r4, #2
 8011eca:	9305      	str	r3, [sp, #20]
 8011ecc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011f98 <_svfiprintf_r+0x1fc>
 8011ed0:	7821      	ldrb	r1, [r4, #0]
 8011ed2:	2203      	movs	r2, #3
 8011ed4:	4650      	mov	r0, sl
 8011ed6:	f7ee f993 	bl	8000200 <memchr>
 8011eda:	b140      	cbz	r0, 8011eee <_svfiprintf_r+0x152>
 8011edc:	2340      	movs	r3, #64	; 0x40
 8011ede:	eba0 000a 	sub.w	r0, r0, sl
 8011ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8011ee6:	9b04      	ldr	r3, [sp, #16]
 8011ee8:	4303      	orrs	r3, r0
 8011eea:	3401      	adds	r4, #1
 8011eec:	9304      	str	r3, [sp, #16]
 8011eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ef2:	4826      	ldr	r0, [pc, #152]	; (8011f8c <_svfiprintf_r+0x1f0>)
 8011ef4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ef8:	2206      	movs	r2, #6
 8011efa:	f7ee f981 	bl	8000200 <memchr>
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d038      	beq.n	8011f74 <_svfiprintf_r+0x1d8>
 8011f02:	4b23      	ldr	r3, [pc, #140]	; (8011f90 <_svfiprintf_r+0x1f4>)
 8011f04:	bb1b      	cbnz	r3, 8011f4e <_svfiprintf_r+0x1b2>
 8011f06:	9b03      	ldr	r3, [sp, #12]
 8011f08:	3307      	adds	r3, #7
 8011f0a:	f023 0307 	bic.w	r3, r3, #7
 8011f0e:	3308      	adds	r3, #8
 8011f10:	9303      	str	r3, [sp, #12]
 8011f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f14:	4433      	add	r3, r6
 8011f16:	9309      	str	r3, [sp, #36]	; 0x24
 8011f18:	e767      	b.n	8011dea <_svfiprintf_r+0x4e>
 8011f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f1e:	460c      	mov	r4, r1
 8011f20:	2001      	movs	r0, #1
 8011f22:	e7a5      	b.n	8011e70 <_svfiprintf_r+0xd4>
 8011f24:	2300      	movs	r3, #0
 8011f26:	3401      	adds	r4, #1
 8011f28:	9305      	str	r3, [sp, #20]
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	f04f 0c0a 	mov.w	ip, #10
 8011f30:	4620      	mov	r0, r4
 8011f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f36:	3a30      	subs	r2, #48	; 0x30
 8011f38:	2a09      	cmp	r2, #9
 8011f3a:	d903      	bls.n	8011f44 <_svfiprintf_r+0x1a8>
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d0c5      	beq.n	8011ecc <_svfiprintf_r+0x130>
 8011f40:	9105      	str	r1, [sp, #20]
 8011f42:	e7c3      	b.n	8011ecc <_svfiprintf_r+0x130>
 8011f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f48:	4604      	mov	r4, r0
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	e7f0      	b.n	8011f30 <_svfiprintf_r+0x194>
 8011f4e:	ab03      	add	r3, sp, #12
 8011f50:	9300      	str	r3, [sp, #0]
 8011f52:	462a      	mov	r2, r5
 8011f54:	4b0f      	ldr	r3, [pc, #60]	; (8011f94 <_svfiprintf_r+0x1f8>)
 8011f56:	a904      	add	r1, sp, #16
 8011f58:	4638      	mov	r0, r7
 8011f5a:	f3af 8000 	nop.w
 8011f5e:	1c42      	adds	r2, r0, #1
 8011f60:	4606      	mov	r6, r0
 8011f62:	d1d6      	bne.n	8011f12 <_svfiprintf_r+0x176>
 8011f64:	89ab      	ldrh	r3, [r5, #12]
 8011f66:	065b      	lsls	r3, r3, #25
 8011f68:	f53f af2c 	bmi.w	8011dc4 <_svfiprintf_r+0x28>
 8011f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f6e:	b01d      	add	sp, #116	; 0x74
 8011f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f74:	ab03      	add	r3, sp, #12
 8011f76:	9300      	str	r3, [sp, #0]
 8011f78:	462a      	mov	r2, r5
 8011f7a:	4b06      	ldr	r3, [pc, #24]	; (8011f94 <_svfiprintf_r+0x1f8>)
 8011f7c:	a904      	add	r1, sp, #16
 8011f7e:	4638      	mov	r0, r7
 8011f80:	f000 f87a 	bl	8012078 <_printf_i>
 8011f84:	e7eb      	b.n	8011f5e <_svfiprintf_r+0x1c2>
 8011f86:	bf00      	nop
 8011f88:	08014fc8 	.word	0x08014fc8
 8011f8c:	08014fd2 	.word	0x08014fd2
 8011f90:	00000000 	.word	0x00000000
 8011f94:	08011ce5 	.word	0x08011ce5
 8011f98:	08014fce 	.word	0x08014fce

08011f9c <_printf_common>:
 8011f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fa0:	4616      	mov	r6, r2
 8011fa2:	4699      	mov	r9, r3
 8011fa4:	688a      	ldr	r2, [r1, #8]
 8011fa6:	690b      	ldr	r3, [r1, #16]
 8011fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011fac:	4293      	cmp	r3, r2
 8011fae:	bfb8      	it	lt
 8011fb0:	4613      	movlt	r3, r2
 8011fb2:	6033      	str	r3, [r6, #0]
 8011fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011fb8:	4607      	mov	r7, r0
 8011fba:	460c      	mov	r4, r1
 8011fbc:	b10a      	cbz	r2, 8011fc2 <_printf_common+0x26>
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	6033      	str	r3, [r6, #0]
 8011fc2:	6823      	ldr	r3, [r4, #0]
 8011fc4:	0699      	lsls	r1, r3, #26
 8011fc6:	bf42      	ittt	mi
 8011fc8:	6833      	ldrmi	r3, [r6, #0]
 8011fca:	3302      	addmi	r3, #2
 8011fcc:	6033      	strmi	r3, [r6, #0]
 8011fce:	6825      	ldr	r5, [r4, #0]
 8011fd0:	f015 0506 	ands.w	r5, r5, #6
 8011fd4:	d106      	bne.n	8011fe4 <_printf_common+0x48>
 8011fd6:	f104 0a19 	add.w	sl, r4, #25
 8011fda:	68e3      	ldr	r3, [r4, #12]
 8011fdc:	6832      	ldr	r2, [r6, #0]
 8011fde:	1a9b      	subs	r3, r3, r2
 8011fe0:	42ab      	cmp	r3, r5
 8011fe2:	dc26      	bgt.n	8012032 <_printf_common+0x96>
 8011fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011fe8:	1e13      	subs	r3, r2, #0
 8011fea:	6822      	ldr	r2, [r4, #0]
 8011fec:	bf18      	it	ne
 8011fee:	2301      	movne	r3, #1
 8011ff0:	0692      	lsls	r2, r2, #26
 8011ff2:	d42b      	bmi.n	801204c <_printf_common+0xb0>
 8011ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ff8:	4649      	mov	r1, r9
 8011ffa:	4638      	mov	r0, r7
 8011ffc:	47c0      	blx	r8
 8011ffe:	3001      	adds	r0, #1
 8012000:	d01e      	beq.n	8012040 <_printf_common+0xa4>
 8012002:	6823      	ldr	r3, [r4, #0]
 8012004:	68e5      	ldr	r5, [r4, #12]
 8012006:	6832      	ldr	r2, [r6, #0]
 8012008:	f003 0306 	and.w	r3, r3, #6
 801200c:	2b04      	cmp	r3, #4
 801200e:	bf08      	it	eq
 8012010:	1aad      	subeq	r5, r5, r2
 8012012:	68a3      	ldr	r3, [r4, #8]
 8012014:	6922      	ldr	r2, [r4, #16]
 8012016:	bf0c      	ite	eq
 8012018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801201c:	2500      	movne	r5, #0
 801201e:	4293      	cmp	r3, r2
 8012020:	bfc4      	itt	gt
 8012022:	1a9b      	subgt	r3, r3, r2
 8012024:	18ed      	addgt	r5, r5, r3
 8012026:	2600      	movs	r6, #0
 8012028:	341a      	adds	r4, #26
 801202a:	42b5      	cmp	r5, r6
 801202c:	d11a      	bne.n	8012064 <_printf_common+0xc8>
 801202e:	2000      	movs	r0, #0
 8012030:	e008      	b.n	8012044 <_printf_common+0xa8>
 8012032:	2301      	movs	r3, #1
 8012034:	4652      	mov	r2, sl
 8012036:	4649      	mov	r1, r9
 8012038:	4638      	mov	r0, r7
 801203a:	47c0      	blx	r8
 801203c:	3001      	adds	r0, #1
 801203e:	d103      	bne.n	8012048 <_printf_common+0xac>
 8012040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012048:	3501      	adds	r5, #1
 801204a:	e7c6      	b.n	8011fda <_printf_common+0x3e>
 801204c:	18e1      	adds	r1, r4, r3
 801204e:	1c5a      	adds	r2, r3, #1
 8012050:	2030      	movs	r0, #48	; 0x30
 8012052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012056:	4422      	add	r2, r4
 8012058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801205c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012060:	3302      	adds	r3, #2
 8012062:	e7c7      	b.n	8011ff4 <_printf_common+0x58>
 8012064:	2301      	movs	r3, #1
 8012066:	4622      	mov	r2, r4
 8012068:	4649      	mov	r1, r9
 801206a:	4638      	mov	r0, r7
 801206c:	47c0      	blx	r8
 801206e:	3001      	adds	r0, #1
 8012070:	d0e6      	beq.n	8012040 <_printf_common+0xa4>
 8012072:	3601      	adds	r6, #1
 8012074:	e7d9      	b.n	801202a <_printf_common+0x8e>
	...

08012078 <_printf_i>:
 8012078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801207c:	460c      	mov	r4, r1
 801207e:	4691      	mov	r9, r2
 8012080:	7e27      	ldrb	r7, [r4, #24]
 8012082:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012084:	2f78      	cmp	r7, #120	; 0x78
 8012086:	4680      	mov	r8, r0
 8012088:	469a      	mov	sl, r3
 801208a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801208e:	d807      	bhi.n	80120a0 <_printf_i+0x28>
 8012090:	2f62      	cmp	r7, #98	; 0x62
 8012092:	d80a      	bhi.n	80120aa <_printf_i+0x32>
 8012094:	2f00      	cmp	r7, #0
 8012096:	f000 80d8 	beq.w	801224a <_printf_i+0x1d2>
 801209a:	2f58      	cmp	r7, #88	; 0x58
 801209c:	f000 80a3 	beq.w	80121e6 <_printf_i+0x16e>
 80120a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80120a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80120a8:	e03a      	b.n	8012120 <_printf_i+0xa8>
 80120aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80120ae:	2b15      	cmp	r3, #21
 80120b0:	d8f6      	bhi.n	80120a0 <_printf_i+0x28>
 80120b2:	a001      	add	r0, pc, #4	; (adr r0, 80120b8 <_printf_i+0x40>)
 80120b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80120b8:	08012111 	.word	0x08012111
 80120bc:	08012125 	.word	0x08012125
 80120c0:	080120a1 	.word	0x080120a1
 80120c4:	080120a1 	.word	0x080120a1
 80120c8:	080120a1 	.word	0x080120a1
 80120cc:	080120a1 	.word	0x080120a1
 80120d0:	08012125 	.word	0x08012125
 80120d4:	080120a1 	.word	0x080120a1
 80120d8:	080120a1 	.word	0x080120a1
 80120dc:	080120a1 	.word	0x080120a1
 80120e0:	080120a1 	.word	0x080120a1
 80120e4:	08012231 	.word	0x08012231
 80120e8:	08012155 	.word	0x08012155
 80120ec:	08012213 	.word	0x08012213
 80120f0:	080120a1 	.word	0x080120a1
 80120f4:	080120a1 	.word	0x080120a1
 80120f8:	08012253 	.word	0x08012253
 80120fc:	080120a1 	.word	0x080120a1
 8012100:	08012155 	.word	0x08012155
 8012104:	080120a1 	.word	0x080120a1
 8012108:	080120a1 	.word	0x080120a1
 801210c:	0801221b 	.word	0x0801221b
 8012110:	680b      	ldr	r3, [r1, #0]
 8012112:	1d1a      	adds	r2, r3, #4
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	600a      	str	r2, [r1, #0]
 8012118:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801211c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012120:	2301      	movs	r3, #1
 8012122:	e0a3      	b.n	801226c <_printf_i+0x1f4>
 8012124:	6825      	ldr	r5, [r4, #0]
 8012126:	6808      	ldr	r0, [r1, #0]
 8012128:	062e      	lsls	r6, r5, #24
 801212a:	f100 0304 	add.w	r3, r0, #4
 801212e:	d50a      	bpl.n	8012146 <_printf_i+0xce>
 8012130:	6805      	ldr	r5, [r0, #0]
 8012132:	600b      	str	r3, [r1, #0]
 8012134:	2d00      	cmp	r5, #0
 8012136:	da03      	bge.n	8012140 <_printf_i+0xc8>
 8012138:	232d      	movs	r3, #45	; 0x2d
 801213a:	426d      	negs	r5, r5
 801213c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012140:	485e      	ldr	r0, [pc, #376]	; (80122bc <_printf_i+0x244>)
 8012142:	230a      	movs	r3, #10
 8012144:	e019      	b.n	801217a <_printf_i+0x102>
 8012146:	f015 0f40 	tst.w	r5, #64	; 0x40
 801214a:	6805      	ldr	r5, [r0, #0]
 801214c:	600b      	str	r3, [r1, #0]
 801214e:	bf18      	it	ne
 8012150:	b22d      	sxthne	r5, r5
 8012152:	e7ef      	b.n	8012134 <_printf_i+0xbc>
 8012154:	680b      	ldr	r3, [r1, #0]
 8012156:	6825      	ldr	r5, [r4, #0]
 8012158:	1d18      	adds	r0, r3, #4
 801215a:	6008      	str	r0, [r1, #0]
 801215c:	0628      	lsls	r0, r5, #24
 801215e:	d501      	bpl.n	8012164 <_printf_i+0xec>
 8012160:	681d      	ldr	r5, [r3, #0]
 8012162:	e002      	b.n	801216a <_printf_i+0xf2>
 8012164:	0669      	lsls	r1, r5, #25
 8012166:	d5fb      	bpl.n	8012160 <_printf_i+0xe8>
 8012168:	881d      	ldrh	r5, [r3, #0]
 801216a:	4854      	ldr	r0, [pc, #336]	; (80122bc <_printf_i+0x244>)
 801216c:	2f6f      	cmp	r7, #111	; 0x6f
 801216e:	bf0c      	ite	eq
 8012170:	2308      	moveq	r3, #8
 8012172:	230a      	movne	r3, #10
 8012174:	2100      	movs	r1, #0
 8012176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801217a:	6866      	ldr	r6, [r4, #4]
 801217c:	60a6      	str	r6, [r4, #8]
 801217e:	2e00      	cmp	r6, #0
 8012180:	bfa2      	ittt	ge
 8012182:	6821      	ldrge	r1, [r4, #0]
 8012184:	f021 0104 	bicge.w	r1, r1, #4
 8012188:	6021      	strge	r1, [r4, #0]
 801218a:	b90d      	cbnz	r5, 8012190 <_printf_i+0x118>
 801218c:	2e00      	cmp	r6, #0
 801218e:	d04d      	beq.n	801222c <_printf_i+0x1b4>
 8012190:	4616      	mov	r6, r2
 8012192:	fbb5 f1f3 	udiv	r1, r5, r3
 8012196:	fb03 5711 	mls	r7, r3, r1, r5
 801219a:	5dc7      	ldrb	r7, [r0, r7]
 801219c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80121a0:	462f      	mov	r7, r5
 80121a2:	42bb      	cmp	r3, r7
 80121a4:	460d      	mov	r5, r1
 80121a6:	d9f4      	bls.n	8012192 <_printf_i+0x11a>
 80121a8:	2b08      	cmp	r3, #8
 80121aa:	d10b      	bne.n	80121c4 <_printf_i+0x14c>
 80121ac:	6823      	ldr	r3, [r4, #0]
 80121ae:	07df      	lsls	r7, r3, #31
 80121b0:	d508      	bpl.n	80121c4 <_printf_i+0x14c>
 80121b2:	6923      	ldr	r3, [r4, #16]
 80121b4:	6861      	ldr	r1, [r4, #4]
 80121b6:	4299      	cmp	r1, r3
 80121b8:	bfde      	ittt	le
 80121ba:	2330      	movle	r3, #48	; 0x30
 80121bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80121c0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80121c4:	1b92      	subs	r2, r2, r6
 80121c6:	6122      	str	r2, [r4, #16]
 80121c8:	f8cd a000 	str.w	sl, [sp]
 80121cc:	464b      	mov	r3, r9
 80121ce:	aa03      	add	r2, sp, #12
 80121d0:	4621      	mov	r1, r4
 80121d2:	4640      	mov	r0, r8
 80121d4:	f7ff fee2 	bl	8011f9c <_printf_common>
 80121d8:	3001      	adds	r0, #1
 80121da:	d14c      	bne.n	8012276 <_printf_i+0x1fe>
 80121dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121e0:	b004      	add	sp, #16
 80121e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121e6:	4835      	ldr	r0, [pc, #212]	; (80122bc <_printf_i+0x244>)
 80121e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80121ec:	6823      	ldr	r3, [r4, #0]
 80121ee:	680e      	ldr	r6, [r1, #0]
 80121f0:	061f      	lsls	r7, r3, #24
 80121f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80121f6:	600e      	str	r6, [r1, #0]
 80121f8:	d514      	bpl.n	8012224 <_printf_i+0x1ac>
 80121fa:	07d9      	lsls	r1, r3, #31
 80121fc:	bf44      	itt	mi
 80121fe:	f043 0320 	orrmi.w	r3, r3, #32
 8012202:	6023      	strmi	r3, [r4, #0]
 8012204:	b91d      	cbnz	r5, 801220e <_printf_i+0x196>
 8012206:	6823      	ldr	r3, [r4, #0]
 8012208:	f023 0320 	bic.w	r3, r3, #32
 801220c:	6023      	str	r3, [r4, #0]
 801220e:	2310      	movs	r3, #16
 8012210:	e7b0      	b.n	8012174 <_printf_i+0xfc>
 8012212:	6823      	ldr	r3, [r4, #0]
 8012214:	f043 0320 	orr.w	r3, r3, #32
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	2378      	movs	r3, #120	; 0x78
 801221c:	4828      	ldr	r0, [pc, #160]	; (80122c0 <_printf_i+0x248>)
 801221e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012222:	e7e3      	b.n	80121ec <_printf_i+0x174>
 8012224:	065e      	lsls	r6, r3, #25
 8012226:	bf48      	it	mi
 8012228:	b2ad      	uxthmi	r5, r5
 801222a:	e7e6      	b.n	80121fa <_printf_i+0x182>
 801222c:	4616      	mov	r6, r2
 801222e:	e7bb      	b.n	80121a8 <_printf_i+0x130>
 8012230:	680b      	ldr	r3, [r1, #0]
 8012232:	6826      	ldr	r6, [r4, #0]
 8012234:	6960      	ldr	r0, [r4, #20]
 8012236:	1d1d      	adds	r5, r3, #4
 8012238:	600d      	str	r5, [r1, #0]
 801223a:	0635      	lsls	r5, r6, #24
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	d501      	bpl.n	8012244 <_printf_i+0x1cc>
 8012240:	6018      	str	r0, [r3, #0]
 8012242:	e002      	b.n	801224a <_printf_i+0x1d2>
 8012244:	0671      	lsls	r1, r6, #25
 8012246:	d5fb      	bpl.n	8012240 <_printf_i+0x1c8>
 8012248:	8018      	strh	r0, [r3, #0]
 801224a:	2300      	movs	r3, #0
 801224c:	6123      	str	r3, [r4, #16]
 801224e:	4616      	mov	r6, r2
 8012250:	e7ba      	b.n	80121c8 <_printf_i+0x150>
 8012252:	680b      	ldr	r3, [r1, #0]
 8012254:	1d1a      	adds	r2, r3, #4
 8012256:	600a      	str	r2, [r1, #0]
 8012258:	681e      	ldr	r6, [r3, #0]
 801225a:	6862      	ldr	r2, [r4, #4]
 801225c:	2100      	movs	r1, #0
 801225e:	4630      	mov	r0, r6
 8012260:	f7ed ffce 	bl	8000200 <memchr>
 8012264:	b108      	cbz	r0, 801226a <_printf_i+0x1f2>
 8012266:	1b80      	subs	r0, r0, r6
 8012268:	6060      	str	r0, [r4, #4]
 801226a:	6863      	ldr	r3, [r4, #4]
 801226c:	6123      	str	r3, [r4, #16]
 801226e:	2300      	movs	r3, #0
 8012270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012274:	e7a8      	b.n	80121c8 <_printf_i+0x150>
 8012276:	6923      	ldr	r3, [r4, #16]
 8012278:	4632      	mov	r2, r6
 801227a:	4649      	mov	r1, r9
 801227c:	4640      	mov	r0, r8
 801227e:	47d0      	blx	sl
 8012280:	3001      	adds	r0, #1
 8012282:	d0ab      	beq.n	80121dc <_printf_i+0x164>
 8012284:	6823      	ldr	r3, [r4, #0]
 8012286:	079b      	lsls	r3, r3, #30
 8012288:	d413      	bmi.n	80122b2 <_printf_i+0x23a>
 801228a:	68e0      	ldr	r0, [r4, #12]
 801228c:	9b03      	ldr	r3, [sp, #12]
 801228e:	4298      	cmp	r0, r3
 8012290:	bfb8      	it	lt
 8012292:	4618      	movlt	r0, r3
 8012294:	e7a4      	b.n	80121e0 <_printf_i+0x168>
 8012296:	2301      	movs	r3, #1
 8012298:	4632      	mov	r2, r6
 801229a:	4649      	mov	r1, r9
 801229c:	4640      	mov	r0, r8
 801229e:	47d0      	blx	sl
 80122a0:	3001      	adds	r0, #1
 80122a2:	d09b      	beq.n	80121dc <_printf_i+0x164>
 80122a4:	3501      	adds	r5, #1
 80122a6:	68e3      	ldr	r3, [r4, #12]
 80122a8:	9903      	ldr	r1, [sp, #12]
 80122aa:	1a5b      	subs	r3, r3, r1
 80122ac:	42ab      	cmp	r3, r5
 80122ae:	dcf2      	bgt.n	8012296 <_printf_i+0x21e>
 80122b0:	e7eb      	b.n	801228a <_printf_i+0x212>
 80122b2:	2500      	movs	r5, #0
 80122b4:	f104 0619 	add.w	r6, r4, #25
 80122b8:	e7f5      	b.n	80122a6 <_printf_i+0x22e>
 80122ba:	bf00      	nop
 80122bc:	08014fd9 	.word	0x08014fd9
 80122c0:	08014fea 	.word	0x08014fea

080122c4 <memmove>:
 80122c4:	4288      	cmp	r0, r1
 80122c6:	b510      	push	{r4, lr}
 80122c8:	eb01 0402 	add.w	r4, r1, r2
 80122cc:	d902      	bls.n	80122d4 <memmove+0x10>
 80122ce:	4284      	cmp	r4, r0
 80122d0:	4623      	mov	r3, r4
 80122d2:	d807      	bhi.n	80122e4 <memmove+0x20>
 80122d4:	1e43      	subs	r3, r0, #1
 80122d6:	42a1      	cmp	r1, r4
 80122d8:	d008      	beq.n	80122ec <memmove+0x28>
 80122da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122e2:	e7f8      	b.n	80122d6 <memmove+0x12>
 80122e4:	4402      	add	r2, r0
 80122e6:	4601      	mov	r1, r0
 80122e8:	428a      	cmp	r2, r1
 80122ea:	d100      	bne.n	80122ee <memmove+0x2a>
 80122ec:	bd10      	pop	{r4, pc}
 80122ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80122f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80122f6:	e7f7      	b.n	80122e8 <memmove+0x24>

080122f8 <_realloc_r>:
 80122f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122fa:	4607      	mov	r7, r0
 80122fc:	4614      	mov	r4, r2
 80122fe:	460e      	mov	r6, r1
 8012300:	b921      	cbnz	r1, 801230c <_realloc_r+0x14>
 8012302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012306:	4611      	mov	r1, r2
 8012308:	f7ff bbdc 	b.w	8011ac4 <_malloc_r>
 801230c:	b922      	cbnz	r2, 8012318 <_realloc_r+0x20>
 801230e:	f7ff fb89 	bl	8011a24 <_free_r>
 8012312:	4625      	mov	r5, r4
 8012314:	4628      	mov	r0, r5
 8012316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012318:	f000 f814 	bl	8012344 <_malloc_usable_size_r>
 801231c:	42a0      	cmp	r0, r4
 801231e:	d20f      	bcs.n	8012340 <_realloc_r+0x48>
 8012320:	4621      	mov	r1, r4
 8012322:	4638      	mov	r0, r7
 8012324:	f7ff fbce 	bl	8011ac4 <_malloc_r>
 8012328:	4605      	mov	r5, r0
 801232a:	2800      	cmp	r0, #0
 801232c:	d0f2      	beq.n	8012314 <_realloc_r+0x1c>
 801232e:	4631      	mov	r1, r6
 8012330:	4622      	mov	r2, r4
 8012332:	f7ff fb61 	bl	80119f8 <memcpy>
 8012336:	4631      	mov	r1, r6
 8012338:	4638      	mov	r0, r7
 801233a:	f7ff fb73 	bl	8011a24 <_free_r>
 801233e:	e7e9      	b.n	8012314 <_realloc_r+0x1c>
 8012340:	4635      	mov	r5, r6
 8012342:	e7e7      	b.n	8012314 <_realloc_r+0x1c>

08012344 <_malloc_usable_size_r>:
 8012344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012348:	1f18      	subs	r0, r3, #4
 801234a:	2b00      	cmp	r3, #0
 801234c:	bfbc      	itt	lt
 801234e:	580b      	ldrlt	r3, [r1, r0]
 8012350:	18c0      	addlt	r0, r0, r3
 8012352:	4770      	bx	lr

08012354 <_init>:
 8012354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012356:	bf00      	nop
 8012358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801235a:	bc08      	pop	{r3}
 801235c:	469e      	mov	lr, r3
 801235e:	4770      	bx	lr

08012360 <_fini>:
 8012360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012362:	bf00      	nop
 8012364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012366:	bc08      	pop	{r3}
 8012368:	469e      	mov	lr, r3
 801236a:	4770      	bx	lr
