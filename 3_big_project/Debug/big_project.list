
big_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027d0  08010d9c  08010d9c  00020d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801356c  0801356c  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  0801356c  0801356c  0002356c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013574  08013574  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013574  08013574  00023574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013578  08013578  00023578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801357c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          00005628  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200056bc  200056bc  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036abc  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006857  00000000  00000000  00066b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002470  00000000  00000000  0006d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002240  00000000  00000000  0006f848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002867c  00000000  00000000  00071a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ddd7  00000000  00000000  0009a104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7b21  00000000  00000000  000c7edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001af9fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f80  00000000  00000000  001afa50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010d84 	.word	0x08010d84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08010d84 	.word	0x08010d84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <time_i2c_write_single>:



/*function to transmit one byte of data to register_address on ds3231 (device_address: 0X68)*/
void time_i2c_write_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af04      	add	r7, sp, #16
 800057e:	4603      	mov	r3, r0
 8000580:	603a      	str	r2, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	460b      	mov	r3, r1
 8000586:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Write(&hi2c3, DS3231_I2C_ADDRESS<<1, DS3231_REGISTER_SECONDS_DEFAULT, 1, &seco, 1, 1000);
	//HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	HAL_I2C_Mem_Write(&hi2c3, (uint16_t)device_address<<1, register_address, 1, data_byte, 1, 1000);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	b29b      	uxth	r3, r3
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	b299      	uxth	r1, r3
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	b29a      	uxth	r2, r3
 8000594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000598:	9302      	str	r3, [sp, #8]
 800059a:	2301      	movs	r3, #1
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2301      	movs	r3, #1
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <time_i2c_write_single+0x3c>)
 80005a6:	f005 fb3d 	bl	8005c24 <HAL_I2C_Mem_Write>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20004ab4 	.word	0x20004ab4

080005b8 <time_i2c_write_multi>:

/*function to transmit an array of data to device_address, starting from start_register_address*/
void time_i2c_write_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af04      	add	r7, sp, #16
 80005be:	603a      	str	r2, [r7, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	460b      	mov	r3, r1
 80005c8:	71bb      	strb	r3, [r7, #6]
 80005ca:	4613      	mov	r3, r2
 80005cc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c3, device_address<<1, start_register_address, 1, data_array, data_length, 1000);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	b299      	uxth	r1, r3
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	b29a      	uxth	r2, r3
 80005da:	797b      	ldrb	r3, [r7, #5]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e2:	9002      	str	r0, [sp, #8]
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <time_i2c_write_multi+0x44>)
 80005ee:	f005 fb19 	bl	8005c24 <HAL_I2C_Mem_Write>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20004ab4 	.word	0x20004ab4

08000600 <time_i2c_read_single>:

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af04      	add	r7, sp, #16
 8000606:	4603      	mov	r3, r0
 8000608:	603a      	str	r2, [r7, #0]
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	460b      	mov	r3, r1
 800060e:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,register_address, 1, data_byte, 1, 1000);
	HAL_I2C_Mem_Read(&hi2c3, device_address<<1,register_address, 1, data_byte, 1, 1000);
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	b29b      	uxth	r3, r3
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	b299      	uxth	r1, r3
 8000618:	79bb      	ldrb	r3, [r7, #6]
 800061a:	b29a      	uxth	r2, r3
 800061c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2301      	movs	r3, #1
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <time_i2c_read_single+0x3c>)
 800062e:	f005 fbf3 	bl	8005e18 <HAL_I2C_Mem_Read>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20004ab4 	.word	0x20004ab4

08000640 <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af04      	add	r7, sp, #16
 8000646:	603a      	str	r2, [r7, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	460b      	mov	r3, r1
 8000650:	71bb      	strb	r3, [r7, #6]
 8000652:	4613      	mov	r3, r2
 8000654:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,start_register_address, 1, data_array, data_length, 1000);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	b29b      	uxth	r3, r3
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	b299      	uxth	r1, r3
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	b29a      	uxth	r2, r3
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	b29b      	uxth	r3, r3
 8000666:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066a:	9002      	str	r0, [sp, #8]
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2301      	movs	r3, #1
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <time_i2c_read_multi+0x44>)
 8000676:	f005 fbcf 	bl	8005e18 <HAL_I2C_Mem_Read>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20004ab4 	.word	0x20004ab4

08000688 <ds3231_I2C_init>:

/*function to initialize I2C peripheral in 100khz or 400khz*/
void ds3231_I2C_init()
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <ds3231_read>:
  }
}

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  switch (option)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b0e      	cmp	r3, #14
 80006a8:	f200 80ac 	bhi.w	8000804 <ds3231_read+0x16c>
 80006ac:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <ds3231_read+0x1c>)
 80006ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b2:	bf00      	nop
 80006b4:	080006f1 	.word	0x080006f1
 80006b8:	0800070d 	.word	0x0800070d
 80006bc:	08000729 	.word	0x08000729
 80006c0:	08000745 	.word	0x08000745
 80006c4:	08000761 	.word	0x08000761
 80006c8:	0800077d 	.word	0x0800077d
 80006cc:	08000799 	.word	0x08000799
 80006d0:	080007b5 	.word	0x080007b5
 80006d4:	080007c9 	.word	0x080007c9
 80006d8:	080007dd 	.word	0x080007dd
 80006dc:	08000805 	.word	0x08000805
 80006e0:	08000805 	.word	0x08000805
 80006e4:	08000805 	.word	0x08000805
 80006e8:	08000805 	.word	0x08000805
 80006ec:	080007ef 	.word	0x080007ef
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 80006f0:	4a48      	ldr	r2, [pc, #288]	; (8000814 <ds3231_read+0x17c>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	2068      	movs	r0, #104	; 0x68
 80006f6:	f7ff ff83 	bl	8000600 <time_i2c_read_single>
      *data_array = register_current_value;
 80006fa:	4b46      	ldr	r3, [pc, #280]	; (8000814 <ds3231_read+0x17c>)
 80006fc:	781a      	ldrb	r2, [r3, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000702:	2101      	movs	r1, #1
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f000 f9cf 	bl	8000aa8 <BCD_to_HEX>
      break;
 800070a:	e07d      	b.n	8000808 <ds3231_read+0x170>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 800070c:	4a41      	ldr	r2, [pc, #260]	; (8000814 <ds3231_read+0x17c>)
 800070e:	2101      	movs	r1, #1
 8000710:	2068      	movs	r0, #104	; 0x68
 8000712:	f7ff ff75 	bl	8000600 <time_i2c_read_single>
      *data_array = register_current_value;
 8000716:	4b3f      	ldr	r3, [pc, #252]	; (8000814 <ds3231_read+0x17c>)
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800071e:	2101      	movs	r1, #1
 8000720:	6838      	ldr	r0, [r7, #0]
 8000722:	f000 f9c1 	bl	8000aa8 <BCD_to_HEX>
      break;
 8000726:	e06f      	b.n	8000808 <ds3231_read+0x170>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 8000728:	4a3a      	ldr	r2, [pc, #232]	; (8000814 <ds3231_read+0x17c>)
 800072a:	2102      	movs	r1, #2
 800072c:	2068      	movs	r0, #104	; 0x68
 800072e:	f7ff ff67 	bl	8000600 <time_i2c_read_single>
      *data_array = register_current_value;
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <ds3231_read+0x17c>)
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800073a:	2101      	movs	r1, #1
 800073c:	6838      	ldr	r0, [r7, #0]
 800073e:	f000 f9b3 	bl	8000aa8 <BCD_to_HEX>
      break;
 8000742:	e061      	b.n	8000808 <ds3231_read+0x170>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 8000744:	4a33      	ldr	r2, [pc, #204]	; (8000814 <ds3231_read+0x17c>)
 8000746:	2103      	movs	r1, #3
 8000748:	2068      	movs	r0, #104	; 0x68
 800074a:	f7ff ff59 	bl	8000600 <time_i2c_read_single>
      *data_array = register_current_value;
 800074e:	4b31      	ldr	r3, [pc, #196]	; (8000814 <ds3231_read+0x17c>)
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000756:	2101      	movs	r1, #1
 8000758:	6838      	ldr	r0, [r7, #0]
 800075a:	f000 f9a5 	bl	8000aa8 <BCD_to_HEX>
      break;
 800075e:	e053      	b.n	8000808 <ds3231_read+0x170>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 8000760:	4a2c      	ldr	r2, [pc, #176]	; (8000814 <ds3231_read+0x17c>)
 8000762:	2104      	movs	r1, #4
 8000764:	2068      	movs	r0, #104	; 0x68
 8000766:	f7ff ff4b 	bl	8000600 <time_i2c_read_single>
      *data_array = register_current_value;
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <ds3231_read+0x17c>)
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000772:	2101      	movs	r1, #1
 8000774:	6838      	ldr	r0, [r7, #0]
 8000776:	f000 f997 	bl	8000aa8 <BCD_to_HEX>
      break;
 800077a:	e045      	b.n	8000808 <ds3231_read+0x170>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 800077c:	4a25      	ldr	r2, [pc, #148]	; (8000814 <ds3231_read+0x17c>)
 800077e:	2105      	movs	r1, #5
 8000780:	2068      	movs	r0, #104	; 0x68
 8000782:	f7ff ff3d 	bl	8000600 <time_i2c_read_single>
      *data_array = register_current_value;
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <ds3231_read+0x17c>)
 8000788:	781a      	ldrb	r2, [r3, #0]
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800078e:	2101      	movs	r1, #1
 8000790:	6838      	ldr	r0, [r7, #0]
 8000792:	f000 f989 	bl	8000aa8 <BCD_to_HEX>
      break;
 8000796:	e037      	b.n	8000808 <ds3231_read+0x170>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 8000798:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <ds3231_read+0x17c>)
 800079a:	2106      	movs	r1, #6
 800079c:	2068      	movs	r0, #104	; 0x68
 800079e:	f7ff ff2f 	bl	8000600 <time_i2c_read_single>
      *data_array = register_current_value;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <ds3231_read+0x17c>)
 80007a4:	781a      	ldrb	r2, [r3, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80007aa:	2101      	movs	r1, #1
 80007ac:	6838      	ldr	r0, [r7, #0]
 80007ae:	f000 f97b 	bl	8000aa8 <BCD_to_HEX>
      break;
 80007b2:	e029      	b.n	8000808 <ds3231_read+0x170>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <ds3231_read+0x17c>)
 80007b6:	210e      	movs	r1, #14
 80007b8:	2068      	movs	r0, #104	; 0x68
 80007ba:	f7ff ff21 	bl	8000600 <time_i2c_read_single>
      *data_array = register_current_value;
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <ds3231_read+0x17c>)
 80007c0:	781a      	ldrb	r2, [r3, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	701a      	strb	r2, [r3, #0]
      break;
 80007c6:	e01f      	b.n	8000808 <ds3231_read+0x170>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <ds3231_read+0x17c>)
 80007ca:	210f      	movs	r1, #15
 80007cc:	2068      	movs	r0, #104	; 0x68
 80007ce:	f7ff ff17 	bl	8000600 <time_i2c_read_single>
      *data_array = register_current_value;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <ds3231_read+0x17c>)
 80007d4:	781a      	ldrb	r2, [r3, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	701a      	strb	r2, [r3, #0]
      break;
 80007da:	e015      	b.n	8000808 <ds3231_read+0x170>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 80007dc:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <ds3231_read+0x17c>)
 80007de:	2110      	movs	r1, #16
 80007e0:	2068      	movs	r0, #104	; 0x68
 80007e2:	f7ff ff0d 	bl	8000600 <time_i2c_read_single>
      *data_array = register_current_value;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <ds3231_read+0x17c>)
 80007e8:	781a      	ldrb	r2, [r3, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 80007ee:	2307      	movs	r3, #7
 80007f0:	683a      	ldr	r2, [r7, #0]
 80007f2:	2100      	movs	r1, #0
 80007f4:	2068      	movs	r0, #104	; 0x68
 80007f6:	f7ff ff23 	bl	8000640 <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 80007fa:	2107      	movs	r1, #7
 80007fc:	6838      	ldr	r0, [r7, #0]
 80007fe:	f000 f953 	bl	8000aa8 <BCD_to_HEX>
      break;
 8000802:	e001      	b.n	8000808 <ds3231_read+0x170>
    default:
      return OPERATION_FAILED;
 8000804:	2300      	movs	r3, #0
 8000806:	e000      	b.n	800080a <ds3231_read+0x172>
  }
  return OPERATION_DONE;
 8000808:	2301      	movs	r3, #1
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000b0 	.word	0x200000b0

08000818 <ds3231_set>:

/*function to set internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_set(uint8_t option, uint8_t *data_array)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b0e      	cmp	r3, #14
 8000828:	f200 80d5 	bhi.w	80009d6 <ds3231_set+0x1be>
 800082c:	a201      	add	r2, pc, #4	; (adr r2, 8000834 <ds3231_set+0x1c>)
 800082e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000832:	bf00      	nop
 8000834:	08000871 	.word	0x08000871
 8000838:	0800088d 	.word	0x0800088d
 800083c:	080008a9 	.word	0x080008a9
 8000840:	080008c5 	.word	0x080008c5
 8000844:	080008e1 	.word	0x080008e1
 8000848:	080008fd 	.word	0x080008fd
 800084c:	08000919 	.word	0x08000919
 8000850:	08000935 	.word	0x08000935
 8000854:	0800096d 	.word	0x0800096d
 8000858:	080009c3 	.word	0x080009c3
 800085c:	080009d7 	.word	0x080009d7
 8000860:	080009d7 	.word	0x080009d7
 8000864:	080009d7 	.word	0x080009d7
 8000868:	080009d7 	.word	0x080009d7
 800086c:	080009a5 	.word	0x080009a5
  {
    case SECOND:
      time_registers_clone[0] = *data_array;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	4b5b      	ldr	r3, [pc, #364]	; (80009e4 <ds3231_set+0x1cc>)
 8000876:	701a      	strb	r2, [r3, #0]
      HEX_to_BCD(&time_registers_clone[0], 1);
 8000878:	2101      	movs	r1, #1
 800087a:	485a      	ldr	r0, [pc, #360]	; (80009e4 <ds3231_set+0x1cc>)
 800087c:	f000 f953 	bl	8000b26 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0]);
 8000880:	4a58      	ldr	r2, [pc, #352]	; (80009e4 <ds3231_set+0x1cc>)
 8000882:	2100      	movs	r1, #0
 8000884:	2068      	movs	r0, #104	; 0x68
 8000886:	f7ff fe77 	bl	8000578 <time_i2c_write_single>
      break;
 800088a:	e0a6      	b.n	80009da <ds3231_set+0x1c2>
    case MINUTE:
      time_registers_clone[1] = *data_array;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	781a      	ldrb	r2, [r3, #0]
 8000890:	4b54      	ldr	r3, [pc, #336]	; (80009e4 <ds3231_set+0x1cc>)
 8000892:	705a      	strb	r2, [r3, #1]
      HEX_to_BCD(&time_registers_clone[1], 1);
 8000894:	2101      	movs	r1, #1
 8000896:	4854      	ldr	r0, [pc, #336]	; (80009e8 <ds3231_set+0x1d0>)
 8000898:	f000 f945 	bl	8000b26 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &time_registers_clone[1]);
 800089c:	4a52      	ldr	r2, [pc, #328]	; (80009e8 <ds3231_set+0x1d0>)
 800089e:	2101      	movs	r1, #1
 80008a0:	2068      	movs	r0, #104	; 0x68
 80008a2:	f7ff fe69 	bl	8000578 <time_i2c_write_single>
      break;
 80008a6:	e098      	b.n	80009da <ds3231_set+0x1c2>
    case HOUR:
      time_registers_clone[2] = *data_array;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	4b4d      	ldr	r3, [pc, #308]	; (80009e4 <ds3231_set+0x1cc>)
 80008ae:	709a      	strb	r2, [r3, #2]
      HEX_to_BCD(&time_registers_clone[2], 1);
 80008b0:	2101      	movs	r1, #1
 80008b2:	484e      	ldr	r0, [pc, #312]	; (80009ec <ds3231_set+0x1d4>)
 80008b4:	f000 f937 	bl	8000b26 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &time_registers_clone[2]);
 80008b8:	4a4c      	ldr	r2, [pc, #304]	; (80009ec <ds3231_set+0x1d4>)
 80008ba:	2102      	movs	r1, #2
 80008bc:	2068      	movs	r0, #104	; 0x68
 80008be:	f7ff fe5b 	bl	8000578 <time_i2c_write_single>
      break;
 80008c2:	e08a      	b.n	80009da <ds3231_set+0x1c2>
    case DAY_OF_WEEK:
      time_registers_clone[3] = *data_array;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	781a      	ldrb	r2, [r3, #0]
 80008c8:	4b46      	ldr	r3, [pc, #280]	; (80009e4 <ds3231_set+0x1cc>)
 80008ca:	70da      	strb	r2, [r3, #3]
      HEX_to_BCD(&time_registers_clone[3], 1);
 80008cc:	2101      	movs	r1, #1
 80008ce:	4848      	ldr	r0, [pc, #288]	; (80009f0 <ds3231_set+0x1d8>)
 80008d0:	f000 f929 	bl	8000b26 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &time_registers_clone[3]);
 80008d4:	4a46      	ldr	r2, [pc, #280]	; (80009f0 <ds3231_set+0x1d8>)
 80008d6:	2103      	movs	r1, #3
 80008d8:	2068      	movs	r0, #104	; 0x68
 80008da:	f7ff fe4d 	bl	8000578 <time_i2c_write_single>
      break;
 80008de:	e07c      	b.n	80009da <ds3231_set+0x1c2>
    case DATE:
      time_registers_clone[4] = *data_array;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <ds3231_set+0x1cc>)
 80008e6:	711a      	strb	r2, [r3, #4]
      HEX_to_BCD(&time_registers_clone[4], 1);
 80008e8:	2101      	movs	r1, #1
 80008ea:	4842      	ldr	r0, [pc, #264]	; (80009f4 <ds3231_set+0x1dc>)
 80008ec:	f000 f91b 	bl	8000b26 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &time_registers_clone[4]);
 80008f0:	4a40      	ldr	r2, [pc, #256]	; (80009f4 <ds3231_set+0x1dc>)
 80008f2:	2104      	movs	r1, #4
 80008f4:	2068      	movs	r0, #104	; 0x68
 80008f6:	f7ff fe3f 	bl	8000578 <time_i2c_write_single>
      break;
 80008fa:	e06e      	b.n	80009da <ds3231_set+0x1c2>
    case MONTH:
      time_registers_clone[5] = *data_array;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <ds3231_set+0x1cc>)
 8000902:	715a      	strb	r2, [r3, #5]
      HEX_to_BCD(&time_registers_clone[5], 1);
 8000904:	2101      	movs	r1, #1
 8000906:	483c      	ldr	r0, [pc, #240]	; (80009f8 <ds3231_set+0x1e0>)
 8000908:	f000 f90d 	bl	8000b26 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &time_registers_clone[5]);
 800090c:	4a3a      	ldr	r2, [pc, #232]	; (80009f8 <ds3231_set+0x1e0>)
 800090e:	2105      	movs	r1, #5
 8000910:	2068      	movs	r0, #104	; 0x68
 8000912:	f7ff fe31 	bl	8000578 <time_i2c_write_single>
      break;
 8000916:	e060      	b.n	80009da <ds3231_set+0x1c2>
    case YEAR:
      time_registers_clone[6] = *data_array;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <ds3231_set+0x1cc>)
 800091e:	719a      	strb	r2, [r3, #6]
      HEX_to_BCD(&time_registers_clone[6], 1);
 8000920:	2101      	movs	r1, #1
 8000922:	4836      	ldr	r0, [pc, #216]	; (80009fc <ds3231_set+0x1e4>)
 8000924:	f000 f8ff 	bl	8000b26 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &time_registers_clone[6]);
 8000928:	4a34      	ldr	r2, [pc, #208]	; (80009fc <ds3231_set+0x1e4>)
 800092a:	2106      	movs	r1, #6
 800092c:	2068      	movs	r0, #104	; 0x68
 800092e:	f7ff fe23 	bl	8000578 <time_i2c_write_single>
      break;
 8000932:	e052      	b.n	80009da <ds3231_set+0x1c2>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8000934:	4a32      	ldr	r2, [pc, #200]	; (8000a00 <ds3231_set+0x1e8>)
 8000936:	210e      	movs	r1, #14
 8000938:	2068      	movs	r0, #104	; 0x68
 800093a:	f7ff fe61 	bl	8000600 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (*data_array & (~(1 << DS3231_BIT_EOSC)));
 800093e:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <ds3231_set+0x1e8>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b25b      	sxtb	r3, r3
 8000944:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000948:	b25a      	sxtb	r2, r3
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b25b      	sxtb	r3, r3
 8000950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000954:	b25b      	sxtb	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b25b      	sxtb	r3, r3
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <ds3231_set+0x1ec>)
 800095e:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8000960:	4a28      	ldr	r2, [pc, #160]	; (8000a04 <ds3231_set+0x1ec>)
 8000962:	210e      	movs	r1, #14
 8000964:	2068      	movs	r0, #104	; 0x68
 8000966:	f7ff fe07 	bl	8000578 <time_i2c_write_single>
      break;
 800096a:	e036      	b.n	80009da <ds3231_set+0x1c2>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 800096c:	4a24      	ldr	r2, [pc, #144]	; (8000a00 <ds3231_set+0x1e8>)
 800096e:	210f      	movs	r1, #15
 8000970:	2068      	movs	r0, #104	; 0x68
 8000972:	f7ff fe45 	bl	8000600 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (*data_array & (~(1 << DS3231_BIT_OSF)));
 8000976:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <ds3231_set+0x1e8>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b25b      	sxtb	r3, r3
 800097c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000980:	b25a      	sxtb	r2, r3
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b25b      	sxtb	r3, r3
 8000988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800098c:	b25b      	sxtb	r3, r3
 800098e:	4313      	orrs	r3, r2
 8000990:	b25b      	sxtb	r3, r3
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <ds3231_set+0x1ec>)
 8000996:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 8000998:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <ds3231_set+0x1ec>)
 800099a:	210f      	movs	r1, #15
 800099c:	2068      	movs	r0, #104	; 0x68
 800099e:	f7ff fdeb 	bl	8000578 <time_i2c_write_single>
      break;
 80009a2:	e01a      	b.n	80009da <ds3231_set+0x1c2>
    case TIME:
      ds3231_data_clone(TIME, data_array);
 80009a4:	6839      	ldr	r1, [r7, #0]
 80009a6:	200e      	movs	r0, #14
 80009a8:	f000 f82e 	bl	8000a08 <ds3231_data_clone>
      HEX_to_BCD(&time_registers_clone[0], 7);
 80009ac:	2107      	movs	r1, #7
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <ds3231_set+0x1cc>)
 80009b0:	f000 f8b9 	bl	8000b26 <HEX_to_BCD>
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);
 80009b4:	2307      	movs	r3, #7
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <ds3231_set+0x1cc>)
 80009b8:	2100      	movs	r1, #0
 80009ba:	2068      	movs	r0, #104	; 0x68
 80009bc:	f7ff fdfc 	bl	80005b8 <time_i2c_write_multi>
      break;
 80009c0:	e00b      	b.n	80009da <ds3231_set+0x1c2>
    case AGING_OFFSET:
      register_new_value = *data_array;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <ds3231_set+0x1ec>)
 80009c8:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <ds3231_set+0x1ec>)
 80009cc:	2110      	movs	r1, #16
 80009ce:	2068      	movs	r0, #104	; 0x68
 80009d0:	f7ff fdd2 	bl	8000578 <time_i2c_write_single>
      break;
 80009d4:	e001      	b.n	80009da <ds3231_set+0x1c2>
    default:
      return OPERATION_FAILED;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <ds3231_set+0x1c4>
  }
  return OPERATION_DONE;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000b4 	.word	0x200000b4
 80009e8:	200000b5 	.word	0x200000b5
 80009ec:	200000b6 	.word	0x200000b6
 80009f0:	200000b7 	.word	0x200000b7
 80009f4:	200000b8 	.word	0x200000b8
 80009f8:	200000b9 	.word	0x200000b9
 80009fc:	200000ba 	.word	0x200000ba
 8000a00:	200000b0 	.word	0x200000b0
 8000a04:	200000b1 	.word	0x200000b1

08000a08 <ds3231_data_clone>:

/*to clone the desired data and prevent reconversion of BCD to HEX*/
static void ds3231_data_clone(uint8_t option, uint8_t *input_array)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b0e      	cmp	r3, #14
 8000a18:	d006      	beq.n	8000a28 <ds3231_data_clone+0x20>
 8000a1a:	2b0e      	cmp	r3, #14
 8000a1c:	dc37      	bgt.n	8000a8e <ds3231_data_clone+0x86>
 8000a1e:	2b0a      	cmp	r3, #10
 8000a20:	d013      	beq.n	8000a4a <ds3231_data_clone+0x42>
 8000a22:	2b0b      	cmp	r3, #11
 8000a24:	d022      	beq.n	8000a6c <ds3231_data_clone+0x64>
      {
        alarm2_registers_clone[counter] = input_array[counter];
      }
      break;
    default:
      break;
 8000a26:	e032      	b.n	8000a8e <ds3231_data_clone+0x86>
      for (uint8_t counter = 0; counter < 7; counter++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73fb      	strb	r3, [r7, #15]
 8000a2c:	e009      	b.n	8000a42 <ds3231_data_clone+0x3a>
        time_registers_clone[counter] = input_array[counter];
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	441a      	add	r2, r3
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	7811      	ldrb	r1, [r2, #0]
 8000a38:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <ds3231_data_clone+0x94>)
 8000a3a:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 7; counter++)
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	73fb      	strb	r3, [r7, #15]
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b06      	cmp	r3, #6
 8000a46:	d9f2      	bls.n	8000a2e <ds3231_data_clone+0x26>
      break;
 8000a48:	e022      	b.n	8000a90 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 4; counter++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73bb      	strb	r3, [r7, #14]
 8000a4e:	e009      	b.n	8000a64 <ds3231_data_clone+0x5c>
        alarm1_registers_clone[counter] = input_array[counter];
 8000a50:	7bbb      	ldrb	r3, [r7, #14]
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	441a      	add	r2, r3
 8000a56:	7bbb      	ldrb	r3, [r7, #14]
 8000a58:	7811      	ldrb	r1, [r2, #0]
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <ds3231_data_clone+0x98>)
 8000a5c:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 4; counter++)
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	3301      	adds	r3, #1
 8000a62:	73bb      	strb	r3, [r7, #14]
 8000a64:	7bbb      	ldrb	r3, [r7, #14]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d9f2      	bls.n	8000a50 <ds3231_data_clone+0x48>
      break;
 8000a6a:	e011      	b.n	8000a90 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 3; counter++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	737b      	strb	r3, [r7, #13]
 8000a70:	e009      	b.n	8000a86 <ds3231_data_clone+0x7e>
        alarm2_registers_clone[counter] = input_array[counter];
 8000a72:	7b7b      	ldrb	r3, [r7, #13]
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	441a      	add	r2, r3
 8000a78:	7b7b      	ldrb	r3, [r7, #13]
 8000a7a:	7811      	ldrb	r1, [r2, #0]
 8000a7c:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <ds3231_data_clone+0x9c>)
 8000a7e:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 3; counter++)
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	3301      	adds	r3, #1
 8000a84:	737b      	strb	r3, [r7, #13]
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d9f2      	bls.n	8000a72 <ds3231_data_clone+0x6a>
      break;
 8000a8c:	e000      	b.n	8000a90 <ds3231_data_clone+0x88>
      break;
 8000a8e:	bf00      	nop
  }
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	200000b4 	.word	0x200000b4
 8000aa0:	200000bc 	.word	0x200000bc
 8000aa4:	200000c0 	.word	0x200000c0

08000aa8 <BCD_to_HEX>:

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e028      	b.n	8000b10 <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	091b      	lsrs	r3, r3, #4
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad4:	6879      	ldr	r1, [r7, #4]
 8000ad6:	440b      	add	r3, r1
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	091b      	lsrs	r3, r3, #4
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b2d9      	uxtb	r1, r3
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	4403      	add	r3, r0
 8000afe:	440a      	add	r2, r1
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	dad2      	bge.n	8000abe <BCD_to_HEX+0x16>
  }
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <HEX_to_BCD>:

/*internal function related to this file and not accessible from outside*/
static void HEX_to_BCD(uint8_t *data_array, uint8_t array_length)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b085      	sub	sp, #20
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	70fb      	strb	r3, [r7, #3]
  uint8_t temporary_value;
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000b32:	78fb      	ldrb	r3, [r7, #3]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	73bb      	strb	r3, [r7, #14]
 8000b3a:	e02d      	b.n	8000b98 <HEX_to_BCD+0x72>
  {
    temporary_value = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8000b40:	e00e      	b.n	8000b60 <HEX_to_BCD+0x3a>
    {
      temporary_value += 0X10;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	3310      	adds	r3, #16
 8000b46:	73fb      	strb	r3, [r7, #15]
      data_array[index] -= 0X0A;
 8000b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	440b      	add	r3, r1
 8000b5a:	3a0a      	subs	r2, #10
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	701a      	strb	r2, [r3, #0]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8000b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	2b09      	cmp	r3, #9
 8000b6e:	dce8      	bgt.n	8000b42 <HEX_to_BCD+0x1c>
    }
    temporary_value += data_array[index];
 8000b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	73fb      	strb	r3, [r7, #15]
    data_array[index] = temporary_value;
 8000b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	7bfa      	ldrb	r2, [r7, #15]
 8000b8a:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	3b01      	subs	r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	73bb      	strb	r3, [r7, #14]
 8000b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	dacd      	bge.n	8000b3c <HEX_to_BCD+0x16>
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb4:	f002 fcb8 	bl	8003528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb8:	f000 f89a 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f000 faa4 	bl	8001108 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bc0:	f000 f902 	bl	8000dc8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000bc4:	f000 f95c 	bl	8000e80 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000bc8:	f000 f9b0 	bl	8000f2c <MX_SPI1_Init>
  MX_RTC_Init();
 8000bcc:	f000 f988 	bl	8000ee0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000bd0:	f000 fa70 	bl	80010b4 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000bd4:	f000 f926 	bl	8000e24 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000bd8:	f000 f9de 	bl	8000f98 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000bdc:	f000 fa34 	bl	8001048 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &user_data , 1);			// Turn on receive one char in interrupt mode
 8000be0:	2201      	movs	r2, #1
 8000be2:	4928      	ldr	r1, [pc, #160]	; (8000c84 <main+0xd4>)
 8000be4:	4828      	ldr	r0, [pc, #160]	; (8000c88 <main+0xd8>)
 8000be6:	f008 f806 	bl	8008bf6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bea:	f00b ffc9 	bl	800cb80 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of input_Queue */
  input_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &input_Queue_attributes);
 8000bee:	4a27      	ldr	r2, [pc, #156]	; (8000c8c <main+0xdc>)
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	2010      	movs	r0, #16
 8000bf4:	f00c f8bb 	bl	800cd6e <osMessageQueueNew>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4a25      	ldr	r2, [pc, #148]	; (8000c90 <main+0xe0>)
 8000bfc:	6013      	str	r3, [r2, #0]

  /* creation of print_Queue */
  print_QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &print_Queue_attributes);
 8000bfe:	4a25      	ldr	r2, [pc, #148]	; (8000c94 <main+0xe4>)
 8000c00:	2102      	movs	r1, #2
 8000c02:	2010      	movs	r0, #16
 8000c04:	f00c f8b3 	bl	800cd6e <osMessageQueueNew>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <main+0xe8>)
 8000c0c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c0e:	4a23      	ldr	r2, [pc, #140]	; (8000c9c <main+0xec>)
 8000c10:	2100      	movs	r1, #0
 8000c12:	4823      	ldr	r0, [pc, #140]	; (8000ca0 <main+0xf0>)
 8000c14:	f00b fffe 	bl	800cc14 <osThreadNew>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <main+0xf4>)
 8000c1c:	6013      	str	r3, [r2, #0]

  /* creation of menu_task */
  menu_taskHandle = osThreadNew(start_menu_task, NULL, &menu_task_attributes);
 8000c1e:	4a22      	ldr	r2, [pc, #136]	; (8000ca8 <main+0xf8>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	4822      	ldr	r0, [pc, #136]	; (8000cac <main+0xfc>)
 8000c24:	f00b fff6 	bl	800cc14 <osThreadNew>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <main+0x100>)
 8000c2c:	6013      	str	r3, [r2, #0]

  /* creation of led_task */
  led_taskHandle = osThreadNew(start_led_task, NULL, &led_task_attributes);
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <main+0x104>)
 8000c30:	2100      	movs	r1, #0
 8000c32:	4821      	ldr	r0, [pc, #132]	; (8000cb8 <main+0x108>)
 8000c34:	f00b ffee 	bl	800cc14 <osThreadNew>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4a20      	ldr	r2, [pc, #128]	; (8000cbc <main+0x10c>)
 8000c3c:	6013      	str	r3, [r2, #0]

  /* creation of rtc_task */
  rtc_taskHandle = osThreadNew(start_rtc_task, NULL, &rtc_task_attributes);
 8000c3e:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <main+0x110>)
 8000c40:	2100      	movs	r1, #0
 8000c42:	4820      	ldr	r0, [pc, #128]	; (8000cc4 <main+0x114>)
 8000c44:	f00b ffe6 	bl	800cc14 <osThreadNew>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4a1f      	ldr	r2, [pc, #124]	; (8000cc8 <main+0x118>)
 8000c4c:	6013      	str	r3, [r2, #0]

  /* creation of print_task */
  print_taskHandle = osThreadNew(start_print, NULL, &print_task_attributes);
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <main+0x11c>)
 8000c50:	2100      	movs	r1, #0
 8000c52:	481f      	ldr	r0, [pc, #124]	; (8000cd0 <main+0x120>)
 8000c54:	f00b ffde 	bl	800cc14 <osThreadNew>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <main+0x124>)
 8000c5c:	6013      	str	r3, [r2, #0]

  /* creation of com_handl_task */
  com_handl_taskHandle = osThreadNew(start_com_handl, NULL, &com_handl_task_attributes);
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <main+0x128>)
 8000c60:	2100      	movs	r1, #0
 8000c62:	481e      	ldr	r0, [pc, #120]	; (8000cdc <main+0x12c>)
 8000c64:	f00b ffd6 	bl	800cc14 <osThreadNew>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <main+0x130>)
 8000c6c:	6013      	str	r3, [r2, #0]

  /* creation of OLED_RTC */
  OLED_RTCHandle = osThreadNew(StartOLED_RTC, NULL, &OLED_RTC_attributes);
 8000c6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ce4 <main+0x134>)
 8000c70:	2100      	movs	r1, #0
 8000c72:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <main+0x138>)
 8000c74:	f00b ffce 	bl	800cc14 <osThreadNew>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <main+0x13c>)
 8000c7c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c7e:	f00b ffa3 	bl	800cbc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <main+0xd2>
 8000c84:	20004bd4 	.word	0x20004bd4
 8000c88:	20004c3c 	.word	0x20004c3c
 8000c8c:	08011028 	.word	0x08011028
 8000c90:	20004b60 	.word	0x20004b60
 8000c94:	08011040 	.word	0x08011040
 8000c98:	20004bd8 	.word	0x20004bd8
 8000c9c:	08010f2c 	.word	0x08010f2c
 8000ca0:	08001415 	.word	0x08001415
 8000ca4:	20004ab0 	.word	0x20004ab0
 8000ca8:	08010f50 	.word	0x08010f50
 8000cac:	0800144d 	.word	0x0800144d
 8000cb0:	20004c80 	.word	0x20004c80
 8000cb4:	08010f74 	.word	0x08010f74
 8000cb8:	0800145d 	.word	0x0800145d
 8000cbc:	20004b5c 	.word	0x20004b5c
 8000cc0:	08010f98 	.word	0x08010f98
 8000cc4:	0800146d 	.word	0x0800146d
 8000cc8:	20004bdc 	.word	0x20004bdc
 8000ccc:	08010fbc 	.word	0x08010fbc
 8000cd0:	0800147d 	.word	0x0800147d
 8000cd4:	20004b68 	.word	0x20004b68
 8000cd8:	08010fe0 	.word	0x08010fe0
 8000cdc:	0800148d 	.word	0x0800148d
 8000ce0:	20004c38 	.word	0x20004c38
 8000ce4:	08011004 	.word	0x08011004
 8000ce8:	080014b9 	.word	0x080014b9
 8000cec:	20004b64 	.word	0x20004b64

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b094      	sub	sp, #80	; 0x50
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	2230      	movs	r2, #48	; 0x30
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f00f fba0 	bl	8010444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <SystemClock_Config+0xd0>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <SystemClock_Config+0xd0>)
 8000d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <SystemClock_Config+0xd0>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <SystemClock_Config+0xd4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <SystemClock_Config+0xd4>)
 8000d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <SystemClock_Config+0xd4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d4c:	2309      	movs	r3, #9
 8000d4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d64:	2308      	movs	r3, #8
 8000d66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d72:	2307      	movs	r3, #7
 8000d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f006 faf0 	bl	8007360 <HAL_RCC_OscConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d86:	f001 fc0d 	bl	80025a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2105      	movs	r1, #5
 8000da8:	4618      	mov	r0, r3
 8000daa:	f006 fd51 	bl	8007850 <HAL_RCC_ClockConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000db4:	f001 fbf6 	bl	80025a4 <Error_Handler>
  }
}
 8000db8:	bf00      	nop
 8000dba:	3750      	adds	r7, #80	; 0x50
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40007000 	.word	0x40007000

08000dc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dce:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <MX_I2C1_Init+0x54>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dd4:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <MX_I2C1_Init+0x58>)
 8000dd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_I2C1_Init+0x50>)
 8000e06:	f004 fccb 	bl	80057a0 <HAL_I2C_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e10:	f001 fbc8 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20004b08 	.word	0x20004b08
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	000186a0 	.word	0x000186a0

08000e24 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_I2C3_Init+0x50>)
 8000e2a:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <MX_I2C3_Init+0x54>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_I2C3_Init+0x50>)
 8000e30:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <MX_I2C3_Init+0x58>)
 8000e32:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_I2C3_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_I2C3_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_I2C3_Init+0x50>)
 8000e42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e46:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <MX_I2C3_Init+0x50>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_I2C3_Init+0x50>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <MX_I2C3_Init+0x50>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_I2C3_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <MX_I2C3_Init+0x50>)
 8000e62:	f004 fc9d 	bl	80057a0 <HAL_I2C_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e6c:	f001 fb9a 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20004ab4 	.word	0x20004ab4
 8000e78:	40005c00 	.word	0x40005c00
 8000e7c:	00061a80 	.word	0x00061a80

08000e80 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_I2S3_Init+0x54>)
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <MX_I2S3_Init+0x58>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_I2S3_Init+0x54>)
 8000e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e90:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_I2S3_Init+0x54>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_I2S3_Init+0x54>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <MX_I2S3_Init+0x54>)
 8000ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_I2S3_Init+0x54>)
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <MX_I2S3_Init+0x5c>)
 8000eaa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_I2S3_Init+0x54>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_I2S3_Init+0x54>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_I2S3_Init+0x54>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_I2S3_Init+0x54>)
 8000ec0:	f005 fdae 	bl	8006a20 <HAL_I2S_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000eca:	f001 fb6b 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20004ccc 	.word	0x20004ccc
 8000ed8:	40003c00 	.word	0x40003c00
 8000edc:	00017700 	.word	0x00017700

08000ee0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_RTC_Init+0x44>)
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <MX_RTC_Init+0x48>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_RTC_Init+0x44>)
 8000eec:	2240      	movs	r2, #64	; 0x40
 8000eee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_RTC_Init+0x44>)
 8000ef2:	227f      	movs	r2, #127	; 0x7f
 8000ef4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_RTC_Init+0x44>)
 8000ef8:	22ff      	movs	r2, #255	; 0xff
 8000efa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_RTC_Init+0x44>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_RTC_Init+0x44>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_RTC_Init+0x44>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_RTC_Init+0x44>)
 8000f10:	f007 f80c 	bl	8007f2c <HAL_RTC_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f1a:	f001 fb43 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20004b6c 	.word	0x20004b6c
 8000f28:	40002800 	.word	0x40002800

08000f2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <MX_SPI1_Init+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f78:	220a      	movs	r2, #10
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_SPI1_Init+0x64>)
 8000f7e:	f007 f8ba 	bl	80080f6 <HAL_SPI_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f88:	f001 fb0c 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20004be0 	.word	0x20004be0
 8000f94:	40013000 	.word	0x40013000

08000f98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2224      	movs	r2, #36	; 0x24
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f00f fa4c 	bl	8010444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fb6:	4a23      	ldr	r2, [pc, #140]	; (8001044 <MX_TIM1_Init+0xac>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_TIM1_Init+0xa8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	4619      	mov	r1, r3
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_TIM1_Init+0xa8>)
 800100c:	f007 f9eb 	bl	80083e6 <HAL_TIM_Encoder_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001016:	f001 fac5 	bl	80025a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_TIM1_Init+0xa8>)
 8001028:	f007 fd08 	bl	8008a3c <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001032:	f001 fab7 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3730      	adds	r7, #48	; 0x30
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20004b8c 	.word	0x20004b8c
 8001044:	40010000 	.word	0x40010000

08001048 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_TIM7_Init+0x64>)
 8001058:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <MX_TIM7_Init+0x68>)
 800105a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_TIM7_Init+0x64>)
 800105e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001062:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_TIM7_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_TIM7_Init+0x64>)
 800106c:	2263      	movs	r2, #99	; 0x63
 800106e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_TIM7_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_TIM7_Init+0x64>)
 8001078:	f007 f8c6 	bl	8008208 <HAL_TIM_Base_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001082:	f001 fa8f 	bl	80025a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MX_TIM7_Init+0x64>)
 8001094:	f007 fcd2 	bl	8008a3c <HAL_TIMEx_MasterConfigSynchronization>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800109e:	f001 fa81 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20004c84 	.word	0x20004c84
 80010b0:	40001400 	.word	0x40001400

080010b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <MX_USART2_UART_Init+0x50>)
 80010bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010da:	220c      	movs	r2, #12
 80010dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010ec:	f007 fd36 	bl	8008b5c <HAL_UART_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010f6:	f001 fa55 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20004c3c 	.word	0x20004c3c
 8001104:	40004400 	.word	0x40004400

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
 8001122:	4b7d      	ldr	r3, [pc, #500]	; (8001318 <MX_GPIO_Init+0x210>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a7c      	ldr	r2, [pc, #496]	; (8001318 <MX_GPIO_Init+0x210>)
 8001128:	f043 0310 	orr.w	r3, r3, #16
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b7a      	ldr	r3, [pc, #488]	; (8001318 <MX_GPIO_Init+0x210>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	4b76      	ldr	r3, [pc, #472]	; (8001318 <MX_GPIO_Init+0x210>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a75      	ldr	r2, [pc, #468]	; (8001318 <MX_GPIO_Init+0x210>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b73      	ldr	r3, [pc, #460]	; (8001318 <MX_GPIO_Init+0x210>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b6f      	ldr	r3, [pc, #444]	; (8001318 <MX_GPIO_Init+0x210>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a6e      	ldr	r2, [pc, #440]	; (8001318 <MX_GPIO_Init+0x210>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b6c      	ldr	r3, [pc, #432]	; (8001318 <MX_GPIO_Init+0x210>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b68      	ldr	r3, [pc, #416]	; (8001318 <MX_GPIO_Init+0x210>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a67      	ldr	r2, [pc, #412]	; (8001318 <MX_GPIO_Init+0x210>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b65      	ldr	r3, [pc, #404]	; (8001318 <MX_GPIO_Init+0x210>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b61      	ldr	r3, [pc, #388]	; (8001318 <MX_GPIO_Init+0x210>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a60      	ldr	r2, [pc, #384]	; (8001318 <MX_GPIO_Init+0x210>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <MX_GPIO_Init+0x210>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <MX_GPIO_Init+0x210>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a59      	ldr	r2, [pc, #356]	; (8001318 <MX_GPIO_Init+0x210>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b57      	ldr	r3, [pc, #348]	; (8001318 <MX_GPIO_Init+0x210>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2108      	movs	r1, #8
 80011ca:	4854      	ldr	r0, [pc, #336]	; (800131c <MX_GPIO_Init+0x214>)
 80011cc:	f002 fd3a 	bl	8003c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2101      	movs	r1, #1
 80011d4:	4852      	ldr	r0, [pc, #328]	; (8001320 <MX_GPIO_Init+0x218>)
 80011d6:	f002 fd35 	bl	8003c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011da:	2200      	movs	r2, #0
 80011dc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80011e0:	4850      	ldr	r0, [pc, #320]	; (8001324 <MX_GPIO_Init+0x21c>)
 80011e2:	f002 fd2f 	bl	8003c44 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011e6:	2308      	movs	r3, #8
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4847      	ldr	r0, [pc, #284]	; (800131c <MX_GPIO_Init+0x214>)
 80011fe:	f002 fb6d 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001202:	2301      	movs	r3, #1
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	4841      	ldr	r0, [pc, #260]	; (8001320 <MX_GPIO_Init+0x218>)
 800121a:	f002 fb5f 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800121e:	2308      	movs	r3, #8
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800122e:	2305      	movs	r3, #5
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	4839      	ldr	r0, [pc, #228]	; (8001320 <MX_GPIO_Init+0x218>)
 800123a:	f002 fb4f 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800123e:	2301      	movs	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001242:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	4835      	ldr	r0, [pc, #212]	; (8001328 <MX_GPIO_Init+0x220>)
 8001254:	f002 fb42 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001258:	2304      	movs	r3, #4
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	4830      	ldr	r0, [pc, #192]	; (800132c <MX_GPIO_Init+0x224>)
 800126c:	f002 fb36 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8001270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001276:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4825      	ldr	r0, [pc, #148]	; (800131c <MX_GPIO_Init+0x214>)
 8001288:	f002 fb28 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800128c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800129e:	2305      	movs	r3, #5
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4820      	ldr	r0, [pc, #128]	; (800132c <MX_GPIO_Init+0x224>)
 80012aa:	f002 fb17 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012ae:	f24f 0310 	movw	r3, #61456	; 0xf010
 80012b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	4817      	ldr	r0, [pc, #92]	; (8001324 <MX_GPIO_Init+0x21c>)
 80012c8:	f002 fb08 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80012cc:	2320      	movs	r3, #32
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4811      	ldr	r0, [pc, #68]	; (8001324 <MX_GPIO_Init+0x21c>)
 80012e0:	f002 fafc 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012e8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4808      	ldr	r0, [pc, #32]	; (800131c <MX_GPIO_Init+0x214>)
 80012fa:	f002 faef 	bl	80038dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2105      	movs	r1, #5
 8001302:	2028      	movs	r0, #40	; 0x28
 8001304:	f002 fa2e 	bl	8003764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001308:	2028      	movs	r0, #40	; 0x28
 800130a:	f002 fa47 	bl	800379c <HAL_NVIC_EnableIRQ>

}
 800130e:	bf00      	nop
 8001310:	3730      	adds	r7, #48	; 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40021000 	.word	0x40021000
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400

08001330 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/////////////////////////////////////////////////////////////////////////////
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af02      	add	r7, sp, #8
 8001336:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);		// For test
	uint8_t dummy = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
	int peek_buff = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]

	xQueuePeekFromISR(input_QueueHandle, &peek_buff);
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HAL_UART_RxCpltCallback+0x88>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f107 0208 	add.w	r2, r7, #8
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f00c fb60 	bl	800da10 <xQueuePeekFromISR>
	if(! peek_buff) 		// If the queue is full?
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d107      	bne.n	8001366 <HAL_UART_RxCpltCallback+0x36>
	{
		// Queue is not not full
		// Enqueue data byte
		xQueueSendFromISR(input_QueueHandle, (void*)&user_data, NULL);
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_UART_RxCpltCallback+0x88>)
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	2300      	movs	r3, #0
 800135c:	2200      	movs	r2, #0
 800135e:	4917      	ldr	r1, [pc, #92]	; (80013bc <HAL_UART_RxCpltCallback+0x8c>)
 8001360:	f00c f95a 	bl	800d618 <xQueueGenericSendFromISR>
 8001364:	e011      	b.n	800138a <HAL_UART_RxCpltCallback+0x5a>
		//xQueueSendFromISR(input_QueueHandle, );
	}
	else
	{
		// Queue is full
		if(user_data == '\n')		// Check, is user_data has '\n' sign?
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_UART_RxCpltCallback+0x8c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b0a      	cmp	r3, #10
 800136c:	d10d      	bne.n	800138a <HAL_UART_RxCpltCallback+0x5a>
		{
			// Make sure that last data byte of the queue is '\n'
			xQueueReceiveFromISR(input_QueueHandle, (void*)&user_data, NULL );
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_UART_RxCpltCallback+0x88>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2200      	movs	r2, #0
 8001374:	4911      	ldr	r1, [pc, #68]	; (80013bc <HAL_UART_RxCpltCallback+0x8c>)
 8001376:	4618      	mov	r0, r3
 8001378:	f00c faca 	bl	800d910 <xQueueReceiveFromISR>
			xQueueSendFromISR(input_QueueHandle, (void*)&user_data, NULL);
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_UART_RxCpltCallback+0x88>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	2300      	movs	r3, #0
 8001382:	2200      	movs	r2, #0
 8001384:	490d      	ldr	r1, [pc, #52]	; (80013bc <HAL_UART_RxCpltCallback+0x8c>)
 8001386:	f00c f947 	bl	800d618 <xQueueGenericSendFromISR>
		}
	}
	// Send notification to command task if user_data == '\n'
	if(user_data == '\n')
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_UART_RxCpltCallback+0x8c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b0a      	cmp	r3, #10
 8001390:	d108      	bne.n	80013a4 <HAL_UART_RxCpltCallback+0x74>
	{
		xTaskNotifyFromISR(com_handl_taskHandle, 0, eNoAction, NULL);
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_UART_RxCpltCallback+0x90>)
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2300      	movs	r3, #0
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	f00d fc42 	bl	800ec28 <xTaskGenericNotifyFromISR>
	}

	// Enable receive data over UART
	HAL_UART_Receive_IT(&huart2, &user_data , 1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	4905      	ldr	r1, [pc, #20]	; (80013bc <HAL_UART_RxCpltCallback+0x8c>)
 80013a8:	4806      	ldr	r0, [pc, #24]	; (80013c4 <HAL_UART_RxCpltCallback+0x94>)
 80013aa:	f007 fc24 	bl	8008bf6 <HAL_UART_Receive_IT>

}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20004b60 	.word	0x20004b60
 80013bc:	20004bd4 	.word	0x20004bd4
 80013c0:	20004c38 	.word	0x20004c38
 80013c4:	20004c3c 	.word	0x20004c3c

080013c8 <process_command>:
/////////////////////////////////////////////////////////////////////////////
void process_command(command_t *cmd)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f813 	bl	80013fc <extract_command>

	switch(curr_state)
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <process_command+0x30>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b05      	cmp	r3, #5
 80013dc:	dc08      	bgt.n	80013f0 <process_command+0x28>
 80013de:	2b02      	cmp	r3, #2
 80013e0:	da03      	bge.n	80013ea <process_command+0x22>
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <process_command+0x26>
 80013e6:	2b01      	cmp	r3, #1
			//
			break;

		case sLedEffect:
	 		//
	 		break;
 80013e8:	e002      	b.n	80013f0 <process_command+0x28>

	 	case sRtcMenu:
	 	case sRtcTimeConfig:
	 	case sRtcDateConfig:
	 	case sRtcReport:
	 		  break;
 80013ea:	bf00      	nop
 80013ec:	e000      	b.n	80013f0 <process_command+0x28>
			break;
 80013ee:	bf00      	nop
	 }
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200000c3 	.word	0x200000c3

080013fc <extract_command>:
/////////////////////////////////////////////////////////////////////////////
int extract_command(command_t *cmd)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	//int
}
 8001404:	bf00      	nop
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800141c:	f00e fcc6 	bl	800fdac <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  // Test LED blink
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001426:	4808      	ldr	r0, [pc, #32]	; (8001448 <StartDefaultTask+0x34>)
 8001428:	f002 fc0c 	bl	8003c44 <HAL_GPIO_WritePin>
	  osDelay(100);
 800142c:	2064      	movs	r0, #100	; 0x64
 800142e:	f00b fc83 	bl	800cd38 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001438:	4803      	ldr	r0, [pc, #12]	; (8001448 <StartDefaultTask+0x34>)
 800143a:	f002 fc03 	bl	8003c44 <HAL_GPIO_WritePin>
	  osDelay(900);
 800143e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001442:	f00b fc79 	bl	800cd38 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001446:	e7eb      	b.n	8001420 <StartDefaultTask+0xc>
 8001448:	40020c00 	.word	0x40020c00

0800144c <start_menu_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_menu_task */
void start_menu_task(void *argument)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_menu_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f00b fc6f 	bl	800cd38 <osDelay>
 800145a:	e7fb      	b.n	8001454 <start_menu_task+0x8>

0800145c <start_led_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_led_task */
void start_led_task(void *argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_led_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001464:	2001      	movs	r0, #1
 8001466:	f00b fc67 	bl	800cd38 <osDelay>
 800146a:	e7fb      	b.n	8001464 <start_led_task+0x8>

0800146c <start_rtc_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_rtc_task */
void start_rtc_task(void *argument)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_rtc_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f00b fc5f 	bl	800cd38 <osDelay>
 800147a:	e7fb      	b.n	8001474 <start_rtc_task+0x8>

0800147c <start_print>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_print */
void start_print(void *argument)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_print */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001484:	2001      	movs	r0, #1
 8001486:	f00b fc57 	bl	800cd38 <osDelay>
 800148a:	e7fb      	b.n	8001484 <start_print+0x8>

0800148c <start_com_handl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_com_handl */
void start_com_handl(void *argument)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	command_t cmd;			// Create command variable

	for(;;)
	{
		// Waiting on notify from HAL_UART_RxCpltCallback
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2000      	movs	r0, #0
 800149e:	f00d fb63 	bl	800eb68 <xTaskNotifyWait>
 80014a2:	6178      	str	r0, [r7, #20]
		if(ret == pdTRUE)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d1f4      	bne.n	8001494 <start_com_handl+0x8>
		{
			process_command(&cmd);
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff8a 	bl	80013c8 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80014b4:	e7ee      	b.n	8001494 <start_com_handl+0x8>
	...

080014b8 <StartOLED_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLED_RTC */
void StartOLED_RTC(void *argument)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b0a0      	sub	sp, #128	; 0x80
 80014bc:	af04      	add	r7, sp, #16
 80014be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLED_RTC */
  /* Infinite loop */
	osDelay(1000);
 80014c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c4:	f00b fc38 	bl	800cd38 <osDelay>

		// For resd time
		char time[20] = {0};
 80014c8:	2300      	movs	r3, #0
 80014ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80014cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
		char date[40] = {0};
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
 80014de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014e2:	2224      	movs	r2, #36	; 0x24
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f00e ffac 	bl	8010444 <memset>
		char time_buf[10] = {0};
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
 80014f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	809a      	strh	r2, [r3, #4]
		char time_buf_2[10] = {0};
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	809a      	strh	r2, [r3, #4]

		uint8_t seconds = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	75fb      	strb	r3, [r7, #23]
		uint8_t minutes = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	75bb      	strb	r3, [r7, #22]
		uint8_t hours = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	757b      	strb	r3, [r7, #21]
		uint8_t day = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	753b      	strb	r3, [r7, #20]
		uint8_t date_day = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	74fb      	strb	r3, [r7, #19]
		uint8_t mounth = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	74bb      	strb	r3, [r7, #18]
		uint8_t year = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	747b      	strb	r3, [r7, #17]
		uint8_t status = 9;
 8001524:	2309      	movs	r3, #9
 8001526:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		//

		oled_init();
 800152a:	f001 ff61 	bl	80033f0 <oled_init>
		oled_update();
 800152e:	f001 ff0b 	bl	8003348 <oled_update>
		ds3231_I2C_init();
 8001532:	f7ff f8a9 	bl	8000688 <ds3231_I2C_init>

		// Encoder
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001536:	213c      	movs	r1, #60	; 0x3c
 8001538:	48c9      	ldr	r0, [pc, #804]	; (8001860 <StartOLED_RTC+0x3a8>)
 800153a:	f006 fffa 	bl	8008532 <HAL_TIM_Encoder_Start>
		int32_t prevCounter = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
		//

		for(;;)
		{
			switch (klick)
 8001542:	4bc8      	ldr	r3, [pc, #800]	; (8001864 <StartOLED_RTC+0x3ac>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b0f      	cmp	r3, #15
 8001548:	d8fb      	bhi.n	8001542 <StartOLED_RTC+0x8a>
 800154a:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <StartOLED_RTC+0x98>)
 800154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001550:	08001591 	.word	0x08001591
 8001554:	08001bc1 	.word	0x08001bc1
 8001558:	08001543 	.word	0x08001543
 800155c:	08001d2b 	.word	0x08001d2b
 8001560:	08001543 	.word	0x08001543
 8001564:	08001e67 	.word	0x08001e67
 8001568:	08001543 	.word	0x08001543
 800156c:	08001fd5 	.word	0x08001fd5
 8001570:	08001543 	.word	0x08001543
 8001574:	0800211b 	.word	0x0800211b
 8001578:	08001543 	.word	0x08001543
 800157c:	0800226b 	.word	0x0800226b
 8001580:	08001543 	.word	0x08001543
 8001584:	08002391 	.word	0x08002391
 8001588:	08001543 	.word	0x08001543
 800158c:	080024e3 	.word	0x080024e3
			{
				case 0:					// Read time and data from DS3231

					strcat(time_buf, "TIME");
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fe1b 	bl	80001d0 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	4413      	add	r3, r2
 80015a4:	4ab0      	ldr	r2, [pc, #704]	; (8001868 <StartOLED_RTC+0x3b0>)
 80015a6:	6810      	ldr	r0, [r2, #0]
 80015a8:	6018      	str	r0, [r3, #0]
 80015aa:	7912      	ldrb	r2, [r2, #4]
 80015ac:	711a      	strb	r2, [r3, #4]
					graphics_text(40, 10, 3, time_buf);
 80015ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b2:	2203      	movs	r2, #3
 80015b4:	210a      	movs	r1, #10
 80015b6:	2028      	movs	r0, #40	; 0x28
 80015b8:	f001 fe12 	bl	80031e0 <graphics_text>
					oled_update();
 80015bc:	f001 fec4 	bl	8003348 <oled_update>
					osDelay(2000);
 80015c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015c4:	f00b fbb8 	bl	800cd38 <osDelay>
					clear();
 80015c8:	f001 fc56 	bl	8002e78 <clear>
					oled_update();
 80015cc:	f001 febc 	bl	8003348 <oled_update>

					while(klick == 0)
 80015d0:	e2ef      	b.n	8001bb2 <StartOLED_RTC+0x6fa>
					{
						memset(time, 0, sizeof(time));
 80015d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015d6:	2214      	movs	r2, #20
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f00e ff32 	bl	8010444 <memset>
						memset(date, 0, sizeof(date));
 80015e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015e4:	2228      	movs	r2, #40	; 0x28
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00e ff2b 	bl	8010444 <memset>
						memset(time_buf, 0, sizeof(time_buf));
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	220a      	movs	r2, #10
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00e ff24 	bl	8010444 <memset>
						memset(time_buf_2, 0, sizeof(time_buf_2));
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	220a      	movs	r2, #10
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f00e ff1d 	bl	8010444 <memset>

						// 1. Read time from RTS
						// Red status (Detect DS3231)
						uint8_t buff= 0;
 800160a:	2300      	movs	r3, #0
 800160c:	72fb      	strb	r3, [r7, #11]
						status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	2301      	movs	r3, #1
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	f107 030b 	add.w	r3, r7, #11
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2301      	movs	r3, #1
 8001620:	2200      	movs	r2, #0
 8001622:	21d0      	movs	r1, #208	; 0xd0
 8001624:	4891      	ldr	r0, [pc, #580]	; (800186c <StartOLED_RTC+0x3b4>)
 8001626:	f004 fbf7 	bl	8005e18 <HAL_I2C_Mem_Read>
 800162a:	4603      	mov	r3, r0
 800162c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if(status != HAL_OK )								// If DS3231 doesen'e detect
 8001630:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001634:	2b00      	cmp	r3, #0
 8001636:	d050      	beq.n	80016da <StartOLED_RTC+0x222>
						{
							clear();
 8001638:	f001 fc1e 	bl	8002e78 <clear>
							while(status != HAL_OK)							// If ERROR
 800163c:	e046      	b.n	80016cc <StartOLED_RTC+0x214>
							{
								strcat(time_buf, "RTC ERROR");
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fdc4 	bl	80001d0 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4413      	add	r3, r2
 8001652:	4987      	ldr	r1, [pc, #540]	; (8001870 <StartOLED_RTC+0x3b8>)
 8001654:	461a      	mov	r2, r3
 8001656:	460b      	mov	r3, r1
 8001658:	cb03      	ldmia	r3!, {r0, r1}
 800165a:	6010      	str	r0, [r2, #0]
 800165c:	6051      	str	r1, [r2, #4]
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	8113      	strh	r3, [r2, #8]
								graphics_text(8, 5, 3, time_buf);
 8001662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001666:	2203      	movs	r2, #3
 8001668:	2105      	movs	r1, #5
 800166a:	2008      	movs	r0, #8
 800166c:	f001 fdb8 	bl	80031e0 <graphics_text>
								oled_update();
 8001670:	f001 fe6a 	bl	8003348 <oled_update>
								memset(time_buf, 0, sizeof(time_buf));
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	220a      	movs	r2, #10
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f00e fee1 	bl	8010444 <memset>
								osDelay(300);
 8001682:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001686:	f00b fb57 	bl	800cd38 <osDelay>

								invert_rectangle(0, 0, 128, 32);
 800168a:	2320      	movs	r3, #32
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	2100      	movs	r1, #0
 8001690:	2000      	movs	r0, #0
 8001692:	f001 fbc3 	bl	8002e1c <invert_rectangle>
								oled_update();
 8001696:	f001 fe57 	bl	8003348 <oled_update>
								osDelay(300);
 800169a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800169e:	f00b fb4b 	bl	800cd38 <osDelay>

								clear();
 80016a2:	f001 fbe9 	bl	8002e78 <clear>
								oled_update();
 80016a6:	f001 fe4f 	bl	8003348 <oled_update>

								status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	f107 030b 	add.w	r3, r7, #11
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	2200      	movs	r2, #0
 80016be:	21d0      	movs	r1, #208	; 0xd0
 80016c0:	486a      	ldr	r0, [pc, #424]	; (800186c <StartOLED_RTC+0x3b4>)
 80016c2:	f004 fba9 	bl	8005e18 <HAL_I2C_Mem_Read>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							while(status != HAL_OK)							// If ERROR
 80016cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1b4      	bne.n	800163e <StartOLED_RTC+0x186>
							}
							clear();
 80016d4:	f001 fbd0 	bl	8002e78 <clear>
 80016d8:	e26b      	b.n	8001bb2 <StartOLED_RTC+0x6fa>
						}

						else	// If all DS3231 detected, read time and date
						{
							ds3231_read(DS3231_REGISTER_SECONDS_DEFAULT, &seconds);
 80016da:	f107 0317 	add.w	r3, r7, #23
 80016de:	4619      	mov	r1, r3
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7fe ffd9 	bl	8000698 <ds3231_read>
							ds3231_read(DS3231_REGISTER_MINUTES_DEFAULT, &minutes);
 80016e6:	f107 0316 	add.w	r3, r7, #22
 80016ea:	4619      	mov	r1, r3
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7fe ffd3 	bl	8000698 <ds3231_read>
							ds3231_read(DS3231_REGISTER_HOURS_DEFAULT, &hours);
 80016f2:	f107 0315 	add.w	r3, r7, #21
 80016f6:	4619      	mov	r1, r3
 80016f8:	2002      	movs	r0, #2
 80016fa:	f7fe ffcd 	bl	8000698 <ds3231_read>

							ds3231_read(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &day);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	2003      	movs	r0, #3
 8001706:	f7fe ffc7 	bl	8000698 <ds3231_read>
							ds3231_read(DS3231_REGISTER_DATE_DEFAULT, &date_day);
 800170a:	f107 0313 	add.w	r3, r7, #19
 800170e:	4619      	mov	r1, r3
 8001710:	2004      	movs	r0, #4
 8001712:	f7fe ffc1 	bl	8000698 <ds3231_read>
							ds3231_read(DS3231_REGISTER_MONTH_DEFAULT, &mounth);
 8001716:	f107 0312 	add.w	r3, r7, #18
 800171a:	4619      	mov	r1, r3
 800171c:	2005      	movs	r0, #5
 800171e:	f7fe ffbb 	bl	8000698 <ds3231_read>
							ds3231_read(DS3231_REGISTER_YEAR_DEFAULT, &year);
 8001722:	f107 0311 	add.w	r3, r7, #17
 8001726:	4619      	mov	r1, r3
 8001728:	2006      	movs	r0, #6
 800172a:	f7fe ffb5 	bl	8000698 <ds3231_read>

							// Convert in string
							// Print minutes on OLED
							if(hours < 10)
 800172e:	7d7b      	ldrb	r3, [r7, #21]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d835      	bhi.n	80017a0 <StartOLED_RTC+0x2e8>
							{
								memset(time_buf, 0, sizeof(time_buf));
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	220a      	movs	r2, #10
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f00e fe81 	bl	8010444 <memset>
								sprintf(time_buf, "%c", '0');
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	2230      	movs	r2, #48	; 0x30
 8001748:	494a      	ldr	r1, [pc, #296]	; (8001874 <StartOLED_RTC+0x3bc>)
 800174a:	4618      	mov	r0, r3
 800174c:	f00e ffa6 	bl	801069c <siprintf>
								sprintf(time_buf_2, "%d", hours);
 8001750:	7d7b      	ldrb	r3, [r7, #21]
 8001752:	461a      	mov	r2, r3
 8001754:	f107 0318 	add.w	r3, r7, #24
 8001758:	4947      	ldr	r1, [pc, #284]	; (8001878 <StartOLED_RTC+0x3c0>)
 800175a:	4618      	mov	r0, r3
 800175c:	f00e ff9e 	bl	801069c <siprintf>
								strcat(time_buf, time_buf_2);
 8001760:	f107 0218 	add.w	r2, r7, #24
 8001764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f00e ffb6 	bl	80106dc <strcat>
								strcat(time, time_buf);
 8001770:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001774:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f00e ffae 	bl	80106dc <strcat>
								strcat(time, ":");
 8001780:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fd23 	bl	80001d0 <strlen>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001792:	4413      	add	r3, r2
 8001794:	4939      	ldr	r1, [pc, #228]	; (800187c <StartOLED_RTC+0x3c4>)
 8001796:	461a      	mov	r2, r3
 8001798:	460b      	mov	r3, r1
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	8013      	strh	r3, [r2, #0]
 800179e:	e025      	b.n	80017ec <StartOLED_RTC+0x334>
							}
							else
							{
								sprintf(time_buf, "%d", hours);
 80017a0:	7d7b      	ldrb	r3, [r7, #21]
 80017a2:	461a      	mov	r2, r3
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4933      	ldr	r1, [pc, #204]	; (8001878 <StartOLED_RTC+0x3c0>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00e ff76 	bl	801069c <siprintf>
								strcat(time, time_buf);
 80017b0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80017b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00e ff8e 	bl	80106dc <strcat>
								strcat(time, ":");
 80017c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fd03 	bl	80001d0 <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017d2:	4413      	add	r3, r2
 80017d4:	4929      	ldr	r1, [pc, #164]	; (800187c <StartOLED_RTC+0x3c4>)
 80017d6:	461a      	mov	r2, r3
 80017d8:	460b      	mov	r3, r1
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	8013      	strh	r3, [r2, #0]
								memset(time_buf, 0, sizeof(time_buf));
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	220a      	movs	r2, #10
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f00e fe2c 	bl	8010444 <memset>
							}

							// Print minutes on OLED
							if(minutes < 10)
 80017ec:	7dbb      	ldrb	r3, [r7, #22]
 80017ee:	2b09      	cmp	r3, #9
 80017f0:	d846      	bhi.n	8001880 <StartOLED_RTC+0x3c8>
							{
								memset(time_buf, 0, sizeof(time_buf));
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	220a      	movs	r2, #10
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f00e fe22 	bl	8010444 <memset>
								sprintf(time_buf, "%c", '0');
 8001800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001804:	2230      	movs	r2, #48	; 0x30
 8001806:	491b      	ldr	r1, [pc, #108]	; (8001874 <StartOLED_RTC+0x3bc>)
 8001808:	4618      	mov	r0, r3
 800180a:	f00e ff47 	bl	801069c <siprintf>
								sprintf(time_buf_2, "%d", minutes);
 800180e:	7dbb      	ldrb	r3, [r7, #22]
 8001810:	461a      	mov	r2, r3
 8001812:	f107 0318 	add.w	r3, r7, #24
 8001816:	4918      	ldr	r1, [pc, #96]	; (8001878 <StartOLED_RTC+0x3c0>)
 8001818:	4618      	mov	r0, r3
 800181a:	f00e ff3f 	bl	801069c <siprintf>
								strcat(time_buf, time_buf_2);
 800181e:	f107 0218 	add.w	r2, r7, #24
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f00e ff57 	bl	80106dc <strcat>
								strcat(time, time_buf);
 800182e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001832:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f00e ff4f 	bl	80106dc <strcat>
								strcat(time, ":");
 800183e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fcc4 	bl	80001d0 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001850:	4413      	add	r3, r2
 8001852:	490a      	ldr	r1, [pc, #40]	; (800187c <StartOLED_RTC+0x3c4>)
 8001854:	461a      	mov	r2, r3
 8001856:	460b      	mov	r3, r1
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	8013      	strh	r3, [r2, #0]
 800185c:	e036      	b.n	80018cc <StartOLED_RTC+0x414>
 800185e:	bf00      	nop
 8001860:	20004b8c 	.word	0x20004b8c
 8001864:	200000c8 	.word	0x200000c8
 8001868:	08010e0c 	.word	0x08010e0c
 800186c:	20004ab4 	.word	0x20004ab4
 8001870:	08010e14 	.word	0x08010e14
 8001874:	08010e20 	.word	0x08010e20
 8001878:	08010e24 	.word	0x08010e24
 800187c:	08010e28 	.word	0x08010e28
							}
							else
							{
								sprintf(time_buf, "%d", minutes);
 8001880:	7dbb      	ldrb	r3, [r7, #22]
 8001882:	461a      	mov	r2, r3
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	49d7      	ldr	r1, [pc, #860]	; (8001be8 <StartOLED_RTC+0x730>)
 800188a:	4618      	mov	r0, r3
 800188c:	f00e ff06 	bl	801069c <siprintf>
								strcat(time, time_buf);
 8001890:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001894:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f00e ff1e 	bl	80106dc <strcat>
								strcat(time, ":");
 80018a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fc93 	bl	80001d0 <strlen>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018b2:	4413      	add	r3, r2
 80018b4:	49cd      	ldr	r1, [pc, #820]	; (8001bec <StartOLED_RTC+0x734>)
 80018b6:	461a      	mov	r2, r3
 80018b8:	460b      	mov	r3, r1
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	8013      	strh	r3, [r2, #0]
								memset(time_buf, 0, sizeof(time_buf));
 80018be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c2:	220a      	movs	r2, #10
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f00e fdbc 	bl	8010444 <memset>
							}

							// Print seconds on OLED
							if(seconds == 0)
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d103      	bne.n	80018da <StartOLED_RTC+0x422>
							{
								clear();
 80018d2:	f001 fad1 	bl	8002e78 <clear>
								oled_update();
 80018d6:	f001 fd37 	bl	8003348 <oled_update>
							}
							if(seconds < 10)
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d826      	bhi.n	800192e <StartOLED_RTC+0x476>
							{
								memset(time_buf, 0, sizeof(time_buf));
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	220a      	movs	r2, #10
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f00e fdab 	bl	8010444 <memset>
								sprintf(time_buf, "%c", '0');
 80018ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f2:	2230      	movs	r2, #48	; 0x30
 80018f4:	49be      	ldr	r1, [pc, #760]	; (8001bf0 <StartOLED_RTC+0x738>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f00e fed0 	bl	801069c <siprintf>
								sprintf(time_buf_2, "%d", seconds);
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	461a      	mov	r2, r3
 8001900:	f107 0318 	add.w	r3, r7, #24
 8001904:	49b8      	ldr	r1, [pc, #736]	; (8001be8 <StartOLED_RTC+0x730>)
 8001906:	4618      	mov	r0, r3
 8001908:	f00e fec8 	bl	801069c <siprintf>
								strcat(time_buf, time_buf_2);
 800190c:	f107 0218 	add.w	r2, r7, #24
 8001910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f00e fee0 	bl	80106dc <strcat>
								strcat(time, time_buf);
 800191c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001920:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f00e fed8 	bl	80106dc <strcat>
 800192c:	e016      	b.n	800195c <StartOLED_RTC+0x4a4>
							}
							else
							{
								sprintf(time_buf, "%d", seconds);
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	461a      	mov	r2, r3
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	49ac      	ldr	r1, [pc, #688]	; (8001be8 <StartOLED_RTC+0x730>)
 8001938:	4618      	mov	r0, r3
 800193a:	f00e feaf 	bl	801069c <siprintf>
								strcat(time, time_buf);
 800193e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001942:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f00e fec7 	bl	80106dc <strcat>
								memset(time_buf, 0, sizeof(time_buf));
 800194e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001952:	220a      	movs	r2, #10
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f00e fd74 	bl	8010444 <memset>
							}

							uint8_t second_line = seconds*2;
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
							line_h(5, second_line, 19, 2, add);
 8001964:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8001968:	2301      	movs	r3, #1
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2302      	movs	r3, #2
 800196e:	2213      	movs	r2, #19
 8001970:	2005      	movs	r0, #5
 8001972:	f001 faa9 	bl	8002ec8 <line_h>
	//						line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode);
							//invert_rectangle(5, 15, second_line, 5);

							// Print date
							sprintf(time_buf, "%d", date_day);
 8001976:	7cfb      	ldrb	r3, [r7, #19]
 8001978:	461a      	mov	r2, r3
 800197a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197e:	499a      	ldr	r1, [pc, #616]	; (8001be8 <StartOLED_RTC+0x730>)
 8001980:	4618      	mov	r0, r3
 8001982:	f00e fe8b 	bl	801069c <siprintf>
							strcat(date, time_buf);
 8001986:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800198a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f00e fea3 	bl	80106dc <strcat>
							strcat(date, ".");
 8001996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fc18 	bl	80001d0 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a8:	4413      	add	r3, r2
 80019aa:	4992      	ldr	r1, [pc, #584]	; (8001bf4 <StartOLED_RTC+0x73c>)
 80019ac:	461a      	mov	r2, r3
 80019ae:	460b      	mov	r3, r1
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	220a      	movs	r2, #10
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f00e fd41 	bl	8010444 <memset>

							sprintf(time_buf, "%d", mounth);
 80019c2:	7cbb      	ldrb	r3, [r7, #18]
 80019c4:	461a      	mov	r2, r3
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	4987      	ldr	r1, [pc, #540]	; (8001be8 <StartOLED_RTC+0x730>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f00e fe65 	bl	801069c <siprintf>
							strcat(date, time_buf);
 80019d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80019d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f00e fe7d 	bl	80106dc <strcat>
							strcat(date, ".");
 80019e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fbf2 	bl	80001d0 <strlen>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019f4:	4413      	add	r3, r2
 80019f6:	497f      	ldr	r1, [pc, #508]	; (8001bf4 <StartOLED_RTC+0x73c>)
 80019f8:	461a      	mov	r2, r3
 80019fa:	460b      	mov	r3, r1
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	220a      	movs	r2, #10
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00e fd1b 	bl	8010444 <memset>

							sprintf(time_buf, "%d", year);
 8001a0e:	7c7b      	ldrb	r3, [r7, #17]
 8001a10:	461a      	mov	r2, r3
 8001a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a16:	4974      	ldr	r1, [pc, #464]	; (8001be8 <StartOLED_RTC+0x730>)
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f00e fe3f 	bl	801069c <siprintf>
							strcat(date, "20");
 8001a1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fbd4 	bl	80001d0 <strlen>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a30:	4413      	add	r3, r2
 8001a32:	4a71      	ldr	r2, [pc, #452]	; (8001bf8 <StartOLED_RTC+0x740>)
 8001a34:	8811      	ldrh	r1, [r2, #0]
 8001a36:	7892      	ldrb	r2, [r2, #2]
 8001a38:	8019      	strh	r1, [r3, #0]
 8001a3a:	709a      	strb	r2, [r3, #2]
							strcat(date, time_buf);
 8001a3c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f00e fe48 	bl	80106dc <strcat>
							memset(time_buf, 0, sizeof(time_buf));
 8001a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a50:	220a      	movs	r2, #10
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f00e fcf5 	bl	8010444 <memset>

							// day
							switch (day)
 8001a5a:	7d3b      	ldrb	r3, [r7, #20]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	f200 8093 	bhi.w	8001b8a <StartOLED_RTC+0x6d2>
 8001a64:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <StartOLED_RTC+0x5b4>)
 8001a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001a89 	.word	0x08001a89
 8001a70:	08001aab 	.word	0x08001aab
 8001a74:	08001ad1 	.word	0x08001ad1
 8001a78:	08001afb 	.word	0x08001afb
 8001a7c:	08001b21 	.word	0x08001b21
 8001a80:	08001b43 	.word	0x08001b43
 8001a84:	08001b69 	.word	0x08001b69
							{
								case 1:
									strcat(date, " Monday");
 8001a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fb9f 	bl	80001d0 <strlen>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4957      	ldr	r1, [pc, #348]	; (8001bfc <StartOLED_RTC+0x744>)
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	cb03      	ldmia	r3!, {r0, r1}
 8001aa4:	6010      	str	r0, [r2, #0]
 8001aa6:	6051      	str	r1, [r2, #4]
									break;
 8001aa8:	e06f      	b.n	8001b8a <StartOLED_RTC+0x6d2>
								case 2:
									strcat(date, " Tuesday");
 8001aaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fb8e 	bl	80001d0 <strlen>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001abc:	4413      	add	r3, r2
 8001abe:	4950      	ldr	r1, [pc, #320]	; (8001c00 <StartOLED_RTC+0x748>)
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	cb03      	ldmia	r3!, {r0, r1}
 8001ac6:	6010      	str	r0, [r2, #0]
 8001ac8:	6051      	str	r1, [r2, #4]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	7213      	strb	r3, [r2, #8]
									break;
 8001ace:	e05c      	b.n	8001b8a <StartOLED_RTC+0x6d2>
								case 3:
									strcat(date, " Wednesday");
 8001ad0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fb7b 	bl	80001d0 <strlen>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4947      	ldr	r1, [pc, #284]	; (8001c04 <StartOLED_RTC+0x74c>)
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	460b      	mov	r3, r1
 8001aea:	cb03      	ldmia	r3!, {r0, r1}
 8001aec:	6010      	str	r0, [r2, #0]
 8001aee:	6051      	str	r1, [r2, #4]
 8001af0:	8819      	ldrh	r1, [r3, #0]
 8001af2:	789b      	ldrb	r3, [r3, #2]
 8001af4:	8111      	strh	r1, [r2, #8]
 8001af6:	7293      	strb	r3, [r2, #10]
									break;
 8001af8:	e047      	b.n	8001b8a <StartOLED_RTC+0x6d2>
								case 4:
									strcat(date, " Thursday");
 8001afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fb66 	bl	80001d0 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b0c:	4413      	add	r3, r2
 8001b0e:	493e      	ldr	r1, [pc, #248]	; (8001c08 <StartOLED_RTC+0x750>)
 8001b10:	461a      	mov	r2, r3
 8001b12:	460b      	mov	r3, r1
 8001b14:	cb03      	ldmia	r3!, {r0, r1}
 8001b16:	6010      	str	r0, [r2, #0]
 8001b18:	6051      	str	r1, [r2, #4]
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	8113      	strh	r3, [r2, #8]
									break;
 8001b1e:	e034      	b.n	8001b8a <StartOLED_RTC+0x6d2>
								case 5:
									strcat(date, " Friday");
 8001b20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fb53 	bl	80001d0 <strlen>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b32:	4413      	add	r3, r2
 8001b34:	4935      	ldr	r1, [pc, #212]	; (8001c0c <StartOLED_RTC+0x754>)
 8001b36:	461a      	mov	r2, r3
 8001b38:	460b      	mov	r3, r1
 8001b3a:	cb03      	ldmia	r3!, {r0, r1}
 8001b3c:	6010      	str	r0, [r2, #0]
 8001b3e:	6051      	str	r1, [r2, #4]
									break;
 8001b40:	e023      	b.n	8001b8a <StartOLED_RTC+0x6d2>
								case 6:
									strcat(date, " Saturday");
 8001b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fb42 	bl	80001d0 <strlen>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b54:	4413      	add	r3, r2
 8001b56:	492e      	ldr	r1, [pc, #184]	; (8001c10 <StartOLED_RTC+0x758>)
 8001b58:	461a      	mov	r2, r3
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	cb03      	ldmia	r3!, {r0, r1}
 8001b5e:	6010      	str	r0, [r2, #0]
 8001b60:	6051      	str	r1, [r2, #4]
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	8113      	strh	r3, [r2, #8]
									break;
 8001b66:	e010      	b.n	8001b8a <StartOLED_RTC+0x6d2>
								case 7:
									strcat(date, " Sunday");
 8001b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fb2f 	bl	80001d0 <strlen>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4925      	ldr	r1, [pc, #148]	; (8001c14 <StartOLED_RTC+0x75c>)
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	cb03      	ldmia	r3!, {r0, r1}
 8001b84:	6010      	str	r0, [r2, #0]
 8001b86:	6051      	str	r1, [r2, #4]
									break;
 8001b88:	bf00      	nop
							}

							graphics_text(40, 0, 3, time);
 8001b8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b8e:	2203      	movs	r2, #3
 8001b90:	2100      	movs	r1, #0
 8001b92:	2028      	movs	r0, #40	; 0x28
 8001b94:	f001 fb24 	bl	80031e0 <graphics_text>
							graphics_text(0, 24, 2, date);
 8001b98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	2118      	movs	r1, #24
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f001 fb1d 	bl	80031e0 <graphics_text>
							oled_update();
 8001ba6:	f001 fbcf 	bl	8003348 <oled_update>

							osDelay(1000);
 8001baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bae:	f00b f8c3 	bl	800cd38 <osDelay>
					while(klick == 0)
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <StartOLED_RTC+0x760>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f43f ad0b 	beq.w	80015d2 <StartOLED_RTC+0x11a>
						}
					}
			  		break;
 8001bbc:	f000 bccd 	b.w	800255a <StartOLED_RTC+0x10a2>


				case 1:
					// Set yer
					graphics_text(0, 0, 1, "   SET:");
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <StartOLED_RTC+0x764>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f001 fb0a 	bl	80031e0 <graphics_text>
					graphics_text(0, 8, 1, "YEAR   ");
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <StartOLED_RTC+0x768>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2108      	movs	r1, #8
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f001 fb04 	bl	80031e0 <graphics_text>
					oled_update();
 8001bd8:	f001 fbb6 	bl	8003348 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);								// Start count encoder from 0
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <StartOLED_RTC+0x76c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 1)
 8001be4:	e071      	b.n	8001cca <StartOLED_RTC+0x812>
 8001be6:	bf00      	nop
 8001be8:	08010e24 	.word	0x08010e24
 8001bec:	08010e28 	.word	0x08010e28
 8001bf0:	08010e20 	.word	0x08010e20
 8001bf4:	08010e2c 	.word	0x08010e2c
 8001bf8:	08010e30 	.word	0x08010e30
 8001bfc:	08010e34 	.word	0x08010e34
 8001c00:	08010e3c 	.word	0x08010e3c
 8001c04:	08010e48 	.word	0x08010e48
 8001c08:	08010e54 	.word	0x08010e54
 8001c0c:	08010e60 	.word	0x08010e60
 8001c10:	08010e68 	.word	0x08010e68
 8001c14:	08010e74 	.word	0x08010e74
 8001c18:	200000c8 	.word	0x200000c8
 8001c1c:	08010e7c 	.word	0x08010e7c
 8001c20:	08010e84 	.word	0x08010e84
 8001c24:	20004b8c 	.word	0x20004b8c
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8001c28:	4b99      	ldr	r3, [pc, #612]	; (8001e90 <StartOLED_RTC+0x9d8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b98      	ldr	r3, [pc, #608]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001c32:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8001c34:	4b97      	ldr	r3, [pc, #604]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	0fda      	lsrs	r2, r3, #31
 8001c3e:	4413      	add	r3, r2
 8001c40:	105b      	asrs	r3, r3, #1
 8001c42:	425b      	negs	r3, r3
 8001c44:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001c48:	337f      	adds	r3, #127	; 0x7f
 8001c4a:	4a92      	ldr	r2, [pc, #584]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001c4c:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8001c4e:	4b91      	ldr	r3, [pc, #580]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d038      	beq.n	8001cca <StartOLED_RTC+0x812>
						{
							prevCounter = currCounter;
 8001c58:	4b8e      	ldr	r3, [pc, #568]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
							if(currCounter > 100)									// Encoder count from 0 to 100
 8001c5e:	4b8d      	ldr	r3, [pc, #564]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	dd06      	ble.n	8001c74 <StartOLED_RTC+0x7bc>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001c66:	4b8a      	ldr	r3, [pc, #552]	; (8001e90 <StartOLED_RTC+0x9d8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8001c6e:	4b89      	ldr	r3, [pc, #548]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 8001c74:	4b87      	ldr	r3, [pc, #540]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	da06      	bge.n	8001c8a <StartOLED_RTC+0x7d2>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001c7c:	4b84      	ldr	r3, [pc, #528]	; (8001e90 <StartOLED_RTC+0x9d8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8001c84:	4b83      	ldr	r3, [pc, #524]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8001c8a:	4b83      	ldr	r3, [pc, #524]	; (8001e98 <StartOLED_RTC+0x9e0>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	2110      	movs	r1, #16
 8001c90:	2000      	movs	r0, #0
 8001c92:	f001 faa5 	bl	80031e0 <graphics_text>
							oled_update();
 8001c96:	f001 fb57 	bl	8003348 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8001c9a:	4b7e      	ldr	r3, [pc, #504]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca2:	497e      	ldr	r1, [pc, #504]	; (8001e9c <StartOLED_RTC+0x9e4>)
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f00e fcf9 	bl	801069c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8001caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2110      	movs	r1, #16
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f001 fa94 	bl	80031e0 <graphics_text>
							oled_update();
 8001cb8:	f001 fb46 	bl	8003348 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8001cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc0:	220a      	movs	r2, #10
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f00e fbbd 	bl	8010444 <memset>
					while(klick == 1)
 8001cca:	4b75      	ldr	r3, [pc, #468]	; (8001ea0 <StartOLED_RTC+0x9e8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d0aa      	beq.n	8001c28 <StartOLED_RTC+0x770>
						}
					}
					if(klick == 2)
 8001cd2:	4b73      	ldr	r3, [pc, #460]	; (8001ea0 <StartOLED_RTC+0x9e8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	f040 842f 	bne.w	800253a <StartOLED_RTC+0x1082>
					{
						// write data
						ds3231_set(DS3231_REGISTER_YEAR_DEFAULT, &prevCounter);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	2006      	movs	r0, #6
 8001ce4:	f7fe fd98 	bl	8000818 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8001ce8:	4b6e      	ldr	r3, [pc, #440]	; (8001ea4 <StartOLED_RTC+0x9ec>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	2110      	movs	r1, #16
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f001 fa76 	bl	80031e0 <graphics_text>
						oled_update();
 8001cf4:	f001 fb28 	bl	8003348 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8001cf8:	4b6b      	ldr	r3, [pc, #428]	; (8001ea8 <StartOLED_RTC+0x9f0>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2110      	movs	r1, #16
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f001 fa6e 	bl	80031e0 <graphics_text>
						oled_update();
 8001d04:	f001 fb20 	bl	8003348 <oled_update>

						osDelay(800);
 8001d08:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001d0c:	f00b f814 	bl	800cd38 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8001d10:	4b64      	ldr	r3, [pc, #400]	; (8001ea4 <StartOLED_RTC+0x9ec>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	2110      	movs	r1, #16
 8001d16:	2000      	movs	r0, #0
 8001d18:	f001 fa62 	bl	80031e0 <graphics_text>
						oled_update();
 8001d1c:	f001 fb14 	bl	8003348 <oled_update>

						klick = 3;
 8001d20:	4b5f      	ldr	r3, [pc, #380]	; (8001ea0 <StartOLED_RTC+0x9e8>)
 8001d22:	2203      	movs	r2, #3
 8001d24:	601a      	str	r2, [r3, #0]
					}
					break;
 8001d26:	f000 bc08 	b.w	800253a <StartOLED_RTC+0x1082>

				case 3:
					// set month
					graphics_text(0, 8, 1, "MONTH");
 8001d2a:	4b60      	ldr	r3, [pc, #384]	; (8001eac <StartOLED_RTC+0x9f4>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2108      	movs	r1, #8
 8001d30:	2000      	movs	r0, #0
 8001d32:	f001 fa55 	bl	80031e0 <graphics_text>
					oled_update();
 8001d36:	f001 fb07 	bl	8003348 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 8001d3a:	4b55      	ldr	r3, [pc, #340]	; (8001e90 <StartOLED_RTC+0x9d8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
					currCounter = 1;
 8001d42:	4b54      	ldr	r3, [pc, #336]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

					while(klick == 3)
 8001d48:	e050      	b.n	8001dec <StartOLED_RTC+0x934>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8001d4a:	4b51      	ldr	r3, [pc, #324]	; (8001e90 <StartOLED_RTC+0x9d8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001d54:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8001d56:	4b4f      	ldr	r3, [pc, #316]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	0fda      	lsrs	r2, r3, #31
 8001d60:	4413      	add	r3, r2
 8001d62:	105b      	asrs	r3, r3, #1
 8001d64:	425b      	negs	r3, r3
 8001d66:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001d6a:	337f      	adds	r3, #127	; 0x7f
 8001d6c:	4a49      	ldr	r2, [pc, #292]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001d6e:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8001d70:	4b48      	ldr	r3, [pc, #288]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d038      	beq.n	8001dec <StartOLED_RTC+0x934>
						{
							prevCounter = currCounter;
 8001d7a:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]

							if(currCounter > 12)
 8001d80:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	dd06      	ble.n	8001d96 <StartOLED_RTC+0x8de>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 8001d88:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <StartOLED_RTC+0x9d8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8001d90:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
							}

							if(currCounter < 1)
 8001d96:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	dc06      	bgt.n	8001dac <StartOLED_RTC+0x8f4>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 8001d9e:	4b3c      	ldr	r3, [pc, #240]	; (8001e90 <StartOLED_RTC+0x9d8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2201      	movs	r2, #1
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
							}


							graphics_text(0, 16, 1, "           ");
 8001dac:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <StartOLED_RTC+0x9e0>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	2110      	movs	r1, #16
 8001db2:	2000      	movs	r0, #0
 8001db4:	f001 fa14 	bl	80031e0 <graphics_text>
							oled_update();
 8001db8:	f001 fac6 	bl	8003348 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc4:	4935      	ldr	r1, [pc, #212]	; (8001e9c <StartOLED_RTC+0x9e4>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00e fc68 	bl	801069c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8001dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2110      	movs	r1, #16
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f001 fa03 	bl	80031e0 <graphics_text>
							oled_update();
 8001dda:	f001 fab5 	bl	8003348 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8001dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de2:	220a      	movs	r2, #10
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f00e fb2c 	bl	8010444 <memset>
					while(klick == 3)
 8001dec:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <StartOLED_RTC+0x9e8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d0aa      	beq.n	8001d4a <StartOLED_RTC+0x892>

						}
					}
					if(klick == 4)
 8001df4:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <StartOLED_RTC+0x9e8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	f040 83a1 	bne.w	8002540 <StartOLED_RTC+0x1088>
					{
						if((currCounter < 1) || (currCounter > 12))
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	dd03      	ble.n	8001e0e <StartOLED_RTC+0x956>
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <StartOLED_RTC+0x9dc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	dd05      	ble.n	8001e1a <StartOLED_RTC+0x962>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <StartOLED_RTC+0x9d8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2201      	movs	r2, #1
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 8001e16:	2301      	movs	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	4619      	mov	r1, r3
 8001e20:	2005      	movs	r0, #5
 8001e22:	f7fe fcf9 	bl	8000818 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <StartOLED_RTC+0x9ec>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2110      	movs	r1, #16
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f001 f9d7 	bl	80031e0 <graphics_text>
						oled_update();
 8001e32:	f001 fa89 	bl	8003348 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <StartOLED_RTC+0x9f0>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	2110      	movs	r1, #16
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f001 f9cf 	bl	80031e0 <graphics_text>
						oled_update();
 8001e42:	f001 fa81 	bl	8003348 <oled_update>

						osDelay(800);
 8001e46:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e4a:	f00a ff75 	bl	800cd38 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <StartOLED_RTC+0x9ec>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	2110      	movs	r1, #16
 8001e54:	2000      	movs	r0, #0
 8001e56:	f001 f9c3 	bl	80031e0 <graphics_text>
						oled_update();
 8001e5a:	f001 fa75 	bl	8003348 <oled_update>

						klick = 5;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <StartOLED_RTC+0x9e8>)
 8001e60:	2205      	movs	r2, #5
 8001e62:	601a      	str	r2, [r3, #0]
					}

					break;
 8001e64:	e36c      	b.n	8002540 <StartOLED_RTC+0x1088>

				case 5:
					// Set date

					graphics_text(0, 8, 1, "              ");
 8001e66:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <StartOLED_RTC+0x9f8>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f001 f9b7 	bl	80031e0 <graphics_text>
					oled_update();
 8001e72:	f001 fa69 	bl	8003348 <oled_update>
					graphics_text(0, 8, 1, "DATE");
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <StartOLED_RTC+0x9fc>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2108      	movs	r1, #8
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f001 f9af 	bl	80031e0 <graphics_text>
					oled_update();
 8001e82:	f001 fa61 	bl	8003348 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 8001e86:	4b02      	ldr	r3, [pc, #8]	; (8001e90 <StartOLED_RTC+0x9d8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 5)
 8001e8e:	e064      	b.n	8001f5a <StartOLED_RTC+0xaa2>
 8001e90:	20004b8c 	.word	0x20004b8c
 8001e94:	200000c4 	.word	0x200000c4
 8001e98:	08010e8c 	.word	0x08010e8c
 8001e9c:	08010e24 	.word	0x08010e24
 8001ea0:	200000c8 	.word	0x200000c8
 8001ea4:	08010e98 	.word	0x08010e98
 8001ea8:	08010eac 	.word	0x08010eac
 8001eac:	08010eb8 	.word	0x08010eb8
 8001eb0:	08010ec0 	.word	0x08010ec0
 8001eb4:	08010ed0 	.word	0x08010ed0
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8001eb8:	4ba2      	ldr	r3, [pc, #648]	; (8002144 <StartOLED_RTC+0xc8c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4ba1      	ldr	r3, [pc, #644]	; (8002148 <StartOLED_RTC+0xc90>)
 8001ec2:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8001ec4:	4ba0      	ldr	r3, [pc, #640]	; (8002148 <StartOLED_RTC+0xc90>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	0fda      	lsrs	r2, r3, #31
 8001ece:	4413      	add	r3, r2
 8001ed0:	105b      	asrs	r3, r3, #1
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001ed8:	337f      	adds	r3, #127	; 0x7f
 8001eda:	4a9b      	ldr	r2, [pc, #620]	; (8002148 <StartOLED_RTC+0xc90>)
 8001edc:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8001ede:	4b9a      	ldr	r3, [pc, #616]	; (8002148 <StartOLED_RTC+0xc90>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d038      	beq.n	8001f5a <StartOLED_RTC+0xaa2>
						{
							prevCounter = currCounter;
 8001ee8:	4b97      	ldr	r3, [pc, #604]	; (8002148 <StartOLED_RTC+0xc90>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]

							if(currCounter > 31)
 8001eee:	4b96      	ldr	r3, [pc, #600]	; (8002148 <StartOLED_RTC+0xc90>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b1f      	cmp	r3, #31
 8001ef4:	dd06      	ble.n	8001f04 <StartOLED_RTC+0xa4c>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8001ef6:	4b93      	ldr	r3, [pc, #588]	; (8002144 <StartOLED_RTC+0xc8c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2201      	movs	r2, #1
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8001efe:	4b92      	ldr	r3, [pc, #584]	; (8002148 <StartOLED_RTC+0xc90>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 1)
 8001f04:	4b90      	ldr	r3, [pc, #576]	; (8002148 <StartOLED_RTC+0xc90>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	dc06      	bgt.n	8001f1a <StartOLED_RTC+0xa62>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8001f0c:	4b8d      	ldr	r3, [pc, #564]	; (8002144 <StartOLED_RTC+0xc8c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2201      	movs	r2, #1
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8001f14:	4b8c      	ldr	r3, [pc, #560]	; (8002148 <StartOLED_RTC+0xc90>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8001f1a:	4b8c      	ldr	r3, [pc, #560]	; (800214c <StartOLED_RTC+0xc94>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	2110      	movs	r1, #16
 8001f20:	2000      	movs	r0, #0
 8001f22:	f001 f95d 	bl	80031e0 <graphics_text>
							oled_update();
 8001f26:	f001 fa0f 	bl	8003348 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8001f2a:	4b87      	ldr	r3, [pc, #540]	; (8002148 <StartOLED_RTC+0xc90>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f32:	4987      	ldr	r1, [pc, #540]	; (8002150 <StartOLED_RTC+0xc98>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	f00e fbb1 	bl	801069c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8001f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2110      	movs	r1, #16
 8001f42:	2000      	movs	r0, #0
 8001f44:	f001 f94c 	bl	80031e0 <graphics_text>
							oled_update();
 8001f48:	f001 f9fe 	bl	8003348 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8001f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f50:	220a      	movs	r2, #10
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00e fa75 	bl	8010444 <memset>
					while(klick == 5)
 8001f5a:	4b7e      	ldr	r3, [pc, #504]	; (8002154 <StartOLED_RTC+0xc9c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d0aa      	beq.n	8001eb8 <StartOLED_RTC+0xa00>

						}
					}
					if(klick == 6)
 8001f62:	4b7c      	ldr	r3, [pc, #496]	; (8002154 <StartOLED_RTC+0xc9c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	f040 82ed 	bne.w	8002546 <StartOLED_RTC+0x108e>
					{
						if((currCounter < 1) || (currCounter > 32))
 8001f6c:	4b76      	ldr	r3, [pc, #472]	; (8002148 <StartOLED_RTC+0xc90>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	dd03      	ble.n	8001f7c <StartOLED_RTC+0xac4>
 8001f74:	4b74      	ldr	r3, [pc, #464]	; (8002148 <StartOLED_RTC+0xc90>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	dd05      	ble.n	8001f88 <StartOLED_RTC+0xad0>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8001f7c:	4b71      	ldr	r3, [pc, #452]	; (8002144 <StartOLED_RTC+0xc8c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2201      	movs	r2, #1
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 8001f84:	2301      	movs	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_DATE_DEFAULT, &prevCounter);
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	2004      	movs	r0, #4
 8001f90:	f7fe fc42 	bl	8000818 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8001f94:	4b70      	ldr	r3, [pc, #448]	; (8002158 <StartOLED_RTC+0xca0>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	2110      	movs	r1, #16
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f001 f920 	bl	80031e0 <graphics_text>
						oled_update();
 8001fa0:	f001 f9d2 	bl	8003348 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8001fa4:	4b6d      	ldr	r3, [pc, #436]	; (800215c <StartOLED_RTC+0xca4>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2110      	movs	r1, #16
 8001faa:	2000      	movs	r0, #0
 8001fac:	f001 f918 	bl	80031e0 <graphics_text>
						oled_update();
 8001fb0:	f001 f9ca 	bl	8003348 <oled_update>

						osDelay(800);
 8001fb4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001fb8:	f00a febe 	bl	800cd38 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8001fbc:	4b66      	ldr	r3, [pc, #408]	; (8002158 <StartOLED_RTC+0xca0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2110      	movs	r1, #16
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f001 f90c 	bl	80031e0 <graphics_text>
						oled_update();
 8001fc8:	f001 f9be 	bl	8003348 <oled_update>

						klick = 7;
 8001fcc:	4b61      	ldr	r3, [pc, #388]	; (8002154 <StartOLED_RTC+0xc9c>)
 8001fce:	2207      	movs	r2, #7
 8001fd0:	601a      	str	r2, [r3, #0]
					}

					break;
 8001fd2:	e2b8      	b.n	8002546 <StartOLED_RTC+0x108e>

				case 7:
					// Set day of week

					graphics_text(0, 8, 1, "              ");
 8001fd4:	4b62      	ldr	r3, [pc, #392]	; (8002160 <StartOLED_RTC+0xca8>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2108      	movs	r1, #8
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f001 f900 	bl	80031e0 <graphics_text>
					oled_update();
 8001fe0:	f001 f9b2 	bl	8003348 <oled_update>
					graphics_text(0, 8, 1, "DAY");
 8001fe4:	4b5f      	ldr	r3, [pc, #380]	; (8002164 <StartOLED_RTC+0xcac>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2108      	movs	r1, #8
 8001fea:	2000      	movs	r0, #0
 8001fec:	f001 f8f8 	bl	80031e0 <graphics_text>
					oled_update();
 8001ff0:	f001 f9aa 	bl	8003348 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <StartOLED_RTC+0xc8c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 7)
 8001ffc:	e050      	b.n	80020a0 <StartOLED_RTC+0xbe8>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8001ffe:	4b51      	ldr	r3, [pc, #324]	; (8002144 <StartOLED_RTC+0xc8c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	461a      	mov	r2, r3
 8002006:	4b50      	ldr	r3, [pc, #320]	; (8002148 <StartOLED_RTC+0xc90>)
 8002008:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 800200a:	4b4f      	ldr	r3, [pc, #316]	; (8002148 <StartOLED_RTC+0xc90>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3b01      	subs	r3, #1
 8002010:	b29b      	uxth	r3, r3
 8002012:	0fda      	lsrs	r2, r3, #31
 8002014:	4413      	add	r3, r2
 8002016:	105b      	asrs	r3, r3, #1
 8002018:	425b      	negs	r3, r3
 800201a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800201e:	337f      	adds	r3, #127	; 0x7f
 8002020:	4a49      	ldr	r2, [pc, #292]	; (8002148 <StartOLED_RTC+0xc90>)
 8002022:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <StartOLED_RTC+0xc90>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	429a      	cmp	r2, r3
 800202c:	d038      	beq.n	80020a0 <StartOLED_RTC+0xbe8>
						{
							prevCounter = currCounter;
 800202e:	4b46      	ldr	r3, [pc, #280]	; (8002148 <StartOLED_RTC+0xc90>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]
							if(currCounter > 7)
 8002034:	4b44      	ldr	r3, [pc, #272]	; (8002148 <StartOLED_RTC+0xc90>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b07      	cmp	r3, #7
 800203a:	dd06      	ble.n	800204a <StartOLED_RTC+0xb92>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 800203c:	4b41      	ldr	r3, [pc, #260]	; (8002144 <StartOLED_RTC+0xc8c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2201      	movs	r2, #1
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002044:	4b40      	ldr	r3, [pc, #256]	; (8002148 <StartOLED_RTC+0xc90>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 1)
 800204a:	4b3f      	ldr	r3, [pc, #252]	; (8002148 <StartOLED_RTC+0xc90>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	dc06      	bgt.n	8002060 <StartOLED_RTC+0xba8>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002052:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <StartOLED_RTC+0xc8c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2201      	movs	r2, #1
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 800205a:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <StartOLED_RTC+0xc90>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <StartOLED_RTC+0xc94>)
 8002062:	2201      	movs	r2, #1
 8002064:	2110      	movs	r1, #16
 8002066:	2000      	movs	r0, #0
 8002068:	f001 f8ba 	bl	80031e0 <graphics_text>
							oled_update();
 800206c:	f001 f96c 	bl	8003348 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002070:	4b35      	ldr	r3, [pc, #212]	; (8002148 <StartOLED_RTC+0xc90>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002078:	4935      	ldr	r1, [pc, #212]	; (8002150 <StartOLED_RTC+0xc98>)
 800207a:	4618      	mov	r0, r3
 800207c:	f00e fb0e 	bl	801069c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002084:	2201      	movs	r2, #1
 8002086:	2110      	movs	r1, #16
 8002088:	2000      	movs	r0, #0
 800208a:	f001 f8a9 	bl	80031e0 <graphics_text>
							oled_update();
 800208e:	f001 f95b 	bl	8003348 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002096:	220a      	movs	r2, #10
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f00e f9d2 	bl	8010444 <memset>
					while(klick == 7)
 80020a0:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <StartOLED_RTC+0xc9c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b07      	cmp	r3, #7
 80020a6:	d0aa      	beq.n	8001ffe <StartOLED_RTC+0xb46>

						}
					}
					if(klick == 8)
 80020a8:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <StartOLED_RTC+0xc9c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	f040 824d 	bne.w	800254c <StartOLED_RTC+0x1094>
					{
						if((currCounter < 1) || (currCounter > 7))
 80020b2:	4b25      	ldr	r3, [pc, #148]	; (8002148 <StartOLED_RTC+0xc90>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	dd03      	ble.n	80020c2 <StartOLED_RTC+0xc0a>
 80020ba:	4b23      	ldr	r3, [pc, #140]	; (8002148 <StartOLED_RTC+0xc90>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b07      	cmp	r3, #7
 80020c0:	dd05      	ble.n	80020ce <StartOLED_RTC+0xc16>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <StartOLED_RTC+0xc8c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2201      	movs	r2, #1
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &prevCounter);
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	4619      	mov	r1, r3
 80020d4:	2003      	movs	r0, #3
 80020d6:	f7fe fb9f 	bl	8000818 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <StartOLED_RTC+0xca0>)
 80020dc:	2201      	movs	r2, #1
 80020de:	2110      	movs	r1, #16
 80020e0:	2000      	movs	r0, #0
 80020e2:	f001 f87d 	bl	80031e0 <graphics_text>
						oled_update();
 80020e6:	f001 f92f 	bl	8003348 <oled_update>

						graphics_text(0, 16, 1, "installed");
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <StartOLED_RTC+0xca4>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	2110      	movs	r1, #16
 80020f0:	2000      	movs	r0, #0
 80020f2:	f001 f875 	bl	80031e0 <graphics_text>
						oled_update();
 80020f6:	f001 f927 	bl	8003348 <oled_update>

						osDelay(800);
 80020fa:	f44f 7048 	mov.w	r0, #800	; 0x320
 80020fe:	f00a fe1b 	bl	800cd38 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <StartOLED_RTC+0xca0>)
 8002104:	2201      	movs	r2, #1
 8002106:	2110      	movs	r1, #16
 8002108:	2000      	movs	r0, #0
 800210a:	f001 f869 	bl	80031e0 <graphics_text>
						oled_update();
 800210e:	f001 f91b 	bl	8003348 <oled_update>

						klick = 9;
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <StartOLED_RTC+0xc9c>)
 8002114:	2209      	movs	r2, #9
 8002116:	601a      	str	r2, [r3, #0]
					}
					break;
 8002118:	e218      	b.n	800254c <StartOLED_RTC+0x1094>

				case 9:
					// Set hour

					graphics_text(0, 8, 1, "              ");
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <StartOLED_RTC+0xca8>)
 800211c:	2201      	movs	r2, #1
 800211e:	2108      	movs	r1, #8
 8002120:	2000      	movs	r0, #0
 8002122:	f001 f85d 	bl	80031e0 <graphics_text>
					oled_update();
 8002126:	f001 f90f 	bl	8003348 <oled_update>
					graphics_text(0, 8, 1, "HOUR");
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <StartOLED_RTC+0xcb0>)
 800212c:	2201      	movs	r2, #1
 800212e:	2108      	movs	r1, #8
 8002130:	2000      	movs	r0, #0
 8002132:	f001 f855 	bl	80031e0 <graphics_text>
					oled_update();
 8002136:	f001 f907 	bl	8003348 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 800213a:	4b02      	ldr	r3, [pc, #8]	; (8002144 <StartOLED_RTC+0xc8c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2200      	movs	r2, #0
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 9)
 8002142:	e08d      	b.n	8002260 <StartOLED_RTC+0xda8>
 8002144:	20004b8c 	.word	0x20004b8c
 8002148:	200000c4 	.word	0x200000c4
 800214c:	08010e8c 	.word	0x08010e8c
 8002150:	08010e24 	.word	0x08010e24
 8002154:	200000c8 	.word	0x200000c8
 8002158:	08010e98 	.word	0x08010e98
 800215c:	08010eac 	.word	0x08010eac
 8002160:	08010ec0 	.word	0x08010ec0
 8002164:	08010ed8 	.word	0x08010ed8
 8002168:	08010edc 	.word	0x08010edc
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 800216c:	4b93      	ldr	r3, [pc, #588]	; (80023bc <StartOLED_RTC+0xf04>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	461a      	mov	r2, r3
 8002174:	4b92      	ldr	r3, [pc, #584]	; (80023c0 <StartOLED_RTC+0xf08>)
 8002176:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002178:	4b91      	ldr	r3, [pc, #580]	; (80023c0 <StartOLED_RTC+0xf08>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3b01      	subs	r3, #1
 800217e:	b29b      	uxth	r3, r3
 8002180:	0fda      	lsrs	r2, r3, #31
 8002182:	4413      	add	r3, r2
 8002184:	105b      	asrs	r3, r3, #1
 8002186:	425b      	negs	r3, r3
 8002188:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800218c:	337f      	adds	r3, #127	; 0x7f
 800218e:	4a8c      	ldr	r2, [pc, #560]	; (80023c0 <StartOLED_RTC+0xf08>)
 8002190:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002192:	4b8b      	ldr	r3, [pc, #556]	; (80023c0 <StartOLED_RTC+0xf08>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d038      	beq.n	800220e <StartOLED_RTC+0xd56>
						{
							prevCounter = currCounter;
 800219c:	4b88      	ldr	r3, [pc, #544]	; (80023c0 <StartOLED_RTC+0xf08>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60fb      	str	r3, [r7, #12]
							if(currCounter > 23)
 80021a2:	4b87      	ldr	r3, [pc, #540]	; (80023c0 <StartOLED_RTC+0xf08>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b17      	cmp	r3, #23
 80021a8:	dd06      	ble.n	80021b8 <StartOLED_RTC+0xd00>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 80021aa:	4b84      	ldr	r3, [pc, #528]	; (80023bc <StartOLED_RTC+0xf04>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2200      	movs	r2, #0
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 80021b2:	4b83      	ldr	r3, [pc, #524]	; (80023c0 <StartOLED_RTC+0xf08>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 80021b8:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <StartOLED_RTC+0xf08>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	da06      	bge.n	80021ce <StartOLED_RTC+0xd16>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 80021c0:	4b7e      	ldr	r3, [pc, #504]	; (80023bc <StartOLED_RTC+0xf04>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2200      	movs	r2, #0
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 80021c8:	4b7d      	ldr	r3, [pc, #500]	; (80023c0 <StartOLED_RTC+0xf08>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 80021ce:	4b7d      	ldr	r3, [pc, #500]	; (80023c4 <StartOLED_RTC+0xf0c>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	2110      	movs	r1, #16
 80021d4:	2000      	movs	r0, #0
 80021d6:	f001 f803 	bl	80031e0 <graphics_text>
							oled_update();
 80021da:	f001 f8b5 	bl	8003348 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 80021de:	4b78      	ldr	r3, [pc, #480]	; (80023c0 <StartOLED_RTC+0xf08>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e6:	4978      	ldr	r1, [pc, #480]	; (80023c8 <StartOLED_RTC+0xf10>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f00e fa57 	bl	801069c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	2201      	movs	r2, #1
 80021f4:	2110      	movs	r1, #16
 80021f6:	2000      	movs	r0, #0
 80021f8:	f000 fff2 	bl	80031e0 <graphics_text>
							oled_update();
 80021fc:	f001 f8a4 	bl	8003348 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002204:	220a      	movs	r2, #10
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f00e f91b 	bl	8010444 <memset>
						}

						if(klick == 10)
 800220e:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <StartOLED_RTC+0xf14>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b0a      	cmp	r3, #10
 8002214:	d124      	bne.n	8002260 <StartOLED_RTC+0xda8>
						{
							// write data
							ds3231_set(DS3231_REGISTER_HOURS_DEFAULT, &prevCounter);
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	4619      	mov	r1, r3
 800221c:	2002      	movs	r0, #2
 800221e:	f7fe fafb 	bl	8000818 <ds3231_set>

							graphics_text(0, 16, 1, "                 ");
 8002222:	4b6b      	ldr	r3, [pc, #428]	; (80023d0 <StartOLED_RTC+0xf18>)
 8002224:	2201      	movs	r2, #1
 8002226:	2110      	movs	r1, #16
 8002228:	2000      	movs	r0, #0
 800222a:	f000 ffd9 	bl	80031e0 <graphics_text>
							oled_update();
 800222e:	f001 f88b 	bl	8003348 <oled_update>

							graphics_text(0, 16, 1, "installed");
 8002232:	4b68      	ldr	r3, [pc, #416]	; (80023d4 <StartOLED_RTC+0xf1c>)
 8002234:	2201      	movs	r2, #1
 8002236:	2110      	movs	r1, #16
 8002238:	2000      	movs	r0, #0
 800223a:	f000 ffd1 	bl	80031e0 <graphics_text>
							oled_update();
 800223e:	f001 f883 	bl	8003348 <oled_update>

							osDelay(800);
 8002242:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002246:	f00a fd77 	bl	800cd38 <osDelay>

							graphics_text(0, 16, 1, "                 ");
 800224a:	4b61      	ldr	r3, [pc, #388]	; (80023d0 <StartOLED_RTC+0xf18>)
 800224c:	2201      	movs	r2, #1
 800224e:	2110      	movs	r1, #16
 8002250:	2000      	movs	r0, #0
 8002252:	f000 ffc5 	bl	80031e0 <graphics_text>
							oled_update();
 8002256:	f001 f877 	bl	8003348 <oled_update>

							klick = 11;
 800225a:	4b5c      	ldr	r3, [pc, #368]	; (80023cc <StartOLED_RTC+0xf14>)
 800225c:	220b      	movs	r2, #11
 800225e:	601a      	str	r2, [r3, #0]
					while(klick == 9)
 8002260:	4b5a      	ldr	r3, [pc, #360]	; (80023cc <StartOLED_RTC+0xf14>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b09      	cmp	r3, #9
 8002266:	d081      	beq.n	800216c <StartOLED_RTC+0xcb4>
						}
					}
					break;
 8002268:	e177      	b.n	800255a <StartOLED_RTC+0x10a2>

				case 11:
					// Set minutes

					graphics_text(0, 8, 1, "              ");
 800226a:	4b5b      	ldr	r3, [pc, #364]	; (80023d8 <StartOLED_RTC+0xf20>)
 800226c:	2201      	movs	r2, #1
 800226e:	2108      	movs	r1, #8
 8002270:	2000      	movs	r0, #0
 8002272:	f000 ffb5 	bl	80031e0 <graphics_text>
					oled_update();
 8002276:	f001 f867 	bl	8003348 <oled_update>
					graphics_text(0, 8, 1, "MINUTES");
 800227a:	4b58      	ldr	r3, [pc, #352]	; (80023dc <StartOLED_RTC+0xf24>)
 800227c:	2201      	movs	r2, #1
 800227e:	2108      	movs	r1, #8
 8002280:	2000      	movs	r0, #0
 8002282:	f000 ffad 	bl	80031e0 <graphics_text>
					oled_update();
 8002286:	f001 f85f 	bl	8003348 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 800228a:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <StartOLED_RTC+0xf04>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2200      	movs	r2, #0
 8002290:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 11)
 8002292:	e04e      	b.n	8002332 <StartOLED_RTC+0xe7a>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002294:	4b49      	ldr	r3, [pc, #292]	; (80023bc <StartOLED_RTC+0xf04>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	461a      	mov	r2, r3
 800229c:	4b48      	ldr	r3, [pc, #288]	; (80023c0 <StartOLED_RTC+0xf08>)
 800229e:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80022a0:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <StartOLED_RTC+0xf08>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	0fda      	lsrs	r2, r3, #31
 80022aa:	4413      	add	r3, r2
 80022ac:	105b      	asrs	r3, r3, #1
 80022ae:	425b      	negs	r3, r3
 80022b0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80022b4:	337f      	adds	r3, #127	; 0x7f
 80022b6:	4a42      	ldr	r2, [pc, #264]	; (80023c0 <StartOLED_RTC+0xf08>)
 80022b8:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 80022ba:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <StartOLED_RTC+0xf08>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d036      	beq.n	8002332 <StartOLED_RTC+0xe7a>
						{
							prevCounter = currCounter;
 80022c4:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <StartOLED_RTC+0xf08>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
							if(currCounter > 59)
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <StartOLED_RTC+0xf08>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b3b      	cmp	r3, #59	; 0x3b
 80022d0:	dd05      	ble.n	80022de <StartOLED_RTC+0xe26>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 80022d2:	4b3a      	ldr	r3, [pc, #232]	; (80023bc <StartOLED_RTC+0xf04>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
								prevCounter = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
							}
							if(currCounter < 0)
 80022de:	4b38      	ldr	r3, [pc, #224]	; (80023c0 <StartOLED_RTC+0xf08>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da05      	bge.n	80022f2 <StartOLED_RTC+0xe3a>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 80022e6:	4b35      	ldr	r3, [pc, #212]	; (80023bc <StartOLED_RTC+0xf04>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24
								prevCounter = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
							}

							graphics_text(0, 16, 1, "           ");
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <StartOLED_RTC+0xf0c>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	2110      	movs	r1, #16
 80022f8:	2000      	movs	r0, #0
 80022fa:	f000 ff71 	bl	80031e0 <graphics_text>
							oled_update();
 80022fe:	f001 f823 	bl	8003348 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002302:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <StartOLED_RTC+0xf08>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230a:	492f      	ldr	r1, [pc, #188]	; (80023c8 <StartOLED_RTC+0xf10>)
 800230c:	4618      	mov	r0, r3
 800230e:	f00e f9c5 	bl	801069c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	2201      	movs	r2, #1
 8002318:	2110      	movs	r1, #16
 800231a:	2000      	movs	r0, #0
 800231c:	f000 ff60 	bl	80031e0 <graphics_text>
							oled_update();
 8002320:	f001 f812 	bl	8003348 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002328:	220a      	movs	r2, #10
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f00e f889 	bl	8010444 <memset>
					while(klick == 11)
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <StartOLED_RTC+0xf14>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b0b      	cmp	r3, #11
 8002338:	d0ac      	beq.n	8002294 <StartOLED_RTC+0xddc>
						}
					}
					if(klick == 12)
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <StartOLED_RTC+0xf14>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	f040 8107 	bne.w	8002552 <StartOLED_RTC+0x109a>
					{
						// write data
						ds3231_set(DS3231_REGISTER_MINUTES_DEFAULT, &prevCounter);
 8002344:	f107 030c 	add.w	r3, r7, #12
 8002348:	4619      	mov	r1, r3
 800234a:	2001      	movs	r0, #1
 800234c:	f7fe fa64 	bl	8000818 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002350:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <StartOLED_RTC+0xf18>)
 8002352:	2201      	movs	r2, #1
 8002354:	2110      	movs	r1, #16
 8002356:	2000      	movs	r0, #0
 8002358:	f000 ff42 	bl	80031e0 <graphics_text>
						oled_update();
 800235c:	f000 fff4 	bl	8003348 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002360:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <StartOLED_RTC+0xf1c>)
 8002362:	2201      	movs	r2, #1
 8002364:	2110      	movs	r1, #16
 8002366:	2000      	movs	r0, #0
 8002368:	f000 ff3a 	bl	80031e0 <graphics_text>
						oled_update();
 800236c:	f000 ffec 	bl	8003348 <oled_update>

						osDelay(800);
 8002370:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002374:	f00a fce0 	bl	800cd38 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <StartOLED_RTC+0xf18>)
 800237a:	2201      	movs	r2, #1
 800237c:	2110      	movs	r1, #16
 800237e:	2000      	movs	r0, #0
 8002380:	f000 ff2e 	bl	80031e0 <graphics_text>
						oled_update();
 8002384:	f000 ffe0 	bl	8003348 <oled_update>

						klick = 13;
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <StartOLED_RTC+0xf14>)
 800238a:	220d      	movs	r2, #13
 800238c:	601a      	str	r2, [r3, #0]
					}
					break;
 800238e:	e0e0      	b.n	8002552 <StartOLED_RTC+0x109a>

				case 13:
					// Set minutes

					graphics_text(0, 8, 1, "              ");
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <StartOLED_RTC+0xf20>)
 8002392:	2201      	movs	r2, #1
 8002394:	2108      	movs	r1, #8
 8002396:	2000      	movs	r0, #0
 8002398:	f000 ff22 	bl	80031e0 <graphics_text>
					oled_update();
 800239c:	f000 ffd4 	bl	8003348 <oled_update>
					graphics_text(0, 8, 1, "SECONDS");
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <StartOLED_RTC+0xf28>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	2108      	movs	r1, #8
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 ff1a 	bl	80031e0 <graphics_text>
					oled_update();
 80023ac:	f000 ffcc 	bl	8003348 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 80023b0:	4b02      	ldr	r3, [pc, #8]	; (80023bc <StartOLED_RTC+0xf04>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2200      	movs	r2, #0
 80023b6:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 13)
 80023b8:	e065      	b.n	8002486 <StartOLED_RTC+0xfce>
 80023ba:	bf00      	nop
 80023bc:	20004b8c 	.word	0x20004b8c
 80023c0:	200000c4 	.word	0x200000c4
 80023c4:	08010e8c 	.word	0x08010e8c
 80023c8:	08010e24 	.word	0x08010e24
 80023cc:	200000c8 	.word	0x200000c8
 80023d0:	08010e98 	.word	0x08010e98
 80023d4:	08010eac 	.word	0x08010eac
 80023d8:	08010ec0 	.word	0x08010ec0
 80023dc:	08010ee4 	.word	0x08010ee4
 80023e0:	08010eec 	.word	0x08010eec
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 80023e4:	4b5e      	ldr	r3, [pc, #376]	; (8002560 <StartOLED_RTC+0x10a8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	461a      	mov	r2, r3
 80023ec:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <StartOLED_RTC+0x10ac>)
 80023ee:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80023f0:	4b5c      	ldr	r3, [pc, #368]	; (8002564 <StartOLED_RTC+0x10ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	0fda      	lsrs	r2, r3, #31
 80023fa:	4413      	add	r3, r2
 80023fc:	105b      	asrs	r3, r3, #1
 80023fe:	425b      	negs	r3, r3
 8002400:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002404:	337f      	adds	r3, #127	; 0x7f
 8002406:	4a57      	ldr	r2, [pc, #348]	; (8002564 <StartOLED_RTC+0x10ac>)
 8002408:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 800240a:	4b56      	ldr	r3, [pc, #344]	; (8002564 <StartOLED_RTC+0x10ac>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	429a      	cmp	r2, r3
 8002412:	d038      	beq.n	8002486 <StartOLED_RTC+0xfce>
						{
							prevCounter = currCounter;
 8002414:	4b53      	ldr	r3, [pc, #332]	; (8002564 <StartOLED_RTC+0x10ac>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
							if(currCounter > 59)
 800241a:	4b52      	ldr	r3, [pc, #328]	; (8002564 <StartOLED_RTC+0x10ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b3b      	cmp	r3, #59	; 0x3b
 8002420:	dd06      	ble.n	8002430 <StartOLED_RTC+0xf78>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002422:	4b4f      	ldr	r3, [pc, #316]	; (8002560 <StartOLED_RTC+0x10a8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2200      	movs	r2, #0
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 800242a:	4b4e      	ldr	r3, [pc, #312]	; (8002564 <StartOLED_RTC+0x10ac>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 8002430:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <StartOLED_RTC+0x10ac>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	da06      	bge.n	8002446 <StartOLED_RTC+0xf8e>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002438:	4b49      	ldr	r3, [pc, #292]	; (8002560 <StartOLED_RTC+0x10a8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2200      	movs	r2, #0
 800243e:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8002440:	4b48      	ldr	r3, [pc, #288]	; (8002564 <StartOLED_RTC+0x10ac>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
							}
							graphics_text(0, 16, 1, "           ");
 8002446:	4b48      	ldr	r3, [pc, #288]	; (8002568 <StartOLED_RTC+0x10b0>)
 8002448:	2201      	movs	r2, #1
 800244a:	2110      	movs	r1, #16
 800244c:	2000      	movs	r0, #0
 800244e:	f000 fec7 	bl	80031e0 <graphics_text>
							oled_update();
 8002452:	f000 ff79 	bl	8003348 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002456:	4b43      	ldr	r3, [pc, #268]	; (8002564 <StartOLED_RTC+0x10ac>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245e:	4943      	ldr	r1, [pc, #268]	; (800256c <StartOLED_RTC+0x10b4>)
 8002460:	4618      	mov	r0, r3
 8002462:	f00e f91b 	bl	801069c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246a:	2201      	movs	r2, #1
 800246c:	2110      	movs	r1, #16
 800246e:	2000      	movs	r0, #0
 8002470:	f000 feb6 	bl	80031e0 <graphics_text>
							oled_update();
 8002474:	f000 ff68 	bl	8003348 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247c:	220a      	movs	r2, #10
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f00d ffdf 	bl	8010444 <memset>
					while(klick == 13)
 8002486:	4b3a      	ldr	r3, [pc, #232]	; (8002570 <StartOLED_RTC+0x10b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b0d      	cmp	r3, #13
 800248c:	d0aa      	beq.n	80023e4 <StartOLED_RTC+0xf2c>
						}
					}
					if(klick == 14)
 800248e:	4b38      	ldr	r3, [pc, #224]	; (8002570 <StartOLED_RTC+0x10b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b0e      	cmp	r3, #14
 8002494:	d160      	bne.n	8002558 <StartOLED_RTC+0x10a0>
					{
						// write data
						ds3231_set(DS3231_REGISTER_SECONDS_DEFAULT, &prevCounter);
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	4619      	mov	r1, r3
 800249c:	2000      	movs	r0, #0
 800249e:	f7fe f9bb 	bl	8000818 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 80024a2:	4b34      	ldr	r3, [pc, #208]	; (8002574 <StartOLED_RTC+0x10bc>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	2110      	movs	r1, #16
 80024a8:	2000      	movs	r0, #0
 80024aa:	f000 fe99 	bl	80031e0 <graphics_text>
						oled_update();
 80024ae:	f000 ff4b 	bl	8003348 <oled_update>

						graphics_text(0, 16, 1, "installed");
 80024b2:	4b31      	ldr	r3, [pc, #196]	; (8002578 <StartOLED_RTC+0x10c0>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	2110      	movs	r1, #16
 80024b8:	2000      	movs	r0, #0
 80024ba:	f000 fe91 	bl	80031e0 <graphics_text>
						oled_update();
 80024be:	f000 ff43 	bl	8003348 <oled_update>

						osDelay(800);
 80024c2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80024c6:	f00a fc37 	bl	800cd38 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 80024ca:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <StartOLED_RTC+0x10bc>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	2110      	movs	r1, #16
 80024d0:	2000      	movs	r0, #0
 80024d2:	f000 fe85 	bl	80031e0 <graphics_text>
						oled_update();
 80024d6:	f000 ff37 	bl	8003348 <oled_update>

						klick = 15;
 80024da:	4b25      	ldr	r3, [pc, #148]	; (8002570 <StartOLED_RTC+0x10b8>)
 80024dc:	220f      	movs	r2, #15
 80024de:	601a      	str	r2, [r3, #0]
					}
					break;
 80024e0:	e03a      	b.n	8002558 <StartOLED_RTC+0x10a0>

				case 15:		// EXIT

					osDelay(500);
 80024e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024e6:	f00a fc27 	bl	800cd38 <osDelay>
					clear();
 80024ea:	f000 fcc5 	bl	8002e78 <clear>
					oled_update();
 80024ee:	f000 ff2b 	bl	8003348 <oled_update>

					for(uint8_t q = 0; q < 3; q ++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80024f8:	e017      	b.n	800252a <StartOLED_RTC+0x1072>
					{
						graphics_text(20, 16, 2, "THE TIME IS SET");
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <StartOLED_RTC+0x10c4>)
 80024fc:	2202      	movs	r2, #2
 80024fe:	2110      	movs	r1, #16
 8002500:	2014      	movs	r0, #20
 8002502:	f000 fe6d 	bl	80031e0 <graphics_text>
						oled_update();
 8002506:	f000 ff1f 	bl	8003348 <oled_update>
						osDelay(400);
 800250a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800250e:	f00a fc13 	bl	800cd38 <osDelay>

						clear();
 8002512:	f000 fcb1 	bl	8002e78 <clear>
						oled_update();
 8002516:	f000 ff17 	bl	8003348 <oled_update>
						osDelay(200);
 800251a:	20c8      	movs	r0, #200	; 0xc8
 800251c:	f00a fc0c 	bl	800cd38 <osDelay>
					for(uint8_t q = 0; q < 3; q ++)
 8002520:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002524:	3301      	adds	r3, #1
 8002526:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800252a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800252e:	2b02      	cmp	r3, #2
 8002530:	d9e3      	bls.n	80024fa <StartOLED_RTC+0x1042>
					}
					klick = 0;					// Return to show time
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <StartOLED_RTC+0x10b8>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

					break;
 8002538:	e00f      	b.n	800255a <StartOLED_RTC+0x10a2>
					break;
 800253a:	bf00      	nop
 800253c:	f7ff b801 	b.w	8001542 <StartOLED_RTC+0x8a>
					break;
 8002540:	bf00      	nop
 8002542:	f7fe bffe 	b.w	8001542 <StartOLED_RTC+0x8a>
					break;
 8002546:	bf00      	nop
 8002548:	f7fe bffb 	b.w	8001542 <StartOLED_RTC+0x8a>
					break;
 800254c:	bf00      	nop
 800254e:	f7fe bff8 	b.w	8001542 <StartOLED_RTC+0x8a>
					break;
 8002552:	bf00      	nop
 8002554:	f7fe bff5 	b.w	8001542 <StartOLED_RTC+0x8a>
					break;
 8002558:	bf00      	nop
			switch (klick)
 800255a:	f7fe bff2 	b.w	8001542 <StartOLED_RTC+0x8a>
 800255e:	bf00      	nop
 8002560:	20004b8c 	.word	0x20004b8c
 8002564:	200000c4 	.word	0x200000c4
 8002568:	08010e8c 	.word	0x08010e8c
 800256c:	08010e24 	.word	0x08010e24
 8002570:	200000c8 	.word	0x200000c8
 8002574:	08010e98 	.word	0x08010e98
 8002578:	08010eac 	.word	0x08010eac
 800257c:	08010ef4 	.word	0x08010ef4

08002580 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002592:	f000 ffeb 	bl	800356c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40001000 	.word	0x40001000

080025a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a8:	b672      	cpsid	i
}
 80025aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025ac:	e7fe      	b.n	80025ac <Error_Handler+0x8>
	...

080025b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_MspInit+0x54>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a11      	ldr	r2, [pc, #68]	; (8002604 <HAL_MspInit+0x54>)
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_MspInit+0x54>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_MspInit+0x54>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <HAL_MspInit+0x54>)
 80025dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e0:	6413      	str	r3, [r2, #64]	; 0x40
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_MspInit+0x54>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	210f      	movs	r1, #15
 80025f2:	f06f 0001 	mvn.w	r0, #1
 80025f6:	f001 f8b5 	bl	8003764 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800

08002608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	; 0x30
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a42      	ldr	r2, [pc, #264]	; (8002730 <HAL_I2C_MspInit+0x128>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d12d      	bne.n	8002686 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a40      	ldr	r2, [pc, #256]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b3e      	ldr	r3, [pc, #248]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002646:	f44f 7310 	mov.w	r3, #576	; 0x240
 800264a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800264c:	2312      	movs	r3, #18
 800264e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002650:	2301      	movs	r3, #1
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002658:	2304      	movs	r3, #4
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	4619      	mov	r1, r3
 8002662:	4835      	ldr	r0, [pc, #212]	; (8002738 <HAL_I2C_MspInit+0x130>)
 8002664:	f001 f93a 	bl	80038dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	4a30      	ldr	r2, [pc, #192]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 8002672:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002676:	6413      	str	r3, [r2, #64]	; 0x40
 8002678:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002684:	e050      	b.n	8002728 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2c      	ldr	r2, [pc, #176]	; (800273c <HAL_I2C_MspInit+0x134>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d14b      	bne.n	8002728 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	4a26      	ldr	r2, [pc, #152]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 800269a:	f043 0304 	orr.w	r3, r3, #4
 800269e:	6313      	str	r3, [r2, #48]	; 0x30
 80026a0:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6313      	str	r3, [r2, #48]	; 0x30
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ce:	2312      	movs	r3, #18
 80026d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d6:	2303      	movs	r3, #3
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026da:	2304      	movs	r3, #4
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026de:	f107 031c 	add.w	r3, r7, #28
 80026e2:	4619      	mov	r1, r3
 80026e4:	4816      	ldr	r0, [pc, #88]	; (8002740 <HAL_I2C_MspInit+0x138>)
 80026e6:	f001 f8f9 	bl	80038dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f0:	2312      	movs	r3, #18
 80026f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026fc:	2304      	movs	r3, #4
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002700:	f107 031c 	add.w	r3, r7, #28
 8002704:	4619      	mov	r1, r3
 8002706:	480f      	ldr	r0, [pc, #60]	; (8002744 <HAL_I2C_MspInit+0x13c>)
 8002708:	f001 f8e8 	bl	80038dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 8002716:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800271a:	6413      	str	r3, [r2, #64]	; 0x40
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_I2C_MspInit+0x12c>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
}
 8002728:	bf00      	nop
 800272a:	3730      	adds	r7, #48	; 0x30
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40005400 	.word	0x40005400
 8002734:	40023800 	.word	0x40023800
 8002738:	40020400 	.word	0x40020400
 800273c:	40005c00 	.word	0x40005c00
 8002740:	40020800 	.word	0x40020800
 8002744:	40020000 	.word	0x40020000

08002748 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08e      	sub	sp, #56	; 0x38
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a31      	ldr	r2, [pc, #196]	; (8002838 <HAL_I2S_MspInit+0xf0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d15a      	bne.n	800282e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002778:	2301      	movs	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800277c:	23c0      	movs	r3, #192	; 0xc0
 800277e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002780:	2302      	movs	r3, #2
 8002782:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	4618      	mov	r0, r3
 800278a:	f005 fa8f 	bl	8007cac <HAL_RCCEx_PeriphCLKConfig>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002794:	f7ff ff06 	bl	80025a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_I2S_MspInit+0xf4>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	4a26      	ldr	r2, [pc, #152]	; (800283c <HAL_I2S_MspInit+0xf4>)
 80027a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a6:	6413      	str	r3, [r2, #64]	; 0x40
 80027a8:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_I2S_MspInit+0xf4>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b4:	2300      	movs	r3, #0
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	4b20      	ldr	r3, [pc, #128]	; (800283c <HAL_I2S_MspInit+0xf4>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	4a1f      	ldr	r2, [pc, #124]	; (800283c <HAL_I2S_MspInit+0xf4>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6313      	str	r3, [r2, #48]	; 0x30
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_I2S_MspInit+0xf4>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_I2S_MspInit+0xf4>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	4a18      	ldr	r2, [pc, #96]	; (800283c <HAL_I2S_MspInit+0xf4>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6313      	str	r3, [r2, #48]	; 0x30
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <HAL_I2S_MspInit+0xf4>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80027ec:	2310      	movs	r3, #16
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027fc:	2306      	movs	r3, #6
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002804:	4619      	mov	r1, r3
 8002806:	480e      	ldr	r0, [pc, #56]	; (8002840 <HAL_I2S_MspInit+0xf8>)
 8002808:	f001 f868 	bl	80038dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800280c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800281e:	2306      	movs	r3, #6
 8002820:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002826:	4619      	mov	r1, r3
 8002828:	4806      	ldr	r0, [pc, #24]	; (8002844 <HAL_I2S_MspInit+0xfc>)
 800282a:	f001 f857 	bl	80038dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800282e:	bf00      	nop
 8002830:	3738      	adds	r7, #56	; 0x38
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40003c00 	.word	0x40003c00
 800283c:	40023800 	.word	0x40023800
 8002840:	40020000 	.word	0x40020000
 8002844:	40020800 	.word	0x40020800

08002848 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_RTC_MspInit+0x4c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d111      	bne.n	800288c <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002868:	2302      	movs	r3, #2
 800286a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800286c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002870:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002872:	f107 0308 	add.w	r3, r7, #8
 8002876:	4618      	mov	r0, r3
 8002878:	f005 fa18 	bl	8007cac <HAL_RCCEx_PeriphCLKConfig>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002882:	f7ff fe8f 	bl	80025a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <HAL_RTC_MspInit+0x50>)
 8002888:	2201      	movs	r2, #1
 800288a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800288c:	bf00      	nop
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40002800 	.word	0x40002800
 8002898:	42470e3c 	.word	0x42470e3c

0800289c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_SPI_MspInit+0x84>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d12b      	bne.n	8002916 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_SPI_MspInit+0x88>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	4a17      	ldr	r2, [pc, #92]	; (8002924 <HAL_SPI_MspInit+0x88>)
 80028c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028cc:	6453      	str	r3, [r2, #68]	; 0x44
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_SPI_MspInit+0x88>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_SPI_MspInit+0x88>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <HAL_SPI_MspInit+0x88>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_SPI_MspInit+0x88>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80028f6:	23e0      	movs	r3, #224	; 0xe0
 80028f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002906:	2305      	movs	r3, #5
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	4805      	ldr	r0, [pc, #20]	; (8002928 <HAL_SPI_MspInit+0x8c>)
 8002912:	f000 ffe3 	bl	80038dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002916:	bf00      	nop
 8002918:	3728      	adds	r7, #40	; 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40013000 	.word	0x40013000
 8002924:	40023800 	.word	0x40023800
 8002928:	40020000 	.word	0x40020000

0800292c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <HAL_TIM_Encoder_MspInit+0x94>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d134      	bne.n	80029b8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002974:	f043 0310 	orr.w	r3, r3, #16
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_TIM_Encoder_MspInit+0x98>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002986:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800298a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002998:	2301      	movs	r3, #1
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	4619      	mov	r1, r3
 80029a2:	4809      	ldr	r0, [pc, #36]	; (80029c8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80029a4:	f000 ff9a 	bl	80038dc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2105      	movs	r1, #5
 80029ac:	2019      	movs	r0, #25
 80029ae:	f000 fed9 	bl	8003764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029b2:	2019      	movs	r0, #25
 80029b4:	f000 fef2 	bl	800379c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029b8:	bf00      	nop
 80029ba:	3728      	adds	r7, #40	; 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40021000 	.word	0x40021000

080029cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <HAL_TIM_Base_MspInit+0x48>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d115      	bne.n	8002a0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <HAL_TIM_Base_MspInit+0x4c>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <HAL_TIM_Base_MspInit+0x4c>)
 80029e8:	f043 0320 	orr.w	r3, r3, #32
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <HAL_TIM_Base_MspInit+0x4c>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2105      	movs	r1, #5
 80029fe:	2037      	movs	r0, #55	; 0x37
 8002a00:	f000 feb0 	bl	8003764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a04:	2037      	movs	r0, #55	; 0x37
 8002a06:	f000 fec9 	bl	800379c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40001400 	.word	0x40001400
 8002a18:	40023800 	.word	0x40023800

08002a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <HAL_UART_MspInit+0x94>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d133      	bne.n	8002aa6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <HAL_UART_MspInit+0x98>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <HAL_UART_MspInit+0x98>)
 8002a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_UART_MspInit+0x98>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <HAL_UART_MspInit+0x98>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <HAL_UART_MspInit+0x98>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_UART_MspInit+0x98>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a76:	230c      	movs	r3, #12
 8002a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a82:	2303      	movs	r3, #3
 8002a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a86:	2307      	movs	r3, #7
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4809      	ldr	r0, [pc, #36]	; (8002ab8 <HAL_UART_MspInit+0x9c>)
 8002a92:	f000 ff23 	bl	80038dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2105      	movs	r1, #5
 8002a9a:	2026      	movs	r0, #38	; 0x26
 8002a9c:	f000 fe62 	bl	8003764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002aa0:	2026      	movs	r0, #38	; 0x26
 8002aa2:	f000 fe7b 	bl	800379c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002aa6:	bf00      	nop
 8002aa8:	3728      	adds	r7, #40	; 0x28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40004400 	.word	0x40004400
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40020000 	.word	0x40020000

08002abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	; 0x30
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	2036      	movs	r0, #54	; 0x36
 8002ad2:	f000 fe47 	bl	8003764 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ad6:	2036      	movs	r0, #54	; 0x36
 8002ad8:	f000 fe60 	bl	800379c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <HAL_InitTick+0xa4>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <HAL_InitTick+0xa4>)
 8002ae6:	f043 0310 	orr.w	r3, r3, #16
 8002aea:	6413      	str	r3, [r2, #64]	; 0x40
 8002aec:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <HAL_InitTick+0xa4>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002af8:	f107 0210 	add.w	r2, r7, #16
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f005 f8a0 	bl	8007c48 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002b08:	f005 f876 	bl	8007bf8 <HAL_RCC_GetPCLK1Freq>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	4a13      	ldr	r2, [pc, #76]	; (8002b64 <HAL_InitTick+0xa8>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	0c9b      	lsrs	r3, r3, #18
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_InitTick+0xac>)
 8002b22:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <HAL_InitTick+0xb0>)
 8002b24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <HAL_InitTick+0xac>)
 8002b28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b2c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b2e:	4a0e      	ldr	r2, [pc, #56]	; (8002b68 <HAL_InitTick+0xac>)
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_InitTick+0xac>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_InitTick+0xac>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b40:	4809      	ldr	r0, [pc, #36]	; (8002b68 <HAL_InitTick+0xac>)
 8002b42:	f005 fb61 	bl	8008208 <HAL_TIM_Base_Init>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b4c:	4806      	ldr	r0, [pc, #24]	; (8002b68 <HAL_InitTick+0xac>)
 8002b4e:	f005 fbab 	bl	80082a8 <HAL_TIM_Base_Start_IT>
 8002b52:	4603      	mov	r3, r0
 8002b54:	e000      	b.n	8002b58 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3730      	adds	r7, #48	; 0x30
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	431bde83 	.word	0x431bde83
 8002b68:	20004d14 	.word	0x20004d14
 8002b6c:	40001000 	.word	0x40001000

08002b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <NMI_Handler+0x4>

08002b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b7a:	e7fe      	b.n	8002b7a <HardFault_Handler+0x4>

08002b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <MemManage_Handler+0x4>

08002b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b86:	e7fe      	b.n	8002b86 <BusFault_Handler+0x4>

08002b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <UsageFault_Handler+0x4>

08002b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ba2:	f005 fd54 	bl	800864e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20004b8c 	.word	0x20004b8c

08002bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <USART2_IRQHandler+0x10>)
 8002bb6:	f006 f84f 	bl	8008c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20004c3c 	.word	0x20004c3c

08002bc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  HAL_TIM_Base_Start_IT(&htim7);								//	Turn on Timer with 100Hz period = 0,01 sec
 8002bc8:	4804      	ldr	r0, [pc, #16]	; (8002bdc <EXTI15_10_IRQHandler+0x18>)
 8002bca:	f005 fb6d 	bl	80082a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC15_OSC32_OUT_Pin);
 8002bce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002bd2:	f001 f851 	bl	8003c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20004c84 	.word	0x20004c84

08002be0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002be4:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <TIM6_DAC_IRQHandler+0x10>)
 8002be6:	f005 fd32 	bl	800864e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20004d14 	.word	0x20004d14

08002bf4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(tim_val == 4)											// Waiting 3 period of timer7: (0,01 *3 = 0,03 second)
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <TIM7_IRQHandler+0x5c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d11d      	bne.n	8002c3c <TIM7_IRQHandler+0x48>
		{
			tim_val = 0;
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <TIM7_IRQHandler+0x5c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)	// If button steel pressed
 8002c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c0a:	4812      	ldr	r0, [pc, #72]	; (8002c54 <TIM7_IRQHandler+0x60>)
 8002c0c:	f001 f802 	bl	8003c14 <HAL_GPIO_ReadPin>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10e      	bne.n	8002c34 <TIM7_IRQHandler+0x40>
			{
				klick++;
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <TIM7_IRQHandler+0x64>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	4a0e      	ldr	r2, [pc, #56]	; (8002c58 <TIM7_IRQHandler+0x64>)
 8002c1e:	6013      	str	r3, [r2, #0]
				if(klick >= 15)										// it mean we have only 4 LEDs
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <TIM7_IRQHandler+0x64>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b0e      	cmp	r3, #14
 8002c26:	dd02      	ble.n	8002c2e <TIM7_IRQHandler+0x3a>
				{
					klick = 0;
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <TIM7_IRQHandler+0x64>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
				}
				HAL_TIM_Base_Stop_IT(&htim7);						// Stop timer (becouse counter can turn on only encoder key)
 8002c2e:	480b      	ldr	r0, [pc, #44]	; (8002c5c <TIM7_IRQHandler+0x68>)
 8002c30:	f005 fbaa 	bl	8008388 <HAL_TIM_Base_Stop_IT>
			}
			HAL_TIM_Base_Stop_IT(&htim7);
 8002c34:	4809      	ldr	r0, [pc, #36]	; (8002c5c <TIM7_IRQHandler+0x68>)
 8002c36:	f005 fba7 	bl	8008388 <HAL_TIM_Base_Stop_IT>
 8002c3a:	e004      	b.n	8002c46 <TIM7_IRQHandler+0x52>
		}
		else
		{
			tim_val++;
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <TIM7_IRQHandler+0x5c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	4a03      	ldr	r2, [pc, #12]	; (8002c50 <TIM7_IRQHandler+0x5c>)
 8002c44:	6013      	str	r3, [r2, #0]
		}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <TIM7_IRQHandler+0x68>)
 8002c48:	f005 fd01 	bl	800864e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	200000cc 	.word	0x200000cc
 8002c54:	40021000 	.word	0x40021000
 8002c58:	200000c8 	.word	0x200000c8
 8002c5c:	20004c84 	.word	0x20004c84

08002c60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <OTG_FS_IRQHandler+0x10>)
 8002c66:	f001 fa95 	bl	8004194 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200053a8 	.word	0x200053a8

08002c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c7c:	4a14      	ldr	r2, [pc, #80]	; (8002cd0 <_sbrk+0x5c>)
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <_sbrk+0x60>)
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <_sbrk+0x64>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <_sbrk+0x64>)
 8002c92:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <_sbrk+0x68>)
 8002c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <_sbrk+0x64>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d207      	bcs.n	8002cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca4:	f00d fb84 	bl	80103b0 <__errno>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	220c      	movs	r2, #12
 8002cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cb2:	e009      	b.n	8002cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <_sbrk+0x64>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <_sbrk+0x64>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <_sbrk+0x64>)
 8002cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20020000 	.word	0x20020000
 8002cd4:	00000400 	.word	0x00000400
 8002cd8:	200000d0 	.word	0x200000d0
 8002cdc:	200056c0 	.word	0x200056c0

08002ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <SystemInit+0x20>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <SystemInit+0x20>)
 8002cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	71bb      	strb	r3, [r7, #6]
 8002d12:	4613      	mov	r3, r2
 8002d14:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	db3b      	blt.n	8002d96 <draw_pixel+0x92>
 8002d1e:	79bb      	ldrb	r3, [r7, #6]
 8002d20:	2b1f      	cmp	r3, #31
 8002d22:	d838      	bhi.n	8002d96 <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 8002d28:	79bb      	ldrb	r3, [r7, #6]
 8002d2a:	08db      	lsrs	r3, r3, #3
 8002d2c:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	79bb      	ldrb	r3, [r7, #6]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	737b      	strb	r3, [r7, #13]
		if(color)
 8002d3c:	797b      	ldrb	r3, [r7, #5]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d012      	beq.n	8002d68 <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8002d42:	7bba      	ldrb	r2, [r7, #14]
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	4917      	ldr	r1, [pc, #92]	; (8002da4 <draw_pixel+0xa0>)
 8002d48:	01d2      	lsls	r2, r2, #7
 8002d4a:	440a      	add	r2, r1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	7818      	ldrb	r0, [r3, #0]
 8002d50:	7bba      	ldrb	r2, [r7, #14]
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	7b79      	ldrb	r1, [r7, #13]
 8002d56:	4301      	orrs	r1, r0
 8002d58:	b2c8      	uxtb	r0, r1
 8002d5a:	4912      	ldr	r1, [pc, #72]	; (8002da4 <draw_pixel+0xa0>)
 8002d5c:	01d2      	lsls	r2, r2, #7
 8002d5e:	440a      	add	r2, r1
 8002d60:	4413      	add	r3, r2
 8002d62:	4602      	mov	r2, r0
 8002d64:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 8002d66:	e016      	b.n	8002d96 <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 8002d68:	7bba      	ldrb	r2, [r7, #14]
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	490d      	ldr	r1, [pc, #52]	; (8002da4 <draw_pixel+0xa0>)
 8002d6e:	01d2      	lsls	r2, r2, #7
 8002d70:	440a      	add	r2, r1
 8002d72:	4413      	add	r3, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b25a      	sxtb	r2, r3
 8002d78:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	b25b      	sxtb	r3, r3
 8002d80:	4013      	ands	r3, r2
 8002d82:	b259      	sxtb	r1, r3
 8002d84:	7bba      	ldrb	r2, [r7, #14]
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	b2c8      	uxtb	r0, r1
 8002d8a:	4906      	ldr	r1, [pc, #24]	; (8002da4 <draw_pixel+0xa0>)
 8002d8c:	01d2      	lsls	r2, r2, #7
 8002d8e:	440a      	add	r2, r1
 8002d90:	4413      	add	r3, r2
 8002d92:	4602      	mov	r2, r0
 8002d94:	701a      	strb	r2, [r3, #0]
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20004d5c 	.word	0x20004d5c

08002da8 <invert_pixel>:
				draw_pixel(x*3+i,y*3+j,color);
	}
}

void invert_pixel(uint8_t x, uint8_t y)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	460a      	mov	r2, r1
 8002db2:	71fb      	strb	r3, [r7, #7]
 8002db4:	4613      	mov	r3, r2
 8002db6:	71bb      	strb	r3, [r7, #6]
	if(x<128 && y<32)
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	db24      	blt.n	8002e0a <invert_pixel+0x62>
 8002dc0:	79bb      	ldrb	r3, [r7, #6]
 8002dc2:	2b1f      	cmp	r3, #31
 8002dc4:	d821      	bhi.n	8002e0a <invert_pixel+0x62>
	{
		uint8_t pixel = 0x01;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
		gddram[y>>3][x] ^= pixel<<(y%8);
 8002dca:	79bb      	ldrb	r3, [r7, #6]
 8002dcc:	08db      	lsrs	r3, r3, #3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	4910      	ldr	r1, [pc, #64]	; (8002e18 <invert_pixel+0x70>)
 8002dd6:	01d2      	lsls	r2, r2, #7
 8002dd8:	440a      	add	r2, r1
 8002dda:	4413      	add	r3, r2
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b25a      	sxtb	r2, r3
 8002de0:	7bf9      	ldrb	r1, [r7, #15]
 8002de2:	79bb      	ldrb	r3, [r7, #6]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	b25b      	sxtb	r3, r3
 8002dee:	4053      	eors	r3, r2
 8002df0:	b259      	sxtb	r1, r3
 8002df2:	79bb      	ldrb	r3, [r7, #6]
 8002df4:	08db      	lsrs	r3, r3, #3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	b2c8      	uxtb	r0, r1
 8002dfe:	4906      	ldr	r1, [pc, #24]	; (8002e18 <invert_pixel+0x70>)
 8002e00:	01d2      	lsls	r2, r2, #7
 8002e02:	440a      	add	r2, r1
 8002e04:	4413      	add	r3, r2
 8002e06:	4602      	mov	r2, r0
 8002e08:	701a      	strb	r2, [r3, #0]
	}
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20004d5c 	.word	0x20004d5c

08002e1c <invert_rectangle>:

void invert_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4604      	mov	r4, r0
 8002e24:	4608      	mov	r0, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4623      	mov	r3, r4
 8002e2c:	71fb      	strb	r3, [r7, #7]
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71bb      	strb	r3, [r7, #6]
 8002e32:	460b      	mov	r3, r1
 8002e34:	717b      	strb	r3, [r7, #5]
 8002e36:	4613      	mov	r3, r2
 8002e38:	713b      	strb	r3, [r7, #4]
	uint8_t i,j;
	for(i=x0;i<x1;i++)
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	73fb      	strb	r3, [r7, #15]
 8002e3e:	e012      	b.n	8002e66 <invert_rectangle+0x4a>
		for(j=y0;j<y1;j++)
 8002e40:	79bb      	ldrb	r3, [r7, #6]
 8002e42:	73bb      	strb	r3, [r7, #14]
 8002e44:	e008      	b.n	8002e58 <invert_rectangle+0x3c>
			invert_pixel(i,j);
 8002e46:	7bba      	ldrb	r2, [r7, #14]
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ffab 	bl	8002da8 <invert_pixel>
		for(j=y0;j<y1;j++)
 8002e52:	7bbb      	ldrb	r3, [r7, #14]
 8002e54:	3301      	adds	r3, #1
 8002e56:	73bb      	strb	r3, [r7, #14]
 8002e58:	7bba      	ldrb	r2, [r7, #14]
 8002e5a:	793b      	ldrb	r3, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d3f2      	bcc.n	8002e46 <invert_rectangle+0x2a>
	for(i=x0;i<x1;i++)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	3301      	adds	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	797b      	ldrb	r3, [r7, #5]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d3e8      	bcc.n	8002e40 <invert_rectangle+0x24>
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd90      	pop	{r4, r7, pc}

08002e78 <clear>:

void clear(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(i=0;i<4;i++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	71fb      	strb	r3, [r7, #7]
 8002e82:	e014      	b.n	8002eae <clear+0x36>
		for(j=0;j<128;j++)
 8002e84:	2300      	movs	r3, #0
 8002e86:	71bb      	strb	r3, [r7, #6]
 8002e88:	e00a      	b.n	8002ea0 <clear+0x28>
			gddram[i][j]=0x00;
 8002e8a:	79fa      	ldrb	r2, [r7, #7]
 8002e8c:	79bb      	ldrb	r3, [r7, #6]
 8002e8e:	490d      	ldr	r1, [pc, #52]	; (8002ec4 <clear+0x4c>)
 8002e90:	01d2      	lsls	r2, r2, #7
 8002e92:	440a      	add	r2, r1
 8002e94:	4413      	add	r3, r2
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
		for(j=0;j<128;j++)
 8002e9a:	79bb      	ldrb	r3, [r7, #6]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	71bb      	strb	r3, [r7, #6]
 8002ea0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	daf0      	bge.n	8002e8a <clear+0x12>
	for(i=0;i<4;i++)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	71fb      	strb	r3, [r7, #7]
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d9e7      	bls.n	8002e84 <clear+0xc>
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20004d5c 	.word	0x20004d5c

08002ec8 <line_h>:
			break;
	}
}

void line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode)
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	71fb      	strb	r3, [r7, #7]
 8002eda:	4603      	mov	r3, r0
 8002edc:	71bb      	strb	r3, [r7, #6]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	717b      	strb	r3, [r7, #5]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	713b      	strb	r3, [r7, #4]
	if(x0>x1)
 8002ee6:	79fa      	ldrb	r2, [r7, #7]
 8002ee8:	79bb      	ldrb	r3, [r7, #6]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d905      	bls.n	8002efa <line_h+0x32>
	{
		uint8_t temp = x0;
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	757b      	strb	r3, [r7, #21]
		x0 = x1;
 8002ef2:	79bb      	ldrb	r3, [r7, #6]
 8002ef4:	71fb      	strb	r3, [r7, #7]
		x1 = temp;
 8002ef6:	7d7b      	ldrb	r3, [r7, #21]
 8002ef8:	71bb      	strb	r3, [r7, #6]
	}
	uint8_t i,j;
	switch(mode)
 8002efa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	f000 80ac 	beq.w	800305c <line_h+0x194>
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f300 80fb 	bgt.w	8003100 <line_h+0x238>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d054      	beq.n	8002fb8 <line_h+0xf0>
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	f040 80f6 	bne.w	8003100 <line_h+0x238>
	{
		case add :
			if(width%2)
 8002f14:	793b      	ldrb	r3, [r7, #4]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d027      	beq.n	8002f70 <line_h+0xa8>
			{
				uint8_t start = y0-(width-1)/2;
 8002f20:	793b      	ldrb	r3, [r7, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	0fda      	lsrs	r2, r3, #31
 8002f26:	4413      	add	r3, r2
 8002f28:	105b      	asrs	r3, r3, #1
 8002f2a:	425b      	negs	r3, r3
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	797b      	ldrb	r3, [r7, #5]
 8002f30:	4413      	add	r3, r2
 8002f32:	747b      	strb	r3, [r7, #17]
				for(i=0;i<width;i++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	75fb      	strb	r3, [r7, #23]
 8002f38:	e015      	b.n	8002f66 <line_h+0x9e>
					for(j=x0;j<=x1;j++)
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	75bb      	strb	r3, [r7, #22]
 8002f3e:	e00b      	b.n	8002f58 <line_h+0x90>
						draw_pixel(j,start+i,1);
 8002f40:	7c7a      	ldrb	r2, [r7, #17]
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	4413      	add	r3, r2
 8002f46:	b2d9      	uxtb	r1, r3
 8002f48:	7dbb      	ldrb	r3, [r7, #22]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fed9 	bl	8002d04 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8002f52:	7dbb      	ldrb	r3, [r7, #22]
 8002f54:	3301      	adds	r3, #1
 8002f56:	75bb      	strb	r3, [r7, #22]
 8002f58:	7dba      	ldrb	r2, [r7, #22]
 8002f5a:	79bb      	ldrb	r3, [r7, #6]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d9ef      	bls.n	8002f40 <line_h+0x78>
				for(i=0;i<width;i++)
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
 8002f62:	3301      	adds	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
 8002f66:	7dfa      	ldrb	r2, [r7, #23]
 8002f68:	793b      	ldrb	r3, [r7, #4]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d3e5      	bcc.n	8002f3a <line_h+0x72>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,1);
			}
			break;
 8002f6e:	e0c7      	b.n	8003100 <line_h+0x238>
				uint8_t start = y0-width/2;
 8002f70:	793b      	ldrb	r3, [r7, #4]
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	797a      	ldrb	r2, [r7, #5]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	74bb      	strb	r3, [r7, #18]
				for(i=0;i<width;i++)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	75fb      	strb	r3, [r7, #23]
 8002f80:	e015      	b.n	8002fae <line_h+0xe6>
					for(j=x0;j<=x1;j++)
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	75bb      	strb	r3, [r7, #22]
 8002f86:	e00b      	b.n	8002fa0 <line_h+0xd8>
						draw_pixel(j,start+i,1);
 8002f88:	7cba      	ldrb	r2, [r7, #18]
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	b2d9      	uxtb	r1, r3
 8002f90:	7dbb      	ldrb	r3, [r7, #22]
 8002f92:	2201      	movs	r2, #1
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff feb5 	bl	8002d04 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8002f9a:	7dbb      	ldrb	r3, [r7, #22]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	75bb      	strb	r3, [r7, #22]
 8002fa0:	7dba      	ldrb	r2, [r7, #22]
 8002fa2:	79bb      	ldrb	r3, [r7, #6]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d9ef      	bls.n	8002f88 <line_h+0xc0>
				for(i=0;i<width;i++)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	3301      	adds	r3, #1
 8002fac:	75fb      	strb	r3, [r7, #23]
 8002fae:	7dfa      	ldrb	r2, [r7, #23]
 8002fb0:	793b      	ldrb	r3, [r7, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d3e5      	bcc.n	8002f82 <line_h+0xba>
			break;
 8002fb6:	e0a3      	b.n	8003100 <line_h+0x238>

		case erase :
			if(width%2)
 8002fb8:	793b      	ldrb	r3, [r7, #4]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d027      	beq.n	8003014 <line_h+0x14c>
			{
				uint8_t start = y0-(width-1)/2;
 8002fc4:	793b      	ldrb	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	0fda      	lsrs	r2, r3, #31
 8002fca:	4413      	add	r3, r2
 8002fcc:	105b      	asrs	r3, r3, #1
 8002fce:	425b      	negs	r3, r3
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	797b      	ldrb	r3, [r7, #5]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	73fb      	strb	r3, [r7, #15]
				for(i=0;i<width;i++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	75fb      	strb	r3, [r7, #23]
 8002fdc:	e015      	b.n	800300a <line_h+0x142>
					for(j=x0;j<=x1;j++)
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	75bb      	strb	r3, [r7, #22]
 8002fe2:	e00b      	b.n	8002ffc <line_h+0x134>
						draw_pixel(j,start+i,0);
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	4413      	add	r3, r2
 8002fea:	b2d9      	uxtb	r1, r3
 8002fec:	7dbb      	ldrb	r3, [r7, #22]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fe87 	bl	8002d04 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8002ff6:	7dbb      	ldrb	r3, [r7, #22]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	75bb      	strb	r3, [r7, #22]
 8002ffc:	7dba      	ldrb	r2, [r7, #22]
 8002ffe:	79bb      	ldrb	r3, [r7, #6]
 8003000:	429a      	cmp	r2, r3
 8003002:	d9ef      	bls.n	8002fe4 <line_h+0x11c>
				for(i=0;i<width;i++)
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	3301      	adds	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
 800300a:	7dfa      	ldrb	r2, [r7, #23]
 800300c:	793b      	ldrb	r3, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d3e5      	bcc.n	8002fde <line_h+0x116>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,0);
			}
			break;
 8003012:	e075      	b.n	8003100 <line_h+0x238>
				uint8_t start = y0-width/2;
 8003014:	793b      	ldrb	r3, [r7, #4]
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	797a      	ldrb	r2, [r7, #5]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	743b      	strb	r3, [r7, #16]
				for(i=0;i<width;i++)
 8003020:	2300      	movs	r3, #0
 8003022:	75fb      	strb	r3, [r7, #23]
 8003024:	e015      	b.n	8003052 <line_h+0x18a>
					for(j=x0;j<=x1;j++)
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	75bb      	strb	r3, [r7, #22]
 800302a:	e00b      	b.n	8003044 <line_h+0x17c>
						draw_pixel(j,start+i,0);
 800302c:	7c3a      	ldrb	r2, [r7, #16]
 800302e:	7dfb      	ldrb	r3, [r7, #23]
 8003030:	4413      	add	r3, r2
 8003032:	b2d9      	uxtb	r1, r3
 8003034:	7dbb      	ldrb	r3, [r7, #22]
 8003036:	2200      	movs	r2, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fe63 	bl	8002d04 <draw_pixel>
					for(j=x0;j<=x1;j++)
 800303e:	7dbb      	ldrb	r3, [r7, #22]
 8003040:	3301      	adds	r3, #1
 8003042:	75bb      	strb	r3, [r7, #22]
 8003044:	7dba      	ldrb	r2, [r7, #22]
 8003046:	79bb      	ldrb	r3, [r7, #6]
 8003048:	429a      	cmp	r2, r3
 800304a:	d9ef      	bls.n	800302c <line_h+0x164>
				for(i=0;i<width;i++)
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	3301      	adds	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
 8003052:	7dfa      	ldrb	r2, [r7, #23]
 8003054:	793b      	ldrb	r3, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	d3e5      	bcc.n	8003026 <line_h+0x15e>
			break;
 800305a:	e051      	b.n	8003100 <line_h+0x238>

		case invert :
			if(width%2)
 800305c:	793b      	ldrb	r3, [r7, #4]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d027      	beq.n	80030b8 <line_h+0x1f0>
			{
				uint8_t start = y0-(width-1)/2;
 8003068:	793b      	ldrb	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	0fda      	lsrs	r2, r3, #31
 800306e:	4413      	add	r3, r2
 8003070:	105b      	asrs	r3, r3, #1
 8003072:	425b      	negs	r3, r3
 8003074:	b2da      	uxtb	r2, r3
 8003076:	797b      	ldrb	r3, [r7, #5]
 8003078:	4413      	add	r3, r2
 800307a:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<width;i++)
 800307c:	2300      	movs	r3, #0
 800307e:	75fb      	strb	r3, [r7, #23]
 8003080:	e015      	b.n	80030ae <line_h+0x1e6>
					for(j=x0;j<=x1;j++)
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	75bb      	strb	r3, [r7, #22]
 8003086:	e00b      	b.n	80030a0 <line_h+0x1d8>
						invert_pixel(j,start+i);
 8003088:	7cfa      	ldrb	r2, [r7, #19]
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	4413      	add	r3, r2
 800308e:	b2da      	uxtb	r2, r3
 8003090:	7dbb      	ldrb	r3, [r7, #22]
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fe87 	bl	8002da8 <invert_pixel>
					for(j=x0;j<=x1;j++)
 800309a:	7dbb      	ldrb	r3, [r7, #22]
 800309c:	3301      	adds	r3, #1
 800309e:	75bb      	strb	r3, [r7, #22]
 80030a0:	7dba      	ldrb	r2, [r7, #22]
 80030a2:	79bb      	ldrb	r3, [r7, #6]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d9ef      	bls.n	8003088 <line_h+0x1c0>
				for(i=0;i<width;i++)
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	3301      	adds	r3, #1
 80030ac:	75fb      	strb	r3, [r7, #23]
 80030ae:	7dfa      	ldrb	r2, [r7, #23]
 80030b0:	793b      	ldrb	r3, [r7, #4]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d3e5      	bcc.n	8003082 <line_h+0x1ba>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						invert_pixel(j,start+i);
			}
			break;
 80030b6:	e022      	b.n	80030fe <line_h+0x236>
				uint8_t start = y0-width/2;
 80030b8:	793b      	ldrb	r3, [r7, #4]
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	797a      	ldrb	r2, [r7, #5]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	753b      	strb	r3, [r7, #20]
				for(i=0;i<width;i++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	75fb      	strb	r3, [r7, #23]
 80030c8:	e015      	b.n	80030f6 <line_h+0x22e>
					for(j=x0;j<=x1;j++)
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	75bb      	strb	r3, [r7, #22]
 80030ce:	e00b      	b.n	80030e8 <line_h+0x220>
						invert_pixel(j,start+i);
 80030d0:	7d3a      	ldrb	r2, [r7, #20]
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
 80030d4:	4413      	add	r3, r2
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	7dbb      	ldrb	r3, [r7, #22]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fe63 	bl	8002da8 <invert_pixel>
					for(j=x0;j<=x1;j++)
 80030e2:	7dbb      	ldrb	r3, [r7, #22]
 80030e4:	3301      	adds	r3, #1
 80030e6:	75bb      	strb	r3, [r7, #22]
 80030e8:	7dba      	ldrb	r2, [r7, #22]
 80030ea:	79bb      	ldrb	r3, [r7, #6]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d9ef      	bls.n	80030d0 <line_h+0x208>
				for(i=0;i<width;i++)
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	3301      	adds	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
 80030f6:	7dfa      	ldrb	r2, [r7, #23]
 80030f8:	793b      	ldrb	r3, [r7, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d3e5      	bcc.n	80030ca <line_h+0x202>
			break;
 80030fe:	bf00      	nop

	}
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	bd90      	pop	{r4, r7, pc}

08003108 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	4604      	mov	r4, r0
 8003110:	4608      	mov	r0, r1
 8003112:	4611      	mov	r1, r2
 8003114:	461a      	mov	r2, r3
 8003116:	4623      	mov	r3, r4
 8003118:	71fb      	strb	r3, [r7, #7]
 800311a:	4603      	mov	r3, r0
 800311c:	71bb      	strb	r3, [r7, #6]
 800311e:	460b      	mov	r3, r1
 8003120:	717b      	strb	r3, [r7, #5]
 8003122:	4613      	mov	r3, r2
 8003124:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 800312a:	2300      	movs	r3, #0
 800312c:	75fb      	strb	r3, [r7, #23]
 800312e:	e04d      	b.n	80031cc <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 8003130:	2300      	movs	r3, #0
 8003132:	75bb      	strb	r3, [r7, #22]
 8003134:	e042      	b.n	80031bc <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	08db      	lsrs	r3, r3, #3
 800313a:	b2da      	uxtb	r2, r3
 800313c:	7dbb      	ldrb	r3, [r7, #22]
 800313e:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003142:	fb11 f303 	smulbb	r3, r1, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	4413      	add	r3, r2
 800314a:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	43db      	mvns	r3, r3
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	2201      	movs	r2, #1
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 8003166:	7bba      	ldrb	r2, [r7, #14]
 8003168:	7b7b      	ldrb	r3, [r7, #13]
 800316a:	4013      	ands	r3, r2
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00f      	beq.n	8003192 <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 8003172:	79fa      	ldrb	r2, [r7, #7]
 8003174:	797b      	ldrb	r3, [r7, #5]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	b2da      	uxtb	r2, r3
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	4413      	add	r3, r2
 800317e:	b2d8      	uxtb	r0, r3
 8003180:	7dba      	ldrb	r2, [r7, #22]
 8003182:	79bb      	ldrb	r3, [r7, #6]
 8003184:	4413      	add	r3, r2
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2201      	movs	r2, #1
 800318a:	4619      	mov	r1, r3
 800318c:	f7ff fdba 	bl	8002d04 <draw_pixel>
 8003190:	e00e      	b.n	80031b0 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 8003192:	79fa      	ldrb	r2, [r7, #7]
 8003194:	797b      	ldrb	r3, [r7, #5]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	b2da      	uxtb	r2, r3
 800319a:	7dfb      	ldrb	r3, [r7, #23]
 800319c:	4413      	add	r3, r2
 800319e:	b2d8      	uxtb	r0, r3
 80031a0:	7dba      	ldrb	r2, [r7, #22]
 80031a2:	79bb      	ldrb	r3, [r7, #6]
 80031a4:	4413      	add	r3, r2
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2200      	movs	r2, #0
 80031aa:	4619      	mov	r1, r3
 80031ac:	f7ff fdaa 	bl	8002d04 <draw_pixel>
		for (y=0; y<height; y++)
 80031b0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	75bb      	strb	r3, [r7, #22]
 80031bc:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80031c0:	793b      	ldrb	r3, [r7, #4]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	dbb7      	blt.n	8003136 <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
 80031c8:	3301      	adds	r3, #1
 80031ca:	75fb      	strb	r3, [r7, #23]
 80031cc:	7dfa      	ldrb	r2, [r7, #23]
 80031ce:	797b      	ldrb	r3, [r7, #5]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d3ad      	bcc.n	8003130 <graphics_Glyph+0x28>
		}
	}
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd90      	pop	{r4, r7, pc}
	...

080031e0 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	4603      	mov	r3, r0
 80031ea:	71fb      	strb	r3, [r7, #7]
 80031ec:	460b      	mov	r3, r1
 80031ee:	71bb      	strb	r3, [r7, #6]
 80031f0:	4613      	mov	r3, r2
 80031f2:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 80031f8:	e081      	b.n	80032fe <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 8003200:	797a      	ldrb	r2, [r7, #5]
 8003202:	4944      	ldr	r1, [pc, #272]	; (8003314 <graphics_text+0x134>)
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	3310      	adds	r3, #16
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	7dba      	ldrb	r2, [r7, #22]
 8003214:	429a      	cmp	r2, r3
 8003216:	d30b      	bcc.n	8003230 <graphics_text+0x50>
 8003218:	797a      	ldrb	r2, [r7, #5]
 800321a:	493e      	ldr	r1, [pc, #248]	; (8003314 <graphics_text+0x134>)
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	3311      	adds	r3, #17
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	7dba      	ldrb	r2, [r7, #22]
 800322c:	429a      	cmp	r2, r3
 800322e:	d909      	bls.n	8003244 <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 8003230:	797a      	ldrb	r2, [r7, #5]
 8003232:	4938      	ldr	r1, [pc, #224]	; (8003314 <graphics_text+0x134>)
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	3312      	adds	r3, #18
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 8003244:	797a      	ldrb	r2, [r7, #5]
 8003246:	4933      	ldr	r1, [pc, #204]	; (8003314 <graphics_text+0x134>)
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3310      	adds	r3, #16
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	7dba      	ldrb	r2, [r7, #22]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 800325c:	797a      	ldrb	r2, [r7, #5]
 800325e:	492d      	ldr	r1, [pc, #180]	; (8003314 <graphics_text+0x134>)
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	3308      	adds	r3, #8
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8003270:	7d7b      	ldrb	r3, [r7, #21]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10c      	bne.n	8003290 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 8003276:	797a      	ldrb	r2, [r7, #5]
 8003278:	4926      	ldr	r1, [pc, #152]	; (8003314 <graphics_text+0x134>)
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	330c      	adds	r3, #12
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	7dbb      	ldrb	r3, [r7, #22]
 800328a:	4413      	add	r3, r2
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8003290:	797a      	ldrb	r2, [r7, #5]
 8003292:	4920      	ldr	r1, [pc, #128]	; (8003314 <graphics_text+0x134>)
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	3301      	adds	r3, #1
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 80032a4:	797a      	ldrb	r2, [r7, #5]
 80032a6:	491b      	ldr	r1, [pc, #108]	; (8003314 <graphics_text+0x134>)
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 80032b6:	797a      	ldrb	r2, [r7, #5]
 80032b8:	4916      	ldr	r1, [pc, #88]	; (8003314 <graphics_text+0x134>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	3304      	adds	r3, #4
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	7dbb      	ldrb	r3, [r7, #22]
 80032ca:	7cf9      	ldrb	r1, [r7, #19]
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	7d39      	ldrb	r1, [r7, #20]
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]


		x+=width;
 80032da:	7dfa      	ldrb	r2, [r7, #23]
 80032dc:	7d7b      	ldrb	r3, [r7, #21]
 80032de:	4413      	add	r3, r2
 80032e0:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 80032e2:	7d3c      	ldrb	r4, [r7, #20]
 80032e4:	7d7a      	ldrb	r2, [r7, #21]
 80032e6:	79b9      	ldrb	r1, [r7, #6]
 80032e8:	7df8      	ldrb	r0, [r7, #23]
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	4623      	mov	r3, r4
 80032f4:	f7ff ff08 	bl	8003108 <graphics_Glyph>
		str++;								/* point to next character in string */
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f47f af79 	bne.w	80031fa <graphics_text+0x1a>
	}

}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}
 8003312:	bf00      	nop
 8003314:	08011070 	.word	0x08011070

08003318 <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af02      	add	r7, sp, #8
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 8003322:	2300      	movs	r3, #0
 8003324:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 800332a:	f107 020c 	add.w	r2, r7, #12
 800332e:	2332      	movs	r3, #50	; 0x32
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	2302      	movs	r3, #2
 8003334:	2178      	movs	r1, #120	; 0x78
 8003336:	4803      	ldr	r0, [pc, #12]	; (8003344 <ssd1306_command+0x2c>)
 8003338:	f002 fb76 	bl	8005a28 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20004ab4 	.word	0x20004ab4

08003348 <oled_update>:

void oled_update(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 800334e:	2021      	movs	r0, #33	; 0x21
 8003350:	f7ff ffe2 	bl	8003318 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 8003354:	2000      	movs	r0, #0
 8003356:	f7ff ffdf 	bl	8003318 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 800335a:	207f      	movs	r0, #127	; 0x7f
 800335c:	f7ff ffdc 	bl	8003318 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 8003360:	2022      	movs	r0, #34	; 0x22
 8003362:	f7ff ffd9 	bl	8003318 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 8003366:	2000      	movs	r0, #0
 8003368:	f7ff ffd6 	bl	8003318 <ssd1306_command>
  ssd1306_command(3); // Page end address
 800336c:	2003      	movs	r0, #3
 800336e:	f7ff ffd3 	bl	8003318 <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 8003372:	2340      	movs	r3, #64	; 0x40
 8003374:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 8003376:	2300      	movs	r3, #0
 8003378:	82fb      	strh	r3, [r7, #22]
 800337a:	e02d      	b.n	80033d8 <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 800337c:	2300      	movs	r3, #0
 800337e:	757b      	strb	r3, [r7, #21]
 8003380:	e024      	b.n	80033cc <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 8003382:	2301      	movs	r3, #1
 8003384:	753b      	strb	r3, [r7, #20]
 8003386:	e012      	b.n	80033ae <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8003388:	8af9      	ldrh	r1, [r7, #22]
 800338a:	7d7a      	ldrb	r2, [r7, #21]
 800338c:	7d3b      	ldrb	r3, [r7, #20]
 800338e:	4413      	add	r3, r2
 8003390:	1e5a      	subs	r2, r3, #1
 8003392:	7d3b      	ldrb	r3, [r7, #20]
 8003394:	4814      	ldr	r0, [pc, #80]	; (80033e8 <oled_update+0xa0>)
 8003396:	01c9      	lsls	r1, r1, #7
 8003398:	4401      	add	r1, r0
 800339a:	440a      	add	r2, r1
 800339c:	7812      	ldrb	r2, [r2, #0]
 800339e:	f107 0118 	add.w	r1, r7, #24
 80033a2:	440b      	add	r3, r1
 80033a4:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 80033a8:	7d3b      	ldrb	r3, [r7, #20]
 80033aa:	3301      	adds	r3, #1
 80033ac:	753b      	strb	r3, [r7, #20]
 80033ae:	7d3b      	ldrb	r3, [r7, #20]
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d9e9      	bls.n	8003388 <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 80033b4:	463a      	mov	r2, r7
 80033b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	2311      	movs	r3, #17
 80033be:	2178      	movs	r1, #120	; 0x78
 80033c0:	480a      	ldr	r0, [pc, #40]	; (80033ec <oled_update+0xa4>)
 80033c2:	f002 fb31 	bl	8005a28 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 80033c6:	7d7b      	ldrb	r3, [r7, #21]
 80033c8:	3310      	adds	r3, #16
 80033ca:	757b      	strb	r3, [r7, #21]
 80033cc:	7d7b      	ldrb	r3, [r7, #21]
 80033ce:	2b7e      	cmp	r3, #126	; 0x7e
 80033d0:	d9d7      	bls.n	8003382 <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 80033d2:	8afb      	ldrh	r3, [r7, #22]
 80033d4:	3301      	adds	r3, #1
 80033d6:	82fb      	strh	r3, [r7, #22]
 80033d8:	8afb      	ldrh	r3, [r7, #22]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d9ce      	bls.n	800337c <oled_update+0x34>
		}
	}

}
 80033de:	bf00      	nop
 80033e0:	bf00      	nop
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20004d5c 	.word	0x20004d5c
 80033ec:	20004ab4 	.word	0x20004ab4

080033f0 <oled_init>:

void oled_init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 80033f6:	20ae      	movs	r0, #174	; 0xae
 80033f8:	f7ff ff8e 	bl	8003318 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 80033fc:	20d5      	movs	r0, #213	; 0xd5
 80033fe:	f7ff ff8b 	bl	8003318 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 8003402:	2080      	movs	r0, #128	; 0x80
 8003404:	f7ff ff88 	bl	8003318 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8003408:	20a8      	movs	r0, #168	; 0xa8
 800340a:	f7ff ff85 	bl	8003318 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 800340e:	201f      	movs	r0, #31
 8003410:	f7ff ff82 	bl	8003318 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8003414:	20d3      	movs	r0, #211	; 0xd3
 8003416:	f7ff ff7f 	bl	8003318 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 800341a:	2000      	movs	r0, #0
 800341c:	f7ff ff7c 	bl	8003318 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8003420:	2040      	movs	r0, #64	; 0x40
 8003422:	f7ff ff79 	bl	8003318 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 8003426:	208d      	movs	r0, #141	; 0x8d
 8003428:	f7ff ff76 	bl	8003318 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 800342c:	2014      	movs	r0, #20
 800342e:	f7ff ff73 	bl	8003318 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8003432:	2020      	movs	r0, #32
 8003434:	f7ff ff70 	bl	8003318 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8003438:	2000      	movs	r0, #0
 800343a:	f7ff ff6d 	bl	8003318 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 800343e:	20a1      	movs	r0, #161	; 0xa1
 8003440:	f7ff ff6a 	bl	8003318 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 8003444:	20c8      	movs	r0, #200	; 0xc8
 8003446:	f7ff ff67 	bl	8003318 <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 800344a:	20da      	movs	r0, #218	; 0xda
 800344c:	f7ff ff64 	bl	8003318 <ssd1306_command>
  ssd1306_command(0x02);
 8003450:	2002      	movs	r0, #2
 8003452:	f7ff ff61 	bl	8003318 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 8003456:	2081      	movs	r0, #129	; 0x81
 8003458:	f7ff ff5e 	bl	8003318 <ssd1306_command>
  ssd1306_command(0x8F);
 800345c:	208f      	movs	r0, #143	; 0x8f
 800345e:	f7ff ff5b 	bl	8003318 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8003462:	20d9      	movs	r0, #217	; 0xd9
 8003464:	f7ff ff58 	bl	8003318 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 8003468:	20f1      	movs	r0, #241	; 0xf1
 800346a:	f7ff ff55 	bl	8003318 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 800346e:	20db      	movs	r0, #219	; 0xdb
 8003470:	f7ff ff52 	bl	8003318 <ssd1306_command>
  ssd1306_command(0x40);
 8003474:	2040      	movs	r0, #64	; 0x40
 8003476:	f7ff ff4f 	bl	8003318 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 800347a:	20a4      	movs	r0, #164	; 0xa4
 800347c:	f7ff ff4c 	bl	8003318 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8003480:	20a6      	movs	r0, #166	; 0xa6
 8003482:	f7ff ff49 	bl	8003318 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 8003486:	202e      	movs	r0, #46	; 0x2e
 8003488:	f7ff ff46 	bl	8003318 <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 800348c:	20af      	movs	r0, #175	; 0xaf
 800348e:	f7ff ff43 	bl	8003318 <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	e013      	b.n	80034c0 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8003498:	2300      	movs	r3, #0
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	e00a      	b.n	80034b4 <oled_init+0xc4>
			gddram[i][j] = 0x00;
 800349e:	4a0c      	ldr	r2, [pc, #48]	; (80034d0 <oled_init+0xe0>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	01db      	lsls	r3, r3, #7
 80034a4:	441a      	add	r2, r3
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	4413      	add	r3, r2
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b7f      	cmp	r3, #127	; 0x7f
 80034b8:	ddf1      	ble.n	800349e <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3301      	adds	r3, #1
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	dde8      	ble.n	8003498 <oled_init+0xa8>
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20004d5c 	.word	0x20004d5c

080034d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800350c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034d8:	480d      	ldr	r0, [pc, #52]	; (8003510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034da:	490e      	ldr	r1, [pc, #56]	; (8003514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034dc:	4a0e      	ldr	r2, [pc, #56]	; (8003518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e0:	e002      	b.n	80034e8 <LoopCopyDataInit>

080034e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034e6:	3304      	adds	r3, #4

080034e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034ec:	d3f9      	bcc.n	80034e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ee:	4a0b      	ldr	r2, [pc, #44]	; (800351c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034f0:	4c0b      	ldr	r4, [pc, #44]	; (8003520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f4:	e001      	b.n	80034fa <LoopFillZerobss>

080034f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f8:	3204      	adds	r2, #4

080034fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034fc:	d3fb      	bcc.n	80034f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034fe:	f7ff fbef 	bl	8002ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003502:	f00c ff5b 	bl	80103bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003506:	f7fd fb53 	bl	8000bb0 <main>
  bx  lr    
 800350a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800350c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003514:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8003518:	0801357c 	.word	0x0801357c
  ldr r2, =_sbss
 800351c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8003520:	200056bc 	.word	0x200056bc

08003524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <ADC_IRQHandler>
	...

08003528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800352c:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_Init+0x40>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0d      	ldr	r2, [pc, #52]	; (8003568 <HAL_Init+0x40>)
 8003532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_Init+0x40>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_Init+0x40>)
 800353e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <HAL_Init+0x40>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a07      	ldr	r2, [pc, #28]	; (8003568 <HAL_Init+0x40>)
 800354a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003550:	2003      	movs	r0, #3
 8003552:	f000 f8fc 	bl	800374e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003556:	200f      	movs	r0, #15
 8003558:	f7ff fab0 	bl	8002abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800355c:	f7ff f828 	bl	80025b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023c00 	.word	0x40023c00

0800356c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_IncTick+0x20>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_IncTick+0x24>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4413      	add	r3, r2
 800357c:	4a04      	ldr	r2, [pc, #16]	; (8003590 <HAL_IncTick+0x24>)
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000008 	.word	0x20000008
 8003590:	20004f5c 	.word	0x20004f5c

08003594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return uwTick;
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_GetTick+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20004f5c 	.word	0x20004f5c

080035ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff ffee 	bl	8003594 <HAL_GetTick>
 80035b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035c4:	d005      	beq.n	80035d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_Delay+0x44>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035d2:	bf00      	nop
 80035d4:	f7ff ffde 	bl	8003594 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d8f7      	bhi.n	80035d4 <HAL_Delay+0x28>
  {
  }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000008 	.word	0x20000008

080035f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003610:	4013      	ands	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800361c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	60d3      	str	r3, [r2, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <__NVIC_GetPriorityGrouping+0x18>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	f003 0307 	and.w	r3, r3, #7
}
 800364a:	4618      	mov	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db0b      	blt.n	8003682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4907      	ldr	r1, [pc, #28]	; (8003690 <__NVIC_EnableIRQ+0x38>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2001      	movs	r0, #1
 800367a:	fa00 f202 	lsl.w	r2, r0, r2
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	e000e100 	.word	0xe000e100

08003694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	6039      	str	r1, [r7, #0]
 800369e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	db0a      	blt.n	80036be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	490c      	ldr	r1, [pc, #48]	; (80036e0 <__NVIC_SetPriority+0x4c>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	0112      	lsls	r2, r2, #4
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	440b      	add	r3, r1
 80036b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036bc:	e00a      	b.n	80036d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4908      	ldr	r1, [pc, #32]	; (80036e4 <__NVIC_SetPriority+0x50>)
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	3b04      	subs	r3, #4
 80036cc:	0112      	lsls	r2, r2, #4
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	440b      	add	r3, r1
 80036d2:	761a      	strb	r2, [r3, #24]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000e100 	.word	0xe000e100
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f1c3 0307 	rsb	r3, r3, #7
 8003702:	2b04      	cmp	r3, #4
 8003704:	bf28      	it	cs
 8003706:	2304      	movcs	r3, #4
 8003708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3304      	adds	r3, #4
 800370e:	2b06      	cmp	r3, #6
 8003710:	d902      	bls.n	8003718 <NVIC_EncodePriority+0x30>
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3b03      	subs	r3, #3
 8003716:	e000      	b.n	800371a <NVIC_EncodePriority+0x32>
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43da      	mvns	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	401a      	ands	r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	43d9      	mvns	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	4313      	orrs	r3, r2
         );
}
 8003742:	4618      	mov	r0, r3
 8003744:	3724      	adds	r7, #36	; 0x24
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ff4c 	bl	80035f4 <__NVIC_SetPriorityGrouping>
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003776:	f7ff ff61 	bl	800363c <__NVIC_GetPriorityGrouping>
 800377a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	6978      	ldr	r0, [r7, #20]
 8003782:	f7ff ffb1 	bl	80036e8 <NVIC_EncodePriority>
 8003786:	4602      	mov	r2, r0
 8003788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff ff80 	bl	8003694 <__NVIC_SetPriority>
}
 8003794:	bf00      	nop
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff ff54 	bl	8003658 <__NVIC_EnableIRQ>
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037c6:	f7ff fee5 	bl	8003594 <HAL_GetTick>
 80037ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d008      	beq.n	80037ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e052      	b.n	8003890 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0216 	bic.w	r2, r2, #22
 80037f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003808:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d103      	bne.n	800381a <HAL_DMA_Abort+0x62>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0208 	bic.w	r2, r2, #8
 8003828:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800383a:	e013      	b.n	8003864 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800383c:	f7ff feaa 	bl	8003594 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b05      	cmp	r3, #5
 8003848:	d90c      	bls.n	8003864 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2203      	movs	r2, #3
 8003854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e015      	b.n	8003890 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e4      	bne.n	800383c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	223f      	movs	r2, #63	; 0x3f
 8003878:	409a      	lsls	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d004      	beq.n	80038b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00c      	b.n	80038d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2205      	movs	r2, #5
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	e16b      	b.n	8003bd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038f8:	2201      	movs	r2, #1
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	429a      	cmp	r2, r3
 8003912:	f040 815a 	bne.w	8003bca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d005      	beq.n	800392e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800392a:	2b02      	cmp	r3, #2
 800392c:	d130      	bne.n	8003990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	2203      	movs	r2, #3
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4313      	orrs	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003964:	2201      	movs	r2, #1
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 0201 	and.w	r2, r3, #1
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b03      	cmp	r3, #3
 800399a:	d017      	beq.n	80039cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	2203      	movs	r2, #3
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d123      	bne.n	8003a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	08da      	lsrs	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3208      	adds	r2, #8
 80039e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	220f      	movs	r2, #15
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	08da      	lsrs	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3208      	adds	r2, #8
 8003a1a:	69b9      	ldr	r1, [r7, #24]
 8003a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0203 	and.w	r2, r3, #3
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80b4 	beq.w	8003bca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4b60      	ldr	r3, [pc, #384]	; (8003be8 <HAL_GPIO_Init+0x30c>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	4a5f      	ldr	r2, [pc, #380]	; (8003be8 <HAL_GPIO_Init+0x30c>)
 8003a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a70:	6453      	str	r3, [r2, #68]	; 0x44
 8003a72:	4b5d      	ldr	r3, [pc, #372]	; (8003be8 <HAL_GPIO_Init+0x30c>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a7e:	4a5b      	ldr	r2, [pc, #364]	; (8003bec <HAL_GPIO_Init+0x310>)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	3302      	adds	r3, #2
 8003a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	220f      	movs	r2, #15
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a52      	ldr	r2, [pc, #328]	; (8003bf0 <HAL_GPIO_Init+0x314>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d02b      	beq.n	8003b02 <HAL_GPIO_Init+0x226>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a51      	ldr	r2, [pc, #324]	; (8003bf4 <HAL_GPIO_Init+0x318>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d025      	beq.n	8003afe <HAL_GPIO_Init+0x222>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a50      	ldr	r2, [pc, #320]	; (8003bf8 <HAL_GPIO_Init+0x31c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01f      	beq.n	8003afa <HAL_GPIO_Init+0x21e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a4f      	ldr	r2, [pc, #316]	; (8003bfc <HAL_GPIO_Init+0x320>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d019      	beq.n	8003af6 <HAL_GPIO_Init+0x21a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a4e      	ldr	r2, [pc, #312]	; (8003c00 <HAL_GPIO_Init+0x324>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_GPIO_Init+0x216>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4d      	ldr	r2, [pc, #308]	; (8003c04 <HAL_GPIO_Init+0x328>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00d      	beq.n	8003aee <HAL_GPIO_Init+0x212>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4c      	ldr	r2, [pc, #304]	; (8003c08 <HAL_GPIO_Init+0x32c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <HAL_GPIO_Init+0x20e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4b      	ldr	r2, [pc, #300]	; (8003c0c <HAL_GPIO_Init+0x330>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_GPIO_Init+0x20a>
 8003ae2:	2307      	movs	r3, #7
 8003ae4:	e00e      	b.n	8003b04 <HAL_GPIO_Init+0x228>
 8003ae6:	2308      	movs	r3, #8
 8003ae8:	e00c      	b.n	8003b04 <HAL_GPIO_Init+0x228>
 8003aea:	2306      	movs	r3, #6
 8003aec:	e00a      	b.n	8003b04 <HAL_GPIO_Init+0x228>
 8003aee:	2305      	movs	r3, #5
 8003af0:	e008      	b.n	8003b04 <HAL_GPIO_Init+0x228>
 8003af2:	2304      	movs	r3, #4
 8003af4:	e006      	b.n	8003b04 <HAL_GPIO_Init+0x228>
 8003af6:	2303      	movs	r3, #3
 8003af8:	e004      	b.n	8003b04 <HAL_GPIO_Init+0x228>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e002      	b.n	8003b04 <HAL_GPIO_Init+0x228>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_GPIO_Init+0x228>
 8003b02:	2300      	movs	r3, #0
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	f002 0203 	and.w	r2, r2, #3
 8003b0a:	0092      	lsls	r2, r2, #2
 8003b0c:	4093      	lsls	r3, r2
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b14:	4935      	ldr	r1, [pc, #212]	; (8003bec <HAL_GPIO_Init+0x310>)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b22:	4b3b      	ldr	r3, [pc, #236]	; (8003c10 <HAL_GPIO_Init+0x334>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b46:	4a32      	ldr	r2, [pc, #200]	; (8003c10 <HAL_GPIO_Init+0x334>)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b4c:	4b30      	ldr	r3, [pc, #192]	; (8003c10 <HAL_GPIO_Init+0x334>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b70:	4a27      	ldr	r2, [pc, #156]	; (8003c10 <HAL_GPIO_Init+0x334>)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b76:	4b26      	ldr	r3, [pc, #152]	; (8003c10 <HAL_GPIO_Init+0x334>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b9a:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <HAL_GPIO_Init+0x334>)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <HAL_GPIO_Init+0x334>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bc4:	4a12      	ldr	r2, [pc, #72]	; (8003c10 <HAL_GPIO_Init+0x334>)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b0f      	cmp	r3, #15
 8003bd4:	f67f ae90 	bls.w	80038f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3724      	adds	r7, #36	; 0x24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40013800 	.word	0x40013800
 8003bf0:	40020000 	.word	0x40020000
 8003bf4:	40020400 	.word	0x40020400
 8003bf8:	40020800 	.word	0x40020800
 8003bfc:	40020c00 	.word	0x40020c00
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40021400 	.word	0x40021400
 8003c08:	40021800 	.word	0x40021800
 8003c0c:	40021c00 	.word	0x40021c00
 8003c10:	40013c00 	.word	0x40013c00

08003c14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	887b      	ldrh	r3, [r7, #2]
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
 8003c30:	e001      	b.n	8003c36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	807b      	strh	r3, [r7, #2]
 8003c50:	4613      	mov	r3, r2
 8003c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c54:	787b      	ldrb	r3, [r7, #1]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c60:	e003      	b.n	8003c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	041a      	lsls	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	619a      	str	r2, [r3, #24]
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c82:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c8e:	4a05      	ldr	r2, [pc, #20]	; (8003ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 f806 	bl	8003ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40013c00 	.word	0x40013c00

08003ca8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc0:	b08f      	sub	sp, #60	; 0x3c
 8003cc2:	af0a      	add	r7, sp, #40	; 0x28
 8003cc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e054      	b.n	8003d7a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f00c f8b2 	bl	800fe54 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f005 fe5e 	bl	80099d0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	687e      	ldr	r6, [r7, #4]
 8003d1c:	466d      	mov	r5, sp
 8003d1e:	f106 0410 	add.w	r4, r6, #16
 8003d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d32:	1d33      	adds	r3, r6, #4
 8003d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d36:	6838      	ldr	r0, [r7, #0]
 8003d38:	f005 fdd8 	bl	80098ec <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2101      	movs	r1, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f005 fe55 	bl	80099f2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	687e      	ldr	r6, [r7, #4]
 8003d50:	466d      	mov	r5, sp
 8003d52:	f106 0410 	add.w	r4, r6, #16
 8003d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d62:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d66:	1d33      	adds	r3, r6, #4
 8003d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d6a:	6838      	ldr	r0, [r7, #0]
 8003d6c:	f005 ffbc 	bl	8009ce8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d82 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003d82:	b590      	push	{r4, r7, lr}
 8003d84:	b089      	sub	sp, #36	; 0x24
 8003d86:	af04      	add	r7, sp, #16
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	4608      	mov	r0, r1
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4603      	mov	r3, r0
 8003d92:	70fb      	strb	r3, [r7, #3]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70bb      	strb	r3, [r7, #2]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_HCD_HC_Init+0x28>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e076      	b.n	8003e98 <HAL_HCD_HC_Init+0x116>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	212c      	movs	r1, #44	; 0x2c
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	333d      	adds	r3, #61	; 0x3d
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	212c      	movs	r1, #44	; 0x2c
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	3338      	adds	r3, #56	; 0x38
 8003dd2:	787a      	ldrb	r2, [r7, #1]
 8003dd4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	212c      	movs	r1, #44	; 0x2c
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	4413      	add	r3, r2
 8003de2:	3340      	adds	r3, #64	; 0x40
 8003de4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003de6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	3339      	adds	r3, #57	; 0x39
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	212c      	movs	r1, #44	; 0x2c
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	333f      	adds	r3, #63	; 0x3f
 8003e08:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003e0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	78ba      	ldrb	r2, [r7, #2]
 8003e12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e16:	b2d0      	uxtb	r0, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	212c      	movs	r1, #44	; 0x2c
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	4413      	add	r3, r2
 8003e22:	333a      	adds	r3, #58	; 0x3a
 8003e24:	4602      	mov	r2, r0
 8003e26:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003e28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	da09      	bge.n	8003e44 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	212c      	movs	r1, #44	; 0x2c
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	333b      	adds	r3, #59	; 0x3b
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e008      	b.n	8003e56 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	212c      	movs	r1, #44	; 0x2c
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	333b      	adds	r3, #59	; 0x3b
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	212c      	movs	r1, #44	; 0x2c
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	4413      	add	r3, r2
 8003e62:	333c      	adds	r3, #60	; 0x3c
 8003e64:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003e68:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	787c      	ldrb	r4, [r7, #1]
 8003e70:	78ba      	ldrb	r2, [r7, #2]
 8003e72:	78f9      	ldrb	r1, [r7, #3]
 8003e74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e76:	9302      	str	r3, [sp, #8]
 8003e78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	4623      	mov	r3, r4
 8003e86:	f006 f8a9 	bl	8009fdc <USB_HC_Init>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_HCD_HC_Halt+0x1e>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e00f      	b.n	8003ede <HAL_HCD_HC_Halt+0x3e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f006 fae5 	bl	800a49e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	70fb      	strb	r3, [r7, #3]
 8003efa:	460b      	mov	r3, r1
 8003efc:	70bb      	strb	r3, [r7, #2]
 8003efe:	4613      	mov	r3, r2
 8003f00:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	333b      	adds	r3, #59	; 0x3b
 8003f10:	78ba      	ldrb	r2, [r7, #2]
 8003f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	333f      	adds	r3, #63	; 0x3f
 8003f22:	787a      	ldrb	r2, [r7, #1]
 8003f24:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003f26:	7c3b      	ldrb	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d112      	bne.n	8003f52 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	212c      	movs	r1, #44	; 0x2c
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	3342      	adds	r3, #66	; 0x42
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	212c      	movs	r1, #44	; 0x2c
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	4413      	add	r3, r2
 8003f4a:	333d      	adds	r3, #61	; 0x3d
 8003f4c:	7f3a      	ldrb	r2, [r7, #28]
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e008      	b.n	8003f64 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	212c      	movs	r1, #44	; 0x2c
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3342      	adds	r3, #66	; 0x42
 8003f60:	2202      	movs	r2, #2
 8003f62:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003f64:	787b      	ldrb	r3, [r7, #1]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	f200 80c6 	bhi.w	80040f8 <HAL_HCD_HC_SubmitRequest+0x210>
 8003f6c:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	080040e5 	.word	0x080040e5
 8003f7c:	08003fe9 	.word	0x08003fe9
 8003f80:	08004067 	.word	0x08004067
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003f84:	7c3b      	ldrb	r3, [r7, #16]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	f040 80b8 	bne.w	80040fc <HAL_HCD_HC_SubmitRequest+0x214>
 8003f8c:	78bb      	ldrb	r3, [r7, #2]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 80b4 	bne.w	80040fc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003f94:	8b3b      	ldrh	r3, [r7, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d108      	bne.n	8003fac <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	212c      	movs	r1, #44	; 0x2c
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3355      	adds	r3, #85	; 0x55
 8003fa8:	2201      	movs	r2, #1
 8003faa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	212c      	movs	r1, #44	; 0x2c
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3355      	adds	r3, #85	; 0x55
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	3342      	adds	r3, #66	; 0x42
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003fd2:	e093      	b.n	80040fc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	3342      	adds	r3, #66	; 0x42
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	701a      	strb	r2, [r3, #0]
      break;
 8003fe6:	e089      	b.n	80040fc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003fe8:	78bb      	ldrb	r3, [r7, #2]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d11d      	bne.n	800402a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	212c      	movs	r1, #44	; 0x2c
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3355      	adds	r3, #85	; 0x55
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	212c      	movs	r1, #44	; 0x2c
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	4413      	add	r3, r2
 800400e:	3342      	adds	r3, #66	; 0x42
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004014:	e073      	b.n	80040fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	212c      	movs	r1, #44	; 0x2c
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	3342      	adds	r3, #66	; 0x42
 8004024:	2202      	movs	r2, #2
 8004026:	701a      	strb	r2, [r3, #0]
      break;
 8004028:	e069      	b.n	80040fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	212c      	movs	r1, #44	; 0x2c
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	3354      	adds	r3, #84	; 0x54
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	212c      	movs	r1, #44	; 0x2c
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	3342      	adds	r3, #66	; 0x42
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
      break;
 8004050:	e055      	b.n	80040fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	212c      	movs	r1, #44	; 0x2c
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	4413      	add	r3, r2
 800405e:	3342      	adds	r3, #66	; 0x42
 8004060:	2202      	movs	r2, #2
 8004062:	701a      	strb	r2, [r3, #0]
      break;
 8004064:	e04b      	b.n	80040fe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004066:	78bb      	ldrb	r3, [r7, #2]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d11d      	bne.n	80040a8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	3355      	adds	r3, #85	; 0x55
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	212c      	movs	r1, #44	; 0x2c
 8004086:	fb01 f303 	mul.w	r3, r1, r3
 800408a:	4413      	add	r3, r2
 800408c:	3342      	adds	r3, #66	; 0x42
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004092:	e034      	b.n	80040fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3342      	adds	r3, #66	; 0x42
 80040a2:	2202      	movs	r2, #2
 80040a4:	701a      	strb	r2, [r3, #0]
      break;
 80040a6:	e02a      	b.n	80040fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	212c      	movs	r1, #44	; 0x2c
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	3354      	adds	r3, #84	; 0x54
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	212c      	movs	r1, #44	; 0x2c
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	3342      	adds	r3, #66	; 0x42
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
      break;
 80040ce:	e016      	b.n	80040fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	212c      	movs	r1, #44	; 0x2c
 80040d6:	fb01 f303 	mul.w	r3, r1, r3
 80040da:	4413      	add	r3, r2
 80040dc:	3342      	adds	r3, #66	; 0x42
 80040de:	2202      	movs	r2, #2
 80040e0:	701a      	strb	r2, [r3, #0]
      break;
 80040e2:	e00c      	b.n	80040fe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	212c      	movs	r1, #44	; 0x2c
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	3342      	adds	r3, #66	; 0x42
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
      break;
 80040f6:	e002      	b.n	80040fe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80040f8:	bf00      	nop
 80040fa:	e000      	b.n	80040fe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80040fc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	212c      	movs	r1, #44	; 0x2c
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	4413      	add	r3, r2
 800410a:	3344      	adds	r3, #68	; 0x44
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	8b3a      	ldrh	r2, [r7, #24]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	202c      	movs	r0, #44	; 0x2c
 8004118:	fb00 f303 	mul.w	r3, r0, r3
 800411c:	440b      	add	r3, r1
 800411e:	334c      	adds	r3, #76	; 0x4c
 8004120:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	212c      	movs	r1, #44	; 0x2c
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	4413      	add	r3, r2
 800412e:	3360      	adds	r3, #96	; 0x60
 8004130:	2200      	movs	r2, #0
 8004132:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3350      	adds	r3, #80	; 0x50
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	212c      	movs	r1, #44	; 0x2c
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	4413      	add	r3, r2
 8004152:	3339      	adds	r3, #57	; 0x39
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	3361      	adds	r3, #97	; 0x61
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	222c      	movs	r2, #44	; 0x2c
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	3338      	adds	r3, #56	; 0x38
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	18d1      	adds	r1, r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	f006 f838 	bl	800a1f8 <USB_HC_StartXfer>
 8004188:	4603      	mov	r3, r0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop

08004194 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f005 fd5b 	bl	8009c66 <USB_GetMode>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	f040 80f6 	bne.w	80043a4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f005 fd3f 	bl	8009c40 <USB_ReadInterrupts>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80ec 	beq.w	80043a2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f005 fd36 	bl	8009c40 <USB_ReadInterrupts>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041de:	d104      	bne.n	80041ea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80041e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f005 fd26 	bl	8009c40 <USB_ReadInterrupts>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041fe:	d104      	bne.n	800420a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004208:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f005 fd16 	bl	8009c40 <USB_ReadInterrupts>
 8004214:	4603      	mov	r3, r0
 8004216:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800421a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800421e:	d104      	bne.n	800422a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004228:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f005 fd06 	bl	8009c40 <USB_ReadInterrupts>
 8004234:	4603      	mov	r3, r0
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d103      	bne.n	8004246 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2202      	movs	r2, #2
 8004244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f005 fcf8 	bl	8009c40 <USB_ReadInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800425a:	d11c      	bne.n	8004296 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004264:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004276:	2110      	movs	r1, #16
 8004278:	6938      	ldr	r0, [r7, #16]
 800427a:	f005 fc07 	bl	8009a8c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800427e:	6938      	ldr	r0, [r7, #16]
 8004280:	f005 fc28 	bl	8009ad4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2101      	movs	r1, #1
 800428a:	4618      	mov	r0, r3
 800428c:	f005 fde0 	bl	8009e50 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f00b fe5d 	bl	800ff50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f005 fcd0 	bl	8009c40 <USB_ReadInterrupts>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042aa:	d102      	bne.n	80042b2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f001 fa03 	bl	80056b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f005 fcc2 	bl	8009c40 <USB_ReadInterrupts>
 80042bc:	4603      	mov	r3, r0
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d106      	bne.n	80042d4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f00b fe26 	bl	800ff18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2208      	movs	r2, #8
 80042d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f005 fcb1 	bl	8009c40 <USB_ReadInterrupts>
 80042de:	4603      	mov	r3, r0
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d101      	bne.n	80042ec <HAL_HCD_IRQHandler+0x158>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <HAL_HCD_IRQHandler+0x15a>
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d012      	beq.n	8004318 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0210 	bic.w	r2, r2, #16
 8004300:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f001 f906 	bl	8005514 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0210 	orr.w	r2, r2, #16
 8004316:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f005 fc8f 	bl	8009c40 <USB_ReadInterrupts>
 8004322:	4603      	mov	r3, r0
 8004324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800432c:	d13a      	bne.n	80043a4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f006 f8a2 	bl	800a47c <USB_HC_ReadInterrupt>
 8004338:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e025      	b.n	800438c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d018      	beq.n	8004386 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436a:	d106      	bne.n	800437a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	4619      	mov	r1, r3
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f8ab 	bl	80044ce <HCD_HC_IN_IRQHandler>
 8004378:	e005      	b.n	8004386 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	4619      	mov	r1, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fcc6 	bl	8004d12 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	3301      	adds	r3, #1
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	429a      	cmp	r2, r3
 8004394:	d3d4      	bcc.n	8004340 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800439e:	615a      	str	r2, [r3, #20]
 80043a0:	e000      	b.n	80043a4 <HAL_HCD_IRQHandler+0x210>
      return;
 80043a2:	bf00      	nop
    }
  }
}
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_HCD_Start+0x16>
 80043bc:	2302      	movs	r3, #2
 80043be:	e013      	b.n	80043e8 <HAL_HCD_Start+0x3e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2101      	movs	r1, #1
 80043ce:	4618      	mov	r0, r3
 80043d0:	f005 fda2 	bl	8009f18 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f005 fae8 	bl	80099ae <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <HAL_HCD_Stop+0x16>
 8004402:	2302      	movs	r3, #2
 8004404:	e00d      	b.n	8004422 <HAL_HCD_Stop+0x32>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f006 f99c 	bl	800a750 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f005 fd44 	bl	8009ec4 <USB_ResetPort>
 800443c:	4603      	mov	r3, r0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	212c      	movs	r1, #44	; 0x2c
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	4413      	add	r3, r2
 800445e:	3360      	adds	r3, #96	; 0x60
 8004460:	781b      	ldrb	r3, [r3, #0]
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	212c      	movs	r1, #44	; 0x2c
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	4413      	add	r3, r2
 8004486:	3350      	adds	r3, #80	; 0x50
 8004488:	681b      	ldr	r3, [r3, #0]
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f005 fd88 	bl	8009fb8 <USB_GetCurrentFrame>
 80044a8:	4603      	mov	r3, r0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f005 fd63 	bl	8009f8a <USB_GetHostSpeed>
 80044c4:	4603      	mov	r3, r0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b086      	sub	sp, #24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d119      	bne.n	8004532 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4413      	add	r3, r2
 8004506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450a:	461a      	mov	r2, r3
 800450c:	2304      	movs	r3, #4
 800450e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	0151      	lsls	r1, r2, #5
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	440a      	add	r2, r1
 8004526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800452a:	f043 0302 	orr.w	r3, r3, #2
 800452e:	60d3      	str	r3, [r2, #12]
 8004530:	e101      	b.n	8004736 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4413      	add	r3, r2
 800453a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004548:	d12b      	bne.n	80045a2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4413      	add	r3, r2
 8004552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004556:	461a      	mov	r2, r3
 8004558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800455c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	212c      	movs	r1, #44	; 0x2c
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	4413      	add	r3, r2
 800456a:	3361      	adds	r3, #97	; 0x61
 800456c:	2207      	movs	r2, #7
 800456e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4413      	add	r3, r2
 8004578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	440a      	add	r2, r1
 8004586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800458a:	f043 0302 	orr.w	r3, r3, #2
 800458e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f005 ff7f 	bl	800a49e <USB_HC_Halt>
 80045a0:	e0c9      	b.n	8004736 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d109      	bne.n	80045cc <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c4:	461a      	mov	r2, r3
 80045c6:	2320      	movs	r3, #32
 80045c8:	6093      	str	r3, [r2, #8]
 80045ca:	e0b4      	b.n	8004736 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d133      	bne.n	800464a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	0151      	lsls	r1, r2, #5
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	440a      	add	r2, r1
 80045f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045fc:	f043 0302 	orr.w	r3, r3, #2
 8004600:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	212c      	movs	r1, #44	; 0x2c
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	4413      	add	r3, r2
 800460e:	3361      	adds	r3, #97	; 0x61
 8004610:	2205      	movs	r2, #5
 8004612:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4413      	add	r3, r2
 800461c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004620:	461a      	mov	r2, r3
 8004622:	2310      	movs	r3, #16
 8004624:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4413      	add	r3, r2
 800462e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004632:	461a      	mov	r2, r3
 8004634:	2308      	movs	r3, #8
 8004636:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f005 ff2b 	bl	800a49e <USB_HC_Halt>
 8004648:	e075      	b.n	8004736 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4413      	add	r3, r2
 8004652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004660:	d134      	bne.n	80046cc <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4413      	add	r3, r2
 800466a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	0151      	lsls	r1, r2, #5
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	440a      	add	r2, r1
 8004678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800467c:	f043 0302 	orr.w	r3, r3, #2
 8004680:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	212c      	movs	r1, #44	; 0x2c
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	4413      	add	r3, r2
 800468e:	3361      	adds	r3, #97	; 0x61
 8004690:	2208      	movs	r2, #8
 8004692:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4413      	add	r3, r2
 800469c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a0:	461a      	mov	r2, r3
 80046a2:	2310      	movs	r3, #16
 80046a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b2:	461a      	mov	r2, r3
 80046b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	4611      	mov	r1, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f005 feea 	bl	800a49e <USB_HC_Halt>
 80046ca:	e034      	b.n	8004736 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b80      	cmp	r3, #128	; 0x80
 80046e0:	d129      	bne.n	8004736 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	0151      	lsls	r1, r2, #5
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	440a      	add	r2, r1
 80046f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046fc:	f043 0302 	orr.w	r3, r3, #2
 8004700:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	212c      	movs	r1, #44	; 0x2c
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	4413      	add	r3, r2
 800470e:	3361      	adds	r3, #97	; 0x61
 8004710:	2206      	movs	r2, #6
 8004712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	4611      	mov	r1, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f005 febd 	bl	800a49e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4413      	add	r3, r2
 800472c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004730:	461a      	mov	r2, r3
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800474c:	d122      	bne.n	8004794 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	440a      	add	r2, r1
 8004764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004768:	f043 0302 	orr.w	r3, r3, #2
 800476c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f005 fe90 	bl	800a49e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4413      	add	r3, r2
 8004786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478a:	461a      	mov	r2, r3
 800478c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004790:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004792:	e2ba      	b.n	8004d0a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4413      	add	r3, r2
 800479c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	f040 811b 	bne.w	80049e2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d019      	beq.n	80047e8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	3348      	adds	r3, #72	; 0x48
 80047c2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	0159      	lsls	r1, r3, #5
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	440b      	add	r3, r1
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80047d6:	1ad2      	subs	r2, r2, r3
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	202c      	movs	r0, #44	; 0x2c
 80047de:	fb00 f303 	mul.w	r3, r0, r3
 80047e2:	440b      	add	r3, r1
 80047e4:	3350      	adds	r3, #80	; 0x50
 80047e6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	212c      	movs	r1, #44	; 0x2c
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	4413      	add	r3, r2
 80047f4:	3361      	adds	r3, #97	; 0x61
 80047f6:	2201      	movs	r2, #1
 80047f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	212c      	movs	r1, #44	; 0x2c
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	4413      	add	r3, r2
 8004806:	335c      	adds	r3, #92	; 0x5c
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004818:	461a      	mov	r2, r3
 800481a:	2301      	movs	r3, #1
 800481c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	212c      	movs	r1, #44	; 0x2c
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	4413      	add	r3, r2
 800482a:	333f      	adds	r3, #63	; 0x3f
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	212c      	movs	r1, #44	; 0x2c
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	4413      	add	r3, r2
 800483e:	333f      	adds	r3, #63	; 0x3f
 8004840:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004842:	2b02      	cmp	r3, #2
 8004844:	d121      	bne.n	800488a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4413      	add	r3, r2
 800484e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	0151      	lsls	r1, r2, #5
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	440a      	add	r2, r1
 800485c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004860:	f043 0302 	orr.w	r3, r3, #2
 8004864:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f005 fe14 	bl	800a49e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4413      	add	r3, r2
 800487e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004882:	461a      	mov	r2, r3
 8004884:	2310      	movs	r3, #16
 8004886:	6093      	str	r3, [r2, #8]
 8004888:	e066      	b.n	8004958 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	212c      	movs	r1, #44	; 0x2c
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	333f      	adds	r3, #63	; 0x3f
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b03      	cmp	r3, #3
 800489c:	d127      	bne.n	80048ee <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	0151      	lsls	r1, r2, #5
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	440a      	add	r2, r1
 80048b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048bc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	212c      	movs	r1, #44	; 0x2c
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	3360      	adds	r3, #96	; 0x60
 80048cc:	2201      	movs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	b2d9      	uxtb	r1, r3
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	202c      	movs	r0, #44	; 0x2c
 80048da:	fb00 f303 	mul.w	r3, r0, r3
 80048de:	4413      	add	r3, r2
 80048e0:	3360      	adds	r3, #96	; 0x60
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f00b fb40 	bl	800ff6c <HAL_HCD_HC_NotifyURBChange_Callback>
 80048ec:	e034      	b.n	8004958 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	212c      	movs	r1, #44	; 0x2c
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	333f      	adds	r3, #63	; 0x3f
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d12a      	bne.n	8004958 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	212c      	movs	r1, #44	; 0x2c
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	4413      	add	r3, r2
 800490e:	3360      	adds	r3, #96	; 0x60
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	212c      	movs	r1, #44	; 0x2c
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	4413      	add	r3, r2
 8004920:	3354      	adds	r3, #84	; 0x54
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	f083 0301 	eor.w	r3, r3, #1
 8004928:	b2d8      	uxtb	r0, r3
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	212c      	movs	r1, #44	; 0x2c
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	4413      	add	r3, r2
 8004936:	3354      	adds	r3, #84	; 0x54
 8004938:	4602      	mov	r2, r0
 800493a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	b2d9      	uxtb	r1, r3
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	202c      	movs	r0, #44	; 0x2c
 8004946:	fb00 f303 	mul.w	r3, r0, r3
 800494a:	4413      	add	r3, r2
 800494c:	3360      	adds	r3, #96	; 0x60
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f00b fb0a 	bl	800ff6c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d12b      	bne.n	80049b8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	212c      	movs	r1, #44	; 0x2c
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	4413      	add	r3, r2
 800496c:	3348      	adds	r3, #72	; 0x48
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	202c      	movs	r0, #44	; 0x2c
 8004976:	fb00 f202 	mul.w	r2, r0, r2
 800497a:	440a      	add	r2, r1
 800497c:	3240      	adds	r2, #64	; 0x40
 800497e:	8812      	ldrh	r2, [r2, #0]
 8004980:	fbb3 f3f2 	udiv	r3, r3, r2
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 81be 	beq.w	8004d0a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	212c      	movs	r1, #44	; 0x2c
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	4413      	add	r3, r2
 800499a:	3354      	adds	r3, #84	; 0x54
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	f083 0301 	eor.w	r3, r3, #1
 80049a2:	b2d8      	uxtb	r0, r3
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	212c      	movs	r1, #44	; 0x2c
 80049aa:	fb01 f303 	mul.w	r3, r1, r3
 80049ae:	4413      	add	r3, r2
 80049b0:	3354      	adds	r3, #84	; 0x54
 80049b2:	4602      	mov	r2, r0
 80049b4:	701a      	strb	r2, [r3, #0]
}
 80049b6:	e1a8      	b.n	8004d0a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	212c      	movs	r1, #44	; 0x2c
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	4413      	add	r3, r2
 80049c4:	3354      	adds	r3, #84	; 0x54
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	f083 0301 	eor.w	r3, r3, #1
 80049cc:	b2d8      	uxtb	r0, r3
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	212c      	movs	r1, #44	; 0x2c
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	4413      	add	r3, r2
 80049da:	3354      	adds	r3, #84	; 0x54
 80049dc:	4602      	mov	r2, r0
 80049de:	701a      	strb	r2, [r3, #0]
}
 80049e0:	e193      	b.n	8004d0a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	f040 8106 	bne.w	8004c06 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a14:	f023 0302 	bic.w	r3, r3, #2
 8004a18:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	212c      	movs	r1, #44	; 0x2c
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	4413      	add	r3, r2
 8004a26:	3361      	adds	r3, #97	; 0x61
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d109      	bne.n	8004a42 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	212c      	movs	r1, #44	; 0x2c
 8004a34:	fb01 f303 	mul.w	r3, r1, r3
 8004a38:	4413      	add	r3, r2
 8004a3a:	3360      	adds	r3, #96	; 0x60
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	e0c9      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	212c      	movs	r1, #44	; 0x2c
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3361      	adds	r3, #97	; 0x61
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d109      	bne.n	8004a6a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	212c      	movs	r1, #44	; 0x2c
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	4413      	add	r3, r2
 8004a62:	3360      	adds	r3, #96	; 0x60
 8004a64:	2205      	movs	r2, #5
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e0b5      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	212c      	movs	r1, #44	; 0x2c
 8004a70:	fb01 f303 	mul.w	r3, r1, r3
 8004a74:	4413      	add	r3, r2
 8004a76:	3361      	adds	r3, #97	; 0x61
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d009      	beq.n	8004a92 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	212c      	movs	r1, #44	; 0x2c
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	4413      	add	r3, r2
 8004a8a:	3361      	adds	r3, #97	; 0x61
 8004a8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d150      	bne.n	8004b34 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	212c      	movs	r1, #44	; 0x2c
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	335c      	adds	r3, #92	; 0x5c
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	202c      	movs	r0, #44	; 0x2c
 8004aaa:	fb00 f303 	mul.w	r3, r0, r3
 8004aae:	440b      	add	r3, r1
 8004ab0:	335c      	adds	r3, #92	; 0x5c
 8004ab2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	212c      	movs	r1, #44	; 0x2c
 8004aba:	fb01 f303 	mul.w	r3, r1, r3
 8004abe:	4413      	add	r3, r2
 8004ac0:	335c      	adds	r3, #92	; 0x5c
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d912      	bls.n	8004aee <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	212c      	movs	r1, #44	; 0x2c
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	335c      	adds	r3, #92	; 0x5c
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	212c      	movs	r1, #44	; 0x2c
 8004ae0:	fb01 f303 	mul.w	r3, r1, r3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3360      	adds	r3, #96	; 0x60
 8004ae8:	2204      	movs	r2, #4
 8004aea:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004aec:	e073      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	212c      	movs	r1, #44	; 0x2c
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	4413      	add	r3, r2
 8004afa:	3360      	adds	r3, #96	; 0x60
 8004afc:	2202      	movs	r2, #2
 8004afe:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b16:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b1e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b32:	e050      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	212c      	movs	r1, #44	; 0x2c
 8004b3a:	fb01 f303 	mul.w	r3, r1, r3
 8004b3e:	4413      	add	r3, r2
 8004b40:	3361      	adds	r3, #97	; 0x61
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d122      	bne.n	8004b8e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	212c      	movs	r1, #44	; 0x2c
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	3360      	adds	r3, #96	; 0x60
 8004b56:	2202      	movs	r2, #2
 8004b58:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b70:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b78:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b86:	461a      	mov	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	e023      	b.n	8004bd6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	212c      	movs	r1, #44	; 0x2c
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	3361      	adds	r3, #97	; 0x61
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b07      	cmp	r3, #7
 8004ba0:	d119      	bne.n	8004bd6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	212c      	movs	r1, #44	; 0x2c
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	335c      	adds	r3, #92	; 0x5c
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	202c      	movs	r0, #44	; 0x2c
 8004bba:	fb00 f303 	mul.w	r3, r0, r3
 8004bbe:	440b      	add	r3, r1
 8004bc0:	335c      	adds	r3, #92	; 0x5c
 8004bc2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	212c      	movs	r1, #44	; 0x2c
 8004bca:	fb01 f303 	mul.w	r3, r1, r3
 8004bce:	4413      	add	r3, r2
 8004bd0:	3360      	adds	r3, #96	; 0x60
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be2:	461a      	mov	r2, r3
 8004be4:	2302      	movs	r3, #2
 8004be6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	b2d9      	uxtb	r1, r3
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	202c      	movs	r0, #44	; 0x2c
 8004bf2:	fb00 f303 	mul.w	r3, r0, r3
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3360      	adds	r3, #96	; 0x60
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f00b f9b4 	bl	800ff6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004c04:	e081      	b.n	8004d0a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d176      	bne.n	8004d0a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	212c      	movs	r1, #44	; 0x2c
 8004c22:	fb01 f303 	mul.w	r3, r1, r3
 8004c26:	4413      	add	r3, r2
 8004c28:	333f      	adds	r3, #63	; 0x3f
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d121      	bne.n	8004c74 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	212c      	movs	r1, #44	; 0x2c
 8004c36:	fb01 f303 	mul.w	r3, r1, r3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	335c      	adds	r3, #92	; 0x5c
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c5c:	f043 0302 	orr.w	r3, r3, #2
 8004c60:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f005 fc16 	bl	800a49e <USB_HC_Halt>
 8004c72:	e041      	b.n	8004cf8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	212c      	movs	r1, #44	; 0x2c
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	333f      	adds	r3, #63	; 0x3f
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d009      	beq.n	8004c9c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	212c      	movs	r1, #44	; 0x2c
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	333f      	adds	r3, #63	; 0x3f
 8004c96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d12d      	bne.n	8004cf8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	212c      	movs	r1, #44	; 0x2c
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	335c      	adds	r3, #92	; 0x5c
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d120      	bne.n	8004cf8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	212c      	movs	r1, #44	; 0x2c
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	3361      	adds	r3, #97	; 0x61
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ce2:	f043 0302 	orr.w	r3, r3, #2
 8004ce6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f005 fbd3 	bl	800a49e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d04:	461a      	mov	r2, r3
 8004d06:	2310      	movs	r3, #16
 8004d08:	6093      	str	r3, [r2, #8]
}
 8004d0a:	bf00      	nop
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b088      	sub	sp, #32
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d119      	bne.n	8004d76 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2304      	movs	r3, #4
 8004d52:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d6e:	f043 0302 	orr.w	r3, r3, #2
 8004d72:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004d74:	e3ca      	b.n	800550c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d13e      	bne.n	8004e0a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2320      	movs	r3, #32
 8004d9c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	212c      	movs	r1, #44	; 0x2c
 8004da4:	fb01 f303 	mul.w	r3, r1, r3
 8004da8:	4413      	add	r3, r2
 8004daa:	333d      	adds	r3, #61	; 0x3d
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	f040 83ac 	bne.w	800550c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	212c      	movs	r1, #44	; 0x2c
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	333d      	adds	r3, #61	; 0x3d
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	212c      	movs	r1, #44	; 0x2c
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3360      	adds	r3, #96	; 0x60
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004df2:	f043 0302 	orr.w	r3, r3, #2
 8004df6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f005 fb4b 	bl	800a49e <USB_HC_Halt>
}
 8004e08:	e380      	b.n	800550c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e20:	d122      	bne.n	8004e68 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e3c:	f043 0302 	orr.w	r3, r3, #2
 8004e40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f005 fb26 	bl	800a49e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e64:	6093      	str	r3, [r2, #8]
}
 8004e66:	e351      	b.n	800550c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d150      	bne.n	8004f20 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	212c      	movs	r1, #44	; 0x2c
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	335c      	adds	r3, #92	; 0x5c
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b40      	cmp	r3, #64	; 0x40
 8004ea4:	d111      	bne.n	8004eca <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	212c      	movs	r1, #44	; 0x2c
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	333d      	adds	r3, #61	; 0x3d
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	2340      	movs	r3, #64	; 0x40
 8004ec8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee4:	f043 0302 	orr.w	r3, r3, #2
 8004ee8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f005 fad2 	bl	800a49e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f06:	461a      	mov	r2, r3
 8004f08:	2301      	movs	r3, #1
 8004f0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	212c      	movs	r1, #44	; 0x2c
 8004f12:	fb01 f303 	mul.w	r3, r1, r3
 8004f16:	4413      	add	r3, r2
 8004f18:	3361      	adds	r3, #97	; 0x61
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
}
 8004f1e:	e2f5      	b.n	800550c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d13c      	bne.n	8004fb0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	212c      	movs	r1, #44	; 0x2c
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	4413      	add	r3, r2
 8004f42:	3361      	adds	r3, #97	; 0x61
 8004f44:	2204      	movs	r2, #4
 8004f46:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	212c      	movs	r1, #44	; 0x2c
 8004f4e:	fb01 f303 	mul.w	r3, r1, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	333d      	adds	r3, #61	; 0x3d
 8004f56:	2201      	movs	r2, #1
 8004f58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	212c      	movs	r1, #44	; 0x2c
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	335c      	adds	r3, #92	; 0x5c
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	4611      	mov	r1, r2
 8004f96:	4618      	mov	r0, r3
 8004f98:	f005 fa81 	bl	800a49e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2340      	movs	r3, #64	; 0x40
 8004fac:	6093      	str	r3, [r2, #8]
}
 8004fae:	e2ad      	b.n	800550c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d12a      	bne.n	800501c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	0151      	lsls	r1, r2, #5
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	440a      	add	r2, r1
 8004fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff2:	f043 0302 	orr.w	r3, r3, #2
 8004ff6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	4611      	mov	r1, r2
 8005002:	4618      	mov	r0, r3
 8005004:	f005 fa4b 	bl	800a49e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	212c      	movs	r1, #44	; 0x2c
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	4413      	add	r3, r2
 8005014:	3361      	adds	r3, #97	; 0x61
 8005016:	2205      	movs	r2, #5
 8005018:	701a      	strb	r2, [r3, #0]
}
 800501a:	e277      	b.n	800550c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	4413      	add	r3, r2
 8005024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b10      	cmp	r3, #16
 8005030:	d150      	bne.n	80050d4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	212c      	movs	r1, #44	; 0x2c
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	4413      	add	r3, r2
 800503e:	335c      	adds	r3, #92	; 0x5c
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	212c      	movs	r1, #44	; 0x2c
 800504a:	fb01 f303 	mul.w	r3, r1, r3
 800504e:	4413      	add	r3, r2
 8005050:	3361      	adds	r3, #97	; 0x61
 8005052:	2203      	movs	r2, #3
 8005054:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	212c      	movs	r1, #44	; 0x2c
 800505c:	fb01 f303 	mul.w	r3, r1, r3
 8005060:	4413      	add	r3, r2
 8005062:	333d      	adds	r3, #61	; 0x3d
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d112      	bne.n	8005090 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	212c      	movs	r1, #44	; 0x2c
 8005070:	fb01 f303 	mul.w	r3, r1, r3
 8005074:	4413      	add	r3, r2
 8005076:	333c      	adds	r3, #60	; 0x3c
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d108      	bne.n	8005090 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	212c      	movs	r1, #44	; 0x2c
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	4413      	add	r3, r2
 800508a:	333d      	adds	r3, #61	; 0x3d
 800508c:	2201      	movs	r2, #1
 800508e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	4413      	add	r3, r2
 8005098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050aa:	f043 0302 	orr.w	r3, r3, #2
 80050ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	4611      	mov	r1, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f005 f9ef 	bl	800a49e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050cc:	461a      	mov	r2, r3
 80050ce:	2310      	movs	r3, #16
 80050d0:	6093      	str	r3, [r2, #8]
}
 80050d2:	e21b      	b.n	800550c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e6:	2b80      	cmp	r3, #128	; 0x80
 80050e8:	d174      	bne.n	80051d4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d121      	bne.n	8005136 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	212c      	movs	r1, #44	; 0x2c
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	4413      	add	r3, r2
 80050fe:	3361      	adds	r3, #97	; 0x61
 8005100:	2206      	movs	r2, #6
 8005102:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	4413      	add	r3, r2
 800510c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	440a      	add	r2, r1
 800511a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800511e:	f043 0302 	orr.w	r3, r3, #2
 8005122:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f005 f9b5 	bl	800a49e <USB_HC_Halt>
 8005134:	e044      	b.n	80051c0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	212c      	movs	r1, #44	; 0x2c
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	4413      	add	r3, r2
 8005142:	335c      	adds	r3, #92	; 0x5c
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	202c      	movs	r0, #44	; 0x2c
 800514e:	fb00 f303 	mul.w	r3, r0, r3
 8005152:	440b      	add	r3, r1
 8005154:	335c      	adds	r3, #92	; 0x5c
 8005156:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	212c      	movs	r1, #44	; 0x2c
 800515e:	fb01 f303 	mul.w	r3, r1, r3
 8005162:	4413      	add	r3, r2
 8005164:	335c      	adds	r3, #92	; 0x5c
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d920      	bls.n	80051ae <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	212c      	movs	r1, #44	; 0x2c
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	4413      	add	r3, r2
 8005178:	335c      	adds	r3, #92	; 0x5c
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	212c      	movs	r1, #44	; 0x2c
 8005184:	fb01 f303 	mul.w	r3, r1, r3
 8005188:	4413      	add	r3, r2
 800518a:	3360      	adds	r3, #96	; 0x60
 800518c:	2204      	movs	r2, #4
 800518e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	b2d9      	uxtb	r1, r3
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	202c      	movs	r0, #44	; 0x2c
 800519a:	fb00 f303 	mul.w	r3, r0, r3
 800519e:	4413      	add	r3, r2
 80051a0:	3360      	adds	r3, #96	; 0x60
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f00a fee0 	bl	800ff6c <HAL_HCD_HC_NotifyURBChange_Callback>
 80051ac:	e008      	b.n	80051c0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	212c      	movs	r1, #44	; 0x2c
 80051b4:	fb01 f303 	mul.w	r3, r1, r3
 80051b8:	4413      	add	r3, r2
 80051ba:	3360      	adds	r3, #96	; 0x60
 80051bc:	2202      	movs	r2, #2
 80051be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051cc:	461a      	mov	r2, r3
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	6093      	str	r3, [r2, #8]
}
 80051d2:	e19b      	b.n	800550c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ea:	d134      	bne.n	8005256 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	440a      	add	r2, r1
 8005202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005206:	f043 0302 	orr.w	r3, r3, #2
 800520a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f005 f941 	bl	800a49e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005228:	461a      	mov	r2, r3
 800522a:	2310      	movs	r3, #16
 800522c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	4413      	add	r3, r2
 8005236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523a:	461a      	mov	r2, r3
 800523c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005240:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	212c      	movs	r1, #44	; 0x2c
 8005248:	fb01 f303 	mul.w	r3, r1, r3
 800524c:	4413      	add	r3, r2
 800524e:	3361      	adds	r3, #97	; 0x61
 8005250:	2208      	movs	r2, #8
 8005252:	701a      	strb	r2, [r3, #0]
}
 8005254:	e15a      	b.n	800550c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	4413      	add	r3, r2
 800525e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b02      	cmp	r3, #2
 800526a:	f040 814f 	bne.w	800550c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	4413      	add	r3, r2
 8005276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	440a      	add	r2, r1
 8005284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005288:	f023 0302 	bic.w	r3, r3, #2
 800528c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	212c      	movs	r1, #44	; 0x2c
 8005294:	fb01 f303 	mul.w	r3, r1, r3
 8005298:	4413      	add	r3, r2
 800529a:	3361      	adds	r3, #97	; 0x61
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d17d      	bne.n	800539e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	212c      	movs	r1, #44	; 0x2c
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	4413      	add	r3, r2
 80052ae:	3360      	adds	r3, #96	; 0x60
 80052b0:	2201      	movs	r2, #1
 80052b2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	212c      	movs	r1, #44	; 0x2c
 80052ba:	fb01 f303 	mul.w	r3, r1, r3
 80052be:	4413      	add	r3, r2
 80052c0:	333f      	adds	r3, #63	; 0x3f
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d00a      	beq.n	80052de <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	212c      	movs	r1, #44	; 0x2c
 80052ce:	fb01 f303 	mul.w	r3, r1, r3
 80052d2:	4413      	add	r3, r2
 80052d4:	333f      	adds	r3, #63	; 0x3f
 80052d6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80052d8:	2b03      	cmp	r3, #3
 80052da:	f040 8100 	bne.w	80054de <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d113      	bne.n	800530e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	212c      	movs	r1, #44	; 0x2c
 80052ec:	fb01 f303 	mul.w	r3, r1, r3
 80052f0:	4413      	add	r3, r2
 80052f2:	3355      	adds	r3, #85	; 0x55
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	f083 0301 	eor.w	r3, r3, #1
 80052fa:	b2d8      	uxtb	r0, r3
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	212c      	movs	r1, #44	; 0x2c
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	4413      	add	r3, r2
 8005308:	3355      	adds	r3, #85	; 0x55
 800530a:	4602      	mov	r2, r0
 800530c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b01      	cmp	r3, #1
 8005314:	f040 80e3 	bne.w	80054de <HCD_HC_OUT_IRQHandler+0x7cc>
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	212c      	movs	r1, #44	; 0x2c
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	334c      	adds	r3, #76	; 0x4c
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 80d8 	beq.w	80054de <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	212c      	movs	r1, #44	; 0x2c
 8005334:	fb01 f303 	mul.w	r3, r1, r3
 8005338:	4413      	add	r3, r2
 800533a:	334c      	adds	r3, #76	; 0x4c
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	202c      	movs	r0, #44	; 0x2c
 8005344:	fb00 f202 	mul.w	r2, r0, r2
 8005348:	440a      	add	r2, r1
 800534a:	3240      	adds	r2, #64	; 0x40
 800534c:	8812      	ldrh	r2, [r2, #0]
 800534e:	4413      	add	r3, r2
 8005350:	3b01      	subs	r3, #1
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	202c      	movs	r0, #44	; 0x2c
 8005358:	fb00 f202 	mul.w	r2, r0, r2
 800535c:	440a      	add	r2, r1
 800535e:	3240      	adds	r2, #64	; 0x40
 8005360:	8812      	ldrh	r2, [r2, #0]
 8005362:	fbb3 f3f2 	udiv	r3, r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 80b5 	beq.w	80054de <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	212c      	movs	r1, #44	; 0x2c
 800537a:	fb01 f303 	mul.w	r3, r1, r3
 800537e:	4413      	add	r3, r2
 8005380:	3355      	adds	r3, #85	; 0x55
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	f083 0301 	eor.w	r3, r3, #1
 8005388:	b2d8      	uxtb	r0, r3
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	212c      	movs	r1, #44	; 0x2c
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	4413      	add	r3, r2
 8005396:	3355      	adds	r3, #85	; 0x55
 8005398:	4602      	mov	r2, r0
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e09f      	b.n	80054de <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	212c      	movs	r1, #44	; 0x2c
 80053a4:	fb01 f303 	mul.w	r3, r1, r3
 80053a8:	4413      	add	r3, r2
 80053aa:	3361      	adds	r3, #97	; 0x61
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d109      	bne.n	80053c6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	212c      	movs	r1, #44	; 0x2c
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	4413      	add	r3, r2
 80053be:	3360      	adds	r3, #96	; 0x60
 80053c0:	2202      	movs	r2, #2
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	e08b      	b.n	80054de <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	212c      	movs	r1, #44	; 0x2c
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	3361      	adds	r3, #97	; 0x61
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d109      	bne.n	80053ee <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	212c      	movs	r1, #44	; 0x2c
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	4413      	add	r3, r2
 80053e6:	3360      	adds	r3, #96	; 0x60
 80053e8:	2202      	movs	r2, #2
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	e077      	b.n	80054de <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	212c      	movs	r1, #44	; 0x2c
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	4413      	add	r3, r2
 80053fa:	3361      	adds	r3, #97	; 0x61
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b05      	cmp	r3, #5
 8005400:	d109      	bne.n	8005416 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	212c      	movs	r1, #44	; 0x2c
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	4413      	add	r3, r2
 800540e:	3360      	adds	r3, #96	; 0x60
 8005410:	2205      	movs	r2, #5
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e063      	b.n	80054de <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	212c      	movs	r1, #44	; 0x2c
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	4413      	add	r3, r2
 8005422:	3361      	adds	r3, #97	; 0x61
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b06      	cmp	r3, #6
 8005428:	d009      	beq.n	800543e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	212c      	movs	r1, #44	; 0x2c
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	4413      	add	r3, r2
 8005436:	3361      	adds	r3, #97	; 0x61
 8005438:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800543a:	2b08      	cmp	r3, #8
 800543c:	d14f      	bne.n	80054de <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	212c      	movs	r1, #44	; 0x2c
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	4413      	add	r3, r2
 800544a:	335c      	adds	r3, #92	; 0x5c
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	202c      	movs	r0, #44	; 0x2c
 8005456:	fb00 f303 	mul.w	r3, r0, r3
 800545a:	440b      	add	r3, r1
 800545c:	335c      	adds	r3, #92	; 0x5c
 800545e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	212c      	movs	r1, #44	; 0x2c
 8005466:	fb01 f303 	mul.w	r3, r1, r3
 800546a:	4413      	add	r3, r2
 800546c:	335c      	adds	r3, #92	; 0x5c
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d912      	bls.n	800549a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	212c      	movs	r1, #44	; 0x2c
 800547a:	fb01 f303 	mul.w	r3, r1, r3
 800547e:	4413      	add	r3, r2
 8005480:	335c      	adds	r3, #92	; 0x5c
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	212c      	movs	r1, #44	; 0x2c
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	4413      	add	r3, r2
 8005492:	3360      	adds	r3, #96	; 0x60
 8005494:	2204      	movs	r2, #4
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e021      	b.n	80054de <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	212c      	movs	r1, #44	; 0x2c
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	4413      	add	r3, r2
 80054a6:	3360      	adds	r3, #96	; 0x60
 80054a8:	2202      	movs	r2, #2
 80054aa:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054c2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ca:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d8:	461a      	mov	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ea:	461a      	mov	r2, r3
 80054ec:	2302      	movs	r3, #2
 80054ee:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	b2d9      	uxtb	r1, r3
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	202c      	movs	r0, #44	; 0x2c
 80054fa:	fb00 f303 	mul.w	r3, r0, r3
 80054fe:	4413      	add	r3, r2
 8005500:	3360      	adds	r3, #96	; 0x60
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f00a fd30 	bl	800ff6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800550c:	bf00      	nop
 800550e:	3720      	adds	r7, #32
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	0c5b      	lsrs	r3, r3, #17
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	091b      	lsrs	r3, r3, #4
 8005544:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005548:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d004      	beq.n	800555a <HCD_RXQLVL_IRQHandler+0x46>
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2b05      	cmp	r3, #5
 8005554:	f000 80a9 	beq.w	80056aa <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005558:	e0aa      	b.n	80056b0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80a6 	beq.w	80056ae <HCD_RXQLVL_IRQHandler+0x19a>
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	212c      	movs	r1, #44	; 0x2c
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	4413      	add	r3, r2
 800556e:	3344      	adds	r3, #68	; 0x44
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 809b 	beq.w	80056ae <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	212c      	movs	r1, #44	; 0x2c
 800557e:	fb01 f303 	mul.w	r3, r1, r3
 8005582:	4413      	add	r3, r2
 8005584:	3350      	adds	r3, #80	; 0x50
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	441a      	add	r2, r3
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	202c      	movs	r0, #44	; 0x2c
 8005592:	fb00 f303 	mul.w	r3, r0, r3
 8005596:	440b      	add	r3, r1
 8005598:	334c      	adds	r3, #76	; 0x4c
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d87a      	bhi.n	8005696 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	212c      	movs	r1, #44	; 0x2c
 80055aa:	fb01 f303 	mul.w	r3, r1, r3
 80055ae:	4413      	add	r3, r2
 80055b0:	3344      	adds	r3, #68	; 0x44
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	b292      	uxth	r2, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	f004 fae9 	bl	8009b90 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	212c      	movs	r1, #44	; 0x2c
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	4413      	add	r3, r2
 80055ca:	3344      	adds	r3, #68	; 0x44
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	441a      	add	r2, r3
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	202c      	movs	r0, #44	; 0x2c
 80055d8:	fb00 f303 	mul.w	r3, r0, r3
 80055dc:	440b      	add	r3, r1
 80055de:	3344      	adds	r3, #68	; 0x44
 80055e0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	212c      	movs	r1, #44	; 0x2c
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	4413      	add	r3, r2
 80055ee:	3350      	adds	r3, #80	; 0x50
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	441a      	add	r2, r3
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	202c      	movs	r0, #44	; 0x2c
 80055fc:	fb00 f303 	mul.w	r3, r0, r3
 8005600:	440b      	add	r3, r1
 8005602:	3350      	adds	r3, #80	; 0x50
 8005604:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	0cdb      	lsrs	r3, r3, #19
 8005616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800561a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	212c      	movs	r1, #44	; 0x2c
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	4413      	add	r3, r2
 8005628:	3340      	adds	r3, #64	; 0x40
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4293      	cmp	r3, r2
 8005632:	d13c      	bne.n	80056ae <HCD_RXQLVL_IRQHandler+0x19a>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d039      	beq.n	80056ae <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	4413      	add	r3, r2
 8005642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005650:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005658:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	4413      	add	r3, r2
 8005662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005666:	461a      	mov	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	212c      	movs	r1, #44	; 0x2c
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	4413      	add	r3, r2
 8005678:	3354      	adds	r3, #84	; 0x54
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	f083 0301 	eor.w	r3, r3, #1
 8005680:	b2d8      	uxtb	r0, r3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	212c      	movs	r1, #44	; 0x2c
 8005688:	fb01 f303 	mul.w	r3, r1, r3
 800568c:	4413      	add	r3, r2
 800568e:	3354      	adds	r3, #84	; 0x54
 8005690:	4602      	mov	r2, r0
 8005692:	701a      	strb	r2, [r3, #0]
      break;
 8005694:	e00b      	b.n	80056ae <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	212c      	movs	r1, #44	; 0x2c
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	4413      	add	r3, r2
 80056a2:	3360      	adds	r3, #96	; 0x60
 80056a4:	2204      	movs	r2, #4
 80056a6:	701a      	strb	r2, [r3, #0]
      break;
 80056a8:	e001      	b.n	80056ae <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80056ae:	bf00      	nop
  }
}
 80056b0:	bf00      	nop
 80056b2:	3728      	adds	r7, #40	; 0x28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d10b      	bne.n	8005708 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d102      	bne.n	8005700 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f00a fc1a 	bl	800ff34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f043 0302 	orr.w	r3, r3, #2
 8005706:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b08      	cmp	r3, #8
 8005710:	d132      	bne.n	8005778 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f043 0308 	orr.w	r3, r3, #8
 8005718:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b04      	cmp	r3, #4
 8005722:	d126      	bne.n	8005772 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d113      	bne.n	8005754 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005732:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005736:	d106      	bne.n	8005746 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2102      	movs	r1, #2
 800573e:	4618      	mov	r0, r3
 8005740:	f004 fb86 	bl	8009e50 <USB_InitFSLSPClkSel>
 8005744:	e011      	b.n	800576a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2101      	movs	r1, #1
 800574c:	4618      	mov	r0, r3
 800574e:	f004 fb7f 	bl	8009e50 <USB_InitFSLSPClkSel>
 8005752:	e00a      	b.n	800576a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d106      	bne.n	800576a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005762:	461a      	mov	r2, r3
 8005764:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005768:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f00a fc10 	bl	800ff90 <HAL_HCD_PortEnabled_Callback>
 8005770:	e002      	b.n	8005778 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f00a fc1a 	bl	800ffac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b20      	cmp	r3, #32
 8005780:	d103      	bne.n	800578a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f043 0320 	orr.w	r3, r3, #32
 8005788:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005790:	461a      	mov	r2, r3
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6013      	str	r3, [r2, #0]
}
 8005796:	bf00      	nop
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e12b      	b.n	8005a0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fc ff1e 	bl	8002608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2224      	movs	r2, #36	; 0x24
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005802:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005804:	f002 f9f8 	bl	8007bf8 <HAL_RCC_GetPCLK1Freq>
 8005808:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	4a81      	ldr	r2, [pc, #516]	; (8005a14 <HAL_I2C_Init+0x274>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d807      	bhi.n	8005824 <HAL_I2C_Init+0x84>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4a80      	ldr	r2, [pc, #512]	; (8005a18 <HAL_I2C_Init+0x278>)
 8005818:	4293      	cmp	r3, r2
 800581a:	bf94      	ite	ls
 800581c:	2301      	movls	r3, #1
 800581e:	2300      	movhi	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	e006      	b.n	8005832 <HAL_I2C_Init+0x92>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4a7d      	ldr	r2, [pc, #500]	; (8005a1c <HAL_I2C_Init+0x27c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	bf94      	ite	ls
 800582c:	2301      	movls	r3, #1
 800582e:	2300      	movhi	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e0e7      	b.n	8005a0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a78      	ldr	r2, [pc, #480]	; (8005a20 <HAL_I2C_Init+0x280>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	0c9b      	lsrs	r3, r3, #18
 8005844:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	4a6a      	ldr	r2, [pc, #424]	; (8005a14 <HAL_I2C_Init+0x274>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d802      	bhi.n	8005874 <HAL_I2C_Init+0xd4>
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	3301      	adds	r3, #1
 8005872:	e009      	b.n	8005888 <HAL_I2C_Init+0xe8>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800587a:	fb02 f303 	mul.w	r3, r2, r3
 800587e:	4a69      	ldr	r2, [pc, #420]	; (8005a24 <HAL_I2C_Init+0x284>)
 8005880:	fba2 2303 	umull	r2, r3, r2, r3
 8005884:	099b      	lsrs	r3, r3, #6
 8005886:	3301      	adds	r3, #1
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	430b      	orrs	r3, r1
 800588e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800589a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	495c      	ldr	r1, [pc, #368]	; (8005a14 <HAL_I2C_Init+0x274>)
 80058a4:	428b      	cmp	r3, r1
 80058a6:	d819      	bhi.n	80058dc <HAL_I2C_Init+0x13c>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	1e59      	subs	r1, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80058b6:	1c59      	adds	r1, r3, #1
 80058b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058bc:	400b      	ands	r3, r1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <HAL_I2C_Init+0x138>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1e59      	subs	r1, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80058d0:	3301      	adds	r3, #1
 80058d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d6:	e051      	b.n	800597c <HAL_I2C_Init+0x1dc>
 80058d8:	2304      	movs	r3, #4
 80058da:	e04f      	b.n	800597c <HAL_I2C_Init+0x1dc>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d111      	bne.n	8005908 <HAL_I2C_Init+0x168>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1e58      	subs	r0, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6859      	ldr	r1, [r3, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	440b      	add	r3, r1
 80058f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80058f6:	3301      	adds	r3, #1
 80058f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bf0c      	ite	eq
 8005900:	2301      	moveq	r3, #1
 8005902:	2300      	movne	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	e012      	b.n	800592e <HAL_I2C_Init+0x18e>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	1e58      	subs	r0, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6859      	ldr	r1, [r3, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	0099      	lsls	r1, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	fbb0 f3f3 	udiv	r3, r0, r3
 800591e:	3301      	adds	r3, #1
 8005920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_I2C_Init+0x196>
 8005932:	2301      	movs	r3, #1
 8005934:	e022      	b.n	800597c <HAL_I2C_Init+0x1dc>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10e      	bne.n	800595c <HAL_I2C_Init+0x1bc>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1e58      	subs	r0, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	440b      	add	r3, r1
 800594c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005950:	3301      	adds	r3, #1
 8005952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595a:	e00f      	b.n	800597c <HAL_I2C_Init+0x1dc>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1e58      	subs	r0, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6859      	ldr	r1, [r3, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	0099      	lsls	r1, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005972:	3301      	adds	r3, #1
 8005974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	6809      	ldr	r1, [r1, #0]
 8005980:	4313      	orrs	r3, r2
 8005982:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6911      	ldr	r1, [r2, #16]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	68d2      	ldr	r2, [r2, #12]
 80059b6:	4311      	orrs	r1, r2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	430b      	orrs	r3, r1
 80059be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695a      	ldr	r2, [r3, #20]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	000186a0 	.word	0x000186a0
 8005a18:	001e847f 	.word	0x001e847f
 8005a1c:	003d08ff 	.word	0x003d08ff
 8005a20:	431bde83 	.word	0x431bde83
 8005a24:	10624dd3 	.word	0x10624dd3

08005a28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	607a      	str	r2, [r7, #4]
 8005a32:	461a      	mov	r2, r3
 8005a34:	460b      	mov	r3, r1
 8005a36:	817b      	strh	r3, [r7, #10]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a3c:	f7fd fdaa 	bl	8003594 <HAL_GetTick>
 8005a40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	f040 80e0 	bne.w	8005c10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	2319      	movs	r3, #25
 8005a56:	2201      	movs	r2, #1
 8005a58:	4970      	ldr	r1, [pc, #448]	; (8005c1c <HAL_I2C_Master_Transmit+0x1f4>)
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 fe02 	bl	8006664 <I2C_WaitOnFlagUntilTimeout>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005a66:	2302      	movs	r3, #2
 8005a68:	e0d3      	b.n	8005c12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_I2C_Master_Transmit+0x50>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e0cc      	b.n	8005c12 <HAL_I2C_Master_Transmit+0x1ea>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d007      	beq.n	8005a9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0201 	orr.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2221      	movs	r2, #33	; 0x21
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2210      	movs	r2, #16
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	893a      	ldrh	r2, [r7, #8]
 8005ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4a50      	ldr	r2, [pc, #320]	; (8005c20 <HAL_I2C_Master_Transmit+0x1f8>)
 8005ade:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ae0:	8979      	ldrh	r1, [r7, #10]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	6a3a      	ldr	r2, [r7, #32]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 fbbc 	bl	8006264 <I2C_MasterRequestWrite>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e08d      	b.n	8005c12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af6:	2300      	movs	r3, #0
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b0c:	e066      	b.n	8005bdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	6a39      	ldr	r1, [r7, #32]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 fe7c 	bl	8006810 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00d      	beq.n	8005b3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d107      	bne.n	8005b36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e06b      	b.n	8005c12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d11b      	bne.n	8005bb0 <HAL_I2C_Master_Transmit+0x188>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d017      	beq.n	8005bb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	781a      	ldrb	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	6a39      	ldr	r1, [r7, #32]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 fe6c 	bl	8006892 <I2C_WaitOnBTFFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00d      	beq.n	8005bdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d107      	bne.n	8005bd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e01a      	b.n	8005c12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d194      	bne.n	8005b0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e000      	b.n	8005c12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	00100002 	.word	0x00100002
 8005c20:	ffff0000 	.word	0xffff0000

08005c24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	4608      	mov	r0, r1
 8005c2e:	4611      	mov	r1, r2
 8005c30:	461a      	mov	r2, r3
 8005c32:	4603      	mov	r3, r0
 8005c34:	817b      	strh	r3, [r7, #10]
 8005c36:	460b      	mov	r3, r1
 8005c38:	813b      	strh	r3, [r7, #8]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c3e:	f7fd fca9 	bl	8003594 <HAL_GetTick>
 8005c42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b20      	cmp	r3, #32
 8005c4e:	f040 80d9 	bne.w	8005e04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	2319      	movs	r3, #25
 8005c58:	2201      	movs	r2, #1
 8005c5a:	496d      	ldr	r1, [pc, #436]	; (8005e10 <HAL_I2C_Mem_Write+0x1ec>)
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 fd01 	bl	8006664 <I2C_WaitOnFlagUntilTimeout>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e0cc      	b.n	8005e06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_I2C_Mem_Write+0x56>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e0c5      	b.n	8005e06 <HAL_I2C_Mem_Write+0x1e2>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d007      	beq.n	8005ca0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2221      	movs	r2, #33	; 0x21
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2240      	movs	r2, #64	; 0x40
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6a3a      	ldr	r2, [r7, #32]
 8005cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4a4d      	ldr	r2, [pc, #308]	; (8005e14 <HAL_I2C_Mem_Write+0x1f0>)
 8005ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ce2:	88f8      	ldrh	r0, [r7, #6]
 8005ce4:	893a      	ldrh	r2, [r7, #8]
 8005ce6:	8979      	ldrh	r1, [r7, #10]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fb38 	bl	8006368 <I2C_RequestMemoryWrite>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d052      	beq.n	8005da4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e081      	b.n	8005e06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 fd82 	bl	8006810 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00d      	beq.n	8005d2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d107      	bne.n	8005d2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e06b      	b.n	8005e06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	781a      	ldrb	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d11b      	bne.n	8005da4 <HAL_I2C_Mem_Write+0x180>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d017      	beq.n	8005da4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1aa      	bne.n	8005d02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fd6e 	bl	8006892 <I2C_WaitOnBTFFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00d      	beq.n	8005dd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d107      	bne.n	8005dd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e016      	b.n	8005e06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e000      	b.n	8005e06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
  }
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	00100002 	.word	0x00100002
 8005e14:	ffff0000 	.word	0xffff0000

08005e18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08c      	sub	sp, #48	; 0x30
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	4608      	mov	r0, r1
 8005e22:	4611      	mov	r1, r2
 8005e24:	461a      	mov	r2, r3
 8005e26:	4603      	mov	r3, r0
 8005e28:	817b      	strh	r3, [r7, #10]
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	813b      	strh	r3, [r7, #8]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e32:	f7fd fbaf 	bl	8003594 <HAL_GetTick>
 8005e36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	f040 8208 	bne.w	8006256 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	2319      	movs	r3, #25
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	497b      	ldr	r1, [pc, #492]	; (800603c <HAL_I2C_Mem_Read+0x224>)
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fc07 	bl	8006664 <I2C_WaitOnFlagUntilTimeout>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e1fb      	b.n	8006258 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <HAL_I2C_Mem_Read+0x56>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e1f4      	b.n	8006258 <HAL_I2C_Mem_Read+0x440>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d007      	beq.n	8005e94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0201 	orr.w	r2, r2, #1
 8005e92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ea2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2222      	movs	r2, #34	; 0x22
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2240      	movs	r2, #64	; 0x40
 8005eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ebe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4a5b      	ldr	r2, [pc, #364]	; (8006040 <HAL_I2C_Mem_Read+0x228>)
 8005ed4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ed6:	88f8      	ldrh	r0, [r7, #6]
 8005ed8:	893a      	ldrh	r2, [r7, #8]
 8005eda:	8979      	ldrh	r1, [r7, #10]
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	9301      	str	r3, [sp, #4]
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fad4 	bl	8006494 <I2C_RequestMemoryRead>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e1b0      	b.n	8006258 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d113      	bne.n	8005f26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005efe:	2300      	movs	r3, #0
 8005f00:	623b      	str	r3, [r7, #32]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	623b      	str	r3, [r7, #32]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	623b      	str	r3, [r7, #32]
 8005f12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e184      	b.n	8006230 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d11b      	bne.n	8005f66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	61fb      	str	r3, [r7, #28]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	e164      	b.n	8006230 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d11b      	bne.n	8005fa6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	61bb      	str	r3, [r7, #24]
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	e144      	b.n	8006230 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fbc:	e138      	b.n	8006230 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	f200 80f1 	bhi.w	80061aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d123      	bne.n	8006018 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fc9d 	bl	8006914 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e139      	b.n	8006258 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006016:	e10b      	b.n	8006230 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601c:	2b02      	cmp	r3, #2
 800601e:	d14e      	bne.n	80060be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	2200      	movs	r2, #0
 8006028:	4906      	ldr	r1, [pc, #24]	; (8006044 <HAL_I2C_Mem_Read+0x22c>)
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fb1a 	bl	8006664 <I2C_WaitOnFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e10e      	b.n	8006258 <HAL_I2C_Mem_Read+0x440>
 800603a:	bf00      	nop
 800603c:	00100002 	.word	0x00100002
 8006040:	ffff0000 	.word	0xffff0000
 8006044:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060bc:	e0b8      	b.n	8006230 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	2200      	movs	r2, #0
 80060c6:	4966      	ldr	r1, [pc, #408]	; (8006260 <HAL_I2C_Mem_Read+0x448>)
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 facb 	bl	8006664 <I2C_WaitOnFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e0bf      	b.n	8006258 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b01      	subs	r3, #1
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	2200      	movs	r2, #0
 8006122:	494f      	ldr	r1, [pc, #316]	; (8006260 <HAL_I2C_Mem_Read+0x448>)
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fa9d 	bl	8006664 <I2C_WaitOnFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e091      	b.n	8006258 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061a8:	e042      	b.n	8006230 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 fbb0 	bl	8006914 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e04c      	b.n	8006258 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d118      	bne.n	8006230 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006234:	2b00      	cmp	r3, #0
 8006236:	f47f aec2 	bne.w	8005fbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	e000      	b.n	8006258 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006256:	2302      	movs	r3, #2
  }
}
 8006258:	4618      	mov	r0, r3
 800625a:	3728      	adds	r7, #40	; 0x28
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	00010004 	.word	0x00010004

08006264 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	460b      	mov	r3, r1
 8006272:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b08      	cmp	r3, #8
 800627e:	d006      	beq.n	800628e <I2C_MasterRequestWrite+0x2a>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d003      	beq.n	800628e <I2C_MasterRequestWrite+0x2a>
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800628c:	d108      	bne.n	80062a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e00b      	b.n	80062b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	2b12      	cmp	r3, #18
 80062a6:	d107      	bne.n	80062b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 f9cd 	bl	8006664 <I2C_WaitOnFlagUntilTimeout>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00d      	beq.n	80062ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062de:	d103      	bne.n	80062e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e035      	b.n	8006358 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062f4:	d108      	bne.n	8006308 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062f6:	897b      	ldrh	r3, [r7, #10]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006304:	611a      	str	r2, [r3, #16]
 8006306:	e01b      	b.n	8006340 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006308:	897b      	ldrh	r3, [r7, #10]
 800630a:	11db      	asrs	r3, r3, #7
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f003 0306 	and.w	r3, r3, #6
 8006312:	b2db      	uxtb	r3, r3
 8006314:	f063 030f 	orn	r3, r3, #15
 8006318:	b2da      	uxtb	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	490e      	ldr	r1, [pc, #56]	; (8006360 <I2C_MasterRequestWrite+0xfc>)
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 f9f3 	bl	8006712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e010      	b.n	8006358 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006336:	897b      	ldrh	r3, [r7, #10]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	4907      	ldr	r1, [pc, #28]	; (8006364 <I2C_MasterRequestWrite+0x100>)
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 f9e3 	bl	8006712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	00010008 	.word	0x00010008
 8006364:	00010002 	.word	0x00010002

08006368 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af02      	add	r7, sp, #8
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	4608      	mov	r0, r1
 8006372:	4611      	mov	r1, r2
 8006374:	461a      	mov	r2, r3
 8006376:	4603      	mov	r3, r0
 8006378:	817b      	strh	r3, [r7, #10]
 800637a:	460b      	mov	r3, r1
 800637c:	813b      	strh	r3, [r7, #8]
 800637e:	4613      	mov	r3, r2
 8006380:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006390:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	2200      	movs	r2, #0
 800639a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 f960 	bl	8006664 <I2C_WaitOnFlagUntilTimeout>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00d      	beq.n	80063c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b8:	d103      	bne.n	80063c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e05f      	b.n	8006486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063c6:	897b      	ldrh	r3, [r7, #10]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	6a3a      	ldr	r2, [r7, #32]
 80063da:	492d      	ldr	r1, [pc, #180]	; (8006490 <I2C_RequestMemoryWrite+0x128>)
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f998 	bl	8006712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e04c      	b.n	8006486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006404:	6a39      	ldr	r1, [r7, #32]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fa02 	bl	8006810 <I2C_WaitOnTXEFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	2b04      	cmp	r3, #4
 8006418:	d107      	bne.n	800642a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006428:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e02b      	b.n	8006486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800642e:	88fb      	ldrh	r3, [r7, #6]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d105      	bne.n	8006440 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006434:	893b      	ldrh	r3, [r7, #8]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	611a      	str	r2, [r3, #16]
 800643e:	e021      	b.n	8006484 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006440:	893b      	ldrh	r3, [r7, #8]
 8006442:	0a1b      	lsrs	r3, r3, #8
 8006444:	b29b      	uxth	r3, r3
 8006446:	b2da      	uxtb	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800644e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006450:	6a39      	ldr	r1, [r7, #32]
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f9dc 	bl	8006810 <I2C_WaitOnTXEFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00d      	beq.n	800647a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	2b04      	cmp	r3, #4
 8006464:	d107      	bne.n	8006476 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006474:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e005      	b.n	8006486 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800647a:	893b      	ldrh	r3, [r7, #8]
 800647c:	b2da      	uxtb	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	00010002 	.word	0x00010002

08006494 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	4608      	mov	r0, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	461a      	mov	r2, r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	817b      	strh	r3, [r7, #10]
 80064a6:	460b      	mov	r3, r1
 80064a8:	813b      	strh	r3, [r7, #8]
 80064aa:	4613      	mov	r3, r2
 80064ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f8c2 	bl	8006664 <I2C_WaitOnFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00d      	beq.n	8006502 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f4:	d103      	bne.n	80064fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e0aa      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006502:	897b      	ldrh	r3, [r7, #10]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006510:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	6a3a      	ldr	r2, [r7, #32]
 8006516:	4952      	ldr	r1, [pc, #328]	; (8006660 <I2C_RequestMemoryRead+0x1cc>)
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f8fa 	bl	8006712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e097      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800653e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006540:	6a39      	ldr	r1, [r7, #32]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f964 	bl	8006810 <I2C_WaitOnTXEFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00d      	beq.n	800656a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	2b04      	cmp	r3, #4
 8006554:	d107      	bne.n	8006566 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006564:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e076      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800656a:	88fb      	ldrh	r3, [r7, #6]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d105      	bne.n	800657c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006570:	893b      	ldrh	r3, [r7, #8]
 8006572:	b2da      	uxtb	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	611a      	str	r2, [r3, #16]
 800657a:	e021      	b.n	80065c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800657c:	893b      	ldrh	r3, [r7, #8]
 800657e:	0a1b      	lsrs	r3, r3, #8
 8006580:	b29b      	uxth	r3, r3
 8006582:	b2da      	uxtb	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800658a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658c:	6a39      	ldr	r1, [r7, #32]
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 f93e 	bl	8006810 <I2C_WaitOnTXEFlagUntilTimeout>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00d      	beq.n	80065b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d107      	bne.n	80065b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e050      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065b6:	893b      	ldrh	r3, [r7, #8]
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c2:	6a39      	ldr	r1, [r7, #32]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f923 	bl	8006810 <I2C_WaitOnTXEFlagUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00d      	beq.n	80065ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d107      	bne.n	80065e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e035      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	2200      	movs	r2, #0
 8006604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 f82b 	bl	8006664 <I2C_WaitOnFlagUntilTimeout>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00d      	beq.n	8006630 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006622:	d103      	bne.n	800662c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800662a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e013      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006630:	897b      	ldrh	r3, [r7, #10]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	b2da      	uxtb	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	6a3a      	ldr	r2, [r7, #32]
 8006644:	4906      	ldr	r1, [pc, #24]	; (8006660 <I2C_RequestMemoryRead+0x1cc>)
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f863 	bl	8006712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	00010002 	.word	0x00010002

08006664 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006674:	e025      	b.n	80066c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800667c:	d021      	beq.n	80066c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667e:	f7fc ff89 	bl	8003594 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d302      	bcc.n	8006694 <I2C_WaitOnFlagUntilTimeout+0x30>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d116      	bne.n	80066c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f043 0220 	orr.w	r2, r3, #32
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e023      	b.n	800670a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	0c1b      	lsrs	r3, r3, #16
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d10d      	bne.n	80066e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	43da      	mvns	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4013      	ands	r3, r2
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bf0c      	ite	eq
 80066de:	2301      	moveq	r3, #1
 80066e0:	2300      	movne	r3, #0
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	e00c      	b.n	8006702 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	43da      	mvns	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4013      	ands	r3, r2
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bf0c      	ite	eq
 80066fa:	2301      	moveq	r3, #1
 80066fc:	2300      	movne	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	429a      	cmp	r2, r3
 8006706:	d0b6      	beq.n	8006676 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	607a      	str	r2, [r7, #4]
 800671e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006720:	e051      	b.n	80067c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800672c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006730:	d123      	bne.n	800677a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006740:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800674a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f043 0204 	orr.w	r2, r3, #4
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e046      	b.n	8006808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006780:	d021      	beq.n	80067c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006782:	f7fc ff07 	bl	8003594 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	429a      	cmp	r2, r3
 8006790:	d302      	bcc.n	8006798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d116      	bne.n	80067c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	f043 0220 	orr.w	r2, r3, #32
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e020      	b.n	8006808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d10c      	bne.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	43da      	mvns	r2, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4013      	ands	r3, r2
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bf14      	ite	ne
 80067e2:	2301      	movne	r3, #1
 80067e4:	2300      	moveq	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	e00b      	b.n	8006802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	43da      	mvns	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	4013      	ands	r3, r2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	bf14      	ite	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	2300      	moveq	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d18d      	bne.n	8006722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800681c:	e02d      	b.n	800687a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f8ce 	bl	80069c0 <I2C_IsAcknowledgeFailed>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e02d      	b.n	800688a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006834:	d021      	beq.n	800687a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7fc fead 	bl	8003594 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	d302      	bcc.n	800684c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d116      	bne.n	800687a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2220      	movs	r2, #32
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	f043 0220 	orr.w	r2, r3, #32
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e007      	b.n	800688a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006884:	2b80      	cmp	r3, #128	; 0x80
 8006886:	d1ca      	bne.n	800681e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800689e:	e02d      	b.n	80068fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f88d 	bl	80069c0 <I2C_IsAcknowledgeFailed>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e02d      	b.n	800690c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068b6:	d021      	beq.n	80068fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b8:	f7fc fe6c 	bl	8003594 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d302      	bcc.n	80068ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d116      	bne.n	80068fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	f043 0220 	orr.w	r2, r3, #32
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e007      	b.n	800690c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b04      	cmp	r3, #4
 8006908:	d1ca      	bne.n	80068a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006920:	e042      	b.n	80069a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	2b10      	cmp	r3, #16
 800692e:	d119      	bne.n	8006964 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0210 	mvn.w	r2, #16
 8006938:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e029      	b.n	80069b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006964:	f7fc fe16 	bl	8003594 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	429a      	cmp	r2, r3
 8006972:	d302      	bcc.n	800697a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d116      	bne.n	80069a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	f043 0220 	orr.w	r2, r3, #32
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e007      	b.n	80069b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d1b5      	bne.n	8006922 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d6:	d11b      	bne.n	8006a10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	f043 0204 	orr.w	r2, r3, #4
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
	...

08006a20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e128      	b.n	8006c84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d109      	bne.n	8006a52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a90      	ldr	r2, [pc, #576]	; (8006c8c <HAL_I2S_Init+0x26c>)
 8006a4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fb fe7b 	bl	8002748 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006a68:	f023 030f 	bic.w	r3, r3, #15
 8006a6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2202      	movs	r2, #2
 8006a74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d060      	beq.n	8006b40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d102      	bne.n	8006a8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006a86:	2310      	movs	r3, #16
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	e001      	b.n	8006a90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006a8c:	2320      	movs	r3, #32
 8006a8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d802      	bhi.n	8006a9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	f001 f9e6 	bl	8007e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8006aa4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aae:	d125      	bne.n	8006afc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d010      	beq.n	8006ada <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	3305      	adds	r3, #5
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	e01f      	b.n	8006b1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	461a      	mov	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af6:	3305      	adds	r3, #5
 8006af8:	613b      	str	r3, [r7, #16]
 8006afa:	e00e      	b.n	8006b1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b16:	3305      	adds	r3, #5
 8006b18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	4a5c      	ldr	r2, [pc, #368]	; (8006c90 <HAL_I2S_Init+0x270>)
 8006b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b22:	08db      	lsrs	r3, r3, #3
 8006b24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	085b      	lsrs	r3, r3, #1
 8006b36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	021b      	lsls	r3, r3, #8
 8006b3c:	61bb      	str	r3, [r7, #24]
 8006b3e:	e003      	b.n	8006b48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006b40:	2302      	movs	r3, #2
 8006b42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d902      	bls.n	8006b54 <HAL_I2S_Init+0x134>
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	2bff      	cmp	r3, #255	; 0xff
 8006b52:	d907      	bls.n	8006b64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b58:	f043 0210 	orr.w	r2, r3, #16
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e08f      	b.n	8006c84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	ea42 0103 	orr.w	r1, r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006b82:	f023 030f 	bic.w	r3, r3, #15
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6851      	ldr	r1, [r2, #4]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6892      	ldr	r2, [r2, #8]
 8006b8e:	4311      	orrs	r1, r2
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	68d2      	ldr	r2, [r2, #12]
 8006b94:	4311      	orrs	r1, r2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6992      	ldr	r2, [r2, #24]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ba6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d161      	bne.n	8006c74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a38      	ldr	r2, [pc, #224]	; (8006c94 <HAL_I2S_Init+0x274>)
 8006bb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a37      	ldr	r2, [pc, #220]	; (8006c98 <HAL_I2S_Init+0x278>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d101      	bne.n	8006bc4 <HAL_I2S_Init+0x1a4>
 8006bc0:	4b36      	ldr	r3, [pc, #216]	; (8006c9c <HAL_I2S_Init+0x27c>)
 8006bc2:	e001      	b.n	8006bc8 <HAL_I2S_Init+0x1a8>
 8006bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	4932      	ldr	r1, [pc, #200]	; (8006c98 <HAL_I2S_Init+0x278>)
 8006bd0:	428a      	cmp	r2, r1
 8006bd2:	d101      	bne.n	8006bd8 <HAL_I2S_Init+0x1b8>
 8006bd4:	4a31      	ldr	r2, [pc, #196]	; (8006c9c <HAL_I2S_Init+0x27c>)
 8006bd6:	e001      	b.n	8006bdc <HAL_I2S_Init+0x1bc>
 8006bd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006bdc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006be0:	f023 030f 	bic.w	r3, r3, #15
 8006be4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a2b      	ldr	r2, [pc, #172]	; (8006c98 <HAL_I2S_Init+0x278>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d101      	bne.n	8006bf4 <HAL_I2S_Init+0x1d4>
 8006bf0:	4b2a      	ldr	r3, [pc, #168]	; (8006c9c <HAL_I2S_Init+0x27c>)
 8006bf2:	e001      	b.n	8006bf8 <HAL_I2S_Init+0x1d8>
 8006bf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a25      	ldr	r2, [pc, #148]	; (8006c98 <HAL_I2S_Init+0x278>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d101      	bne.n	8006c0a <HAL_I2S_Init+0x1ea>
 8006c06:	4b25      	ldr	r3, [pc, #148]	; (8006c9c <HAL_I2S_Init+0x27c>)
 8006c08:	e001      	b.n	8006c0e <HAL_I2S_Init+0x1ee>
 8006c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c1a:	d003      	beq.n	8006c24 <HAL_I2S_Init+0x204>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d103      	bne.n	8006c2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	e001      	b.n	8006c30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c44:	4313      	orrs	r3, r2
 8006c46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	897b      	ldrh	r3, [r7, #10]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a0d      	ldr	r2, [pc, #52]	; (8006c98 <HAL_I2S_Init+0x278>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d101      	bne.n	8006c6c <HAL_I2S_Init+0x24c>
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <HAL_I2S_Init+0x27c>)
 8006c6a:	e001      	b.n	8006c70 <HAL_I2S_Init+0x250>
 8006c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c70:	897a      	ldrh	r2, [r7, #10]
 8006c72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3720      	adds	r7, #32
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	08006d97 	.word	0x08006d97
 8006c90:	cccccccd 	.word	0xcccccccd
 8006c94:	08006ead 	.word	0x08006ead
 8006c98:	40003800 	.word	0x40003800
 8006c9c:	40003400 	.word	0x40003400

08006ca0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	881a      	ldrh	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	1c9a      	adds	r2, r3, #2
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10e      	bne.n	8006d30 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d20:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff ffb8 	bl	8006ca0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	b292      	uxth	r2, r2
 8006d4c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d52:	1c9a      	adds	r2, r3, #2
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10e      	bne.n	8006d8e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ff93 	bl	8006cb4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006d8e:	bf00      	nop
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b086      	sub	sp, #24
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d13a      	bne.n	8006e28 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d109      	bne.n	8006dd0 <I2S_IRQHandler+0x3a>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc6:	2b40      	cmp	r3, #64	; 0x40
 8006dc8:	d102      	bne.n	8006dd0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff ffb4 	bl	8006d38 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d126      	bne.n	8006e28 <I2S_IRQHandler+0x92>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d11f      	bne.n	8006e28 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006df6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006df8:	2300      	movs	r3, #0
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	613b      	str	r3, [r7, #16]
 8006e0c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	f043 0202 	orr.w	r2, r3, #2
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7ff ff50 	bl	8006cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d136      	bne.n	8006ea2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d109      	bne.n	8006e52 <I2S_IRQHandler+0xbc>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e48:	2b80      	cmp	r3, #128	; 0x80
 8006e4a:	d102      	bne.n	8006e52 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7ff ff45 	bl	8006cdc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d122      	bne.n	8006ea2 <I2S_IRQHandler+0x10c>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	d11b      	bne.n	8006ea2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e78:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e94:	f043 0204 	orr.w	r2, r3, #4
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff ff13 	bl	8006cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006ea2:	bf00      	nop
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4aa2      	ldr	r2, [pc, #648]	; (800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d101      	bne.n	8006eca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006ec6:	4ba2      	ldr	r3, [pc, #648]	; (8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ec8:	e001      	b.n	8006ece <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006eca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a9b      	ldr	r2, [pc, #620]	; (800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d101      	bne.n	8006ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006ee4:	4b9a      	ldr	r3, [pc, #616]	; (8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ee6:	e001      	b.n	8006eec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef8:	d004      	beq.n	8006f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f040 8099 	bne.w	8007036 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d107      	bne.n	8006f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f925 	bl	8007168 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d107      	bne.n	8006f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f9c8 	bl	80072c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b40      	cmp	r3, #64	; 0x40
 8006f40:	d13a      	bne.n	8006fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d035      	beq.n	8006fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a7e      	ldr	r2, [pc, #504]	; (800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d101      	bne.n	8006f5a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006f56:	4b7e      	ldr	r3, [pc, #504]	; (8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006f58:	e001      	b.n	8006f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4979      	ldr	r1, [pc, #484]	; (800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006f66:	428b      	cmp	r3, r1
 8006f68:	d101      	bne.n	8006f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006f6a:	4b79      	ldr	r3, [pc, #484]	; (8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006f6c:	e001      	b.n	8006f72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f76:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f86:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	f043 0202 	orr.w	r2, r3, #2
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff fe88 	bl	8006cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f003 0308 	and.w	r3, r3, #8
 8006fbe:	2b08      	cmp	r3, #8
 8006fc0:	f040 80be 	bne.w	8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 80b8 	beq.w	8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006fde:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a59      	ldr	r2, [pc, #356]	; (800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d101      	bne.n	8006fee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006fea:	4b59      	ldr	r3, [pc, #356]	; (8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006fec:	e001      	b.n	8006ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006fee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4954      	ldr	r1, [pc, #336]	; (800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ffa:	428b      	cmp	r3, r1
 8006ffc:	d101      	bne.n	8007002 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006ffe:	4b54      	ldr	r3, [pc, #336]	; (8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007000:	e001      	b.n	8007006 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007006:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800700a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800700c:	2300      	movs	r3, #0
 800700e:	60bb      	str	r3, [r7, #8]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	60bb      	str	r3, [r7, #8]
 8007018:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007026:	f043 0204 	orr.w	r2, r3, #4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff fe4a 	bl	8006cc8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007034:	e084      	b.n	8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b02      	cmp	r3, #2
 800703e:	d107      	bne.n	8007050 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f8be 	bl	80071cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b01      	cmp	r3, #1
 8007058:	d107      	bne.n	800706a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f8fd 	bl	8007264 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d12f      	bne.n	80070d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d02a      	beq.n	80070d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800708c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a2e      	ldr	r2, [pc, #184]	; (800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d101      	bne.n	800709c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007098:	4b2d      	ldr	r3, [pc, #180]	; (8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800709a:	e001      	b.n	80070a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800709c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4929      	ldr	r1, [pc, #164]	; (800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070a8:	428b      	cmp	r3, r1
 80070aa:	d101      	bne.n	80070b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80070ac:	4b28      	ldr	r3, [pc, #160]	; (8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80070ae:	e001      	b.n	80070b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80070b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c6:	f043 0202 	orr.w	r2, r3, #2
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff fdfa 	bl	8006cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	f003 0308 	and.w	r3, r3, #8
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d131      	bne.n	8007142 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d02c      	beq.n	8007142 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a17      	ldr	r2, [pc, #92]	; (800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d101      	bne.n	80070f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80070f2:	4b17      	ldr	r3, [pc, #92]	; (8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80070f4:	e001      	b.n	80070fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80070f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4912      	ldr	r1, [pc, #72]	; (800714c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007102:	428b      	cmp	r3, r1
 8007104:	d101      	bne.n	800710a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007106:	4b12      	ldr	r3, [pc, #72]	; (8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007108:	e001      	b.n	800710e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800710a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800710e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007112:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007122:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007130:	f043 0204 	orr.w	r2, r3, #4
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff fdc5 	bl	8006cc8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800713e:	e000      	b.n	8007142 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007140:	bf00      	nop
}
 8007142:	bf00      	nop
 8007144:	3720      	adds	r7, #32
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	40003800 	.word	0x40003800
 8007150:	40003400 	.word	0x40003400

08007154 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	1c99      	adds	r1, r3, #2
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6251      	str	r1, [r2, #36]	; 0x24
 800717a:	881a      	ldrh	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d113      	bne.n	80071c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d106      	bne.n	80071c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff ffc9 	bl	8007154 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	1c99      	adds	r1, r3, #2
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	6251      	str	r1, [r2, #36]	; 0x24
 80071de:	8819      	ldrh	r1, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a1d      	ldr	r2, [pc, #116]	; (800725c <I2SEx_TxISR_I2SExt+0x90>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d101      	bne.n	80071ee <I2SEx_TxISR_I2SExt+0x22>
 80071ea:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <I2SEx_TxISR_I2SExt+0x94>)
 80071ec:	e001      	b.n	80071f2 <I2SEx_TxISR_I2SExt+0x26>
 80071ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071f2:	460a      	mov	r2, r1
 80071f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d121      	bne.n	8007252 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a12      	ldr	r2, [pc, #72]	; (800725c <I2SEx_TxISR_I2SExt+0x90>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d101      	bne.n	800721c <I2SEx_TxISR_I2SExt+0x50>
 8007218:	4b11      	ldr	r3, [pc, #68]	; (8007260 <I2SEx_TxISR_I2SExt+0x94>)
 800721a:	e001      	b.n	8007220 <I2SEx_TxISR_I2SExt+0x54>
 800721c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	490d      	ldr	r1, [pc, #52]	; (800725c <I2SEx_TxISR_I2SExt+0x90>)
 8007228:	428b      	cmp	r3, r1
 800722a:	d101      	bne.n	8007230 <I2SEx_TxISR_I2SExt+0x64>
 800722c:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <I2SEx_TxISR_I2SExt+0x94>)
 800722e:	e001      	b.n	8007234 <I2SEx_TxISR_I2SExt+0x68>
 8007230:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007234:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007238:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d106      	bne.n	8007252 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ff81 	bl	8007154 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	40003800 	.word	0x40003800
 8007260:	40003400 	.word	0x40003400

08007264 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68d8      	ldr	r0, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007276:	1c99      	adds	r1, r3, #2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800727c:	b282      	uxth	r2, r0
 800727e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007284:	b29b      	uxth	r3, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d113      	bne.n	80072c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d106      	bne.n	80072c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff ff4a 	bl	8007154 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a20      	ldr	r2, [pc, #128]	; (8007358 <I2SEx_RxISR_I2SExt+0x90>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d101      	bne.n	80072de <I2SEx_RxISR_I2SExt+0x16>
 80072da:	4b20      	ldr	r3, [pc, #128]	; (800735c <I2SEx_RxISR_I2SExt+0x94>)
 80072dc:	e001      	b.n	80072e2 <I2SEx_RxISR_I2SExt+0x1a>
 80072de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072e2:	68d8      	ldr	r0, [r3, #12]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	1c99      	adds	r1, r3, #2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80072ee:	b282      	uxth	r2, r0
 80072f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d121      	bne.n	800734e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a12      	ldr	r2, [pc, #72]	; (8007358 <I2SEx_RxISR_I2SExt+0x90>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d101      	bne.n	8007318 <I2SEx_RxISR_I2SExt+0x50>
 8007314:	4b11      	ldr	r3, [pc, #68]	; (800735c <I2SEx_RxISR_I2SExt+0x94>)
 8007316:	e001      	b.n	800731c <I2SEx_RxISR_I2SExt+0x54>
 8007318:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	490d      	ldr	r1, [pc, #52]	; (8007358 <I2SEx_RxISR_I2SExt+0x90>)
 8007324:	428b      	cmp	r3, r1
 8007326:	d101      	bne.n	800732c <I2SEx_RxISR_I2SExt+0x64>
 8007328:	4b0c      	ldr	r3, [pc, #48]	; (800735c <I2SEx_RxISR_I2SExt+0x94>)
 800732a:	e001      	b.n	8007330 <I2SEx_RxISR_I2SExt+0x68>
 800732c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007330:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007334:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29b      	uxth	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff ff03 	bl	8007154 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800734e:	bf00      	nop
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	40003800 	.word	0x40003800
 800735c:	40003400 	.word	0x40003400

08007360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e264      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d075      	beq.n	800746a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800737e:	4ba3      	ldr	r3, [pc, #652]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 030c 	and.w	r3, r3, #12
 8007386:	2b04      	cmp	r3, #4
 8007388:	d00c      	beq.n	80073a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800738a:	4ba0      	ldr	r3, [pc, #640]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007392:	2b08      	cmp	r3, #8
 8007394:	d112      	bne.n	80073bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007396:	4b9d      	ldr	r3, [pc, #628]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800739e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073a2:	d10b      	bne.n	80073bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a4:	4b99      	ldr	r3, [pc, #612]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d05b      	beq.n	8007468 <HAL_RCC_OscConfig+0x108>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d157      	bne.n	8007468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e23f      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c4:	d106      	bne.n	80073d4 <HAL_RCC_OscConfig+0x74>
 80073c6:	4b91      	ldr	r3, [pc, #580]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a90      	ldr	r2, [pc, #576]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80073cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	e01d      	b.n	8007410 <HAL_RCC_OscConfig+0xb0>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073dc:	d10c      	bne.n	80073f8 <HAL_RCC_OscConfig+0x98>
 80073de:	4b8b      	ldr	r3, [pc, #556]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a8a      	ldr	r2, [pc, #552]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80073e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	4b88      	ldr	r3, [pc, #544]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a87      	ldr	r2, [pc, #540]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80073f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	e00b      	b.n	8007410 <HAL_RCC_OscConfig+0xb0>
 80073f8:	4b84      	ldr	r3, [pc, #528]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a83      	ldr	r2, [pc, #524]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80073fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	4b81      	ldr	r3, [pc, #516]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a80      	ldr	r2, [pc, #512]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 800740a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800740e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d013      	beq.n	8007440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007418:	f7fc f8bc 	bl	8003594 <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007420:	f7fc f8b8 	bl	8003594 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b64      	cmp	r3, #100	; 0x64
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e204      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007432:	4b76      	ldr	r3, [pc, #472]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0f0      	beq.n	8007420 <HAL_RCC_OscConfig+0xc0>
 800743e:	e014      	b.n	800746a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007440:	f7fc f8a8 	bl	8003594 <HAL_GetTick>
 8007444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007448:	f7fc f8a4 	bl	8003594 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b64      	cmp	r3, #100	; 0x64
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e1f0      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800745a:	4b6c      	ldr	r3, [pc, #432]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1f0      	bne.n	8007448 <HAL_RCC_OscConfig+0xe8>
 8007466:	e000      	b.n	800746a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d063      	beq.n	800753e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007476:	4b65      	ldr	r3, [pc, #404]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 030c 	and.w	r3, r3, #12
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00b      	beq.n	800749a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007482:	4b62      	ldr	r3, [pc, #392]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800748a:	2b08      	cmp	r3, #8
 800748c:	d11c      	bne.n	80074c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800748e:	4b5f      	ldr	r3, [pc, #380]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d116      	bne.n	80074c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800749a:	4b5c      	ldr	r3, [pc, #368]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <HAL_RCC_OscConfig+0x152>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d001      	beq.n	80074b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e1c4      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074b2:	4b56      	ldr	r3, [pc, #344]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	4952      	ldr	r1, [pc, #328]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074c6:	e03a      	b.n	800753e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d020      	beq.n	8007512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074d0:	4b4f      	ldr	r3, [pc, #316]	; (8007610 <HAL_RCC_OscConfig+0x2b0>)
 80074d2:	2201      	movs	r2, #1
 80074d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d6:	f7fc f85d 	bl	8003594 <HAL_GetTick>
 80074da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074dc:	e008      	b.n	80074f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074de:	f7fc f859 	bl	8003594 <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d901      	bls.n	80074f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e1a5      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074f0:	4b46      	ldr	r3, [pc, #280]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d0f0      	beq.n	80074de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074fc:	4b43      	ldr	r3, [pc, #268]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	4940      	ldr	r1, [pc, #256]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 800750c:	4313      	orrs	r3, r2
 800750e:	600b      	str	r3, [r1, #0]
 8007510:	e015      	b.n	800753e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007512:	4b3f      	ldr	r3, [pc, #252]	; (8007610 <HAL_RCC_OscConfig+0x2b0>)
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007518:	f7fc f83c 	bl	8003594 <HAL_GetTick>
 800751c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800751e:	e008      	b.n	8007532 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007520:	f7fc f838 	bl	8003594 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e184      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007532:	4b36      	ldr	r3, [pc, #216]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1f0      	bne.n	8007520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d030      	beq.n	80075ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d016      	beq.n	8007580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007552:	4b30      	ldr	r3, [pc, #192]	; (8007614 <HAL_RCC_OscConfig+0x2b4>)
 8007554:	2201      	movs	r2, #1
 8007556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007558:	f7fc f81c 	bl	8003594 <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800755e:	e008      	b.n	8007572 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007560:	f7fc f818 	bl	8003594 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d901      	bls.n	8007572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e164      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007572:	4b26      	ldr	r3, [pc, #152]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 8007574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0f0      	beq.n	8007560 <HAL_RCC_OscConfig+0x200>
 800757e:	e015      	b.n	80075ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007580:	4b24      	ldr	r3, [pc, #144]	; (8007614 <HAL_RCC_OscConfig+0x2b4>)
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007586:	f7fc f805 	bl	8003594 <HAL_GetTick>
 800758a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800758c:	e008      	b.n	80075a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800758e:	f7fc f801 	bl	8003594 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d901      	bls.n	80075a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e14d      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075a0:	4b1a      	ldr	r3, [pc, #104]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80075a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1f0      	bne.n	800758e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 80a0 	beq.w	80076fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075ba:	2300      	movs	r3, #0
 80075bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075be:	4b13      	ldr	r3, [pc, #76]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10f      	bne.n	80075ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075ca:	2300      	movs	r3, #0
 80075cc:	60bb      	str	r3, [r7, #8]
 80075ce:	4b0f      	ldr	r3, [pc, #60]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	4a0e      	ldr	r2, [pc, #56]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80075d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d8:	6413      	str	r3, [r2, #64]	; 0x40
 80075da:	4b0c      	ldr	r3, [pc, #48]	; (800760c <HAL_RCC_OscConfig+0x2ac>)
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e2:	60bb      	str	r3, [r7, #8]
 80075e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075e6:	2301      	movs	r3, #1
 80075e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ea:	4b0b      	ldr	r3, [pc, #44]	; (8007618 <HAL_RCC_OscConfig+0x2b8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d121      	bne.n	800763a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075f6:	4b08      	ldr	r3, [pc, #32]	; (8007618 <HAL_RCC_OscConfig+0x2b8>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a07      	ldr	r2, [pc, #28]	; (8007618 <HAL_RCC_OscConfig+0x2b8>)
 80075fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007602:	f7fb ffc7 	bl	8003594 <HAL_GetTick>
 8007606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007608:	e011      	b.n	800762e <HAL_RCC_OscConfig+0x2ce>
 800760a:	bf00      	nop
 800760c:	40023800 	.word	0x40023800
 8007610:	42470000 	.word	0x42470000
 8007614:	42470e80 	.word	0x42470e80
 8007618:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800761c:	f7fb ffba 	bl	8003594 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e106      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800762e:	4b85      	ldr	r3, [pc, #532]	; (8007844 <HAL_RCC_OscConfig+0x4e4>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0f0      	beq.n	800761c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d106      	bne.n	8007650 <HAL_RCC_OscConfig+0x2f0>
 8007642:	4b81      	ldr	r3, [pc, #516]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 8007644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007646:	4a80      	ldr	r2, [pc, #512]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 8007648:	f043 0301 	orr.w	r3, r3, #1
 800764c:	6713      	str	r3, [r2, #112]	; 0x70
 800764e:	e01c      	b.n	800768a <HAL_RCC_OscConfig+0x32a>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	2b05      	cmp	r3, #5
 8007656:	d10c      	bne.n	8007672 <HAL_RCC_OscConfig+0x312>
 8007658:	4b7b      	ldr	r3, [pc, #492]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 800765a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765c:	4a7a      	ldr	r2, [pc, #488]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 800765e:	f043 0304 	orr.w	r3, r3, #4
 8007662:	6713      	str	r3, [r2, #112]	; 0x70
 8007664:	4b78      	ldr	r3, [pc, #480]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 8007666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007668:	4a77      	ldr	r2, [pc, #476]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 800766a:	f043 0301 	orr.w	r3, r3, #1
 800766e:	6713      	str	r3, [r2, #112]	; 0x70
 8007670:	e00b      	b.n	800768a <HAL_RCC_OscConfig+0x32a>
 8007672:	4b75      	ldr	r3, [pc, #468]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 8007674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007676:	4a74      	ldr	r2, [pc, #464]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 8007678:	f023 0301 	bic.w	r3, r3, #1
 800767c:	6713      	str	r3, [r2, #112]	; 0x70
 800767e:	4b72      	ldr	r3, [pc, #456]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 8007680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007682:	4a71      	ldr	r2, [pc, #452]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 8007684:	f023 0304 	bic.w	r3, r3, #4
 8007688:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d015      	beq.n	80076be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007692:	f7fb ff7f 	bl	8003594 <HAL_GetTick>
 8007696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007698:	e00a      	b.n	80076b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800769a:	f7fb ff7b 	bl	8003594 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d901      	bls.n	80076b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e0c5      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076b0:	4b65      	ldr	r3, [pc, #404]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 80076b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d0ee      	beq.n	800769a <HAL_RCC_OscConfig+0x33a>
 80076bc:	e014      	b.n	80076e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076be:	f7fb ff69 	bl	8003594 <HAL_GetTick>
 80076c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076c4:	e00a      	b.n	80076dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076c6:	f7fb ff65 	bl	8003594 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d901      	bls.n	80076dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e0af      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076dc:	4b5a      	ldr	r3, [pc, #360]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 80076de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1ee      	bne.n	80076c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d105      	bne.n	80076fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076ee:	4b56      	ldr	r3, [pc, #344]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	4a55      	ldr	r2, [pc, #340]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 80076f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 809b 	beq.w	800783a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007704:	4b50      	ldr	r3, [pc, #320]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 030c 	and.w	r3, r3, #12
 800770c:	2b08      	cmp	r3, #8
 800770e:	d05c      	beq.n	80077ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	2b02      	cmp	r3, #2
 8007716:	d141      	bne.n	800779c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007718:	4b4c      	ldr	r3, [pc, #304]	; (800784c <HAL_RCC_OscConfig+0x4ec>)
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800771e:	f7fb ff39 	bl	8003594 <HAL_GetTick>
 8007722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007724:	e008      	b.n	8007738 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007726:	f7fb ff35 	bl	8003594 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d901      	bls.n	8007738 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e081      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007738:	4b43      	ldr	r3, [pc, #268]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f0      	bne.n	8007726 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	019b      	lsls	r3, r3, #6
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	085b      	lsrs	r3, r3, #1
 800775c:	3b01      	subs	r3, #1
 800775e:	041b      	lsls	r3, r3, #16
 8007760:	431a      	orrs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	061b      	lsls	r3, r3, #24
 8007768:	4937      	ldr	r1, [pc, #220]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 800776a:	4313      	orrs	r3, r2
 800776c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800776e:	4b37      	ldr	r3, [pc, #220]	; (800784c <HAL_RCC_OscConfig+0x4ec>)
 8007770:	2201      	movs	r2, #1
 8007772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007774:	f7fb ff0e 	bl	8003594 <HAL_GetTick>
 8007778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800777a:	e008      	b.n	800778e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800777c:	f7fb ff0a 	bl	8003594 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e056      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800778e:	4b2e      	ldr	r3, [pc, #184]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0f0      	beq.n	800777c <HAL_RCC_OscConfig+0x41c>
 800779a:	e04e      	b.n	800783a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800779c:	4b2b      	ldr	r3, [pc, #172]	; (800784c <HAL_RCC_OscConfig+0x4ec>)
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077a2:	f7fb fef7 	bl	8003594 <HAL_GetTick>
 80077a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077a8:	e008      	b.n	80077bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077aa:	f7fb fef3 	bl	8003594 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d901      	bls.n	80077bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e03f      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077bc:	4b22      	ldr	r3, [pc, #136]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1f0      	bne.n	80077aa <HAL_RCC_OscConfig+0x44a>
 80077c8:	e037      	b.n	800783a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e032      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077d6:	4b1c      	ldr	r3, [pc, #112]	; (8007848 <HAL_RCC_OscConfig+0x4e8>)
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d028      	beq.n	8007836 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d121      	bne.n	8007836 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d11a      	bne.n	8007836 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007806:	4013      	ands	r3, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800780c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800780e:	4293      	cmp	r3, r2
 8007810:	d111      	bne.n	8007836 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	085b      	lsrs	r3, r3, #1
 800781e:	3b01      	subs	r3, #1
 8007820:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007822:	429a      	cmp	r2, r3
 8007824:	d107      	bne.n	8007836 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007832:	429a      	cmp	r2, r3
 8007834:	d001      	beq.n	800783a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	40007000 	.word	0x40007000
 8007848:	40023800 	.word	0x40023800
 800784c:	42470060 	.word	0x42470060

08007850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e0cc      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007864:	4b68      	ldr	r3, [pc, #416]	; (8007a08 <HAL_RCC_ClockConfig+0x1b8>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	429a      	cmp	r2, r3
 8007870:	d90c      	bls.n	800788c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007872:	4b65      	ldr	r3, [pc, #404]	; (8007a08 <HAL_RCC_ClockConfig+0x1b8>)
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	b2d2      	uxtb	r2, r2
 8007878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800787a:	4b63      	ldr	r3, [pc, #396]	; (8007a08 <HAL_RCC_ClockConfig+0x1b8>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d001      	beq.n	800788c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e0b8      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d020      	beq.n	80078da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078a4:	4b59      	ldr	r3, [pc, #356]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	4a58      	ldr	r2, [pc, #352]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 80078aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80078ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078bc:	4b53      	ldr	r3, [pc, #332]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	4a52      	ldr	r2, [pc, #328]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 80078c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80078c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078c8:	4b50      	ldr	r3, [pc, #320]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	494d      	ldr	r1, [pc, #308]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d044      	beq.n	8007970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d107      	bne.n	80078fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ee:	4b47      	ldr	r3, [pc, #284]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d119      	bne.n	800792e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e07f      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2b02      	cmp	r3, #2
 8007904:	d003      	beq.n	800790e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800790a:	2b03      	cmp	r3, #3
 800790c:	d107      	bne.n	800791e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800790e:	4b3f      	ldr	r3, [pc, #252]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d109      	bne.n	800792e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e06f      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800791e:	4b3b      	ldr	r3, [pc, #236]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e067      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800792e:	4b37      	ldr	r3, [pc, #220]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f023 0203 	bic.w	r2, r3, #3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	4934      	ldr	r1, [pc, #208]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 800793c:	4313      	orrs	r3, r2
 800793e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007940:	f7fb fe28 	bl	8003594 <HAL_GetTick>
 8007944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007946:	e00a      	b.n	800795e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007948:	f7fb fe24 	bl	8003594 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	f241 3288 	movw	r2, #5000	; 0x1388
 8007956:	4293      	cmp	r3, r2
 8007958:	d901      	bls.n	800795e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e04f      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800795e:	4b2b      	ldr	r3, [pc, #172]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 020c 	and.w	r2, r3, #12
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	429a      	cmp	r2, r3
 800796e:	d1eb      	bne.n	8007948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007970:	4b25      	ldr	r3, [pc, #148]	; (8007a08 <HAL_RCC_ClockConfig+0x1b8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	d20c      	bcs.n	8007998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800797e:	4b22      	ldr	r3, [pc, #136]	; (8007a08 <HAL_RCC_ClockConfig+0x1b8>)
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007986:	4b20      	ldr	r3, [pc, #128]	; (8007a08 <HAL_RCC_ClockConfig+0x1b8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d001      	beq.n	8007998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e032      	b.n	80079fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079a4:	4b19      	ldr	r3, [pc, #100]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	4916      	ldr	r1, [pc, #88]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0308 	and.w	r3, r3, #8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079c2:	4b12      	ldr	r3, [pc, #72]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	490e      	ldr	r1, [pc, #56]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80079d6:	f000 f821 	bl	8007a1c <HAL_RCC_GetSysClockFreq>
 80079da:	4602      	mov	r2, r0
 80079dc:	4b0b      	ldr	r3, [pc, #44]	; (8007a0c <HAL_RCC_ClockConfig+0x1bc>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	091b      	lsrs	r3, r3, #4
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	490a      	ldr	r1, [pc, #40]	; (8007a10 <HAL_RCC_ClockConfig+0x1c0>)
 80079e8:	5ccb      	ldrb	r3, [r1, r3]
 80079ea:	fa22 f303 	lsr.w	r3, r2, r3
 80079ee:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <HAL_RCC_ClockConfig+0x1c4>)
 80079f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80079f2:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <HAL_RCC_ClockConfig+0x1c8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fb f860 	bl	8002abc <HAL_InitTick>

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40023c00 	.word	0x40023c00
 8007a0c:	40023800 	.word	0x40023800
 8007a10:	08011058 	.word	0x08011058
 8007a14:	20000000 	.word	0x20000000
 8007a18:	20000004 	.word	0x20000004

08007a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	607b      	str	r3, [r7, #4]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a34:	4b67      	ldr	r3, [pc, #412]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f003 030c 	and.w	r3, r3, #12
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d00d      	beq.n	8007a5c <HAL_RCC_GetSysClockFreq+0x40>
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	f200 80bd 	bhi.w	8007bc0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <HAL_RCC_GetSysClockFreq+0x34>
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d003      	beq.n	8007a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8007a4e:	e0b7      	b.n	8007bc0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a50:	4b61      	ldr	r3, [pc, #388]	; (8007bd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007a52:	60bb      	str	r3, [r7, #8]
       break;
 8007a54:	e0b7      	b.n	8007bc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a56:	4b61      	ldr	r3, [pc, #388]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007a58:	60bb      	str	r3, [r7, #8]
      break;
 8007a5a:	e0b4      	b.n	8007bc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a5c:	4b5d      	ldr	r3, [pc, #372]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a66:	4b5b      	ldr	r3, [pc, #364]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d04d      	beq.n	8007b0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a72:	4b58      	ldr	r3, [pc, #352]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	099b      	lsrs	r3, r3, #6
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f04f 0300 	mov.w	r3, #0
 8007a7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a82:	f04f 0100 	mov.w	r1, #0
 8007a86:	ea02 0800 	and.w	r8, r2, r0
 8007a8a:	ea03 0901 	and.w	r9, r3, r1
 8007a8e:	4640      	mov	r0, r8
 8007a90:	4649      	mov	r1, r9
 8007a92:	f04f 0200 	mov.w	r2, #0
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	014b      	lsls	r3, r1, #5
 8007a9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007aa0:	0142      	lsls	r2, r0, #5
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	ebb0 0008 	subs.w	r0, r0, r8
 8007aaa:	eb61 0109 	sbc.w	r1, r1, r9
 8007aae:	f04f 0200 	mov.w	r2, #0
 8007ab2:	f04f 0300 	mov.w	r3, #0
 8007ab6:	018b      	lsls	r3, r1, #6
 8007ab8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007abc:	0182      	lsls	r2, r0, #6
 8007abe:	1a12      	subs	r2, r2, r0
 8007ac0:	eb63 0301 	sbc.w	r3, r3, r1
 8007ac4:	f04f 0000 	mov.w	r0, #0
 8007ac8:	f04f 0100 	mov.w	r1, #0
 8007acc:	00d9      	lsls	r1, r3, #3
 8007ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ad2:	00d0      	lsls	r0, r2, #3
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	eb12 0208 	adds.w	r2, r2, r8
 8007adc:	eb43 0309 	adc.w	r3, r3, r9
 8007ae0:	f04f 0000 	mov.w	r0, #0
 8007ae4:	f04f 0100 	mov.w	r1, #0
 8007ae8:	0259      	lsls	r1, r3, #9
 8007aea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007aee:	0250      	lsls	r0, r2, #9
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4610      	mov	r0, r2
 8007af6:	4619      	mov	r1, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	f7f8 fbbe 	bl	8000280 <__aeabi_uldivmod>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4613      	mov	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	e04a      	b.n	8007ba4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b0e:	4b31      	ldr	r3, [pc, #196]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	099b      	lsrs	r3, r3, #6
 8007b14:	461a      	mov	r2, r3
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007b1e:	f04f 0100 	mov.w	r1, #0
 8007b22:	ea02 0400 	and.w	r4, r2, r0
 8007b26:	ea03 0501 	and.w	r5, r3, r1
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	f04f 0200 	mov.w	r2, #0
 8007b32:	f04f 0300 	mov.w	r3, #0
 8007b36:	014b      	lsls	r3, r1, #5
 8007b38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007b3c:	0142      	lsls	r2, r0, #5
 8007b3e:	4610      	mov	r0, r2
 8007b40:	4619      	mov	r1, r3
 8007b42:	1b00      	subs	r0, r0, r4
 8007b44:	eb61 0105 	sbc.w	r1, r1, r5
 8007b48:	f04f 0200 	mov.w	r2, #0
 8007b4c:	f04f 0300 	mov.w	r3, #0
 8007b50:	018b      	lsls	r3, r1, #6
 8007b52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007b56:	0182      	lsls	r2, r0, #6
 8007b58:	1a12      	subs	r2, r2, r0
 8007b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8007b5e:	f04f 0000 	mov.w	r0, #0
 8007b62:	f04f 0100 	mov.w	r1, #0
 8007b66:	00d9      	lsls	r1, r3, #3
 8007b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b6c:	00d0      	lsls	r0, r2, #3
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	1912      	adds	r2, r2, r4
 8007b74:	eb45 0303 	adc.w	r3, r5, r3
 8007b78:	f04f 0000 	mov.w	r0, #0
 8007b7c:	f04f 0100 	mov.w	r1, #0
 8007b80:	0299      	lsls	r1, r3, #10
 8007b82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007b86:	0290      	lsls	r0, r2, #10
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4619      	mov	r1, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	461a      	mov	r2, r3
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	f7f8 fb72 	bl	8000280 <__aeabi_uldivmod>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ba4:	4b0b      	ldr	r3, [pc, #44]	; (8007bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	0c1b      	lsrs	r3, r3, #16
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	3301      	adds	r3, #1
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bbc:	60bb      	str	r3, [r7, #8]
      break;
 8007bbe:	e002      	b.n	8007bc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007bc2:	60bb      	str	r3, [r7, #8]
      break;
 8007bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007bd2:	bf00      	nop
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	00f42400 	.word	0x00f42400
 8007bdc:	007a1200 	.word	0x007a1200

08007be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007be4:	4b03      	ldr	r3, [pc, #12]	; (8007bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007be6:	681b      	ldr	r3, [r3, #0]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20000000 	.word	0x20000000

08007bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bfc:	f7ff fff0 	bl	8007be0 <HAL_RCC_GetHCLKFreq>
 8007c00:	4602      	mov	r2, r0
 8007c02:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	0a9b      	lsrs	r3, r3, #10
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	4903      	ldr	r1, [pc, #12]	; (8007c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c0e:	5ccb      	ldrb	r3, [r1, r3]
 8007c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	08011068 	.word	0x08011068

08007c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007c24:	f7ff ffdc 	bl	8007be0 <HAL_RCC_GetHCLKFreq>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	0b5b      	lsrs	r3, r3, #13
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	4903      	ldr	r1, [pc, #12]	; (8007c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c36:	5ccb      	ldrb	r3, [r1, r3]
 8007c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	40023800 	.word	0x40023800
 8007c44:	08011068 	.word	0x08011068

08007c48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	220f      	movs	r2, #15
 8007c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007c58:	4b12      	ldr	r3, [pc, #72]	; (8007ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f003 0203 	and.w	r2, r3, #3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007c64:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007c70:	4b0c      	ldr	r3, [pc, #48]	; (8007ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007c7c:	4b09      	ldr	r3, [pc, #36]	; (8007ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	08db      	lsrs	r3, r3, #3
 8007c82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c8a:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <HAL_RCC_GetClockConfig+0x60>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0207 	and.w	r2, r3, #7
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	601a      	str	r2, [r3, #0]
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	40023800 	.word	0x40023800
 8007ca8:	40023c00 	.word	0x40023c00

08007cac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d105      	bne.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d035      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007cd4:	4b62      	ldr	r3, [pc, #392]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cda:	f7fb fc5b 	bl	8003594 <HAL_GetTick>
 8007cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ce0:	e008      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ce2:	f7fb fc57 	bl	8003594 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d901      	bls.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e0b0      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cf4:	4b5b      	ldr	r3, [pc, #364]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1f0      	bne.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	019a      	lsls	r2, r3, #6
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	071b      	lsls	r3, r3, #28
 8007d0c:	4955      	ldr	r1, [pc, #340]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d14:	4b52      	ldr	r3, [pc, #328]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007d16:	2201      	movs	r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d1a:	f7fb fc3b 	bl	8003594 <HAL_GetTick>
 8007d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d20:	e008      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007d22:	f7fb fc37 	bl	8003594 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d901      	bls.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e090      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d34:	4b4b      	ldr	r3, [pc, #300]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0f0      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 8083 	beq.w	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	4b44      	ldr	r3, [pc, #272]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	4a43      	ldr	r2, [pc, #268]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8007d5e:	4b41      	ldr	r3, [pc, #260]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007d6a:	4b3f      	ldr	r3, [pc, #252]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a3e      	ldr	r2, [pc, #248]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d76:	f7fb fc0d 	bl	8003594 <HAL_GetTick>
 8007d7a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d7c:	e008      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007d7e:	f7fb fc09 	bl	8003594 <HAL_GetTick>
 8007d82:	4602      	mov	r2, r0
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d901      	bls.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e062      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d90:	4b35      	ldr	r3, [pc, #212]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0f0      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d9c:	4b31      	ldr	r3, [pc, #196]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007da4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d02f      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d028      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007dba:	4b2a      	ldr	r3, [pc, #168]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007dc4:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007dca:	4b28      	ldr	r3, [pc, #160]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007dd0:	4a24      	ldr	r2, [pc, #144]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007dd6:	4b23      	ldr	r3, [pc, #140]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d114      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007de2:	f7fb fbd7 	bl	8003594 <HAL_GetTick>
 8007de6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007de8:	e00a      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dea:	f7fb fbd3 	bl	8003594 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d901      	bls.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e02a      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e00:	4b18      	ldr	r3, [pc, #96]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0ee      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e18:	d10d      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007e1a:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e2e:	490d      	ldr	r1, [pc, #52]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	608b      	str	r3, [r1, #8]
 8007e34:	e005      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007e36:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	4a0a      	ldr	r2, [pc, #40]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e3c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007e40:	6093      	str	r3, [r2, #8]
 8007e42:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e4e:	4905      	ldr	r1, [pc, #20]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	42470068 	.word	0x42470068
 8007e64:	40023800 	.word	0x40023800
 8007e68:	40007000 	.word	0x40007000
 8007e6c:	42470e40 	.word	0x42470e40

08007e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d13e      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007e8e:	4b23      	ldr	r3, [pc, #140]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d005      	beq.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d12f      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ea4:	4b1e      	ldr	r3, [pc, #120]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ea6:	617b      	str	r3, [r7, #20]
          break;
 8007ea8:	e02f      	b.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007eaa:	4b1c      	ldr	r3, [pc, #112]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eb6:	d108      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007eb8:	4b18      	ldr	r3, [pc, #96]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ec0:	4a18      	ldr	r2, [pc, #96]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec6:	613b      	str	r3, [r7, #16]
 8007ec8:	e007      	b.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007eca:	4b14      	ldr	r3, [pc, #80]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ed2:	4a15      	ldr	r2, [pc, #84]	; (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007eda:	4b10      	ldr	r3, [pc, #64]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee0:	099b      	lsrs	r3, r3, #6
 8007ee2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	fb02 f303 	mul.w	r3, r2, r3
 8007eec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007eee:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef4:	0f1b      	lsrs	r3, r3, #28
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f00:	617b      	str	r3, [r7, #20]
          break;
 8007f02:	e002      	b.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]
          break;
 8007f08:	bf00      	nop
        }
      }
      break;
 8007f0a:	bf00      	nop
    }
  }
  return frequency;
 8007f0c:	697b      	ldr	r3, [r7, #20]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	40023800 	.word	0x40023800
 8007f20:	00bb8000 	.word	0x00bb8000
 8007f24:	007a1200 	.word	0x007a1200
 8007f28:	00f42400 	.word	0x00f42400

08007f2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e083      	b.n	8008046 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7f5b      	ldrb	r3, [r3, #29]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d105      	bne.n	8007f54 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fa fc7a 	bl	8002848 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	22ca      	movs	r2, #202	; 0xca
 8007f60:	625a      	str	r2, [r3, #36]	; 0x24
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2253      	movs	r2, #83	; 0x53
 8007f68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f897 	bl	800809e <RTC_EnterInitMode>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d008      	beq.n	8007f88 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	22ff      	movs	r2, #255	; 0xff
 8007f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2204      	movs	r2, #4
 8007f82:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e05e      	b.n	8008046 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	6812      	ldr	r2, [r2, #0]
 8007f92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f9a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6899      	ldr	r1, [r3, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	431a      	orrs	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	68d2      	ldr	r2, [r2, #12]
 8007fc2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6919      	ldr	r1, [r3, #16]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	041a      	lsls	r2, r3, #16
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fe6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10e      	bne.n	8008014 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f829 	bl	800804e <HAL_RTC_WaitForSynchro>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d008      	beq.n	8008014 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	22ff      	movs	r2, #255	; 0xff
 8008008:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2204      	movs	r2, #4
 800800e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e018      	b.n	8008046 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008022:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	699a      	ldr	r2, [r3, #24]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	22ff      	movs	r2, #255	; 0xff
 800803c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008044:	2300      	movs	r3, #0
  }
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68da      	ldr	r2, [r3, #12]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008068:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800806a:	f7fb fa93 	bl	8003594 <HAL_GetTick>
 800806e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008070:	e009      	b.n	8008086 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008072:	f7fb fa8f 	bl	8003594 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008080:	d901      	bls.n	8008086 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e007      	b.n	8008096 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0ee      	beq.n	8008072 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d119      	bne.n	80080ec <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80080c2:	f7fb fa67 	bl	8003594 <HAL_GetTick>
 80080c6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80080c8:	e009      	b.n	80080de <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80080ca:	f7fb fa63 	bl	8003594 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080d8:	d901      	bls.n	80080de <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e007      	b.n	80080ee <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d0ee      	beq.n	80080ca <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e07b      	b.n	8008200 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	2b00      	cmp	r3, #0
 800810e:	d108      	bne.n	8008122 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008118:	d009      	beq.n	800812e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	61da      	str	r2, [r3, #28]
 8008120:	e005      	b.n	800812e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d106      	bne.n	800814e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fa fba7 	bl	800289c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2202      	movs	r2, #2
 8008152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008164:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008176:	431a      	orrs	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008180:	431a      	orrs	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b2:	ea42 0103 	orr.w	r1, r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	f003 0104 	and.w	r1, r3, #4
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	f003 0210 	and.w	r2, r3, #16
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	69da      	ldr	r2, [r3, #28]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e041      	b.n	800829e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d106      	bne.n	8008234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7fa fbcc 	bl	80029cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3304      	adds	r3, #4
 8008244:	4619      	mov	r1, r3
 8008246:	4610      	mov	r0, r2
 8008248:	f000 fb32 	bl	80088b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
	...

080082a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d001      	beq.n	80082c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e04e      	b.n	800835e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0201 	orr.w	r2, r2, #1
 80082d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a23      	ldr	r2, [pc, #140]	; (800836c <HAL_TIM_Base_Start_IT+0xc4>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d022      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ea:	d01d      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a1f      	ldr	r2, [pc, #124]	; (8008370 <HAL_TIM_Base_Start_IT+0xc8>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d018      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a1e      	ldr	r2, [pc, #120]	; (8008374 <HAL_TIM_Base_Start_IT+0xcc>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d013      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a1c      	ldr	r2, [pc, #112]	; (8008378 <HAL_TIM_Base_Start_IT+0xd0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00e      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a1b      	ldr	r2, [pc, #108]	; (800837c <HAL_TIM_Base_Start_IT+0xd4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d009      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a19      	ldr	r2, [pc, #100]	; (8008380 <HAL_TIM_Base_Start_IT+0xd8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d004      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x80>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a18      	ldr	r2, [pc, #96]	; (8008384 <HAL_TIM_Base_Start_IT+0xdc>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d111      	bne.n	800834c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b06      	cmp	r3, #6
 8008338:	d010      	beq.n	800835c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f042 0201 	orr.w	r2, r2, #1
 8008348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800834a:	e007      	b.n	800835c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0201 	orr.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	40010000 	.word	0x40010000
 8008370:	40000400 	.word	0x40000400
 8008374:	40000800 	.word	0x40000800
 8008378:	40000c00 	.word	0x40000c00
 800837c:	40010400 	.word	0x40010400
 8008380:	40014000 	.word	0x40014000
 8008384:	40001800 	.word	0x40001800

08008388 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0201 	bic.w	r2, r2, #1
 800839e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6a1a      	ldr	r2, [r3, #32]
 80083a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10f      	bne.n	80083d0 <HAL_TIM_Base_Stop_IT+0x48>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6a1a      	ldr	r2, [r3, #32]
 80083b6:	f240 4344 	movw	r3, #1092	; 0x444
 80083ba:	4013      	ands	r3, r2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d107      	bne.n	80083d0 <HAL_TIM_Base_Stop_IT+0x48>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0201 	bic.w	r2, r2, #1
 80083ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b086      	sub	sp, #24
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e097      	b.n	800852a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d106      	bne.n	8008414 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7fa fa8c 	bl	800292c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	6812      	ldr	r2, [r2, #0]
 8008426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800842a:	f023 0307 	bic.w	r3, r3, #7
 800842e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3304      	adds	r3, #4
 8008438:	4619      	mov	r1, r3
 800843a:	4610      	mov	r0, r2
 800843c:	f000 fa38 	bl	80088b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008468:	f023 0303 	bic.w	r3, r3, #3
 800846c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	689a      	ldr	r2, [r3, #8]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	4313      	orrs	r3, r2
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	4313      	orrs	r3, r2
 800847e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008486:	f023 030c 	bic.w	r3, r3, #12
 800848a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	68da      	ldr	r2, [r3, #12]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	021b      	lsls	r3, r3, #8
 80084a2:	4313      	orrs	r3, r2
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	011a      	lsls	r2, r3, #4
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	031b      	lsls	r3, r3, #12
 80084b6:	4313      	orrs	r3, r2
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80084c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80084cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	011b      	lsls	r3, r3, #4
 80084d8:	4313      	orrs	r3, r2
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	4313      	orrs	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008542:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800854a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008552:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800855a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d110      	bne.n	8008584 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d102      	bne.n	800856e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008568:	7b7b      	ldrb	r3, [r7, #13]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d001      	beq.n	8008572 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e069      	b.n	8008646 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2202      	movs	r2, #2
 8008576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008582:	e031      	b.n	80085e8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b04      	cmp	r3, #4
 8008588:	d110      	bne.n	80085ac <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d102      	bne.n	8008596 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008590:	7b3b      	ldrb	r3, [r7, #12]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d001      	beq.n	800859a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e055      	b.n	8008646 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2202      	movs	r2, #2
 800859e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2202      	movs	r2, #2
 80085a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085aa:	e01d      	b.n	80085e8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d108      	bne.n	80085c4 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d105      	bne.n	80085c4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085b8:	7b7b      	ldrb	r3, [r7, #13]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d102      	bne.n	80085c4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80085be:	7b3b      	ldrb	r3, [r7, #12]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d001      	beq.n	80085c8 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e03e      	b.n	8008646 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_TIM_Encoder_Start+0xc4>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	d008      	beq.n	8008606 <HAL_TIM_Encoder_Start+0xd4>
 80085f4:	e00f      	b.n	8008616 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2201      	movs	r2, #1
 80085fc:	2100      	movs	r1, #0
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 f9f6 	bl	80089f0 <TIM_CCxChannelCmd>
      break;
 8008604:	e016      	b.n	8008634 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2201      	movs	r2, #1
 800860c:	2104      	movs	r1, #4
 800860e:	4618      	mov	r0, r3
 8008610:	f000 f9ee 	bl	80089f0 <TIM_CCxChannelCmd>
      break;
 8008614:	e00e      	b.n	8008634 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2201      	movs	r2, #1
 800861c:	2100      	movs	r1, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f000 f9e6 	bl	80089f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2201      	movs	r2, #1
 800862a:	2104      	movs	r1, #4
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f9df 	bl	80089f0 <TIM_CCxChannelCmd>
      break;
 8008632:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0201 	orr.w	r2, r2, #1
 8008642:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	f003 0302 	and.w	r3, r3, #2
 8008660:	2b02      	cmp	r3, #2
 8008662:	d122      	bne.n	80086aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b02      	cmp	r3, #2
 8008670:	d11b      	bne.n	80086aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f06f 0202 	mvn.w	r2, #2
 800867a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	f003 0303 	and.w	r3, r3, #3
 800868c:	2b00      	cmp	r3, #0
 800868e:	d003      	beq.n	8008698 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f8ee 	bl	8008872 <HAL_TIM_IC_CaptureCallback>
 8008696:	e005      	b.n	80086a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f8e0 	bl	800885e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f8f1 	bl	8008886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	d122      	bne.n	80086fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f003 0304 	and.w	r3, r3, #4
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	d11b      	bne.n	80086fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f06f 0204 	mvn.w	r2, #4
 80086ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f8c4 	bl	8008872 <HAL_TIM_IC_CaptureCallback>
 80086ea:	e005      	b.n	80086f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f8b6 	bl	800885e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f8c7 	bl	8008886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	f003 0308 	and.w	r3, r3, #8
 8008708:	2b08      	cmp	r3, #8
 800870a:	d122      	bne.n	8008752 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	2b08      	cmp	r3, #8
 8008718:	d11b      	bne.n	8008752 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f06f 0208 	mvn.w	r2, #8
 8008722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2204      	movs	r2, #4
 8008728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	f003 0303 	and.w	r3, r3, #3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f89a 	bl	8008872 <HAL_TIM_IC_CaptureCallback>
 800873e:	e005      	b.n	800874c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f88c 	bl	800885e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f89d 	bl	8008886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	f003 0310 	and.w	r3, r3, #16
 800875c:	2b10      	cmp	r3, #16
 800875e:	d122      	bne.n	80087a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f003 0310 	and.w	r3, r3, #16
 800876a:	2b10      	cmp	r3, #16
 800876c:	d11b      	bne.n	80087a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f06f 0210 	mvn.w	r2, #16
 8008776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2208      	movs	r2, #8
 800877c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f870 	bl	8008872 <HAL_TIM_IC_CaptureCallback>
 8008792:	e005      	b.n	80087a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f862 	bl	800885e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f873 	bl	8008886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d10e      	bne.n	80087d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d107      	bne.n	80087d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f06f 0201 	mvn.w	r2, #1
 80087ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7f9 fed7 	bl	8002580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087dc:	2b80      	cmp	r3, #128	; 0x80
 80087de:	d10e      	bne.n	80087fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ea:	2b80      	cmp	r3, #128	; 0x80
 80087ec:	d107      	bne.n	80087fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f9a5 	bl	8008b48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008808:	2b40      	cmp	r3, #64	; 0x40
 800880a:	d10e      	bne.n	800882a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008816:	2b40      	cmp	r3, #64	; 0x40
 8008818:	d107      	bne.n	800882a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f838 	bl	800889a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b20      	cmp	r3, #32
 8008836:	d10e      	bne.n	8008856 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f003 0320 	and.w	r3, r3, #32
 8008842:	2b20      	cmp	r3, #32
 8008844:	d107      	bne.n	8008856 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f06f 0220 	mvn.w	r2, #32
 800884e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f96f 	bl	8008b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800885e:	b480      	push	{r7}
 8008860:	b083      	sub	sp, #12
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008872:	b480      	push	{r7}
 8008874:	b083      	sub	sp, #12
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800887a:	bf00      	nop
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088a2:	bf00      	nop
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
	...

080088b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a40      	ldr	r2, [pc, #256]	; (80089c4 <TIM_Base_SetConfig+0x114>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d013      	beq.n	80088f0 <TIM_Base_SetConfig+0x40>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ce:	d00f      	beq.n	80088f0 <TIM_Base_SetConfig+0x40>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a3d      	ldr	r2, [pc, #244]	; (80089c8 <TIM_Base_SetConfig+0x118>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d00b      	beq.n	80088f0 <TIM_Base_SetConfig+0x40>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a3c      	ldr	r2, [pc, #240]	; (80089cc <TIM_Base_SetConfig+0x11c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d007      	beq.n	80088f0 <TIM_Base_SetConfig+0x40>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a3b      	ldr	r2, [pc, #236]	; (80089d0 <TIM_Base_SetConfig+0x120>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d003      	beq.n	80088f0 <TIM_Base_SetConfig+0x40>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a3a      	ldr	r2, [pc, #232]	; (80089d4 <TIM_Base_SetConfig+0x124>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d108      	bne.n	8008902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a2f      	ldr	r2, [pc, #188]	; (80089c4 <TIM_Base_SetConfig+0x114>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d02b      	beq.n	8008962 <TIM_Base_SetConfig+0xb2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008910:	d027      	beq.n	8008962 <TIM_Base_SetConfig+0xb2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a2c      	ldr	r2, [pc, #176]	; (80089c8 <TIM_Base_SetConfig+0x118>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d023      	beq.n	8008962 <TIM_Base_SetConfig+0xb2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a2b      	ldr	r2, [pc, #172]	; (80089cc <TIM_Base_SetConfig+0x11c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d01f      	beq.n	8008962 <TIM_Base_SetConfig+0xb2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a2a      	ldr	r2, [pc, #168]	; (80089d0 <TIM_Base_SetConfig+0x120>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d01b      	beq.n	8008962 <TIM_Base_SetConfig+0xb2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a29      	ldr	r2, [pc, #164]	; (80089d4 <TIM_Base_SetConfig+0x124>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d017      	beq.n	8008962 <TIM_Base_SetConfig+0xb2>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a28      	ldr	r2, [pc, #160]	; (80089d8 <TIM_Base_SetConfig+0x128>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d013      	beq.n	8008962 <TIM_Base_SetConfig+0xb2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a27      	ldr	r2, [pc, #156]	; (80089dc <TIM_Base_SetConfig+0x12c>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d00f      	beq.n	8008962 <TIM_Base_SetConfig+0xb2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a26      	ldr	r2, [pc, #152]	; (80089e0 <TIM_Base_SetConfig+0x130>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d00b      	beq.n	8008962 <TIM_Base_SetConfig+0xb2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a25      	ldr	r2, [pc, #148]	; (80089e4 <TIM_Base_SetConfig+0x134>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d007      	beq.n	8008962 <TIM_Base_SetConfig+0xb2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a24      	ldr	r2, [pc, #144]	; (80089e8 <TIM_Base_SetConfig+0x138>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d003      	beq.n	8008962 <TIM_Base_SetConfig+0xb2>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a23      	ldr	r2, [pc, #140]	; (80089ec <TIM_Base_SetConfig+0x13c>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d108      	bne.n	8008974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	4313      	orrs	r3, r2
 8008972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a0a      	ldr	r2, [pc, #40]	; (80089c4 <TIM_Base_SetConfig+0x114>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d003      	beq.n	80089a8 <TIM_Base_SetConfig+0xf8>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a0c      	ldr	r2, [pc, #48]	; (80089d4 <TIM_Base_SetConfig+0x124>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d103      	bne.n	80089b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	615a      	str	r2, [r3, #20]
}
 80089b6:	bf00      	nop
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	40010000 	.word	0x40010000
 80089c8:	40000400 	.word	0x40000400
 80089cc:	40000800 	.word	0x40000800
 80089d0:	40000c00 	.word	0x40000c00
 80089d4:	40010400 	.word	0x40010400
 80089d8:	40014000 	.word	0x40014000
 80089dc:	40014400 	.word	0x40014400
 80089e0:	40014800 	.word	0x40014800
 80089e4:	40001800 	.word	0x40001800
 80089e8:	40001c00 	.word	0x40001c00
 80089ec:	40002000 	.word	0x40002000

080089f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	f003 031f 	and.w	r3, r3, #31
 8008a02:	2201      	movs	r2, #1
 8008a04:	fa02 f303 	lsl.w	r3, r2, r3
 8008a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a1a      	ldr	r2, [r3, #32]
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	43db      	mvns	r3, r3
 8008a12:	401a      	ands	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a1a      	ldr	r2, [r3, #32]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f003 031f 	and.w	r3, r3, #31
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	fa01 f303 	lsl.w	r3, r1, r3
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	621a      	str	r2, [r3, #32]
}
 8008a2e:	bf00      	nop
 8008a30:	371c      	adds	r7, #28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
	...

08008a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d101      	bne.n	8008a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a50:	2302      	movs	r3, #2
 8008a52:	e05a      	b.n	8008b0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a21      	ldr	r2, [pc, #132]	; (8008b18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d022      	beq.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa0:	d01d      	beq.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a1d      	ldr	r2, [pc, #116]	; (8008b1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d018      	beq.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a1b      	ldr	r2, [pc, #108]	; (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d013      	beq.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a1a      	ldr	r2, [pc, #104]	; (8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00e      	beq.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a18      	ldr	r2, [pc, #96]	; (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d009      	beq.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a17      	ldr	r2, [pc, #92]	; (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d004      	beq.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a15      	ldr	r2, [pc, #84]	; (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d10c      	bne.n	8008af8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	40010000 	.word	0x40010000
 8008b1c:	40000400 	.word	0x40000400
 8008b20:	40000800 	.word	0x40000800
 8008b24:	40000c00 	.word	0x40000c00
 8008b28:	40010400 	.word	0x40010400
 8008b2c:	40014000 	.word	0x40014000
 8008b30:	40001800 	.word	0x40001800

08008b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e03f      	b.n	8008bee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d106      	bne.n	8008b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7f9 ff4a 	bl	8002a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2224      	movs	r2, #36	; 0x24
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68da      	ldr	r2, [r3, #12]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fcdb 	bl	800955c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	695a      	ldr	r2, [r3, #20]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68da      	ldr	r2, [r3, #12]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	4613      	mov	r3, r2
 8008c02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d11d      	bne.n	8008c4c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <HAL_UART_Receive_IT+0x26>
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e016      	b.n	8008c4e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d101      	bne.n	8008c2e <HAL_UART_Receive_IT+0x38>
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	e00f      	b.n	8008c4e <HAL_UART_Receive_IT+0x58>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c3c:	88fb      	ldrh	r3, [r7, #6]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	68b9      	ldr	r1, [r7, #8]
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 fab6 	bl	80091b4 <UART_Start_Receive_IT>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	e000      	b.n	8008c4e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008c4c:	2302      	movs	r3, #2
  }
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b0ba      	sub	sp, #232	; 0xe8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008c84:	2300      	movs	r3, #0
 8008c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c8e:	f003 030f 	and.w	r3, r3, #15
 8008c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008c96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10f      	bne.n	8008cbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca2:	f003 0320 	and.w	r3, r3, #32
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d009      	beq.n	8008cbe <HAL_UART_IRQHandler+0x66>
 8008caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cae:	f003 0320 	and.w	r3, r3, #32
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fb95 	bl	80093e6 <UART_Receive_IT>
      return;
 8008cbc:	e256      	b.n	800916c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008cbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 80de 	beq.w	8008e84 <HAL_UART_IRQHandler+0x22c>
 8008cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d106      	bne.n	8008ce2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 80d1 	beq.w	8008e84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <HAL_UART_IRQHandler+0xae>
 8008cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d005      	beq.n	8008d06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	f043 0201 	orr.w	r2, r3, #1
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d0a:	f003 0304 	and.w	r3, r3, #4
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <HAL_UART_IRQHandler+0xd2>
 8008d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d005      	beq.n	8008d2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	f043 0202 	orr.w	r2, r3, #2
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00b      	beq.n	8008d4e <HAL_UART_IRQHandler+0xf6>
 8008d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d005      	beq.n	8008d4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d46:	f043 0204 	orr.w	r2, r3, #4
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d52:	f003 0308 	and.w	r3, r3, #8
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d011      	beq.n	8008d7e <HAL_UART_IRQHandler+0x126>
 8008d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d5e:	f003 0320 	and.w	r3, r3, #32
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d105      	bne.n	8008d72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d005      	beq.n	8008d7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d76:	f043 0208 	orr.w	r2, r3, #8
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 81ed 	beq.w	8009162 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d8c:	f003 0320 	and.w	r3, r3, #32
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d008      	beq.n	8008da6 <HAL_UART_IRQHandler+0x14e>
 8008d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fb20 	bl	80093e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db0:	2b40      	cmp	r3, #64	; 0x40
 8008db2:	bf0c      	ite	eq
 8008db4:	2301      	moveq	r3, #1
 8008db6:	2300      	movne	r3, #0
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc2:	f003 0308 	and.w	r3, r3, #8
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d103      	bne.n	8008dd2 <HAL_UART_IRQHandler+0x17a>
 8008dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d04f      	beq.n	8008e72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fa28 	bl	8009228 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de2:	2b40      	cmp	r3, #64	; 0x40
 8008de4:	d141      	bne.n	8008e6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3314      	adds	r3, #20
 8008dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3314      	adds	r3, #20
 8008e0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008e22:	e841 2300 	strex	r3, r2, [r1]
 8008e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1d9      	bne.n	8008de6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d013      	beq.n	8008e62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3e:	4a7d      	ldr	r2, [pc, #500]	; (8009034 <HAL_UART_IRQHandler+0x3dc>)
 8008e40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fa fd26 	bl	8003898 <HAL_DMA_Abort_IT>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d016      	beq.n	8008e80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e60:	e00e      	b.n	8008e80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f990 	bl	8009188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e68:	e00a      	b.n	8008e80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f98c 	bl	8009188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e70:	e006      	b.n	8008e80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f988 	bl	8009188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e7e:	e170      	b.n	8009162 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e80:	bf00      	nop
    return;
 8008e82:	e16e      	b.n	8009162 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	f040 814a 	bne.w	8009122 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e92:	f003 0310 	and.w	r3, r3, #16
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 8143 	beq.w	8009122 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea0:	f003 0310 	and.w	r3, r3, #16
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 813c 	beq.w	8009122 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60bb      	str	r3, [r7, #8]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	60bb      	str	r3, [r7, #8]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	60bb      	str	r3, [r7, #8]
 8008ebe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eca:	2b40      	cmp	r3, #64	; 0x40
 8008ecc:	f040 80b4 	bne.w	8009038 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008edc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 8140 	beq.w	8009166 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	f080 8139 	bcs.w	8009166 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008efa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f06:	f000 8088 	beq.w	800901a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	330c      	adds	r3, #12
 8008f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f18:	e853 3f00 	ldrex	r3, [r3]
 8008f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	330c      	adds	r3, #12
 8008f32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008f36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f46:	e841 2300 	strex	r3, r2, [r1]
 8008f4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1d9      	bne.n	8008f0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3314      	adds	r3, #20
 8008f5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f68:	f023 0301 	bic.w	r3, r3, #1
 8008f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3314      	adds	r3, #20
 8008f76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f86:	e841 2300 	strex	r3, r2, [r1]
 8008f8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e1      	bne.n	8008f56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3314      	adds	r3, #20
 8008f98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f9c:	e853 3f00 	ldrex	r3, [r3]
 8008fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3314      	adds	r3, #20
 8008fb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008fb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008fb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008fbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fbe:	e841 2300 	strex	r3, r2, [r1]
 8008fc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1e3      	bne.n	8008f92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	330c      	adds	r3, #12
 8008fde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe2:	e853 3f00 	ldrex	r3, [r3]
 8008fe6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fea:	f023 0310 	bic.w	r3, r3, #16
 8008fee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	330c      	adds	r3, #12
 8008ff8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008ffc:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ffe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009002:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009004:	e841 2300 	strex	r3, r2, [r1]
 8009008:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800900a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1e3      	bne.n	8008fd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009014:	4618      	mov	r0, r3
 8009016:	f7fa fbcf 	bl	80037b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009022:	b29b      	uxth	r3, r3
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	b29b      	uxth	r3, r3
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f8b6 	bl	800919c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009030:	e099      	b.n	8009166 <HAL_UART_IRQHandler+0x50e>
 8009032:	bf00      	nop
 8009034:	080092ef 	.word	0x080092ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009040:	b29b      	uxth	r3, r3
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 808b 	beq.w	800916a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 8086 	beq.w	800916a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	330c      	adds	r3, #12
 8009064:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009070:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	330c      	adds	r3, #12
 800907e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009082:	647a      	str	r2, [r7, #68]	; 0x44
 8009084:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e3      	bne.n	800905e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3314      	adds	r3, #20
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	623b      	str	r3, [r7, #32]
   return(result);
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	f023 0301 	bic.w	r3, r3, #1
 80090ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3314      	adds	r3, #20
 80090b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80090ba:	633a      	str	r2, [r7, #48]	; 0x30
 80090bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090c2:	e841 2300 	strex	r3, r2, [r1]
 80090c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1e3      	bne.n	8009096 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	330c      	adds	r3, #12
 80090e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	e853 3f00 	ldrex	r3, [r3]
 80090ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f023 0310 	bic.w	r3, r3, #16
 80090f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	330c      	adds	r3, #12
 80090fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009100:	61fa      	str	r2, [r7, #28]
 8009102:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	69b9      	ldr	r1, [r7, #24]
 8009106:	69fa      	ldr	r2, [r7, #28]
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	617b      	str	r3, [r7, #20]
   return(result);
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e3      	bne.n	80090dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f83e 	bl	800919c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009120:	e023      	b.n	800916a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800912a:	2b00      	cmp	r3, #0
 800912c:	d009      	beq.n	8009142 <HAL_UART_IRQHandler+0x4ea>
 800912e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f8eb 	bl	8009316 <UART_Transmit_IT>
    return;
 8009140:	e014      	b.n	800916c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00e      	beq.n	800916c <HAL_UART_IRQHandler+0x514>
 800914e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	d008      	beq.n	800916c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f92b 	bl	80093b6 <UART_EndTransmit_IT>
    return;
 8009160:	e004      	b.n	800916c <HAL_UART_IRQHandler+0x514>
    return;
 8009162:	bf00      	nop
 8009164:	e002      	b.n	800916c <HAL_UART_IRQHandler+0x514>
      return;
 8009166:	bf00      	nop
 8009168:	e000      	b.n	800916c <HAL_UART_IRQHandler+0x514>
      return;
 800916a:	bf00      	nop
  }
}
 800916c:	37e8      	adds	r7, #232	; 0xe8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop

08009174 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	88fa      	ldrh	r2, [r7, #6]
 80091cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	88fa      	ldrh	r2, [r7, #6]
 80091d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2222      	movs	r2, #34	; 0x22
 80091de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	695a      	ldr	r2, [r3, #20]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f042 0201 	orr.w	r2, r2, #1
 8009208:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68da      	ldr	r2, [r3, #12]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f042 0220 	orr.w	r2, r2, #32
 8009218:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009228:	b480      	push	{r7}
 800922a:	b095      	sub	sp, #84	; 0x54
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	330c      	adds	r3, #12
 8009236:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923a:	e853 3f00 	ldrex	r3, [r3]
 800923e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009242:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	330c      	adds	r3, #12
 800924e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009250:	643a      	str	r2, [r7, #64]	; 0x40
 8009252:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009256:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800925e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e5      	bne.n	8009230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3314      	adds	r3, #20
 800926a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	61fb      	str	r3, [r7, #28]
   return(result);
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f023 0301 	bic.w	r3, r3, #1
 800927a:	64bb      	str	r3, [r7, #72]	; 0x48
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3314      	adds	r3, #20
 8009282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009284:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800928a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e5      	bne.n	8009264 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929c:	2b01      	cmp	r3, #1
 800929e:	d119      	bne.n	80092d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	330c      	adds	r3, #12
 80092a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	e853 3f00 	ldrex	r3, [r3]
 80092ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f023 0310 	bic.w	r3, r3, #16
 80092b6:	647b      	str	r3, [r7, #68]	; 0x44
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	330c      	adds	r3, #12
 80092be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092c0:	61ba      	str	r2, [r7, #24]
 80092c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	6979      	ldr	r1, [r7, #20]
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	613b      	str	r3, [r7, #16]
   return(result);
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e5      	bne.n	80092a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80092e2:	bf00      	nop
 80092e4:	3754      	adds	r7, #84	; 0x54
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr

080092ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b084      	sub	sp, #16
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff ff3d 	bl	8009188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800930e:	bf00      	nop
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009316:	b480      	push	{r7}
 8009318:	b085      	sub	sp, #20
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b21      	cmp	r3, #33	; 0x21
 8009328:	d13e      	bne.n	80093a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009332:	d114      	bne.n	800935e <UART_Transmit_IT+0x48>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d110      	bne.n	800935e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	881b      	ldrh	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009350:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	1c9a      	adds	r2, r3, #2
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	621a      	str	r2, [r3, #32]
 800935c:	e008      	b.n	8009370 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	1c59      	adds	r1, r3, #1
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6211      	str	r1, [r2, #32]
 8009368:	781a      	ldrb	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009374:	b29b      	uxth	r3, r3
 8009376:	3b01      	subs	r3, #1
 8009378:	b29b      	uxth	r3, r3
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	4619      	mov	r1, r3
 800937e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10f      	bne.n	80093a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68da      	ldr	r2, [r3, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009392:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68da      	ldr	r2, [r3, #12]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	e000      	b.n	80093aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80093a8:	2302      	movs	r3, #2
  }
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68da      	ldr	r2, [r3, #12]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff fecc 	bl	8009174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b08c      	sub	sp, #48	; 0x30
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b22      	cmp	r3, #34	; 0x22
 80093f8:	f040 80ab 	bne.w	8009552 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009404:	d117      	bne.n	8009436 <UART_Receive_IT+0x50>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d113      	bne.n	8009436 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800940e:	2300      	movs	r3, #0
 8009410:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009416:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	b29b      	uxth	r3, r3
 8009420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009424:	b29a      	uxth	r2, r3
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942e:	1c9a      	adds	r2, r3, #2
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	629a      	str	r2, [r3, #40]	; 0x28
 8009434:	e026      	b.n	8009484 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800943c:	2300      	movs	r3, #0
 800943e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009448:	d007      	beq.n	800945a <UART_Receive_IT+0x74>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10a      	bne.n	8009468 <UART_Receive_IT+0x82>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	b2da      	uxtb	r2, r3
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	701a      	strb	r2, [r3, #0]
 8009466:	e008      	b.n	800947a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009474:	b2da      	uxtb	r2, r3
 8009476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009478:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009488:	b29b      	uxth	r3, r3
 800948a:	3b01      	subs	r3, #1
 800948c:	b29b      	uxth	r3, r3
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	4619      	mov	r1, r3
 8009492:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009494:	2b00      	cmp	r3, #0
 8009496:	d15a      	bne.n	800954e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f022 0220 	bic.w	r2, r2, #32
 80094a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	695a      	ldr	r2, [r3, #20]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f022 0201 	bic.w	r2, r2, #1
 80094c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2220      	movs	r2, #32
 80094cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d135      	bne.n	8009544 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	330c      	adds	r3, #12
 80094e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	e853 3f00 	ldrex	r3, [r3]
 80094ec:	613b      	str	r3, [r7, #16]
   return(result);
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f023 0310 	bic.w	r3, r3, #16
 80094f4:	627b      	str	r3, [r7, #36]	; 0x24
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	330c      	adds	r3, #12
 80094fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094fe:	623a      	str	r2, [r7, #32]
 8009500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009502:	69f9      	ldr	r1, [r7, #28]
 8009504:	6a3a      	ldr	r2, [r7, #32]
 8009506:	e841 2300 	strex	r3, r2, [r1]
 800950a:	61bb      	str	r3, [r7, #24]
   return(result);
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1e5      	bne.n	80094de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0310 	and.w	r3, r3, #16
 800951c:	2b10      	cmp	r3, #16
 800951e:	d10a      	bne.n	8009536 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009520:	2300      	movs	r3, #0
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	60fb      	str	r3, [r7, #12]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800953a:	4619      	mov	r1, r3
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff fe2d 	bl	800919c <HAL_UARTEx_RxEventCallback>
 8009542:	e002      	b.n	800954a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7f7 fef3 	bl	8001330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	e002      	b.n	8009554 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	e000      	b.n	8009554 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009552:	2302      	movs	r3, #2
  }
}
 8009554:	4618      	mov	r0, r3
 8009556:	3730      	adds	r7, #48	; 0x30
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800955c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009560:	b09f      	sub	sp, #124	; 0x7c
 8009562:	af00      	add	r7, sp, #0
 8009564:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009572:	68d9      	ldr	r1, [r3, #12]
 8009574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	ea40 0301 	orr.w	r3, r0, r1
 800957c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800957e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009580:	689a      	ldr	r2, [r3, #8]
 8009582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	431a      	orrs	r2, r3
 8009588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	431a      	orrs	r2, r3
 800958e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	4313      	orrs	r3, r2
 8009594:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80095a0:	f021 010c 	bic.w	r1, r1, #12
 80095a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095aa:	430b      	orrs	r3, r1
 80095ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80095ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80095b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ba:	6999      	ldr	r1, [r3, #24]
 80095bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	ea40 0301 	orr.w	r3, r0, r1
 80095c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80095c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	4bc5      	ldr	r3, [pc, #788]	; (80098e0 <UART_SetConfig+0x384>)
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d004      	beq.n	80095da <UART_SetConfig+0x7e>
 80095d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	4bc3      	ldr	r3, [pc, #780]	; (80098e4 <UART_SetConfig+0x388>)
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d103      	bne.n	80095e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095da:	f7fe fb21 	bl	8007c20 <HAL_RCC_GetPCLK2Freq>
 80095de:	6778      	str	r0, [r7, #116]	; 0x74
 80095e0:	e002      	b.n	80095e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095e2:	f7fe fb09 	bl	8007bf8 <HAL_RCC_GetPCLK1Freq>
 80095e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ea:	69db      	ldr	r3, [r3, #28]
 80095ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095f0:	f040 80b6 	bne.w	8009760 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095f6:	461c      	mov	r4, r3
 80095f8:	f04f 0500 	mov.w	r5, #0
 80095fc:	4622      	mov	r2, r4
 80095fe:	462b      	mov	r3, r5
 8009600:	1891      	adds	r1, r2, r2
 8009602:	6439      	str	r1, [r7, #64]	; 0x40
 8009604:	415b      	adcs	r3, r3
 8009606:	647b      	str	r3, [r7, #68]	; 0x44
 8009608:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800960c:	1912      	adds	r2, r2, r4
 800960e:	eb45 0303 	adc.w	r3, r5, r3
 8009612:	f04f 0000 	mov.w	r0, #0
 8009616:	f04f 0100 	mov.w	r1, #0
 800961a:	00d9      	lsls	r1, r3, #3
 800961c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009620:	00d0      	lsls	r0, r2, #3
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	1911      	adds	r1, r2, r4
 8009628:	6639      	str	r1, [r7, #96]	; 0x60
 800962a:	416b      	adcs	r3, r5
 800962c:	667b      	str	r3, [r7, #100]	; 0x64
 800962e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	461a      	mov	r2, r3
 8009634:	f04f 0300 	mov.w	r3, #0
 8009638:	1891      	adds	r1, r2, r2
 800963a:	63b9      	str	r1, [r7, #56]	; 0x38
 800963c:	415b      	adcs	r3, r3
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009640:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009644:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009648:	f7f6 fe1a 	bl	8000280 <__aeabi_uldivmod>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4ba5      	ldr	r3, [pc, #660]	; (80098e8 <UART_SetConfig+0x38c>)
 8009652:	fba3 2302 	umull	r2, r3, r3, r2
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	011e      	lsls	r6, r3, #4
 800965a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800965c:	461c      	mov	r4, r3
 800965e:	f04f 0500 	mov.w	r5, #0
 8009662:	4622      	mov	r2, r4
 8009664:	462b      	mov	r3, r5
 8009666:	1891      	adds	r1, r2, r2
 8009668:	6339      	str	r1, [r7, #48]	; 0x30
 800966a:	415b      	adcs	r3, r3
 800966c:	637b      	str	r3, [r7, #52]	; 0x34
 800966e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009672:	1912      	adds	r2, r2, r4
 8009674:	eb45 0303 	adc.w	r3, r5, r3
 8009678:	f04f 0000 	mov.w	r0, #0
 800967c:	f04f 0100 	mov.w	r1, #0
 8009680:	00d9      	lsls	r1, r3, #3
 8009682:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009686:	00d0      	lsls	r0, r2, #3
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	1911      	adds	r1, r2, r4
 800968e:	65b9      	str	r1, [r7, #88]	; 0x58
 8009690:	416b      	adcs	r3, r5
 8009692:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	461a      	mov	r2, r3
 800969a:	f04f 0300 	mov.w	r3, #0
 800969e:	1891      	adds	r1, r2, r2
 80096a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80096a2:	415b      	adcs	r3, r3
 80096a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80096aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80096ae:	f7f6 fde7 	bl	8000280 <__aeabi_uldivmod>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4b8c      	ldr	r3, [pc, #560]	; (80098e8 <UART_SetConfig+0x38c>)
 80096b8:	fba3 1302 	umull	r1, r3, r3, r2
 80096bc:	095b      	lsrs	r3, r3, #5
 80096be:	2164      	movs	r1, #100	; 0x64
 80096c0:	fb01 f303 	mul.w	r3, r1, r3
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	3332      	adds	r3, #50	; 0x32
 80096ca:	4a87      	ldr	r2, [pc, #540]	; (80098e8 <UART_SetConfig+0x38c>)
 80096cc:	fba2 2303 	umull	r2, r3, r2, r3
 80096d0:	095b      	lsrs	r3, r3, #5
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80096d8:	441e      	add	r6, r3
 80096da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096dc:	4618      	mov	r0, r3
 80096de:	f04f 0100 	mov.w	r1, #0
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	1894      	adds	r4, r2, r2
 80096e8:	623c      	str	r4, [r7, #32]
 80096ea:	415b      	adcs	r3, r3
 80096ec:	627b      	str	r3, [r7, #36]	; 0x24
 80096ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80096f2:	1812      	adds	r2, r2, r0
 80096f4:	eb41 0303 	adc.w	r3, r1, r3
 80096f8:	f04f 0400 	mov.w	r4, #0
 80096fc:	f04f 0500 	mov.w	r5, #0
 8009700:	00dd      	lsls	r5, r3, #3
 8009702:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009706:	00d4      	lsls	r4, r2, #3
 8009708:	4622      	mov	r2, r4
 800970a:	462b      	mov	r3, r5
 800970c:	1814      	adds	r4, r2, r0
 800970e:	653c      	str	r4, [r7, #80]	; 0x50
 8009710:	414b      	adcs	r3, r1
 8009712:	657b      	str	r3, [r7, #84]	; 0x54
 8009714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	461a      	mov	r2, r3
 800971a:	f04f 0300 	mov.w	r3, #0
 800971e:	1891      	adds	r1, r2, r2
 8009720:	61b9      	str	r1, [r7, #24]
 8009722:	415b      	adcs	r3, r3
 8009724:	61fb      	str	r3, [r7, #28]
 8009726:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800972a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800972e:	f7f6 fda7 	bl	8000280 <__aeabi_uldivmod>
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	4b6c      	ldr	r3, [pc, #432]	; (80098e8 <UART_SetConfig+0x38c>)
 8009738:	fba3 1302 	umull	r1, r3, r3, r2
 800973c:	095b      	lsrs	r3, r3, #5
 800973e:	2164      	movs	r1, #100	; 0x64
 8009740:	fb01 f303 	mul.w	r3, r1, r3
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	00db      	lsls	r3, r3, #3
 8009748:	3332      	adds	r3, #50	; 0x32
 800974a:	4a67      	ldr	r2, [pc, #412]	; (80098e8 <UART_SetConfig+0x38c>)
 800974c:	fba2 2303 	umull	r2, r3, r2, r3
 8009750:	095b      	lsrs	r3, r3, #5
 8009752:	f003 0207 	and.w	r2, r3, #7
 8009756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4432      	add	r2, r6
 800975c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800975e:	e0b9      	b.n	80098d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009762:	461c      	mov	r4, r3
 8009764:	f04f 0500 	mov.w	r5, #0
 8009768:	4622      	mov	r2, r4
 800976a:	462b      	mov	r3, r5
 800976c:	1891      	adds	r1, r2, r2
 800976e:	6139      	str	r1, [r7, #16]
 8009770:	415b      	adcs	r3, r3
 8009772:	617b      	str	r3, [r7, #20]
 8009774:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009778:	1912      	adds	r2, r2, r4
 800977a:	eb45 0303 	adc.w	r3, r5, r3
 800977e:	f04f 0000 	mov.w	r0, #0
 8009782:	f04f 0100 	mov.w	r1, #0
 8009786:	00d9      	lsls	r1, r3, #3
 8009788:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800978c:	00d0      	lsls	r0, r2, #3
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	eb12 0804 	adds.w	r8, r2, r4
 8009796:	eb43 0905 	adc.w	r9, r3, r5
 800979a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	4618      	mov	r0, r3
 80097a0:	f04f 0100 	mov.w	r1, #0
 80097a4:	f04f 0200 	mov.w	r2, #0
 80097a8:	f04f 0300 	mov.w	r3, #0
 80097ac:	008b      	lsls	r3, r1, #2
 80097ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80097b2:	0082      	lsls	r2, r0, #2
 80097b4:	4640      	mov	r0, r8
 80097b6:	4649      	mov	r1, r9
 80097b8:	f7f6 fd62 	bl	8000280 <__aeabi_uldivmod>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	4b49      	ldr	r3, [pc, #292]	; (80098e8 <UART_SetConfig+0x38c>)
 80097c2:	fba3 2302 	umull	r2, r3, r3, r2
 80097c6:	095b      	lsrs	r3, r3, #5
 80097c8:	011e      	lsls	r6, r3, #4
 80097ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097cc:	4618      	mov	r0, r3
 80097ce:	f04f 0100 	mov.w	r1, #0
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	1894      	adds	r4, r2, r2
 80097d8:	60bc      	str	r4, [r7, #8]
 80097da:	415b      	adcs	r3, r3
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097e2:	1812      	adds	r2, r2, r0
 80097e4:	eb41 0303 	adc.w	r3, r1, r3
 80097e8:	f04f 0400 	mov.w	r4, #0
 80097ec:	f04f 0500 	mov.w	r5, #0
 80097f0:	00dd      	lsls	r5, r3, #3
 80097f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80097f6:	00d4      	lsls	r4, r2, #3
 80097f8:	4622      	mov	r2, r4
 80097fa:	462b      	mov	r3, r5
 80097fc:	1814      	adds	r4, r2, r0
 80097fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8009800:	414b      	adcs	r3, r1
 8009802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	4618      	mov	r0, r3
 800980a:	f04f 0100 	mov.w	r1, #0
 800980e:	f04f 0200 	mov.w	r2, #0
 8009812:	f04f 0300 	mov.w	r3, #0
 8009816:	008b      	lsls	r3, r1, #2
 8009818:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800981c:	0082      	lsls	r2, r0, #2
 800981e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009822:	f7f6 fd2d 	bl	8000280 <__aeabi_uldivmod>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4b2f      	ldr	r3, [pc, #188]	; (80098e8 <UART_SetConfig+0x38c>)
 800982c:	fba3 1302 	umull	r1, r3, r3, r2
 8009830:	095b      	lsrs	r3, r3, #5
 8009832:	2164      	movs	r1, #100	; 0x64
 8009834:	fb01 f303 	mul.w	r3, r1, r3
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	011b      	lsls	r3, r3, #4
 800983c:	3332      	adds	r3, #50	; 0x32
 800983e:	4a2a      	ldr	r2, [pc, #168]	; (80098e8 <UART_SetConfig+0x38c>)
 8009840:	fba2 2303 	umull	r2, r3, r2, r3
 8009844:	095b      	lsrs	r3, r3, #5
 8009846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800984a:	441e      	add	r6, r3
 800984c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800984e:	4618      	mov	r0, r3
 8009850:	f04f 0100 	mov.w	r1, #0
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	1894      	adds	r4, r2, r2
 800985a:	603c      	str	r4, [r7, #0]
 800985c:	415b      	adcs	r3, r3
 800985e:	607b      	str	r3, [r7, #4]
 8009860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009864:	1812      	adds	r2, r2, r0
 8009866:	eb41 0303 	adc.w	r3, r1, r3
 800986a:	f04f 0400 	mov.w	r4, #0
 800986e:	f04f 0500 	mov.w	r5, #0
 8009872:	00dd      	lsls	r5, r3, #3
 8009874:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009878:	00d4      	lsls	r4, r2, #3
 800987a:	4622      	mov	r2, r4
 800987c:	462b      	mov	r3, r5
 800987e:	eb12 0a00 	adds.w	sl, r2, r0
 8009882:	eb43 0b01 	adc.w	fp, r3, r1
 8009886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	4618      	mov	r0, r3
 800988c:	f04f 0100 	mov.w	r1, #0
 8009890:	f04f 0200 	mov.w	r2, #0
 8009894:	f04f 0300 	mov.w	r3, #0
 8009898:	008b      	lsls	r3, r1, #2
 800989a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800989e:	0082      	lsls	r2, r0, #2
 80098a0:	4650      	mov	r0, sl
 80098a2:	4659      	mov	r1, fp
 80098a4:	f7f6 fcec 	bl	8000280 <__aeabi_uldivmod>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	4b0e      	ldr	r3, [pc, #56]	; (80098e8 <UART_SetConfig+0x38c>)
 80098ae:	fba3 1302 	umull	r1, r3, r3, r2
 80098b2:	095b      	lsrs	r3, r3, #5
 80098b4:	2164      	movs	r1, #100	; 0x64
 80098b6:	fb01 f303 	mul.w	r3, r1, r3
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	3332      	adds	r3, #50	; 0x32
 80098c0:	4a09      	ldr	r2, [pc, #36]	; (80098e8 <UART_SetConfig+0x38c>)
 80098c2:	fba2 2303 	umull	r2, r3, r2, r3
 80098c6:	095b      	lsrs	r3, r3, #5
 80098c8:	f003 020f 	and.w	r2, r3, #15
 80098cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4432      	add	r2, r6
 80098d2:	609a      	str	r2, [r3, #8]
}
 80098d4:	bf00      	nop
 80098d6:	377c      	adds	r7, #124	; 0x7c
 80098d8:	46bd      	mov	sp, r7
 80098da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098de:	bf00      	nop
 80098e0:	40011000 	.word	0x40011000
 80098e4:	40011400 	.word	0x40011400
 80098e8:	51eb851f 	.word	0x51eb851f

080098ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098ec:	b084      	sub	sp, #16
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	f107 001c 	add.w	r0, r7, #28
 80098fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	2b01      	cmp	r3, #1
 8009902:	d122      	bne.n	800994a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009908:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800992c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800992e:	2b01      	cmp	r3, #1
 8009930:	d105      	bne.n	800993e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f9a0 	bl	8009c84 <USB_CoreReset>
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]
 8009948:	e01a      	b.n	8009980 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f994 	bl	8009c84 <USB_CoreReset>
 800995c:	4603      	mov	r3, r0
 800995e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	639a      	str	r2, [r3, #56]	; 0x38
 8009972:	e005      	b.n	8009980 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	2b01      	cmp	r3, #1
 8009984:	d10b      	bne.n	800999e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f043 0206 	orr.w	r2, r3, #6
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f043 0220 	orr.w	r2, r3, #32
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800999e:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099aa:	b004      	add	sp, #16
 80099ac:	4770      	bx	lr

080099ae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b083      	sub	sp, #12
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f043 0201 	orr.w	r2, r3, #1
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f023 0201 	bic.w	r2, r3, #1
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	460b      	mov	r3, r1
 80099fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d115      	bne.n	8009a40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a20:	2001      	movs	r0, #1
 8009a22:	f7f9 fdc3 	bl	80035ac <HAL_Delay>
      ms++;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f91a 	bl	8009c66 <USB_GetMode>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d01e      	beq.n	8009a76 <USB_SetCurrentMode+0x84>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b31      	cmp	r3, #49	; 0x31
 8009a3c:	d9f0      	bls.n	8009a20 <USB_SetCurrentMode+0x2e>
 8009a3e:	e01a      	b.n	8009a76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d115      	bne.n	8009a72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a52:	2001      	movs	r0, #1
 8009a54:	f7f9 fdaa 	bl	80035ac <HAL_Delay>
      ms++;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f901 	bl	8009c66 <USB_GetMode>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d005      	beq.n	8009a76 <USB_SetCurrentMode+0x84>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b31      	cmp	r3, #49	; 0x31
 8009a6e:	d9f0      	bls.n	8009a52 <USB_SetCurrentMode+0x60>
 8009a70:	e001      	b.n	8009a76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e005      	b.n	8009a82 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b32      	cmp	r3, #50	; 0x32
 8009a7a:	d101      	bne.n	8009a80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e000      	b.n	8009a82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	019b      	lsls	r3, r3, #6
 8009a9e:	f043 0220 	orr.w	r2, r3, #32
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	60fb      	str	r3, [r7, #12]
 8009aac:	4a08      	ldr	r2, [pc, #32]	; (8009ad0 <USB_FlushTxFifo+0x44>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d901      	bls.n	8009ab6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e006      	b.n	8009ac4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	f003 0320 	and.w	r3, r3, #32
 8009abe:	2b20      	cmp	r3, #32
 8009ac0:	d0f1      	beq.n	8009aa6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	00030d40 	.word	0x00030d40

08009ad4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009adc:	2300      	movs	r3, #0
 8009ade:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2210      	movs	r2, #16
 8009ae4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	4a08      	ldr	r2, [pc, #32]	; (8009b10 <USB_FlushRxFifo+0x3c>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d901      	bls.n	8009af6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e006      	b.n	8009b04 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f003 0310 	and.w	r3, r3, #16
 8009afe:	2b10      	cmp	r3, #16
 8009b00:	d0f1      	beq.n	8009ae6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	00030d40 	.word	0x00030d40

08009b14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b089      	sub	sp, #36	; 0x24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	4611      	mov	r1, r2
 8009b20:	461a      	mov	r2, r3
 8009b22:	460b      	mov	r3, r1
 8009b24:	71fb      	strb	r3, [r7, #7]
 8009b26:	4613      	mov	r3, r2
 8009b28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009b32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d123      	bne.n	8009b82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b3a:	88bb      	ldrh	r3, [r7, #4]
 8009b3c:	3303      	adds	r3, #3
 8009b3e:	089b      	lsrs	r3, r3, #2
 8009b40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b42:	2300      	movs	r3, #0
 8009b44:	61bb      	str	r3, [r7, #24]
 8009b46:	e018      	b.n	8009b7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	031a      	lsls	r2, r3, #12
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b54:	461a      	mov	r2, r3
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	3301      	adds	r3, #1
 8009b66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	3301      	adds	r3, #1
 8009b72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	3301      	adds	r3, #1
 8009b78:	61bb      	str	r3, [r7, #24]
 8009b7a:	69ba      	ldr	r2, [r7, #24]
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d3e2      	bcc.n	8009b48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3724      	adds	r7, #36	; 0x24
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b08b      	sub	sp, #44	; 0x2c
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ba6:	88fb      	ldrh	r3, [r7, #6]
 8009ba8:	089b      	lsrs	r3, r3, #2
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009bae:	88fb      	ldrh	r3, [r7, #6]
 8009bb0:	f003 0303 	and.w	r3, r3, #3
 8009bb4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	623b      	str	r3, [r7, #32]
 8009bba:	e014      	b.n	8009be6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	3301      	adds	r3, #1
 8009bcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	3301      	adds	r3, #1
 8009bde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	3301      	adds	r3, #1
 8009be4:	623b      	str	r3, [r7, #32]
 8009be6:	6a3a      	ldr	r2, [r7, #32]
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d3e6      	bcc.n	8009bbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009bee:	8bfb      	ldrh	r3, [r7, #30]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d01e      	beq.n	8009c32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f107 0310 	add.w	r3, r7, #16
 8009c04:	6812      	ldr	r2, [r2, #0]
 8009c06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	fa22 f303 	lsr.w	r3, r2, r3
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	701a      	strb	r2, [r3, #0]
      i++;
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	3301      	adds	r3, #1
 8009c24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009c26:	8bfb      	ldrh	r3, [r7, #30]
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009c2c:	8bfb      	ldrh	r3, [r7, #30]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1ea      	bne.n	8009c08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	372c      	adds	r7, #44	; 0x2c
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	4013      	ands	r3, r2
 8009c56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c58:	68fb      	ldr	r3, [r7, #12]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b083      	sub	sp, #12
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	f003 0301 	and.w	r3, r3, #1
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
	...

08009c84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3301      	adds	r3, #1
 8009c94:	60fb      	str	r3, [r7, #12]
 8009c96:	4a13      	ldr	r2, [pc, #76]	; (8009ce4 <USB_CoreReset+0x60>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d901      	bls.n	8009ca0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e01a      	b.n	8009cd6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	daf3      	bge.n	8009c90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	f043 0201 	orr.w	r2, r3, #1
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	60fb      	str	r3, [r7, #12]
 8009cbe:	4a09      	ldr	r2, [pc, #36]	; (8009ce4 <USB_CoreReset+0x60>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d901      	bls.n	8009cc8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e006      	b.n	8009cd6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d0f1      	beq.n	8009cb8 <USB_CoreReset+0x34>

  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	00030d40 	.word	0x00030d40

08009ce8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ce8:	b084      	sub	sp, #16
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	f107 001c 	add.w	r0, r7, #28
 8009cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d04:	461a      	mov	r2, r3
 8009d06:	2300      	movs	r3, #0
 8009d08:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d018      	beq.n	8009d6c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d10a      	bne.n	8009d56 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d4e:	f043 0304 	orr.w	r3, r3, #4
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	e014      	b.n	8009d80 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d64:	f023 0304 	bic.w	r3, r3, #4
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	e009      	b.n	8009d80 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d7a:	f023 0304 	bic.w	r3, r3, #4
 8009d7e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009d80:	2110      	movs	r1, #16
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff fe82 	bl	8009a8c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff fea3 	bl	8009ad4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	e015      	b.n	8009dc0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009da0:	461a      	mov	r2, r3
 8009da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009da6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db4:	461a      	mov	r2, r3
 8009db6:	2300      	movs	r3, #0
 8009db8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	6a3b      	ldr	r3, [r7, #32]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d3e5      	bcc.n	8009d94 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dd4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00b      	beq.n	8009dfa <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009de8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a13      	ldr	r2, [pc, #76]	; (8009e3c <USB_HostInit+0x154>)
 8009dee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a13      	ldr	r2, [pc, #76]	; (8009e40 <USB_HostInit+0x158>)
 8009df4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009df8:	e009      	b.n	8009e0e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2280      	movs	r2, #128	; 0x80
 8009dfe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a10      	ldr	r2, [pc, #64]	; (8009e44 <USB_HostInit+0x15c>)
 8009e04:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a0f      	ldr	r2, [pc, #60]	; (8009e48 <USB_HostInit+0x160>)
 8009e0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d105      	bne.n	8009e20 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	f043 0210 	orr.w	r2, r3, #16
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	699a      	ldr	r2, [r3, #24]
 8009e24:	4b09      	ldr	r3, [pc, #36]	; (8009e4c <USB_HostInit+0x164>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e38:	b004      	add	sp, #16
 8009e3a:	4770      	bx	lr
 8009e3c:	01000200 	.word	0x01000200
 8009e40:	00e00300 	.word	0x00e00300
 8009e44:	00600080 	.word	0x00600080
 8009e48:	004000e0 	.word	0x004000e0
 8009e4c:	a3200008 	.word	0xa3200008

08009e50 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	78fb      	ldrb	r3, [r7, #3]
 8009e7e:	f003 0303 	and.w	r3, r3, #3
 8009e82:	68f9      	ldr	r1, [r7, #12]
 8009e84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009e8c:	78fb      	ldrb	r3, [r7, #3]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d107      	bne.n	8009ea2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e98:	461a      	mov	r2, r3
 8009e9a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009e9e:	6053      	str	r3, [r2, #4]
 8009ea0:	e009      	b.n	8009eb6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d106      	bne.n	8009eb6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009eae:	461a      	mov	r2, r3
 8009eb0:	f241 7370 	movw	r3, #6000	; 0x1770
 8009eb4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009ee4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ef2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009ef4:	2064      	movs	r0, #100	; 0x64
 8009ef6:	f7f9 fb59 	bl	80035ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f06:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009f08:	200a      	movs	r0, #10
 8009f0a:	f7f9 fb4f 	bl	80035ac <HAL_Delay>

  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009f3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d109      	bne.n	8009f5c <USB_DriveVbus+0x44>
 8009f48:	78fb      	ldrb	r3, [r7, #3]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d106      	bne.n	8009f5c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f5a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f66:	d109      	bne.n	8009f7c <USB_DriveVbus+0x64>
 8009f68:	78fb      	ldrb	r3, [r7, #3]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d106      	bne.n	8009f7c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f7a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009f96:	2300      	movs	r3, #0
 8009f98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	0c5b      	lsrs	r3, r3, #17
 8009fa8:	f003 0303 	and.w	r3, r3, #3
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	b29b      	uxth	r3, r3
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
	...

08009fdc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b088      	sub	sp, #32
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	461a      	mov	r2, r3
 8009fea:	4603      	mov	r3, r0
 8009fec:	70fb      	strb	r3, [r7, #3]
 8009fee:	460b      	mov	r3, r1
 8009ff0:	70bb      	strb	r3, [r7, #2]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009ffe:	78fb      	ldrb	r3, [r7, #3]
 800a000:	015a      	lsls	r2, r3, #5
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	4413      	add	r3, r2
 800a006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a00a:	461a      	mov	r2, r3
 800a00c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a010:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a012:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a016:	2b03      	cmp	r3, #3
 800a018:	d87e      	bhi.n	800a118 <USB_HC_Init+0x13c>
 800a01a:	a201      	add	r2, pc, #4	; (adr r2, 800a020 <USB_HC_Init+0x44>)
 800a01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a020:	0800a031 	.word	0x0800a031
 800a024:	0800a0db 	.word	0x0800a0db
 800a028:	0800a031 	.word	0x0800a031
 800a02c:	0800a09d 	.word	0x0800a09d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a030:	78fb      	ldrb	r3, [r7, #3]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	4413      	add	r3, r2
 800a038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a03c:	461a      	mov	r2, r3
 800a03e:	f240 439d 	movw	r3, #1181	; 0x49d
 800a042:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a044:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	da10      	bge.n	800a06e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a04c:	78fb      	ldrb	r3, [r7, #3]
 800a04e:	015a      	lsls	r2, r3, #5
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	4413      	add	r3, r2
 800a054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	78fa      	ldrb	r2, [r7, #3]
 800a05c:	0151      	lsls	r1, r2, #5
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	440a      	add	r2, r1
 800a062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a06a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a06c:	e057      	b.n	800a11e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a076:	2b00      	cmp	r3, #0
 800a078:	d051      	beq.n	800a11e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a07a:	78fb      	ldrb	r3, [r7, #3]
 800a07c:	015a      	lsls	r2, r3, #5
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	4413      	add	r3, r2
 800a082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	78fa      	ldrb	r2, [r7, #3]
 800a08a:	0151      	lsls	r1, r2, #5
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	440a      	add	r2, r1
 800a090:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a094:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a098:	60d3      	str	r3, [r2, #12]
      break;
 800a09a:	e040      	b.n	800a11e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a09c:	78fb      	ldrb	r3, [r7, #3]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	f240 639d 	movw	r3, #1693	; 0x69d
 800a0ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a0b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	da34      	bge.n	800a122 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a0b8:	78fb      	ldrb	r3, [r7, #3]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	78fa      	ldrb	r2, [r7, #3]
 800a0c8:	0151      	lsls	r1, r2, #5
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	440a      	add	r2, r1
 800a0ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a0d8:	e023      	b.n	800a122 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a0da:	78fb      	ldrb	r3, [r7, #3]
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	f240 2325 	movw	r3, #549	; 0x225
 800a0ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a0ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	da17      	bge.n	800a126 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a0f6:	78fb      	ldrb	r3, [r7, #3]
 800a0f8:	015a      	lsls	r2, r3, #5
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	78fa      	ldrb	r2, [r7, #3]
 800a106:	0151      	lsls	r1, r2, #5
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	440a      	add	r2, r1
 800a10c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a110:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a114:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a116:	e006      	b.n	800a126 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	77fb      	strb	r3, [r7, #31]
      break;
 800a11c:	e004      	b.n	800a128 <USB_HC_Init+0x14c>
      break;
 800a11e:	bf00      	nop
 800a120:	e002      	b.n	800a128 <USB_HC_Init+0x14c>
      break;
 800a122:	bf00      	nop
 800a124:	e000      	b.n	800a128 <USB_HC_Init+0x14c>
      break;
 800a126:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a12e:	699a      	ldr	r2, [r3, #24]
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	f003 030f 	and.w	r3, r3, #15
 800a136:	2101      	movs	r1, #1
 800a138:	fa01 f303 	lsl.w	r3, r1, r3
 800a13c:	6939      	ldr	r1, [r7, #16]
 800a13e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a142:	4313      	orrs	r3, r2
 800a144:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a152:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a156:	2b00      	cmp	r3, #0
 800a158:	da03      	bge.n	800a162 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a15a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a15e:	61bb      	str	r3, [r7, #24]
 800a160:	e001      	b.n	800a166 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a162:	2300      	movs	r3, #0
 800a164:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff ff0f 	bl	8009f8a <USB_GetHostSpeed>
 800a16c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a16e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a172:	2b02      	cmp	r3, #2
 800a174:	d106      	bne.n	800a184 <USB_HC_Init+0x1a8>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d003      	beq.n	800a184 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a17c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a180:	617b      	str	r3, [r7, #20]
 800a182:	e001      	b.n	800a188 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a184:	2300      	movs	r3, #0
 800a186:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a188:	787b      	ldrb	r3, [r7, #1]
 800a18a:	059b      	lsls	r3, r3, #22
 800a18c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a190:	78bb      	ldrb	r3, [r7, #2]
 800a192:	02db      	lsls	r3, r3, #11
 800a194:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a198:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a19a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a19e:	049b      	lsls	r3, r3, #18
 800a1a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a1a4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a1a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a1a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a1ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a1b2:	78fb      	ldrb	r3, [r7, #3]
 800a1b4:	0159      	lsls	r1, r3, #5
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	440b      	add	r3, r1
 800a1ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1be:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a1c4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a1c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a1ca:	2b03      	cmp	r3, #3
 800a1cc:	d10f      	bne.n	800a1ee <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a1ce:	78fb      	ldrb	r3, [r7, #3]
 800a1d0:	015a      	lsls	r2, r3, #5
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	78fa      	ldrb	r2, [r7, #3]
 800a1de:	0151      	lsls	r1, r2, #5
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	440a      	add	r2, r1
 800a1e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1ec:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a1ee:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3720      	adds	r7, #32
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08c      	sub	sp, #48	; 0x30
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	4613      	mov	r3, r2
 800a204:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	785b      	ldrb	r3, [r3, #1]
 800a20e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a210:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a214:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d02d      	beq.n	800a27e <USB_HC_StartXfer+0x86>
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	791b      	ldrb	r3, [r3, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d129      	bne.n	800a27e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a22a:	79fb      	ldrb	r3, [r7, #7]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d117      	bne.n	800a260 <USB_HC_StartXfer+0x68>
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	79db      	ldrb	r3, [r3, #7]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d003      	beq.n	800a240 <USB_HC_StartXfer+0x48>
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	79db      	ldrb	r3, [r3, #7]
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d10f      	bne.n	800a260 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	6a3b      	ldr	r3, [r7, #32]
 800a246:	4413      	add	r3, r2
 800a248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	69fa      	ldr	r2, [r7, #28]
 800a250:	0151      	lsls	r1, r2, #5
 800a252:	6a3a      	ldr	r2, [r7, #32]
 800a254:	440a      	add	r2, r1
 800a256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a25a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a25e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a260:	79fb      	ldrb	r3, [r7, #7]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10b      	bne.n	800a27e <USB_HC_StartXfer+0x86>
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	795b      	ldrb	r3, [r3, #5]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d107      	bne.n	800a27e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	785b      	ldrb	r3, [r3, #1]
 800a272:	4619      	mov	r1, r3
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 fa2f 	bl	800a6d8 <USB_DoPing>
      return HAL_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	e0f8      	b.n	800a470 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d018      	beq.n	800a2b8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	8912      	ldrh	r2, [r2, #8]
 800a28e:	4413      	add	r3, r2
 800a290:	3b01      	subs	r3, #1
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	8912      	ldrh	r2, [r2, #8]
 800a296:	fbb3 f3f2 	udiv	r3, r3, r2
 800a29a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a29c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a29e:	8b7b      	ldrh	r3, [r7, #26]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d90b      	bls.n	800a2bc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a2a4:	8b7b      	ldrh	r3, [r7, #26]
 800a2a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a2a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	8912      	ldrh	r2, [r2, #8]
 800a2ae:	fb02 f203 	mul.w	r2, r2, r3
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	611a      	str	r2, [r3, #16]
 800a2b6:	e001      	b.n	800a2bc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	78db      	ldrb	r3, [r3, #3]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d007      	beq.n	800a2d4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a2c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	8912      	ldrh	r2, [r2, #8]
 800a2ca:	fb02 f203 	mul.w	r2, r2, r3
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	611a      	str	r2, [r3, #16]
 800a2d2:	e003      	b.n	800a2dc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	695a      	ldr	r2, [r3, #20]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a2e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2e6:	04d9      	lsls	r1, r3, #19
 800a2e8:	4b63      	ldr	r3, [pc, #396]	; (800a478 <USB_HC_StartXfer+0x280>)
 800a2ea:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2ec:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	7a9b      	ldrb	r3, [r3, #10]
 800a2f2:	075b      	lsls	r3, r3, #29
 800a2f4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2f8:	69f9      	ldr	r1, [r7, #28]
 800a2fa:	0148      	lsls	r0, r1, #5
 800a2fc:	6a39      	ldr	r1, [r7, #32]
 800a2fe:	4401      	add	r1, r0
 800a300:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a304:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a306:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d009      	beq.n	800a322 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	68d9      	ldr	r1, [r3, #12]
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	015a      	lsls	r2, r3, #5
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	4413      	add	r3, r2
 800a31a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a31e:	460a      	mov	r2, r1
 800a320:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bf0c      	ite	eq
 800a332:	2301      	moveq	r3, #1
 800a334:	2300      	movne	r3, #0
 800a336:	b2db      	uxtb	r3, r3
 800a338:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	4413      	add	r3, r2
 800a342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	69fa      	ldr	r2, [r7, #28]
 800a34a:	0151      	lsls	r1, r2, #5
 800a34c:	6a3a      	ldr	r2, [r7, #32]
 800a34e:	440a      	add	r2, r1
 800a350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a354:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a358:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	4413      	add	r3, r2
 800a362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	7e7b      	ldrb	r3, [r7, #25]
 800a36a:	075b      	lsls	r3, r3, #29
 800a36c:	69f9      	ldr	r1, [r7, #28]
 800a36e:	0148      	lsls	r0, r1, #5
 800a370:	6a39      	ldr	r1, [r7, #32]
 800a372:	4401      	add	r1, r0
 800a374:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a378:	4313      	orrs	r3, r2
 800a37a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	015a      	lsls	r2, r3, #5
 800a380:	6a3b      	ldr	r3, [r7, #32]
 800a382:	4413      	add	r3, r2
 800a384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a392:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	78db      	ldrb	r3, [r3, #3]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d004      	beq.n	800a3a6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3a2:	613b      	str	r3, [r7, #16]
 800a3a4:	e003      	b.n	800a3ae <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3ac:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3b4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	015a      	lsls	r2, r3, #5
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	4413      	add	r3, r2
 800a3be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	e04e      	b.n	800a470 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	78db      	ldrb	r3, [r3, #3]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d149      	bne.n	800a46e <USB_HC_StartXfer+0x276>
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d045      	beq.n	800a46e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	79db      	ldrb	r3, [r3, #7]
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	d830      	bhi.n	800a44c <USB_HC_StartXfer+0x254>
 800a3ea:	a201      	add	r2, pc, #4	; (adr r2, 800a3f0 <USB_HC_StartXfer+0x1f8>)
 800a3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f0:	0800a401 	.word	0x0800a401
 800a3f4:	0800a425 	.word	0x0800a425
 800a3f8:	0800a401 	.word	0x0800a401
 800a3fc:	0800a425 	.word	0x0800a425
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	3303      	adds	r3, #3
 800a406:	089b      	lsrs	r3, r3, #2
 800a408:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a40a:	8afa      	ldrh	r2, [r7, #22]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	b29b      	uxth	r3, r3
 800a412:	429a      	cmp	r2, r3
 800a414:	d91c      	bls.n	800a450 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	f043 0220 	orr.w	r2, r3, #32
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	619a      	str	r2, [r3, #24]
        }
        break;
 800a422:	e015      	b.n	800a450 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	3303      	adds	r3, #3
 800a42a:	089b      	lsrs	r3, r3, #2
 800a42c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a42e:	8afa      	ldrh	r2, [r7, #22]
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	b29b      	uxth	r3, r3
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d90a      	bls.n	800a454 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	619a      	str	r2, [r3, #24]
        }
        break;
 800a44a:	e003      	b.n	800a454 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a44c:	bf00      	nop
 800a44e:	e002      	b.n	800a456 <USB_HC_StartXfer+0x25e>
        break;
 800a450:	bf00      	nop
 800a452:	e000      	b.n	800a456 <USB_HC_StartXfer+0x25e>
        break;
 800a454:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	68d9      	ldr	r1, [r3, #12]
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	785a      	ldrb	r2, [r3, #1]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	b29b      	uxth	r3, r3
 800a464:	2000      	movs	r0, #0
 800a466:	9000      	str	r0, [sp, #0]
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff fb53 	bl	8009b14 <USB_WritePacket>
  }

  return HAL_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3728      	adds	r7, #40	; 0x28
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	1ff80000 	.word	0x1ff80000

0800a47c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	b29b      	uxth	r3, r3
}
 800a492:	4618      	mov	r0, r3
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b089      	sub	sp, #36	; 0x24
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800a4ae:	78fb      	ldrb	r3, [r7, #3]
 800a4b0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	0c9b      	lsrs	r3, r3, #18
 800a4c6:	f003 0303 	and.w	r3, r3, #3
 800a4ca:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	015a      	lsls	r2, r3, #5
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	0fdb      	lsrs	r3, r3, #31
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f003 0320 	and.w	r3, r3, #32
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	d104      	bne.n	800a4f8 <USB_HC_Halt+0x5a>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	e0e8      	b.n	800a6ca <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <USB_HC_Halt+0x66>
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	2b02      	cmp	r3, #2
 800a502:	d173      	bne.n	800a5ec <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	0151      	lsls	r1, r2, #5
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	440a      	add	r2, r1
 800a51a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a51e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a522:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f003 0320 	and.w	r3, r3, #32
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f040 80cb 	bne.w	800a6c8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a536:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d143      	bne.n	800a5c6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	4413      	add	r3, r2
 800a546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	0151      	lsls	r1, r2, #5
 800a550:	69ba      	ldr	r2, [r7, #24]
 800a552:	440a      	add	r2, r1
 800a554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a55c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	015a      	lsls	r2, r3, #5
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	4413      	add	r3, r2
 800a566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	0151      	lsls	r1, r2, #5
 800a570:	69ba      	ldr	r2, [r7, #24]
 800a572:	440a      	add	r2, r1
 800a574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a57c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	015a      	lsls	r2, r3, #5
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	4413      	add	r3, r2
 800a586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	0151      	lsls	r1, r2, #5
 800a590:	69ba      	ldr	r2, [r7, #24]
 800a592:	440a      	add	r2, r1
 800a594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a598:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a59c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	61fb      	str	r3, [r7, #28]
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5aa:	d81d      	bhi.n	800a5e8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5c2:	d0ec      	beq.n	800a59e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5c4:	e080      	b.n	800a6c8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	015a      	lsls	r2, r3, #5
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	0151      	lsls	r1, r2, #5
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	440a      	add	r2, r1
 800a5dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5e6:	e06f      	b.n	800a6c8 <USB_HC_Halt+0x22a>
            break;
 800a5e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5ea:	e06d      	b.n	800a6c8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	015a      	lsls	r2, r3, #5
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	0151      	lsls	r1, r2, #5
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	440a      	add	r2, r1
 800a602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a60a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d143      	bne.n	800a6a4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	015a      	lsls	r2, r3, #5
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	4413      	add	r3, r2
 800a624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	0151      	lsls	r1, r2, #5
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	440a      	add	r2, r1
 800a632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a636:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a63a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	4413      	add	r3, r2
 800a644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	0151      	lsls	r1, r2, #5
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	440a      	add	r2, r1
 800a652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a656:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a65a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	4413      	add	r3, r2
 800a664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	0151      	lsls	r1, r2, #5
 800a66e:	69ba      	ldr	r2, [r7, #24]
 800a670:	440a      	add	r2, r1
 800a672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a676:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a67a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	3301      	adds	r3, #1
 800a680:	61fb      	str	r3, [r7, #28]
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a688:	d81d      	bhi.n	800a6c6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	4413      	add	r3, r2
 800a692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a69c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6a0:	d0ec      	beq.n	800a67c <USB_HC_Halt+0x1de>
 800a6a2:	e011      	b.n	800a6c8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	0151      	lsls	r1, r2, #5
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	440a      	add	r2, r1
 800a6ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6c2:	6013      	str	r3, [r2, #0]
 800a6c4:	e000      	b.n	800a6c8 <USB_HC_Halt+0x22a>
          break;
 800a6c6:	bf00      	nop
    }
  }

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3724      	adds	r7, #36	; 0x24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
	...

0800a6d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	04da      	lsls	r2, r3, #19
 800a6f4:	4b15      	ldr	r3, [pc, #84]	; (800a74c <USB_DoPing+0x74>)
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	0151      	lsls	r1, r2, #5
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	440a      	add	r2, r1
 800a700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a708:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	015a      	lsls	r2, r3, #5
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	4413      	add	r3, r2
 800a712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a720:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a728:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	4413      	add	r3, r2
 800a732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a736:	461a      	mov	r2, r3
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	371c      	adds	r7, #28
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	1ff80000 	.word	0x1ff80000

0800a750 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a75c:	2300      	movs	r3, #0
 800a75e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff f935 	bl	80099d0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a766:	2110      	movs	r1, #16
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7ff f98f 	bl	8009a8c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7ff f9b0 	bl	8009ad4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a774:	2300      	movs	r3, #0
 800a776:	613b      	str	r3, [r7, #16]
 800a778:	e01f      	b.n	800a7ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	4413      	add	r3, r2
 800a782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a790:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a798:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	613b      	str	r3, [r7, #16]
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2b0f      	cmp	r3, #15
 800a7be:	d9dc      	bls.n	800a77a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	613b      	str	r3, [r7, #16]
 800a7c4:	e034      	b.n	800a830 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	015a      	lsls	r2, r3, #5
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	015a      	lsls	r2, r3, #5
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	3301      	adds	r3, #1
 800a804:	617b      	str	r3, [r7, #20]
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a80c:	d80c      	bhi.n	800a828 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	015a      	lsls	r2, r3, #5
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	4413      	add	r3, r2
 800a816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a824:	d0ec      	beq.n	800a800 <USB_StopHost+0xb0>
 800a826:	e000      	b.n	800a82a <USB_StopHost+0xda>
        break;
 800a828:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	3301      	adds	r3, #1
 800a82e:	613b      	str	r3, [r7, #16]
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	2b0f      	cmp	r3, #15
 800a834:	d9c7      	bls.n	800a7c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a83c:	461a      	mov	r2, r3
 800a83e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a842:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a84a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7ff f8ae 	bl	80099ae <USB_EnableGlobalInt>

  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3718      	adds	r7, #24
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a85c:	b590      	push	{r4, r7, lr}
 800a85e:	b089      	sub	sp, #36	; 0x24
 800a860:	af04      	add	r7, sp, #16
 800a862:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a864:	2301      	movs	r3, #1
 800a866:	2202      	movs	r2, #2
 800a868:	2102      	movs	r1, #2
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fcb2 	bl	800b1d4 <USBH_FindInterface>
 800a870:	4603      	mov	r3, r0
 800a872:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	2bff      	cmp	r3, #255	; 0xff
 800a878:	d002      	beq.n	800a880 <USBH_CDC_InterfaceInit+0x24>
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d901      	bls.n	800a884 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a880:	2302      	movs	r3, #2
 800a882:	e13d      	b.n	800ab00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a884:	7bfb      	ldrb	r3, [r7, #15]
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fc87 	bl	800b19c <USBH_SelectInterface>
 800a88e:	4603      	mov	r3, r0
 800a890:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a892:	7bbb      	ldrb	r3, [r7, #14]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a898:	2302      	movs	r3, #2
 800a89a:	e131      	b.n	800ab00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a8a2:	2050      	movs	r0, #80	; 0x50
 800a8a4:	f005 fdb0 	bl	8010408 <malloc>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8b2:	69db      	ldr	r3, [r3, #28]
 800a8b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e11f      	b.n	800ab00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a8c0:	2250      	movs	r2, #80	; 0x50
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	68b8      	ldr	r0, [r7, #8]
 800a8c6:	f005 fdbd 	bl	8010444 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	211a      	movs	r1, #26
 800a8d0:	fb01 f303 	mul.w	r3, r1, r3
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	b25b      	sxtb	r3, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	da15      	bge.n	800a90e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	211a      	movs	r1, #26
 800a8e8:	fb01 f303 	mul.w	r3, r1, r3
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8f2:	781a      	ldrb	r2, [r3, #0]
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	211a      	movs	r1, #26
 800a8fe:	fb01 f303 	mul.w	r3, r1, r3
 800a902:	4413      	add	r3, r2
 800a904:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a908:	881a      	ldrh	r2, [r3, #0]
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	785b      	ldrb	r3, [r3, #1]
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f002 f88c 	bl	800ca32 <USBH_AllocPipe>
 800a91a:	4603      	mov	r3, r0
 800a91c:	461a      	mov	r2, r3
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	7819      	ldrb	r1, [r3, #0]
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	7858      	ldrb	r0, [r3, #1]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	8952      	ldrh	r2, [r2, #10]
 800a93a:	9202      	str	r2, [sp, #8]
 800a93c:	2203      	movs	r2, #3
 800a93e:	9201      	str	r2, [sp, #4]
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	4623      	mov	r3, r4
 800a944:	4602      	mov	r2, r0
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f002 f844 	bl	800c9d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2200      	movs	r2, #0
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f005 fca7 	bl	80102a8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a95a:	2300      	movs	r3, #0
 800a95c:	2200      	movs	r2, #0
 800a95e:	210a      	movs	r1, #10
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fc37 	bl	800b1d4 <USBH_FindInterface>
 800a966:	4603      	mov	r3, r0
 800a968:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a96a:	7bfb      	ldrb	r3, [r7, #15]
 800a96c:	2bff      	cmp	r3, #255	; 0xff
 800a96e:	d002      	beq.n	800a976 <USBH_CDC_InterfaceInit+0x11a>
 800a970:	7bfb      	ldrb	r3, [r7, #15]
 800a972:	2b01      	cmp	r3, #1
 800a974:	d901      	bls.n	800a97a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a976:	2302      	movs	r3, #2
 800a978:	e0c2      	b.n	800ab00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	211a      	movs	r1, #26
 800a980:	fb01 f303 	mul.w	r3, r1, r3
 800a984:	4413      	add	r3, r2
 800a986:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	b25b      	sxtb	r3, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	da16      	bge.n	800a9c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a992:	7bfb      	ldrb	r3, [r7, #15]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	211a      	movs	r1, #26
 800a998:	fb01 f303 	mul.w	r3, r1, r3
 800a99c:	4413      	add	r3, r2
 800a99e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a9a2:	781a      	ldrb	r2, [r3, #0]
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	211a      	movs	r1, #26
 800a9ae:	fb01 f303 	mul.w	r3, r1, r3
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a9b8:	881a      	ldrh	r2, [r3, #0]
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	835a      	strh	r2, [r3, #26]
 800a9be:	e015      	b.n	800a9ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	211a      	movs	r1, #26
 800a9c6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a9d0:	781a      	ldrb	r2, [r3, #0]
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	211a      	movs	r1, #26
 800a9dc:	fb01 f303 	mul.w	r3, r1, r3
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a9e6:	881a      	ldrh	r2, [r3, #0]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	211a      	movs	r1, #26
 800a9f2:	fb01 f303 	mul.w	r3, r1, r3
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	b25b      	sxtb	r3, r3
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	da16      	bge.n	800aa32 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	211a      	movs	r1, #26
 800aa0a:	fb01 f303 	mul.w	r3, r1, r3
 800aa0e:	4413      	add	r3, r2
 800aa10:	f203 3356 	addw	r3, r3, #854	; 0x356
 800aa14:	781a      	ldrb	r2, [r3, #0]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800aa1a:	7bfb      	ldrb	r3, [r7, #15]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	211a      	movs	r1, #26
 800aa20:	fb01 f303 	mul.w	r3, r1, r3
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800aa2a:	881a      	ldrh	r2, [r3, #0]
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	835a      	strh	r2, [r3, #26]
 800aa30:	e015      	b.n	800aa5e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	211a      	movs	r1, #26
 800aa38:	fb01 f303 	mul.w	r3, r1, r3
 800aa3c:	4413      	add	r3, r2
 800aa3e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	211a      	movs	r1, #26
 800aa4e:	fb01 f303 	mul.w	r3, r1, r3
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800aa58:	881a      	ldrh	r2, [r3, #0]
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	7b9b      	ldrb	r3, [r3, #14]
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f001 ffe4 	bl	800ca32 <USBH_AllocPipe>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	7bdb      	ldrb	r3, [r3, #15]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 ffda 	bl	800ca32 <USBH_AllocPipe>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	461a      	mov	r2, r3
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	7b59      	ldrb	r1, [r3, #13]
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	7b98      	ldrb	r0, [r3, #14]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	8b12      	ldrh	r2, [r2, #24]
 800aa9e:	9202      	str	r2, [sp, #8]
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	9201      	str	r2, [sp, #4]
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	4623      	mov	r3, r4
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f001 ff92 	bl	800c9d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	7b19      	ldrb	r1, [r3, #12]
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	7bd8      	ldrb	r0, [r3, #15]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	8b52      	ldrh	r2, [r2, #26]
 800aac8:	9202      	str	r2, [sp, #8]
 800aaca:	2202      	movs	r2, #2
 800aacc:	9201      	str	r2, [sp, #4]
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	4623      	mov	r3, r4
 800aad2:	4602      	mov	r2, r0
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f001 ff7d 	bl	800c9d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	7b5b      	ldrb	r3, [r3, #13]
 800aae6:	2200      	movs	r2, #0
 800aae8:	4619      	mov	r1, r3
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f005 fbdc 	bl	80102a8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	7b1b      	ldrb	r3, [r3, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f005 fbd5 	bl	80102a8 <USBH_LL_SetToggle>

  return USBH_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd90      	pop	{r4, r7, pc}

0800ab08 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab16:	69db      	ldr	r3, [r3, #28]
 800ab18:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00e      	beq.n	800ab40 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f001 ff72 	bl	800ca12 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f001 ff9d 	bl	800ca74 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	7b1b      	ldrb	r3, [r3, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00e      	beq.n	800ab66 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	7b1b      	ldrb	r3, [r3, #12]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f001 ff5f 	bl	800ca12 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	7b1b      	ldrb	r3, [r3, #12]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 ff8a 	bl	800ca74 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	7b5b      	ldrb	r3, [r3, #13]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00e      	beq.n	800ab8c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	7b5b      	ldrb	r3, [r3, #13]
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f001 ff4c 	bl	800ca12 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	7b5b      	ldrb	r3, [r3, #13]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f001 ff77 	bl	800ca74 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00b      	beq.n	800abb0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab9e:	69db      	ldr	r3, [r3, #28]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f005 fc39 	bl	8010418 <free>
    phost->pActiveClass->pData = 0U;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abac:	2200      	movs	r2, #0
 800abae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	3340      	adds	r3, #64	; 0x40
 800abd0:	4619      	mov	r1, r3
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f8b1 	bl	800ad3a <GetLineCoding>
 800abd8:	4603      	mov	r3, r0
 800abda:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800abdc:	7afb      	ldrb	r3, [r7, #11]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d105      	bne.n	800abee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abe8:	2102      	movs	r1, #2
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800abee:	7afb      	ldrb	r3, [r7, #11]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac00:	2301      	movs	r3, #1
 800ac02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ac04:	2300      	movs	r3, #0
 800ac06:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac0e:	69db      	ldr	r3, [r3, #28]
 800ac10:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ac18:	2b04      	cmp	r3, #4
 800ac1a:	d877      	bhi.n	800ad0c <USBH_CDC_Process+0x114>
 800ac1c:	a201      	add	r2, pc, #4	; (adr r2, 800ac24 <USBH_CDC_Process+0x2c>)
 800ac1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac22:	bf00      	nop
 800ac24:	0800ac39 	.word	0x0800ac39
 800ac28:	0800ac3f 	.word	0x0800ac3f
 800ac2c:	0800ac6f 	.word	0x0800ac6f
 800ac30:	0800ace3 	.word	0x0800ace3
 800ac34:	0800acf1 	.word	0x0800acf1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac3c:	e06d      	b.n	800ad1a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f897 	bl	800ad78 <SetLineCoding>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d104      	bne.n	800ac5e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2202      	movs	r2, #2
 800ac58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ac5c:	e058      	b.n	800ad10 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d055      	beq.n	800ad10 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2204      	movs	r2, #4
 800ac68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ac6c:	e050      	b.n	800ad10 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	3340      	adds	r3, #64	; 0x40
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f860 	bl	800ad3a <GetLineCoding>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ac7e:	7bbb      	ldrb	r3, [r7, #14]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d126      	bne.n	800acd2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac96:	791b      	ldrb	r3, [r3, #4]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d13b      	bne.n	800ad14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aca6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d133      	bne.n	800ad14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acb6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800acb8:	429a      	cmp	r2, r3
 800acba:	d12b      	bne.n	800ad14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acc4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d124      	bne.n	800ad14 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f982 	bl	800afd4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800acd0:	e020      	b.n	800ad14 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800acd2:	7bbb      	ldrb	r3, [r7, #14]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d01d      	beq.n	800ad14 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	2204      	movs	r2, #4
 800acdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ace0:	e018      	b.n	800ad14 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f867 	bl	800adb6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f8f6 	bl	800aeda <CDC_ProcessReception>
      break;
 800acee:	e014      	b.n	800ad1a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800acf0:	2100      	movs	r1, #0
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f001 f94d 	bl	800bf92 <USBH_ClrFeature>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10a      	bne.n	800ad18 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ad0a:	e005      	b.n	800ad18 <USBH_CDC_Process+0x120>

    default:
      break;
 800ad0c:	bf00      	nop
 800ad0e:	e004      	b.n	800ad1a <USBH_CDC_Process+0x122>
      break;
 800ad10:	bf00      	nop
 800ad12:	e002      	b.n	800ad1a <USBH_CDC_Process+0x122>
      break;
 800ad14:	bf00      	nop
 800ad16:	e000      	b.n	800ad1a <USBH_CDC_Process+0x122>
      break;
 800ad18:	bf00      	nop

  }

  return status;
 800ad1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	22a1      	movs	r2, #161	; 0xa1
 800ad48:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2221      	movs	r2, #33	; 0x21
 800ad4e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2207      	movs	r2, #7
 800ad60:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	2207      	movs	r2, #7
 800ad66:	4619      	mov	r1, r3
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f001 faf2 	bl	800c352 <USBH_CtlReq>
 800ad6e:	4603      	mov	r3, r0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2221      	movs	r2, #33	; 0x21
 800ad86:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2220      	movs	r2, #32
 800ad8c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2207      	movs	r2, #7
 800ad9e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	2207      	movs	r2, #7
 800ada4:	4619      	mov	r1, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f001 fad3 	bl	800c352 <USBH_CtlReq>
 800adac:	4603      	mov	r3, r0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b086      	sub	sp, #24
 800adba:	af02      	add	r7, sp, #8
 800adbc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adc4:	69db      	ldr	r3, [r3, #28]
 800adc6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800adc8:	2300      	movs	r3, #0
 800adca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800add2:	2b01      	cmp	r3, #1
 800add4:	d002      	beq.n	800addc <CDC_ProcessTransmission+0x26>
 800add6:	2b02      	cmp	r3, #2
 800add8:	d023      	beq.n	800ae22 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800adda:	e07a      	b.n	800aed2 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	8b12      	ldrh	r2, [r2, #24]
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d90b      	bls.n	800ae00 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	69d9      	ldr	r1, [r3, #28]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	8b1a      	ldrh	r2, [r3, #24]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	7b5b      	ldrb	r3, [r3, #13]
 800adf4:	2001      	movs	r0, #1
 800adf6:	9000      	str	r0, [sp, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 fda8 	bl	800c94e <USBH_BulkSendData>
 800adfe:	e00b      	b.n	800ae18 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	7b5b      	ldrb	r3, [r3, #13]
 800ae0e:	2001      	movs	r0, #1
 800ae10:	9000      	str	r0, [sp, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f001 fd9b 	bl	800c94e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ae20:	e057      	b.n	800aed2 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	7b5b      	ldrb	r3, [r3, #13]
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f005 fa13 	bl	8010254 <USBH_LL_GetURBState>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ae32:	7afb      	ldrb	r3, [r7, #11]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d136      	bne.n	800aea6 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	8b12      	ldrh	r2, [r2, #24]
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d90e      	bls.n	800ae62 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	8b12      	ldrh	r2, [r2, #24]
 800ae4c:	1a9a      	subs	r2, r3, r2
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	8b12      	ldrh	r2, [r2, #24]
 800ae5a:	441a      	add	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	61da      	str	r2, [r3, #28]
 800ae60:	e002      	b.n	800ae68 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d004      	beq.n	800ae7a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800ae78:	e006      	b.n	800ae88 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f892 	bl	800afac <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2204      	movs	r2, #4
 800ae8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f001 ffd8 	bl	800ce54 <osMessageQueuePut>
      break;
 800aea4:	e014      	b.n	800aed0 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800aea6:	7afb      	ldrb	r3, [r7, #11]
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d111      	bne.n	800aed0 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2204      	movs	r2, #4
 800aeb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aec8:	2300      	movs	r3, #0
 800aeca:	2200      	movs	r2, #0
 800aecc:	f001 ffc2 	bl	800ce54 <osMessageQueuePut>
      break;
 800aed0:	bf00      	nop
  }
}
 800aed2:	bf00      	nop
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b086      	sub	sp, #24
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aee8:	69db      	ldr	r3, [r3, #28]
 800aeea:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aeec:	2300      	movs	r3, #0
 800aeee:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800aef6:	2b03      	cmp	r3, #3
 800aef8:	d002      	beq.n	800af00 <CDC_ProcessReception+0x26>
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d00e      	beq.n	800af1c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800aefe:	e051      	b.n	800afa4 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	6a19      	ldr	r1, [r3, #32]
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	8b5a      	ldrh	r2, [r3, #26]
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	7b1b      	ldrb	r3, [r3, #12]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f001 fd43 	bl	800c998 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2204      	movs	r2, #4
 800af16:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800af1a:	e043      	b.n	800afa4 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	7b1b      	ldrb	r3, [r3, #12]
 800af20:	4619      	mov	r1, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f005 f996 	bl	8010254 <USBH_LL_GetURBState>
 800af28:	4603      	mov	r3, r0
 800af2a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800af2c:	7cfb      	ldrb	r3, [r7, #19]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d137      	bne.n	800afa2 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	7b1b      	ldrb	r3, [r3, #12]
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f005 f8f9 	bl	8010130 <USBH_LL_GetLastXferSize>
 800af3e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	429a      	cmp	r2, r3
 800af48:	d016      	beq.n	800af78 <CDC_ProcessReception+0x9e>
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	8b5b      	ldrh	r3, [r3, #26]
 800af4e:	461a      	mov	r2, r3
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4293      	cmp	r3, r2
 800af54:	d910      	bls.n	800af78 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	1ad2      	subs	r2, r2, r3
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	6a1a      	ldr	r2, [r3, #32]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	441a      	add	r2, r3
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2203      	movs	r2, #3
 800af72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800af76:	e006      	b.n	800af86 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f81d 	bl	800afc0 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2204      	movs	r2, #4
 800af8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af9a:	2300      	movs	r3, #0
 800af9c:	2200      	movs	r2, #0
 800af9e:	f001 ff59 	bl	800ce54 <osMessageQueuePut>
      break;
 800afa2:	bf00      	nop
  }
}
 800afa4:	bf00      	nop
 800afa6:	3718      	adds	r7, #24
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800afdc:	bf00      	nop
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	4613      	mov	r3, r2
 800aff4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800affc:	2302      	movs	r3, #2
 800affe:	e044      	b.n	800b08a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	79fa      	ldrb	r2, [r7, #7]
 800b004:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 f841 	bl	800b0a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d003      	beq.n	800b04c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800b04c:	2200      	movs	r2, #0
 800b04e:	2104      	movs	r1, #4
 800b050:	2010      	movs	r0, #16
 800b052:	f001 fe8c 	bl	800cd6e <osMessageQueueNew>
 800b056:	4602      	mov	r2, r0
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800b05e:	4b0d      	ldr	r3, [pc, #52]	; (800b094 <USBH_Init+0xac>)
 800b060:	4a0d      	ldr	r2, [pc, #52]	; (800b098 <USBH_Init+0xb0>)
 800b062:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800b064:	4b0b      	ldr	r3, [pc, #44]	; (800b094 <USBH_Init+0xac>)
 800b066:	2280      	movs	r2, #128	; 0x80
 800b068:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800b06a:	4b0a      	ldr	r3, [pc, #40]	; (800b094 <USBH_Init+0xac>)
 800b06c:	2218      	movs	r2, #24
 800b06e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800b070:	4a08      	ldr	r2, [pc, #32]	; (800b094 <USBH_Init+0xac>)
 800b072:	68f9      	ldr	r1, [r7, #12]
 800b074:	4809      	ldr	r0, [pc, #36]	; (800b09c <USBH_Init+0xb4>)
 800b076:	f001 fdcd 	bl	800cc14 <osThreadNew>
 800b07a:	4602      	mov	r2, r0
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f004 ffa0 	bl	800ffc8 <USBH_LL_Init>

  return USBH_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	20004f60 	.word	0x20004f60
 800b098:	08010f08 	.word	0x08010f08
 800b09c:	0800bd09 	.word	0x0800bd09

0800b0a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	e009      	b.n	800b0c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	33e0      	adds	r3, #224	; 0xe0
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	2200      	movs	r2, #0
 800b0be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	60fb      	str	r3, [r7, #12]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2b0e      	cmp	r3, #14
 800b0ca:	d9f2      	bls.n	800b0b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	60fb      	str	r3, [r7, #12]
 800b0d0:	e009      	b.n	800b0e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b0dc:	2200      	movs	r2, #0
 800b0de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	60fb      	str	r3, [r7, #12]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0ec:	d3f1      	bcc.n	800b0d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2240      	movs	r2, #64	; 0x40
 800b112:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2201      	movs	r2, #1
 800b126:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d016      	beq.n	800b18a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10e      	bne.n	800b184 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b16c:	1c59      	adds	r1, r3, #1
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	33de      	adds	r3, #222	; 0xde
 800b178:	6839      	ldr	r1, [r7, #0]
 800b17a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b17e:	2300      	movs	r3, #0
 800b180:	73fb      	strb	r3, [r7, #15]
 800b182:	e004      	b.n	800b18e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b184:	2302      	movs	r3, #2
 800b186:	73fb      	strb	r3, [r7, #15]
 800b188:	e001      	b.n	800b18e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b18a:	2302      	movs	r3, #2
 800b18c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b1b2:	78fa      	ldrb	r2, [r7, #3]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d204      	bcs.n	800b1c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	78fa      	ldrb	r2, [r7, #3]
 800b1bc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b1c0:	e001      	b.n	800b1c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	4608      	mov	r0, r1
 800b1de:	4611      	mov	r1, r2
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	70fb      	strb	r3, [r7, #3]
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	70bb      	strb	r3, [r7, #2]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b1fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b1fe:	e025      	b.n	800b24c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b200:	7dfb      	ldrb	r3, [r7, #23]
 800b202:	221a      	movs	r2, #26
 800b204:	fb02 f303 	mul.w	r3, r2, r3
 800b208:	3308      	adds	r3, #8
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	4413      	add	r3, r2
 800b20e:	3302      	adds	r3, #2
 800b210:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	795b      	ldrb	r3, [r3, #5]
 800b216:	78fa      	ldrb	r2, [r7, #3]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d002      	beq.n	800b222 <USBH_FindInterface+0x4e>
 800b21c:	78fb      	ldrb	r3, [r7, #3]
 800b21e:	2bff      	cmp	r3, #255	; 0xff
 800b220:	d111      	bne.n	800b246 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b226:	78ba      	ldrb	r2, [r7, #2]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d002      	beq.n	800b232 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b22c:	78bb      	ldrb	r3, [r7, #2]
 800b22e:	2bff      	cmp	r3, #255	; 0xff
 800b230:	d109      	bne.n	800b246 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b236:	787a      	ldrb	r2, [r7, #1]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d002      	beq.n	800b242 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b23c:	787b      	ldrb	r3, [r7, #1]
 800b23e:	2bff      	cmp	r3, #255	; 0xff
 800b240:	d101      	bne.n	800b246 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b242:	7dfb      	ldrb	r3, [r7, #23]
 800b244:	e006      	b.n	800b254 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b246:	7dfb      	ldrb	r3, [r7, #23]
 800b248:	3301      	adds	r3, #1
 800b24a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b24c:	7dfb      	ldrb	r3, [r7, #23]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d9d6      	bls.n	800b200 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b252:	23ff      	movs	r3, #255	; 0xff
}
 800b254:	4618      	mov	r0, r3
 800b256:	371c      	adds	r7, #28
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f004 fee9 	bl	8010040 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b26e:	2101      	movs	r1, #1
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f005 f802 	bl	801027a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b088      	sub	sp, #32
 800b284:	af04      	add	r7, sp, #16
 800b286:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b288:	2302      	movs	r3, #2
 800b28a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b28c:	2300      	movs	r3, #0
 800b28e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d102      	bne.n	800b2a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2203      	movs	r2, #3
 800b2a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b0b      	cmp	r3, #11
 800b2aa:	f200 823c 	bhi.w	800b726 <USBH_Process+0x4a6>
 800b2ae:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <USBH_Process+0x34>)
 800b2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b4:	0800b2e5 	.word	0x0800b2e5
 800b2b8:	0800b333 	.word	0x0800b333
 800b2bc:	0800b3b7 	.word	0x0800b3b7
 800b2c0:	0800b6a5 	.word	0x0800b6a5
 800b2c4:	0800b727 	.word	0x0800b727
 800b2c8:	0800b477 	.word	0x0800b477
 800b2cc:	0800b62f 	.word	0x0800b62f
 800b2d0:	0800b4c9 	.word	0x0800b4c9
 800b2d4:	0800b505 	.word	0x0800b505
 800b2d8:	0800b53f 	.word	0x0800b53f
 800b2dc:	0800b587 	.word	0x0800b587
 800b2e0:	0800b68d 	.word	0x0800b68d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 821c 	beq.w	800b72a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b2f8:	20c8      	movs	r0, #200	; 0xc8
 800b2fa:	f005 f805 	bl	8010308 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f004 fefb 	bl	80100fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b328:	2300      	movs	r3, #0
 800b32a:	2200      	movs	r2, #0
 800b32c:	f001 fd92 	bl	800ce54 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800b330:	e1fb      	b.n	800b72a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d107      	bne.n	800b34c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2202      	movs	r2, #2
 800b348:	701a      	strb	r2, [r3, #0]
 800b34a:	e025      	b.n	800b398 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b356:	d914      	bls.n	800b382 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b35e:	3301      	adds	r3, #1
 800b360:	b2da      	uxtb	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b36e:	2b03      	cmp	r3, #3
 800b370:	d903      	bls.n	800b37a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	220d      	movs	r2, #13
 800b376:	701a      	strb	r2, [r3, #0]
 800b378:	e00e      	b.n	800b398 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	701a      	strb	r2, [r3, #0]
 800b380:	e00a      	b.n	800b398 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b388:	f103 020a 	add.w	r2, r3, #10
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b392:	200a      	movs	r0, #10
 800b394:	f004 ffb8 	bl	8010308 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f001 fd50 	bl	800ce54 <osMessageQueuePut>
#endif
#endif
      break;
 800b3b4:	e1c0      	b.n	800b738 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d005      	beq.n	800b3cc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3c6:	2104      	movs	r1, #4
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b3cc:	2064      	movs	r0, #100	; 0x64
 800b3ce:	f004 ff9b 	bl	8010308 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f004 fe6a 	bl	80100ac <USBH_LL_GetSpeed>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	461a      	mov	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2205      	movs	r2, #5
 800b3e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f001 fb21 	bl	800ca32 <USBH_AllocPipe>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b3f8:	2180      	movs	r1, #128	; 0x80
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f001 fb19 	bl	800ca32 <USBH_AllocPipe>
 800b400:	4603      	mov	r3, r0
 800b402:	461a      	mov	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	7919      	ldrb	r1, [r3, #4]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b41c:	b292      	uxth	r2, r2
 800b41e:	9202      	str	r2, [sp, #8]
 800b420:	2200      	movs	r2, #0
 800b422:	9201      	str	r2, [sp, #4]
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	4603      	mov	r3, r0
 800b428:	2280      	movs	r2, #128	; 0x80
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f001 fad2 	bl	800c9d4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	7959      	ldrb	r1, [r3, #5]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b444:	b292      	uxth	r2, r2
 800b446:	9202      	str	r2, [sp, #8]
 800b448:	2200      	movs	r2, #0
 800b44a:	9201      	str	r2, [sp, #4]
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	4603      	mov	r3, r0
 800b450:	2200      	movs	r2, #0
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f001 fabe 	bl	800c9d4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b46c:	2300      	movs	r3, #0
 800b46e:	2200      	movs	r2, #0
 800b470:	f001 fcf0 	bl	800ce54 <osMessageQueuePut>
#endif
#endif
      break;
 800b474:	e160      	b.n	800b738 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f964 	bl	800b744 <USBH_HandleEnum>
 800b47c:	4603      	mov	r3, r0
 800b47e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b00      	cmp	r3, #0
 800b486:	f040 8152 	bne.w	800b72e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d103      	bne.n	800b4a4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2208      	movs	r2, #8
 800b4a0:	701a      	strb	r2, [r3, #0]
 800b4a2:	e002      	b.n	800b4aa <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2207      	movs	r2, #7
 800b4a8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2205      	movs	r2, #5
 800b4ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b4be:	2300      	movs	r3, #0
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f001 fcc7 	bl	800ce54 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800b4c6:	e132      	b.n	800b72e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 812f 	beq.w	800b732 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4da:	2101      	movs	r1, #1
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2208      	movs	r2, #8
 800b4e4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2205      	movs	r2, #5
 800b4ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f001 fca9 	bl	800ce54 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800b502:	e116      	b.n	800b732 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	4619      	mov	r1, r3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fcf8 	bl	800bf04 <USBH_SetCfg>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d102      	bne.n	800b520 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2209      	movs	r2, #9
 800b51e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b534:	2300      	movs	r3, #0
 800b536:	2200      	movs	r2, #0
 800b538:	f001 fc8c 	bl	800ce54 <osMessageQueuePut>
#endif
#endif
      break;
 800b53c:	e0fc      	b.n	800b738 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b544:	f003 0320 	and.w	r3, r3, #32
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00a      	beq.n	800b562 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b54c:	2101      	movs	r1, #1
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 fcfb 	bl	800bf4a <USBH_SetFeature>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d106      	bne.n	800b568 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	220a      	movs	r2, #10
 800b55e:	701a      	strb	r2, [r3, #0]
 800b560:	e002      	b.n	800b568 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	220a      	movs	r2, #10
 800b566:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b57c:	2300      	movs	r3, #0
 800b57e:	2200      	movs	r2, #0
 800b580:	f001 fc68 	bl	800ce54 <osMessageQueuePut>
#endif
#endif
      break;
 800b584:	e0d8      	b.n	800b738 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d03f      	beq.n	800b610 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b598:	2300      	movs	r3, #0
 800b59a:	73fb      	strb	r3, [r7, #15]
 800b59c:	e016      	b.n	800b5cc <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b59e:	7bfa      	ldrb	r2, [r7, #15]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	32de      	adds	r2, #222	; 0xde
 800b5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a8:	791a      	ldrb	r2, [r3, #4]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d108      	bne.n	800b5c6 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b5b4:	7bfa      	ldrb	r2, [r7, #15]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	32de      	adds	r2, #222	; 0xde
 800b5ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b5c4:	e005      	b.n	800b5d2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	73fb      	strb	r3, [r7, #15]
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d0e5      	beq.n	800b59e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d016      	beq.n	800b60a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	4798      	blx	r3
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d109      	bne.n	800b602 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2206      	movs	r2, #6
 800b5f2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5fa:	2103      	movs	r1, #3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	4798      	blx	r3
 800b600:	e006      	b.n	800b610 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	220d      	movs	r2, #13
 800b606:	701a      	strb	r2, [r3, #0]
 800b608:	e002      	b.n	800b610 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	220d      	movs	r2, #13
 800b60e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2205      	movs	r2, #5
 800b614:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b624:	2300      	movs	r3, #0
 800b626:	2200      	movs	r2, #0
 800b628:	f001 fc14 	bl	800ce54 <osMessageQueuePut>
#endif
#endif
      break;
 800b62c:	e084      	b.n	800b738 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b634:	2b00      	cmp	r3, #0
 800b636:	d017      	beq.n	800b668 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	4798      	blx	r3
 800b644:	4603      	mov	r3, r0
 800b646:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b648:	7bbb      	ldrb	r3, [r7, #14]
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d103      	bne.n	800b658 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	220b      	movs	r2, #11
 800b654:	701a      	strb	r2, [r3, #0]
 800b656:	e00a      	b.n	800b66e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800b658:	7bbb      	ldrb	r3, [r7, #14]
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d106      	bne.n	800b66e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	220d      	movs	r2, #13
 800b664:	701a      	strb	r2, [r3, #0]
 800b666:	e002      	b.n	800b66e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	220d      	movs	r2, #13
 800b66c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2205      	movs	r2, #5
 800b672:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b682:	2300      	movs	r3, #0
 800b684:	2200      	movs	r2, #0
 800b686:	f001 fbe5 	bl	800ce54 <osMessageQueuePut>
#endif
#endif
      break;
 800b68a:	e055      	b.n	800b738 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b692:	2b00      	cmp	r3, #0
 800b694:	d04f      	beq.n	800b736 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	4798      	blx	r3
      }
      break;
 800b6a2:	e048      	b.n	800b736 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f7ff fcf7 	bl	800b0a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d009      	beq.n	800b6d0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d005      	beq.n	800b6e6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6e0:	2105      	movs	r1, #5
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d107      	bne.n	800b702 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7ff fdb0 	bl	800b260 <USBH_Start>
 800b700:	e002      	b.n	800b708 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f004 fc9c 	bl	8010040 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b71c:	2300      	movs	r3, #0
 800b71e:	2200      	movs	r2, #0
 800b720:	f001 fb98 	bl	800ce54 <osMessageQueuePut>
#endif
#endif
      break;
 800b724:	e008      	b.n	800b738 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800b726:	bf00      	nop
 800b728:	e006      	b.n	800b738 <USBH_Process+0x4b8>
      break;
 800b72a:	bf00      	nop
 800b72c:	e004      	b.n	800b738 <USBH_Process+0x4b8>
      break;
 800b72e:	bf00      	nop
 800b730:	e002      	b.n	800b738 <USBH_Process+0x4b8>
    break;
 800b732:	bf00      	nop
 800b734:	e000      	b.n	800b738 <USBH_Process+0x4b8>
      break;
 800b736:	bf00      	nop
  }
  return USBH_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop

0800b744 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b088      	sub	sp, #32
 800b748:	af04      	add	r7, sp, #16
 800b74a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b74c:	2301      	movs	r3, #1
 800b74e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b750:	2301      	movs	r3, #1
 800b752:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	785b      	ldrb	r3, [r3, #1]
 800b758:	2b07      	cmp	r3, #7
 800b75a:	f200 8208 	bhi.w	800bb6e <USBH_HandleEnum+0x42a>
 800b75e:	a201      	add	r2, pc, #4	; (adr r2, 800b764 <USBH_HandleEnum+0x20>)
 800b760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b764:	0800b785 	.word	0x0800b785
 800b768:	0800b843 	.word	0x0800b843
 800b76c:	0800b8ad 	.word	0x0800b8ad
 800b770:	0800b93b 	.word	0x0800b93b
 800b774:	0800b9a5 	.word	0x0800b9a5
 800b778:	0800ba15 	.word	0x0800ba15
 800b77c:	0800bab1 	.word	0x0800bab1
 800b780:	0800bb2f 	.word	0x0800bb2f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b784:	2108      	movs	r1, #8
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 faec 	bl	800bd64 <USBH_Get_DevDesc>
 800b78c:	4603      	mov	r3, r0
 800b78e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d130      	bne.n	800b7f8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	7919      	ldrb	r1, [r3, #4]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b7ba:	b292      	uxth	r2, r2
 800b7bc:	9202      	str	r2, [sp, #8]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	9201      	str	r2, [sp, #4]
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2280      	movs	r2, #128	; 0x80
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 f903 	bl	800c9d4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	7959      	ldrb	r1, [r3, #5]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b7e2:	b292      	uxth	r2, r2
 800b7e4:	9202      	str	r2, [sp, #8]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	9201      	str	r2, [sp, #4]
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f001 f8ef 	bl	800c9d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b7f6:	e1bc      	b.n	800bb72 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7f8:	7bbb      	ldrb	r3, [r7, #14]
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	f040 81b9 	bne.w	800bb72 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b806:	3301      	adds	r3, #1
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b816:	2b03      	cmp	r3, #3
 800b818:	d903      	bls.n	800b822 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	220d      	movs	r2, #13
 800b81e:	701a      	strb	r2, [r3, #0]
      break;
 800b820:	e1a7      	b.n	800bb72 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	795b      	ldrb	r3, [r3, #5]
 800b826:	4619      	mov	r1, r3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f001 f923 	bl	800ca74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	791b      	ldrb	r3, [r3, #4]
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f001 f91d 	bl	800ca74 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	701a      	strb	r2, [r3, #0]
      break;
 800b840:	e197      	b.n	800bb72 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b842:	2112      	movs	r1, #18
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fa8d 	bl	800bd64 <USBH_Get_DevDesc>
 800b84a:	4603      	mov	r3, r0
 800b84c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b84e:	7bbb      	ldrb	r3, [r7, #14]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d103      	bne.n	800b85c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2202      	movs	r2, #2
 800b858:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b85a:	e18c      	b.n	800bb76 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b85c:	7bbb      	ldrb	r3, [r7, #14]
 800b85e:	2b03      	cmp	r3, #3
 800b860:	f040 8189 	bne.w	800bb76 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b86a:	3301      	adds	r3, #1
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	d903      	bls.n	800b886 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	220d      	movs	r2, #13
 800b882:	701a      	strb	r2, [r3, #0]
      break;
 800b884:	e177      	b.n	800bb76 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	795b      	ldrb	r3, [r3, #5]
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f001 f8f1 	bl	800ca74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	791b      	ldrb	r3, [r3, #4]
 800b896:	4619      	mov	r1, r3
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f001 f8eb 	bl	800ca74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	701a      	strb	r2, [r3, #0]
      break;
 800b8aa:	e164      	b.n	800bb76 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b8ac:	2101      	movs	r1, #1
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 fb04 	bl	800bebc <USBH_SetAddress>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d132      	bne.n	800b924 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b8be:	2002      	movs	r0, #2
 800b8c0:	f004 fd22 	bl	8010308 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2203      	movs	r2, #3
 800b8d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	7919      	ldrb	r1, [r3, #4]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b8e6:	b292      	uxth	r2, r2
 800b8e8:	9202      	str	r2, [sp, #8]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	9201      	str	r2, [sp, #4]
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2280      	movs	r2, #128	; 0x80
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f001 f86d 	bl	800c9d4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	7959      	ldrb	r1, [r3, #5]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b90e:	b292      	uxth	r2, r2
 800b910:	9202      	str	r2, [sp, #8]
 800b912:	2200      	movs	r2, #0
 800b914:	9201      	str	r2, [sp, #4]
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	4603      	mov	r3, r0
 800b91a:	2200      	movs	r2, #0
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f001 f859 	bl	800c9d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b922:	e12a      	b.n	800bb7a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b924:	7bbb      	ldrb	r3, [r7, #14]
 800b926:	2b03      	cmp	r3, #3
 800b928:	f040 8127 	bne.w	800bb7a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	220d      	movs	r2, #13
 800b930:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	705a      	strb	r2, [r3, #1]
      break;
 800b938:	e11f      	b.n	800bb7a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b93a:	2109      	movs	r1, #9
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fa39 	bl	800bdb4 <USBH_Get_CfgDesc>
 800b942:	4603      	mov	r3, r0
 800b944:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b946:	7bbb      	ldrb	r3, [r7, #14]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d103      	bne.n	800b954 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2204      	movs	r2, #4
 800b950:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b952:	e114      	b.n	800bb7e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b954:	7bbb      	ldrb	r3, [r7, #14]
 800b956:	2b03      	cmp	r3, #3
 800b958:	f040 8111 	bne.w	800bb7e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b962:	3301      	adds	r3, #1
 800b964:	b2da      	uxtb	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b972:	2b03      	cmp	r3, #3
 800b974:	d903      	bls.n	800b97e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	220d      	movs	r2, #13
 800b97a:	701a      	strb	r2, [r3, #0]
      break;
 800b97c:	e0ff      	b.n	800bb7e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	795b      	ldrb	r3, [r3, #5]
 800b982:	4619      	mov	r1, r3
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f001 f875 	bl	800ca74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	791b      	ldrb	r3, [r3, #4]
 800b98e:	4619      	mov	r1, r3
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f001 f86f 	bl	800ca74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	701a      	strb	r2, [r3, #0]
      break;
 800b9a2:	e0ec      	b.n	800bb7e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fa01 	bl	800bdb4 <USBH_Get_CfgDesc>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b9b6:	7bbb      	ldrb	r3, [r7, #14]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d103      	bne.n	800b9c4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2205      	movs	r2, #5
 800b9c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b9c2:	e0de      	b.n	800bb82 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9c4:	7bbb      	ldrb	r3, [r7, #14]
 800b9c6:	2b03      	cmp	r3, #3
 800b9c8:	f040 80db 	bne.w	800bb82 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	b2da      	uxtb	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d903      	bls.n	800b9ee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	220d      	movs	r2, #13
 800b9ea:	701a      	strb	r2, [r3, #0]
      break;
 800b9ec:	e0c9      	b.n	800bb82 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	795b      	ldrb	r3, [r3, #5]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f001 f83d 	bl	800ca74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	791b      	ldrb	r3, [r3, #4]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f001 f837 	bl	800ca74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	701a      	strb	r2, [r3, #0]
      break;
 800ba12:	e0b6      	b.n	800bb82 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d036      	beq.n	800ba8c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ba2a:	23ff      	movs	r3, #255	; 0xff
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 f9e5 	bl	800bdfc <USBH_Get_StringDesc>
 800ba32:	4603      	mov	r3, r0
 800ba34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba36:	7bbb      	ldrb	r3, [r7, #14]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d111      	bne.n	800ba60 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2206      	movs	r2, #6
 800ba40:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2205      	movs	r2, #5
 800ba46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba56:	2300      	movs	r3, #0
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f001 f9fb 	bl	800ce54 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ba5e:	e092      	b.n	800bb86 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba60:	7bbb      	ldrb	r3, [r7, #14]
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	f040 808f 	bne.w	800bb86 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2206      	movs	r2, #6
 800ba6c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2205      	movs	r2, #5
 800ba72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba82:	2300      	movs	r3, #0
 800ba84:	2200      	movs	r2, #0
 800ba86:	f001 f9e5 	bl	800ce54 <osMessageQueuePut>
      break;
 800ba8a:	e07c      	b.n	800bb86 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2206      	movs	r2, #6
 800ba90:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2205      	movs	r2, #5
 800ba96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800baa6:	2300      	movs	r3, #0
 800baa8:	2200      	movs	r2, #0
 800baaa:	f001 f9d3 	bl	800ce54 <osMessageQueuePut>
      break;
 800baae:	e06a      	b.n	800bb86 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d027      	beq.n	800bb0a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bac6:	23ff      	movs	r3, #255	; 0xff
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 f997 	bl	800bdfc <USBH_Get_StringDesc>
 800bace:	4603      	mov	r3, r0
 800bad0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bad2:	7bbb      	ldrb	r3, [r7, #14]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d103      	bne.n	800bae0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2207      	movs	r2, #7
 800badc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bade:	e054      	b.n	800bb8a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d151      	bne.n	800bb8a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2207      	movs	r2, #7
 800baea:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2205      	movs	r2, #5
 800baf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb00:	2300      	movs	r3, #0
 800bb02:	2200      	movs	r2, #0
 800bb04:	f001 f9a6 	bl	800ce54 <osMessageQueuePut>
      break;
 800bb08:	e03f      	b.n	800bb8a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2207      	movs	r2, #7
 800bb0e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2205      	movs	r2, #5
 800bb14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb24:	2300      	movs	r3, #0
 800bb26:	2200      	movs	r2, #0
 800bb28:	f001 f994 	bl	800ce54 <osMessageQueuePut>
      break;
 800bb2c:	e02d      	b.n	800bb8a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d017      	beq.n	800bb68 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bb44:	23ff      	movs	r3, #255	; 0xff
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f958 	bl	800bdfc <USBH_Get_StringDesc>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d102      	bne.n	800bb5c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bb5a:	e018      	b.n	800bb8e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	2b03      	cmp	r3, #3
 800bb60:	d115      	bne.n	800bb8e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	73fb      	strb	r3, [r7, #15]
      break;
 800bb66:	e012      	b.n	800bb8e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb6c:	e00f      	b.n	800bb8e <USBH_HandleEnum+0x44a>

    default:
      break;
 800bb6e:	bf00      	nop
 800bb70:	e00e      	b.n	800bb90 <USBH_HandleEnum+0x44c>
      break;
 800bb72:	bf00      	nop
 800bb74:	e00c      	b.n	800bb90 <USBH_HandleEnum+0x44c>
      break;
 800bb76:	bf00      	nop
 800bb78:	e00a      	b.n	800bb90 <USBH_HandleEnum+0x44c>
      break;
 800bb7a:	bf00      	nop
 800bb7c:	e008      	b.n	800bb90 <USBH_HandleEnum+0x44c>
      break;
 800bb7e:	bf00      	nop
 800bb80:	e006      	b.n	800bb90 <USBH_HandleEnum+0x44c>
      break;
 800bb82:	bf00      	nop
 800bb84:	e004      	b.n	800bb90 <USBH_HandleEnum+0x44c>
      break;
 800bb86:	bf00      	nop
 800bb88:	e002      	b.n	800bb90 <USBH_HandleEnum+0x44c>
      break;
 800bb8a:	bf00      	nop
 800bb8c:	e000      	b.n	800bb90 <USBH_HandleEnum+0x44c>
      break;
 800bb8e:	bf00      	nop
  }
  return Status;
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop

0800bb9c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bbae:	bf00      	nop
 800bbb0:	370c      	adds	r7, #12
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b082      	sub	sp, #8
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bbc8:	1c5a      	adds	r2, r3, #1
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f804 	bl	800bbde <USBH_HandleSof>
}
 800bbd6:	bf00      	nop
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b0b      	cmp	r3, #11
 800bbee:	d10a      	bne.n	800bc06 <USBH_HandleSof+0x28>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d005      	beq.n	800bc06 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc00:	699b      	ldr	r3, [r3, #24]
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	4798      	blx	r3
  }
}
 800bc06:	bf00      	nop
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b082      	sub	sp, #8
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2201      	movs	r2, #1
 800bc22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc32:	2300      	movs	r3, #0
 800bc34:	2200      	movs	r2, #0
 800bc36:	f001 f90d 	bl	800ce54 <osMessageQueuePut>
#endif
#endif

  return;
 800bc3a:	bf00      	nop
}
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bc42:	b480      	push	{r7}
 800bc44:	b083      	sub	sp, #12
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bc52:	bf00      	nop
}
 800bc54:	370c      	adds	r7, #12
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b082      	sub	sp, #8
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2201      	movs	r2, #1
 800bc82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc92:	2300      	movs	r3, #0
 800bc94:	2200      	movs	r2, #0
 800bc96:	f001 f8dd 	bl	800ce54 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f004 f9d6 	bl	8010076 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	791b      	ldrb	r3, [r3, #4]
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fecf 	bl	800ca74 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	795b      	ldrb	r3, [r3, #5]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fec9 	bl	800ca74 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2201      	movs	r2, #1
 800bce6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f001 f8ab 	bl	800ce54 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800bd1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd20:	2200      	movs	r2, #0
 800bd22:	f001 f8f7 	bl	800cf14 <osMessageQueueGet>
 800bd26:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1f0      	bne.n	800bd10 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7ff faa6 	bl	800b280 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800bd34:	e7ec      	b.n	800bd10 <USBH_Process_OS+0x8>

0800bd36 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b082      	sub	sp, #8
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bd52:	2300      	movs	r3, #0
 800bd54:	2200      	movs	r2, #0
 800bd56:	f001 f87d 	bl	800ce54 <osMessageQueuePut>
#endif

  return USBH_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af02      	add	r7, sp, #8
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bd76:	78fb      	ldrb	r3, [r7, #3]
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd82:	2100      	movs	r1, #0
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f864 	bl	800be52 <USBH_GetDescriptor>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	73fb      	strb	r3, [r7, #15]
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f203 3026 	addw	r0, r3, #806	; 0x326
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bda0:	78fa      	ldrb	r2, [r7, #3]
 800bda2:	b292      	uxth	r2, r2
 800bda4:	4619      	mov	r1, r3
 800bda6:	f000 f918 	bl	800bfda <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af02      	add	r7, sp, #8
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	331c      	adds	r3, #28
 800bdc4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bdc6:	887b      	ldrh	r3, [r7, #2]
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f83d 	bl	800be52 <USBH_GetDescriptor>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	72fb      	strb	r3, [r7, #11]
 800bddc:	7afb      	ldrb	r3, [r7, #11]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d107      	bne.n	800bdf2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bde8:	887a      	ldrh	r2, [r7, #2]
 800bdea:	68f9      	ldr	r1, [r7, #12]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 f964 	bl	800c0ba <USBH_ParseCfgDesc>
  }

  return status;
 800bdf2:	7afb      	ldrb	r3, [r7, #11]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b088      	sub	sp, #32
 800be00:	af02      	add	r7, sp, #8
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	607a      	str	r2, [r7, #4]
 800be06:	461a      	mov	r2, r3
 800be08:	460b      	mov	r3, r1
 800be0a:	72fb      	strb	r3, [r7, #11]
 800be0c:	4613      	mov	r3, r2
 800be0e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800be10:	7afb      	ldrb	r3, [r7, #11]
 800be12:	b29b      	uxth	r3, r3
 800be14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800be18:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800be20:	893b      	ldrh	r3, [r7, #8]
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	460b      	mov	r3, r1
 800be26:	2100      	movs	r1, #0
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f000 f812 	bl	800be52 <USBH_GetDescriptor>
 800be2e:	4603      	mov	r3, r0
 800be30:	75fb      	strb	r3, [r7, #23]
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d107      	bne.n	800be48 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800be3e:	893a      	ldrh	r2, [r7, #8]
 800be40:	6879      	ldr	r1, [r7, #4]
 800be42:	4618      	mov	r0, r3
 800be44:	f000 fa37 	bl	800c2b6 <USBH_ParseStringDesc>
  }

  return status;
 800be48:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b084      	sub	sp, #16
 800be56:	af00      	add	r7, sp, #0
 800be58:	60f8      	str	r0, [r7, #12]
 800be5a:	607b      	str	r3, [r7, #4]
 800be5c:	460b      	mov	r3, r1
 800be5e:	72fb      	strb	r3, [r7, #11]
 800be60:	4613      	mov	r3, r2
 800be62:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	789b      	ldrb	r3, [r3, #2]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d11c      	bne.n	800bea6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800be6c:	7afb      	ldrb	r3, [r7, #11]
 800be6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be72:	b2da      	uxtb	r2, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2206      	movs	r2, #6
 800be7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	893a      	ldrh	r2, [r7, #8]
 800be82:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800be84:	893b      	ldrh	r3, [r7, #8]
 800be86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800be8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be8e:	d104      	bne.n	800be9a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f240 4209 	movw	r2, #1033	; 0x409
 800be96:	829a      	strh	r2, [r3, #20]
 800be98:	e002      	b.n	800bea0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2200      	movs	r2, #0
 800be9e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	8b3a      	ldrh	r2, [r7, #24]
 800bea4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bea6:	8b3b      	ldrh	r3, [r7, #24]
 800bea8:	461a      	mov	r2, r3
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f000 fa50 	bl	800c352 <USBH_CtlReq>
 800beb2:	4603      	mov	r3, r0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3710      	adds	r7, #16
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	460b      	mov	r3, r1
 800bec6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	789b      	ldrb	r3, [r3, #2]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d10f      	bne.n	800bef0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2205      	movs	r2, #5
 800beda:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bedc:	78fb      	ldrb	r3, [r7, #3]
 800bede:	b29a      	uxth	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bef0:	2200      	movs	r2, #0
 800bef2:	2100      	movs	r1, #0
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fa2c 	bl	800c352 <USBH_CtlReq>
 800befa:	4603      	mov	r3, r0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	789b      	ldrb	r3, [r3, #2]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d10e      	bne.n	800bf36 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2209      	movs	r2, #9
 800bf22:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	887a      	ldrh	r2, [r7, #2]
 800bf28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bf36:	2200      	movs	r2, #0
 800bf38:	2100      	movs	r1, #0
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fa09 	bl	800c352 <USBH_CtlReq>
 800bf40:	4603      	mov	r3, r0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
 800bf52:	460b      	mov	r3, r1
 800bf54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	789b      	ldrb	r3, [r3, #2]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d10f      	bne.n	800bf7e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2203      	movs	r2, #3
 800bf68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bf6a:	78fb      	ldrb	r3, [r7, #3]
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bf7e:	2200      	movs	r2, #0
 800bf80:	2100      	movs	r1, #0
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f9e5 	bl	800c352 <USBH_CtlReq>
 800bf88:	4603      	mov	r3, r0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b082      	sub	sp, #8
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	789b      	ldrb	r3, [r3, #2]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d10f      	bne.n	800bfc6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2202      	movs	r2, #2
 800bfaa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bfb8:	78fb      	ldrb	r3, [r7, #3]
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	2100      	movs	r1, #0
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f9c1 	bl	800c352 <USBH_CtlReq>
 800bfd0:	4603      	mov	r3, r0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bfda:	b480      	push	{r7}
 800bfdc:	b085      	sub	sp, #20
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	781a      	ldrb	r2, [r3, #0]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	785a      	ldrb	r2, [r3, #1]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	3302      	adds	r3, #2
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	b29a      	uxth	r2, r3
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	3303      	adds	r3, #3
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	b29b      	uxth	r3, r3
 800c008:	021b      	lsls	r3, r3, #8
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	4313      	orrs	r3, r2
 800c00e:	b29a      	uxth	r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	791a      	ldrb	r2, [r3, #4]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	795a      	ldrb	r2, [r3, #5]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	799a      	ldrb	r2, [r3, #6]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	79da      	ldrb	r2, [r3, #7]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c034:	88fb      	ldrh	r3, [r7, #6]
 800c036:	2b08      	cmp	r3, #8
 800c038:	d939      	bls.n	800c0ae <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	3308      	adds	r3, #8
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	b29a      	uxth	r2, r3
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	3309      	adds	r3, #9
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	b29b      	uxth	r3, r3
 800c04a:	021b      	lsls	r3, r3, #8
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	4313      	orrs	r3, r2
 800c050:	b29a      	uxth	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	330a      	adds	r3, #10
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	330b      	adds	r3, #11
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	b29b      	uxth	r3, r3
 800c066:	021b      	lsls	r3, r3, #8
 800c068:	b29b      	uxth	r3, r3
 800c06a:	4313      	orrs	r3, r2
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	330c      	adds	r3, #12
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	b29a      	uxth	r2, r3
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	330d      	adds	r3, #13
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	b29b      	uxth	r3, r3
 800c082:	021b      	lsls	r3, r3, #8
 800c084:	b29b      	uxth	r3, r3
 800c086:	4313      	orrs	r3, r2
 800c088:	b29a      	uxth	r2, r3
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	7b9a      	ldrb	r2, [r3, #14]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	7bda      	ldrb	r2, [r3, #15]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	7c1a      	ldrb	r2, [r3, #16]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	7c5a      	ldrb	r2, [r3, #17]
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	745a      	strb	r2, [r3, #17]
  }
}
 800c0ae:	bf00      	nop
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b08a      	sub	sp, #40	; 0x28
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	60b9      	str	r1, [r7, #8]
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	781a      	ldrb	r2, [r3, #0]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	785a      	ldrb	r2, [r3, #1]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	3302      	adds	r3, #2
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	3303      	adds	r3, #3
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	021b      	lsls	r3, r3, #8
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	4313      	orrs	r3, r2
 800c102:	b29a      	uxth	r2, r3
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	791a      	ldrb	r2, [r3, #4]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	795a      	ldrb	r2, [r3, #5]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	799a      	ldrb	r2, [r3, #6]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	79da      	ldrb	r2, [r3, #7]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	7a1a      	ldrb	r2, [r3, #8]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c130:	88fb      	ldrh	r3, [r7, #6]
 800c132:	2b09      	cmp	r3, #9
 800c134:	d95f      	bls.n	800c1f6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c136:	2309      	movs	r3, #9
 800c138:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c13a:	2300      	movs	r3, #0
 800c13c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c13e:	e051      	b.n	800c1e4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c140:	f107 0316 	add.w	r3, r7, #22
 800c144:	4619      	mov	r1, r3
 800c146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c148:	f000 f8e8 	bl	800c31c <USBH_GetNextDesc>
 800c14c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c150:	785b      	ldrb	r3, [r3, #1]
 800c152:	2b04      	cmp	r3, #4
 800c154:	d146      	bne.n	800c1e4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c15a:	221a      	movs	r2, #26
 800c15c:	fb02 f303 	mul.w	r3, r2, r3
 800c160:	3308      	adds	r3, #8
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	4413      	add	r3, r2
 800c166:	3302      	adds	r3, #2
 800c168:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c16a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c16c:	69f8      	ldr	r0, [r7, #28]
 800c16e:	f000 f846 	bl	800c1fe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c172:	2300      	movs	r3, #0
 800c174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c178:	2300      	movs	r3, #0
 800c17a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c17c:	e022      	b.n	800c1c4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c17e:	f107 0316 	add.w	r3, r7, #22
 800c182:	4619      	mov	r1, r3
 800c184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c186:	f000 f8c9 	bl	800c31c <USBH_GetNextDesc>
 800c18a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18e:	785b      	ldrb	r3, [r3, #1]
 800c190:	2b05      	cmp	r3, #5
 800c192:	d117      	bne.n	800c1c4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c198:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c19c:	3201      	adds	r2, #1
 800c19e:	00d2      	lsls	r2, r2, #3
 800c1a0:	211a      	movs	r1, #26
 800c1a2:	fb01 f303 	mul.w	r3, r1, r3
 800c1a6:	4413      	add	r3, r2
 800c1a8:	3308      	adds	r3, #8
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800c1b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1b4:	69b8      	ldr	r0, [r7, #24]
 800c1b6:	f000 f851 	bl	800c25c <USBH_ParseEPDesc>
            ep_ix++;
 800c1ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c1be:	3301      	adds	r3, #1
 800c1c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	791b      	ldrb	r3, [r3, #4]
 800c1c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d204      	bcs.n	800c1da <USBH_ParseCfgDesc+0x120>
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	885a      	ldrh	r2, [r3, #2]
 800c1d4:	8afb      	ldrh	r3, [r7, #22]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d8d1      	bhi.n	800c17e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800c1da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1de:	3301      	adds	r3, #1
 800c1e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c1e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d804      	bhi.n	800c1f6 <USBH_ParseCfgDesc+0x13c>
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	885a      	ldrh	r2, [r3, #2]
 800c1f0:	8afb      	ldrh	r3, [r7, #22]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d8a4      	bhi.n	800c140 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c1f6:	bf00      	nop
 800c1f8:	3728      	adds	r7, #40	; 0x28
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c1fe:	b480      	push	{r7}
 800c200:	b083      	sub	sp, #12
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	781a      	ldrb	r2, [r3, #0]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	785a      	ldrb	r2, [r3, #1]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	789a      	ldrb	r2, [r3, #2]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	78da      	ldrb	r2, [r3, #3]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	791a      	ldrb	r2, [r3, #4]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	795a      	ldrb	r2, [r3, #5]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	799a      	ldrb	r2, [r3, #6]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	79da      	ldrb	r2, [r3, #7]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	7a1a      	ldrb	r2, [r3, #8]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	721a      	strb	r2, [r3, #8]
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	781a      	ldrb	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	785a      	ldrb	r2, [r3, #1]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	789a      	ldrb	r2, [r3, #2]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	78da      	ldrb	r2, [r3, #3]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	3304      	adds	r3, #4
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	3305      	adds	r3, #5
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	b29b      	uxth	r3, r3
 800c296:	021b      	lsls	r3, r3, #8
 800c298:	b29b      	uxth	r3, r3
 800c29a:	4313      	orrs	r3, r2
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	799a      	ldrb	r2, [r3, #6]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	719a      	strb	r2, [r3, #6]
}
 800c2aa:	bf00      	nop
 800c2ac:	370c      	adds	r7, #12
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b087      	sub	sp, #28
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	60b9      	str	r1, [r7, #8]
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	2b03      	cmp	r3, #3
 800c2cc:	d120      	bne.n	800c310 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	1e9a      	subs	r2, r3, #2
 800c2d4:	88fb      	ldrh	r3, [r7, #6]
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	bf28      	it	cs
 800c2da:	4613      	movcs	r3, r2
 800c2dc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	3302      	adds	r3, #2
 800c2e2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	82fb      	strh	r3, [r7, #22]
 800c2e8:	e00b      	b.n	800c302 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c2ea:	8afb      	ldrh	r3, [r7, #22]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	781a      	ldrb	r2, [r3, #0]
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c2fc:	8afb      	ldrh	r3, [r7, #22]
 800c2fe:	3302      	adds	r3, #2
 800c300:	82fb      	strh	r3, [r7, #22]
 800c302:	8afa      	ldrh	r2, [r7, #22]
 800c304:	8abb      	ldrh	r3, [r7, #20]
 800c306:	429a      	cmp	r2, r3
 800c308:	d3ef      	bcc.n	800c2ea <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	2200      	movs	r2, #0
 800c30e:	701a      	strb	r2, [r3, #0]
  }
}
 800c310:	bf00      	nop
 800c312:	371c      	adds	r7, #28
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	881a      	ldrh	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	b29b      	uxth	r3, r3
 800c330:	4413      	add	r3, r2
 800c332:	b29a      	uxth	r2, r3
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4413      	add	r3, r2
 800c342:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c344:	68fb      	ldr	r3, [r7, #12]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3714      	adds	r7, #20
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b086      	sub	sp, #24
 800c356:	af00      	add	r7, sp, #0
 800c358:	60f8      	str	r0, [r7, #12]
 800c35a:	60b9      	str	r1, [r7, #8]
 800c35c:	4613      	mov	r3, r2
 800c35e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c360:	2301      	movs	r3, #1
 800c362:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	789b      	ldrb	r3, [r3, #2]
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d002      	beq.n	800c372 <USBH_CtlReq+0x20>
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d01d      	beq.n	800c3ac <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800c370:	e043      	b.n	800c3fa <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	88fa      	ldrh	r2, [r7, #6]
 800c37c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2201      	movs	r2, #1
 800c382:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2202      	movs	r2, #2
 800c388:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c38a:	2301      	movs	r3, #1
 800c38c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2203      	movs	r2, #3
 800c392:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f000 fd55 	bl	800ce54 <osMessageQueuePut>
      break;
 800c3aa:	e026      	b.n	800c3fa <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f000 f829 	bl	800c404 <USBH_HandleControl>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c3b6:	7dfb      	ldrb	r3, [r7, #23]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d002      	beq.n	800c3c2 <USBH_CtlReq+0x70>
 800c3bc:	7dfb      	ldrb	r3, [r7, #23]
 800c3be:	2b03      	cmp	r3, #3
 800c3c0:	d106      	bne.n	800c3d0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	761a      	strb	r2, [r3, #24]
 800c3ce:	e005      	b.n	800c3dc <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800c3d0:	7dfb      	ldrb	r3, [r7, #23]
 800c3d2:	2b02      	cmp	r3, #2
 800c3d4:	d102      	bne.n	800c3dc <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2203      	movs	r2, #3
 800c3e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f000 fd2e 	bl	800ce54 <osMessageQueuePut>
      break;
 800c3f8:	bf00      	nop
  }
  return status;
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3718      	adds	r7, #24
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af02      	add	r7, sp, #8
 800c40a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c40c:	2301      	movs	r3, #1
 800c40e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c410:	2300      	movs	r3, #0
 800c412:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	7e1b      	ldrb	r3, [r3, #24]
 800c418:	3b01      	subs	r3, #1
 800c41a:	2b0a      	cmp	r3, #10
 800c41c:	f200 8229 	bhi.w	800c872 <USBH_HandleControl+0x46e>
 800c420:	a201      	add	r2, pc, #4	; (adr r2, 800c428 <USBH_HandleControl+0x24>)
 800c422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c426:	bf00      	nop
 800c428:	0800c455 	.word	0x0800c455
 800c42c:	0800c46f 	.word	0x0800c46f
 800c430:	0800c511 	.word	0x0800c511
 800c434:	0800c537 	.word	0x0800c537
 800c438:	0800c5c3 	.word	0x0800c5c3
 800c43c:	0800c5ed 	.word	0x0800c5ed
 800c440:	0800c6af 	.word	0x0800c6af
 800c444:	0800c6d1 	.word	0x0800c6d1
 800c448:	0800c763 	.word	0x0800c763
 800c44c:	0800c789 	.word	0x0800c789
 800c450:	0800c81b 	.word	0x0800c81b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f103 0110 	add.w	r1, r3, #16
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	795b      	ldrb	r3, [r3, #5]
 800c45e:	461a      	mov	r2, r3
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 fa17 	bl	800c894 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2202      	movs	r2, #2
 800c46a:	761a      	strb	r2, [r3, #24]
      break;
 800c46c:	e20c      	b.n	800c888 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	795b      	ldrb	r3, [r3, #5]
 800c472:	4619      	mov	r1, r3
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f003 feed 	bl	8010254 <USBH_LL_GetURBState>
 800c47a:	4603      	mov	r3, r0
 800c47c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c47e:	7bbb      	ldrb	r3, [r7, #14]
 800c480:	2b01      	cmp	r3, #1
 800c482:	d12c      	bne.n	800c4de <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	7c1b      	ldrb	r3, [r3, #16]
 800c488:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c48c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	8adb      	ldrh	r3, [r3, #22]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00a      	beq.n	800c4ac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c496:	7b7b      	ldrb	r3, [r7, #13]
 800c498:	2b80      	cmp	r3, #128	; 0x80
 800c49a:	d103      	bne.n	800c4a4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2203      	movs	r2, #3
 800c4a0:	761a      	strb	r2, [r3, #24]
 800c4a2:	e00d      	b.n	800c4c0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2205      	movs	r2, #5
 800c4a8:	761a      	strb	r2, [r3, #24]
 800c4aa:	e009      	b.n	800c4c0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c4ac:	7b7b      	ldrb	r3, [r7, #13]
 800c4ae:	2b80      	cmp	r3, #128	; 0x80
 800c4b0:	d103      	bne.n	800c4ba <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2209      	movs	r2, #9
 800c4b6:	761a      	strb	r2, [r3, #24]
 800c4b8:	e002      	b.n	800c4c0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2207      	movs	r2, #7
 800c4be:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2203      	movs	r2, #3
 800c4c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f000 fcbc 	bl	800ce54 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c4dc:	e1cb      	b.n	800c876 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c4de:	7bbb      	ldrb	r3, [r7, #14]
 800c4e0:	2b04      	cmp	r3, #4
 800c4e2:	d003      	beq.n	800c4ec <USBH_HandleControl+0xe8>
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	f040 81c5 	bne.w	800c876 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	220b      	movs	r2, #11
 800c4f0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2203      	movs	r2, #3
 800c4f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c506:	2300      	movs	r3, #0
 800c508:	2200      	movs	r2, #0
 800c50a:	f000 fca3 	bl	800ce54 <osMessageQueuePut>
      break;
 800c50e:	e1b2      	b.n	800c876 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c516:	b29a      	uxth	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6899      	ldr	r1, [r3, #8]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	899a      	ldrh	r2, [r3, #12]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	791b      	ldrb	r3, [r3, #4]
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 f9f2 	bl	800c912 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2204      	movs	r2, #4
 800c532:	761a      	strb	r2, [r3, #24]
      break;
 800c534:	e1a8      	b.n	800c888 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	791b      	ldrb	r3, [r3, #4]
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f003 fe89 	bl	8010254 <USBH_LL_GetURBState>
 800c542:	4603      	mov	r3, r0
 800c544:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c546:	7bbb      	ldrb	r3, [r7, #14]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d110      	bne.n	800c56e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2209      	movs	r2, #9
 800c550:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2203      	movs	r2, #3
 800c556:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c566:	2300      	movs	r3, #0
 800c568:	2200      	movs	r2, #0
 800c56a:	f000 fc73 	bl	800ce54 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c56e:	7bbb      	ldrb	r3, [r7, #14]
 800c570:	2b05      	cmp	r3, #5
 800c572:	d110      	bne.n	800c596 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c574:	2303      	movs	r3, #3
 800c576:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2203      	movs	r2, #3
 800c57c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c58c:	2300      	movs	r3, #0
 800c58e:	2200      	movs	r2, #0
 800c590:	f000 fc60 	bl	800ce54 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c594:	e171      	b.n	800c87a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800c596:	7bbb      	ldrb	r3, [r7, #14]
 800c598:	2b04      	cmp	r3, #4
 800c59a:	f040 816e 	bne.w	800c87a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	220b      	movs	r2, #11
 800c5a2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2203      	movs	r2, #3
 800c5a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f000 fc4a 	bl	800ce54 <osMessageQueuePut>
      break;
 800c5c0:	e15b      	b.n	800c87a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6899      	ldr	r1, [r3, #8]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	899a      	ldrh	r2, [r3, #12]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	795b      	ldrb	r3, [r3, #5]
 800c5ce:	2001      	movs	r0, #1
 800c5d0:	9000      	str	r0, [sp, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f978 	bl	800c8c8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2206      	movs	r2, #6
 800c5e8:	761a      	strb	r2, [r3, #24]
      break;
 800c5ea:	e14d      	b.n	800c888 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	795b      	ldrb	r3, [r3, #5]
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f003 fe2e 	bl	8010254 <USBH_LL_GetURBState>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c5fc:	7bbb      	ldrb	r3, [r7, #14]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d111      	bne.n	800c626 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2207      	movs	r2, #7
 800c606:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2203      	movs	r2, #3
 800c60c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c61c:	2300      	movs	r3, #0
 800c61e:	2200      	movs	r2, #0
 800c620:	f000 fc18 	bl	800ce54 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c624:	e12b      	b.n	800c87e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800c626:	7bbb      	ldrb	r3, [r7, #14]
 800c628:	2b05      	cmp	r3, #5
 800c62a:	d113      	bne.n	800c654 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	220c      	movs	r2, #12
 800c630:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c632:	2303      	movs	r3, #3
 800c634:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2203      	movs	r2, #3
 800c63a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c64a:	2300      	movs	r3, #0
 800c64c:	2200      	movs	r2, #0
 800c64e:	f000 fc01 	bl	800ce54 <osMessageQueuePut>
      break;
 800c652:	e114      	b.n	800c87e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c654:	7bbb      	ldrb	r3, [r7, #14]
 800c656:	2b02      	cmp	r3, #2
 800c658:	d111      	bne.n	800c67e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2205      	movs	r2, #5
 800c65e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2203      	movs	r2, #3
 800c664:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c674:	2300      	movs	r3, #0
 800c676:	2200      	movs	r2, #0
 800c678:	f000 fbec 	bl	800ce54 <osMessageQueuePut>
      break;
 800c67c:	e0ff      	b.n	800c87e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800c67e:	7bbb      	ldrb	r3, [r7, #14]
 800c680:	2b04      	cmp	r3, #4
 800c682:	f040 80fc 	bne.w	800c87e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	220b      	movs	r2, #11
 800c68a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c68c:	2302      	movs	r3, #2
 800c68e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2203      	movs	r2, #3
 800c694:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f000 fbd4 	bl	800ce54 <osMessageQueuePut>
      break;
 800c6ac:	e0e7      	b.n	800c87e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	791b      	ldrb	r3, [r3, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f92b 	bl	800c912 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2208      	movs	r2, #8
 800c6cc:	761a      	strb	r2, [r3, #24]

      break;
 800c6ce:	e0db      	b.n	800c888 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	791b      	ldrb	r3, [r3, #4]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f003 fdbc 	bl	8010254 <USBH_LL_GetURBState>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c6e0:	7bbb      	ldrb	r3, [r7, #14]
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d113      	bne.n	800c70e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	220d      	movs	r2, #13
 800c6ea:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2203      	movs	r2, #3
 800c6f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c704:	2300      	movs	r3, #0
 800c706:	2200      	movs	r2, #0
 800c708:	f000 fba4 	bl	800ce54 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c70c:	e0b9      	b.n	800c882 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800c70e:	7bbb      	ldrb	r3, [r7, #14]
 800c710:	2b04      	cmp	r3, #4
 800c712:	d111      	bne.n	800c738 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	220b      	movs	r2, #11
 800c718:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2203      	movs	r2, #3
 800c71e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c72e:	2300      	movs	r3, #0
 800c730:	2200      	movs	r2, #0
 800c732:	f000 fb8f 	bl	800ce54 <osMessageQueuePut>
      break;
 800c736:	e0a4      	b.n	800c882 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800c738:	7bbb      	ldrb	r3, [r7, #14]
 800c73a:	2b05      	cmp	r3, #5
 800c73c:	f040 80a1 	bne.w	800c882 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800c740:	2303      	movs	r3, #3
 800c742:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2203      	movs	r2, #3
 800c748:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c758:	2300      	movs	r3, #0
 800c75a:	2200      	movs	r2, #0
 800c75c:	f000 fb7a 	bl	800ce54 <osMessageQueuePut>
      break;
 800c760:	e08f      	b.n	800c882 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	795b      	ldrb	r3, [r3, #5]
 800c766:	2201      	movs	r2, #1
 800c768:	9200      	str	r2, [sp, #0]
 800c76a:	2200      	movs	r2, #0
 800c76c:	2100      	movs	r1, #0
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f8aa 	bl	800c8c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	220a      	movs	r2, #10
 800c784:	761a      	strb	r2, [r3, #24]
      break;
 800c786:	e07f      	b.n	800c888 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	795b      	ldrb	r3, [r3, #5]
 800c78c:	4619      	mov	r1, r3
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f003 fd60 	bl	8010254 <USBH_LL_GetURBState>
 800c794:	4603      	mov	r3, r0
 800c796:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c798:	7bbb      	ldrb	r3, [r7, #14]
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d113      	bne.n	800c7c6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	220d      	movs	r2, #13
 800c7a6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2203      	movs	r2, #3
 800c7ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c7bc:	2300      	movs	r3, #0
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f000 fb48 	bl	800ce54 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c7c4:	e05f      	b.n	800c886 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c7c6:	7bbb      	ldrb	r3, [r7, #14]
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d111      	bne.n	800c7f0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2209      	movs	r2, #9
 800c7d0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2203      	movs	r2, #3
 800c7d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f000 fb33 	bl	800ce54 <osMessageQueuePut>
      break;
 800c7ee:	e04a      	b.n	800c886 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	2b04      	cmp	r3, #4
 800c7f4:	d147      	bne.n	800c886 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	220b      	movs	r2, #11
 800c7fa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2203      	movs	r2, #3
 800c800:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c810:	2300      	movs	r3, #0
 800c812:	2200      	movs	r2, #0
 800c814:	f000 fb1e 	bl	800ce54 <osMessageQueuePut>
      break;
 800c818:	e035      	b.n	800c886 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	7e5b      	ldrb	r3, [r3, #25]
 800c81e:	3301      	adds	r3, #1
 800c820:	b2da      	uxtb	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	765a      	strb	r2, [r3, #25]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	7e5b      	ldrb	r3, [r3, #25]
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d806      	bhi.n	800c83c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c83a:	e025      	b.n	800c888 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c842:	2106      	movs	r1, #6
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	795b      	ldrb	r3, [r3, #5]
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f90d 	bl	800ca74 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	791b      	ldrb	r3, [r3, #4]
 800c85e:	4619      	mov	r1, r3
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 f907 	bl	800ca74 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c86c:	2302      	movs	r3, #2
 800c86e:	73fb      	strb	r3, [r7, #15]
      break;
 800c870:	e00a      	b.n	800c888 <USBH_HandleControl+0x484>

    default:
      break;
 800c872:	bf00      	nop
 800c874:	e008      	b.n	800c888 <USBH_HandleControl+0x484>
      break;
 800c876:	bf00      	nop
 800c878:	e006      	b.n	800c888 <USBH_HandleControl+0x484>
      break;
 800c87a:	bf00      	nop
 800c87c:	e004      	b.n	800c888 <USBH_HandleControl+0x484>
      break;
 800c87e:	bf00      	nop
 800c880:	e002      	b.n	800c888 <USBH_HandleControl+0x484>
      break;
 800c882:	bf00      	nop
 800c884:	e000      	b.n	800c888 <USBH_HandleControl+0x484>
      break;
 800c886:	bf00      	nop
  }

  return status;
 800c888:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop

0800c894 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b088      	sub	sp, #32
 800c898:	af04      	add	r7, sp, #16
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c8a2:	79f9      	ldrb	r1, [r7, #7]
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	9303      	str	r3, [sp, #12]
 800c8a8:	2308      	movs	r3, #8
 800c8aa:	9302      	str	r3, [sp, #8]
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	9301      	str	r3, [sp, #4]
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9300      	str	r3, [sp, #0]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f003 fc9a 	bl	80101f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c8be:	2300      	movs	r3, #0
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b088      	sub	sp, #32
 800c8cc:	af04      	add	r7, sp, #16
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	4611      	mov	r1, r2
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	80fb      	strh	r3, [r7, #6]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d001      	beq.n	800c8ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c8ec:	7979      	ldrb	r1, [r7, #5]
 800c8ee:	7e3b      	ldrb	r3, [r7, #24]
 800c8f0:	9303      	str	r3, [sp, #12]
 800c8f2:	88fb      	ldrh	r3, [r7, #6]
 800c8f4:	9302      	str	r3, [sp, #8]
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	9301      	str	r3, [sp, #4]
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	2300      	movs	r3, #0
 800c900:	2200      	movs	r2, #0
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f003 fc75 	bl	80101f2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b088      	sub	sp, #32
 800c916:	af04      	add	r7, sp, #16
 800c918:	60f8      	str	r0, [r7, #12]
 800c91a:	60b9      	str	r1, [r7, #8]
 800c91c:	4611      	mov	r1, r2
 800c91e:	461a      	mov	r2, r3
 800c920:	460b      	mov	r3, r1
 800c922:	80fb      	strh	r3, [r7, #6]
 800c924:	4613      	mov	r3, r2
 800c926:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c928:	7979      	ldrb	r1, [r7, #5]
 800c92a:	2300      	movs	r3, #0
 800c92c:	9303      	str	r3, [sp, #12]
 800c92e:	88fb      	ldrh	r3, [r7, #6]
 800c930:	9302      	str	r3, [sp, #8]
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	9301      	str	r3, [sp, #4]
 800c936:	2301      	movs	r3, #1
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	2300      	movs	r3, #0
 800c93c:	2201      	movs	r2, #1
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f003 fc57 	bl	80101f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c944:	2300      	movs	r3, #0

}
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b088      	sub	sp, #32
 800c952:	af04      	add	r7, sp, #16
 800c954:	60f8      	str	r0, [r7, #12]
 800c956:	60b9      	str	r1, [r7, #8]
 800c958:	4611      	mov	r1, r2
 800c95a:	461a      	mov	r2, r3
 800c95c:	460b      	mov	r3, r1
 800c95e:	80fb      	strh	r3, [r7, #6]
 800c960:	4613      	mov	r3, r2
 800c962:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d001      	beq.n	800c972 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c96e:	2300      	movs	r3, #0
 800c970:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c972:	7979      	ldrb	r1, [r7, #5]
 800c974:	7e3b      	ldrb	r3, [r7, #24]
 800c976:	9303      	str	r3, [sp, #12]
 800c978:	88fb      	ldrh	r3, [r7, #6]
 800c97a:	9302      	str	r3, [sp, #8]
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	2301      	movs	r3, #1
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	2302      	movs	r3, #2
 800c986:	2200      	movs	r2, #0
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f003 fc32 	bl	80101f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b088      	sub	sp, #32
 800c99c:	af04      	add	r7, sp, #16
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	80fb      	strh	r3, [r7, #6]
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c9ae:	7979      	ldrb	r1, [r7, #5]
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	9303      	str	r3, [sp, #12]
 800c9b4:	88fb      	ldrh	r3, [r7, #6]
 800c9b6:	9302      	str	r3, [sp, #8]
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	9301      	str	r3, [sp, #4]
 800c9bc:	2301      	movs	r3, #1
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f003 fc14 	bl	80101f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c9ca:	2300      	movs	r3, #0
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3710      	adds	r7, #16
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af04      	add	r7, sp, #16
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	4608      	mov	r0, r1
 800c9de:	4611      	mov	r1, r2
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	70fb      	strb	r3, [r7, #3]
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	70bb      	strb	r3, [r7, #2]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c9ee:	7878      	ldrb	r0, [r7, #1]
 800c9f0:	78ba      	ldrb	r2, [r7, #2]
 800c9f2:	78f9      	ldrb	r1, [r7, #3]
 800c9f4:	8b3b      	ldrh	r3, [r7, #24]
 800c9f6:	9302      	str	r3, [sp, #8]
 800c9f8:	7d3b      	ldrb	r3, [r7, #20]
 800c9fa:	9301      	str	r3, [sp, #4]
 800c9fc:	7c3b      	ldrb	r3, [r7, #16]
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	4603      	mov	r3, r0
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f003 fba7 	bl	8010156 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3708      	adds	r7, #8
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b082      	sub	sp, #8
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	460b      	mov	r3, r1
 800ca1c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ca1e:	78fb      	ldrb	r3, [r7, #3]
 800ca20:	4619      	mov	r1, r3
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f003 fbc6 	bl	80101b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3708      	adds	r7, #8
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b084      	sub	sp, #16
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 f836 	bl	800cab0 <USBH_GetFreePipe>
 800ca44:	4603      	mov	r3, r0
 800ca46:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ca48:	89fb      	ldrh	r3, [r7, #14]
 800ca4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d00a      	beq.n	800ca68 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ca52:	78fa      	ldrb	r2, [r7, #3]
 800ca54:	89fb      	ldrh	r3, [r7, #14]
 800ca56:	f003 030f 	and.w	r3, r3, #15
 800ca5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca5e:	6879      	ldr	r1, [r7, #4]
 800ca60:	33e0      	adds	r3, #224	; 0xe0
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	440b      	add	r3, r1
 800ca66:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ca68:	89fb      	ldrh	r3, [r7, #14]
 800ca6a:	b2db      	uxtb	r3, r3
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ca80:	78fb      	ldrb	r3, [r7, #3]
 800ca82:	2b0a      	cmp	r3, #10
 800ca84:	d80d      	bhi.n	800caa2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ca86:	78fb      	ldrb	r3, [r7, #3]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	33e0      	adds	r3, #224	; 0xe0
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	4413      	add	r3, r2
 800ca90:	685a      	ldr	r2, [r3, #4]
 800ca92:	78fb      	ldrb	r3, [r7, #3]
 800ca94:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ca98:	6879      	ldr	r1, [r7, #4]
 800ca9a:	33e0      	adds	r3, #224	; 0xe0
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	440b      	add	r3, r1
 800caa0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800cabc:	2300      	movs	r3, #0
 800cabe:	73fb      	strb	r3, [r7, #15]
 800cac0:	e00f      	b.n	800cae2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cac2:	7bfb      	ldrb	r3, [r7, #15]
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	33e0      	adds	r3, #224	; 0xe0
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	4413      	add	r3, r2
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d102      	bne.n	800cadc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cad6:	7bfb      	ldrb	r3, [r7, #15]
 800cad8:	b29b      	uxth	r3, r3
 800cada:	e007      	b.n	800caec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
 800cade:	3301      	adds	r3, #1
 800cae0:	73fb      	strb	r3, [r7, #15]
 800cae2:	7bfb      	ldrb	r3, [r7, #15]
 800cae4:	2b0a      	cmp	r3, #10
 800cae6:	d9ec      	bls.n	800cac2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800caec:	4618      	mov	r0, r3
 800caee:	3714      	adds	r7, #20
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <__NVIC_SetPriority>:
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	4603      	mov	r3, r0
 800cb00:	6039      	str	r1, [r7, #0]
 800cb02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	db0a      	blt.n	800cb22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	b2da      	uxtb	r2, r3
 800cb10:	490c      	ldr	r1, [pc, #48]	; (800cb44 <__NVIC_SetPriority+0x4c>)
 800cb12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb16:	0112      	lsls	r2, r2, #4
 800cb18:	b2d2      	uxtb	r2, r2
 800cb1a:	440b      	add	r3, r1
 800cb1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cb20:	e00a      	b.n	800cb38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	b2da      	uxtb	r2, r3
 800cb26:	4908      	ldr	r1, [pc, #32]	; (800cb48 <__NVIC_SetPriority+0x50>)
 800cb28:	79fb      	ldrb	r3, [r7, #7]
 800cb2a:	f003 030f 	and.w	r3, r3, #15
 800cb2e:	3b04      	subs	r3, #4
 800cb30:	0112      	lsls	r2, r2, #4
 800cb32:	b2d2      	uxtb	r2, r2
 800cb34:	440b      	add	r3, r1
 800cb36:	761a      	strb	r2, [r3, #24]
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	e000e100 	.word	0xe000e100
 800cb48:	e000ed00 	.word	0xe000ed00

0800cb4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cb50:	4b05      	ldr	r3, [pc, #20]	; (800cb68 <SysTick_Handler+0x1c>)
 800cb52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cb54:	f001 ff7c 	bl	800ea50 <xTaskGetSchedulerState>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d001      	beq.n	800cb62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cb5e:	f002 feab 	bl	800f8b8 <xPortSysTickHandler>
  }
}
 800cb62:	bf00      	nop
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	e000e010 	.word	0xe000e010

0800cb6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cb70:	2100      	movs	r1, #0
 800cb72:	f06f 0004 	mvn.w	r0, #4
 800cb76:	f7ff ffbf 	bl	800caf8 <__NVIC_SetPriority>
#endif
}
 800cb7a:	bf00      	nop
 800cb7c:	bd80      	pop	{r7, pc}
	...

0800cb80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb86:	f3ef 8305 	mrs	r3, IPSR
 800cb8a:	603b      	str	r3, [r7, #0]
  return(result);
 800cb8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d003      	beq.n	800cb9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cb92:	f06f 0305 	mvn.w	r3, #5
 800cb96:	607b      	str	r3, [r7, #4]
 800cb98:	e00c      	b.n	800cbb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cb9a:	4b0a      	ldr	r3, [pc, #40]	; (800cbc4 <osKernelInitialize+0x44>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d105      	bne.n	800cbae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cba2:	4b08      	ldr	r3, [pc, #32]	; (800cbc4 <osKernelInitialize+0x44>)
 800cba4:	2201      	movs	r2, #1
 800cba6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	607b      	str	r3, [r7, #4]
 800cbac:	e002      	b.n	800cbb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cbae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cbb4:	687b      	ldr	r3, [r7, #4]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	200000d4 	.word	0x200000d4

0800cbc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbce:	f3ef 8305 	mrs	r3, IPSR
 800cbd2:	603b      	str	r3, [r7, #0]
  return(result);
 800cbd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d003      	beq.n	800cbe2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cbda:	f06f 0305 	mvn.w	r3, #5
 800cbde:	607b      	str	r3, [r7, #4]
 800cbe0:	e010      	b.n	800cc04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cbe2:	4b0b      	ldr	r3, [pc, #44]	; (800cc10 <osKernelStart+0x48>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d109      	bne.n	800cbfe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cbea:	f7ff ffbf 	bl	800cb6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cbee:	4b08      	ldr	r3, [pc, #32]	; (800cc10 <osKernelStart+0x48>)
 800cbf0:	2202      	movs	r2, #2
 800cbf2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cbf4:	f001 fad0 	bl	800e198 <vTaskStartScheduler>
      stat = osOK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	607b      	str	r3, [r7, #4]
 800cbfc:	e002      	b.n	800cc04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cbfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cc04:	687b      	ldr	r3, [r7, #4]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3708      	adds	r7, #8
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	200000d4 	.word	0x200000d4

0800cc14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b08e      	sub	sp, #56	; 0x38
 800cc18:	af04      	add	r7, sp, #16
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cc20:	2300      	movs	r3, #0
 800cc22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc24:	f3ef 8305 	mrs	r3, IPSR
 800cc28:	617b      	str	r3, [r7, #20]
  return(result);
 800cc2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d17e      	bne.n	800cd2e <osThreadNew+0x11a>
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d07b      	beq.n	800cd2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cc36:	2380      	movs	r3, #128	; 0x80
 800cc38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cc3a:	2318      	movs	r3, #24
 800cc3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cc42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d045      	beq.n	800ccda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d002      	beq.n	800cc5c <osThreadNew+0x48>
        name = attr->name;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	699b      	ldr	r3, [r3, #24]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d002      	beq.n	800cc6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	699b      	ldr	r3, [r3, #24]
 800cc68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d008      	beq.n	800cc82 <osThreadNew+0x6e>
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	2b38      	cmp	r3, #56	; 0x38
 800cc74:	d805      	bhi.n	800cc82 <osThreadNew+0x6e>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d001      	beq.n	800cc86 <osThreadNew+0x72>
        return (NULL);
 800cc82:	2300      	movs	r3, #0
 800cc84:	e054      	b.n	800cd30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d003      	beq.n	800cc96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	695b      	ldr	r3, [r3, #20]
 800cc92:	089b      	lsrs	r3, r3, #2
 800cc94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00e      	beq.n	800ccbc <osThreadNew+0xa8>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	2bbb      	cmp	r3, #187	; 0xbb
 800cca4:	d90a      	bls.n	800ccbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d006      	beq.n	800ccbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d002      	beq.n	800ccbc <osThreadNew+0xa8>
        mem = 1;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	61bb      	str	r3, [r7, #24]
 800ccba:	e010      	b.n	800ccde <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10c      	bne.n	800ccde <osThreadNew+0xca>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d108      	bne.n	800ccde <osThreadNew+0xca>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d104      	bne.n	800ccde <osThreadNew+0xca>
          mem = 0;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	61bb      	str	r3, [r7, #24]
 800ccd8:	e001      	b.n	800ccde <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d110      	bne.n	800cd06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ccec:	9202      	str	r2, [sp, #8]
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	6a3a      	ldr	r2, [r7, #32]
 800ccf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccfa:	68f8      	ldr	r0, [r7, #12]
 800ccfc:	f001 f860 	bl	800ddc0 <xTaskCreateStatic>
 800cd00:	4603      	mov	r3, r0
 800cd02:	613b      	str	r3, [r7, #16]
 800cd04:	e013      	b.n	800cd2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d110      	bne.n	800cd2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd0c:	6a3b      	ldr	r3, [r7, #32]
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	f107 0310 	add.w	r3, r7, #16
 800cd14:	9301      	str	r3, [sp, #4]
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	9300      	str	r3, [sp, #0]
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f001 f8ab 	bl	800de7a <xTaskCreate>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d001      	beq.n	800cd2e <osThreadNew+0x11a>
            hTask = NULL;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd2e:	693b      	ldr	r3, [r7, #16]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3728      	adds	r7, #40	; 0x28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd40:	f3ef 8305 	mrs	r3, IPSR
 800cd44:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d003      	beq.n	800cd54 <osDelay+0x1c>
    stat = osErrorISR;
 800cd4c:	f06f 0305 	mvn.w	r3, #5
 800cd50:	60fb      	str	r3, [r7, #12]
 800cd52:	e007      	b.n	800cd64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cd54:	2300      	movs	r3, #0
 800cd56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d002      	beq.n	800cd64 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f001 f9e6 	bl	800e130 <vTaskDelay>
    }
  }

  return (stat);
 800cd64:	68fb      	ldr	r3, [r7, #12]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b08a      	sub	sp, #40	; 0x28
 800cd72:	af02      	add	r7, sp, #8
 800cd74:	60f8      	str	r0, [r7, #12]
 800cd76:	60b9      	str	r1, [r7, #8]
 800cd78:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd7e:	f3ef 8305 	mrs	r3, IPSR
 800cd82:	613b      	str	r3, [r7, #16]
  return(result);
 800cd84:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d15f      	bne.n	800ce4a <osMessageQueueNew+0xdc>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d05c      	beq.n	800ce4a <osMessageQueueNew+0xdc>
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d059      	beq.n	800ce4a <osMessageQueueNew+0xdc>
    mem = -1;
 800cd96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d029      	beq.n	800cdf6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d012      	beq.n	800cdd0 <osMessageQueueNew+0x62>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	2b4f      	cmp	r3, #79	; 0x4f
 800cdb0:	d90e      	bls.n	800cdd0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d00a      	beq.n	800cdd0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	695a      	ldr	r2, [r3, #20]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	68b9      	ldr	r1, [r7, #8]
 800cdc2:	fb01 f303 	mul.w	r3, r1, r3
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d302      	bcc.n	800cdd0 <osMessageQueueNew+0x62>
        mem = 1;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	61bb      	str	r3, [r7, #24]
 800cdce:	e014      	b.n	800cdfa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d110      	bne.n	800cdfa <osMessageQueueNew+0x8c>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10c      	bne.n	800cdfa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d108      	bne.n	800cdfa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	695b      	ldr	r3, [r3, #20]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d104      	bne.n	800cdfa <osMessageQueueNew+0x8c>
          mem = 0;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	61bb      	str	r3, [r7, #24]
 800cdf4:	e001      	b.n	800cdfa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d10b      	bne.n	800ce18 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	691a      	ldr	r2, [r3, #16]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	2100      	movs	r1, #0
 800ce0a:	9100      	str	r1, [sp, #0]
 800ce0c:	68b9      	ldr	r1, [r7, #8]
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f000 fa2e 	bl	800d270 <xQueueGenericCreateStatic>
 800ce14:	61f8      	str	r0, [r7, #28]
 800ce16:	e008      	b.n	800ce2a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d105      	bne.n	800ce2a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ce1e:	2200      	movs	r2, #0
 800ce20:	68b9      	ldr	r1, [r7, #8]
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f000 fa9c 	bl	800d360 <xQueueGenericCreate>
 800ce28:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00c      	beq.n	800ce4a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d003      	beq.n	800ce3e <osMessageQueueNew+0xd0>
        name = attr->name;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	617b      	str	r3, [r7, #20]
 800ce3c:	e001      	b.n	800ce42 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ce42:	6979      	ldr	r1, [r7, #20]
 800ce44:	69f8      	ldr	r0, [r7, #28]
 800ce46:	f000 ff5d 	bl	800dd04 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ce4a:	69fb      	ldr	r3, [r7, #28]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3720      	adds	r7, #32
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b088      	sub	sp, #32
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	603b      	str	r3, [r7, #0]
 800ce60:	4613      	mov	r3, r2
 800ce62:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce6c:	f3ef 8305 	mrs	r3, IPSR
 800ce70:	617b      	str	r3, [r7, #20]
  return(result);
 800ce72:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d028      	beq.n	800ceca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d005      	beq.n	800ce8a <osMessageQueuePut+0x36>
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d002      	beq.n	800ce8a <osMessageQueuePut+0x36>
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d003      	beq.n	800ce92 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ce8a:	f06f 0303 	mvn.w	r3, #3
 800ce8e:	61fb      	str	r3, [r7, #28]
 800ce90:	e038      	b.n	800cf04 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ce92:	2300      	movs	r3, #0
 800ce94:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ce96:	f107 0210 	add.w	r2, r7, #16
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	68b9      	ldr	r1, [r7, #8]
 800ce9e:	69b8      	ldr	r0, [r7, #24]
 800cea0:	f000 fbba 	bl	800d618 <xQueueGenericSendFromISR>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d003      	beq.n	800ceb2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ceaa:	f06f 0302 	mvn.w	r3, #2
 800ceae:	61fb      	str	r3, [r7, #28]
 800ceb0:	e028      	b.n	800cf04 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d025      	beq.n	800cf04 <osMessageQueuePut+0xb0>
 800ceb8:	4b15      	ldr	r3, [pc, #84]	; (800cf10 <osMessageQueuePut+0xbc>)
 800ceba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	e01c      	b.n	800cf04 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d002      	beq.n	800ced6 <osMessageQueuePut+0x82>
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d103      	bne.n	800cede <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ced6:	f06f 0303 	mvn.w	r3, #3
 800ceda:	61fb      	str	r3, [r7, #28]
 800cedc:	e012      	b.n	800cf04 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cede:	2300      	movs	r3, #0
 800cee0:	683a      	ldr	r2, [r7, #0]
 800cee2:	68b9      	ldr	r1, [r7, #8]
 800cee4:	69b8      	ldr	r0, [r7, #24]
 800cee6:	f000 fa99 	bl	800d41c <xQueueGenericSend>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d009      	beq.n	800cf04 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d003      	beq.n	800cefe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cef6:	f06f 0301 	mvn.w	r3, #1
 800cefa:	61fb      	str	r3, [r7, #28]
 800cefc:	e002      	b.n	800cf04 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cefe:	f06f 0302 	mvn.w	r3, #2
 800cf02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cf04:	69fb      	ldr	r3, [r7, #28]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3720      	adds	r7, #32
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	e000ed04 	.word	0xe000ed04

0800cf14 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b088      	sub	sp, #32
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]
 800cf20:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf2a:	f3ef 8305 	mrs	r3, IPSR
 800cf2e:	617b      	str	r3, [r7, #20]
  return(result);
 800cf30:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d028      	beq.n	800cf88 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d005      	beq.n	800cf48 <osMessageQueueGet+0x34>
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d002      	beq.n	800cf48 <osMessageQueueGet+0x34>
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d003      	beq.n	800cf50 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cf48:	f06f 0303 	mvn.w	r3, #3
 800cf4c:	61fb      	str	r3, [r7, #28]
 800cf4e:	e037      	b.n	800cfc0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cf50:	2300      	movs	r3, #0
 800cf52:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cf54:	f107 0310 	add.w	r3, r7, #16
 800cf58:	461a      	mov	r2, r3
 800cf5a:	68b9      	ldr	r1, [r7, #8]
 800cf5c:	69b8      	ldr	r0, [r7, #24]
 800cf5e:	f000 fcd7 	bl	800d910 <xQueueReceiveFromISR>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d003      	beq.n	800cf70 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cf68:	f06f 0302 	mvn.w	r3, #2
 800cf6c:	61fb      	str	r3, [r7, #28]
 800cf6e:	e027      	b.n	800cfc0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d024      	beq.n	800cfc0 <osMessageQueueGet+0xac>
 800cf76:	4b15      	ldr	r3, [pc, #84]	; (800cfcc <osMessageQueueGet+0xb8>)
 800cf78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	e01b      	b.n	800cfc0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d002      	beq.n	800cf94 <osMessageQueueGet+0x80>
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d103      	bne.n	800cf9c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cf94:	f06f 0303 	mvn.w	r3, #3
 800cf98:	61fb      	str	r3, [r7, #28]
 800cf9a:	e011      	b.n	800cfc0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	68b9      	ldr	r1, [r7, #8]
 800cfa0:	69b8      	ldr	r0, [r7, #24]
 800cfa2:	f000 fbd5 	bl	800d750 <xQueueReceive>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d009      	beq.n	800cfc0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d003      	beq.n	800cfba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cfb2:	f06f 0301 	mvn.w	r3, #1
 800cfb6:	61fb      	str	r3, [r7, #28]
 800cfb8:	e002      	b.n	800cfc0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cfba:	f06f 0302 	mvn.w	r3, #2
 800cfbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cfc0:	69fb      	ldr	r3, [r7, #28]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3720      	adds	r7, #32
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	e000ed04 	.word	0xe000ed04

0800cfd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4a07      	ldr	r2, [pc, #28]	; (800cffc <vApplicationGetIdleTaskMemory+0x2c>)
 800cfe0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	4a06      	ldr	r2, [pc, #24]	; (800d000 <vApplicationGetIdleTaskMemory+0x30>)
 800cfe6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2280      	movs	r2, #128	; 0x80
 800cfec:	601a      	str	r2, [r3, #0]
}
 800cfee:	bf00      	nop
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	200000d8 	.word	0x200000d8
 800d000:	20000194 	.word	0x20000194

0800d004 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d004:	b480      	push	{r7}
 800d006:	b085      	sub	sp, #20
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	4a07      	ldr	r2, [pc, #28]	; (800d030 <vApplicationGetTimerTaskMemory+0x2c>)
 800d014:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	4a06      	ldr	r2, [pc, #24]	; (800d034 <vApplicationGetTimerTaskMemory+0x30>)
 800d01a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d022:	601a      	str	r2, [r3, #0]
}
 800d024:	bf00      	nop
 800d026:	3714      	adds	r7, #20
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr
 800d030:	20000394 	.word	0x20000394
 800d034:	20000450 	.word	0x20000450

0800d038 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f103 0208 	add.w	r2, r3, #8
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d050:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f103 0208 	add.w	r2, r3, #8
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f103 0208 	add.w	r2, r3, #8
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2200      	movs	r2, #0
 800d06a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d06c:	bf00      	nop
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d086:	bf00      	nop
 800d088:	370c      	adds	r7, #12
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr

0800d092 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d092:	b480      	push	{r7}
 800d094:	b085      	sub	sp, #20
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	689a      	ldr	r2, [r3, #8]
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	683a      	ldr	r2, [r7, #0]
 800d0b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	683a      	ldr	r2, [r7, #0]
 800d0bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	1c5a      	adds	r2, r3, #1
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	601a      	str	r2, [r3, #0]
}
 800d0ce:	bf00      	nop
 800d0d0:	3714      	adds	r7, #20
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr

0800d0da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b085      	sub	sp, #20
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
 800d0e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0f0:	d103      	bne.n	800d0fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	60fb      	str	r3, [r7, #12]
 800d0f8:	e00c      	b.n	800d114 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3308      	adds	r3, #8
 800d0fe:	60fb      	str	r3, [r7, #12]
 800d100:	e002      	b.n	800d108 <vListInsert+0x2e>
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	60fb      	str	r3, [r7, #12]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	429a      	cmp	r2, r3
 800d112:	d2f6      	bcs.n	800d102 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	683a      	ldr	r2, [r7, #0]
 800d122:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	1c5a      	adds	r2, r3, #1
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	601a      	str	r2, [r3, #0]
}
 800d140:	bf00      	nop
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	6892      	ldr	r2, [r2, #8]
 800d162:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	6852      	ldr	r2, [r2, #4]
 800d16c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	429a      	cmp	r2, r3
 800d176:	d103      	bne.n	800d180 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	689a      	ldr	r2, [r3, #8]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	1e5a      	subs	r2, r3, #1
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d10a      	bne.n	800d1ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b8:	f383 8811 	msr	BASEPRI, r3
 800d1bc:	f3bf 8f6f 	isb	sy
 800d1c0:	f3bf 8f4f 	dsb	sy
 800d1c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d1c6:	bf00      	nop
 800d1c8:	e7fe      	b.n	800d1c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d1ca:	f002 fae3 	bl	800f794 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d6:	68f9      	ldr	r1, [r7, #12]
 800d1d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1da:	fb01 f303 	mul.w	r3, r1, r3
 800d1de:	441a      	add	r2, r3
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	68f9      	ldr	r1, [r7, #12]
 800d1fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d200:	fb01 f303 	mul.w	r3, r1, r3
 800d204:	441a      	add	r2, r3
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	22ff      	movs	r2, #255	; 0xff
 800d20e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	22ff      	movs	r2, #255	; 0xff
 800d216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d114      	bne.n	800d24a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d01a      	beq.n	800d25e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	3310      	adds	r3, #16
 800d22c:	4618      	mov	r0, r3
 800d22e:	f001 fa4d 	bl	800e6cc <xTaskRemoveFromEventList>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d012      	beq.n	800d25e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d238:	4b0c      	ldr	r3, [pc, #48]	; (800d26c <xQueueGenericReset+0xcc>)
 800d23a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d23e:	601a      	str	r2, [r3, #0]
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	e009      	b.n	800d25e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	3310      	adds	r3, #16
 800d24e:	4618      	mov	r0, r3
 800d250:	f7ff fef2 	bl	800d038 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	3324      	adds	r3, #36	; 0x24
 800d258:	4618      	mov	r0, r3
 800d25a:	f7ff feed 	bl	800d038 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d25e:	f002 fac9 	bl	800f7f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d262:	2301      	movs	r3, #1
}
 800d264:	4618      	mov	r0, r3
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	e000ed04 	.word	0xe000ed04

0800d270 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08e      	sub	sp, #56	; 0x38
 800d274:	af02      	add	r7, sp, #8
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
 800d27c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10a      	bne.n	800d29a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d296:	bf00      	nop
 800d298:	e7fe      	b.n	800d298 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10a      	bne.n	800d2b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2b2:	bf00      	nop
 800d2b4:	e7fe      	b.n	800d2b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d002      	beq.n	800d2c2 <xQueueGenericCreateStatic+0x52>
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d001      	beq.n	800d2c6 <xQueueGenericCreateStatic+0x56>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e000      	b.n	800d2c8 <xQueueGenericCreateStatic+0x58>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10a      	bne.n	800d2e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	623b      	str	r3, [r7, #32]
}
 800d2de:	bf00      	nop
 800d2e0:	e7fe      	b.n	800d2e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d102      	bne.n	800d2ee <xQueueGenericCreateStatic+0x7e>
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d101      	bne.n	800d2f2 <xQueueGenericCreateStatic+0x82>
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e000      	b.n	800d2f4 <xQueueGenericCreateStatic+0x84>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d10a      	bne.n	800d30e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	61fb      	str	r3, [r7, #28]
}
 800d30a:	bf00      	nop
 800d30c:	e7fe      	b.n	800d30c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d30e:	2350      	movs	r3, #80	; 0x50
 800d310:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	2b50      	cmp	r3, #80	; 0x50
 800d316:	d00a      	beq.n	800d32e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	61bb      	str	r3, [r7, #24]
}
 800d32a:	bf00      	nop
 800d32c:	e7fe      	b.n	800d32c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d32e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00d      	beq.n	800d356 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33c:	2201      	movs	r2, #1
 800d33e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d342:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	9300      	str	r3, [sp, #0]
 800d34a:	4613      	mov	r3, r2
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	68b9      	ldr	r1, [r7, #8]
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f000 f83f 	bl	800d3d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d358:	4618      	mov	r0, r3
 800d35a:	3730      	adds	r7, #48	; 0x30
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d360:	b580      	push	{r7, lr}
 800d362:	b08a      	sub	sp, #40	; 0x28
 800d364:	af02      	add	r7, sp, #8
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	4613      	mov	r3, r2
 800d36c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10a      	bne.n	800d38a <xQueueGenericCreate+0x2a>
	__asm volatile
 800d374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d378:	f383 8811 	msr	BASEPRI, r3
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	613b      	str	r3, [r7, #16]
}
 800d386:	bf00      	nop
 800d388:	e7fe      	b.n	800d388 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	68ba      	ldr	r2, [r7, #8]
 800d38e:	fb02 f303 	mul.w	r3, r2, r3
 800d392:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	3350      	adds	r3, #80	; 0x50
 800d398:	4618      	mov	r0, r3
 800d39a:	f002 fb1d 	bl	800f9d8 <pvPortMalloc>
 800d39e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d011      	beq.n	800d3ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	3350      	adds	r3, #80	; 0x50
 800d3ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d3b8:	79fa      	ldrb	r2, [r7, #7]
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	9300      	str	r3, [sp, #0]
 800d3be:	4613      	mov	r3, r2
 800d3c0:	697a      	ldr	r2, [r7, #20]
 800d3c2:	68b9      	ldr	r1, [r7, #8]
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f000 f805 	bl	800d3d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d3ca:	69bb      	ldr	r3, [r7, #24]
	}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3720      	adds	r7, #32
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
 800d3e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d103      	bne.n	800d3f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	601a      	str	r2, [r3, #0]
 800d3ee:	e002      	b.n	800d3f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d402:	2101      	movs	r1, #1
 800d404:	69b8      	ldr	r0, [r7, #24]
 800d406:	f7ff fecb 	bl	800d1a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d40a:	69bb      	ldr	r3, [r7, #24]
 800d40c:	78fa      	ldrb	r2, [r7, #3]
 800d40e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d412:	bf00      	nop
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
	...

0800d41c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b08e      	sub	sp, #56	; 0x38
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	607a      	str	r2, [r7, #4]
 800d428:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d42a:	2300      	movs	r3, #0
 800d42c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	2b00      	cmp	r3, #0
 800d436:	d10a      	bne.n	800d44e <xQueueGenericSend+0x32>
	__asm volatile
 800d438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d44a:	bf00      	nop
 800d44c:	e7fe      	b.n	800d44c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d103      	bne.n	800d45c <xQueueGenericSend+0x40>
 800d454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <xQueueGenericSend+0x44>
 800d45c:	2301      	movs	r3, #1
 800d45e:	e000      	b.n	800d462 <xQueueGenericSend+0x46>
 800d460:	2300      	movs	r3, #0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10a      	bne.n	800d47c <xQueueGenericSend+0x60>
	__asm volatile
 800d466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46a:	f383 8811 	msr	BASEPRI, r3
 800d46e:	f3bf 8f6f 	isb	sy
 800d472:	f3bf 8f4f 	dsb	sy
 800d476:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d478:	bf00      	nop
 800d47a:	e7fe      	b.n	800d47a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	2b02      	cmp	r3, #2
 800d480:	d103      	bne.n	800d48a <xQueueGenericSend+0x6e>
 800d482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d486:	2b01      	cmp	r3, #1
 800d488:	d101      	bne.n	800d48e <xQueueGenericSend+0x72>
 800d48a:	2301      	movs	r3, #1
 800d48c:	e000      	b.n	800d490 <xQueueGenericSend+0x74>
 800d48e:	2300      	movs	r3, #0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10a      	bne.n	800d4aa <xQueueGenericSend+0x8e>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	623b      	str	r3, [r7, #32]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4aa:	f001 fad1 	bl	800ea50 <xTaskGetSchedulerState>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d102      	bne.n	800d4ba <xQueueGenericSend+0x9e>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d101      	bne.n	800d4be <xQueueGenericSend+0xa2>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e000      	b.n	800d4c0 <xQueueGenericSend+0xa4>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10a      	bne.n	800d4da <xQueueGenericSend+0xbe>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	61fb      	str	r3, [r7, #28]
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4da:	f002 f95b 	bl	800f794 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d302      	bcc.n	800d4f0 <xQueueGenericSend+0xd4>
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2b02      	cmp	r3, #2
 800d4ee:	d129      	bne.n	800d544 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d4f0:	683a      	ldr	r2, [r7, #0]
 800d4f2:	68b9      	ldr	r1, [r7, #8]
 800d4f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4f6:	f000 faf4 	bl	800dae2 <prvCopyDataToQueue>
 800d4fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d500:	2b00      	cmp	r3, #0
 800d502:	d010      	beq.n	800d526 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d506:	3324      	adds	r3, #36	; 0x24
 800d508:	4618      	mov	r0, r3
 800d50a:	f001 f8df 	bl	800e6cc <xTaskRemoveFromEventList>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d013      	beq.n	800d53c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d514:	4b3f      	ldr	r3, [pc, #252]	; (800d614 <xQueueGenericSend+0x1f8>)
 800d516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	f3bf 8f6f 	isb	sy
 800d524:	e00a      	b.n	800d53c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d007      	beq.n	800d53c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d52c:	4b39      	ldr	r3, [pc, #228]	; (800d614 <xQueueGenericSend+0x1f8>)
 800d52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d532:	601a      	str	r2, [r3, #0]
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d53c:	f002 f95a 	bl	800f7f4 <vPortExitCritical>
				return pdPASS;
 800d540:	2301      	movs	r3, #1
 800d542:	e063      	b.n	800d60c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d103      	bne.n	800d552 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d54a:	f002 f953 	bl	800f7f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d54e:	2300      	movs	r3, #0
 800d550:	e05c      	b.n	800d60c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d554:	2b00      	cmp	r3, #0
 800d556:	d106      	bne.n	800d566 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d558:	f107 0314 	add.w	r3, r7, #20
 800d55c:	4618      	mov	r0, r3
 800d55e:	f001 f919 	bl	800e794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d562:	2301      	movs	r3, #1
 800d564:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d566:	f002 f945 	bl	800f7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d56a:	f000 fe85 	bl	800e278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d56e:	f002 f911 	bl	800f794 <vPortEnterCritical>
 800d572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d578:	b25b      	sxtb	r3, r3
 800d57a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d57e:	d103      	bne.n	800d588 <xQueueGenericSend+0x16c>
 800d580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d582:	2200      	movs	r2, #0
 800d584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d58e:	b25b      	sxtb	r3, r3
 800d590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d594:	d103      	bne.n	800d59e <xQueueGenericSend+0x182>
 800d596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d598:	2200      	movs	r2, #0
 800d59a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d59e:	f002 f929 	bl	800f7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5a2:	1d3a      	adds	r2, r7, #4
 800d5a4:	f107 0314 	add.w	r3, r7, #20
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f001 f908 	bl	800e7c0 <xTaskCheckForTimeOut>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d124      	bne.n	800d600 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d5b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5b8:	f000 fb8b 	bl	800dcd2 <prvIsQueueFull>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d018      	beq.n	800d5f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c4:	3310      	adds	r3, #16
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f001 f82e 	bl	800e62c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d5d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5d2:	f000 fb16 	bl	800dc02 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d5d6:	f000 fe5d 	bl	800e294 <xTaskResumeAll>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f47f af7c 	bne.w	800d4da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d5e2:	4b0c      	ldr	r3, [pc, #48]	; (800d614 <xQueueGenericSend+0x1f8>)
 800d5e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5e8:	601a      	str	r2, [r3, #0]
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	e772      	b.n	800d4da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d5f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5f6:	f000 fb04 	bl	800dc02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5fa:	f000 fe4b 	bl	800e294 <xTaskResumeAll>
 800d5fe:	e76c      	b.n	800d4da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d602:	f000 fafe 	bl	800dc02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d606:	f000 fe45 	bl	800e294 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d60a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3738      	adds	r7, #56	; 0x38
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	e000ed04 	.word	0xe000ed04

0800d618 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b090      	sub	sp, #64	; 0x40
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	607a      	str	r2, [r7, #4]
 800d624:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10a      	bne.n	800d646 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d642:	bf00      	nop
 800d644:	e7fe      	b.n	800d644 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d103      	bne.n	800d654 <xQueueGenericSendFromISR+0x3c>
 800d64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d650:	2b00      	cmp	r3, #0
 800d652:	d101      	bne.n	800d658 <xQueueGenericSendFromISR+0x40>
 800d654:	2301      	movs	r3, #1
 800d656:	e000      	b.n	800d65a <xQueueGenericSendFromISR+0x42>
 800d658:	2300      	movs	r3, #0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d10a      	bne.n	800d674 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d662:	f383 8811 	msr	BASEPRI, r3
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	f3bf 8f4f 	dsb	sy
 800d66e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d670:	bf00      	nop
 800d672:	e7fe      	b.n	800d672 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	2b02      	cmp	r3, #2
 800d678:	d103      	bne.n	800d682 <xQueueGenericSendFromISR+0x6a>
 800d67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d101      	bne.n	800d686 <xQueueGenericSendFromISR+0x6e>
 800d682:	2301      	movs	r3, #1
 800d684:	e000      	b.n	800d688 <xQueueGenericSendFromISR+0x70>
 800d686:	2300      	movs	r3, #0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10a      	bne.n	800d6a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d690:	f383 8811 	msr	BASEPRI, r3
 800d694:	f3bf 8f6f 	isb	sy
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	623b      	str	r3, [r7, #32]
}
 800d69e:	bf00      	nop
 800d6a0:	e7fe      	b.n	800d6a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6a2:	f002 f959 	bl	800f958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d6a6:	f3ef 8211 	mrs	r2, BASEPRI
 800d6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ae:	f383 8811 	msr	BASEPRI, r3
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	f3bf 8f4f 	dsb	sy
 800d6ba:	61fa      	str	r2, [r7, #28]
 800d6bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d6be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d302      	bcc.n	800d6d4 <xQueueGenericSendFromISR+0xbc>
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	2b02      	cmp	r3, #2
 800d6d2:	d12f      	bne.n	800d734 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6e4:	683a      	ldr	r2, [r7, #0]
 800d6e6:	68b9      	ldr	r1, [r7, #8]
 800d6e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6ea:	f000 f9fa 	bl	800dae2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d6ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d6f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6f6:	d112      	bne.n	800d71e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d016      	beq.n	800d72e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d702:	3324      	adds	r3, #36	; 0x24
 800d704:	4618      	mov	r0, r3
 800d706:	f000 ffe1 	bl	800e6cc <xTaskRemoveFromEventList>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00e      	beq.n	800d72e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00b      	beq.n	800d72e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2201      	movs	r2, #1
 800d71a:	601a      	str	r2, [r3, #0]
 800d71c:	e007      	b.n	800d72e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d71e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d722:	3301      	adds	r3, #1
 800d724:	b2db      	uxtb	r3, r3
 800d726:	b25a      	sxtb	r2, r3
 800d728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d72e:	2301      	movs	r3, #1
 800d730:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d732:	e001      	b.n	800d738 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d734:	2300      	movs	r3, #0
 800d736:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d73a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d742:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d746:	4618      	mov	r0, r3
 800d748:	3740      	adds	r7, #64	; 0x40
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
	...

0800d750 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b08c      	sub	sp, #48	; 0x30
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d75c:	2300      	movs	r3, #0
 800d75e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d766:	2b00      	cmp	r3, #0
 800d768:	d10a      	bne.n	800d780 <xQueueReceive+0x30>
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	623b      	str	r3, [r7, #32]
}
 800d77c:	bf00      	nop
 800d77e:	e7fe      	b.n	800d77e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d103      	bne.n	800d78e <xQueueReceive+0x3e>
 800d786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d101      	bne.n	800d792 <xQueueReceive+0x42>
 800d78e:	2301      	movs	r3, #1
 800d790:	e000      	b.n	800d794 <xQueueReceive+0x44>
 800d792:	2300      	movs	r3, #0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10a      	bne.n	800d7ae <xQueueReceive+0x5e>
	__asm volatile
 800d798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79c:	f383 8811 	msr	BASEPRI, r3
 800d7a0:	f3bf 8f6f 	isb	sy
 800d7a4:	f3bf 8f4f 	dsb	sy
 800d7a8:	61fb      	str	r3, [r7, #28]
}
 800d7aa:	bf00      	nop
 800d7ac:	e7fe      	b.n	800d7ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7ae:	f001 f94f 	bl	800ea50 <xTaskGetSchedulerState>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d102      	bne.n	800d7be <xQueueReceive+0x6e>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d101      	bne.n	800d7c2 <xQueueReceive+0x72>
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e000      	b.n	800d7c4 <xQueueReceive+0x74>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10a      	bne.n	800d7de <xQueueReceive+0x8e>
	__asm volatile
 800d7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	61bb      	str	r3, [r7, #24]
}
 800d7da:	bf00      	nop
 800d7dc:	e7fe      	b.n	800d7dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7de:	f001 ffd9 	bl	800f794 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d01f      	beq.n	800d82e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d7ee:	68b9      	ldr	r1, [r7, #8]
 800d7f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7f2:	f000 f9e0 	bl	800dbb6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f8:	1e5a      	subs	r2, r3, #1
 800d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d800:	691b      	ldr	r3, [r3, #16]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00f      	beq.n	800d826 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d808:	3310      	adds	r3, #16
 800d80a:	4618      	mov	r0, r3
 800d80c:	f000 ff5e 	bl	800e6cc <xTaskRemoveFromEventList>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d007      	beq.n	800d826 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d816:	4b3d      	ldr	r3, [pc, #244]	; (800d90c <xQueueReceive+0x1bc>)
 800d818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d826:	f001 ffe5 	bl	800f7f4 <vPortExitCritical>
				return pdPASS;
 800d82a:	2301      	movs	r3, #1
 800d82c:	e069      	b.n	800d902 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d103      	bne.n	800d83c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d834:	f001 ffde 	bl	800f7f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d838:	2300      	movs	r3, #0
 800d83a:	e062      	b.n	800d902 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d106      	bne.n	800d850 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d842:	f107 0310 	add.w	r3, r7, #16
 800d846:	4618      	mov	r0, r3
 800d848:	f000 ffa4 	bl	800e794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d84c:	2301      	movs	r3, #1
 800d84e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d850:	f001 ffd0 	bl	800f7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d854:	f000 fd10 	bl	800e278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d858:	f001 ff9c 	bl	800f794 <vPortEnterCritical>
 800d85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d862:	b25b      	sxtb	r3, r3
 800d864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d868:	d103      	bne.n	800d872 <xQueueReceive+0x122>
 800d86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d878:	b25b      	sxtb	r3, r3
 800d87a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d87e:	d103      	bne.n	800d888 <xQueueReceive+0x138>
 800d880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d882:	2200      	movs	r2, #0
 800d884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d888:	f001 ffb4 	bl	800f7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d88c:	1d3a      	adds	r2, r7, #4
 800d88e:	f107 0310 	add.w	r3, r7, #16
 800d892:	4611      	mov	r1, r2
 800d894:	4618      	mov	r0, r3
 800d896:	f000 ff93 	bl	800e7c0 <xTaskCheckForTimeOut>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d123      	bne.n	800d8e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8a2:	f000 fa00 	bl	800dca6 <prvIsQueueEmpty>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d017      	beq.n	800d8dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ae:	3324      	adds	r3, #36	; 0x24
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	4611      	mov	r1, r2
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f000 feb9 	bl	800e62c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8bc:	f000 f9a1 	bl	800dc02 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8c0:	f000 fce8 	bl	800e294 <xTaskResumeAll>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d189      	bne.n	800d7de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d8ca:	4b10      	ldr	r3, [pc, #64]	; (800d90c <xQueueReceive+0x1bc>)
 800d8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8d0:	601a      	str	r2, [r3, #0]
 800d8d2:	f3bf 8f4f 	dsb	sy
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	e780      	b.n	800d7de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d8dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8de:	f000 f990 	bl	800dc02 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8e2:	f000 fcd7 	bl	800e294 <xTaskResumeAll>
 800d8e6:	e77a      	b.n	800d7de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d8e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8ea:	f000 f98a 	bl	800dc02 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8ee:	f000 fcd1 	bl	800e294 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8f4:	f000 f9d7 	bl	800dca6 <prvIsQueueEmpty>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	f43f af6f 	beq.w	800d7de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d900:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d902:	4618      	mov	r0, r3
 800d904:	3730      	adds	r7, #48	; 0x30
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	e000ed04 	.word	0xe000ed04

0800d910 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b08e      	sub	sp, #56	; 0x38
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d922:	2b00      	cmp	r3, #0
 800d924:	d10a      	bne.n	800d93c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	623b      	str	r3, [r7, #32]
}
 800d938:	bf00      	nop
 800d93a:	e7fe      	b.n	800d93a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d103      	bne.n	800d94a <xQueueReceiveFromISR+0x3a>
 800d942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <xQueueReceiveFromISR+0x3e>
 800d94a:	2301      	movs	r3, #1
 800d94c:	e000      	b.n	800d950 <xQueueReceiveFromISR+0x40>
 800d94e:	2300      	movs	r3, #0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d10a      	bne.n	800d96a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	61fb      	str	r3, [r7, #28]
}
 800d966:	bf00      	nop
 800d968:	e7fe      	b.n	800d968 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d96a:	f001 fff5 	bl	800f958 <vPortValidateInterruptPriority>
	__asm volatile
 800d96e:	f3ef 8211 	mrs	r2, BASEPRI
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	61ba      	str	r2, [r7, #24]
 800d984:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d986:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d988:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d992:	2b00      	cmp	r3, #0
 800d994:	d02f      	beq.n	800d9f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9a0:	68b9      	ldr	r1, [r7, #8]
 800d9a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9a4:	f000 f907 	bl	800dbb6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9aa:	1e5a      	subs	r2, r3, #1
 800d9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d9b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d9b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9b8:	d112      	bne.n	800d9e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9bc:	691b      	ldr	r3, [r3, #16]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d016      	beq.n	800d9f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	3310      	adds	r3, #16
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f000 fe80 	bl	800e6cc <xTaskRemoveFromEventList>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d00e      	beq.n	800d9f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00b      	beq.n	800d9f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	601a      	str	r2, [r3, #0]
 800d9de:	e007      	b.n	800d9f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	b25a      	sxtb	r2, r3
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	637b      	str	r3, [r7, #52]	; 0x34
 800d9f4:	e001      	b.n	800d9fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	637b      	str	r3, [r7, #52]	; 0x34
 800d9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	f383 8811 	msr	BASEPRI, r3
}
 800da04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3738      	adds	r7, #56	; 0x38
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b08c      	sub	sp, #48	; 0x30
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800da1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10a      	bne.n	800da3a <xQueuePeekFromISR+0x2a>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	61fb      	str	r3, [r7, #28]
}
 800da36:	bf00      	nop
 800da38:	e7fe      	b.n	800da38 <xQueuePeekFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d103      	bne.n	800da48 <xQueuePeekFromISR+0x38>
 800da40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da44:	2b00      	cmp	r3, #0
 800da46:	d101      	bne.n	800da4c <xQueuePeekFromISR+0x3c>
 800da48:	2301      	movs	r3, #1
 800da4a:	e000      	b.n	800da4e <xQueuePeekFromISR+0x3e>
 800da4c:	2300      	movs	r3, #0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d10a      	bne.n	800da68 <xQueuePeekFromISR+0x58>
	__asm volatile
 800da52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da56:	f383 8811 	msr	BASEPRI, r3
 800da5a:	f3bf 8f6f 	isb	sy
 800da5e:	f3bf 8f4f 	dsb	sy
 800da62:	61bb      	str	r3, [r7, #24]
}
 800da64:	bf00      	nop
 800da66:	e7fe      	b.n	800da66 <xQueuePeekFromISR+0x56>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 800da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10a      	bne.n	800da86 <xQueuePeekFromISR+0x76>
	__asm volatile
 800da70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da74:	f383 8811 	msr	BASEPRI, r3
 800da78:	f3bf 8f6f 	isb	sy
 800da7c:	f3bf 8f4f 	dsb	sy
 800da80:	617b      	str	r3, [r7, #20]
}
 800da82:	bf00      	nop
 800da84:	e7fe      	b.n	800da84 <xQueuePeekFromISR+0x74>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da86:	f001 ff67 	bl	800f958 <vPortValidateInterruptPriority>
	__asm volatile
 800da8a:	f3ef 8211 	mrs	r2, BASEPRI
 800da8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da92:	f383 8811 	msr	BASEPRI, r3
 800da96:	f3bf 8f6f 	isb	sy
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	613a      	str	r2, [r7, #16]
 800daa0:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800daa2:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800daa4:	627b      	str	r3, [r7, #36]	; 0x24
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800daa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00c      	beq.n	800dac8 <xQueuePeekFromISR+0xb8>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 800daae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	623b      	str	r3, [r7, #32]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dab4:	6839      	ldr	r1, [r7, #0]
 800dab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dab8:	f000 f87d 	bl	800dbb6 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 800dabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabe:	6a3a      	ldr	r2, [r7, #32]
 800dac0:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 800dac2:	2301      	movs	r3, #1
 800dac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dac6:	e001      	b.n	800dacc <xQueuePeekFromISR+0xbc>
		}
		else
		{
			xReturn = pdFAIL;
 800dac8:	2300      	movs	r3, #0
 800daca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dace:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	f383 8811 	msr	BASEPRI, r3
}
 800dad6:	bf00      	nop
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3730      	adds	r7, #48	; 0x30
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b086      	sub	sp, #24
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	60f8      	str	r0, [r7, #12]
 800daea:	60b9      	str	r1, [r7, #8]
 800daec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800daee:	2300      	movs	r3, #0
 800daf0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daf6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10d      	bne.n	800db1c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d14d      	bne.n	800dba4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f000 ffbd 	bl	800ea8c <xTaskPriorityDisinherit>
 800db12:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2200      	movs	r2, #0
 800db18:	609a      	str	r2, [r3, #8]
 800db1a:	e043      	b.n	800dba4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d119      	bne.n	800db56 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	6858      	ldr	r0, [r3, #4]
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db2a:	461a      	mov	r2, r3
 800db2c:	68b9      	ldr	r1, [r7, #8]
 800db2e:	f002 fc7b 	bl	8010428 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	685a      	ldr	r2, [r3, #4]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db3a:	441a      	add	r2, r3
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	685a      	ldr	r2, [r3, #4]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d32b      	bcc.n	800dba4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	605a      	str	r2, [r3, #4]
 800db54:	e026      	b.n	800dba4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	68d8      	ldr	r0, [r3, #12]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db5e:	461a      	mov	r2, r3
 800db60:	68b9      	ldr	r1, [r7, #8]
 800db62:	f002 fc61 	bl	8010428 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	68da      	ldr	r2, [r3, #12]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6e:	425b      	negs	r3, r3
 800db70:	441a      	add	r2, r3
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	68da      	ldr	r2, [r3, #12]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d207      	bcs.n	800db92 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	689a      	ldr	r2, [r3, #8]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db8a:	425b      	negs	r3, r3
 800db8c:	441a      	add	r2, r3
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2b02      	cmp	r3, #2
 800db96:	d105      	bne.n	800dba4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d002      	beq.n	800dba4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	3b01      	subs	r3, #1
 800dba2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	1c5a      	adds	r2, r3, #1
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dbac:	697b      	ldr	r3, [r7, #20]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3718      	adds	r7, #24
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b082      	sub	sp, #8
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
 800dbbe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d018      	beq.n	800dbfa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	68da      	ldr	r2, [r3, #12]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd0:	441a      	add	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	68da      	ldr	r2, [r3, #12]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d303      	bcc.n	800dbea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	68d9      	ldr	r1, [r3, #12]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	6838      	ldr	r0, [r7, #0]
 800dbf6:	f002 fc17 	bl	8010428 <memcpy>
	}
}
 800dbfa:	bf00      	nop
 800dbfc:	3708      	adds	r7, #8
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b084      	sub	sp, #16
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dc0a:	f001 fdc3 	bl	800f794 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc14:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc16:	e011      	b.n	800dc3c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d012      	beq.n	800dc46 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	3324      	adds	r3, #36	; 0x24
 800dc24:	4618      	mov	r0, r3
 800dc26:	f000 fd51 	bl	800e6cc <xTaskRemoveFromEventList>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d001      	beq.n	800dc34 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc30:	f000 fe28 	bl	800e884 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc34:	7bfb      	ldrb	r3, [r7, #15]
 800dc36:	3b01      	subs	r3, #1
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	dce9      	bgt.n	800dc18 <prvUnlockQueue+0x16>
 800dc44:	e000      	b.n	800dc48 <prvUnlockQueue+0x46>
					break;
 800dc46:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	22ff      	movs	r2, #255	; 0xff
 800dc4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc50:	f001 fdd0 	bl	800f7f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc54:	f001 fd9e 	bl	800f794 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc5e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc60:	e011      	b.n	800dc86 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	691b      	ldr	r3, [r3, #16]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d012      	beq.n	800dc90 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	3310      	adds	r3, #16
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f000 fd2c 	bl	800e6cc <xTaskRemoveFromEventList>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d001      	beq.n	800dc7e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc7a:	f000 fe03 	bl	800e884 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc7e:	7bbb      	ldrb	r3, [r7, #14]
 800dc80:	3b01      	subs	r3, #1
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	dce9      	bgt.n	800dc62 <prvUnlockQueue+0x60>
 800dc8e:	e000      	b.n	800dc92 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc90:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	22ff      	movs	r2, #255	; 0xff
 800dc96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc9a:	f001 fdab 	bl	800f7f4 <vPortExitCritical>
}
 800dc9e:	bf00      	nop
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b084      	sub	sp, #16
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcae:	f001 fd71 	bl	800f794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d102      	bne.n	800dcc0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	60fb      	str	r3, [r7, #12]
 800dcbe:	e001      	b.n	800dcc4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcc4:	f001 fd96 	bl	800f7f4 <vPortExitCritical>

	return xReturn;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b084      	sub	sp, #16
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcda:	f001 fd5b 	bl	800f794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d102      	bne.n	800dcf0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dcea:	2301      	movs	r3, #1
 800dcec:	60fb      	str	r3, [r7, #12]
 800dcee:	e001      	b.n	800dcf4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcf4:	f001 fd7e 	bl	800f7f4 <vPortExitCritical>

	return xReturn;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
	...

0800dd04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dd04:	b480      	push	{r7}
 800dd06:	b085      	sub	sp, #20
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd0e:	2300      	movs	r3, #0
 800dd10:	60fb      	str	r3, [r7, #12]
 800dd12:	e014      	b.n	800dd3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dd14:	4a0f      	ldr	r2, [pc, #60]	; (800dd54 <vQueueAddToRegistry+0x50>)
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d10b      	bne.n	800dd38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dd20:	490c      	ldr	r1, [pc, #48]	; (800dd54 <vQueueAddToRegistry+0x50>)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	683a      	ldr	r2, [r7, #0]
 800dd26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dd2a:	4a0a      	ldr	r2, [pc, #40]	; (800dd54 <vQueueAddToRegistry+0x50>)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	00db      	lsls	r3, r3, #3
 800dd30:	4413      	add	r3, r2
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dd36:	e006      	b.n	800dd46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	60fb      	str	r3, [r7, #12]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2b07      	cmp	r3, #7
 800dd42:	d9e7      	bls.n	800dd14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dd44:	bf00      	nop
 800dd46:	bf00      	nop
 800dd48:	3714      	adds	r7, #20
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	20004f84 	.word	0x20004f84

0800dd58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd68:	f001 fd14 	bl	800f794 <vPortEnterCritical>
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd72:	b25b      	sxtb	r3, r3
 800dd74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd78:	d103      	bne.n	800dd82 <vQueueWaitForMessageRestricted+0x2a>
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd88:	b25b      	sxtb	r3, r3
 800dd8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd8e:	d103      	bne.n	800dd98 <vQueueWaitForMessageRestricted+0x40>
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd98:	f001 fd2c 	bl	800f7f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d106      	bne.n	800ddb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	3324      	adds	r3, #36	; 0x24
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	68b9      	ldr	r1, [r7, #8]
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 fc61 	bl	800e674 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ddb2:	6978      	ldr	r0, [r7, #20]
 800ddb4:	f7ff ff25 	bl	800dc02 <prvUnlockQueue>
	}
 800ddb8:	bf00      	nop
 800ddba:	3718      	adds	r7, #24
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08e      	sub	sp, #56	; 0x38
 800ddc4:	af04      	add	r7, sp, #16
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
 800ddcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ddce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d10a      	bne.n	800ddea <xTaskCreateStatic+0x2a>
	__asm volatile
 800ddd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	623b      	str	r3, [r7, #32]
}
 800dde6:	bf00      	nop
 800dde8:	e7fe      	b.n	800dde8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ddea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d10a      	bne.n	800de06 <xTaskCreateStatic+0x46>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	61fb      	str	r3, [r7, #28]
}
 800de02:	bf00      	nop
 800de04:	e7fe      	b.n	800de04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de06:	23bc      	movs	r3, #188	; 0xbc
 800de08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	2bbc      	cmp	r3, #188	; 0xbc
 800de0e:	d00a      	beq.n	800de26 <xTaskCreateStatic+0x66>
	__asm volatile
 800de10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	61bb      	str	r3, [r7, #24]
}
 800de22:	bf00      	nop
 800de24:	e7fe      	b.n	800de24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d01e      	beq.n	800de6c <xTaskCreateStatic+0xac>
 800de2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de30:	2b00      	cmp	r3, #0
 800de32:	d01b      	beq.n	800de6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de40:	2202      	movs	r2, #2
 800de42:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de46:	2300      	movs	r3, #0
 800de48:	9303      	str	r3, [sp, #12]
 800de4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4c:	9302      	str	r3, [sp, #8]
 800de4e:	f107 0314 	add.w	r3, r7, #20
 800de52:	9301      	str	r3, [sp, #4]
 800de54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	68b9      	ldr	r1, [r7, #8]
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f000 f850 	bl	800df04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de66:	f000 f8f3 	bl	800e050 <prvAddNewTaskToReadyList>
 800de6a:	e001      	b.n	800de70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800de6c:	2300      	movs	r3, #0
 800de6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de70:	697b      	ldr	r3, [r7, #20]
	}
 800de72:	4618      	mov	r0, r3
 800de74:	3728      	adds	r7, #40	; 0x28
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b08c      	sub	sp, #48	; 0x30
 800de7e:	af04      	add	r7, sp, #16
 800de80:	60f8      	str	r0, [r7, #12]
 800de82:	60b9      	str	r1, [r7, #8]
 800de84:	603b      	str	r3, [r7, #0]
 800de86:	4613      	mov	r3, r2
 800de88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de8a:	88fb      	ldrh	r3, [r7, #6]
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	4618      	mov	r0, r3
 800de90:	f001 fda2 	bl	800f9d8 <pvPortMalloc>
 800de94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d00e      	beq.n	800deba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de9c:	20bc      	movs	r0, #188	; 0xbc
 800de9e:	f001 fd9b 	bl	800f9d8 <pvPortMalloc>
 800dea2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d003      	beq.n	800deb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	697a      	ldr	r2, [r7, #20]
 800deae:	631a      	str	r2, [r3, #48]	; 0x30
 800deb0:	e005      	b.n	800debe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800deb2:	6978      	ldr	r0, [r7, #20]
 800deb4:	f001 fe5c 	bl	800fb70 <vPortFree>
 800deb8:	e001      	b.n	800debe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800deba:	2300      	movs	r3, #0
 800debc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d017      	beq.n	800def4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	2200      	movs	r2, #0
 800dec8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800decc:	88fa      	ldrh	r2, [r7, #6]
 800dece:	2300      	movs	r3, #0
 800ded0:	9303      	str	r3, [sp, #12]
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	9302      	str	r3, [sp, #8]
 800ded6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	68b9      	ldr	r1, [r7, #8]
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f000 f80e 	bl	800df04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dee8:	69f8      	ldr	r0, [r7, #28]
 800deea:	f000 f8b1 	bl	800e050 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800deee:	2301      	movs	r3, #1
 800def0:	61bb      	str	r3, [r7, #24]
 800def2:	e002      	b.n	800defa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800def4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800def8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800defa:	69bb      	ldr	r3, [r7, #24]
	}
 800defc:	4618      	mov	r0, r3
 800defe:	3720      	adds	r7, #32
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b088      	sub	sp, #32
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
 800df10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	461a      	mov	r2, r3
 800df1c:	21a5      	movs	r1, #165	; 0xa5
 800df1e:	f002 fa91 	bl	8010444 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800df2c:	3b01      	subs	r3, #1
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	4413      	add	r3, r2
 800df32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	f023 0307 	bic.w	r3, r3, #7
 800df3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df3c:	69bb      	ldr	r3, [r7, #24]
 800df3e:	f003 0307 	and.w	r3, r3, #7
 800df42:	2b00      	cmp	r3, #0
 800df44:	d00a      	beq.n	800df5c <prvInitialiseNewTask+0x58>
	__asm volatile
 800df46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4a:	f383 8811 	msr	BASEPRI, r3
 800df4e:	f3bf 8f6f 	isb	sy
 800df52:	f3bf 8f4f 	dsb	sy
 800df56:	617b      	str	r3, [r7, #20]
}
 800df58:	bf00      	nop
 800df5a:	e7fe      	b.n	800df5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d01f      	beq.n	800dfa2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df62:	2300      	movs	r3, #0
 800df64:	61fb      	str	r3, [r7, #28]
 800df66:	e012      	b.n	800df8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df68:	68ba      	ldr	r2, [r7, #8]
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	4413      	add	r3, r2
 800df6e:	7819      	ldrb	r1, [r3, #0]
 800df70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	4413      	add	r3, r2
 800df76:	3334      	adds	r3, #52	; 0x34
 800df78:	460a      	mov	r2, r1
 800df7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	4413      	add	r3, r2
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d006      	beq.n	800df96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	3301      	adds	r3, #1
 800df8c:	61fb      	str	r3, [r7, #28]
 800df8e:	69fb      	ldr	r3, [r7, #28]
 800df90:	2b0f      	cmp	r3, #15
 800df92:	d9e9      	bls.n	800df68 <prvInitialiseNewTask+0x64>
 800df94:	e000      	b.n	800df98 <prvInitialiseNewTask+0x94>
			{
				break;
 800df96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9a:	2200      	movs	r2, #0
 800df9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dfa0:	e003      	b.n	800dfaa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfac:	2b37      	cmp	r3, #55	; 0x37
 800dfae:	d901      	bls.n	800dfb4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dfb0:	2337      	movs	r3, #55	; 0x37
 800dfb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc8:	3304      	adds	r3, #4
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7ff f854 	bl	800d078 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd2:	3318      	adds	r3, #24
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7ff f84f 	bl	800d078 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff2:	2200      	movs	r2, #0
 800dff4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffa:	2200      	movs	r2, #0
 800dffc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e002:	3354      	adds	r3, #84	; 0x54
 800e004:	2260      	movs	r2, #96	; 0x60
 800e006:	2100      	movs	r1, #0
 800e008:	4618      	mov	r0, r3
 800e00a:	f002 fa1b 	bl	8010444 <memset>
 800e00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e010:	4a0c      	ldr	r2, [pc, #48]	; (800e044 <prvInitialiseNewTask+0x140>)
 800e012:	659a      	str	r2, [r3, #88]	; 0x58
 800e014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e016:	4a0c      	ldr	r2, [pc, #48]	; (800e048 <prvInitialiseNewTask+0x144>)
 800e018:	65da      	str	r2, [r3, #92]	; 0x5c
 800e01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01c:	4a0b      	ldr	r2, [pc, #44]	; (800e04c <prvInitialiseNewTask+0x148>)
 800e01e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	68f9      	ldr	r1, [r7, #12]
 800e024:	69b8      	ldr	r0, [r7, #24]
 800e026:	f001 fa85 	bl	800f534 <pxPortInitialiseStack>
 800e02a:	4602      	mov	r2, r0
 800e02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e032:	2b00      	cmp	r3, #0
 800e034:	d002      	beq.n	800e03c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e03a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e03c:	bf00      	nop
 800e03e:	3720      	adds	r7, #32
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	080134f8 	.word	0x080134f8
 800e048:	08013518 	.word	0x08013518
 800e04c:	080134d8 	.word	0x080134d8

0800e050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e058:	f001 fb9c 	bl	800f794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e05c:	4b2d      	ldr	r3, [pc, #180]	; (800e114 <prvAddNewTaskToReadyList+0xc4>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3301      	adds	r3, #1
 800e062:	4a2c      	ldr	r2, [pc, #176]	; (800e114 <prvAddNewTaskToReadyList+0xc4>)
 800e064:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e066:	4b2c      	ldr	r3, [pc, #176]	; (800e118 <prvAddNewTaskToReadyList+0xc8>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d109      	bne.n	800e082 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e06e:	4a2a      	ldr	r2, [pc, #168]	; (800e118 <prvAddNewTaskToReadyList+0xc8>)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e074:	4b27      	ldr	r3, [pc, #156]	; (800e114 <prvAddNewTaskToReadyList+0xc4>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d110      	bne.n	800e09e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e07c:	f000 fc26 	bl	800e8cc <prvInitialiseTaskLists>
 800e080:	e00d      	b.n	800e09e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e082:	4b26      	ldr	r3, [pc, #152]	; (800e11c <prvAddNewTaskToReadyList+0xcc>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d109      	bne.n	800e09e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e08a:	4b23      	ldr	r3, [pc, #140]	; (800e118 <prvAddNewTaskToReadyList+0xc8>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e094:	429a      	cmp	r2, r3
 800e096:	d802      	bhi.n	800e09e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e098:	4a1f      	ldr	r2, [pc, #124]	; (800e118 <prvAddNewTaskToReadyList+0xc8>)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e09e:	4b20      	ldr	r3, [pc, #128]	; (800e120 <prvAddNewTaskToReadyList+0xd0>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	4a1e      	ldr	r2, [pc, #120]	; (800e120 <prvAddNewTaskToReadyList+0xd0>)
 800e0a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e0a8:	4b1d      	ldr	r3, [pc, #116]	; (800e120 <prvAddNewTaskToReadyList+0xd0>)
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b4:	4b1b      	ldr	r3, [pc, #108]	; (800e124 <prvAddNewTaskToReadyList+0xd4>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d903      	bls.n	800e0c4 <prvAddNewTaskToReadyList+0x74>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c0:	4a18      	ldr	r2, [pc, #96]	; (800e124 <prvAddNewTaskToReadyList+0xd4>)
 800e0c2:	6013      	str	r3, [r2, #0]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c8:	4613      	mov	r3, r2
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	4413      	add	r3, r2
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	4a15      	ldr	r2, [pc, #84]	; (800e128 <prvAddNewTaskToReadyList+0xd8>)
 800e0d2:	441a      	add	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	3304      	adds	r3, #4
 800e0d8:	4619      	mov	r1, r3
 800e0da:	4610      	mov	r0, r2
 800e0dc:	f7fe ffd9 	bl	800d092 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e0e0:	f001 fb88 	bl	800f7f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e0e4:	4b0d      	ldr	r3, [pc, #52]	; (800e11c <prvAddNewTaskToReadyList+0xcc>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00e      	beq.n	800e10a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e0ec:	4b0a      	ldr	r3, [pc, #40]	; (800e118 <prvAddNewTaskToReadyList+0xc8>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d207      	bcs.n	800e10a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e0fa:	4b0c      	ldr	r3, [pc, #48]	; (800e12c <prvAddNewTaskToReadyList+0xdc>)
 800e0fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e100:	601a      	str	r2, [r3, #0]
 800e102:	f3bf 8f4f 	dsb	sy
 800e106:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e10a:	bf00      	nop
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	20000d24 	.word	0x20000d24
 800e118:	20000850 	.word	0x20000850
 800e11c:	20000d30 	.word	0x20000d30
 800e120:	20000d40 	.word	0x20000d40
 800e124:	20000d2c 	.word	0x20000d2c
 800e128:	20000854 	.word	0x20000854
 800e12c:	e000ed04 	.word	0xe000ed04

0800e130 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e138:	2300      	movs	r3, #0
 800e13a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d017      	beq.n	800e172 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e142:	4b13      	ldr	r3, [pc, #76]	; (800e190 <vTaskDelay+0x60>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00a      	beq.n	800e160 <vTaskDelay+0x30>
	__asm volatile
 800e14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14e:	f383 8811 	msr	BASEPRI, r3
 800e152:	f3bf 8f6f 	isb	sy
 800e156:	f3bf 8f4f 	dsb	sy
 800e15a:	60bb      	str	r3, [r7, #8]
}
 800e15c:	bf00      	nop
 800e15e:	e7fe      	b.n	800e15e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e160:	f000 f88a 	bl	800e278 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e164:	2100      	movs	r1, #0
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 fe42 	bl	800edf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e16c:	f000 f892 	bl	800e294 <xTaskResumeAll>
 800e170:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d107      	bne.n	800e188 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e178:	4b06      	ldr	r3, [pc, #24]	; (800e194 <vTaskDelay+0x64>)
 800e17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e17e:	601a      	str	r2, [r3, #0]
 800e180:	f3bf 8f4f 	dsb	sy
 800e184:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e188:	bf00      	nop
 800e18a:	3710      	adds	r7, #16
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	20000d4c 	.word	0x20000d4c
 800e194:	e000ed04 	.word	0xe000ed04

0800e198 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b08a      	sub	sp, #40	; 0x28
 800e19c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1a6:	463a      	mov	r2, r7
 800e1a8:	1d39      	adds	r1, r7, #4
 800e1aa:	f107 0308 	add.w	r3, r7, #8
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fe ff0e 	bl	800cfd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e1b4:	6839      	ldr	r1, [r7, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	68ba      	ldr	r2, [r7, #8]
 800e1ba:	9202      	str	r2, [sp, #8]
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	2300      	movs	r3, #0
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	460a      	mov	r2, r1
 800e1c6:	4924      	ldr	r1, [pc, #144]	; (800e258 <vTaskStartScheduler+0xc0>)
 800e1c8:	4824      	ldr	r0, [pc, #144]	; (800e25c <vTaskStartScheduler+0xc4>)
 800e1ca:	f7ff fdf9 	bl	800ddc0 <xTaskCreateStatic>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	4a23      	ldr	r2, [pc, #140]	; (800e260 <vTaskStartScheduler+0xc8>)
 800e1d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e1d4:	4b22      	ldr	r3, [pc, #136]	; (800e260 <vTaskStartScheduler+0xc8>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	617b      	str	r3, [r7, #20]
 800e1e0:	e001      	b.n	800e1e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d102      	bne.n	800e1f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e1ec:	f000 fe54 	bl	800ee98 <xTimerCreateTimerTask>
 800e1f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d11b      	bne.n	800e230 <vTaskStartScheduler+0x98>
	__asm volatile
 800e1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	613b      	str	r3, [r7, #16]
}
 800e20a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e20c:	4b15      	ldr	r3, [pc, #84]	; (800e264 <vTaskStartScheduler+0xcc>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	3354      	adds	r3, #84	; 0x54
 800e212:	4a15      	ldr	r2, [pc, #84]	; (800e268 <vTaskStartScheduler+0xd0>)
 800e214:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e216:	4b15      	ldr	r3, [pc, #84]	; (800e26c <vTaskStartScheduler+0xd4>)
 800e218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e21c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e21e:	4b14      	ldr	r3, [pc, #80]	; (800e270 <vTaskStartScheduler+0xd8>)
 800e220:	2201      	movs	r2, #1
 800e222:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e224:	4b13      	ldr	r3, [pc, #76]	; (800e274 <vTaskStartScheduler+0xdc>)
 800e226:	2200      	movs	r2, #0
 800e228:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e22a:	f001 fa11 	bl	800f650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e22e:	e00e      	b.n	800e24e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e236:	d10a      	bne.n	800e24e <vTaskStartScheduler+0xb6>
	__asm volatile
 800e238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23c:	f383 8811 	msr	BASEPRI, r3
 800e240:	f3bf 8f6f 	isb	sy
 800e244:	f3bf 8f4f 	dsb	sy
 800e248:	60fb      	str	r3, [r7, #12]
}
 800e24a:	bf00      	nop
 800e24c:	e7fe      	b.n	800e24c <vTaskStartScheduler+0xb4>
}
 800e24e:	bf00      	nop
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	08010f14 	.word	0x08010f14
 800e25c:	0800e89d 	.word	0x0800e89d
 800e260:	20000d48 	.word	0x20000d48
 800e264:	20000850 	.word	0x20000850
 800e268:	20000030 	.word	0x20000030
 800e26c:	20000d44 	.word	0x20000d44
 800e270:	20000d30 	.word	0x20000d30
 800e274:	20000d28 	.word	0x20000d28

0800e278 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e278:	b480      	push	{r7}
 800e27a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e27c:	4b04      	ldr	r3, [pc, #16]	; (800e290 <vTaskSuspendAll+0x18>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	3301      	adds	r3, #1
 800e282:	4a03      	ldr	r2, [pc, #12]	; (800e290 <vTaskSuspendAll+0x18>)
 800e284:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e286:	bf00      	nop
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr
 800e290:	20000d4c 	.word	0x20000d4c

0800e294 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e29a:	2300      	movs	r3, #0
 800e29c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e2a2:	4b42      	ldr	r3, [pc, #264]	; (800e3ac <xTaskResumeAll+0x118>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d10a      	bne.n	800e2c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800e2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ae:	f383 8811 	msr	BASEPRI, r3
 800e2b2:	f3bf 8f6f 	isb	sy
 800e2b6:	f3bf 8f4f 	dsb	sy
 800e2ba:	603b      	str	r3, [r7, #0]
}
 800e2bc:	bf00      	nop
 800e2be:	e7fe      	b.n	800e2be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e2c0:	f001 fa68 	bl	800f794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e2c4:	4b39      	ldr	r3, [pc, #228]	; (800e3ac <xTaskResumeAll+0x118>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	4a38      	ldr	r2, [pc, #224]	; (800e3ac <xTaskResumeAll+0x118>)
 800e2cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2ce:	4b37      	ldr	r3, [pc, #220]	; (800e3ac <xTaskResumeAll+0x118>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d162      	bne.n	800e39c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e2d6:	4b36      	ldr	r3, [pc, #216]	; (800e3b0 <xTaskResumeAll+0x11c>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d05e      	beq.n	800e39c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2de:	e02f      	b.n	800e340 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2e0:	4b34      	ldr	r3, [pc, #208]	; (800e3b4 <xTaskResumeAll+0x120>)
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	3318      	adds	r3, #24
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fe ff2d 	bl	800d14c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	3304      	adds	r3, #4
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7fe ff28 	bl	800d14c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e300:	4b2d      	ldr	r3, [pc, #180]	; (800e3b8 <xTaskResumeAll+0x124>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	429a      	cmp	r2, r3
 800e306:	d903      	bls.n	800e310 <xTaskResumeAll+0x7c>
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30c:	4a2a      	ldr	r2, [pc, #168]	; (800e3b8 <xTaskResumeAll+0x124>)
 800e30e:	6013      	str	r3, [r2, #0]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e314:	4613      	mov	r3, r2
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	4413      	add	r3, r2
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4a27      	ldr	r2, [pc, #156]	; (800e3bc <xTaskResumeAll+0x128>)
 800e31e:	441a      	add	r2, r3
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	3304      	adds	r3, #4
 800e324:	4619      	mov	r1, r3
 800e326:	4610      	mov	r0, r2
 800e328:	f7fe feb3 	bl	800d092 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e330:	4b23      	ldr	r3, [pc, #140]	; (800e3c0 <xTaskResumeAll+0x12c>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e336:	429a      	cmp	r2, r3
 800e338:	d302      	bcc.n	800e340 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e33a:	4b22      	ldr	r3, [pc, #136]	; (800e3c4 <xTaskResumeAll+0x130>)
 800e33c:	2201      	movs	r2, #1
 800e33e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e340:	4b1c      	ldr	r3, [pc, #112]	; (800e3b4 <xTaskResumeAll+0x120>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1cb      	bne.n	800e2e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d001      	beq.n	800e352 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e34e:	f000 fb5f 	bl	800ea10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e352:	4b1d      	ldr	r3, [pc, #116]	; (800e3c8 <xTaskResumeAll+0x134>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d010      	beq.n	800e380 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e35e:	f000 f847 	bl	800e3f0 <xTaskIncrementTick>
 800e362:	4603      	mov	r3, r0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d002      	beq.n	800e36e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e368:	4b16      	ldr	r3, [pc, #88]	; (800e3c4 <xTaskResumeAll+0x130>)
 800e36a:	2201      	movs	r2, #1
 800e36c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	3b01      	subs	r3, #1
 800e372:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1f1      	bne.n	800e35e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e37a:	4b13      	ldr	r3, [pc, #76]	; (800e3c8 <xTaskResumeAll+0x134>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e380:	4b10      	ldr	r3, [pc, #64]	; (800e3c4 <xTaskResumeAll+0x130>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d009      	beq.n	800e39c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e388:	2301      	movs	r3, #1
 800e38a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e38c:	4b0f      	ldr	r3, [pc, #60]	; (800e3cc <xTaskResumeAll+0x138>)
 800e38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e39c:	f001 fa2a 	bl	800f7f4 <vPortExitCritical>

	return xAlreadyYielded;
 800e3a0:	68bb      	ldr	r3, [r7, #8]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	20000d4c 	.word	0x20000d4c
 800e3b0:	20000d24 	.word	0x20000d24
 800e3b4:	20000ce4 	.word	0x20000ce4
 800e3b8:	20000d2c 	.word	0x20000d2c
 800e3bc:	20000854 	.word	0x20000854
 800e3c0:	20000850 	.word	0x20000850
 800e3c4:	20000d38 	.word	0x20000d38
 800e3c8:	20000d34 	.word	0x20000d34
 800e3cc:	e000ed04 	.word	0xe000ed04

0800e3d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e3d6:	4b05      	ldr	r3, [pc, #20]	; (800e3ec <xTaskGetTickCount+0x1c>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e3dc:	687b      	ldr	r3, [r7, #4]
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	370c      	adds	r7, #12
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr
 800e3ea:	bf00      	nop
 800e3ec:	20000d28 	.word	0x20000d28

0800e3f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b086      	sub	sp, #24
 800e3f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3fa:	4b4f      	ldr	r3, [pc, #316]	; (800e538 <xTaskIncrementTick+0x148>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f040 808f 	bne.w	800e522 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e404:	4b4d      	ldr	r3, [pc, #308]	; (800e53c <xTaskIncrementTick+0x14c>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	3301      	adds	r3, #1
 800e40a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e40c:	4a4b      	ldr	r2, [pc, #300]	; (800e53c <xTaskIncrementTick+0x14c>)
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d120      	bne.n	800e45a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e418:	4b49      	ldr	r3, [pc, #292]	; (800e540 <xTaskIncrementTick+0x150>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d00a      	beq.n	800e438 <xTaskIncrementTick+0x48>
	__asm volatile
 800e422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e426:	f383 8811 	msr	BASEPRI, r3
 800e42a:	f3bf 8f6f 	isb	sy
 800e42e:	f3bf 8f4f 	dsb	sy
 800e432:	603b      	str	r3, [r7, #0]
}
 800e434:	bf00      	nop
 800e436:	e7fe      	b.n	800e436 <xTaskIncrementTick+0x46>
 800e438:	4b41      	ldr	r3, [pc, #260]	; (800e540 <xTaskIncrementTick+0x150>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	60fb      	str	r3, [r7, #12]
 800e43e:	4b41      	ldr	r3, [pc, #260]	; (800e544 <xTaskIncrementTick+0x154>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4a3f      	ldr	r2, [pc, #252]	; (800e540 <xTaskIncrementTick+0x150>)
 800e444:	6013      	str	r3, [r2, #0]
 800e446:	4a3f      	ldr	r2, [pc, #252]	; (800e544 <xTaskIncrementTick+0x154>)
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6013      	str	r3, [r2, #0]
 800e44c:	4b3e      	ldr	r3, [pc, #248]	; (800e548 <xTaskIncrementTick+0x158>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3301      	adds	r3, #1
 800e452:	4a3d      	ldr	r2, [pc, #244]	; (800e548 <xTaskIncrementTick+0x158>)
 800e454:	6013      	str	r3, [r2, #0]
 800e456:	f000 fadb 	bl	800ea10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e45a:	4b3c      	ldr	r3, [pc, #240]	; (800e54c <xTaskIncrementTick+0x15c>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	693a      	ldr	r2, [r7, #16]
 800e460:	429a      	cmp	r2, r3
 800e462:	d349      	bcc.n	800e4f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e464:	4b36      	ldr	r3, [pc, #216]	; (800e540 <xTaskIncrementTick+0x150>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d104      	bne.n	800e478 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e46e:	4b37      	ldr	r3, [pc, #220]	; (800e54c <xTaskIncrementTick+0x15c>)
 800e470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e474:	601a      	str	r2, [r3, #0]
					break;
 800e476:	e03f      	b.n	800e4f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e478:	4b31      	ldr	r3, [pc, #196]	; (800e540 <xTaskIncrementTick+0x150>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e488:	693a      	ldr	r2, [r7, #16]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d203      	bcs.n	800e498 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e490:	4a2e      	ldr	r2, [pc, #184]	; (800e54c <xTaskIncrementTick+0x15c>)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e496:	e02f      	b.n	800e4f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	3304      	adds	r3, #4
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7fe fe55 	bl	800d14c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d004      	beq.n	800e4b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	3318      	adds	r3, #24
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fe fe4c 	bl	800d14c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4b8:	4b25      	ldr	r3, [pc, #148]	; (800e550 <xTaskIncrementTick+0x160>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d903      	bls.n	800e4c8 <xTaskIncrementTick+0xd8>
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c4:	4a22      	ldr	r2, [pc, #136]	; (800e550 <xTaskIncrementTick+0x160>)
 800e4c6:	6013      	str	r3, [r2, #0]
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4cc:	4613      	mov	r3, r2
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4413      	add	r3, r2
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4a1f      	ldr	r2, [pc, #124]	; (800e554 <xTaskIncrementTick+0x164>)
 800e4d6:	441a      	add	r2, r3
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	3304      	adds	r3, #4
 800e4dc:	4619      	mov	r1, r3
 800e4de:	4610      	mov	r0, r2
 800e4e0:	f7fe fdd7 	bl	800d092 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4e8:	4b1b      	ldr	r3, [pc, #108]	; (800e558 <xTaskIncrementTick+0x168>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d3b8      	bcc.n	800e464 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4f6:	e7b5      	b.n	800e464 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e4f8:	4b17      	ldr	r3, [pc, #92]	; (800e558 <xTaskIncrementTick+0x168>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4fe:	4915      	ldr	r1, [pc, #84]	; (800e554 <xTaskIncrementTick+0x164>)
 800e500:	4613      	mov	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	4413      	add	r3, r2
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	440b      	add	r3, r1
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d901      	bls.n	800e514 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e510:	2301      	movs	r3, #1
 800e512:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e514:	4b11      	ldr	r3, [pc, #68]	; (800e55c <xTaskIncrementTick+0x16c>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d007      	beq.n	800e52c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e51c:	2301      	movs	r3, #1
 800e51e:	617b      	str	r3, [r7, #20]
 800e520:	e004      	b.n	800e52c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e522:	4b0f      	ldr	r3, [pc, #60]	; (800e560 <xTaskIncrementTick+0x170>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3301      	adds	r3, #1
 800e528:	4a0d      	ldr	r2, [pc, #52]	; (800e560 <xTaskIncrementTick+0x170>)
 800e52a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e52c:	697b      	ldr	r3, [r7, #20]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3718      	adds	r7, #24
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	20000d4c 	.word	0x20000d4c
 800e53c:	20000d28 	.word	0x20000d28
 800e540:	20000cdc 	.word	0x20000cdc
 800e544:	20000ce0 	.word	0x20000ce0
 800e548:	20000d3c 	.word	0x20000d3c
 800e54c:	20000d44 	.word	0x20000d44
 800e550:	20000d2c 	.word	0x20000d2c
 800e554:	20000854 	.word	0x20000854
 800e558:	20000850 	.word	0x20000850
 800e55c:	20000d38 	.word	0x20000d38
 800e560:	20000d34 	.word	0x20000d34

0800e564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e56a:	4b2a      	ldr	r3, [pc, #168]	; (800e614 <vTaskSwitchContext+0xb0>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d003      	beq.n	800e57a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e572:	4b29      	ldr	r3, [pc, #164]	; (800e618 <vTaskSwitchContext+0xb4>)
 800e574:	2201      	movs	r2, #1
 800e576:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e578:	e046      	b.n	800e608 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e57a:	4b27      	ldr	r3, [pc, #156]	; (800e618 <vTaskSwitchContext+0xb4>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e580:	4b26      	ldr	r3, [pc, #152]	; (800e61c <vTaskSwitchContext+0xb8>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	60fb      	str	r3, [r7, #12]
 800e586:	e010      	b.n	800e5aa <vTaskSwitchContext+0x46>
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d10a      	bne.n	800e5a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800e58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e592:	f383 8811 	msr	BASEPRI, r3
 800e596:	f3bf 8f6f 	isb	sy
 800e59a:	f3bf 8f4f 	dsb	sy
 800e59e:	607b      	str	r3, [r7, #4]
}
 800e5a0:	bf00      	nop
 800e5a2:	e7fe      	b.n	800e5a2 <vTaskSwitchContext+0x3e>
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	60fb      	str	r3, [r7, #12]
 800e5aa:	491d      	ldr	r1, [pc, #116]	; (800e620 <vTaskSwitchContext+0xbc>)
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	440b      	add	r3, r1
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d0e4      	beq.n	800e588 <vTaskSwitchContext+0x24>
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	4613      	mov	r3, r2
 800e5c2:	009b      	lsls	r3, r3, #2
 800e5c4:	4413      	add	r3, r2
 800e5c6:	009b      	lsls	r3, r3, #2
 800e5c8:	4a15      	ldr	r2, [pc, #84]	; (800e620 <vTaskSwitchContext+0xbc>)
 800e5ca:	4413      	add	r3, r2
 800e5cc:	60bb      	str	r3, [r7, #8]
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	685a      	ldr	r2, [r3, #4]
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	605a      	str	r2, [r3, #4]
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	685a      	ldr	r2, [r3, #4]
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	3308      	adds	r3, #8
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d104      	bne.n	800e5ee <vTaskSwitchContext+0x8a>
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	685a      	ldr	r2, [r3, #4]
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	605a      	str	r2, [r3, #4]
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	4a0b      	ldr	r2, [pc, #44]	; (800e624 <vTaskSwitchContext+0xc0>)
 800e5f6:	6013      	str	r3, [r2, #0]
 800e5f8:	4a08      	ldr	r2, [pc, #32]	; (800e61c <vTaskSwitchContext+0xb8>)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e5fe:	4b09      	ldr	r3, [pc, #36]	; (800e624 <vTaskSwitchContext+0xc0>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	3354      	adds	r3, #84	; 0x54
 800e604:	4a08      	ldr	r2, [pc, #32]	; (800e628 <vTaskSwitchContext+0xc4>)
 800e606:	6013      	str	r3, [r2, #0]
}
 800e608:	bf00      	nop
 800e60a:	3714      	adds	r7, #20
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr
 800e614:	20000d4c 	.word	0x20000d4c
 800e618:	20000d38 	.word	0x20000d38
 800e61c:	20000d2c 	.word	0x20000d2c
 800e620:	20000854 	.word	0x20000854
 800e624:	20000850 	.word	0x20000850
 800e628:	20000030 	.word	0x20000030

0800e62c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10a      	bne.n	800e652 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e640:	f383 8811 	msr	BASEPRI, r3
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	60fb      	str	r3, [r7, #12]
}
 800e64e:	bf00      	nop
 800e650:	e7fe      	b.n	800e650 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e652:	4b07      	ldr	r3, [pc, #28]	; (800e670 <vTaskPlaceOnEventList+0x44>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	3318      	adds	r3, #24
 800e658:	4619      	mov	r1, r3
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f7fe fd3d 	bl	800d0da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e660:	2101      	movs	r1, #1
 800e662:	6838      	ldr	r0, [r7, #0]
 800e664:	f000 fbc4 	bl	800edf0 <prvAddCurrentTaskToDelayedList>
}
 800e668:	bf00      	nop
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	20000850 	.word	0x20000850

0800e674 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e674:	b580      	push	{r7, lr}
 800e676:	b086      	sub	sp, #24
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d10a      	bne.n	800e69c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68a:	f383 8811 	msr	BASEPRI, r3
 800e68e:	f3bf 8f6f 	isb	sy
 800e692:	f3bf 8f4f 	dsb	sy
 800e696:	617b      	str	r3, [r7, #20]
}
 800e698:	bf00      	nop
 800e69a:	e7fe      	b.n	800e69a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e69c:	4b0a      	ldr	r3, [pc, #40]	; (800e6c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	3318      	adds	r3, #24
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f7fe fcf4 	bl	800d092 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d002      	beq.n	800e6b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e6b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e6b6:	6879      	ldr	r1, [r7, #4]
 800e6b8:	68b8      	ldr	r0, [r7, #8]
 800e6ba:	f000 fb99 	bl	800edf0 <prvAddCurrentTaskToDelayedList>
	}
 800e6be:	bf00      	nop
 800e6c0:	3718      	adds	r7, #24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	20000850 	.word	0x20000850

0800e6cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b086      	sub	sp, #24
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d10a      	bne.n	800e6f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e6:	f383 8811 	msr	BASEPRI, r3
 800e6ea:	f3bf 8f6f 	isb	sy
 800e6ee:	f3bf 8f4f 	dsb	sy
 800e6f2:	60fb      	str	r3, [r7, #12]
}
 800e6f4:	bf00      	nop
 800e6f6:	e7fe      	b.n	800e6f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	3318      	adds	r3, #24
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fe fd25 	bl	800d14c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e702:	4b1e      	ldr	r3, [pc, #120]	; (800e77c <xTaskRemoveFromEventList+0xb0>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d11d      	bne.n	800e746 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	3304      	adds	r3, #4
 800e70e:	4618      	mov	r0, r3
 800e710:	f7fe fd1c 	bl	800d14c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e718:	4b19      	ldr	r3, [pc, #100]	; (800e780 <xTaskRemoveFromEventList+0xb4>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d903      	bls.n	800e728 <xTaskRemoveFromEventList+0x5c>
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e724:	4a16      	ldr	r2, [pc, #88]	; (800e780 <xTaskRemoveFromEventList+0xb4>)
 800e726:	6013      	str	r3, [r2, #0]
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e72c:	4613      	mov	r3, r2
 800e72e:	009b      	lsls	r3, r3, #2
 800e730:	4413      	add	r3, r2
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	4a13      	ldr	r2, [pc, #76]	; (800e784 <xTaskRemoveFromEventList+0xb8>)
 800e736:	441a      	add	r2, r3
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	3304      	adds	r3, #4
 800e73c:	4619      	mov	r1, r3
 800e73e:	4610      	mov	r0, r2
 800e740:	f7fe fca7 	bl	800d092 <vListInsertEnd>
 800e744:	e005      	b.n	800e752 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	3318      	adds	r3, #24
 800e74a:	4619      	mov	r1, r3
 800e74c:	480e      	ldr	r0, [pc, #56]	; (800e788 <xTaskRemoveFromEventList+0xbc>)
 800e74e:	f7fe fca0 	bl	800d092 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e756:	4b0d      	ldr	r3, [pc, #52]	; (800e78c <xTaskRemoveFromEventList+0xc0>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d905      	bls.n	800e76c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e760:	2301      	movs	r3, #1
 800e762:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e764:	4b0a      	ldr	r3, [pc, #40]	; (800e790 <xTaskRemoveFromEventList+0xc4>)
 800e766:	2201      	movs	r2, #1
 800e768:	601a      	str	r2, [r3, #0]
 800e76a:	e001      	b.n	800e770 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e76c:	2300      	movs	r3, #0
 800e76e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e770:	697b      	ldr	r3, [r7, #20]
}
 800e772:	4618      	mov	r0, r3
 800e774:	3718      	adds	r7, #24
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	20000d4c 	.word	0x20000d4c
 800e780:	20000d2c 	.word	0x20000d2c
 800e784:	20000854 	.word	0x20000854
 800e788:	20000ce4 	.word	0x20000ce4
 800e78c:	20000850 	.word	0x20000850
 800e790:	20000d38 	.word	0x20000d38

0800e794 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e79c:	4b06      	ldr	r3, [pc, #24]	; (800e7b8 <vTaskInternalSetTimeOutState+0x24>)
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e7a4:	4b05      	ldr	r3, [pc, #20]	; (800e7bc <vTaskInternalSetTimeOutState+0x28>)
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	605a      	str	r2, [r3, #4]
}
 800e7ac:	bf00      	nop
 800e7ae:	370c      	adds	r7, #12
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr
 800e7b8:	20000d3c 	.word	0x20000d3c
 800e7bc:	20000d28 	.word	0x20000d28

0800e7c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b088      	sub	sp, #32
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d10a      	bne.n	800e7e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	f3bf 8f4f 	dsb	sy
 800e7e0:	613b      	str	r3, [r7, #16]
}
 800e7e2:	bf00      	nop
 800e7e4:	e7fe      	b.n	800e7e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d10a      	bne.n	800e802 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f0:	f383 8811 	msr	BASEPRI, r3
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	60fb      	str	r3, [r7, #12]
}
 800e7fe:	bf00      	nop
 800e800:	e7fe      	b.n	800e800 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e802:	f000 ffc7 	bl	800f794 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e806:	4b1d      	ldr	r3, [pc, #116]	; (800e87c <xTaskCheckForTimeOut+0xbc>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	69ba      	ldr	r2, [r7, #24]
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e81e:	d102      	bne.n	800e826 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e820:	2300      	movs	r3, #0
 800e822:	61fb      	str	r3, [r7, #28]
 800e824:	e023      	b.n	800e86e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	4b15      	ldr	r3, [pc, #84]	; (800e880 <xTaskCheckForTimeOut+0xc0>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d007      	beq.n	800e842 <xTaskCheckForTimeOut+0x82>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	69ba      	ldr	r2, [r7, #24]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d302      	bcc.n	800e842 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e83c:	2301      	movs	r3, #1
 800e83e:	61fb      	str	r3, [r7, #28]
 800e840:	e015      	b.n	800e86e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	697a      	ldr	r2, [r7, #20]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d20b      	bcs.n	800e864 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	1ad2      	subs	r2, r2, r3
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f7ff ff9b 	bl	800e794 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e85e:	2300      	movs	r3, #0
 800e860:	61fb      	str	r3, [r7, #28]
 800e862:	e004      	b.n	800e86e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	2200      	movs	r2, #0
 800e868:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e86a:	2301      	movs	r3, #1
 800e86c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e86e:	f000 ffc1 	bl	800f7f4 <vPortExitCritical>

	return xReturn;
 800e872:	69fb      	ldr	r3, [r7, #28]
}
 800e874:	4618      	mov	r0, r3
 800e876:	3720      	adds	r7, #32
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	20000d28 	.word	0x20000d28
 800e880:	20000d3c 	.word	0x20000d3c

0800e884 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e884:	b480      	push	{r7}
 800e886:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e888:	4b03      	ldr	r3, [pc, #12]	; (800e898 <vTaskMissedYield+0x14>)
 800e88a:	2201      	movs	r2, #1
 800e88c:	601a      	str	r2, [r3, #0]
}
 800e88e:	bf00      	nop
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr
 800e898:	20000d38 	.word	0x20000d38

0800e89c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e8a4:	f000 f852 	bl	800e94c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e8a8:	4b06      	ldr	r3, [pc, #24]	; (800e8c4 <prvIdleTask+0x28>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d9f9      	bls.n	800e8a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e8b0:	4b05      	ldr	r3, [pc, #20]	; (800e8c8 <prvIdleTask+0x2c>)
 800e8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8b6:	601a      	str	r2, [r3, #0]
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e8c0:	e7f0      	b.n	800e8a4 <prvIdleTask+0x8>
 800e8c2:	bf00      	nop
 800e8c4:	20000854 	.word	0x20000854
 800e8c8:	e000ed04 	.word	0xe000ed04

0800e8cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	607b      	str	r3, [r7, #4]
 800e8d6:	e00c      	b.n	800e8f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	4613      	mov	r3, r2
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	4413      	add	r3, r2
 800e8e0:	009b      	lsls	r3, r3, #2
 800e8e2:	4a12      	ldr	r2, [pc, #72]	; (800e92c <prvInitialiseTaskLists+0x60>)
 800e8e4:	4413      	add	r3, r2
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fe fba6 	bl	800d038 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	607b      	str	r3, [r7, #4]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2b37      	cmp	r3, #55	; 0x37
 800e8f6:	d9ef      	bls.n	800e8d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e8f8:	480d      	ldr	r0, [pc, #52]	; (800e930 <prvInitialiseTaskLists+0x64>)
 800e8fa:	f7fe fb9d 	bl	800d038 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e8fe:	480d      	ldr	r0, [pc, #52]	; (800e934 <prvInitialiseTaskLists+0x68>)
 800e900:	f7fe fb9a 	bl	800d038 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e904:	480c      	ldr	r0, [pc, #48]	; (800e938 <prvInitialiseTaskLists+0x6c>)
 800e906:	f7fe fb97 	bl	800d038 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e90a:	480c      	ldr	r0, [pc, #48]	; (800e93c <prvInitialiseTaskLists+0x70>)
 800e90c:	f7fe fb94 	bl	800d038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e910:	480b      	ldr	r0, [pc, #44]	; (800e940 <prvInitialiseTaskLists+0x74>)
 800e912:	f7fe fb91 	bl	800d038 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e916:	4b0b      	ldr	r3, [pc, #44]	; (800e944 <prvInitialiseTaskLists+0x78>)
 800e918:	4a05      	ldr	r2, [pc, #20]	; (800e930 <prvInitialiseTaskLists+0x64>)
 800e91a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e91c:	4b0a      	ldr	r3, [pc, #40]	; (800e948 <prvInitialiseTaskLists+0x7c>)
 800e91e:	4a05      	ldr	r2, [pc, #20]	; (800e934 <prvInitialiseTaskLists+0x68>)
 800e920:	601a      	str	r2, [r3, #0]
}
 800e922:	bf00      	nop
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	20000854 	.word	0x20000854
 800e930:	20000cb4 	.word	0x20000cb4
 800e934:	20000cc8 	.word	0x20000cc8
 800e938:	20000ce4 	.word	0x20000ce4
 800e93c:	20000cf8 	.word	0x20000cf8
 800e940:	20000d10 	.word	0x20000d10
 800e944:	20000cdc 	.word	0x20000cdc
 800e948:	20000ce0 	.word	0x20000ce0

0800e94c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e952:	e019      	b.n	800e988 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e954:	f000 ff1e 	bl	800f794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e958:	4b10      	ldr	r3, [pc, #64]	; (800e99c <prvCheckTasksWaitingTermination+0x50>)
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	3304      	adds	r3, #4
 800e964:	4618      	mov	r0, r3
 800e966:	f7fe fbf1 	bl	800d14c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e96a:	4b0d      	ldr	r3, [pc, #52]	; (800e9a0 <prvCheckTasksWaitingTermination+0x54>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	3b01      	subs	r3, #1
 800e970:	4a0b      	ldr	r2, [pc, #44]	; (800e9a0 <prvCheckTasksWaitingTermination+0x54>)
 800e972:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e974:	4b0b      	ldr	r3, [pc, #44]	; (800e9a4 <prvCheckTasksWaitingTermination+0x58>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	3b01      	subs	r3, #1
 800e97a:	4a0a      	ldr	r2, [pc, #40]	; (800e9a4 <prvCheckTasksWaitingTermination+0x58>)
 800e97c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e97e:	f000 ff39 	bl	800f7f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 f810 	bl	800e9a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e988:	4b06      	ldr	r3, [pc, #24]	; (800e9a4 <prvCheckTasksWaitingTermination+0x58>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d1e1      	bne.n	800e954 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e990:	bf00      	nop
 800e992:	bf00      	nop
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	20000cf8 	.word	0x20000cf8
 800e9a0:	20000d24 	.word	0x20000d24
 800e9a4:	20000d0c 	.word	0x20000d0c

0800e9a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	3354      	adds	r3, #84	; 0x54
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f001 fe05 	bl	80105c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d108      	bne.n	800e9d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f001 f8d1 	bl	800fb70 <vPortFree>
				vPortFree( pxTCB );
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f001 f8ce 	bl	800fb70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e9d4:	e018      	b.n	800ea08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d103      	bne.n	800e9e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f001 f8c5 	bl	800fb70 <vPortFree>
	}
 800e9e6:	e00f      	b.n	800ea08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e9ee:	2b02      	cmp	r3, #2
 800e9f0:	d00a      	beq.n	800ea08 <prvDeleteTCB+0x60>
	__asm volatile
 800e9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f6:	f383 8811 	msr	BASEPRI, r3
 800e9fa:	f3bf 8f6f 	isb	sy
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	60fb      	str	r3, [r7, #12]
}
 800ea04:	bf00      	nop
 800ea06:	e7fe      	b.n	800ea06 <prvDeleteTCB+0x5e>
	}
 800ea08:	bf00      	nop
 800ea0a:	3710      	adds	r7, #16
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea16:	4b0c      	ldr	r3, [pc, #48]	; (800ea48 <prvResetNextTaskUnblockTime+0x38>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d104      	bne.n	800ea2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea20:	4b0a      	ldr	r3, [pc, #40]	; (800ea4c <prvResetNextTaskUnblockTime+0x3c>)
 800ea22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea28:	e008      	b.n	800ea3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea2a:	4b07      	ldr	r3, [pc, #28]	; (800ea48 <prvResetNextTaskUnblockTime+0x38>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	68db      	ldr	r3, [r3, #12]
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	4a04      	ldr	r2, [pc, #16]	; (800ea4c <prvResetNextTaskUnblockTime+0x3c>)
 800ea3a:	6013      	str	r3, [r2, #0]
}
 800ea3c:	bf00      	nop
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr
 800ea48:	20000cdc 	.word	0x20000cdc
 800ea4c:	20000d44 	.word	0x20000d44

0800ea50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea56:	4b0b      	ldr	r3, [pc, #44]	; (800ea84 <xTaskGetSchedulerState+0x34>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d102      	bne.n	800ea64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	607b      	str	r3, [r7, #4]
 800ea62:	e008      	b.n	800ea76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea64:	4b08      	ldr	r3, [pc, #32]	; (800ea88 <xTaskGetSchedulerState+0x38>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d102      	bne.n	800ea72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea6c:	2302      	movs	r3, #2
 800ea6e:	607b      	str	r3, [r7, #4]
 800ea70:	e001      	b.n	800ea76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea72:	2300      	movs	r3, #0
 800ea74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea76:	687b      	ldr	r3, [r7, #4]
	}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	370c      	adds	r7, #12
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr
 800ea84:	20000d30 	.word	0x20000d30
 800ea88:	20000d4c 	.word	0x20000d4c

0800ea8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b086      	sub	sp, #24
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d056      	beq.n	800eb50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eaa2:	4b2e      	ldr	r3, [pc, #184]	; (800eb5c <xTaskPriorityDisinherit+0xd0>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	693a      	ldr	r2, [r7, #16]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d00a      	beq.n	800eac2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	60fb      	str	r3, [r7, #12]
}
 800eabe:	bf00      	nop
 800eac0:	e7fe      	b.n	800eac0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d10a      	bne.n	800eae0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800eaca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eace:	f383 8811 	msr	BASEPRI, r3
 800ead2:	f3bf 8f6f 	isb	sy
 800ead6:	f3bf 8f4f 	dsb	sy
 800eada:	60bb      	str	r3, [r7, #8]
}
 800eadc:	bf00      	nop
 800eade:	e7fe      	b.n	800eade <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eae4:	1e5a      	subs	r2, r3, #1
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d02c      	beq.n	800eb50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d128      	bne.n	800eb50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	3304      	adds	r3, #4
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7fe fb22 	bl	800d14c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb20:	4b0f      	ldr	r3, [pc, #60]	; (800eb60 <xTaskPriorityDisinherit+0xd4>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d903      	bls.n	800eb30 <xTaskPriorityDisinherit+0xa4>
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb2c:	4a0c      	ldr	r2, [pc, #48]	; (800eb60 <xTaskPriorityDisinherit+0xd4>)
 800eb2e:	6013      	str	r3, [r2, #0]
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb34:	4613      	mov	r3, r2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	4413      	add	r3, r2
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	4a09      	ldr	r2, [pc, #36]	; (800eb64 <xTaskPriorityDisinherit+0xd8>)
 800eb3e:	441a      	add	r2, r3
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	3304      	adds	r3, #4
 800eb44:	4619      	mov	r1, r3
 800eb46:	4610      	mov	r0, r2
 800eb48:	f7fe faa3 	bl	800d092 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb50:	697b      	ldr	r3, [r7, #20]
	}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3718      	adds	r7, #24
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	20000850 	.word	0x20000850
 800eb60:	20000d2c 	.word	0x20000d2c
 800eb64:	20000854 	.word	0x20000854

0800eb68 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	607a      	str	r2, [r7, #4]
 800eb74:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800eb76:	f000 fe0d 	bl	800f794 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800eb7a:	4b29      	ldr	r3, [pc, #164]	; (800ec20 <xTaskNotifyWait+0xb8>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	d01c      	beq.n	800ebc2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800eb88:	4b25      	ldr	r3, [pc, #148]	; (800ec20 <xTaskNotifyWait+0xb8>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800eb90:	68fa      	ldr	r2, [r7, #12]
 800eb92:	43d2      	mvns	r2, r2
 800eb94:	400a      	ands	r2, r1
 800eb96:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800eb9a:	4b21      	ldr	r3, [pc, #132]	; (800ec20 <xTaskNotifyWait+0xb8>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00b      	beq.n	800ebc2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ebaa:	2101      	movs	r1, #1
 800ebac:	6838      	ldr	r0, [r7, #0]
 800ebae:	f000 f91f 	bl	800edf0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ebb2:	4b1c      	ldr	r3, [pc, #112]	; (800ec24 <xTaskNotifyWait+0xbc>)
 800ebb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebb8:	601a      	str	r2, [r3, #0]
 800ebba:	f3bf 8f4f 	dsb	sy
 800ebbe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ebc2:	f000 fe17 	bl	800f7f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ebc6:	f000 fde5 	bl	800f794 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d005      	beq.n	800ebdc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ebd0:	4b13      	ldr	r3, [pc, #76]	; (800ec20 <xTaskNotifyWait+0xb8>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ebdc:	4b10      	ldr	r3, [pc, #64]	; (800ec20 <xTaskNotifyWait+0xb8>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	2b02      	cmp	r3, #2
 800ebe8:	d002      	beq.n	800ebf0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ebea:	2300      	movs	r3, #0
 800ebec:	617b      	str	r3, [r7, #20]
 800ebee:	e00a      	b.n	800ec06 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ebf0:	4b0b      	ldr	r3, [pc, #44]	; (800ec20 <xTaskNotifyWait+0xb8>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ebf8:	68ba      	ldr	r2, [r7, #8]
 800ebfa:	43d2      	mvns	r2, r2
 800ebfc:	400a      	ands	r2, r1
 800ebfe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800ec02:	2301      	movs	r3, #1
 800ec04:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec06:	4b06      	ldr	r3, [pc, #24]	; (800ec20 <xTaskNotifyWait+0xb8>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800ec10:	f000 fdf0 	bl	800f7f4 <vPortExitCritical>

		return xReturn;
 800ec14:	697b      	ldr	r3, [r7, #20]
	}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3718      	adds	r7, #24
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	20000850 	.word	0x20000850
 800ec24:	e000ed04 	.word	0xe000ed04

0800ec28 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b08e      	sub	sp, #56	; 0x38
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	603b      	str	r3, [r7, #0]
 800ec34:	4613      	mov	r3, r2
 800ec36:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10a      	bne.n	800ec58 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800ec42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec46:	f383 8811 	msr	BASEPRI, r3
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ec54:	bf00      	nop
 800ec56:	e7fe      	b.n	800ec56 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec58:	f000 fe7e 	bl	800f958 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ec60:	f3ef 8211 	mrs	r2, BASEPRI
 800ec64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec68:	f383 8811 	msr	BASEPRI, r3
 800ec6c:	f3bf 8f6f 	isb	sy
 800ec70:	f3bf 8f4f 	dsb	sy
 800ec74:	623a      	str	r2, [r7, #32]
 800ec76:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ec78:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec7a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d004      	beq.n	800ec8c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ec82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec84:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ec8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ec92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ec96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec98:	2202      	movs	r2, #2
 800ec9a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800ec9e:	79fb      	ldrb	r3, [r7, #7]
 800eca0:	2b04      	cmp	r3, #4
 800eca2:	d82f      	bhi.n	800ed04 <xTaskGenericNotifyFromISR+0xdc>
 800eca4:	a201      	add	r2, pc, #4	; (adr r2, 800ecac <xTaskGenericNotifyFromISR+0x84>)
 800eca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecaa:	bf00      	nop
 800ecac:	0800ed27 	.word	0x0800ed27
 800ecb0:	0800ecc1 	.word	0x0800ecc1
 800ecb4:	0800ecd3 	.word	0x0800ecd3
 800ecb8:	0800ece3 	.word	0x0800ece3
 800ecbc:	0800eced 	.word	0x0800eced
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	431a      	orrs	r2, r3
 800ecca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eccc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ecd0:	e02c      	b.n	800ed2c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ecd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ecd8:	1c5a      	adds	r2, r3, #1
 800ecda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecdc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ece0:	e024      	b.n	800ed2c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ece2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece4:	68ba      	ldr	r2, [r7, #8]
 800ece6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ecea:	e01f      	b.n	800ed2c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ecec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ecf0:	2b02      	cmp	r3, #2
 800ecf2:	d004      	beq.n	800ecfe <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ecf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf6:	68ba      	ldr	r2, [r7, #8]
 800ecf8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ecfc:	e016      	b.n	800ed2c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ed02:	e013      	b.n	800ed2c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ed04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ed0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed0e:	d00c      	beq.n	800ed2a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800ed10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	61bb      	str	r3, [r7, #24]
}
 800ed22:	bf00      	nop
 800ed24:	e7fe      	b.n	800ed24 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800ed26:	bf00      	nop
 800ed28:	e000      	b.n	800ed2c <xTaskGenericNotifyFromISR+0x104>
					break;
 800ed2a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ed2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d146      	bne.n	800edc2 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ed34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00a      	beq.n	800ed52 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800ed3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed40:	f383 8811 	msr	BASEPRI, r3
 800ed44:	f3bf 8f6f 	isb	sy
 800ed48:	f3bf 8f4f 	dsb	sy
 800ed4c:	617b      	str	r3, [r7, #20]
}
 800ed4e:	bf00      	nop
 800ed50:	e7fe      	b.n	800ed50 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed52:	4b21      	ldr	r3, [pc, #132]	; (800edd8 <xTaskGenericNotifyFromISR+0x1b0>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d11d      	bne.n	800ed96 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5c:	3304      	adds	r3, #4
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fe f9f4 	bl	800d14c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ed64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed68:	4b1c      	ldr	r3, [pc, #112]	; (800eddc <xTaskGenericNotifyFromISR+0x1b4>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d903      	bls.n	800ed78 <xTaskGenericNotifyFromISR+0x150>
 800ed70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed74:	4a19      	ldr	r2, [pc, #100]	; (800eddc <xTaskGenericNotifyFromISR+0x1b4>)
 800ed76:	6013      	str	r3, [r2, #0]
 800ed78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	4413      	add	r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	4a16      	ldr	r2, [pc, #88]	; (800ede0 <xTaskGenericNotifyFromISR+0x1b8>)
 800ed86:	441a      	add	r2, r3
 800ed88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8a:	3304      	adds	r3, #4
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	4610      	mov	r0, r2
 800ed90:	f7fe f97f 	bl	800d092 <vListInsertEnd>
 800ed94:	e005      	b.n	800eda2 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ed96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed98:	3318      	adds	r3, #24
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	4811      	ldr	r0, [pc, #68]	; (800ede4 <xTaskGenericNotifyFromISR+0x1bc>)
 800ed9e:	f7fe f978 	bl	800d092 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eda6:	4b10      	ldr	r3, [pc, #64]	; (800ede8 <xTaskGenericNotifyFromISR+0x1c0>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edac:	429a      	cmp	r2, r3
 800edae:	d908      	bls.n	800edc2 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800edb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d002      	beq.n	800edbc <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800edb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edb8:	2201      	movs	r2, #1
 800edba:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800edbc:	4b0b      	ldr	r3, [pc, #44]	; (800edec <xTaskGenericNotifyFromISR+0x1c4>)
 800edbe:	2201      	movs	r2, #1
 800edc0:	601a      	str	r2, [r3, #0]
 800edc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	f383 8811 	msr	BASEPRI, r3
}
 800edcc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800edce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3738      	adds	r7, #56	; 0x38
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	20000d4c 	.word	0x20000d4c
 800eddc:	20000d2c 	.word	0x20000d2c
 800ede0:	20000854 	.word	0x20000854
 800ede4:	20000ce4 	.word	0x20000ce4
 800ede8:	20000850 	.word	0x20000850
 800edec:	20000d38 	.word	0x20000d38

0800edf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800edfa:	4b21      	ldr	r3, [pc, #132]	; (800ee80 <prvAddCurrentTaskToDelayedList+0x90>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee00:	4b20      	ldr	r3, [pc, #128]	; (800ee84 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	3304      	adds	r3, #4
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fe f9a0 	bl	800d14c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee12:	d10a      	bne.n	800ee2a <prvAddCurrentTaskToDelayedList+0x3a>
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d007      	beq.n	800ee2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee1a:	4b1a      	ldr	r3, [pc, #104]	; (800ee84 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	3304      	adds	r3, #4
 800ee20:	4619      	mov	r1, r3
 800ee22:	4819      	ldr	r0, [pc, #100]	; (800ee88 <prvAddCurrentTaskToDelayedList+0x98>)
 800ee24:	f7fe f935 	bl	800d092 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee28:	e026      	b.n	800ee78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee2a:	68fa      	ldr	r2, [r7, #12]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	4413      	add	r3, r2
 800ee30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee32:	4b14      	ldr	r3, [pc, #80]	; (800ee84 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	68ba      	ldr	r2, [r7, #8]
 800ee38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee3a:	68ba      	ldr	r2, [r7, #8]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d209      	bcs.n	800ee56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee42:	4b12      	ldr	r3, [pc, #72]	; (800ee8c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	4b0f      	ldr	r3, [pc, #60]	; (800ee84 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	3304      	adds	r3, #4
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	4610      	mov	r0, r2
 800ee50:	f7fe f943 	bl	800d0da <vListInsert>
}
 800ee54:	e010      	b.n	800ee78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee56:	4b0e      	ldr	r3, [pc, #56]	; (800ee90 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	4b0a      	ldr	r3, [pc, #40]	; (800ee84 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	3304      	adds	r3, #4
 800ee60:	4619      	mov	r1, r3
 800ee62:	4610      	mov	r0, r2
 800ee64:	f7fe f939 	bl	800d0da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee68:	4b0a      	ldr	r3, [pc, #40]	; (800ee94 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	68ba      	ldr	r2, [r7, #8]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d202      	bcs.n	800ee78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ee72:	4a08      	ldr	r2, [pc, #32]	; (800ee94 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	6013      	str	r3, [r2, #0]
}
 800ee78:	bf00      	nop
 800ee7a:	3710      	adds	r7, #16
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	20000d28 	.word	0x20000d28
 800ee84:	20000850 	.word	0x20000850
 800ee88:	20000d10 	.word	0x20000d10
 800ee8c:	20000ce0 	.word	0x20000ce0
 800ee90:	20000cdc 	.word	0x20000cdc
 800ee94:	20000d44 	.word	0x20000d44

0800ee98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b08a      	sub	sp, #40	; 0x28
 800ee9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eea2:	f000 fb07 	bl	800f4b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eea6:	4b1c      	ldr	r3, [pc, #112]	; (800ef18 <xTimerCreateTimerTask+0x80>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d021      	beq.n	800eef2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eeb6:	1d3a      	adds	r2, r7, #4
 800eeb8:	f107 0108 	add.w	r1, r7, #8
 800eebc:	f107 030c 	add.w	r3, r7, #12
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fe f89f 	bl	800d004 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eec6:	6879      	ldr	r1, [r7, #4]
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	9202      	str	r2, [sp, #8]
 800eece:	9301      	str	r3, [sp, #4]
 800eed0:	2302      	movs	r3, #2
 800eed2:	9300      	str	r3, [sp, #0]
 800eed4:	2300      	movs	r3, #0
 800eed6:	460a      	mov	r2, r1
 800eed8:	4910      	ldr	r1, [pc, #64]	; (800ef1c <xTimerCreateTimerTask+0x84>)
 800eeda:	4811      	ldr	r0, [pc, #68]	; (800ef20 <xTimerCreateTimerTask+0x88>)
 800eedc:	f7fe ff70 	bl	800ddc0 <xTaskCreateStatic>
 800eee0:	4603      	mov	r3, r0
 800eee2:	4a10      	ldr	r2, [pc, #64]	; (800ef24 <xTimerCreateTimerTask+0x8c>)
 800eee4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eee6:	4b0f      	ldr	r3, [pc, #60]	; (800ef24 <xTimerCreateTimerTask+0x8c>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eeee:	2301      	movs	r3, #1
 800eef0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d10a      	bne.n	800ef0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800eef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefc:	f383 8811 	msr	BASEPRI, r3
 800ef00:	f3bf 8f6f 	isb	sy
 800ef04:	f3bf 8f4f 	dsb	sy
 800ef08:	613b      	str	r3, [r7, #16]
}
 800ef0a:	bf00      	nop
 800ef0c:	e7fe      	b.n	800ef0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ef0e:	697b      	ldr	r3, [r7, #20]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3718      	adds	r7, #24
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	20000d80 	.word	0x20000d80
 800ef1c:	08010f1c 	.word	0x08010f1c
 800ef20:	0800f05d 	.word	0x0800f05d
 800ef24:	20000d84 	.word	0x20000d84

0800ef28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b08a      	sub	sp, #40	; 0x28
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
 800ef34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef36:	2300      	movs	r3, #0
 800ef38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d10a      	bne.n	800ef56 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ef40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef44:	f383 8811 	msr	BASEPRI, r3
 800ef48:	f3bf 8f6f 	isb	sy
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	623b      	str	r3, [r7, #32]
}
 800ef52:	bf00      	nop
 800ef54:	e7fe      	b.n	800ef54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ef56:	4b1a      	ldr	r3, [pc, #104]	; (800efc0 <xTimerGenericCommand+0x98>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d02a      	beq.n	800efb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	2b05      	cmp	r3, #5
 800ef6e:	dc18      	bgt.n	800efa2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef70:	f7ff fd6e 	bl	800ea50 <xTaskGetSchedulerState>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b02      	cmp	r3, #2
 800ef78:	d109      	bne.n	800ef8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ef7a:	4b11      	ldr	r3, [pc, #68]	; (800efc0 <xTimerGenericCommand+0x98>)
 800ef7c:	6818      	ldr	r0, [r3, #0]
 800ef7e:	f107 0110 	add.w	r1, r7, #16
 800ef82:	2300      	movs	r3, #0
 800ef84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef86:	f7fe fa49 	bl	800d41c <xQueueGenericSend>
 800ef8a:	6278      	str	r0, [r7, #36]	; 0x24
 800ef8c:	e012      	b.n	800efb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ef8e:	4b0c      	ldr	r3, [pc, #48]	; (800efc0 <xTimerGenericCommand+0x98>)
 800ef90:	6818      	ldr	r0, [r3, #0]
 800ef92:	f107 0110 	add.w	r1, r7, #16
 800ef96:	2300      	movs	r3, #0
 800ef98:	2200      	movs	r2, #0
 800ef9a:	f7fe fa3f 	bl	800d41c <xQueueGenericSend>
 800ef9e:	6278      	str	r0, [r7, #36]	; 0x24
 800efa0:	e008      	b.n	800efb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800efa2:	4b07      	ldr	r3, [pc, #28]	; (800efc0 <xTimerGenericCommand+0x98>)
 800efa4:	6818      	ldr	r0, [r3, #0]
 800efa6:	f107 0110 	add.w	r1, r7, #16
 800efaa:	2300      	movs	r3, #0
 800efac:	683a      	ldr	r2, [r7, #0]
 800efae:	f7fe fb33 	bl	800d618 <xQueueGenericSendFromISR>
 800efb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800efb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3728      	adds	r7, #40	; 0x28
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	20000d80 	.word	0x20000d80

0800efc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b088      	sub	sp, #32
 800efc8:	af02      	add	r7, sp, #8
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efce:	4b22      	ldr	r3, [pc, #136]	; (800f058 <prvProcessExpiredTimer+0x94>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	68db      	ldr	r3, [r3, #12]
 800efd4:	68db      	ldr	r3, [r3, #12]
 800efd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	3304      	adds	r3, #4
 800efdc:	4618      	mov	r0, r3
 800efde:	f7fe f8b5 	bl	800d14c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efe8:	f003 0304 	and.w	r3, r3, #4
 800efec:	2b00      	cmp	r3, #0
 800efee:	d022      	beq.n	800f036 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	699a      	ldr	r2, [r3, #24]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	18d1      	adds	r1, r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	683a      	ldr	r2, [r7, #0]
 800effc:	6978      	ldr	r0, [r7, #20]
 800effe:	f000 f8d1 	bl	800f1a4 <prvInsertTimerInActiveList>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d01f      	beq.n	800f048 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f008:	2300      	movs	r3, #0
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	2300      	movs	r3, #0
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	2100      	movs	r1, #0
 800f012:	6978      	ldr	r0, [r7, #20]
 800f014:	f7ff ff88 	bl	800ef28 <xTimerGenericCommand>
 800f018:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d113      	bne.n	800f048 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f024:	f383 8811 	msr	BASEPRI, r3
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	f3bf 8f4f 	dsb	sy
 800f030:	60fb      	str	r3, [r7, #12]
}
 800f032:	bf00      	nop
 800f034:	e7fe      	b.n	800f034 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f03c:	f023 0301 	bic.w	r3, r3, #1
 800f040:	b2da      	uxtb	r2, r3
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	6a1b      	ldr	r3, [r3, #32]
 800f04c:	6978      	ldr	r0, [r7, #20]
 800f04e:	4798      	blx	r3
}
 800f050:	bf00      	nop
 800f052:	3718      	adds	r7, #24
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}
 800f058:	20000d78 	.word	0x20000d78

0800f05c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b084      	sub	sp, #16
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f064:	f107 0308 	add.w	r3, r7, #8
 800f068:	4618      	mov	r0, r3
 800f06a:	f000 f857 	bl	800f11c <prvGetNextExpireTime>
 800f06e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	4619      	mov	r1, r3
 800f074:	68f8      	ldr	r0, [r7, #12]
 800f076:	f000 f803 	bl	800f080 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f07a:	f000 f8d5 	bl	800f228 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f07e:	e7f1      	b.n	800f064 <prvTimerTask+0x8>

0800f080 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b084      	sub	sp, #16
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f08a:	f7ff f8f5 	bl	800e278 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f08e:	f107 0308 	add.w	r3, r7, #8
 800f092:	4618      	mov	r0, r3
 800f094:	f000 f866 	bl	800f164 <prvSampleTimeNow>
 800f098:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d130      	bne.n	800f102 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d10a      	bne.n	800f0bc <prvProcessTimerOrBlockTask+0x3c>
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d806      	bhi.n	800f0bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f0ae:	f7ff f8f1 	bl	800e294 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f0b2:	68f9      	ldr	r1, [r7, #12]
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f7ff ff85 	bl	800efc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f0ba:	e024      	b.n	800f106 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d008      	beq.n	800f0d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f0c2:	4b13      	ldr	r3, [pc, #76]	; (800f110 <prvProcessTimerOrBlockTask+0x90>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d101      	bne.n	800f0d0 <prvProcessTimerOrBlockTask+0x50>
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	e000      	b.n	800f0d2 <prvProcessTimerOrBlockTask+0x52>
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f0d4:	4b0f      	ldr	r3, [pc, #60]	; (800f114 <prvProcessTimerOrBlockTask+0x94>)
 800f0d6:	6818      	ldr	r0, [r3, #0]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	1ad3      	subs	r3, r2, r3
 800f0de:	683a      	ldr	r2, [r7, #0]
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	f7fe fe39 	bl	800dd58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f0e6:	f7ff f8d5 	bl	800e294 <xTaskResumeAll>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d10a      	bne.n	800f106 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f0f0:	4b09      	ldr	r3, [pc, #36]	; (800f118 <prvProcessTimerOrBlockTask+0x98>)
 800f0f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0f6:	601a      	str	r2, [r3, #0]
 800f0f8:	f3bf 8f4f 	dsb	sy
 800f0fc:	f3bf 8f6f 	isb	sy
}
 800f100:	e001      	b.n	800f106 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f102:	f7ff f8c7 	bl	800e294 <xTaskResumeAll>
}
 800f106:	bf00      	nop
 800f108:	3710      	adds	r7, #16
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	20000d7c 	.word	0x20000d7c
 800f114:	20000d80 	.word	0x20000d80
 800f118:	e000ed04 	.word	0xe000ed04

0800f11c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f11c:	b480      	push	{r7}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f124:	4b0e      	ldr	r3, [pc, #56]	; (800f160 <prvGetNextExpireTime+0x44>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d101      	bne.n	800f132 <prvGetNextExpireTime+0x16>
 800f12e:	2201      	movs	r2, #1
 800f130:	e000      	b.n	800f134 <prvGetNextExpireTime+0x18>
 800f132:	2200      	movs	r2, #0
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d105      	bne.n	800f14c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f140:	4b07      	ldr	r3, [pc, #28]	; (800f160 <prvGetNextExpireTime+0x44>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	60fb      	str	r3, [r7, #12]
 800f14a:	e001      	b.n	800f150 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f14c:	2300      	movs	r3, #0
 800f14e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f150:	68fb      	ldr	r3, [r7, #12]
}
 800f152:	4618      	mov	r0, r3
 800f154:	3714      	adds	r7, #20
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr
 800f15e:	bf00      	nop
 800f160:	20000d78 	.word	0x20000d78

0800f164 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f16c:	f7ff f930 	bl	800e3d0 <xTaskGetTickCount>
 800f170:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f172:	4b0b      	ldr	r3, [pc, #44]	; (800f1a0 <prvSampleTimeNow+0x3c>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d205      	bcs.n	800f188 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f17c:	f000 f936 	bl	800f3ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	601a      	str	r2, [r3, #0]
 800f186:	e002      	b.n	800f18e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2200      	movs	r2, #0
 800f18c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f18e:	4a04      	ldr	r2, [pc, #16]	; (800f1a0 <prvSampleTimeNow+0x3c>)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f194:	68fb      	ldr	r3, [r7, #12]
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	20000d88 	.word	0x20000d88

0800f1a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b086      	sub	sp, #24
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
 800f1b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	68ba      	ldr	r2, [r7, #8]
 800f1ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	68fa      	ldr	r2, [r7, #12]
 800f1c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f1c2:	68ba      	ldr	r2, [r7, #8]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d812      	bhi.n	800f1f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1ca:	687a      	ldr	r2, [r7, #4]
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	1ad2      	subs	r2, r2, r3
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	699b      	ldr	r3, [r3, #24]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d302      	bcc.n	800f1de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	617b      	str	r3, [r7, #20]
 800f1dc:	e01b      	b.n	800f216 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f1de:	4b10      	ldr	r3, [pc, #64]	; (800f220 <prvInsertTimerInActiveList+0x7c>)
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	3304      	adds	r3, #4
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	4610      	mov	r0, r2
 800f1ea:	f7fd ff76 	bl	800d0da <vListInsert>
 800f1ee:	e012      	b.n	800f216 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d206      	bcs.n	800f206 <prvInsertTimerInActiveList+0x62>
 800f1f8:	68ba      	ldr	r2, [r7, #8]
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d302      	bcc.n	800f206 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f200:	2301      	movs	r3, #1
 800f202:	617b      	str	r3, [r7, #20]
 800f204:	e007      	b.n	800f216 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f206:	4b07      	ldr	r3, [pc, #28]	; (800f224 <prvInsertTimerInActiveList+0x80>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	3304      	adds	r3, #4
 800f20e:	4619      	mov	r1, r3
 800f210:	4610      	mov	r0, r2
 800f212:	f7fd ff62 	bl	800d0da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f216:	697b      	ldr	r3, [r7, #20]
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3718      	adds	r7, #24
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	20000d7c 	.word	0x20000d7c
 800f224:	20000d78 	.word	0x20000d78

0800f228 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b08e      	sub	sp, #56	; 0x38
 800f22c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f22e:	e0ca      	b.n	800f3c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	da18      	bge.n	800f268 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f236:	1d3b      	adds	r3, r7, #4
 800f238:	3304      	adds	r3, #4
 800f23a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d10a      	bne.n	800f258 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f246:	f383 8811 	msr	BASEPRI, r3
 800f24a:	f3bf 8f6f 	isb	sy
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	61fb      	str	r3, [r7, #28]
}
 800f254:	bf00      	nop
 800f256:	e7fe      	b.n	800f256 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f25e:	6850      	ldr	r0, [r2, #4]
 800f260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f262:	6892      	ldr	r2, [r2, #8]
 800f264:	4611      	mov	r1, r2
 800f266:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	f2c0 80aa 	blt.w	800f3c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f276:	695b      	ldr	r3, [r3, #20]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d004      	beq.n	800f286 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	3304      	adds	r3, #4
 800f280:	4618      	mov	r0, r3
 800f282:	f7fd ff63 	bl	800d14c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f286:	463b      	mov	r3, r7
 800f288:	4618      	mov	r0, r3
 800f28a:	f7ff ff6b 	bl	800f164 <prvSampleTimeNow>
 800f28e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2b09      	cmp	r3, #9
 800f294:	f200 8097 	bhi.w	800f3c6 <prvProcessReceivedCommands+0x19e>
 800f298:	a201      	add	r2, pc, #4	; (adr r2, 800f2a0 <prvProcessReceivedCommands+0x78>)
 800f29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29e:	bf00      	nop
 800f2a0:	0800f2c9 	.word	0x0800f2c9
 800f2a4:	0800f2c9 	.word	0x0800f2c9
 800f2a8:	0800f2c9 	.word	0x0800f2c9
 800f2ac:	0800f33d 	.word	0x0800f33d
 800f2b0:	0800f351 	.word	0x0800f351
 800f2b4:	0800f39b 	.word	0x0800f39b
 800f2b8:	0800f2c9 	.word	0x0800f2c9
 800f2bc:	0800f2c9 	.word	0x0800f2c9
 800f2c0:	0800f33d 	.word	0x0800f33d
 800f2c4:	0800f351 	.word	0x0800f351
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2ce:	f043 0301 	orr.w	r3, r3, #1
 800f2d2:	b2da      	uxtb	r2, r3
 800f2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f2da:	68ba      	ldr	r2, [r7, #8]
 800f2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2de:	699b      	ldr	r3, [r3, #24]
 800f2e0:	18d1      	adds	r1, r2, r3
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2e8:	f7ff ff5c 	bl	800f1a4 <prvInsertTimerInActiveList>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d069      	beq.n	800f3c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f4:	6a1b      	ldr	r3, [r3, #32]
 800f2f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f300:	f003 0304 	and.w	r3, r3, #4
 800f304:	2b00      	cmp	r3, #0
 800f306:	d05e      	beq.n	800f3c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f308:	68ba      	ldr	r2, [r7, #8]
 800f30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30c:	699b      	ldr	r3, [r3, #24]
 800f30e:	441a      	add	r2, r3
 800f310:	2300      	movs	r3, #0
 800f312:	9300      	str	r3, [sp, #0]
 800f314:	2300      	movs	r3, #0
 800f316:	2100      	movs	r1, #0
 800f318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f31a:	f7ff fe05 	bl	800ef28 <xTimerGenericCommand>
 800f31e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f320:	6a3b      	ldr	r3, [r7, #32]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d14f      	bne.n	800f3c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32a:	f383 8811 	msr	BASEPRI, r3
 800f32e:	f3bf 8f6f 	isb	sy
 800f332:	f3bf 8f4f 	dsb	sy
 800f336:	61bb      	str	r3, [r7, #24]
}
 800f338:	bf00      	nop
 800f33a:	e7fe      	b.n	800f33a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f342:	f023 0301 	bic.w	r3, r3, #1
 800f346:	b2da      	uxtb	r2, r3
 800f348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f34e:	e03a      	b.n	800f3c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f356:	f043 0301 	orr.w	r3, r3, #1
 800f35a:	b2da      	uxtb	r2, r3
 800f35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f362:	68ba      	ldr	r2, [r7, #8]
 800f364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f366:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36a:	699b      	ldr	r3, [r3, #24]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d10a      	bne.n	800f386 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f374:	f383 8811 	msr	BASEPRI, r3
 800f378:	f3bf 8f6f 	isb	sy
 800f37c:	f3bf 8f4f 	dsb	sy
 800f380:	617b      	str	r3, [r7, #20]
}
 800f382:	bf00      	nop
 800f384:	e7fe      	b.n	800f384 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f388:	699a      	ldr	r2, [r3, #24]
 800f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38c:	18d1      	adds	r1, r2, r3
 800f38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f394:	f7ff ff06 	bl	800f1a4 <prvInsertTimerInActiveList>
					break;
 800f398:	e015      	b.n	800f3c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3a0:	f003 0302 	and.w	r3, r3, #2
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d103      	bne.n	800f3b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f3a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3aa:	f000 fbe1 	bl	800fb70 <vPortFree>
 800f3ae:	e00a      	b.n	800f3c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3b6:	f023 0301 	bic.w	r3, r3, #1
 800f3ba:	b2da      	uxtb	r2, r3
 800f3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f3c2:	e000      	b.n	800f3c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f3c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3c6:	4b08      	ldr	r3, [pc, #32]	; (800f3e8 <prvProcessReceivedCommands+0x1c0>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	1d39      	adds	r1, r7, #4
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7fe f9be 	bl	800d750 <xQueueReceive>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	f47f af2a 	bne.w	800f230 <prvProcessReceivedCommands+0x8>
	}
}
 800f3dc:	bf00      	nop
 800f3de:	bf00      	nop
 800f3e0:	3730      	adds	r7, #48	; 0x30
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	20000d80 	.word	0x20000d80

0800f3ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b088      	sub	sp, #32
 800f3f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f3f2:	e048      	b.n	800f486 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3f4:	4b2d      	ldr	r3, [pc, #180]	; (800f4ac <prvSwitchTimerLists+0xc0>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	68db      	ldr	r3, [r3, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3fe:	4b2b      	ldr	r3, [pc, #172]	; (800f4ac <prvSwitchTimerLists+0xc0>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	68db      	ldr	r3, [r3, #12]
 800f406:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	3304      	adds	r3, #4
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7fd fe9d 	bl	800d14c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	6a1b      	ldr	r3, [r3, #32]
 800f416:	68f8      	ldr	r0, [r7, #12]
 800f418:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f420:	f003 0304 	and.w	r3, r3, #4
 800f424:	2b00      	cmp	r3, #0
 800f426:	d02e      	beq.n	800f486 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	699b      	ldr	r3, [r3, #24]
 800f42c:	693a      	ldr	r2, [r7, #16]
 800f42e:	4413      	add	r3, r2
 800f430:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	429a      	cmp	r2, r3
 800f438:	d90e      	bls.n	800f458 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	68ba      	ldr	r2, [r7, #8]
 800f43e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	68fa      	ldr	r2, [r7, #12]
 800f444:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f446:	4b19      	ldr	r3, [pc, #100]	; (800f4ac <prvSwitchTimerLists+0xc0>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	3304      	adds	r3, #4
 800f44e:	4619      	mov	r1, r3
 800f450:	4610      	mov	r0, r2
 800f452:	f7fd fe42 	bl	800d0da <vListInsert>
 800f456:	e016      	b.n	800f486 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f458:	2300      	movs	r3, #0
 800f45a:	9300      	str	r3, [sp, #0]
 800f45c:	2300      	movs	r3, #0
 800f45e:	693a      	ldr	r2, [r7, #16]
 800f460:	2100      	movs	r1, #0
 800f462:	68f8      	ldr	r0, [r7, #12]
 800f464:	f7ff fd60 	bl	800ef28 <xTimerGenericCommand>
 800f468:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d10a      	bne.n	800f486 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f474:	f383 8811 	msr	BASEPRI, r3
 800f478:	f3bf 8f6f 	isb	sy
 800f47c:	f3bf 8f4f 	dsb	sy
 800f480:	603b      	str	r3, [r7, #0]
}
 800f482:	bf00      	nop
 800f484:	e7fe      	b.n	800f484 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f486:	4b09      	ldr	r3, [pc, #36]	; (800f4ac <prvSwitchTimerLists+0xc0>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d1b1      	bne.n	800f3f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f490:	4b06      	ldr	r3, [pc, #24]	; (800f4ac <prvSwitchTimerLists+0xc0>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f496:	4b06      	ldr	r3, [pc, #24]	; (800f4b0 <prvSwitchTimerLists+0xc4>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4a04      	ldr	r2, [pc, #16]	; (800f4ac <prvSwitchTimerLists+0xc0>)
 800f49c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f49e:	4a04      	ldr	r2, [pc, #16]	; (800f4b0 <prvSwitchTimerLists+0xc4>)
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	6013      	str	r3, [r2, #0]
}
 800f4a4:	bf00      	nop
 800f4a6:	3718      	adds	r7, #24
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	20000d78 	.word	0x20000d78
 800f4b0:	20000d7c 	.word	0x20000d7c

0800f4b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f4ba:	f000 f96b 	bl	800f794 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f4be:	4b15      	ldr	r3, [pc, #84]	; (800f514 <prvCheckForValidListAndQueue+0x60>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d120      	bne.n	800f508 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f4c6:	4814      	ldr	r0, [pc, #80]	; (800f518 <prvCheckForValidListAndQueue+0x64>)
 800f4c8:	f7fd fdb6 	bl	800d038 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f4cc:	4813      	ldr	r0, [pc, #76]	; (800f51c <prvCheckForValidListAndQueue+0x68>)
 800f4ce:	f7fd fdb3 	bl	800d038 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f4d2:	4b13      	ldr	r3, [pc, #76]	; (800f520 <prvCheckForValidListAndQueue+0x6c>)
 800f4d4:	4a10      	ldr	r2, [pc, #64]	; (800f518 <prvCheckForValidListAndQueue+0x64>)
 800f4d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f4d8:	4b12      	ldr	r3, [pc, #72]	; (800f524 <prvCheckForValidListAndQueue+0x70>)
 800f4da:	4a10      	ldr	r2, [pc, #64]	; (800f51c <prvCheckForValidListAndQueue+0x68>)
 800f4dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f4de:	2300      	movs	r3, #0
 800f4e0:	9300      	str	r3, [sp, #0]
 800f4e2:	4b11      	ldr	r3, [pc, #68]	; (800f528 <prvCheckForValidListAndQueue+0x74>)
 800f4e4:	4a11      	ldr	r2, [pc, #68]	; (800f52c <prvCheckForValidListAndQueue+0x78>)
 800f4e6:	2110      	movs	r1, #16
 800f4e8:	200a      	movs	r0, #10
 800f4ea:	f7fd fec1 	bl	800d270 <xQueueGenericCreateStatic>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	4a08      	ldr	r2, [pc, #32]	; (800f514 <prvCheckForValidListAndQueue+0x60>)
 800f4f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f4f4:	4b07      	ldr	r3, [pc, #28]	; (800f514 <prvCheckForValidListAndQueue+0x60>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d005      	beq.n	800f508 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f4fc:	4b05      	ldr	r3, [pc, #20]	; (800f514 <prvCheckForValidListAndQueue+0x60>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	490b      	ldr	r1, [pc, #44]	; (800f530 <prvCheckForValidListAndQueue+0x7c>)
 800f502:	4618      	mov	r0, r3
 800f504:	f7fe fbfe 	bl	800dd04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f508:	f000 f974 	bl	800f7f4 <vPortExitCritical>
}
 800f50c:	bf00      	nop
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
 800f512:	bf00      	nop
 800f514:	20000d80 	.word	0x20000d80
 800f518:	20000d50 	.word	0x20000d50
 800f51c:	20000d64 	.word	0x20000d64
 800f520:	20000d78 	.word	0x20000d78
 800f524:	20000d7c 	.word	0x20000d7c
 800f528:	20000e2c 	.word	0x20000e2c
 800f52c:	20000d8c 	.word	0x20000d8c
 800f530:	08010f24 	.word	0x08010f24

0800f534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f534:	b480      	push	{r7}
 800f536:	b085      	sub	sp, #20
 800f538:	af00      	add	r7, sp, #0
 800f53a:	60f8      	str	r0, [r7, #12]
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	3b04      	subs	r3, #4
 800f544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f54c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	3b04      	subs	r3, #4
 800f552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	f023 0201 	bic.w	r2, r3, #1
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	3b04      	subs	r3, #4
 800f562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f564:	4a0c      	ldr	r2, [pc, #48]	; (800f598 <pxPortInitialiseStack+0x64>)
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	3b14      	subs	r3, #20
 800f56e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	3b04      	subs	r3, #4
 800f57a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f06f 0202 	mvn.w	r2, #2
 800f582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	3b20      	subs	r3, #32
 800f588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f58a:	68fb      	ldr	r3, [r7, #12]
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3714      	adds	r7, #20
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr
 800f598:	0800f59d 	.word	0x0800f59d

0800f59c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f59c:	b480      	push	{r7}
 800f59e:	b085      	sub	sp, #20
 800f5a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f5a6:	4b12      	ldr	r3, [pc, #72]	; (800f5f0 <prvTaskExitError+0x54>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5ae:	d00a      	beq.n	800f5c6 <prvTaskExitError+0x2a>
	__asm volatile
 800f5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b4:	f383 8811 	msr	BASEPRI, r3
 800f5b8:	f3bf 8f6f 	isb	sy
 800f5bc:	f3bf 8f4f 	dsb	sy
 800f5c0:	60fb      	str	r3, [r7, #12]
}
 800f5c2:	bf00      	nop
 800f5c4:	e7fe      	b.n	800f5c4 <prvTaskExitError+0x28>
	__asm volatile
 800f5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ca:	f383 8811 	msr	BASEPRI, r3
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f3bf 8f4f 	dsb	sy
 800f5d6:	60bb      	str	r3, [r7, #8]
}
 800f5d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f5da:	bf00      	nop
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d0fc      	beq.n	800f5dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f5e2:	bf00      	nop
 800f5e4:	bf00      	nop
 800f5e6:	3714      	adds	r7, #20
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ee:	4770      	bx	lr
 800f5f0:	2000002c 	.word	0x2000002c
	...

0800f600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f600:	4b07      	ldr	r3, [pc, #28]	; (800f620 <pxCurrentTCBConst2>)
 800f602:	6819      	ldr	r1, [r3, #0]
 800f604:	6808      	ldr	r0, [r1, #0]
 800f606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f60a:	f380 8809 	msr	PSP, r0
 800f60e:	f3bf 8f6f 	isb	sy
 800f612:	f04f 0000 	mov.w	r0, #0
 800f616:	f380 8811 	msr	BASEPRI, r0
 800f61a:	4770      	bx	lr
 800f61c:	f3af 8000 	nop.w

0800f620 <pxCurrentTCBConst2>:
 800f620:	20000850 	.word	0x20000850
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f624:	bf00      	nop
 800f626:	bf00      	nop

0800f628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f628:	4808      	ldr	r0, [pc, #32]	; (800f64c <prvPortStartFirstTask+0x24>)
 800f62a:	6800      	ldr	r0, [r0, #0]
 800f62c:	6800      	ldr	r0, [r0, #0]
 800f62e:	f380 8808 	msr	MSP, r0
 800f632:	f04f 0000 	mov.w	r0, #0
 800f636:	f380 8814 	msr	CONTROL, r0
 800f63a:	b662      	cpsie	i
 800f63c:	b661      	cpsie	f
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	f3bf 8f6f 	isb	sy
 800f646:	df00      	svc	0
 800f648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f64a:	bf00      	nop
 800f64c:	e000ed08 	.word	0xe000ed08

0800f650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b086      	sub	sp, #24
 800f654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f656:	4b46      	ldr	r3, [pc, #280]	; (800f770 <xPortStartScheduler+0x120>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	4a46      	ldr	r2, [pc, #280]	; (800f774 <xPortStartScheduler+0x124>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d10a      	bne.n	800f676 <xPortStartScheduler+0x26>
	__asm volatile
 800f660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f664:	f383 8811 	msr	BASEPRI, r3
 800f668:	f3bf 8f6f 	isb	sy
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	613b      	str	r3, [r7, #16]
}
 800f672:	bf00      	nop
 800f674:	e7fe      	b.n	800f674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f676:	4b3e      	ldr	r3, [pc, #248]	; (800f770 <xPortStartScheduler+0x120>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4a3f      	ldr	r2, [pc, #252]	; (800f778 <xPortStartScheduler+0x128>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d10a      	bne.n	800f696 <xPortStartScheduler+0x46>
	__asm volatile
 800f680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f684:	f383 8811 	msr	BASEPRI, r3
 800f688:	f3bf 8f6f 	isb	sy
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	60fb      	str	r3, [r7, #12]
}
 800f692:	bf00      	nop
 800f694:	e7fe      	b.n	800f694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f696:	4b39      	ldr	r3, [pc, #228]	; (800f77c <xPortStartScheduler+0x12c>)
 800f698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	b2db      	uxtb	r3, r3
 800f6a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	22ff      	movs	r2, #255	; 0xff
 800f6a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	b2db      	uxtb	r3, r3
 800f6ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f6b0:	78fb      	ldrb	r3, [r7, #3]
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f6b8:	b2da      	uxtb	r2, r3
 800f6ba:	4b31      	ldr	r3, [pc, #196]	; (800f780 <xPortStartScheduler+0x130>)
 800f6bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6be:	4b31      	ldr	r3, [pc, #196]	; (800f784 <xPortStartScheduler+0x134>)
 800f6c0:	2207      	movs	r2, #7
 800f6c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6c4:	e009      	b.n	800f6da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f6c6:	4b2f      	ldr	r3, [pc, #188]	; (800f784 <xPortStartScheduler+0x134>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	3b01      	subs	r3, #1
 800f6cc:	4a2d      	ldr	r2, [pc, #180]	; (800f784 <xPortStartScheduler+0x134>)
 800f6ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f6d0:	78fb      	ldrb	r3, [r7, #3]
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	005b      	lsls	r3, r3, #1
 800f6d6:	b2db      	uxtb	r3, r3
 800f6d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6da:	78fb      	ldrb	r3, [r7, #3]
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6e2:	2b80      	cmp	r3, #128	; 0x80
 800f6e4:	d0ef      	beq.n	800f6c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f6e6:	4b27      	ldr	r3, [pc, #156]	; (800f784 <xPortStartScheduler+0x134>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f1c3 0307 	rsb	r3, r3, #7
 800f6ee:	2b04      	cmp	r3, #4
 800f6f0:	d00a      	beq.n	800f708 <xPortStartScheduler+0xb8>
	__asm volatile
 800f6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f6:	f383 8811 	msr	BASEPRI, r3
 800f6fa:	f3bf 8f6f 	isb	sy
 800f6fe:	f3bf 8f4f 	dsb	sy
 800f702:	60bb      	str	r3, [r7, #8]
}
 800f704:	bf00      	nop
 800f706:	e7fe      	b.n	800f706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f708:	4b1e      	ldr	r3, [pc, #120]	; (800f784 <xPortStartScheduler+0x134>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	021b      	lsls	r3, r3, #8
 800f70e:	4a1d      	ldr	r2, [pc, #116]	; (800f784 <xPortStartScheduler+0x134>)
 800f710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f712:	4b1c      	ldr	r3, [pc, #112]	; (800f784 <xPortStartScheduler+0x134>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f71a:	4a1a      	ldr	r2, [pc, #104]	; (800f784 <xPortStartScheduler+0x134>)
 800f71c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	b2da      	uxtb	r2, r3
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f726:	4b18      	ldr	r3, [pc, #96]	; (800f788 <xPortStartScheduler+0x138>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4a17      	ldr	r2, [pc, #92]	; (800f788 <xPortStartScheduler+0x138>)
 800f72c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f732:	4b15      	ldr	r3, [pc, #84]	; (800f788 <xPortStartScheduler+0x138>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	4a14      	ldr	r2, [pc, #80]	; (800f788 <xPortStartScheduler+0x138>)
 800f738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f73c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f73e:	f000 f8dd 	bl	800f8fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f742:	4b12      	ldr	r3, [pc, #72]	; (800f78c <xPortStartScheduler+0x13c>)
 800f744:	2200      	movs	r2, #0
 800f746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f748:	f000 f8fc 	bl	800f944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f74c:	4b10      	ldr	r3, [pc, #64]	; (800f790 <xPortStartScheduler+0x140>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a0f      	ldr	r2, [pc, #60]	; (800f790 <xPortStartScheduler+0x140>)
 800f752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f758:	f7ff ff66 	bl	800f628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f75c:	f7fe ff02 	bl	800e564 <vTaskSwitchContext>
	prvTaskExitError();
 800f760:	f7ff ff1c 	bl	800f59c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f764:	2300      	movs	r3, #0
}
 800f766:	4618      	mov	r0, r3
 800f768:	3718      	adds	r7, #24
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	e000ed00 	.word	0xe000ed00
 800f774:	410fc271 	.word	0x410fc271
 800f778:	410fc270 	.word	0x410fc270
 800f77c:	e000e400 	.word	0xe000e400
 800f780:	20000e7c 	.word	0x20000e7c
 800f784:	20000e80 	.word	0x20000e80
 800f788:	e000ed20 	.word	0xe000ed20
 800f78c:	2000002c 	.word	0x2000002c
 800f790:	e000ef34 	.word	0xe000ef34

0800f794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f794:	b480      	push	{r7}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
	__asm volatile
 800f79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f79e:	f383 8811 	msr	BASEPRI, r3
 800f7a2:	f3bf 8f6f 	isb	sy
 800f7a6:	f3bf 8f4f 	dsb	sy
 800f7aa:	607b      	str	r3, [r7, #4]
}
 800f7ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f7ae:	4b0f      	ldr	r3, [pc, #60]	; (800f7ec <vPortEnterCritical+0x58>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	4a0d      	ldr	r2, [pc, #52]	; (800f7ec <vPortEnterCritical+0x58>)
 800f7b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f7b8:	4b0c      	ldr	r3, [pc, #48]	; (800f7ec <vPortEnterCritical+0x58>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d10f      	bne.n	800f7e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f7c0:	4b0b      	ldr	r3, [pc, #44]	; (800f7f0 <vPortEnterCritical+0x5c>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d00a      	beq.n	800f7e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ce:	f383 8811 	msr	BASEPRI, r3
 800f7d2:	f3bf 8f6f 	isb	sy
 800f7d6:	f3bf 8f4f 	dsb	sy
 800f7da:	603b      	str	r3, [r7, #0]
}
 800f7dc:	bf00      	nop
 800f7de:	e7fe      	b.n	800f7de <vPortEnterCritical+0x4a>
	}
}
 800f7e0:	bf00      	nop
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr
 800f7ec:	2000002c 	.word	0x2000002c
 800f7f0:	e000ed04 	.word	0xe000ed04

0800f7f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f7fa:	4b12      	ldr	r3, [pc, #72]	; (800f844 <vPortExitCritical+0x50>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d10a      	bne.n	800f818 <vPortExitCritical+0x24>
	__asm volatile
 800f802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f806:	f383 8811 	msr	BASEPRI, r3
 800f80a:	f3bf 8f6f 	isb	sy
 800f80e:	f3bf 8f4f 	dsb	sy
 800f812:	607b      	str	r3, [r7, #4]
}
 800f814:	bf00      	nop
 800f816:	e7fe      	b.n	800f816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f818:	4b0a      	ldr	r3, [pc, #40]	; (800f844 <vPortExitCritical+0x50>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	3b01      	subs	r3, #1
 800f81e:	4a09      	ldr	r2, [pc, #36]	; (800f844 <vPortExitCritical+0x50>)
 800f820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f822:	4b08      	ldr	r3, [pc, #32]	; (800f844 <vPortExitCritical+0x50>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d105      	bne.n	800f836 <vPortExitCritical+0x42>
 800f82a:	2300      	movs	r3, #0
 800f82c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	f383 8811 	msr	BASEPRI, r3
}
 800f834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f836:	bf00      	nop
 800f838:	370c      	adds	r7, #12
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	2000002c 	.word	0x2000002c
	...

0800f850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f850:	f3ef 8009 	mrs	r0, PSP
 800f854:	f3bf 8f6f 	isb	sy
 800f858:	4b15      	ldr	r3, [pc, #84]	; (800f8b0 <pxCurrentTCBConst>)
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	f01e 0f10 	tst.w	lr, #16
 800f860:	bf08      	it	eq
 800f862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f86a:	6010      	str	r0, [r2, #0]
 800f86c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f870:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f874:	f380 8811 	msr	BASEPRI, r0
 800f878:	f3bf 8f4f 	dsb	sy
 800f87c:	f3bf 8f6f 	isb	sy
 800f880:	f7fe fe70 	bl	800e564 <vTaskSwitchContext>
 800f884:	f04f 0000 	mov.w	r0, #0
 800f888:	f380 8811 	msr	BASEPRI, r0
 800f88c:	bc09      	pop	{r0, r3}
 800f88e:	6819      	ldr	r1, [r3, #0]
 800f890:	6808      	ldr	r0, [r1, #0]
 800f892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f896:	f01e 0f10 	tst.w	lr, #16
 800f89a:	bf08      	it	eq
 800f89c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f8a0:	f380 8809 	msr	PSP, r0
 800f8a4:	f3bf 8f6f 	isb	sy
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop
 800f8ac:	f3af 8000 	nop.w

0800f8b0 <pxCurrentTCBConst>:
 800f8b0:	20000850 	.word	0x20000850
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f8b4:	bf00      	nop
 800f8b6:	bf00      	nop

0800f8b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c2:	f383 8811 	msr	BASEPRI, r3
 800f8c6:	f3bf 8f6f 	isb	sy
 800f8ca:	f3bf 8f4f 	dsb	sy
 800f8ce:	607b      	str	r3, [r7, #4]
}
 800f8d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f8d2:	f7fe fd8d 	bl	800e3f0 <xTaskIncrementTick>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d003      	beq.n	800f8e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f8dc:	4b06      	ldr	r3, [pc, #24]	; (800f8f8 <xPortSysTickHandler+0x40>)
 800f8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8e2:	601a      	str	r2, [r3, #0]
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	f383 8811 	msr	BASEPRI, r3
}
 800f8ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f8f0:	bf00      	nop
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	e000ed04 	.word	0xe000ed04

0800f8fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f900:	4b0b      	ldr	r3, [pc, #44]	; (800f930 <vPortSetupTimerInterrupt+0x34>)
 800f902:	2200      	movs	r2, #0
 800f904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f906:	4b0b      	ldr	r3, [pc, #44]	; (800f934 <vPortSetupTimerInterrupt+0x38>)
 800f908:	2200      	movs	r2, #0
 800f90a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f90c:	4b0a      	ldr	r3, [pc, #40]	; (800f938 <vPortSetupTimerInterrupt+0x3c>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4a0a      	ldr	r2, [pc, #40]	; (800f93c <vPortSetupTimerInterrupt+0x40>)
 800f912:	fba2 2303 	umull	r2, r3, r2, r3
 800f916:	099b      	lsrs	r3, r3, #6
 800f918:	4a09      	ldr	r2, [pc, #36]	; (800f940 <vPortSetupTimerInterrupt+0x44>)
 800f91a:	3b01      	subs	r3, #1
 800f91c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f91e:	4b04      	ldr	r3, [pc, #16]	; (800f930 <vPortSetupTimerInterrupt+0x34>)
 800f920:	2207      	movs	r2, #7
 800f922:	601a      	str	r2, [r3, #0]
}
 800f924:	bf00      	nop
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr
 800f92e:	bf00      	nop
 800f930:	e000e010 	.word	0xe000e010
 800f934:	e000e018 	.word	0xe000e018
 800f938:	20000000 	.word	0x20000000
 800f93c:	10624dd3 	.word	0x10624dd3
 800f940:	e000e014 	.word	0xe000e014

0800f944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f954 <vPortEnableVFP+0x10>
 800f948:	6801      	ldr	r1, [r0, #0]
 800f94a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f94e:	6001      	str	r1, [r0, #0]
 800f950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f952:	bf00      	nop
 800f954:	e000ed88 	.word	0xe000ed88

0800f958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f958:	b480      	push	{r7}
 800f95a:	b085      	sub	sp, #20
 800f95c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f95e:	f3ef 8305 	mrs	r3, IPSR
 800f962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2b0f      	cmp	r3, #15
 800f968:	d914      	bls.n	800f994 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f96a:	4a17      	ldr	r2, [pc, #92]	; (800f9c8 <vPortValidateInterruptPriority+0x70>)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	4413      	add	r3, r2
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f974:	4b15      	ldr	r3, [pc, #84]	; (800f9cc <vPortValidateInterruptPriority+0x74>)
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	7afa      	ldrb	r2, [r7, #11]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d20a      	bcs.n	800f994 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f982:	f383 8811 	msr	BASEPRI, r3
 800f986:	f3bf 8f6f 	isb	sy
 800f98a:	f3bf 8f4f 	dsb	sy
 800f98e:	607b      	str	r3, [r7, #4]
}
 800f990:	bf00      	nop
 800f992:	e7fe      	b.n	800f992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f994:	4b0e      	ldr	r3, [pc, #56]	; (800f9d0 <vPortValidateInterruptPriority+0x78>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f99c:	4b0d      	ldr	r3, [pc, #52]	; (800f9d4 <vPortValidateInterruptPriority+0x7c>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d90a      	bls.n	800f9ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a8:	f383 8811 	msr	BASEPRI, r3
 800f9ac:	f3bf 8f6f 	isb	sy
 800f9b0:	f3bf 8f4f 	dsb	sy
 800f9b4:	603b      	str	r3, [r7, #0]
}
 800f9b6:	bf00      	nop
 800f9b8:	e7fe      	b.n	800f9b8 <vPortValidateInterruptPriority+0x60>
	}
 800f9ba:	bf00      	nop
 800f9bc:	3714      	adds	r7, #20
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c4:	4770      	bx	lr
 800f9c6:	bf00      	nop
 800f9c8:	e000e3f0 	.word	0xe000e3f0
 800f9cc:	20000e7c 	.word	0x20000e7c
 800f9d0:	e000ed0c 	.word	0xe000ed0c
 800f9d4:	20000e80 	.word	0x20000e80

0800f9d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b08a      	sub	sp, #40	; 0x28
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f9e4:	f7fe fc48 	bl	800e278 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f9e8:	4b5b      	ldr	r3, [pc, #364]	; (800fb58 <pvPortMalloc+0x180>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d101      	bne.n	800f9f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f9f0:	f000 f920 	bl	800fc34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f9f4:	4b59      	ldr	r3, [pc, #356]	; (800fb5c <pvPortMalloc+0x184>)
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	4013      	ands	r3, r2
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	f040 8093 	bne.w	800fb28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d01d      	beq.n	800fa44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fa08:	2208      	movs	r2, #8
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f003 0307 	and.w	r3, r3, #7
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d014      	beq.n	800fa44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f023 0307 	bic.w	r3, r3, #7
 800fa20:	3308      	adds	r3, #8
 800fa22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f003 0307 	and.w	r3, r3, #7
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d00a      	beq.n	800fa44 <pvPortMalloc+0x6c>
	__asm volatile
 800fa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa32:	f383 8811 	msr	BASEPRI, r3
 800fa36:	f3bf 8f6f 	isb	sy
 800fa3a:	f3bf 8f4f 	dsb	sy
 800fa3e:	617b      	str	r3, [r7, #20]
}
 800fa40:	bf00      	nop
 800fa42:	e7fe      	b.n	800fa42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d06e      	beq.n	800fb28 <pvPortMalloc+0x150>
 800fa4a:	4b45      	ldr	r3, [pc, #276]	; (800fb60 <pvPortMalloc+0x188>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	687a      	ldr	r2, [r7, #4]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d869      	bhi.n	800fb28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fa54:	4b43      	ldr	r3, [pc, #268]	; (800fb64 <pvPortMalloc+0x18c>)
 800fa56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fa58:	4b42      	ldr	r3, [pc, #264]	; (800fb64 <pvPortMalloc+0x18c>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa5e:	e004      	b.n	800fa6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d903      	bls.n	800fa7c <pvPortMalloc+0xa4>
 800fa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d1f1      	bne.n	800fa60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa7c:	4b36      	ldr	r3, [pc, #216]	; (800fb58 <pvPortMalloc+0x180>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d050      	beq.n	800fb28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa86:	6a3b      	ldr	r3, [r7, #32]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	2208      	movs	r2, #8
 800fa8c:	4413      	add	r3, r2
 800fa8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa92:	681a      	ldr	r2, [r3, #0]
 800fa94:	6a3b      	ldr	r3, [r7, #32]
 800fa96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9a:	685a      	ldr	r2, [r3, #4]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	1ad2      	subs	r2, r2, r3
 800faa0:	2308      	movs	r3, #8
 800faa2:	005b      	lsls	r3, r3, #1
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d91f      	bls.n	800fae8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800faa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4413      	add	r3, r2
 800faae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	f003 0307 	and.w	r3, r3, #7
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00a      	beq.n	800fad0 <pvPortMalloc+0xf8>
	__asm volatile
 800faba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fabe:	f383 8811 	msr	BASEPRI, r3
 800fac2:	f3bf 8f6f 	isb	sy
 800fac6:	f3bf 8f4f 	dsb	sy
 800faca:	613b      	str	r3, [r7, #16]
}
 800facc:	bf00      	nop
 800face:	e7fe      	b.n	800face <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad2:	685a      	ldr	r2, [r3, #4]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	1ad2      	subs	r2, r2, r3
 800fad8:	69bb      	ldr	r3, [r7, #24]
 800fada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fade:	687a      	ldr	r2, [r7, #4]
 800fae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fae2:	69b8      	ldr	r0, [r7, #24]
 800fae4:	f000 f908 	bl	800fcf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fae8:	4b1d      	ldr	r3, [pc, #116]	; (800fb60 <pvPortMalloc+0x188>)
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	1ad3      	subs	r3, r2, r3
 800faf2:	4a1b      	ldr	r2, [pc, #108]	; (800fb60 <pvPortMalloc+0x188>)
 800faf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800faf6:	4b1a      	ldr	r3, [pc, #104]	; (800fb60 <pvPortMalloc+0x188>)
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	4b1b      	ldr	r3, [pc, #108]	; (800fb68 <pvPortMalloc+0x190>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d203      	bcs.n	800fb0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb02:	4b17      	ldr	r3, [pc, #92]	; (800fb60 <pvPortMalloc+0x188>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	4a18      	ldr	r2, [pc, #96]	; (800fb68 <pvPortMalloc+0x190>)
 800fb08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0c:	685a      	ldr	r2, [r3, #4]
 800fb0e:	4b13      	ldr	r3, [pc, #76]	; (800fb5c <pvPortMalloc+0x184>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	431a      	orrs	r2, r3
 800fb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fb1e:	4b13      	ldr	r3, [pc, #76]	; (800fb6c <pvPortMalloc+0x194>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	3301      	adds	r3, #1
 800fb24:	4a11      	ldr	r2, [pc, #68]	; (800fb6c <pvPortMalloc+0x194>)
 800fb26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb28:	f7fe fbb4 	bl	800e294 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	f003 0307 	and.w	r3, r3, #7
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d00a      	beq.n	800fb4c <pvPortMalloc+0x174>
	__asm volatile
 800fb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3a:	f383 8811 	msr	BASEPRI, r3
 800fb3e:	f3bf 8f6f 	isb	sy
 800fb42:	f3bf 8f4f 	dsb	sy
 800fb46:	60fb      	str	r3, [r7, #12]
}
 800fb48:	bf00      	nop
 800fb4a:	e7fe      	b.n	800fb4a <pvPortMalloc+0x172>
	return pvReturn;
 800fb4c:	69fb      	ldr	r3, [r7, #28]
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3728      	adds	r7, #40	; 0x28
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
 800fb56:	bf00      	nop
 800fb58:	20004a8c 	.word	0x20004a8c
 800fb5c:	20004aa0 	.word	0x20004aa0
 800fb60:	20004a90 	.word	0x20004a90
 800fb64:	20004a84 	.word	0x20004a84
 800fb68:	20004a94 	.word	0x20004a94
 800fb6c:	20004a98 	.word	0x20004a98

0800fb70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b086      	sub	sp, #24
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d04d      	beq.n	800fc1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fb82:	2308      	movs	r3, #8
 800fb84:	425b      	negs	r3, r3
 800fb86:	697a      	ldr	r2, [r7, #20]
 800fb88:	4413      	add	r3, r2
 800fb8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	685a      	ldr	r2, [r3, #4]
 800fb94:	4b24      	ldr	r3, [pc, #144]	; (800fc28 <vPortFree+0xb8>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	4013      	ands	r3, r2
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d10a      	bne.n	800fbb4 <vPortFree+0x44>
	__asm volatile
 800fb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba2:	f383 8811 	msr	BASEPRI, r3
 800fba6:	f3bf 8f6f 	isb	sy
 800fbaa:	f3bf 8f4f 	dsb	sy
 800fbae:	60fb      	str	r3, [r7, #12]
}
 800fbb0:	bf00      	nop
 800fbb2:	e7fe      	b.n	800fbb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d00a      	beq.n	800fbd2 <vPortFree+0x62>
	__asm volatile
 800fbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc0:	f383 8811 	msr	BASEPRI, r3
 800fbc4:	f3bf 8f6f 	isb	sy
 800fbc8:	f3bf 8f4f 	dsb	sy
 800fbcc:	60bb      	str	r3, [r7, #8]
}
 800fbce:	bf00      	nop
 800fbd0:	e7fe      	b.n	800fbd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	685a      	ldr	r2, [r3, #4]
 800fbd6:	4b14      	ldr	r3, [pc, #80]	; (800fc28 <vPortFree+0xb8>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	4013      	ands	r3, r2
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d01e      	beq.n	800fc1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d11a      	bne.n	800fc1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	685a      	ldr	r2, [r3, #4]
 800fbec:	4b0e      	ldr	r3, [pc, #56]	; (800fc28 <vPortFree+0xb8>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	43db      	mvns	r3, r3
 800fbf2:	401a      	ands	r2, r3
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fbf8:	f7fe fb3e 	bl	800e278 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	685a      	ldr	r2, [r3, #4]
 800fc00:	4b0a      	ldr	r3, [pc, #40]	; (800fc2c <vPortFree+0xbc>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4413      	add	r3, r2
 800fc06:	4a09      	ldr	r2, [pc, #36]	; (800fc2c <vPortFree+0xbc>)
 800fc08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc0a:	6938      	ldr	r0, [r7, #16]
 800fc0c:	f000 f874 	bl	800fcf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fc10:	4b07      	ldr	r3, [pc, #28]	; (800fc30 <vPortFree+0xc0>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	3301      	adds	r3, #1
 800fc16:	4a06      	ldr	r2, [pc, #24]	; (800fc30 <vPortFree+0xc0>)
 800fc18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fc1a:	f7fe fb3b 	bl	800e294 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc1e:	bf00      	nop
 800fc20:	3718      	adds	r7, #24
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	20004aa0 	.word	0x20004aa0
 800fc2c:	20004a90 	.word	0x20004a90
 800fc30:	20004a9c 	.word	0x20004a9c

0800fc34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc34:	b480      	push	{r7}
 800fc36:	b085      	sub	sp, #20
 800fc38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fc3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fc40:	4b27      	ldr	r3, [pc, #156]	; (800fce0 <prvHeapInit+0xac>)
 800fc42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f003 0307 	and.w	r3, r3, #7
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d00c      	beq.n	800fc68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	3307      	adds	r3, #7
 800fc52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f023 0307 	bic.w	r3, r3, #7
 800fc5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc5c:	68ba      	ldr	r2, [r7, #8]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	1ad3      	subs	r3, r2, r3
 800fc62:	4a1f      	ldr	r2, [pc, #124]	; (800fce0 <prvHeapInit+0xac>)
 800fc64:	4413      	add	r3, r2
 800fc66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc6c:	4a1d      	ldr	r2, [pc, #116]	; (800fce4 <prvHeapInit+0xb0>)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc72:	4b1c      	ldr	r3, [pc, #112]	; (800fce4 <prvHeapInit+0xb0>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	68ba      	ldr	r2, [r7, #8]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fc80:	2208      	movs	r2, #8
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	1a9b      	subs	r3, r3, r2
 800fc86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f023 0307 	bic.w	r3, r3, #7
 800fc8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	4a15      	ldr	r2, [pc, #84]	; (800fce8 <prvHeapInit+0xb4>)
 800fc94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fc96:	4b14      	ldr	r3, [pc, #80]	; (800fce8 <prvHeapInit+0xb4>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fc9e:	4b12      	ldr	r3, [pc, #72]	; (800fce8 <prvHeapInit+0xb4>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2200      	movs	r2, #0
 800fca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	68fa      	ldr	r2, [r7, #12]
 800fcae:	1ad2      	subs	r2, r2, r3
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fcb4:	4b0c      	ldr	r3, [pc, #48]	; (800fce8 <prvHeapInit+0xb4>)
 800fcb6:	681a      	ldr	r2, [r3, #0]
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	4a0a      	ldr	r2, [pc, #40]	; (800fcec <prvHeapInit+0xb8>)
 800fcc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	4a09      	ldr	r2, [pc, #36]	; (800fcf0 <prvHeapInit+0xbc>)
 800fcca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fccc:	4b09      	ldr	r3, [pc, #36]	; (800fcf4 <prvHeapInit+0xc0>)
 800fcce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fcd2:	601a      	str	r2, [r3, #0]
}
 800fcd4:	bf00      	nop
 800fcd6:	3714      	adds	r7, #20
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr
 800fce0:	20000e84 	.word	0x20000e84
 800fce4:	20004a84 	.word	0x20004a84
 800fce8:	20004a8c 	.word	0x20004a8c
 800fcec:	20004a94 	.word	0x20004a94
 800fcf0:	20004a90 	.word	0x20004a90
 800fcf4:	20004aa0 	.word	0x20004aa0

0800fcf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b085      	sub	sp, #20
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd00:	4b28      	ldr	r3, [pc, #160]	; (800fda4 <prvInsertBlockIntoFreeList+0xac>)
 800fd02:	60fb      	str	r3, [r7, #12]
 800fd04:	e002      	b.n	800fd0c <prvInsertBlockIntoFreeList+0x14>
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	60fb      	str	r3, [r7, #12]
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d8f7      	bhi.n	800fd06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	68ba      	ldr	r2, [r7, #8]
 800fd20:	4413      	add	r3, r2
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d108      	bne.n	800fd3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	685a      	ldr	r2, [r3, #4]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	441a      	add	r2, r3
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	68ba      	ldr	r2, [r7, #8]
 800fd44:	441a      	add	r2, r3
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d118      	bne.n	800fd80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681a      	ldr	r2, [r3, #0]
 800fd52:	4b15      	ldr	r3, [pc, #84]	; (800fda8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d00d      	beq.n	800fd76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	685a      	ldr	r2, [r3, #4]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	441a      	add	r2, r3
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	681a      	ldr	r2, [r3, #0]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	601a      	str	r2, [r3, #0]
 800fd74:	e008      	b.n	800fd88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd76:	4b0c      	ldr	r3, [pc, #48]	; (800fda8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	601a      	str	r2, [r3, #0]
 800fd7e:	e003      	b.n	800fd88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d002      	beq.n	800fd96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	687a      	ldr	r2, [r7, #4]
 800fd94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd96:	bf00      	nop
 800fd98:	3714      	adds	r7, #20
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr
 800fda2:	bf00      	nop
 800fda4:	20004a84 	.word	0x20004a84
 800fda8:	20004a8c 	.word	0x20004a8c

0800fdac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	490e      	ldr	r1, [pc, #56]	; (800fdec <MX_USB_HOST_Init+0x40>)
 800fdb4:	480e      	ldr	r0, [pc, #56]	; (800fdf0 <MX_USB_HOST_Init+0x44>)
 800fdb6:	f7fb f917 	bl	800afe8 <USBH_Init>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d001      	beq.n	800fdc4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fdc0:	f7f2 fbf0 	bl	80025a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800fdc4:	490b      	ldr	r1, [pc, #44]	; (800fdf4 <MX_USB_HOST_Init+0x48>)
 800fdc6:	480a      	ldr	r0, [pc, #40]	; (800fdf0 <MX_USB_HOST_Init+0x44>)
 800fdc8:	f7fb f9be 	bl	800b148 <USBH_RegisterClass>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d001      	beq.n	800fdd6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fdd2:	f7f2 fbe7 	bl	80025a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fdd6:	4806      	ldr	r0, [pc, #24]	; (800fdf0 <MX_USB_HOST_Init+0x44>)
 800fdd8:	f7fb fa42 	bl	800b260 <USBH_Start>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d001      	beq.n	800fde6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fde2:	f7f2 fbdf 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fde6:	bf00      	nop
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	0800fdf9 	.word	0x0800fdf9
 800fdf0:	20004fc4 	.word	0x20004fc4
 800fdf4:	2000000c 	.word	0x2000000c

0800fdf8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	460b      	mov	r3, r1
 800fe02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fe04:	78fb      	ldrb	r3, [r7, #3]
 800fe06:	3b01      	subs	r3, #1
 800fe08:	2b04      	cmp	r3, #4
 800fe0a:	d819      	bhi.n	800fe40 <USBH_UserProcess+0x48>
 800fe0c:	a201      	add	r2, pc, #4	; (adr r2, 800fe14 <USBH_UserProcess+0x1c>)
 800fe0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe12:	bf00      	nop
 800fe14:	0800fe41 	.word	0x0800fe41
 800fe18:	0800fe31 	.word	0x0800fe31
 800fe1c:	0800fe41 	.word	0x0800fe41
 800fe20:	0800fe39 	.word	0x0800fe39
 800fe24:	0800fe29 	.word	0x0800fe29
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fe28:	4b09      	ldr	r3, [pc, #36]	; (800fe50 <USBH_UserProcess+0x58>)
 800fe2a:	2203      	movs	r2, #3
 800fe2c:	701a      	strb	r2, [r3, #0]
  break;
 800fe2e:	e008      	b.n	800fe42 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fe30:	4b07      	ldr	r3, [pc, #28]	; (800fe50 <USBH_UserProcess+0x58>)
 800fe32:	2202      	movs	r2, #2
 800fe34:	701a      	strb	r2, [r3, #0]
  break;
 800fe36:	e004      	b.n	800fe42 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fe38:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <USBH_UserProcess+0x58>)
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	701a      	strb	r2, [r3, #0]
  break;
 800fe3e:	e000      	b.n	800fe42 <USBH_UserProcess+0x4a>

  default:
  break;
 800fe40:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fe42:	bf00      	nop
 800fe44:	370c      	adds	r7, #12
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	20004aa4 	.word	0x20004aa4

0800fe54 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b08a      	sub	sp, #40	; 0x28
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe5c:	f107 0314 	add.w	r3, r7, #20
 800fe60:	2200      	movs	r2, #0
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	605a      	str	r2, [r3, #4]
 800fe66:	609a      	str	r2, [r3, #8]
 800fe68:	60da      	str	r2, [r3, #12]
 800fe6a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fe74:	d147      	bne.n	800ff06 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe76:	2300      	movs	r3, #0
 800fe78:	613b      	str	r3, [r7, #16]
 800fe7a:	4b25      	ldr	r3, [pc, #148]	; (800ff10 <HAL_HCD_MspInit+0xbc>)
 800fe7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe7e:	4a24      	ldr	r2, [pc, #144]	; (800ff10 <HAL_HCD_MspInit+0xbc>)
 800fe80:	f043 0301 	orr.w	r3, r3, #1
 800fe84:	6313      	str	r3, [r2, #48]	; 0x30
 800fe86:	4b22      	ldr	r3, [pc, #136]	; (800ff10 <HAL_HCD_MspInit+0xbc>)
 800fe88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe8a:	f003 0301 	and.w	r3, r3, #1
 800fe8e:	613b      	str	r3, [r7, #16]
 800fe90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800fe92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800fea0:	f107 0314 	add.w	r3, r7, #20
 800fea4:	4619      	mov	r1, r3
 800fea6:	481b      	ldr	r0, [pc, #108]	; (800ff14 <HAL_HCD_MspInit+0xc0>)
 800fea8:	f7f3 fd18 	bl	80038dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800feac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800feb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800feb2:	2302      	movs	r3, #2
 800feb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800feb6:	2300      	movs	r3, #0
 800feb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800feba:	2300      	movs	r3, #0
 800febc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800febe:	230a      	movs	r3, #10
 800fec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fec2:	f107 0314 	add.w	r3, r7, #20
 800fec6:	4619      	mov	r1, r3
 800fec8:	4812      	ldr	r0, [pc, #72]	; (800ff14 <HAL_HCD_MspInit+0xc0>)
 800feca:	f7f3 fd07 	bl	80038dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fece:	4b10      	ldr	r3, [pc, #64]	; (800ff10 <HAL_HCD_MspInit+0xbc>)
 800fed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fed2:	4a0f      	ldr	r2, [pc, #60]	; (800ff10 <HAL_HCD_MspInit+0xbc>)
 800fed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fed8:	6353      	str	r3, [r2, #52]	; 0x34
 800feda:	2300      	movs	r3, #0
 800fedc:	60fb      	str	r3, [r7, #12]
 800fede:	4b0c      	ldr	r3, [pc, #48]	; (800ff10 <HAL_HCD_MspInit+0xbc>)
 800fee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fee2:	4a0b      	ldr	r2, [pc, #44]	; (800ff10 <HAL_HCD_MspInit+0xbc>)
 800fee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fee8:	6453      	str	r3, [r2, #68]	; 0x44
 800feea:	4b09      	ldr	r3, [pc, #36]	; (800ff10 <HAL_HCD_MspInit+0xbc>)
 800feec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800feee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fef2:	60fb      	str	r3, [r7, #12]
 800fef4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fef6:	2200      	movs	r2, #0
 800fef8:	2105      	movs	r1, #5
 800fefa:	2043      	movs	r0, #67	; 0x43
 800fefc:	f7f3 fc32 	bl	8003764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ff00:	2043      	movs	r0, #67	; 0x43
 800ff02:	f7f3 fc4b 	bl	800379c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ff06:	bf00      	nop
 800ff08:	3728      	adds	r7, #40	; 0x28
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	40023800 	.word	0x40023800
 800ff14:	40020000 	.word	0x40020000

0800ff18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fb fe47 	bl	800bbba <USBH_LL_IncTimer>
}
 800ff2c:	bf00      	nop
 800ff2e:	3708      	adds	r7, #8
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fb fe8b 	bl	800bc5e <USBH_LL_Connect>
}
 800ff48:	bf00      	nop
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fb fea0 	bl	800bca4 <USBH_LL_Disconnect>
}
 800ff64:	bf00      	nop
 800ff66:	3708      	adds	r7, #8
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	460b      	mov	r3, r1
 800ff76:	70fb      	strb	r3, [r7, #3]
 800ff78:	4613      	mov	r3, r2
 800ff7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fb fed7 	bl	800bd36 <USBH_LL_NotifyURBChange>
#endif
}
 800ff88:	bf00      	nop
 800ff8a:	3708      	adds	r7, #8
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7fb fe35 	bl	800bc0e <USBH_LL_PortEnabled>
}
 800ffa4:	bf00      	nop
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7fb fe41 	bl	800bc42 <USBH_LL_PortDisabled>
}
 800ffc0:	bf00      	nop
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d12a      	bne.n	8010030 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ffda:	4a18      	ldr	r2, [pc, #96]	; (801003c <USBH_LL_Init+0x74>)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4a15      	ldr	r2, [pc, #84]	; (801003c <USBH_LL_Init+0x74>)
 800ffe6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ffea:	4b14      	ldr	r3, [pc, #80]	; (801003c <USBH_LL_Init+0x74>)
 800ffec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fff0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fff2:	4b12      	ldr	r3, [pc, #72]	; (801003c <USBH_LL_Init+0x74>)
 800fff4:	2208      	movs	r2, #8
 800fff6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800fff8:	4b10      	ldr	r3, [pc, #64]	; (801003c <USBH_LL_Init+0x74>)
 800fffa:	2201      	movs	r2, #1
 800fffc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fffe:	4b0f      	ldr	r3, [pc, #60]	; (801003c <USBH_LL_Init+0x74>)
 8010000:	2200      	movs	r2, #0
 8010002:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010004:	4b0d      	ldr	r3, [pc, #52]	; (801003c <USBH_LL_Init+0x74>)
 8010006:	2202      	movs	r2, #2
 8010008:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801000a:	4b0c      	ldr	r3, [pc, #48]	; (801003c <USBH_LL_Init+0x74>)
 801000c:	2200      	movs	r2, #0
 801000e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010010:	480a      	ldr	r0, [pc, #40]	; (801003c <USBH_LL_Init+0x74>)
 8010012:	f7f3 fe54 	bl	8003cbe <HAL_HCD_Init>
 8010016:	4603      	mov	r3, r0
 8010018:	2b00      	cmp	r3, #0
 801001a:	d001      	beq.n	8010020 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801001c:	f7f2 fac2 	bl	80025a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010020:	4806      	ldr	r0, [pc, #24]	; (801003c <USBH_LL_Init+0x74>)
 8010022:	f7f4 fa38 	bl	8004496 <HAL_HCD_GetCurrentFrame>
 8010026:	4603      	mov	r3, r0
 8010028:	4619      	mov	r1, r3
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f7fb fdb6 	bl	800bb9c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010030:	2300      	movs	r3, #0
}
 8010032:	4618      	mov	r0, r3
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop
 801003c:	200053a8 	.word	0x200053a8

08010040 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b084      	sub	sp, #16
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010048:	2300      	movs	r3, #0
 801004a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801004c:	2300      	movs	r3, #0
 801004e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010056:	4618      	mov	r0, r3
 8010058:	f7f4 f9a7 	bl	80043aa <HAL_HCD_Start>
 801005c:	4603      	mov	r3, r0
 801005e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010060:	7bfb      	ldrb	r3, [r7, #15]
 8010062:	4618      	mov	r0, r3
 8010064:	f000 f95c 	bl	8010320 <USBH_Get_USB_Status>
 8010068:	4603      	mov	r3, r0
 801006a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801006c:	7bbb      	ldrb	r3, [r7, #14]
}
 801006e:	4618      	mov	r0, r3
 8010070:	3710      	adds	r7, #16
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010076:	b580      	push	{r7, lr}
 8010078:	b084      	sub	sp, #16
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801007e:	2300      	movs	r3, #0
 8010080:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010082:	2300      	movs	r3, #0
 8010084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801008c:	4618      	mov	r0, r3
 801008e:	f7f4 f9af 	bl	80043f0 <HAL_HCD_Stop>
 8010092:	4603      	mov	r3, r0
 8010094:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010096:	7bfb      	ldrb	r3, [r7, #15]
 8010098:	4618      	mov	r0, r3
 801009a:	f000 f941 	bl	8010320 <USBH_Get_USB_Status>
 801009e:	4603      	mov	r3, r0
 80100a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3710      	adds	r7, #16
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}

080100ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80100b4:	2301      	movs	r3, #1
 80100b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80100be:	4618      	mov	r0, r3
 80100c0:	f7f4 f9f7 	bl	80044b2 <HAL_HCD_GetCurrentSpeed>
 80100c4:	4603      	mov	r3, r0
 80100c6:	2b02      	cmp	r3, #2
 80100c8:	d00c      	beq.n	80100e4 <USBH_LL_GetSpeed+0x38>
 80100ca:	2b02      	cmp	r3, #2
 80100cc:	d80d      	bhi.n	80100ea <USBH_LL_GetSpeed+0x3e>
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d002      	beq.n	80100d8 <USBH_LL_GetSpeed+0x2c>
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	d003      	beq.n	80100de <USBH_LL_GetSpeed+0x32>
 80100d6:	e008      	b.n	80100ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80100d8:	2300      	movs	r3, #0
 80100da:	73fb      	strb	r3, [r7, #15]
    break;
 80100dc:	e008      	b.n	80100f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80100de:	2301      	movs	r3, #1
 80100e0:	73fb      	strb	r3, [r7, #15]
    break;
 80100e2:	e005      	b.n	80100f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80100e4:	2302      	movs	r3, #2
 80100e6:	73fb      	strb	r3, [r7, #15]
    break;
 80100e8:	e002      	b.n	80100f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80100ea:	2301      	movs	r3, #1
 80100ec:	73fb      	strb	r3, [r7, #15]
    break;
 80100ee:	bf00      	nop
  }
  return  speed;
 80100f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3710      	adds	r7, #16
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}

080100fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80100fa:	b580      	push	{r7, lr}
 80100fc:	b084      	sub	sp, #16
 80100fe:	af00      	add	r7, sp, #0
 8010100:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010102:	2300      	movs	r3, #0
 8010104:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010106:	2300      	movs	r3, #0
 8010108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010110:	4618      	mov	r0, r3
 8010112:	f7f4 f98a 	bl	800442a <HAL_HCD_ResetPort>
 8010116:	4603      	mov	r3, r0
 8010118:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801011a:	7bfb      	ldrb	r3, [r7, #15]
 801011c:	4618      	mov	r0, r3
 801011e:	f000 f8ff 	bl	8010320 <USBH_Get_USB_Status>
 8010122:	4603      	mov	r3, r0
 8010124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010126:	7bbb      	ldrb	r3, [r7, #14]
}
 8010128:	4618      	mov	r0, r3
 801012a:	3710      	adds	r7, #16
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	460b      	mov	r3, r1
 801013a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010142:	78fa      	ldrb	r2, [r7, #3]
 8010144:	4611      	mov	r1, r2
 8010146:	4618      	mov	r0, r3
 8010148:	f7f4 f991 	bl	800446e <HAL_HCD_HC_GetXferCount>
 801014c:	4603      	mov	r3, r0
}
 801014e:	4618      	mov	r0, r3
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010156:	b590      	push	{r4, r7, lr}
 8010158:	b089      	sub	sp, #36	; 0x24
 801015a:	af04      	add	r7, sp, #16
 801015c:	6078      	str	r0, [r7, #4]
 801015e:	4608      	mov	r0, r1
 8010160:	4611      	mov	r1, r2
 8010162:	461a      	mov	r2, r3
 8010164:	4603      	mov	r3, r0
 8010166:	70fb      	strb	r3, [r7, #3]
 8010168:	460b      	mov	r3, r1
 801016a:	70bb      	strb	r3, [r7, #2]
 801016c:	4613      	mov	r3, r2
 801016e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010170:	2300      	movs	r3, #0
 8010172:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010174:	2300      	movs	r3, #0
 8010176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801017e:	787c      	ldrb	r4, [r7, #1]
 8010180:	78ba      	ldrb	r2, [r7, #2]
 8010182:	78f9      	ldrb	r1, [r7, #3]
 8010184:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010186:	9302      	str	r3, [sp, #8]
 8010188:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801018c:	9301      	str	r3, [sp, #4]
 801018e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010192:	9300      	str	r3, [sp, #0]
 8010194:	4623      	mov	r3, r4
 8010196:	f7f3 fdf4 	bl	8003d82 <HAL_HCD_HC_Init>
 801019a:	4603      	mov	r3, r0
 801019c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801019e:	7bfb      	ldrb	r3, [r7, #15]
 80101a0:	4618      	mov	r0, r3
 80101a2:	f000 f8bd 	bl	8010320 <USBH_Get_USB_Status>
 80101a6:	4603      	mov	r3, r0
 80101a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3714      	adds	r7, #20
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd90      	pop	{r4, r7, pc}

080101b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	460b      	mov	r3, r1
 80101be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101c0:	2300      	movs	r3, #0
 80101c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80101c4:	2300      	movs	r3, #0
 80101c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80101ce:	78fa      	ldrb	r2, [r7, #3]
 80101d0:	4611      	mov	r1, r2
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7f3 fe64 	bl	8003ea0 <HAL_HCD_HC_Halt>
 80101d8:	4603      	mov	r3, r0
 80101da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80101dc:	7bfb      	ldrb	r3, [r7, #15]
 80101de:	4618      	mov	r0, r3
 80101e0:	f000 f89e 	bl	8010320 <USBH_Get_USB_Status>
 80101e4:	4603      	mov	r3, r0
 80101e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3710      	adds	r7, #16
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}

080101f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80101f2:	b590      	push	{r4, r7, lr}
 80101f4:	b089      	sub	sp, #36	; 0x24
 80101f6:	af04      	add	r7, sp, #16
 80101f8:	6078      	str	r0, [r7, #4]
 80101fa:	4608      	mov	r0, r1
 80101fc:	4611      	mov	r1, r2
 80101fe:	461a      	mov	r2, r3
 8010200:	4603      	mov	r3, r0
 8010202:	70fb      	strb	r3, [r7, #3]
 8010204:	460b      	mov	r3, r1
 8010206:	70bb      	strb	r3, [r7, #2]
 8010208:	4613      	mov	r3, r2
 801020a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801020c:	2300      	movs	r3, #0
 801020e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010210:	2300      	movs	r3, #0
 8010212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801021a:	787c      	ldrb	r4, [r7, #1]
 801021c:	78ba      	ldrb	r2, [r7, #2]
 801021e:	78f9      	ldrb	r1, [r7, #3]
 8010220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010224:	9303      	str	r3, [sp, #12]
 8010226:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010228:	9302      	str	r3, [sp, #8]
 801022a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022c:	9301      	str	r3, [sp, #4]
 801022e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010232:	9300      	str	r3, [sp, #0]
 8010234:	4623      	mov	r3, r4
 8010236:	f7f3 fe57 	bl	8003ee8 <HAL_HCD_HC_SubmitRequest>
 801023a:	4603      	mov	r3, r0
 801023c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801023e:	7bfb      	ldrb	r3, [r7, #15]
 8010240:	4618      	mov	r0, r3
 8010242:	f000 f86d 	bl	8010320 <USBH_Get_USB_Status>
 8010246:	4603      	mov	r3, r0
 8010248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801024a:	7bbb      	ldrb	r3, [r7, #14]
}
 801024c:	4618      	mov	r0, r3
 801024e:	3714      	adds	r7, #20
 8010250:	46bd      	mov	sp, r7
 8010252:	bd90      	pop	{r4, r7, pc}

08010254 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	460b      	mov	r3, r1
 801025e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010266:	78fa      	ldrb	r2, [r7, #3]
 8010268:	4611      	mov	r1, r2
 801026a:	4618      	mov	r0, r3
 801026c:	f7f4 f8eb 	bl	8004446 <HAL_HCD_HC_GetURBState>
 8010270:	4603      	mov	r3, r0
}
 8010272:	4618      	mov	r0, r3
 8010274:	3708      	adds	r7, #8
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b082      	sub	sp, #8
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
 8010282:	460b      	mov	r3, r1
 8010284:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801028c:	2b01      	cmp	r3, #1
 801028e:	d103      	bne.n	8010298 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010290:	78fb      	ldrb	r3, [r7, #3]
 8010292:	4618      	mov	r0, r3
 8010294:	f000 f870 	bl	8010378 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010298:	20c8      	movs	r0, #200	; 0xc8
 801029a:	f7f3 f987 	bl	80035ac <HAL_Delay>
  return USBH_OK;
 801029e:	2300      	movs	r3, #0
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3708      	adds	r7, #8
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	460b      	mov	r3, r1
 80102b2:	70fb      	strb	r3, [r7, #3]
 80102b4:	4613      	mov	r3, r2
 80102b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80102be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80102c0:	78fb      	ldrb	r3, [r7, #3]
 80102c2:	68fa      	ldr	r2, [r7, #12]
 80102c4:	212c      	movs	r1, #44	; 0x2c
 80102c6:	fb01 f303 	mul.w	r3, r1, r3
 80102ca:	4413      	add	r3, r2
 80102cc:	333b      	adds	r3, #59	; 0x3b
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d009      	beq.n	80102e8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80102d4:	78fb      	ldrb	r3, [r7, #3]
 80102d6:	68fa      	ldr	r2, [r7, #12]
 80102d8:	212c      	movs	r1, #44	; 0x2c
 80102da:	fb01 f303 	mul.w	r3, r1, r3
 80102de:	4413      	add	r3, r2
 80102e0:	3354      	adds	r3, #84	; 0x54
 80102e2:	78ba      	ldrb	r2, [r7, #2]
 80102e4:	701a      	strb	r2, [r3, #0]
 80102e6:	e008      	b.n	80102fa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80102e8:	78fb      	ldrb	r3, [r7, #3]
 80102ea:	68fa      	ldr	r2, [r7, #12]
 80102ec:	212c      	movs	r1, #44	; 0x2c
 80102ee:	fb01 f303 	mul.w	r3, r1, r3
 80102f2:	4413      	add	r3, r2
 80102f4:	3355      	adds	r3, #85	; 0x55
 80102f6:	78ba      	ldrb	r2, [r7, #2]
 80102f8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80102fa:	2300      	movs	r3, #0
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3714      	adds	r7, #20
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7f3 f94b 	bl	80035ac <HAL_Delay>
}
 8010316:	bf00      	nop
 8010318:	3708      	adds	r7, #8
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
	...

08010320 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010320:	b480      	push	{r7}
 8010322:	b085      	sub	sp, #20
 8010324:	af00      	add	r7, sp, #0
 8010326:	4603      	mov	r3, r0
 8010328:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801032a:	2300      	movs	r3, #0
 801032c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801032e:	79fb      	ldrb	r3, [r7, #7]
 8010330:	2b03      	cmp	r3, #3
 8010332:	d817      	bhi.n	8010364 <USBH_Get_USB_Status+0x44>
 8010334:	a201      	add	r2, pc, #4	; (adr r2, 801033c <USBH_Get_USB_Status+0x1c>)
 8010336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801033a:	bf00      	nop
 801033c:	0801034d 	.word	0x0801034d
 8010340:	08010353 	.word	0x08010353
 8010344:	08010359 	.word	0x08010359
 8010348:	0801035f 	.word	0x0801035f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801034c:	2300      	movs	r3, #0
 801034e:	73fb      	strb	r3, [r7, #15]
    break;
 8010350:	e00b      	b.n	801036a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010352:	2302      	movs	r3, #2
 8010354:	73fb      	strb	r3, [r7, #15]
    break;
 8010356:	e008      	b.n	801036a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010358:	2301      	movs	r3, #1
 801035a:	73fb      	strb	r3, [r7, #15]
    break;
 801035c:	e005      	b.n	801036a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801035e:	2302      	movs	r3, #2
 8010360:	73fb      	strb	r3, [r7, #15]
    break;
 8010362:	e002      	b.n	801036a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010364:	2302      	movs	r3, #2
 8010366:	73fb      	strb	r3, [r7, #15]
    break;
 8010368:	bf00      	nop
  }
  return usb_status;
 801036a:	7bfb      	ldrb	r3, [r7, #15]
}
 801036c:	4618      	mov	r0, r3
 801036e:	3714      	adds	r7, #20
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr

08010378 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	4603      	mov	r3, r0
 8010380:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010386:	79fb      	ldrb	r3, [r7, #7]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d102      	bne.n	8010392 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801038c:	2300      	movs	r3, #0
 801038e:	73fb      	strb	r3, [r7, #15]
 8010390:	e001      	b.n	8010396 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8010392:	2301      	movs	r3, #1
 8010394:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010396:	7bfb      	ldrb	r3, [r7, #15]
 8010398:	461a      	mov	r2, r3
 801039a:	2101      	movs	r1, #1
 801039c:	4803      	ldr	r0, [pc, #12]	; (80103ac <MX_DriverVbusFS+0x34>)
 801039e:	f7f3 fc51 	bl	8003c44 <HAL_GPIO_WritePin>
}
 80103a2:	bf00      	nop
 80103a4:	3710      	adds	r7, #16
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	40020800 	.word	0x40020800

080103b0 <__errno>:
 80103b0:	4b01      	ldr	r3, [pc, #4]	; (80103b8 <__errno+0x8>)
 80103b2:	6818      	ldr	r0, [r3, #0]
 80103b4:	4770      	bx	lr
 80103b6:	bf00      	nop
 80103b8:	20000030 	.word	0x20000030

080103bc <__libc_init_array>:
 80103bc:	b570      	push	{r4, r5, r6, lr}
 80103be:	4d0d      	ldr	r5, [pc, #52]	; (80103f4 <__libc_init_array+0x38>)
 80103c0:	4c0d      	ldr	r4, [pc, #52]	; (80103f8 <__libc_init_array+0x3c>)
 80103c2:	1b64      	subs	r4, r4, r5
 80103c4:	10a4      	asrs	r4, r4, #2
 80103c6:	2600      	movs	r6, #0
 80103c8:	42a6      	cmp	r6, r4
 80103ca:	d109      	bne.n	80103e0 <__libc_init_array+0x24>
 80103cc:	4d0b      	ldr	r5, [pc, #44]	; (80103fc <__libc_init_array+0x40>)
 80103ce:	4c0c      	ldr	r4, [pc, #48]	; (8010400 <__libc_init_array+0x44>)
 80103d0:	f000 fcd8 	bl	8010d84 <_init>
 80103d4:	1b64      	subs	r4, r4, r5
 80103d6:	10a4      	asrs	r4, r4, #2
 80103d8:	2600      	movs	r6, #0
 80103da:	42a6      	cmp	r6, r4
 80103dc:	d105      	bne.n	80103ea <__libc_init_array+0x2e>
 80103de:	bd70      	pop	{r4, r5, r6, pc}
 80103e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80103e4:	4798      	blx	r3
 80103e6:	3601      	adds	r6, #1
 80103e8:	e7ee      	b.n	80103c8 <__libc_init_array+0xc>
 80103ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80103ee:	4798      	blx	r3
 80103f0:	3601      	adds	r6, #1
 80103f2:	e7f2      	b.n	80103da <__libc_init_array+0x1e>
 80103f4:	08013574 	.word	0x08013574
 80103f8:	08013574 	.word	0x08013574
 80103fc:	08013574 	.word	0x08013574
 8010400:	08013578 	.word	0x08013578

08010404 <__retarget_lock_acquire_recursive>:
 8010404:	4770      	bx	lr

08010406 <__retarget_lock_release_recursive>:
 8010406:	4770      	bx	lr

08010408 <malloc>:
 8010408:	4b02      	ldr	r3, [pc, #8]	; (8010414 <malloc+0xc>)
 801040a:	4601      	mov	r1, r0
 801040c:	6818      	ldr	r0, [r3, #0]
 801040e:	f000 b871 	b.w	80104f4 <_malloc_r>
 8010412:	bf00      	nop
 8010414:	20000030 	.word	0x20000030

08010418 <free>:
 8010418:	4b02      	ldr	r3, [pc, #8]	; (8010424 <free+0xc>)
 801041a:	4601      	mov	r1, r0
 801041c:	6818      	ldr	r0, [r3, #0]
 801041e:	f000 b819 	b.w	8010454 <_free_r>
 8010422:	bf00      	nop
 8010424:	20000030 	.word	0x20000030

08010428 <memcpy>:
 8010428:	440a      	add	r2, r1
 801042a:	4291      	cmp	r1, r2
 801042c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010430:	d100      	bne.n	8010434 <memcpy+0xc>
 8010432:	4770      	bx	lr
 8010434:	b510      	push	{r4, lr}
 8010436:	f811 4b01 	ldrb.w	r4, [r1], #1
 801043a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801043e:	4291      	cmp	r1, r2
 8010440:	d1f9      	bne.n	8010436 <memcpy+0xe>
 8010442:	bd10      	pop	{r4, pc}

08010444 <memset>:
 8010444:	4402      	add	r2, r0
 8010446:	4603      	mov	r3, r0
 8010448:	4293      	cmp	r3, r2
 801044a:	d100      	bne.n	801044e <memset+0xa>
 801044c:	4770      	bx	lr
 801044e:	f803 1b01 	strb.w	r1, [r3], #1
 8010452:	e7f9      	b.n	8010448 <memset+0x4>

08010454 <_free_r>:
 8010454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010456:	2900      	cmp	r1, #0
 8010458:	d048      	beq.n	80104ec <_free_r+0x98>
 801045a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801045e:	9001      	str	r0, [sp, #4]
 8010460:	2b00      	cmp	r3, #0
 8010462:	f1a1 0404 	sub.w	r4, r1, #4
 8010466:	bfb8      	it	lt
 8010468:	18e4      	addlt	r4, r4, r3
 801046a:	f000 f947 	bl	80106fc <__malloc_lock>
 801046e:	4a20      	ldr	r2, [pc, #128]	; (80104f0 <_free_r+0x9c>)
 8010470:	9801      	ldr	r0, [sp, #4]
 8010472:	6813      	ldr	r3, [r2, #0]
 8010474:	4615      	mov	r5, r2
 8010476:	b933      	cbnz	r3, 8010486 <_free_r+0x32>
 8010478:	6063      	str	r3, [r4, #4]
 801047a:	6014      	str	r4, [r2, #0]
 801047c:	b003      	add	sp, #12
 801047e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010482:	f000 b941 	b.w	8010708 <__malloc_unlock>
 8010486:	42a3      	cmp	r3, r4
 8010488:	d90b      	bls.n	80104a2 <_free_r+0x4e>
 801048a:	6821      	ldr	r1, [r4, #0]
 801048c:	1862      	adds	r2, r4, r1
 801048e:	4293      	cmp	r3, r2
 8010490:	bf04      	itt	eq
 8010492:	681a      	ldreq	r2, [r3, #0]
 8010494:	685b      	ldreq	r3, [r3, #4]
 8010496:	6063      	str	r3, [r4, #4]
 8010498:	bf04      	itt	eq
 801049a:	1852      	addeq	r2, r2, r1
 801049c:	6022      	streq	r2, [r4, #0]
 801049e:	602c      	str	r4, [r5, #0]
 80104a0:	e7ec      	b.n	801047c <_free_r+0x28>
 80104a2:	461a      	mov	r2, r3
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	b10b      	cbz	r3, 80104ac <_free_r+0x58>
 80104a8:	42a3      	cmp	r3, r4
 80104aa:	d9fa      	bls.n	80104a2 <_free_r+0x4e>
 80104ac:	6811      	ldr	r1, [r2, #0]
 80104ae:	1855      	adds	r5, r2, r1
 80104b0:	42a5      	cmp	r5, r4
 80104b2:	d10b      	bne.n	80104cc <_free_r+0x78>
 80104b4:	6824      	ldr	r4, [r4, #0]
 80104b6:	4421      	add	r1, r4
 80104b8:	1854      	adds	r4, r2, r1
 80104ba:	42a3      	cmp	r3, r4
 80104bc:	6011      	str	r1, [r2, #0]
 80104be:	d1dd      	bne.n	801047c <_free_r+0x28>
 80104c0:	681c      	ldr	r4, [r3, #0]
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	6053      	str	r3, [r2, #4]
 80104c6:	4421      	add	r1, r4
 80104c8:	6011      	str	r1, [r2, #0]
 80104ca:	e7d7      	b.n	801047c <_free_r+0x28>
 80104cc:	d902      	bls.n	80104d4 <_free_r+0x80>
 80104ce:	230c      	movs	r3, #12
 80104d0:	6003      	str	r3, [r0, #0]
 80104d2:	e7d3      	b.n	801047c <_free_r+0x28>
 80104d4:	6825      	ldr	r5, [r4, #0]
 80104d6:	1961      	adds	r1, r4, r5
 80104d8:	428b      	cmp	r3, r1
 80104da:	bf04      	itt	eq
 80104dc:	6819      	ldreq	r1, [r3, #0]
 80104de:	685b      	ldreq	r3, [r3, #4]
 80104e0:	6063      	str	r3, [r4, #4]
 80104e2:	bf04      	itt	eq
 80104e4:	1949      	addeq	r1, r1, r5
 80104e6:	6021      	streq	r1, [r4, #0]
 80104e8:	6054      	str	r4, [r2, #4]
 80104ea:	e7c7      	b.n	801047c <_free_r+0x28>
 80104ec:	b003      	add	sp, #12
 80104ee:	bd30      	pop	{r4, r5, pc}
 80104f0:	20004aa8 	.word	0x20004aa8

080104f4 <_malloc_r>:
 80104f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104f6:	1ccd      	adds	r5, r1, #3
 80104f8:	f025 0503 	bic.w	r5, r5, #3
 80104fc:	3508      	adds	r5, #8
 80104fe:	2d0c      	cmp	r5, #12
 8010500:	bf38      	it	cc
 8010502:	250c      	movcc	r5, #12
 8010504:	2d00      	cmp	r5, #0
 8010506:	4606      	mov	r6, r0
 8010508:	db01      	blt.n	801050e <_malloc_r+0x1a>
 801050a:	42a9      	cmp	r1, r5
 801050c:	d903      	bls.n	8010516 <_malloc_r+0x22>
 801050e:	230c      	movs	r3, #12
 8010510:	6033      	str	r3, [r6, #0]
 8010512:	2000      	movs	r0, #0
 8010514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010516:	f000 f8f1 	bl	80106fc <__malloc_lock>
 801051a:	4921      	ldr	r1, [pc, #132]	; (80105a0 <_malloc_r+0xac>)
 801051c:	680a      	ldr	r2, [r1, #0]
 801051e:	4614      	mov	r4, r2
 8010520:	b99c      	cbnz	r4, 801054a <_malloc_r+0x56>
 8010522:	4f20      	ldr	r7, [pc, #128]	; (80105a4 <_malloc_r+0xb0>)
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	b923      	cbnz	r3, 8010532 <_malloc_r+0x3e>
 8010528:	4621      	mov	r1, r4
 801052a:	4630      	mov	r0, r6
 801052c:	f000 f8a6 	bl	801067c <_sbrk_r>
 8010530:	6038      	str	r0, [r7, #0]
 8010532:	4629      	mov	r1, r5
 8010534:	4630      	mov	r0, r6
 8010536:	f000 f8a1 	bl	801067c <_sbrk_r>
 801053a:	1c43      	adds	r3, r0, #1
 801053c:	d123      	bne.n	8010586 <_malloc_r+0x92>
 801053e:	230c      	movs	r3, #12
 8010540:	6033      	str	r3, [r6, #0]
 8010542:	4630      	mov	r0, r6
 8010544:	f000 f8e0 	bl	8010708 <__malloc_unlock>
 8010548:	e7e3      	b.n	8010512 <_malloc_r+0x1e>
 801054a:	6823      	ldr	r3, [r4, #0]
 801054c:	1b5b      	subs	r3, r3, r5
 801054e:	d417      	bmi.n	8010580 <_malloc_r+0x8c>
 8010550:	2b0b      	cmp	r3, #11
 8010552:	d903      	bls.n	801055c <_malloc_r+0x68>
 8010554:	6023      	str	r3, [r4, #0]
 8010556:	441c      	add	r4, r3
 8010558:	6025      	str	r5, [r4, #0]
 801055a:	e004      	b.n	8010566 <_malloc_r+0x72>
 801055c:	6863      	ldr	r3, [r4, #4]
 801055e:	42a2      	cmp	r2, r4
 8010560:	bf0c      	ite	eq
 8010562:	600b      	streq	r3, [r1, #0]
 8010564:	6053      	strne	r3, [r2, #4]
 8010566:	4630      	mov	r0, r6
 8010568:	f000 f8ce 	bl	8010708 <__malloc_unlock>
 801056c:	f104 000b 	add.w	r0, r4, #11
 8010570:	1d23      	adds	r3, r4, #4
 8010572:	f020 0007 	bic.w	r0, r0, #7
 8010576:	1ac2      	subs	r2, r0, r3
 8010578:	d0cc      	beq.n	8010514 <_malloc_r+0x20>
 801057a:	1a1b      	subs	r3, r3, r0
 801057c:	50a3      	str	r3, [r4, r2]
 801057e:	e7c9      	b.n	8010514 <_malloc_r+0x20>
 8010580:	4622      	mov	r2, r4
 8010582:	6864      	ldr	r4, [r4, #4]
 8010584:	e7cc      	b.n	8010520 <_malloc_r+0x2c>
 8010586:	1cc4      	adds	r4, r0, #3
 8010588:	f024 0403 	bic.w	r4, r4, #3
 801058c:	42a0      	cmp	r0, r4
 801058e:	d0e3      	beq.n	8010558 <_malloc_r+0x64>
 8010590:	1a21      	subs	r1, r4, r0
 8010592:	4630      	mov	r0, r6
 8010594:	f000 f872 	bl	801067c <_sbrk_r>
 8010598:	3001      	adds	r0, #1
 801059a:	d1dd      	bne.n	8010558 <_malloc_r+0x64>
 801059c:	e7cf      	b.n	801053e <_malloc_r+0x4a>
 801059e:	bf00      	nop
 80105a0:	20004aa8 	.word	0x20004aa8
 80105a4:	20004aac 	.word	0x20004aac

080105a8 <cleanup_glue>:
 80105a8:	b538      	push	{r3, r4, r5, lr}
 80105aa:	460c      	mov	r4, r1
 80105ac:	6809      	ldr	r1, [r1, #0]
 80105ae:	4605      	mov	r5, r0
 80105b0:	b109      	cbz	r1, 80105b6 <cleanup_glue+0xe>
 80105b2:	f7ff fff9 	bl	80105a8 <cleanup_glue>
 80105b6:	4621      	mov	r1, r4
 80105b8:	4628      	mov	r0, r5
 80105ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105be:	f7ff bf49 	b.w	8010454 <_free_r>
	...

080105c4 <_reclaim_reent>:
 80105c4:	4b2c      	ldr	r3, [pc, #176]	; (8010678 <_reclaim_reent+0xb4>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4283      	cmp	r3, r0
 80105ca:	b570      	push	{r4, r5, r6, lr}
 80105cc:	4604      	mov	r4, r0
 80105ce:	d051      	beq.n	8010674 <_reclaim_reent+0xb0>
 80105d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80105d2:	b143      	cbz	r3, 80105e6 <_reclaim_reent+0x22>
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d14a      	bne.n	8010670 <_reclaim_reent+0xac>
 80105da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105dc:	6819      	ldr	r1, [r3, #0]
 80105de:	b111      	cbz	r1, 80105e6 <_reclaim_reent+0x22>
 80105e0:	4620      	mov	r0, r4
 80105e2:	f7ff ff37 	bl	8010454 <_free_r>
 80105e6:	6961      	ldr	r1, [r4, #20]
 80105e8:	b111      	cbz	r1, 80105f0 <_reclaim_reent+0x2c>
 80105ea:	4620      	mov	r0, r4
 80105ec:	f7ff ff32 	bl	8010454 <_free_r>
 80105f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80105f2:	b111      	cbz	r1, 80105fa <_reclaim_reent+0x36>
 80105f4:	4620      	mov	r0, r4
 80105f6:	f7ff ff2d 	bl	8010454 <_free_r>
 80105fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80105fc:	b111      	cbz	r1, 8010604 <_reclaim_reent+0x40>
 80105fe:	4620      	mov	r0, r4
 8010600:	f7ff ff28 	bl	8010454 <_free_r>
 8010604:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010606:	b111      	cbz	r1, 801060e <_reclaim_reent+0x4a>
 8010608:	4620      	mov	r0, r4
 801060a:	f7ff ff23 	bl	8010454 <_free_r>
 801060e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010610:	b111      	cbz	r1, 8010618 <_reclaim_reent+0x54>
 8010612:	4620      	mov	r0, r4
 8010614:	f7ff ff1e 	bl	8010454 <_free_r>
 8010618:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801061a:	b111      	cbz	r1, 8010622 <_reclaim_reent+0x5e>
 801061c:	4620      	mov	r0, r4
 801061e:	f7ff ff19 	bl	8010454 <_free_r>
 8010622:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010624:	b111      	cbz	r1, 801062c <_reclaim_reent+0x68>
 8010626:	4620      	mov	r0, r4
 8010628:	f7ff ff14 	bl	8010454 <_free_r>
 801062c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801062e:	b111      	cbz	r1, 8010636 <_reclaim_reent+0x72>
 8010630:	4620      	mov	r0, r4
 8010632:	f7ff ff0f 	bl	8010454 <_free_r>
 8010636:	69a3      	ldr	r3, [r4, #24]
 8010638:	b1e3      	cbz	r3, 8010674 <_reclaim_reent+0xb0>
 801063a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801063c:	4620      	mov	r0, r4
 801063e:	4798      	blx	r3
 8010640:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010642:	b1b9      	cbz	r1, 8010674 <_reclaim_reent+0xb0>
 8010644:	4620      	mov	r0, r4
 8010646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801064a:	f7ff bfad 	b.w	80105a8 <cleanup_glue>
 801064e:	5949      	ldr	r1, [r1, r5]
 8010650:	b941      	cbnz	r1, 8010664 <_reclaim_reent+0xa0>
 8010652:	3504      	adds	r5, #4
 8010654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010656:	2d80      	cmp	r5, #128	; 0x80
 8010658:	68d9      	ldr	r1, [r3, #12]
 801065a:	d1f8      	bne.n	801064e <_reclaim_reent+0x8a>
 801065c:	4620      	mov	r0, r4
 801065e:	f7ff fef9 	bl	8010454 <_free_r>
 8010662:	e7ba      	b.n	80105da <_reclaim_reent+0x16>
 8010664:	680e      	ldr	r6, [r1, #0]
 8010666:	4620      	mov	r0, r4
 8010668:	f7ff fef4 	bl	8010454 <_free_r>
 801066c:	4631      	mov	r1, r6
 801066e:	e7ef      	b.n	8010650 <_reclaim_reent+0x8c>
 8010670:	2500      	movs	r5, #0
 8010672:	e7ef      	b.n	8010654 <_reclaim_reent+0x90>
 8010674:	bd70      	pop	{r4, r5, r6, pc}
 8010676:	bf00      	nop
 8010678:	20000030 	.word	0x20000030

0801067c <_sbrk_r>:
 801067c:	b538      	push	{r3, r4, r5, lr}
 801067e:	4d06      	ldr	r5, [pc, #24]	; (8010698 <_sbrk_r+0x1c>)
 8010680:	2300      	movs	r3, #0
 8010682:	4604      	mov	r4, r0
 8010684:	4608      	mov	r0, r1
 8010686:	602b      	str	r3, [r5, #0]
 8010688:	f7f2 faf4 	bl	8002c74 <_sbrk>
 801068c:	1c43      	adds	r3, r0, #1
 801068e:	d102      	bne.n	8010696 <_sbrk_r+0x1a>
 8010690:	682b      	ldr	r3, [r5, #0]
 8010692:	b103      	cbz	r3, 8010696 <_sbrk_r+0x1a>
 8010694:	6023      	str	r3, [r4, #0]
 8010696:	bd38      	pop	{r3, r4, r5, pc}
 8010698:	200056b8 	.word	0x200056b8

0801069c <siprintf>:
 801069c:	b40e      	push	{r1, r2, r3}
 801069e:	b500      	push	{lr}
 80106a0:	b09c      	sub	sp, #112	; 0x70
 80106a2:	ab1d      	add	r3, sp, #116	; 0x74
 80106a4:	9002      	str	r0, [sp, #8]
 80106a6:	9006      	str	r0, [sp, #24]
 80106a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80106ac:	4809      	ldr	r0, [pc, #36]	; (80106d4 <siprintf+0x38>)
 80106ae:	9107      	str	r1, [sp, #28]
 80106b0:	9104      	str	r1, [sp, #16]
 80106b2:	4909      	ldr	r1, [pc, #36]	; (80106d8 <siprintf+0x3c>)
 80106b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80106b8:	9105      	str	r1, [sp, #20]
 80106ba:	6800      	ldr	r0, [r0, #0]
 80106bc:	9301      	str	r3, [sp, #4]
 80106be:	a902      	add	r1, sp, #8
 80106c0:	f000 f884 	bl	80107cc <_svfiprintf_r>
 80106c4:	9b02      	ldr	r3, [sp, #8]
 80106c6:	2200      	movs	r2, #0
 80106c8:	701a      	strb	r2, [r3, #0]
 80106ca:	b01c      	add	sp, #112	; 0x70
 80106cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80106d0:	b003      	add	sp, #12
 80106d2:	4770      	bx	lr
 80106d4:	20000030 	.word	0x20000030
 80106d8:	ffff0208 	.word	0xffff0208

080106dc <strcat>:
 80106dc:	b510      	push	{r4, lr}
 80106de:	4602      	mov	r2, r0
 80106e0:	7814      	ldrb	r4, [r2, #0]
 80106e2:	4613      	mov	r3, r2
 80106e4:	3201      	adds	r2, #1
 80106e6:	2c00      	cmp	r4, #0
 80106e8:	d1fa      	bne.n	80106e0 <strcat+0x4>
 80106ea:	3b01      	subs	r3, #1
 80106ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80106f4:	2a00      	cmp	r2, #0
 80106f6:	d1f9      	bne.n	80106ec <strcat+0x10>
 80106f8:	bd10      	pop	{r4, pc}
	...

080106fc <__malloc_lock>:
 80106fc:	4801      	ldr	r0, [pc, #4]	; (8010704 <__malloc_lock+0x8>)
 80106fe:	f7ff be81 	b.w	8010404 <__retarget_lock_acquire_recursive>
 8010702:	bf00      	nop
 8010704:	200056b0 	.word	0x200056b0

08010708 <__malloc_unlock>:
 8010708:	4801      	ldr	r0, [pc, #4]	; (8010710 <__malloc_unlock+0x8>)
 801070a:	f7ff be7c 	b.w	8010406 <__retarget_lock_release_recursive>
 801070e:	bf00      	nop
 8010710:	200056b0 	.word	0x200056b0

08010714 <__ssputs_r>:
 8010714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010718:	688e      	ldr	r6, [r1, #8]
 801071a:	429e      	cmp	r6, r3
 801071c:	4682      	mov	sl, r0
 801071e:	460c      	mov	r4, r1
 8010720:	4690      	mov	r8, r2
 8010722:	461f      	mov	r7, r3
 8010724:	d838      	bhi.n	8010798 <__ssputs_r+0x84>
 8010726:	898a      	ldrh	r2, [r1, #12]
 8010728:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801072c:	d032      	beq.n	8010794 <__ssputs_r+0x80>
 801072e:	6825      	ldr	r5, [r4, #0]
 8010730:	6909      	ldr	r1, [r1, #16]
 8010732:	eba5 0901 	sub.w	r9, r5, r1
 8010736:	6965      	ldr	r5, [r4, #20]
 8010738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801073c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010740:	3301      	adds	r3, #1
 8010742:	444b      	add	r3, r9
 8010744:	106d      	asrs	r5, r5, #1
 8010746:	429d      	cmp	r5, r3
 8010748:	bf38      	it	cc
 801074a:	461d      	movcc	r5, r3
 801074c:	0553      	lsls	r3, r2, #21
 801074e:	d531      	bpl.n	80107b4 <__ssputs_r+0xa0>
 8010750:	4629      	mov	r1, r5
 8010752:	f7ff fecf 	bl	80104f4 <_malloc_r>
 8010756:	4606      	mov	r6, r0
 8010758:	b950      	cbnz	r0, 8010770 <__ssputs_r+0x5c>
 801075a:	230c      	movs	r3, #12
 801075c:	f8ca 3000 	str.w	r3, [sl]
 8010760:	89a3      	ldrh	r3, [r4, #12]
 8010762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010766:	81a3      	strh	r3, [r4, #12]
 8010768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801076c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010770:	6921      	ldr	r1, [r4, #16]
 8010772:	464a      	mov	r2, r9
 8010774:	f7ff fe58 	bl	8010428 <memcpy>
 8010778:	89a3      	ldrh	r3, [r4, #12]
 801077a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801077e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010782:	81a3      	strh	r3, [r4, #12]
 8010784:	6126      	str	r6, [r4, #16]
 8010786:	6165      	str	r5, [r4, #20]
 8010788:	444e      	add	r6, r9
 801078a:	eba5 0509 	sub.w	r5, r5, r9
 801078e:	6026      	str	r6, [r4, #0]
 8010790:	60a5      	str	r5, [r4, #8]
 8010792:	463e      	mov	r6, r7
 8010794:	42be      	cmp	r6, r7
 8010796:	d900      	bls.n	801079a <__ssputs_r+0x86>
 8010798:	463e      	mov	r6, r7
 801079a:	4632      	mov	r2, r6
 801079c:	6820      	ldr	r0, [r4, #0]
 801079e:	4641      	mov	r1, r8
 80107a0:	f000 faa8 	bl	8010cf4 <memmove>
 80107a4:	68a3      	ldr	r3, [r4, #8]
 80107a6:	6822      	ldr	r2, [r4, #0]
 80107a8:	1b9b      	subs	r3, r3, r6
 80107aa:	4432      	add	r2, r6
 80107ac:	60a3      	str	r3, [r4, #8]
 80107ae:	6022      	str	r2, [r4, #0]
 80107b0:	2000      	movs	r0, #0
 80107b2:	e7db      	b.n	801076c <__ssputs_r+0x58>
 80107b4:	462a      	mov	r2, r5
 80107b6:	f000 fab7 	bl	8010d28 <_realloc_r>
 80107ba:	4606      	mov	r6, r0
 80107bc:	2800      	cmp	r0, #0
 80107be:	d1e1      	bne.n	8010784 <__ssputs_r+0x70>
 80107c0:	6921      	ldr	r1, [r4, #16]
 80107c2:	4650      	mov	r0, sl
 80107c4:	f7ff fe46 	bl	8010454 <_free_r>
 80107c8:	e7c7      	b.n	801075a <__ssputs_r+0x46>
	...

080107cc <_svfiprintf_r>:
 80107cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d0:	4698      	mov	r8, r3
 80107d2:	898b      	ldrh	r3, [r1, #12]
 80107d4:	061b      	lsls	r3, r3, #24
 80107d6:	b09d      	sub	sp, #116	; 0x74
 80107d8:	4607      	mov	r7, r0
 80107da:	460d      	mov	r5, r1
 80107dc:	4614      	mov	r4, r2
 80107de:	d50e      	bpl.n	80107fe <_svfiprintf_r+0x32>
 80107e0:	690b      	ldr	r3, [r1, #16]
 80107e2:	b963      	cbnz	r3, 80107fe <_svfiprintf_r+0x32>
 80107e4:	2140      	movs	r1, #64	; 0x40
 80107e6:	f7ff fe85 	bl	80104f4 <_malloc_r>
 80107ea:	6028      	str	r0, [r5, #0]
 80107ec:	6128      	str	r0, [r5, #16]
 80107ee:	b920      	cbnz	r0, 80107fa <_svfiprintf_r+0x2e>
 80107f0:	230c      	movs	r3, #12
 80107f2:	603b      	str	r3, [r7, #0]
 80107f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107f8:	e0d1      	b.n	801099e <_svfiprintf_r+0x1d2>
 80107fa:	2340      	movs	r3, #64	; 0x40
 80107fc:	616b      	str	r3, [r5, #20]
 80107fe:	2300      	movs	r3, #0
 8010800:	9309      	str	r3, [sp, #36]	; 0x24
 8010802:	2320      	movs	r3, #32
 8010804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010808:	f8cd 800c 	str.w	r8, [sp, #12]
 801080c:	2330      	movs	r3, #48	; 0x30
 801080e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80109b8 <_svfiprintf_r+0x1ec>
 8010812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010816:	f04f 0901 	mov.w	r9, #1
 801081a:	4623      	mov	r3, r4
 801081c:	469a      	mov	sl, r3
 801081e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010822:	b10a      	cbz	r2, 8010828 <_svfiprintf_r+0x5c>
 8010824:	2a25      	cmp	r2, #37	; 0x25
 8010826:	d1f9      	bne.n	801081c <_svfiprintf_r+0x50>
 8010828:	ebba 0b04 	subs.w	fp, sl, r4
 801082c:	d00b      	beq.n	8010846 <_svfiprintf_r+0x7a>
 801082e:	465b      	mov	r3, fp
 8010830:	4622      	mov	r2, r4
 8010832:	4629      	mov	r1, r5
 8010834:	4638      	mov	r0, r7
 8010836:	f7ff ff6d 	bl	8010714 <__ssputs_r>
 801083a:	3001      	adds	r0, #1
 801083c:	f000 80aa 	beq.w	8010994 <_svfiprintf_r+0x1c8>
 8010840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010842:	445a      	add	r2, fp
 8010844:	9209      	str	r2, [sp, #36]	; 0x24
 8010846:	f89a 3000 	ldrb.w	r3, [sl]
 801084a:	2b00      	cmp	r3, #0
 801084c:	f000 80a2 	beq.w	8010994 <_svfiprintf_r+0x1c8>
 8010850:	2300      	movs	r3, #0
 8010852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801085a:	f10a 0a01 	add.w	sl, sl, #1
 801085e:	9304      	str	r3, [sp, #16]
 8010860:	9307      	str	r3, [sp, #28]
 8010862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010866:	931a      	str	r3, [sp, #104]	; 0x68
 8010868:	4654      	mov	r4, sl
 801086a:	2205      	movs	r2, #5
 801086c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010870:	4851      	ldr	r0, [pc, #324]	; (80109b8 <_svfiprintf_r+0x1ec>)
 8010872:	f7ef fcb5 	bl	80001e0 <memchr>
 8010876:	9a04      	ldr	r2, [sp, #16]
 8010878:	b9d8      	cbnz	r0, 80108b2 <_svfiprintf_r+0xe6>
 801087a:	06d0      	lsls	r0, r2, #27
 801087c:	bf44      	itt	mi
 801087e:	2320      	movmi	r3, #32
 8010880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010884:	0711      	lsls	r1, r2, #28
 8010886:	bf44      	itt	mi
 8010888:	232b      	movmi	r3, #43	; 0x2b
 801088a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801088e:	f89a 3000 	ldrb.w	r3, [sl]
 8010892:	2b2a      	cmp	r3, #42	; 0x2a
 8010894:	d015      	beq.n	80108c2 <_svfiprintf_r+0xf6>
 8010896:	9a07      	ldr	r2, [sp, #28]
 8010898:	4654      	mov	r4, sl
 801089a:	2000      	movs	r0, #0
 801089c:	f04f 0c0a 	mov.w	ip, #10
 80108a0:	4621      	mov	r1, r4
 80108a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108a6:	3b30      	subs	r3, #48	; 0x30
 80108a8:	2b09      	cmp	r3, #9
 80108aa:	d94e      	bls.n	801094a <_svfiprintf_r+0x17e>
 80108ac:	b1b0      	cbz	r0, 80108dc <_svfiprintf_r+0x110>
 80108ae:	9207      	str	r2, [sp, #28]
 80108b0:	e014      	b.n	80108dc <_svfiprintf_r+0x110>
 80108b2:	eba0 0308 	sub.w	r3, r0, r8
 80108b6:	fa09 f303 	lsl.w	r3, r9, r3
 80108ba:	4313      	orrs	r3, r2
 80108bc:	9304      	str	r3, [sp, #16]
 80108be:	46a2      	mov	sl, r4
 80108c0:	e7d2      	b.n	8010868 <_svfiprintf_r+0x9c>
 80108c2:	9b03      	ldr	r3, [sp, #12]
 80108c4:	1d19      	adds	r1, r3, #4
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	9103      	str	r1, [sp, #12]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	bfbb      	ittet	lt
 80108ce:	425b      	neglt	r3, r3
 80108d0:	f042 0202 	orrlt.w	r2, r2, #2
 80108d4:	9307      	strge	r3, [sp, #28]
 80108d6:	9307      	strlt	r3, [sp, #28]
 80108d8:	bfb8      	it	lt
 80108da:	9204      	strlt	r2, [sp, #16]
 80108dc:	7823      	ldrb	r3, [r4, #0]
 80108de:	2b2e      	cmp	r3, #46	; 0x2e
 80108e0:	d10c      	bne.n	80108fc <_svfiprintf_r+0x130>
 80108e2:	7863      	ldrb	r3, [r4, #1]
 80108e4:	2b2a      	cmp	r3, #42	; 0x2a
 80108e6:	d135      	bne.n	8010954 <_svfiprintf_r+0x188>
 80108e8:	9b03      	ldr	r3, [sp, #12]
 80108ea:	1d1a      	adds	r2, r3, #4
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	9203      	str	r2, [sp, #12]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	bfb8      	it	lt
 80108f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80108f8:	3402      	adds	r4, #2
 80108fa:	9305      	str	r3, [sp, #20]
 80108fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80109c8 <_svfiprintf_r+0x1fc>
 8010900:	7821      	ldrb	r1, [r4, #0]
 8010902:	2203      	movs	r2, #3
 8010904:	4650      	mov	r0, sl
 8010906:	f7ef fc6b 	bl	80001e0 <memchr>
 801090a:	b140      	cbz	r0, 801091e <_svfiprintf_r+0x152>
 801090c:	2340      	movs	r3, #64	; 0x40
 801090e:	eba0 000a 	sub.w	r0, r0, sl
 8010912:	fa03 f000 	lsl.w	r0, r3, r0
 8010916:	9b04      	ldr	r3, [sp, #16]
 8010918:	4303      	orrs	r3, r0
 801091a:	3401      	adds	r4, #1
 801091c:	9304      	str	r3, [sp, #16]
 801091e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010922:	4826      	ldr	r0, [pc, #152]	; (80109bc <_svfiprintf_r+0x1f0>)
 8010924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010928:	2206      	movs	r2, #6
 801092a:	f7ef fc59 	bl	80001e0 <memchr>
 801092e:	2800      	cmp	r0, #0
 8010930:	d038      	beq.n	80109a4 <_svfiprintf_r+0x1d8>
 8010932:	4b23      	ldr	r3, [pc, #140]	; (80109c0 <_svfiprintf_r+0x1f4>)
 8010934:	bb1b      	cbnz	r3, 801097e <_svfiprintf_r+0x1b2>
 8010936:	9b03      	ldr	r3, [sp, #12]
 8010938:	3307      	adds	r3, #7
 801093a:	f023 0307 	bic.w	r3, r3, #7
 801093e:	3308      	adds	r3, #8
 8010940:	9303      	str	r3, [sp, #12]
 8010942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010944:	4433      	add	r3, r6
 8010946:	9309      	str	r3, [sp, #36]	; 0x24
 8010948:	e767      	b.n	801081a <_svfiprintf_r+0x4e>
 801094a:	fb0c 3202 	mla	r2, ip, r2, r3
 801094e:	460c      	mov	r4, r1
 8010950:	2001      	movs	r0, #1
 8010952:	e7a5      	b.n	80108a0 <_svfiprintf_r+0xd4>
 8010954:	2300      	movs	r3, #0
 8010956:	3401      	adds	r4, #1
 8010958:	9305      	str	r3, [sp, #20]
 801095a:	4619      	mov	r1, r3
 801095c:	f04f 0c0a 	mov.w	ip, #10
 8010960:	4620      	mov	r0, r4
 8010962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010966:	3a30      	subs	r2, #48	; 0x30
 8010968:	2a09      	cmp	r2, #9
 801096a:	d903      	bls.n	8010974 <_svfiprintf_r+0x1a8>
 801096c:	2b00      	cmp	r3, #0
 801096e:	d0c5      	beq.n	80108fc <_svfiprintf_r+0x130>
 8010970:	9105      	str	r1, [sp, #20]
 8010972:	e7c3      	b.n	80108fc <_svfiprintf_r+0x130>
 8010974:	fb0c 2101 	mla	r1, ip, r1, r2
 8010978:	4604      	mov	r4, r0
 801097a:	2301      	movs	r3, #1
 801097c:	e7f0      	b.n	8010960 <_svfiprintf_r+0x194>
 801097e:	ab03      	add	r3, sp, #12
 8010980:	9300      	str	r3, [sp, #0]
 8010982:	462a      	mov	r2, r5
 8010984:	4b0f      	ldr	r3, [pc, #60]	; (80109c4 <_svfiprintf_r+0x1f8>)
 8010986:	a904      	add	r1, sp, #16
 8010988:	4638      	mov	r0, r7
 801098a:	f3af 8000 	nop.w
 801098e:	1c42      	adds	r2, r0, #1
 8010990:	4606      	mov	r6, r0
 8010992:	d1d6      	bne.n	8010942 <_svfiprintf_r+0x176>
 8010994:	89ab      	ldrh	r3, [r5, #12]
 8010996:	065b      	lsls	r3, r3, #25
 8010998:	f53f af2c 	bmi.w	80107f4 <_svfiprintf_r+0x28>
 801099c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801099e:	b01d      	add	sp, #116	; 0x74
 80109a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a4:	ab03      	add	r3, sp, #12
 80109a6:	9300      	str	r3, [sp, #0]
 80109a8:	462a      	mov	r2, r5
 80109aa:	4b06      	ldr	r3, [pc, #24]	; (80109c4 <_svfiprintf_r+0x1f8>)
 80109ac:	a904      	add	r1, sp, #16
 80109ae:	4638      	mov	r0, r7
 80109b0:	f000 f87a 	bl	8010aa8 <_printf_i>
 80109b4:	e7eb      	b.n	801098e <_svfiprintf_r+0x1c2>
 80109b6:	bf00      	nop
 80109b8:	08013538 	.word	0x08013538
 80109bc:	08013542 	.word	0x08013542
 80109c0:	00000000 	.word	0x00000000
 80109c4:	08010715 	.word	0x08010715
 80109c8:	0801353e 	.word	0x0801353e

080109cc <_printf_common>:
 80109cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109d0:	4616      	mov	r6, r2
 80109d2:	4699      	mov	r9, r3
 80109d4:	688a      	ldr	r2, [r1, #8]
 80109d6:	690b      	ldr	r3, [r1, #16]
 80109d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80109dc:	4293      	cmp	r3, r2
 80109de:	bfb8      	it	lt
 80109e0:	4613      	movlt	r3, r2
 80109e2:	6033      	str	r3, [r6, #0]
 80109e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80109e8:	4607      	mov	r7, r0
 80109ea:	460c      	mov	r4, r1
 80109ec:	b10a      	cbz	r2, 80109f2 <_printf_common+0x26>
 80109ee:	3301      	adds	r3, #1
 80109f0:	6033      	str	r3, [r6, #0]
 80109f2:	6823      	ldr	r3, [r4, #0]
 80109f4:	0699      	lsls	r1, r3, #26
 80109f6:	bf42      	ittt	mi
 80109f8:	6833      	ldrmi	r3, [r6, #0]
 80109fa:	3302      	addmi	r3, #2
 80109fc:	6033      	strmi	r3, [r6, #0]
 80109fe:	6825      	ldr	r5, [r4, #0]
 8010a00:	f015 0506 	ands.w	r5, r5, #6
 8010a04:	d106      	bne.n	8010a14 <_printf_common+0x48>
 8010a06:	f104 0a19 	add.w	sl, r4, #25
 8010a0a:	68e3      	ldr	r3, [r4, #12]
 8010a0c:	6832      	ldr	r2, [r6, #0]
 8010a0e:	1a9b      	subs	r3, r3, r2
 8010a10:	42ab      	cmp	r3, r5
 8010a12:	dc26      	bgt.n	8010a62 <_printf_common+0x96>
 8010a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010a18:	1e13      	subs	r3, r2, #0
 8010a1a:	6822      	ldr	r2, [r4, #0]
 8010a1c:	bf18      	it	ne
 8010a1e:	2301      	movne	r3, #1
 8010a20:	0692      	lsls	r2, r2, #26
 8010a22:	d42b      	bmi.n	8010a7c <_printf_common+0xb0>
 8010a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a28:	4649      	mov	r1, r9
 8010a2a:	4638      	mov	r0, r7
 8010a2c:	47c0      	blx	r8
 8010a2e:	3001      	adds	r0, #1
 8010a30:	d01e      	beq.n	8010a70 <_printf_common+0xa4>
 8010a32:	6823      	ldr	r3, [r4, #0]
 8010a34:	68e5      	ldr	r5, [r4, #12]
 8010a36:	6832      	ldr	r2, [r6, #0]
 8010a38:	f003 0306 	and.w	r3, r3, #6
 8010a3c:	2b04      	cmp	r3, #4
 8010a3e:	bf08      	it	eq
 8010a40:	1aad      	subeq	r5, r5, r2
 8010a42:	68a3      	ldr	r3, [r4, #8]
 8010a44:	6922      	ldr	r2, [r4, #16]
 8010a46:	bf0c      	ite	eq
 8010a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a4c:	2500      	movne	r5, #0
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	bfc4      	itt	gt
 8010a52:	1a9b      	subgt	r3, r3, r2
 8010a54:	18ed      	addgt	r5, r5, r3
 8010a56:	2600      	movs	r6, #0
 8010a58:	341a      	adds	r4, #26
 8010a5a:	42b5      	cmp	r5, r6
 8010a5c:	d11a      	bne.n	8010a94 <_printf_common+0xc8>
 8010a5e:	2000      	movs	r0, #0
 8010a60:	e008      	b.n	8010a74 <_printf_common+0xa8>
 8010a62:	2301      	movs	r3, #1
 8010a64:	4652      	mov	r2, sl
 8010a66:	4649      	mov	r1, r9
 8010a68:	4638      	mov	r0, r7
 8010a6a:	47c0      	blx	r8
 8010a6c:	3001      	adds	r0, #1
 8010a6e:	d103      	bne.n	8010a78 <_printf_common+0xac>
 8010a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a78:	3501      	adds	r5, #1
 8010a7a:	e7c6      	b.n	8010a0a <_printf_common+0x3e>
 8010a7c:	18e1      	adds	r1, r4, r3
 8010a7e:	1c5a      	adds	r2, r3, #1
 8010a80:	2030      	movs	r0, #48	; 0x30
 8010a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a86:	4422      	add	r2, r4
 8010a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a90:	3302      	adds	r3, #2
 8010a92:	e7c7      	b.n	8010a24 <_printf_common+0x58>
 8010a94:	2301      	movs	r3, #1
 8010a96:	4622      	mov	r2, r4
 8010a98:	4649      	mov	r1, r9
 8010a9a:	4638      	mov	r0, r7
 8010a9c:	47c0      	blx	r8
 8010a9e:	3001      	adds	r0, #1
 8010aa0:	d0e6      	beq.n	8010a70 <_printf_common+0xa4>
 8010aa2:	3601      	adds	r6, #1
 8010aa4:	e7d9      	b.n	8010a5a <_printf_common+0x8e>
	...

08010aa8 <_printf_i>:
 8010aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010aac:	460c      	mov	r4, r1
 8010aae:	4691      	mov	r9, r2
 8010ab0:	7e27      	ldrb	r7, [r4, #24]
 8010ab2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010ab4:	2f78      	cmp	r7, #120	; 0x78
 8010ab6:	4680      	mov	r8, r0
 8010ab8:	469a      	mov	sl, r3
 8010aba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010abe:	d807      	bhi.n	8010ad0 <_printf_i+0x28>
 8010ac0:	2f62      	cmp	r7, #98	; 0x62
 8010ac2:	d80a      	bhi.n	8010ada <_printf_i+0x32>
 8010ac4:	2f00      	cmp	r7, #0
 8010ac6:	f000 80d8 	beq.w	8010c7a <_printf_i+0x1d2>
 8010aca:	2f58      	cmp	r7, #88	; 0x58
 8010acc:	f000 80a3 	beq.w	8010c16 <_printf_i+0x16e>
 8010ad0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ad8:	e03a      	b.n	8010b50 <_printf_i+0xa8>
 8010ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010ade:	2b15      	cmp	r3, #21
 8010ae0:	d8f6      	bhi.n	8010ad0 <_printf_i+0x28>
 8010ae2:	a001      	add	r0, pc, #4	; (adr r0, 8010ae8 <_printf_i+0x40>)
 8010ae4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010ae8:	08010b41 	.word	0x08010b41
 8010aec:	08010b55 	.word	0x08010b55
 8010af0:	08010ad1 	.word	0x08010ad1
 8010af4:	08010ad1 	.word	0x08010ad1
 8010af8:	08010ad1 	.word	0x08010ad1
 8010afc:	08010ad1 	.word	0x08010ad1
 8010b00:	08010b55 	.word	0x08010b55
 8010b04:	08010ad1 	.word	0x08010ad1
 8010b08:	08010ad1 	.word	0x08010ad1
 8010b0c:	08010ad1 	.word	0x08010ad1
 8010b10:	08010ad1 	.word	0x08010ad1
 8010b14:	08010c61 	.word	0x08010c61
 8010b18:	08010b85 	.word	0x08010b85
 8010b1c:	08010c43 	.word	0x08010c43
 8010b20:	08010ad1 	.word	0x08010ad1
 8010b24:	08010ad1 	.word	0x08010ad1
 8010b28:	08010c83 	.word	0x08010c83
 8010b2c:	08010ad1 	.word	0x08010ad1
 8010b30:	08010b85 	.word	0x08010b85
 8010b34:	08010ad1 	.word	0x08010ad1
 8010b38:	08010ad1 	.word	0x08010ad1
 8010b3c:	08010c4b 	.word	0x08010c4b
 8010b40:	680b      	ldr	r3, [r1, #0]
 8010b42:	1d1a      	adds	r2, r3, #4
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	600a      	str	r2, [r1, #0]
 8010b48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b50:	2301      	movs	r3, #1
 8010b52:	e0a3      	b.n	8010c9c <_printf_i+0x1f4>
 8010b54:	6825      	ldr	r5, [r4, #0]
 8010b56:	6808      	ldr	r0, [r1, #0]
 8010b58:	062e      	lsls	r6, r5, #24
 8010b5a:	f100 0304 	add.w	r3, r0, #4
 8010b5e:	d50a      	bpl.n	8010b76 <_printf_i+0xce>
 8010b60:	6805      	ldr	r5, [r0, #0]
 8010b62:	600b      	str	r3, [r1, #0]
 8010b64:	2d00      	cmp	r5, #0
 8010b66:	da03      	bge.n	8010b70 <_printf_i+0xc8>
 8010b68:	232d      	movs	r3, #45	; 0x2d
 8010b6a:	426d      	negs	r5, r5
 8010b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b70:	485e      	ldr	r0, [pc, #376]	; (8010cec <_printf_i+0x244>)
 8010b72:	230a      	movs	r3, #10
 8010b74:	e019      	b.n	8010baa <_printf_i+0x102>
 8010b76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010b7a:	6805      	ldr	r5, [r0, #0]
 8010b7c:	600b      	str	r3, [r1, #0]
 8010b7e:	bf18      	it	ne
 8010b80:	b22d      	sxthne	r5, r5
 8010b82:	e7ef      	b.n	8010b64 <_printf_i+0xbc>
 8010b84:	680b      	ldr	r3, [r1, #0]
 8010b86:	6825      	ldr	r5, [r4, #0]
 8010b88:	1d18      	adds	r0, r3, #4
 8010b8a:	6008      	str	r0, [r1, #0]
 8010b8c:	0628      	lsls	r0, r5, #24
 8010b8e:	d501      	bpl.n	8010b94 <_printf_i+0xec>
 8010b90:	681d      	ldr	r5, [r3, #0]
 8010b92:	e002      	b.n	8010b9a <_printf_i+0xf2>
 8010b94:	0669      	lsls	r1, r5, #25
 8010b96:	d5fb      	bpl.n	8010b90 <_printf_i+0xe8>
 8010b98:	881d      	ldrh	r5, [r3, #0]
 8010b9a:	4854      	ldr	r0, [pc, #336]	; (8010cec <_printf_i+0x244>)
 8010b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8010b9e:	bf0c      	ite	eq
 8010ba0:	2308      	moveq	r3, #8
 8010ba2:	230a      	movne	r3, #10
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010baa:	6866      	ldr	r6, [r4, #4]
 8010bac:	60a6      	str	r6, [r4, #8]
 8010bae:	2e00      	cmp	r6, #0
 8010bb0:	bfa2      	ittt	ge
 8010bb2:	6821      	ldrge	r1, [r4, #0]
 8010bb4:	f021 0104 	bicge.w	r1, r1, #4
 8010bb8:	6021      	strge	r1, [r4, #0]
 8010bba:	b90d      	cbnz	r5, 8010bc0 <_printf_i+0x118>
 8010bbc:	2e00      	cmp	r6, #0
 8010bbe:	d04d      	beq.n	8010c5c <_printf_i+0x1b4>
 8010bc0:	4616      	mov	r6, r2
 8010bc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8010bc6:	fb03 5711 	mls	r7, r3, r1, r5
 8010bca:	5dc7      	ldrb	r7, [r0, r7]
 8010bcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010bd0:	462f      	mov	r7, r5
 8010bd2:	42bb      	cmp	r3, r7
 8010bd4:	460d      	mov	r5, r1
 8010bd6:	d9f4      	bls.n	8010bc2 <_printf_i+0x11a>
 8010bd8:	2b08      	cmp	r3, #8
 8010bda:	d10b      	bne.n	8010bf4 <_printf_i+0x14c>
 8010bdc:	6823      	ldr	r3, [r4, #0]
 8010bde:	07df      	lsls	r7, r3, #31
 8010be0:	d508      	bpl.n	8010bf4 <_printf_i+0x14c>
 8010be2:	6923      	ldr	r3, [r4, #16]
 8010be4:	6861      	ldr	r1, [r4, #4]
 8010be6:	4299      	cmp	r1, r3
 8010be8:	bfde      	ittt	le
 8010bea:	2330      	movle	r3, #48	; 0x30
 8010bec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010bf0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010bf4:	1b92      	subs	r2, r2, r6
 8010bf6:	6122      	str	r2, [r4, #16]
 8010bf8:	f8cd a000 	str.w	sl, [sp]
 8010bfc:	464b      	mov	r3, r9
 8010bfe:	aa03      	add	r2, sp, #12
 8010c00:	4621      	mov	r1, r4
 8010c02:	4640      	mov	r0, r8
 8010c04:	f7ff fee2 	bl	80109cc <_printf_common>
 8010c08:	3001      	adds	r0, #1
 8010c0a:	d14c      	bne.n	8010ca6 <_printf_i+0x1fe>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c10:	b004      	add	sp, #16
 8010c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c16:	4835      	ldr	r0, [pc, #212]	; (8010cec <_printf_i+0x244>)
 8010c18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010c1c:	6823      	ldr	r3, [r4, #0]
 8010c1e:	680e      	ldr	r6, [r1, #0]
 8010c20:	061f      	lsls	r7, r3, #24
 8010c22:	f856 5b04 	ldr.w	r5, [r6], #4
 8010c26:	600e      	str	r6, [r1, #0]
 8010c28:	d514      	bpl.n	8010c54 <_printf_i+0x1ac>
 8010c2a:	07d9      	lsls	r1, r3, #31
 8010c2c:	bf44      	itt	mi
 8010c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8010c32:	6023      	strmi	r3, [r4, #0]
 8010c34:	b91d      	cbnz	r5, 8010c3e <_printf_i+0x196>
 8010c36:	6823      	ldr	r3, [r4, #0]
 8010c38:	f023 0320 	bic.w	r3, r3, #32
 8010c3c:	6023      	str	r3, [r4, #0]
 8010c3e:	2310      	movs	r3, #16
 8010c40:	e7b0      	b.n	8010ba4 <_printf_i+0xfc>
 8010c42:	6823      	ldr	r3, [r4, #0]
 8010c44:	f043 0320 	orr.w	r3, r3, #32
 8010c48:	6023      	str	r3, [r4, #0]
 8010c4a:	2378      	movs	r3, #120	; 0x78
 8010c4c:	4828      	ldr	r0, [pc, #160]	; (8010cf0 <_printf_i+0x248>)
 8010c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010c52:	e7e3      	b.n	8010c1c <_printf_i+0x174>
 8010c54:	065e      	lsls	r6, r3, #25
 8010c56:	bf48      	it	mi
 8010c58:	b2ad      	uxthmi	r5, r5
 8010c5a:	e7e6      	b.n	8010c2a <_printf_i+0x182>
 8010c5c:	4616      	mov	r6, r2
 8010c5e:	e7bb      	b.n	8010bd8 <_printf_i+0x130>
 8010c60:	680b      	ldr	r3, [r1, #0]
 8010c62:	6826      	ldr	r6, [r4, #0]
 8010c64:	6960      	ldr	r0, [r4, #20]
 8010c66:	1d1d      	adds	r5, r3, #4
 8010c68:	600d      	str	r5, [r1, #0]
 8010c6a:	0635      	lsls	r5, r6, #24
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	d501      	bpl.n	8010c74 <_printf_i+0x1cc>
 8010c70:	6018      	str	r0, [r3, #0]
 8010c72:	e002      	b.n	8010c7a <_printf_i+0x1d2>
 8010c74:	0671      	lsls	r1, r6, #25
 8010c76:	d5fb      	bpl.n	8010c70 <_printf_i+0x1c8>
 8010c78:	8018      	strh	r0, [r3, #0]
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	6123      	str	r3, [r4, #16]
 8010c7e:	4616      	mov	r6, r2
 8010c80:	e7ba      	b.n	8010bf8 <_printf_i+0x150>
 8010c82:	680b      	ldr	r3, [r1, #0]
 8010c84:	1d1a      	adds	r2, r3, #4
 8010c86:	600a      	str	r2, [r1, #0]
 8010c88:	681e      	ldr	r6, [r3, #0]
 8010c8a:	6862      	ldr	r2, [r4, #4]
 8010c8c:	2100      	movs	r1, #0
 8010c8e:	4630      	mov	r0, r6
 8010c90:	f7ef faa6 	bl	80001e0 <memchr>
 8010c94:	b108      	cbz	r0, 8010c9a <_printf_i+0x1f2>
 8010c96:	1b80      	subs	r0, r0, r6
 8010c98:	6060      	str	r0, [r4, #4]
 8010c9a:	6863      	ldr	r3, [r4, #4]
 8010c9c:	6123      	str	r3, [r4, #16]
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ca4:	e7a8      	b.n	8010bf8 <_printf_i+0x150>
 8010ca6:	6923      	ldr	r3, [r4, #16]
 8010ca8:	4632      	mov	r2, r6
 8010caa:	4649      	mov	r1, r9
 8010cac:	4640      	mov	r0, r8
 8010cae:	47d0      	blx	sl
 8010cb0:	3001      	adds	r0, #1
 8010cb2:	d0ab      	beq.n	8010c0c <_printf_i+0x164>
 8010cb4:	6823      	ldr	r3, [r4, #0]
 8010cb6:	079b      	lsls	r3, r3, #30
 8010cb8:	d413      	bmi.n	8010ce2 <_printf_i+0x23a>
 8010cba:	68e0      	ldr	r0, [r4, #12]
 8010cbc:	9b03      	ldr	r3, [sp, #12]
 8010cbe:	4298      	cmp	r0, r3
 8010cc0:	bfb8      	it	lt
 8010cc2:	4618      	movlt	r0, r3
 8010cc4:	e7a4      	b.n	8010c10 <_printf_i+0x168>
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	4632      	mov	r2, r6
 8010cca:	4649      	mov	r1, r9
 8010ccc:	4640      	mov	r0, r8
 8010cce:	47d0      	blx	sl
 8010cd0:	3001      	adds	r0, #1
 8010cd2:	d09b      	beq.n	8010c0c <_printf_i+0x164>
 8010cd4:	3501      	adds	r5, #1
 8010cd6:	68e3      	ldr	r3, [r4, #12]
 8010cd8:	9903      	ldr	r1, [sp, #12]
 8010cda:	1a5b      	subs	r3, r3, r1
 8010cdc:	42ab      	cmp	r3, r5
 8010cde:	dcf2      	bgt.n	8010cc6 <_printf_i+0x21e>
 8010ce0:	e7eb      	b.n	8010cba <_printf_i+0x212>
 8010ce2:	2500      	movs	r5, #0
 8010ce4:	f104 0619 	add.w	r6, r4, #25
 8010ce8:	e7f5      	b.n	8010cd6 <_printf_i+0x22e>
 8010cea:	bf00      	nop
 8010cec:	08013549 	.word	0x08013549
 8010cf0:	0801355a 	.word	0x0801355a

08010cf4 <memmove>:
 8010cf4:	4288      	cmp	r0, r1
 8010cf6:	b510      	push	{r4, lr}
 8010cf8:	eb01 0402 	add.w	r4, r1, r2
 8010cfc:	d902      	bls.n	8010d04 <memmove+0x10>
 8010cfe:	4284      	cmp	r4, r0
 8010d00:	4623      	mov	r3, r4
 8010d02:	d807      	bhi.n	8010d14 <memmove+0x20>
 8010d04:	1e43      	subs	r3, r0, #1
 8010d06:	42a1      	cmp	r1, r4
 8010d08:	d008      	beq.n	8010d1c <memmove+0x28>
 8010d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d12:	e7f8      	b.n	8010d06 <memmove+0x12>
 8010d14:	4402      	add	r2, r0
 8010d16:	4601      	mov	r1, r0
 8010d18:	428a      	cmp	r2, r1
 8010d1a:	d100      	bne.n	8010d1e <memmove+0x2a>
 8010d1c:	bd10      	pop	{r4, pc}
 8010d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d26:	e7f7      	b.n	8010d18 <memmove+0x24>

08010d28 <_realloc_r>:
 8010d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d2a:	4607      	mov	r7, r0
 8010d2c:	4614      	mov	r4, r2
 8010d2e:	460e      	mov	r6, r1
 8010d30:	b921      	cbnz	r1, 8010d3c <_realloc_r+0x14>
 8010d32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010d36:	4611      	mov	r1, r2
 8010d38:	f7ff bbdc 	b.w	80104f4 <_malloc_r>
 8010d3c:	b922      	cbnz	r2, 8010d48 <_realloc_r+0x20>
 8010d3e:	f7ff fb89 	bl	8010454 <_free_r>
 8010d42:	4625      	mov	r5, r4
 8010d44:	4628      	mov	r0, r5
 8010d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d48:	f000 f814 	bl	8010d74 <_malloc_usable_size_r>
 8010d4c:	42a0      	cmp	r0, r4
 8010d4e:	d20f      	bcs.n	8010d70 <_realloc_r+0x48>
 8010d50:	4621      	mov	r1, r4
 8010d52:	4638      	mov	r0, r7
 8010d54:	f7ff fbce 	bl	80104f4 <_malloc_r>
 8010d58:	4605      	mov	r5, r0
 8010d5a:	2800      	cmp	r0, #0
 8010d5c:	d0f2      	beq.n	8010d44 <_realloc_r+0x1c>
 8010d5e:	4631      	mov	r1, r6
 8010d60:	4622      	mov	r2, r4
 8010d62:	f7ff fb61 	bl	8010428 <memcpy>
 8010d66:	4631      	mov	r1, r6
 8010d68:	4638      	mov	r0, r7
 8010d6a:	f7ff fb73 	bl	8010454 <_free_r>
 8010d6e:	e7e9      	b.n	8010d44 <_realloc_r+0x1c>
 8010d70:	4635      	mov	r5, r6
 8010d72:	e7e7      	b.n	8010d44 <_realloc_r+0x1c>

08010d74 <_malloc_usable_size_r>:
 8010d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d78:	1f18      	subs	r0, r3, #4
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	bfbc      	itt	lt
 8010d7e:	580b      	ldrlt	r3, [r1, r0]
 8010d80:	18c0      	addlt	r0, r0, r3
 8010d82:	4770      	bx	lr

08010d84 <_init>:
 8010d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d86:	bf00      	nop
 8010d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d8a:	bc08      	pop	{r3}
 8010d8c:	469e      	mov	lr, r3
 8010d8e:	4770      	bx	lr

08010d90 <_fini>:
 8010d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d92:	bf00      	nop
 8010d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d96:	bc08      	pop	{r3}
 8010d98:	469e      	mov	lr, r3
 8010d9a:	4770      	bx	lr
