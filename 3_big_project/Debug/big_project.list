
big_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001169c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029b4  0801182c  0801182c  0002182c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141e0  080141e0  000300a0  2**0
                  CONTENTS
  4 .ARM          00000008  080141e0  080141e0  000241e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141e8  080141e8  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141e8  080141e8  000241e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080141ec  080141ec  000241ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080141f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a0  2**0
                  CONTENTS
 10 .bss          00005644  200000a0  200000a0  000300a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200056e4  200056e4  000300a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036cf1  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006849  00000000  00000000  00066dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024d8  00000000  00000000  0006d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022a8  00000000  00000000  0006fae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000286d3  00000000  00000000  00071d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e0ed  00000000  00000000  0009a463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7c62  00000000  00000000  000c8550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b01b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a134  00000000  00000000  001b0208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011814 	.word	0x08011814

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08011814 	.word	0x08011814

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <time_i2c_write_single>:



/*function to transmit one byte of data to register_address on ds3231 (device_address: 0X68)*/
void time_i2c_write_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af04      	add	r7, sp, #16
 800059e:	4603      	mov	r3, r0
 80005a0:	603a      	str	r2, [r7, #0]
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	460b      	mov	r3, r1
 80005a6:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Write(&hi2c3, DS3231_I2C_ADDRESS<<1, DS3231_REGISTER_SECONDS_DEFAULT, 1, &seco, 1, 1000);
	//HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	HAL_I2C_Mem_Write(&hi2c3, (uint16_t)device_address<<1, register_address, 1, data_byte, 1, 1000);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	b299      	uxth	r1, r3
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b8:	9302      	str	r3, [sp, #8]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2301      	movs	r3, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <time_i2c_write_single+0x3c>)
 80005c6:	f005 fe65 	bl	8006294 <HAL_I2C_Mem_Write>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20004ac8 	.word	0x20004ac8

080005d8 <time_i2c_write_multi>:

/*function to transmit an array of data to device_address, starting from start_register_address*/
void time_i2c_write_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af04      	add	r7, sp, #16
 80005de:	603a      	str	r2, [r7, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c3, device_address<<1, start_register_address, 1, data_array, data_length, 1000);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	b299      	uxth	r1, r3
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	797b      	ldrb	r3, [r7, #5]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	9002      	str	r0, [sp, #8]
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2301      	movs	r3, #1
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <time_i2c_write_multi+0x44>)
 800060e:	f005 fe41 	bl	8006294 <HAL_I2C_Mem_Write>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20004ac8 	.word	0x20004ac8

08000620 <time_i2c_read_single>:

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af04      	add	r7, sp, #16
 8000626:	4603      	mov	r3, r0
 8000628:	603a      	str	r2, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	460b      	mov	r3, r1
 800062e:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,register_address, 1, data_byte, 1, 1000);
	HAL_I2C_Mem_Read(&hi2c3, device_address<<1,register_address, 1, data_byte, 1, 1000);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	b29b      	uxth	r3, r3
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	b299      	uxth	r1, r3
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	b29a      	uxth	r2, r3
 800063c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	2301      	movs	r3, #1
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2301      	movs	r3, #1
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <time_i2c_read_single+0x3c>)
 800064e:	f005 ff1b 	bl	8006488 <HAL_I2C_Mem_Read>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20004ac8 	.word	0x20004ac8

08000660 <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af04      	add	r7, sp, #16
 8000666:	603a      	str	r2, [r7, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	460b      	mov	r3, r1
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	4613      	mov	r3, r2
 8000674:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,start_register_address, 1, data_array, data_length, 1000);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	b29b      	uxth	r3, r3
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	b299      	uxth	r1, r3
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	b29a      	uxth	r2, r3
 8000682:	797b      	ldrb	r3, [r7, #5]
 8000684:	b29b      	uxth	r3, r3
 8000686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068a:	9002      	str	r0, [sp, #8]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <time_i2c_read_multi+0x44>)
 8000696:	f005 fef7 	bl	8006488 <HAL_I2C_Mem_Read>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20004ac8 	.word	0x20004ac8

080006a8 <ds3231_I2C_init>:

/*function to initialize I2C peripheral in 100khz or 400khz*/
void ds3231_I2C_init()
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <ds3231_read>:
  }
}

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  switch (option)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b0e      	cmp	r3, #14
 80006c8:	f200 80ac 	bhi.w	8000824 <ds3231_read+0x16c>
 80006cc:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <ds3231_read+0x1c>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	08000711 	.word	0x08000711
 80006d8:	0800072d 	.word	0x0800072d
 80006dc:	08000749 	.word	0x08000749
 80006e0:	08000765 	.word	0x08000765
 80006e4:	08000781 	.word	0x08000781
 80006e8:	0800079d 	.word	0x0800079d
 80006ec:	080007b9 	.word	0x080007b9
 80006f0:	080007d5 	.word	0x080007d5
 80006f4:	080007e9 	.word	0x080007e9
 80006f8:	080007fd 	.word	0x080007fd
 80006fc:	08000825 	.word	0x08000825
 8000700:	08000825 	.word	0x08000825
 8000704:	08000825 	.word	0x08000825
 8000708:	08000825 	.word	0x08000825
 800070c:	0800080f 	.word	0x0800080f
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 8000710:	4a48      	ldr	r2, [pc, #288]	; (8000834 <ds3231_read+0x17c>)
 8000712:	2100      	movs	r1, #0
 8000714:	2068      	movs	r0, #104	; 0x68
 8000716:	f7ff ff83 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 800071a:	4b46      	ldr	r3, [pc, #280]	; (8000834 <ds3231_read+0x17c>)
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000722:	2101      	movs	r1, #1
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f000 f9cf 	bl	8000ac8 <BCD_to_HEX>
      break;
 800072a:	e07d      	b.n	8000828 <ds3231_read+0x170>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 800072c:	4a41      	ldr	r2, [pc, #260]	; (8000834 <ds3231_read+0x17c>)
 800072e:	2101      	movs	r1, #1
 8000730:	2068      	movs	r0, #104	; 0x68
 8000732:	f7ff ff75 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 8000736:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <ds3231_read+0x17c>)
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800073e:	2101      	movs	r1, #1
 8000740:	6838      	ldr	r0, [r7, #0]
 8000742:	f000 f9c1 	bl	8000ac8 <BCD_to_HEX>
      break;
 8000746:	e06f      	b.n	8000828 <ds3231_read+0x170>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 8000748:	4a3a      	ldr	r2, [pc, #232]	; (8000834 <ds3231_read+0x17c>)
 800074a:	2102      	movs	r1, #2
 800074c:	2068      	movs	r0, #104	; 0x68
 800074e:	f7ff ff67 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 8000752:	4b38      	ldr	r3, [pc, #224]	; (8000834 <ds3231_read+0x17c>)
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800075a:	2101      	movs	r1, #1
 800075c:	6838      	ldr	r0, [r7, #0]
 800075e:	f000 f9b3 	bl	8000ac8 <BCD_to_HEX>
      break;
 8000762:	e061      	b.n	8000828 <ds3231_read+0x170>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 8000764:	4a33      	ldr	r2, [pc, #204]	; (8000834 <ds3231_read+0x17c>)
 8000766:	2103      	movs	r1, #3
 8000768:	2068      	movs	r0, #104	; 0x68
 800076a:	f7ff ff59 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 800076e:	4b31      	ldr	r3, [pc, #196]	; (8000834 <ds3231_read+0x17c>)
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000776:	2101      	movs	r1, #1
 8000778:	6838      	ldr	r0, [r7, #0]
 800077a:	f000 f9a5 	bl	8000ac8 <BCD_to_HEX>
      break;
 800077e:	e053      	b.n	8000828 <ds3231_read+0x170>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 8000780:	4a2c      	ldr	r2, [pc, #176]	; (8000834 <ds3231_read+0x17c>)
 8000782:	2104      	movs	r1, #4
 8000784:	2068      	movs	r0, #104	; 0x68
 8000786:	f7ff ff4b 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <ds3231_read+0x17c>)
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000792:	2101      	movs	r1, #1
 8000794:	6838      	ldr	r0, [r7, #0]
 8000796:	f000 f997 	bl	8000ac8 <BCD_to_HEX>
      break;
 800079a:	e045      	b.n	8000828 <ds3231_read+0x170>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <ds3231_read+0x17c>)
 800079e:	2105      	movs	r1, #5
 80007a0:	2068      	movs	r0, #104	; 0x68
 80007a2:	f7ff ff3d 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <ds3231_read+0x17c>)
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80007ae:	2101      	movs	r1, #1
 80007b0:	6838      	ldr	r0, [r7, #0]
 80007b2:	f000 f989 	bl	8000ac8 <BCD_to_HEX>
      break;
 80007b6:	e037      	b.n	8000828 <ds3231_read+0x170>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <ds3231_read+0x17c>)
 80007ba:	2106      	movs	r1, #6
 80007bc:	2068      	movs	r0, #104	; 0x68
 80007be:	f7ff ff2f 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <ds3231_read+0x17c>)
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80007ca:	2101      	movs	r1, #1
 80007cc:	6838      	ldr	r0, [r7, #0]
 80007ce:	f000 f97b 	bl	8000ac8 <BCD_to_HEX>
      break;
 80007d2:	e029      	b.n	8000828 <ds3231_read+0x170>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <ds3231_read+0x17c>)
 80007d6:	210e      	movs	r1, #14
 80007d8:	2068      	movs	r0, #104	; 0x68
 80007da:	f7ff ff21 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <ds3231_read+0x17c>)
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	701a      	strb	r2, [r3, #0]
      break;
 80007e6:	e01f      	b.n	8000828 <ds3231_read+0x170>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 80007e8:	4a12      	ldr	r2, [pc, #72]	; (8000834 <ds3231_read+0x17c>)
 80007ea:	210f      	movs	r1, #15
 80007ec:	2068      	movs	r0, #104	; 0x68
 80007ee:	f7ff ff17 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <ds3231_read+0x17c>)
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	701a      	strb	r2, [r3, #0]
      break;
 80007fa:	e015      	b.n	8000828 <ds3231_read+0x170>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <ds3231_read+0x17c>)
 80007fe:	2110      	movs	r1, #16
 8000800:	2068      	movs	r0, #104	; 0x68
 8000802:	f7ff ff0d 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <ds3231_read+0x17c>)
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 800080e:	2307      	movs	r3, #7
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	2100      	movs	r1, #0
 8000814:	2068      	movs	r0, #104	; 0x68
 8000816:	f7ff ff23 	bl	8000660 <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 800081a:	2107      	movs	r1, #7
 800081c:	6838      	ldr	r0, [r7, #0]
 800081e:	f000 f953 	bl	8000ac8 <BCD_to_HEX>
      break;
 8000822:	e001      	b.n	8000828 <ds3231_read+0x170>
    default:
      return OPERATION_FAILED;
 8000824:	2300      	movs	r3, #0
 8000826:	e000      	b.n	800082a <ds3231_read+0x172>
  }
  return OPERATION_DONE;
 8000828:	2301      	movs	r3, #1
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000bc 	.word	0x200000bc

08000838 <ds3231_set>:

/*function to set internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_set(uint8_t option, uint8_t *data_array)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b0e      	cmp	r3, #14
 8000848:	f200 80d5 	bhi.w	80009f6 <ds3231_set+0x1be>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <ds3231_set+0x1c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000891 	.word	0x08000891
 8000858:	080008ad 	.word	0x080008ad
 800085c:	080008c9 	.word	0x080008c9
 8000860:	080008e5 	.word	0x080008e5
 8000864:	08000901 	.word	0x08000901
 8000868:	0800091d 	.word	0x0800091d
 800086c:	08000939 	.word	0x08000939
 8000870:	08000955 	.word	0x08000955
 8000874:	0800098d 	.word	0x0800098d
 8000878:	080009e3 	.word	0x080009e3
 800087c:	080009f7 	.word	0x080009f7
 8000880:	080009f7 	.word	0x080009f7
 8000884:	080009f7 	.word	0x080009f7
 8000888:	080009f7 	.word	0x080009f7
 800088c:	080009c5 	.word	0x080009c5
  {
    case SECOND:
      time_registers_clone[0] = *data_array;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	4b5b      	ldr	r3, [pc, #364]	; (8000a04 <ds3231_set+0x1cc>)
 8000896:	701a      	strb	r2, [r3, #0]
      HEX_to_BCD(&time_registers_clone[0], 1);
 8000898:	2101      	movs	r1, #1
 800089a:	485a      	ldr	r0, [pc, #360]	; (8000a04 <ds3231_set+0x1cc>)
 800089c:	f000 f953 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0]);
 80008a0:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <ds3231_set+0x1cc>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	2068      	movs	r0, #104	; 0x68
 80008a6:	f7ff fe77 	bl	8000598 <time_i2c_write_single>
      break;
 80008aa:	e0a6      	b.n	80009fa <ds3231_set+0x1c2>
    case MINUTE:
      time_registers_clone[1] = *data_array;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b54      	ldr	r3, [pc, #336]	; (8000a04 <ds3231_set+0x1cc>)
 80008b2:	705a      	strb	r2, [r3, #1]
      HEX_to_BCD(&time_registers_clone[1], 1);
 80008b4:	2101      	movs	r1, #1
 80008b6:	4854      	ldr	r0, [pc, #336]	; (8000a08 <ds3231_set+0x1d0>)
 80008b8:	f000 f945 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &time_registers_clone[1]);
 80008bc:	4a52      	ldr	r2, [pc, #328]	; (8000a08 <ds3231_set+0x1d0>)
 80008be:	2101      	movs	r1, #1
 80008c0:	2068      	movs	r0, #104	; 0x68
 80008c2:	f7ff fe69 	bl	8000598 <time_i2c_write_single>
      break;
 80008c6:	e098      	b.n	80009fa <ds3231_set+0x1c2>
    case HOUR:
      time_registers_clone[2] = *data_array;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <ds3231_set+0x1cc>)
 80008ce:	709a      	strb	r2, [r3, #2]
      HEX_to_BCD(&time_registers_clone[2], 1);
 80008d0:	2101      	movs	r1, #1
 80008d2:	484e      	ldr	r0, [pc, #312]	; (8000a0c <ds3231_set+0x1d4>)
 80008d4:	f000 f937 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &time_registers_clone[2]);
 80008d8:	4a4c      	ldr	r2, [pc, #304]	; (8000a0c <ds3231_set+0x1d4>)
 80008da:	2102      	movs	r1, #2
 80008dc:	2068      	movs	r0, #104	; 0x68
 80008de:	f7ff fe5b 	bl	8000598 <time_i2c_write_single>
      break;
 80008e2:	e08a      	b.n	80009fa <ds3231_set+0x1c2>
    case DAY_OF_WEEK:
      time_registers_clone[3] = *data_array;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <ds3231_set+0x1cc>)
 80008ea:	70da      	strb	r2, [r3, #3]
      HEX_to_BCD(&time_registers_clone[3], 1);
 80008ec:	2101      	movs	r1, #1
 80008ee:	4848      	ldr	r0, [pc, #288]	; (8000a10 <ds3231_set+0x1d8>)
 80008f0:	f000 f929 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &time_registers_clone[3]);
 80008f4:	4a46      	ldr	r2, [pc, #280]	; (8000a10 <ds3231_set+0x1d8>)
 80008f6:	2103      	movs	r1, #3
 80008f8:	2068      	movs	r0, #104	; 0x68
 80008fa:	f7ff fe4d 	bl	8000598 <time_i2c_write_single>
      break;
 80008fe:	e07c      	b.n	80009fa <ds3231_set+0x1c2>
    case DATE:
      time_registers_clone[4] = *data_array;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <ds3231_set+0x1cc>)
 8000906:	711a      	strb	r2, [r3, #4]
      HEX_to_BCD(&time_registers_clone[4], 1);
 8000908:	2101      	movs	r1, #1
 800090a:	4842      	ldr	r0, [pc, #264]	; (8000a14 <ds3231_set+0x1dc>)
 800090c:	f000 f91b 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &time_registers_clone[4]);
 8000910:	4a40      	ldr	r2, [pc, #256]	; (8000a14 <ds3231_set+0x1dc>)
 8000912:	2104      	movs	r1, #4
 8000914:	2068      	movs	r0, #104	; 0x68
 8000916:	f7ff fe3f 	bl	8000598 <time_i2c_write_single>
      break;
 800091a:	e06e      	b.n	80009fa <ds3231_set+0x1c2>
    case MONTH:
      time_registers_clone[5] = *data_array;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <ds3231_set+0x1cc>)
 8000922:	715a      	strb	r2, [r3, #5]
      HEX_to_BCD(&time_registers_clone[5], 1);
 8000924:	2101      	movs	r1, #1
 8000926:	483c      	ldr	r0, [pc, #240]	; (8000a18 <ds3231_set+0x1e0>)
 8000928:	f000 f90d 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &time_registers_clone[5]);
 800092c:	4a3a      	ldr	r2, [pc, #232]	; (8000a18 <ds3231_set+0x1e0>)
 800092e:	2105      	movs	r1, #5
 8000930:	2068      	movs	r0, #104	; 0x68
 8000932:	f7ff fe31 	bl	8000598 <time_i2c_write_single>
      break;
 8000936:	e060      	b.n	80009fa <ds3231_set+0x1c2>
    case YEAR:
      time_registers_clone[6] = *data_array;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <ds3231_set+0x1cc>)
 800093e:	719a      	strb	r2, [r3, #6]
      HEX_to_BCD(&time_registers_clone[6], 1);
 8000940:	2101      	movs	r1, #1
 8000942:	4836      	ldr	r0, [pc, #216]	; (8000a1c <ds3231_set+0x1e4>)
 8000944:	f000 f8ff 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &time_registers_clone[6]);
 8000948:	4a34      	ldr	r2, [pc, #208]	; (8000a1c <ds3231_set+0x1e4>)
 800094a:	2106      	movs	r1, #6
 800094c:	2068      	movs	r0, #104	; 0x68
 800094e:	f7ff fe23 	bl	8000598 <time_i2c_write_single>
      break;
 8000952:	e052      	b.n	80009fa <ds3231_set+0x1c2>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <ds3231_set+0x1e8>)
 8000956:	210e      	movs	r1, #14
 8000958:	2068      	movs	r0, #104	; 0x68
 800095a:	f7ff fe61 	bl	8000620 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (*data_array & (~(1 << DS3231_BIT_EOSC)));
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <ds3231_set+0x1e8>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b25b      	sxtb	r3, r3
 8000964:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000968:	b25a      	sxtb	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b25b      	sxtb	r3, r3
 8000970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000974:	b25b      	sxtb	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b25b      	sxtb	r3, r3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <ds3231_set+0x1ec>)
 800097e:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8000980:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <ds3231_set+0x1ec>)
 8000982:	210e      	movs	r1, #14
 8000984:	2068      	movs	r0, #104	; 0x68
 8000986:	f7ff fe07 	bl	8000598 <time_i2c_write_single>
      break;
 800098a:	e036      	b.n	80009fa <ds3231_set+0x1c2>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 800098c:	4a24      	ldr	r2, [pc, #144]	; (8000a20 <ds3231_set+0x1e8>)
 800098e:	210f      	movs	r1, #15
 8000990:	2068      	movs	r0, #104	; 0x68
 8000992:	f7ff fe45 	bl	8000620 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (*data_array & (~(1 << DS3231_BIT_OSF)));
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <ds3231_set+0x1e8>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b25b      	sxtb	r3, r3
 800099c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80009a0:	b25a      	sxtb	r2, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <ds3231_set+0x1ec>)
 80009b6:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 80009b8:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <ds3231_set+0x1ec>)
 80009ba:	210f      	movs	r1, #15
 80009bc:	2068      	movs	r0, #104	; 0x68
 80009be:	f7ff fdeb 	bl	8000598 <time_i2c_write_single>
      break;
 80009c2:	e01a      	b.n	80009fa <ds3231_set+0x1c2>
    case TIME:
      ds3231_data_clone(TIME, data_array);
 80009c4:	6839      	ldr	r1, [r7, #0]
 80009c6:	200e      	movs	r0, #14
 80009c8:	f000 f82e 	bl	8000a28 <ds3231_data_clone>
      HEX_to_BCD(&time_registers_clone[0], 7);
 80009cc:	2107      	movs	r1, #7
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <ds3231_set+0x1cc>)
 80009d0:	f000 f8b9 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);
 80009d4:	2307      	movs	r3, #7
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <ds3231_set+0x1cc>)
 80009d8:	2100      	movs	r1, #0
 80009da:	2068      	movs	r0, #104	; 0x68
 80009dc:	f7ff fdfc 	bl	80005d8 <time_i2c_write_multi>
      break;
 80009e0:	e00b      	b.n	80009fa <ds3231_set+0x1c2>
    case AGING_OFFSET:
      register_new_value = *data_array;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <ds3231_set+0x1ec>)
 80009e8:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <ds3231_set+0x1ec>)
 80009ec:	2110      	movs	r1, #16
 80009ee:	2068      	movs	r0, #104	; 0x68
 80009f0:	f7ff fdd2 	bl	8000598 <time_i2c_write_single>
      break;
 80009f4:	e001      	b.n	80009fa <ds3231_set+0x1c2>
    default:
      return OPERATION_FAILED;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <ds3231_set+0x1c4>
  }
  return OPERATION_DONE;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000c0 	.word	0x200000c0
 8000a08:	200000c1 	.word	0x200000c1
 8000a0c:	200000c2 	.word	0x200000c2
 8000a10:	200000c3 	.word	0x200000c3
 8000a14:	200000c4 	.word	0x200000c4
 8000a18:	200000c5 	.word	0x200000c5
 8000a1c:	200000c6 	.word	0x200000c6
 8000a20:	200000bc 	.word	0x200000bc
 8000a24:	200000bd 	.word	0x200000bd

08000a28 <ds3231_data_clone>:

/*to clone the desired data and prevent reconversion of BCD to HEX*/
static void ds3231_data_clone(uint8_t option, uint8_t *input_array)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b0e      	cmp	r3, #14
 8000a38:	d006      	beq.n	8000a48 <ds3231_data_clone+0x20>
 8000a3a:	2b0e      	cmp	r3, #14
 8000a3c:	dc37      	bgt.n	8000aae <ds3231_data_clone+0x86>
 8000a3e:	2b0a      	cmp	r3, #10
 8000a40:	d013      	beq.n	8000a6a <ds3231_data_clone+0x42>
 8000a42:	2b0b      	cmp	r3, #11
 8000a44:	d022      	beq.n	8000a8c <ds3231_data_clone+0x64>
      {
        alarm2_registers_clone[counter] = input_array[counter];
      }
      break;
    default:
      break;
 8000a46:	e032      	b.n	8000aae <ds3231_data_clone+0x86>
      for (uint8_t counter = 0; counter < 7; counter++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]
 8000a4c:	e009      	b.n	8000a62 <ds3231_data_clone+0x3a>
        time_registers_clone[counter] = input_array[counter];
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	441a      	add	r2, r3
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	7811      	ldrb	r1, [r2, #0]
 8000a58:	4a18      	ldr	r2, [pc, #96]	; (8000abc <ds3231_data_clone+0x94>)
 8000a5a:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 7; counter++)
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	2b06      	cmp	r3, #6
 8000a66:	d9f2      	bls.n	8000a4e <ds3231_data_clone+0x26>
      break;
 8000a68:	e022      	b.n	8000ab0 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 4; counter++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73bb      	strb	r3, [r7, #14]
 8000a6e:	e009      	b.n	8000a84 <ds3231_data_clone+0x5c>
        alarm1_registers_clone[counter] = input_array[counter];
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	683a      	ldr	r2, [r7, #0]
 8000a74:	441a      	add	r2, r3
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	7811      	ldrb	r1, [r2, #0]
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <ds3231_data_clone+0x98>)
 8000a7c:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 4; counter++)
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	3301      	adds	r3, #1
 8000a82:	73bb      	strb	r3, [r7, #14]
 8000a84:	7bbb      	ldrb	r3, [r7, #14]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d9f2      	bls.n	8000a70 <ds3231_data_clone+0x48>
      break;
 8000a8a:	e011      	b.n	8000ab0 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 3; counter++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	737b      	strb	r3, [r7, #13]
 8000a90:	e009      	b.n	8000aa6 <ds3231_data_clone+0x7e>
        alarm2_registers_clone[counter] = input_array[counter];
 8000a92:	7b7b      	ldrb	r3, [r7, #13]
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	441a      	add	r2, r3
 8000a98:	7b7b      	ldrb	r3, [r7, #13]
 8000a9a:	7811      	ldrb	r1, [r2, #0]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <ds3231_data_clone+0x9c>)
 8000a9e:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 3; counter++)
 8000aa0:	7b7b      	ldrb	r3, [r7, #13]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	737b      	strb	r3, [r7, #13]
 8000aa6:	7b7b      	ldrb	r3, [r7, #13]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d9f2      	bls.n	8000a92 <ds3231_data_clone+0x6a>
      break;
 8000aac:	e000      	b.n	8000ab0 <ds3231_data_clone+0x88>
      break;
 8000aae:	bf00      	nop
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	200000c0 	.word	0x200000c0
 8000ac0:	200000c8 	.word	0x200000c8
 8000ac4:	200000cc 	.word	0x200000cc

08000ac8 <BCD_to_HEX>:

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e028      	b.n	8000b30 <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	091b      	lsrs	r3, r3, #4
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	440b      	add	r3, r1
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	b2d9      	uxtb	r1, r3
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	f003 030f 	and.w	r3, r3, #15
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	4403      	add	r3, r0
 8000b1e:	440a      	add	r2, r1
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73fb      	strb	r3, [r7, #15]
 8000b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	dad2      	bge.n	8000ade <BCD_to_HEX+0x16>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HEX_to_BCD>:

/*internal function related to this file and not accessible from outside*/
static void HEX_to_BCD(uint8_t *data_array, uint8_t array_length)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b085      	sub	sp, #20
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
  uint8_t temporary_value;
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	73bb      	strb	r3, [r7, #14]
 8000b5a:	e02d      	b.n	8000bb8 <HEX_to_BCD+0x72>
  {
    temporary_value = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8000b60:	e00e      	b.n	8000b80 <HEX_to_BCD+0x3a>
    {
      temporary_value += 0X10;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	3310      	adds	r3, #16
 8000b66:	73fb      	strb	r3, [r7, #15]
      data_array[index] -= 0X0A;
 8000b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	440b      	add	r3, r1
 8000b7a:	3a0a      	subs	r2, #10
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	701a      	strb	r2, [r3, #0]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8000b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	dce8      	bgt.n	8000b62 <HEX_to_BCD+0x1c>
    }
    temporary_value += data_array[index];
 8000b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	73fb      	strb	r3, [r7, #15]
    data_array[index] = temporary_value;
 8000ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	73bb      	strb	r3, [r7, #14]
 8000bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dacd      	bge.n	8000b5c <HEX_to_BCD+0x16>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f002 ffdf 	bl	8003b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f8e1 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bde:	f000 faeb 	bl	80011b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000be2:	f000 f949 	bl	8000e78 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000be6:	f000 f9a3 	bl	8000f30 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000bea:	f000 f9f7 	bl	8000fdc <MX_SPI1_Init>
  MX_RTC_Init();
 8000bee:	f000 f9cf 	bl	8000f90 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000bf2:	f000 fab7 	bl	8001164 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000bf6:	f000 f96d 	bl	8000ed4 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000bfa:	f000 fa25 	bl	8001048 <MX_TIM1_Init>
  MX_TIM7_Init();
 8000bfe:	f000 fa7b 	bl	80010f8 <MX_TIM7_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c02:	f00c fbf5 	bl	800d3f0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of input_Queue */
  input_QueueHandle = osMessageQueueNew (10, sizeof(long unsigned int), &input_Queue_attributes);
 8000c06:	4a42      	ldr	r2, [pc, #264]	; (8000d10 <main+0x140>)
 8000c08:	2104      	movs	r1, #4
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f00c fce7 	bl	800d5de <osMessageQueueNew>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a40      	ldr	r2, [pc, #256]	; (8000d14 <main+0x144>)
 8000c14:	6013      	str	r3, [r2, #0]

  /* creation of print_Queue */
  print_QueueHandle = osMessageQueueNew (1, sizeof(char*), &print_Queue_attributes);
 8000c16:	4a40      	ldr	r2, [pc, #256]	; (8000d18 <main+0x148>)
 8000c18:	2104      	movs	r1, #4
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f00c fcdf 	bl	800d5de <osMessageQueueNew>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4a3e      	ldr	r2, [pc, #248]	; (8000d1c <main+0x14c>)
 8000c24:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c26:	4a3e      	ldr	r2, [pc, #248]	; (8000d20 <main+0x150>)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	483e      	ldr	r0, [pc, #248]	; (8000d24 <main+0x154>)
 8000c2c:	f00c fc2a 	bl	800d484 <osThreadNew>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4a3d      	ldr	r2, [pc, #244]	; (8000d28 <main+0x158>)
 8000c34:	6013      	str	r3, [r2, #0]

  /* creation of menu_task */
  menu_taskHandle = osThreadNew(start_menu_task, NULL, &menu_task_attributes);
 8000c36:	4a3d      	ldr	r2, [pc, #244]	; (8000d2c <main+0x15c>)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	483d      	ldr	r0, [pc, #244]	; (8000d30 <main+0x160>)
 8000c3c:	f00c fc22 	bl	800d484 <osThreadNew>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a3c      	ldr	r2, [pc, #240]	; (8000d34 <main+0x164>)
 8000c44:	6013      	str	r3, [r2, #0]

  /* creation of led_task */
  led_taskHandle = osThreadNew(start_led_task, NULL, &led_task_attributes);
 8000c46:	4a3c      	ldr	r2, [pc, #240]	; (8000d38 <main+0x168>)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	483c      	ldr	r0, [pc, #240]	; (8000d3c <main+0x16c>)
 8000c4c:	f00c fc1a 	bl	800d484 <osThreadNew>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4a3b      	ldr	r2, [pc, #236]	; (8000d40 <main+0x170>)
 8000c54:	6013      	str	r3, [r2, #0]

  /* creation of rtc_task */
  rtc_taskHandle = osThreadNew(start_rtc_task, NULL, &rtc_task_attributes);
 8000c56:	4a3b      	ldr	r2, [pc, #236]	; (8000d44 <main+0x174>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	483b      	ldr	r0, [pc, #236]	; (8000d48 <main+0x178>)
 8000c5c:	f00c fc12 	bl	800d484 <osThreadNew>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a3a      	ldr	r2, [pc, #232]	; (8000d4c <main+0x17c>)
 8000c64:	6013      	str	r3, [r2, #0]

  /* creation of print_task */
  print_taskHandle = osThreadNew(start_print, NULL, &print_task_attributes);
 8000c66:	4a3a      	ldr	r2, [pc, #232]	; (8000d50 <main+0x180>)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	483a      	ldr	r0, [pc, #232]	; (8000d54 <main+0x184>)
 8000c6c:	f00c fc0a 	bl	800d484 <osThreadNew>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a39      	ldr	r2, [pc, #228]	; (8000d58 <main+0x188>)
 8000c74:	6013      	str	r3, [r2, #0]

  /* creation of cmd_handl_task */
  cmd_handl_taskHandle = osThreadNew(start_cmd_handl, NULL, &cmd_handl_task_attributes);
 8000c76:	4a39      	ldr	r2, [pc, #228]	; (8000d5c <main+0x18c>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4839      	ldr	r0, [pc, #228]	; (8000d60 <main+0x190>)
 8000c7c:	f00c fc02 	bl	800d484 <osThreadNew>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a38      	ldr	r2, [pc, #224]	; (8000d64 <main+0x194>)
 8000c84:	6013      	str	r3, [r2, #0]

  /* creation of OLED_RTC */
  OLED_RTCHandle = osThreadNew(StartOLED_RTC, NULL, &OLED_RTC_attributes);
 8000c86:	4a38      	ldr	r2, [pc, #224]	; (8000d68 <main+0x198>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4838      	ldr	r0, [pc, #224]	; (8000d6c <main+0x19c>)
 8000c8c:	f00c fbfa 	bl	800d484 <osThreadNew>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a37      	ldr	r2, [pc, #220]	; (8000d70 <main+0x1a0>)
 8000c94:	6013      	str	r3, [r2, #0]

  /* creation of test_task */
  test_taskHandle = osThreadNew(Start_test_task, NULL, &test_task_attributes);
 8000c96:	4a37      	ldr	r2, [pc, #220]	; (8000d74 <main+0x1a4>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4837      	ldr	r0, [pc, #220]	; (8000d78 <main+0x1a8>)
 8000c9c:	f00c fbf2 	bl	800d484 <osThreadNew>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a36      	ldr	r2, [pc, #216]	; (8000d7c <main+0x1ac>)
 8000ca4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // Create software timers (Created manually)  FOr LEDs
   handler_led_timer[0] = xTimerCreate("led_timer_1", pdMS_TO_TICKS(100), pdTRUE, (void*)1, led_effect_callback);
 8000ca6:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <main+0x1b0>)
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	2201      	movs	r2, #1
 8000cae:	2164      	movs	r1, #100	; 0x64
 8000cb0:	4834      	ldr	r0, [pc, #208]	; (8000d84 <main+0x1b4>)
 8000cb2:	f00e fe09 	bl	800f8c8 <xTimerCreate>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a33      	ldr	r2, [pc, #204]	; (8000d88 <main+0x1b8>)
 8000cba:	6013      	str	r3, [r2, #0]
   handler_led_timer[1] = xTimerCreate("led_timer_2", pdMS_TO_TICKS(100), pdTRUE, (void*)2, led_effect_callback);
 8000cbc:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <main+0x1b0>)
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2164      	movs	r1, #100	; 0x64
 8000cc6:	4831      	ldr	r0, [pc, #196]	; (8000d8c <main+0x1bc>)
 8000cc8:	f00e fdfe 	bl	800f8c8 <xTimerCreate>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a2e      	ldr	r2, [pc, #184]	; (8000d88 <main+0x1b8>)
 8000cd0:	6053      	str	r3, [r2, #4]
   handler_led_timer[2] = xTimerCreate("led_timer_3", pdMS_TO_TICKS(100), pdTRUE, (void*)3, led_effect_callback);
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <main+0x1b0>)
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2164      	movs	r1, #100	; 0x64
 8000cdc:	482c      	ldr	r0, [pc, #176]	; (8000d90 <main+0x1c0>)
 8000cde:	f00e fdf3 	bl	800f8c8 <xTimerCreate>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a28      	ldr	r2, [pc, #160]	; (8000d88 <main+0x1b8>)
 8000ce6:	6093      	str	r3, [r2, #8]
   handler_led_timer[3] = xTimerCreate("led_timer_4", pdMS_TO_TICKS(100), pdTRUE, (void*)4, led_effect_callback);
 8000ce8:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <main+0x1b0>)
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2304      	movs	r3, #4
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2164      	movs	r1, #100	; 0x64
 8000cf2:	4828      	ldr	r0, [pc, #160]	; (8000d94 <main+0x1c4>)
 8000cf4:	f00e fde8 	bl	800f8c8 <xTimerCreate>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a23      	ldr	r2, [pc, #140]	; (8000d88 <main+0x1b8>)
 8000cfc:	60d3      	str	r3, [r2, #12]

   // For write data from UART
   HAL_UART_Receive_IT(&huart2, &user_data , 1);			// Turn on (start) receive one char in interrupt mode
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4925      	ldr	r1, [pc, #148]	; (8000d98 <main+0x1c8>)
 8000d02:	4826      	ldr	r0, [pc, #152]	; (8000d9c <main+0x1cc>)
 8000d04:	f008 fb41 	bl	800938a <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d08:	f00c fb96 	bl	800d438 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <main+0x13c>
 8000d0e:	bf00      	nop
 8000d10:	08011c9c 	.word	0x08011c9c
 8000d14:	20004b88 	.word	0x20004b88
 8000d18:	08011cb4 	.word	0x08011cb4
 8000d1c:	20004c04 	.word	0x20004c04
 8000d20:	08011b7c 	.word	0x08011b7c
 8000d24:	08001819 	.word	0x08001819
 8000d28:	20004ac4 	.word	0x20004ac4
 8000d2c:	08011ba0 	.word	0x08011ba0
 8000d30:	0800182d 	.word	0x0800182d
 8000d34:	20004ca8 	.word	0x20004ca8
 8000d38:	08011bc4 	.word	0x08011bc4
 8000d3c:	0800192d 	.word	0x0800192d
 8000d40:	20004b74 	.word	0x20004b74
 8000d44:	08011be8 	.word	0x08011be8
 8000d48:	08001a81 	.word	0x08001a81
 8000d4c:	20004c08 	.word	0x20004c08
 8000d50:	08011c0c 	.word	0x08011c0c
 8000d54:	08001a91 	.word	0x08001a91
 8000d58:	20004b90 	.word	0x20004b90
 8000d5c:	08011c30 	.word	0x08011c30
 8000d60:	08001ae9 	.word	0x08001ae9
 8000d64:	20004b94 	.word	0x20004b94
 8000d68:	08011c54 	.word	0x08011c54
 8000d6c:	08001b15 	.word	0x08001b15
 8000d70:	20004b8c 	.word	0x20004b8c
 8000d74:	08011c78 	.word	0x08011c78
 8000d78:	08002bdd 	.word	0x08002bdd
 8000d7c:	20004b1c 	.word	0x20004b1c
 8000d80:	080016e9 	.word	0x080016e9
 8000d84:	080118c4 	.word	0x080118c4
 8000d88:	20004b78 	.word	0x20004b78
 8000d8c:	080118d0 	.word	0x080118d0
 8000d90:	080118dc 	.word	0x080118dc
 8000d94:	080118e8 	.word	0x080118e8
 8000d98:	20004c00 	.word	0x20004c00
 8000d9c:	20004c64 	.word	0x20004c64

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	; 0x50
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	2230      	movs	r2, #48	; 0x30
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f010 f890 	bl	8010ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <SystemClock_Config+0xd0>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	4a28      	ldr	r2, [pc, #160]	; (8000e70 <SystemClock_Config+0xd0>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <SystemClock_Config+0xd0>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <SystemClock_Config+0xd4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <SystemClock_Config+0xd4>)
 8000dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <SystemClock_Config+0xd4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000dfc:	2309      	movs	r3, #9
 8000dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e06:	2301      	movs	r3, #1
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e14:	2308      	movs	r3, #8
 8000e16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e22:	2307      	movs	r3, #7
 8000e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 0320 	add.w	r3, r7, #32
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f006 fdd0 	bl	80079d0 <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e36:	f001 feed 	bl	8002c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	2105      	movs	r1, #5
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f007 f831 	bl	8007ec0 <HAL_RCC_ClockConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000e64:	f001 fed6 	bl	8002c14 <Error_Handler>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3750      	adds	r7, #80	; 0x50
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40007000 	.word	0x40007000

08000e78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e7e:	4a13      	ldr	r2, [pc, #76]	; (8000ecc <MX_I2C1_Init+0x54>)
 8000e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <MX_I2C1_Init+0x58>)
 8000e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_I2C1_Init+0x50>)
 8000eb6:	f004 ffab 	bl	8005e10 <HAL_I2C_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ec0:	f001 fea8 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20004b20 	.word	0x20004b20
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	000186a0 	.word	0x000186a0

08000ed4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <MX_I2C3_Init+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <MX_I2C3_Init+0x58>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_I2C3_Init+0x50>)
 8000f12:	f004 ff7d 	bl	8005e10 <HAL_I2C_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f001 fe7a 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20004ac8 	.word	0x20004ac8
 8000f28:	40005c00 	.word	0x40005c00
 8000f2c:	00061a80 	.word	0x00061a80

08000f30 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <MX_I2S3_Init+0x58>)
 8000f38:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f40:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f54:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f58:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <MX_I2S3_Init+0x5c>)
 8000f5a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_I2S3_Init+0x54>)
 8000f70:	f006 f88e 	bl	8007090 <HAL_I2S_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f7a:	f001 fe4b 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20004cf4 	.word	0x20004cf4
 8000f88:	40003c00 	.word	0x40003c00
 8000f8c:	00017700 	.word	0x00017700

08000f90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <MX_RTC_Init+0x48>)
 8000f98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000f9c:	2240      	movs	r2, #64	; 0x40
 8000f9e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000fa2:	227f      	movs	r2, #127	; 0x7f
 8000fa4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000fa8:	22ff      	movs	r2, #255	; 0xff
 8000faa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_RTC_Init+0x44>)
 8000fc0:	f007 faec 	bl	800859c <HAL_RTC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000fca:	f001 fe23 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20004b98 	.word	0x20004b98
 8000fd8:	40002800 	.word	0x40002800

08000fdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_SPI1_Init+0x64>)
 8000fe2:	4a18      	ldr	r2, [pc, #96]	; (8001044 <MX_SPI1_Init+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_SPI1_Init+0x64>)
 8000fe8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_SPI1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_SPI1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_SPI1_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_SPI1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_SPI1_Init+0x64>)
 8001008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_SPI1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <MX_SPI1_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_SPI1_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <MX_SPI1_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_SPI1_Init+0x64>)
 8001028:	220a      	movs	r2, #10
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_SPI1_Init+0x64>)
 800102e:	f007 fb9a 	bl	8008766 <HAL_SPI_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001038:	f001 fdec 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20004c0c 	.word	0x20004c0c
 8001044:	40013000 	.word	0x40013000

08001048 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2224      	movs	r2, #36	; 0x24
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f00f ff3c 	bl	8010ed4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <MX_TIM1_Init+0xa8>)
 8001066:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <MX_TIM1_Init+0xac>)
 8001068:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_TIM1_Init+0xa8>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MX_TIM1_Init+0xa8>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <MX_TIM1_Init+0xa8>)
 8001078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_TIM1_Init+0xa8>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_TIM1_Init+0xa8>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_TIM1_Init+0xa8>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001090:	2301      	movs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001098:	2301      	movs	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010a8:	2301      	movs	r3, #1
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_TIM1_Init+0xa8>)
 80010bc:	f007 fccb 	bl	8008a56 <HAL_TIM_Encoder_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80010c6:	f001 fda5 	bl	8002c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <MX_TIM1_Init+0xa8>)
 80010d8:	f007 ffe8 	bl	80090ac <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80010e2:	f001 fd97 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3730      	adds	r7, #48	; 0x30
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20004bb8 	.word	0x20004bb8
 80010f4:	40010000 	.word	0x40010000

080010f8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_TIM7_Init+0x64>)
 8001108:	4a15      	ldr	r2, [pc, #84]	; (8001160 <MX_TIM7_Init+0x68>)
 800110a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_TIM7_Init+0x64>)
 800110e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001112:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_TIM7_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_TIM7_Init+0x64>)
 800111c:	2263      	movs	r2, #99	; 0x63
 800111e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_TIM7_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_TIM7_Init+0x64>)
 8001128:	f007 fba6 	bl	8008878 <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001132:	f001 fd6f 	bl	8002c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_TIM7_Init+0x64>)
 8001144:	f007 ffb2 	bl	80090ac <HAL_TIMEx_MasterConfigSynchronization>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800114e:	f001 fd61 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20004cac 	.word	0x20004cac
 8001160:	40001400 	.word	0x40001400

08001164 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_USART2_UART_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART2_UART_Init+0x4c>)
 800119c:	f008 f816 	bl	80091cc <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011a6:	f001 fd35 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20004c64 	.word	0x20004c64
 80011b4:	40004400 	.word	0x40004400

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <MX_GPIO_Init+0x210>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a7c      	ldr	r2, [pc, #496]	; (80013c8 <MX_GPIO_Init+0x210>)
 80011d8:	f043 0310 	orr.w	r3, r3, #16
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b7a      	ldr	r3, [pc, #488]	; (80013c8 <MX_GPIO_Init+0x210>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	4b76      	ldr	r3, [pc, #472]	; (80013c8 <MX_GPIO_Init+0x210>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a75      	ldr	r2, [pc, #468]	; (80013c8 <MX_GPIO_Init+0x210>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b73      	ldr	r3, [pc, #460]	; (80013c8 <MX_GPIO_Init+0x210>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <MX_GPIO_Init+0x210>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a6e      	ldr	r2, [pc, #440]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b6c      	ldr	r3, [pc, #432]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a67      	ldr	r2, [pc, #412]	; (80013c8 <MX_GPIO_Init+0x210>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b65      	ldr	r3, [pc, #404]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a60      	ldr	r2, [pc, #384]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b5a      	ldr	r3, [pc, #360]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a59      	ldr	r2, [pc, #356]	; (80013c8 <MX_GPIO_Init+0x210>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b57      	ldr	r3, [pc, #348]	; (80013c8 <MX_GPIO_Init+0x210>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2108      	movs	r1, #8
 800127a:	4854      	ldr	r0, [pc, #336]	; (80013cc <MX_GPIO_Init+0x214>)
 800127c:	f003 f81a 	bl	80042b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2101      	movs	r1, #1
 8001284:	4852      	ldr	r0, [pc, #328]	; (80013d0 <MX_GPIO_Init+0x218>)
 8001286:	f003 f815 	bl	80042b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800128a:	2200      	movs	r2, #0
 800128c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001290:	4850      	ldr	r0, [pc, #320]	; (80013d4 <MX_GPIO_Init+0x21c>)
 8001292:	f003 f80f 	bl	80042b4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001296:	2308      	movs	r3, #8
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4847      	ldr	r0, [pc, #284]	; (80013cc <MX_GPIO_Init+0x214>)
 80012ae:	f002 fe4d 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4841      	ldr	r0, [pc, #260]	; (80013d0 <MX_GPIO_Init+0x218>)
 80012ca:	f002 fe3f 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012ce:	2308      	movs	r3, #8
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012de:	2305      	movs	r3, #5
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4839      	ldr	r0, [pc, #228]	; (80013d0 <MX_GPIO_Init+0x218>)
 80012ea:	f002 fe2f 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	4835      	ldr	r0, [pc, #212]	; (80013d8 <MX_GPIO_Init+0x220>)
 8001304:	f002 fe22 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001308:	2304      	movs	r3, #4
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4830      	ldr	r0, [pc, #192]	; (80013dc <MX_GPIO_Init+0x224>)
 800131c:	f002 fe16 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8001320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001326:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4825      	ldr	r0, [pc, #148]	; (80013cc <MX_GPIO_Init+0x214>)
 8001338:	f002 fe08 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800133c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800134e:	2305      	movs	r3, #5
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4820      	ldr	r0, [pc, #128]	; (80013dc <MX_GPIO_Init+0x224>)
 800135a:	f002 fdf7 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800135e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001362:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4817      	ldr	r0, [pc, #92]	; (80013d4 <MX_GPIO_Init+0x21c>)
 8001378:	f002 fde8 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800137c:	2320      	movs	r3, #32
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <MX_GPIO_Init+0x21c>)
 8001390:	f002 fddc 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001394:	2302      	movs	r3, #2
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001398:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_GPIO_Init+0x214>)
 80013aa:	f002 fdcf 	bl	8003f4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2105      	movs	r1, #5
 80013b2:	2028      	movs	r0, #40	; 0x28
 80013b4:	f002 fd0e 	bl	8003dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b8:	2028      	movs	r0, #40	; 0x28
 80013ba:	f002 fd27 	bl	8003e0c <HAL_NVIC_EnableIRQ>

}
 80013be:	bf00      	nop
 80013c0:	3730      	adds	r7, #48	; 0x30
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/////////////////////////////////////////////////////////////////////////////
// Receive one char from UART. This function called by UART interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	6078      	str	r0, [r7, #4]
	uint8_t dummy = 0;													// Buffer for extract '\n' sign
 80013e8:	2300      	movs	r3, #0
 80013ea:	72fb      	strb	r3, [r7, #11]
	int peek_buff = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]

	if(!xQueueIsQueueFullFromISR(input_QueueHandle))
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_UART_RxCpltCallback+0x88>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00d f871 	bl	800e4dc <xQueueIsQueueFullFromISR>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d107      	bne.n	8001410 <HAL_UART_RxCpltCallback+0x30>
	{
		xQueueSendFromISR(input_QueueHandle, (void*)&user_data, NULL);		// Enqueue data byte
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_UART_RxCpltCallback+0x88>)
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	2200      	movs	r2, #0
 8001408:	4918      	ldr	r1, [pc, #96]	; (800146c <HAL_UART_RxCpltCallback+0x8c>)
 800140a:	f00c fd3d 	bl	800de88 <xQueueGenericSendFromISR>
 800140e:	e013      	b.n	8001438 <HAL_UART_RxCpltCallback+0x58>
	}
	else 																	// Queue is full
	{
		if(user_data == '\r')												// Check, is user_data has '\n' sign?
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_UART_RxCpltCallback+0x8c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b0d      	cmp	r3, #13
 8001418:	d10e      	bne.n	8001438 <HAL_UART_RxCpltCallback+0x58>
		{
			xQueueReceiveFromISR(input_QueueHandle, (void*)&dummy, NULL );	// Delete '\n' sign from queue
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_UART_RxCpltCallback+0x88>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f107 010b 	add.w	r1, r7, #11
 8001422:	2200      	movs	r2, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f00c feab 	bl	800e180 <xQueueReceiveFromISR>
			xQueueSendFromISR(input_QueueHandle, (void*)&user_data, NULL);  // Save user_data on the place of '\n'
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_UART_RxCpltCallback+0x88>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	2200      	movs	r2, #0
 8001432:	490e      	ldr	r1, [pc, #56]	; (800146c <HAL_UART_RxCpltCallback+0x8c>)
 8001434:	f00c fd28 	bl	800de88 <xQueueGenericSendFromISR>
		}
	}
	// Send notification to command task if user_data == '\n'
	if(user_data == '\r')
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_UART_RxCpltCallback+0x8c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b0d      	cmp	r3, #13
 8001440:	d108      	bne.n	8001454 <HAL_UART_RxCpltCallback+0x74>
	{
		xTaskNotifyFromISR(cmd_handl_taskHandle, 0, eNoAction, NULL);		// Send notify to start_com_handl task
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_UART_RxCpltCallback+0x90>)
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	2300      	movs	r3, #0
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2300      	movs	r3, #0
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	f00e f8ba 	bl	800f5c8 <xTaskGenericNotifyFromISR>
		//xTaskNotify(test_taskHandle, 0, eNoAction);

	}

	//HAL_UART_Receive_IT(&huart2, &user_data , 1);							// Enable receive data over UART again
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data , 1);
 8001454:	2201      	movs	r2, #1
 8001456:	4905      	ldr	r1, [pc, #20]	; (800146c <HAL_UART_RxCpltCallback+0x8c>)
 8001458:	4806      	ldr	r0, [pc, #24]	; (8001474 <HAL_UART_RxCpltCallback+0x94>)
 800145a:	f007 ff96 	bl	800938a <HAL_UART_Receive_IT>

	//HAL_GPIO_TogglePin(GPIOD, LED4);	// LED Blink for test  BLUE LED
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20004b88 	.word	0x20004b88
 800146c:	20004c00 	.word	0x20004c00
 8001470:	20004b94 	.word	0x20004b94
 8001474:	20004c64 	.word	0x20004c64

08001478 <led_effect_stop>:
/////////////////////////////////////////////////////////////////////////////
void led_effect_stop(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af02      	add	r7, sp, #8
	for(int  i = 0; i < 4; i++)									// Stop all timer
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	e00e      	b.n	80014a2 <led_effect_stop+0x2a>
	{
		xTimerStop(handler_led_timer[i], portMAX_DELAY);
 8001484:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <led_effect_stop+0x3c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800148c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	2200      	movs	r2, #0
 8001496:	2103      	movs	r1, #3
 8001498:	f00e fa72 	bl	800f980 <xTimerGenericCommand>
	for(int  i = 0; i < 4; i++)									// Stop all timer
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3301      	adds	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	dded      	ble.n	8001484 <led_effect_stop+0xc>
	}
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20004b78 	.word	0x20004b78

080014b8 <led_effect>:
/////////////////////////////////////////////////////////////////////////////
void led_effect (uint8_t effect)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af02      	add	r7, sp, #8
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	led_effect_stop();											// Stop current led effect
 80014c2:	f7ff ffd9 	bl	8001478 <led_effect_stop>
	xTimerStart(handler_led_timer[effect-1], portMAX_DELAY);	// Start needed led timer
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <led_effect+0x38>)
 80014cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80014d0:	f00d fb90 	bl	800ebf4 <xTaskGetTickCount>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2300      	movs	r3, #0
 80014de:	2101      	movs	r1, #1
 80014e0:	4620      	mov	r0, r4
 80014e2:	f00e fa4d 	bl	800f980 <xTimerGenericCommand>
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20004b78 	.word	0x20004b78

080014f4 <turn_off_all_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_off_all_leds(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fe:	480b      	ldr	r0, [pc, #44]	; (800152c <turn_off_all_leds+0x38>)
 8001500:	f002 fed8 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <turn_off_all_leds+0x38>)
 800150c:	f002 fed2 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <turn_off_all_leds+0x38>)
 8001518:	f002 fecc 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001522:	4802      	ldr	r0, [pc, #8]	; (800152c <turn_off_all_leds+0x38>)
 8001524:	f002 fec6 	bl	80042b4 <HAL_GPIO_WritePin>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40020c00 	.word	0x40020c00

08001530 <turn_on_all_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_on_all_leds(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <turn_on_all_leds+0x38>)
 800153c:	f002 feba 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001546:	4808      	ldr	r0, [pc, #32]	; (8001568 <turn_on_all_leds+0x38>)
 8001548:	f002 feb4 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <turn_on_all_leds+0x38>)
 8001554:	f002 feae 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155e:	4802      	ldr	r0, [pc, #8]	; (8001568 <turn_on_all_leds+0x38>)
 8001560:	f002 fea8 	bl	80042b4 <HAL_GPIO_WritePin>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40020c00 	.word	0x40020c00

0800156c <turn_on_even_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_on_even_leds(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001576:	480b      	ldr	r0, [pc, #44]	; (80015a4 <turn_on_even_leds+0x38>)
 8001578:	f002 fe9c 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <turn_on_even_leds+0x38>)
 8001584:	f002 fe96 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <turn_on_even_leds+0x38>)
 8001590:	f002 fe90 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800159a:	4802      	ldr	r0, [pc, #8]	; (80015a4 <turn_on_even_leds+0x38>)
 800159c:	f002 fe8a 	bl	80042b4 <HAL_GPIO_WritePin>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40020c00 	.word	0x40020c00

080015a8 <turn_on_odd_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_on_odd_leds(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b2:	480b      	ldr	r0, [pc, #44]	; (80015e0 <turn_on_odd_leds+0x38>)
 80015b4:	f002 fe7e 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015be:	4808      	ldr	r0, [pc, #32]	; (80015e0 <turn_on_odd_leds+0x38>)
 80015c0:	f002 fe78 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <turn_on_odd_leds+0x38>)
 80015cc:	f002 fe72 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d6:	4802      	ldr	r0, [pc, #8]	; (80015e0 <turn_on_odd_leds+0x38>)
 80015d8:	f002 fe6c 	bl	80042b4 <HAL_GPIO_WritePin>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40020c00 	.word	0x40020c00

080015e4 <LED_control>:
/////////////////////////////////////////////////////////////////////////////
void LED_control(int value)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e014      	b.n	800161c <LED_control+0x38>
	{
		HAL_GPIO_WritePin(GPIOD, (LED1 << i), ((value >> i)& 0x1));
 80015f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	b299      	uxth	r1, r3
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	fa42 f303 	asr.w	r3, r2, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	4806      	ldr	r0, [pc, #24]	; (800162c <LED_control+0x48>)
 8001612:	f002 fe4f 	bl	80042b4 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3301      	adds	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b03      	cmp	r3, #3
 8001620:	dde7      	ble.n	80015f2 <LED_control+0xe>
	}
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40020c00 	.word	0x40020c00

08001630 <LED_effect1>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect1(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();			// Toggle LEDs
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <LED_effect1+0x28>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f083 0301 	eor.w	r3, r3, #1
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <LED_effect1+0x28>)
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <LED_effect1+0x28>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <LED_effect1+0x1e>
 8001648:	f7ff ff54 	bl	80014f4 <turn_off_all_leds>
}
 800164c:	e001      	b.n	8001652 <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();			// Toggle LEDs
 800164e:	f7ff ff6f 	bl	8001530 <turn_on_all_leds>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000004 	.word	0x20000004

0800165c <LED_effect2>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect2(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <LED_effect2+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f083 0301 	eor.w	r3, r3, #1
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <LED_effect2+0x28>)
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <LED_effect2+0x28>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <LED_effect2+0x1e>
 8001674:	f7ff ff7a 	bl	800156c <turn_on_even_leds>
}
 8001678:	e001      	b.n	800167e <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800167a:	f7ff ff95 	bl	80015a8 <turn_on_odd_leds>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000008 	.word	0x20000008

08001688 <LED_effect3>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect3(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control (0x1 << (i++ % 4));  //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<, ?????????????????????????????????????????????
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <LED_effect3+0x2c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <LED_effect3+0x2c>)
 8001694:	600a      	str	r2, [r1, #0]
 8001696:	425a      	negs	r2, r3
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	f002 0203 	and.w	r2, r2, #3
 80016a0:	bf58      	it	pl
 80016a2:	4253      	negpl	r3, r2
 80016a4:	2201      	movs	r2, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff9a 	bl	80015e4 <LED_control>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200000d8 	.word	0x200000d8

080016b8 <LED_effect4>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect4(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control(0x08 >> (i++ % 4));  //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<, ?????????????????????????????????????????????
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <LED_effect4+0x2c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <LED_effect4+0x2c>)
 80016c4:	600a      	str	r2, [r1, #0]
 80016c6:	425a      	negs	r2, r3
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	bf58      	it	pl
 80016d2:	4253      	negpl	r3, r2
 80016d4:	2208      	movs	r2, #8
 80016d6:	fa42 f303 	asr.w	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff82 	bl	80015e4 <LED_control>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200000dc 	.word	0x200000dc

080016e8 <led_effect_callback>:
/////////////////////////////////////////////////////////////////////////////
void led_effect_callback(TimerHandle_t xTimer)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID( xTimer );
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f00e fc4b 	bl	800ff8c <pvTimerGetTimerID>
 80016f6:	4603      	mov	r3, r0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d816      	bhi.n	8001730 <led_effect_callback+0x48>
 8001702:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <led_effect_callback+0x20>)
 8001704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001708:	08001719 	.word	0x08001719
 800170c:	0800171f 	.word	0x0800171f
 8001710:	08001725 	.word	0x08001725
 8001714:	0800172b 	.word	0x0800172b

	switch(id)
	{
		case 1:
			LED_effect1();
 8001718:	f7ff ff8a 	bl	8001630 <LED_effect1>
			break;
 800171c:	e008      	b.n	8001730 <led_effect_callback+0x48>
		case 2:
			LED_effect2();
 800171e:	f7ff ff9d 	bl	800165c <LED_effect2>
			break;
 8001722:	e005      	b.n	8001730 <led_effect_callback+0x48>
		case 3:
			LED_effect3();
 8001724:	f7ff ffb0 	bl	8001688 <LED_effect3>
			break;
 8001728:	e002      	b.n	8001730 <led_effect_callback+0x48>
		case 4:
			LED_effect4();
 800172a:	f7ff ffc5 	bl	80016b8 <LED_effect4>
	}
}
 800172e:	e7ff      	b.n	8001730 <led_effect_callback+0x48>
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <process_command>:
/////////////////////////////////////////////////////////////////////////////
//
void process_command(command_t *cmd)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f82f 	bl	80017a4 <extract_command>

	switch(curr_state)
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <process_command+0x5c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b05      	cmp	r3, #5
 800174c:	dc1e      	bgt.n	800178c <process_command+0x54>
 800174e:	2b02      	cmp	r3, #2
 8001750:	da14      	bge.n	800177c <process_command+0x44>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <process_command+0x24>
 8001756:	2b01      	cmp	r3, #1
 8001758:	d008      	beq.n	800176c <process_command+0x34>
	 	case sRtcDateConfig:
	 	case sRtcReport:
	 		xTaskNotify(rtc_taskHandle, (uint32_t*) cmd, eSetValueWithOverwrite);
	 		break;
	 }
}
 800175a:	e017      	b.n	800178c <process_command+0x54>
			xTaskNotify(menu_taskHandle,(uint32_t*) cmd, eSetValueWithOverwrite);
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <process_command+0x60>)
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	2300      	movs	r3, #0
 8001764:	2203      	movs	r2, #3
 8001766:	f00d fe71 	bl	800f44c <xTaskGenericNotify>
			break;
 800176a:	e00f      	b.n	800178c <process_command+0x54>
	 		xTaskNotify(led_taskHandle, (uint32_t*) cmd, eSetValueWithOverwrite);
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <process_command+0x64>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	2300      	movs	r3, #0
 8001774:	2203      	movs	r2, #3
 8001776:	f00d fe69 	bl	800f44c <xTaskGenericNotify>
	 		break;
 800177a:	e007      	b.n	800178c <process_command+0x54>
	 		xTaskNotify(rtc_taskHandle, (uint32_t*) cmd, eSetValueWithOverwrite);
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <process_command+0x68>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	2300      	movs	r3, #0
 8001784:	2203      	movs	r2, #3
 8001786:	f00d fe61 	bl	800f44c <xTaskGenericNotify>
	 		break;
 800178a:	bf00      	nop
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200000cf 	.word	0x200000cf
 8001798:	20004ca8 	.word	0x20004ca8
 800179c:	20004b74 	.word	0x20004b74
 80017a0:	20004c08 	.word	0x20004c08

080017a4 <extract_command>:
/////////////////////////////////////////////////////////////////////////////
// Extract every char byte from input_QueueHandle into cmd struct
int extract_command(command_t *cmd)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(input_QueueHandle);			// Waiting data on the queue
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <extract_command+0x70>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00c fd65 	bl	800e280 <uxQueueMessagesWaiting>
 80017b6:	4603      	mov	r3, r0
 80017b8:	613b      	str	r3, [r7, #16]
	if(!status)													// If no any messages on the queue (exit from where)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <extract_command+0x22>
	{
		return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017c4:	e022      	b.n	800180c <extract_command+0x68>
	}

	uint8_t i = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	75fb      	strb	r3, [r7, #23]
	do{
		status = xQueueReceive(input_QueueHandle, &item, 0);
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <extract_command+0x70>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f107 010f 	add.w	r1, r7, #15
 80017d2:	2200      	movs	r2, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00c fbf3 	bl	800dfc0 <xQueueReceive>
 80017da:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d106      	bne.n	80017f0 <extract_command+0x4c>
		{
			cmd -> payload[i++] = item;
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	75fa      	strb	r2, [r7, #23]
 80017e8:	461a      	mov	r2, r3
 80017ea:	7bf9      	ldrb	r1, [r7, #15]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	5499      	strb	r1, [r3, r2]
		}
	}while(item != '\r');    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b0d      	cmp	r3, #13
 80017f4:	d1e9      	bne.n	80017ca <extract_command+0x26>

	cmd -> payload[i - 1] = '\0';		// add '\0' sign to the end
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	2100      	movs	r1, #0
 80017fe:	54d1      	strb	r1, [r2, r3]
	cmd -> len = i - 1;					// Save length in struct
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	3b01      	subs	r3, #1
 8001804:	b2da      	uxtb	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	729a      	strb	r2, [r3, #10]

	return 0;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20004b88 	.word	0x20004b88

08001818 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001820:	f00f f80c 	bl	801083c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	  osDelay(100);
 8001824:	2064      	movs	r0, #100	; 0x64
 8001826:	f00b febf 	bl	800d5a8 <osDelay>
 800182a:	e7fb      	b.n	8001824 <StartDefaultTask+0xc>

0800182c <start_menu_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_menu_task */
void start_menu_task(void *argument)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

	uint32_t cmd_addr;
	command_t *cmd;			// Create object of command_t
	int option;
	const char* msg_manu = "=======================\n\r"
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <start_menu_task+0xe4>)
 8001836:	60bb      	str	r3, [r7, #8]
						   "Exit             ----> 2\n\r"
						   "Enter your choice here: \n\r";

	while(1)
	{
		int status = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
		status = xQueueSend(print_QueueHandle, &msg_manu, portMAX_DELAY);		// Send data in print
 800183c:	4b35      	ldr	r3, [pc, #212]	; (8001914 <start_menu_task+0xe8>)
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	f107 0108 	add.w	r1, r7, #8
 8001844:	2300      	movs	r3, #0
 8001846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800184a:	f00c fa1f 	bl	800dc8c <xQueueGenericSend>
 800184e:	61f8      	str	r0, [r7, #28]
		if(status != pdPASS)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d002      	beq.n	800185c <start_menu_task+0x30>
		{
			// ERROR
			int ggg =999;
 8001856:	f240 33e7 	movw	r3, #999	; 0x3e7
 800185a:	61bb      	str	r3, [r7, #24]
		}

		//xQueueSendToBack(print_QueueHandle, &msg_manu, portMAX_DELAY);
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);					// Waiting for selected menu (waiting the choise) (from 'process_command' function)
 800185c:	f107 020c 	add.w	r2, r7, #12
 8001860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001864:	2100      	movs	r1, #0
 8001866:	2000      	movs	r0, #0
 8001868:	f00d fd90 	bl	800f38c <xTaskNotifyWait>
		cmd = (command_t*)cmd_addr;										// If number selected menu are selected, save it
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)												// Checking, must be one number, not more
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	7a9b      	ldrb	r3, [r3, #10]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d13a      	bne.n	80018ee <start_menu_task+0xc2>
		{
			option = cmd -> payload[0] - 48;							// Convert from char to number, and write it on struct
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	3b30      	subs	r3, #48	; 0x30
 800187e:	613b      	str	r3, [r7, #16]

			switch (option)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d01f      	beq.n	80018c6 <start_menu_task+0x9a>
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b02      	cmp	r3, #2
 800188a:	dc27      	bgt.n	80018dc <start_menu_task+0xb0>
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <start_menu_task+0x6e>
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d00b      	beq.n	80018b0 <start_menu_task+0x84>
 8001898:	e020      	b.n	80018dc <start_menu_task+0xb0>
			{
				case 0:													// If selected LED menu
					curr_state = sLedEffect;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <start_menu_task+0xec>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(led_taskHandle, 0 ,eNoAction);
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <start_menu_task+0xf0>)
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	2300      	movs	r3, #0
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	f00d fdcf 	bl	800f44c <xTaskGenericNotify>
					break;
 80018ae:	e027      	b.n	8001900 <start_menu_task+0xd4>

				case 1:
					curr_state = sRtcMenu;								// If selected RTC menu
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <start_menu_task+0xec>)
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
					xTaskNotify(rtc_taskHandle, 0, eNoAction);
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <start_menu_task+0xf4>)
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	2300      	movs	r3, #0
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	f00d fdc4 	bl	800f44c <xTaskGenericNotify>
					break;
 80018c4:	e01c      	b.n	8001900 <start_menu_task+0xd4>

				case 2:		// Implement EXIT   (Return to main menu and print it)
					//////////////////////////////////////////////////
					curr_state = sMainMenu;
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <start_menu_task+0xec>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
					xTaskNotify(menu_taskHandle, 0 ,eNoAction);
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <start_menu_task+0xf8>)
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	f00d fdb9 	bl	800f44c <xTaskGenericNotify>
					/////////////////////////////////////////////////
					break;
 80018da:	e011      	b.n	8001900 <start_menu_task+0xd4>

				default:															// If input sign uncorrect
					xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);			// Print message: /// Invalid option ///
 80018dc:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <start_menu_task+0xe8>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	2300      	movs	r3, #0
 80018e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e6:	4910      	ldr	r1, [pc, #64]	; (8001928 <start_menu_task+0xfc>)
 80018e8:	f00c f9d0 	bl	800dc8c <xQueueGenericSend>
					continue;														// Return to while(1)
 80018ec:	e00f      	b.n	800190e <start_menu_task+0xe2>
			}
		}
		else															// Invalid entry (entered more than one char)
		{
			xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);		// Print message: /// Invalid option ///
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <start_menu_task+0xe8>)
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	2300      	movs	r3, #0
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f8:	490b      	ldr	r1, [pc, #44]	; (8001928 <start_menu_task+0xfc>)
 80018fa:	f00c f9c7 	bl	800dc8c <xQueueGenericSend>
			continue;													// Return to while(1)
 80018fe:	e006      	b.n	800190e <start_menu_task+0xe2>
		}

		// Wait to run again when some other task notifies.
		// After notify return to "while(1)" main loop again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	2000      	movs	r0, #0
 800190a:	f00d fd3f 	bl	800f38c <xTaskNotifyWait>
	{
 800190e:	e793      	b.n	8001838 <start_menu_task+0xc>
 8001910:	080118f4 	.word	0x080118f4
 8001914:	20004c04 	.word	0x20004c04
 8001918:	200000cf 	.word	0x200000cf
 800191c:	20004b74 	.word	0x20004b74
 8001920:	20004c08 	.word	0x20004c08
 8001924:	20004ca8 	.word	0x20004ca8
 8001928:	20000000 	.word	0x20000000

0800192c <start_led_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_led_task */
void start_led_task(void *argument)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
//	{
//		osDelay(100);
//	}
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n\r"
 8001934:	4b46      	ldr	r3, [pc, #280]	; (8001a50 <start_led_task+0x124>)
 8001936:	60fb      	str	r3, [r7, #12]
						  "(none, e1, e2, e3, e4, on, off)  \n\r"
						  "Enter your choice here : \n\r";

	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);					  	// Wait for notification (selected LEDs effect)
 8001938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	2000      	movs	r0, #0
 8001942:	f00d fd23 	bl	800f38c <xTaskNotifyWait>
		xQueueSend(print_QueueHandle, &msg_led, portMAX_DELAY);			// Send data to print (Print LED menu)
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <start_led_task+0x128>)
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	f107 010c 	add.w	r1, r7, #12
 800194e:	2300      	movs	r3, #0
 8001950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001954:	f00c f99a 	bl	800dc8c <xQueueGenericSend>

		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);				// Wait for LED command
 8001958:	f107 0210 	add.w	r2, r7, #16
 800195c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001960:	2100      	movs	r1, #0
 8001962:	2000      	movs	r0, #0
 8001964:	f00d fd12 	bl	800f38c <xTaskNotifyWait>
		cmd = (command_t*) cmd_addr;
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	617b      	str	r3, [r7, #20]

		if(cmd -> len <= 4)											    // Check input command (max input size must be less then 4)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	7a9b      	ldrb	r3, [r3, #10]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d859      	bhi.n	8001a28 <start_led_task+0xfc>
		{
			// Select LED effect
			if( ! strcmp((char*)cmd->payload, "none" ))
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	4938      	ldr	r1, [pc, #224]	; (8001a58 <start_led_task+0x12c>)
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fc29 	bl	80001d0 <strcmp>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <start_led_task+0x5e>
			{
				led_effect_stop();
 8001984:	f7ff fd78 	bl	8001478 <led_effect_stop>
 8001988:	e056      	b.n	8001a38 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e1"))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	4933      	ldr	r1, [pc, #204]	; (8001a5c <start_led_task+0x130>)
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fc1e 	bl	80001d0 <strcmp>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <start_led_task+0x76>
			{
				led_effect(1);
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff fd8c 	bl	80014b8 <led_effect>
 80019a0:	e04a      	b.n	8001a38 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e2"))
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	492e      	ldr	r1, [pc, #184]	; (8001a60 <start_led_task+0x134>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fc12 	bl	80001d0 <strcmp>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <start_led_task+0x8e>
			{
				led_effect(2);
 80019b2:	2002      	movs	r0, #2
 80019b4:	f7ff fd80 	bl	80014b8 <led_effect>
 80019b8:	e03e      	b.n	8001a38 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e3"))
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	4929      	ldr	r1, [pc, #164]	; (8001a64 <start_led_task+0x138>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fc06 	bl	80001d0 <strcmp>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <start_led_task+0xa6>
			{
				led_effect(3);
 80019ca:	2003      	movs	r0, #3
 80019cc:	f7ff fd74 	bl	80014b8 <led_effect>
 80019d0:	e032      	b.n	8001a38 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e4"))
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4924      	ldr	r1, [pc, #144]	; (8001a68 <start_led_task+0x13c>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fbfa 	bl	80001d0 <strcmp>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d103      	bne.n	80019ea <start_led_task+0xbe>
			{
				led_effect(4);
 80019e2:	2004      	movs	r0, #4
 80019e4:	f7ff fd68 	bl	80014b8 <led_effect>
 80019e8:	e026      	b.n	8001a38 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "on"))			// Work
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	491f      	ldr	r1, [pc, #124]	; (8001a6c <start_led_task+0x140>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fbee 	bl	80001d0 <strcmp>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <start_led_task+0xd4>
			{
				turn_on_all_leds();
 80019fa:	f7ff fd99 	bl	8001530 <turn_on_all_leds>
 80019fe:	e01b      	b.n	8001a38 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "off"))		// Work
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	491b      	ldr	r1, [pc, #108]	; (8001a70 <start_led_task+0x144>)
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fbe3 	bl	80001d0 <strcmp>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <start_led_task+0xea>
			{
				turn_off_all_leds();
 8001a10:	f7ff fd70 	bl	80014f4 <turn_off_all_leds>
 8001a14:	e010      	b.n	8001a38 <start_led_task+0x10c>
			}
			else
			{
				xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);				// Print invalid massage
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <start_led_task+0x128>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a20:	4914      	ldr	r1, [pc, #80]	; (8001a74 <start_led_task+0x148>)
 8001a22:	f00c f933 	bl	800dc8c <xQueueGenericSend>
 8001a26:	e007      	b.n	8001a38 <start_led_task+0x10c>
			}
		}
		else
		{
			xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);					// Print invalid massage
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <start_led_task+0x128>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a32:	4910      	ldr	r1, [pc, #64]	; (8001a74 <start_led_task+0x148>)
 8001a34:	f00c f92a 	bl	800dc8c <xQueueGenericSend>
		}

		curr_state = sMainMenu;								// Return to mai menu
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <start_led_task+0x14c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
		xTaskNotify(menu_taskHandle, 0, eNoAction);			// Notify menu task
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <start_led_task+0x150>)
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	2300      	movs	r3, #0
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	f00d fd00 	bl	800f44c <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);					  	// Wait for notification (selected LEDs effect)
 8001a4c:	e774      	b.n	8001938 <start_led_task+0xc>
 8001a4e:	bf00      	nop
 8001a50:	080119ac 	.word	0x080119ac
 8001a54:	20004c04 	.word	0x20004c04
 8001a58:	08011a3c 	.word	0x08011a3c
 8001a5c:	08011a44 	.word	0x08011a44
 8001a60:	08011a48 	.word	0x08011a48
 8001a64:	08011a4c 	.word	0x08011a4c
 8001a68:	08011a50 	.word	0x08011a50
 8001a6c:	08011a54 	.word	0x08011a54
 8001a70:	08011a58 	.word	0x08011a58
 8001a74:	20000000 	.word	0x20000000
 8001a78:	200000cf 	.word	0x200000cf
 8001a7c:	20004ca8 	.word	0x20004ca8

08001a80 <start_rtc_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_rtc_task */
void start_rtc_task(void *argument)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_rtc_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f00b fd8d 	bl	800d5a8 <osDelay>
 8001a8e:	e7fb      	b.n	8001a88 <start_rtc_task+0x8>

08001a90 <start_print>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_print */
void start_print(void *argument)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	uint32_t *msg;

	while(1)
	{
		int status = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
		status = xQueueReceive(print_QueueHandle, &msg, portMAX_DELAY);
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <start_print+0x50>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f107 0108 	add.w	r1, r7, #8
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00c fa89 	bl	800dfc0 <xQueueReceive>
 8001aae:	6178      	str	r0, [r7, #20]
		if(status != pdPASS)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d002      	beq.n	8001abc <start_print+0x2c>
		{
			// ERROR
			int ggg =999;
 8001ab6:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001aba:	613b      	str	r3, [r7, #16]
		}
	    HAL_UART_Transmit(&huart2,(uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);					// Doesen't work =(
 8001abc:	68bc      	ldr	r4, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fb8f 	bl	80001e4 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ace:	4621      	mov	r1, r4
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <start_print+0x54>)
 8001ad2:	f007 fbc8 	bl	8009266 <HAL_UART_Transmit>
	    int ggg = 888;
 8001ad6:	f44f 735e 	mov.w	r3, #888	; 0x378
 8001ada:	60fb      	str	r3, [r7, #12]
	{
 8001adc:	e7dc      	b.n	8001a98 <start_print+0x8>
 8001ade:	bf00      	nop
 8001ae0:	20004c04 	.word	0x20004c04
 8001ae4:	20004c64 	.word	0x20004c64

08001ae8 <start_cmd_handl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_cmd_handl */
void start_cmd_handl(void *argument)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	command_t cmd;			// Create command variable

	for(;;)
	{
		// Waiting on notify from HAL_UART_RxCpltCallback
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2000      	movs	r0, #0
 8001afa:	f00d fc47 	bl	800f38c <xTaskNotifyWait>
 8001afe:	6178      	str	r0, [r7, #20]
		if(ret == pdTRUE)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d1f4      	bne.n	8001af0 <start_cmd_handl+0x8>
		{
			process_command(&cmd);
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fe14 	bl	8001738 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001b10:	e7ee      	b.n	8001af0 <start_cmd_handl+0x8>
	...

08001b14 <StartOLED_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLED_RTC */
void StartOLED_RTC(void *argument)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b0a0      	sub	sp, #128	; 0x80
 8001b18:	af04      	add	r7, sp, #16
 8001b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLED_RTC */
  /* Infinite loop */

	osDelay(1000);
 8001b1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b20:	f00b fd42 	bl	800d5a8 <osDelay>

		// For resd time
		char time[20] = {0};
 8001b24:	2300      	movs	r3, #0
 8001b26:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
		char date[40] = {0};
 8001b36:	2300      	movs	r3, #0
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
 8001b3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b3e:	2224      	movs	r2, #36	; 0x24
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00f f9c6 	bl	8010ed4 <memset>
		char time_buf[10] = {0};
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	809a      	strh	r2, [r3, #4]
		char time_buf_2[10] = {0};
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	809a      	strh	r2, [r3, #4]

		uint8_t seconds = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	75fb      	strb	r3, [r7, #23]
		uint8_t minutes = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	75bb      	strb	r3, [r7, #22]
		uint8_t hours = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	757b      	strb	r3, [r7, #21]
		uint8_t day = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	753b      	strb	r3, [r7, #20]
		uint8_t date_day = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	74fb      	strb	r3, [r7, #19]
		uint8_t mounth = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	74bb      	strb	r3, [r7, #18]
		uint8_t year = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	747b      	strb	r3, [r7, #17]
		uint8_t status = 9;
 8001b80:	2309      	movs	r3, #9
 8001b82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		//

		oled_init();
 8001b86:	f001 ff6b 	bl	8003a60 <oled_init>
		oled_update();
 8001b8a:	f001 ff15 	bl	80039b8 <oled_update>
		ds3231_I2C_init();
 8001b8e:	f7fe fd8b 	bl	80006a8 <ds3231_I2C_init>

		// Encoder
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b92:	213c      	movs	r1, #60	; 0x3c
 8001b94:	48c9      	ldr	r0, [pc, #804]	; (8001ebc <StartOLED_RTC+0x3a8>)
 8001b96:	f007 f804 	bl	8008ba2 <HAL_TIM_Encoder_Start>
		int32_t prevCounter = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
		//

		for(;;)
		{
			switch (klick)
 8001b9e:	4bc8      	ldr	r3, [pc, #800]	; (8001ec0 <StartOLED_RTC+0x3ac>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	d8fb      	bhi.n	8001b9e <StartOLED_RTC+0x8a>
 8001ba6:	a201      	add	r2, pc, #4	; (adr r2, 8001bac <StartOLED_RTC+0x98>)
 8001ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bac:	08001bed 	.word	0x08001bed
 8001bb0:	0800221d 	.word	0x0800221d
 8001bb4:	08001b9f 	.word	0x08001b9f
 8001bb8:	08002387 	.word	0x08002387
 8001bbc:	08001b9f 	.word	0x08001b9f
 8001bc0:	080024c3 	.word	0x080024c3
 8001bc4:	08001b9f 	.word	0x08001b9f
 8001bc8:	08002631 	.word	0x08002631
 8001bcc:	08001b9f 	.word	0x08001b9f
 8001bd0:	08002777 	.word	0x08002777
 8001bd4:	08001b9f 	.word	0x08001b9f
 8001bd8:	080028c7 	.word	0x080028c7
 8001bdc:	08001b9f 	.word	0x08001b9f
 8001be0:	080029ed 	.word	0x080029ed
 8001be4:	08001b9f 	.word	0x08001b9f
 8001be8:	08002b3f 	.word	0x08002b3f
			{
				case 0:					// Read time and data from DS3231

					strcat(time_buf, "TIME");
 8001bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe faf7 	bl	80001e4 <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfe:	4413      	add	r3, r2
 8001c00:	4ab0      	ldr	r2, [pc, #704]	; (8001ec4 <StartOLED_RTC+0x3b0>)
 8001c02:	6810      	ldr	r0, [r2, #0]
 8001c04:	6018      	str	r0, [r3, #0]
 8001c06:	7912      	ldrb	r2, [r2, #4]
 8001c08:	711a      	strb	r2, [r3, #4]
					graphics_text(40, 10, 3, time_buf);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0e:	2203      	movs	r2, #3
 8001c10:	210a      	movs	r1, #10
 8001c12:	2028      	movs	r0, #40	; 0x28
 8001c14:	f001 fe1c 	bl	8003850 <graphics_text>
					oled_update();
 8001c18:	f001 fece 	bl	80039b8 <oled_update>
					osDelay(2000);
 8001c1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c20:	f00b fcc2 	bl	800d5a8 <osDelay>
					clear();
 8001c24:	f001 fc60 	bl	80034e8 <clear>
					oled_update();
 8001c28:	f001 fec6 	bl	80039b8 <oled_update>

					while(klick == 0)
 8001c2c:	e2ef      	b.n	800220e <StartOLED_RTC+0x6fa>
					{
						memset(time, 0, sizeof(time));
 8001c2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c32:	2214      	movs	r2, #20
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f00f f94c 	bl	8010ed4 <memset>
						memset(date, 0, sizeof(date));
 8001c3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c40:	2228      	movs	r2, #40	; 0x28
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f00f f945 	bl	8010ed4 <memset>
						memset(time_buf, 0, sizeof(time_buf));
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	220a      	movs	r2, #10
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f00f f93e 	bl	8010ed4 <memset>
						memset(time_buf_2, 0, sizeof(time_buf_2));
 8001c58:	f107 0318 	add.w	r3, r7, #24
 8001c5c:	220a      	movs	r2, #10
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f00f f937 	bl	8010ed4 <memset>

						// 1. Read time from RTS
						// Red status (Detect DS3231)
						uint8_t buff= 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	72fb      	strb	r3, [r7, #11]
						status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 8001c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	2301      	movs	r3, #1
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	f107 030b 	add.w	r3, r7, #11
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	21d0      	movs	r1, #208	; 0xd0
 8001c80:	4891      	ldr	r0, [pc, #580]	; (8001ec8 <StartOLED_RTC+0x3b4>)
 8001c82:	f004 fc01 	bl	8006488 <HAL_I2C_Mem_Read>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if(status != HAL_OK )								// If DS3231 doesen'e detect
 8001c8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d050      	beq.n	8001d36 <StartOLED_RTC+0x222>
						{
							clear();
 8001c94:	f001 fc28 	bl	80034e8 <clear>
							while(status != HAL_OK)							// If ERROR
 8001c98:	e046      	b.n	8001d28 <StartOLED_RTC+0x214>
							{
								strcat(time_buf, "RTC ERROR");
 8001c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe faa0 	bl	80001e4 <strlen>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	4413      	add	r3, r2
 8001cae:	4987      	ldr	r1, [pc, #540]	; (8001ecc <StartOLED_RTC+0x3b8>)
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	cb03      	ldmia	r3!, {r0, r1}
 8001cb6:	6010      	str	r0, [r2, #0]
 8001cb8:	6051      	str	r1, [r2, #4]
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	8113      	strh	r3, [r2, #8]
								graphics_text(8, 5, 3, time_buf);
 8001cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	2105      	movs	r1, #5
 8001cc6:	2008      	movs	r0, #8
 8001cc8:	f001 fdc2 	bl	8003850 <graphics_text>
								oled_update();
 8001ccc:	f001 fe74 	bl	80039b8 <oled_update>
								memset(time_buf, 0, sizeof(time_buf));
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	220a      	movs	r2, #10
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f00f f8fb 	bl	8010ed4 <memset>
								osDelay(300);
 8001cde:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ce2:	f00b fc61 	bl	800d5a8 <osDelay>

								invert_rectangle(0, 0, 128, 32);
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	2100      	movs	r1, #0
 8001cec:	2000      	movs	r0, #0
 8001cee:	f001 fbcd 	bl	800348c <invert_rectangle>
								oled_update();
 8001cf2:	f001 fe61 	bl	80039b8 <oled_update>
								osDelay(300);
 8001cf6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001cfa:	f00b fc55 	bl	800d5a8 <osDelay>

								clear();
 8001cfe:	f001 fbf3 	bl	80034e8 <clear>
								oled_update();
 8001d02:	f001 fe59 	bl	80039b8 <oled_update>

								status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	9302      	str	r3, [sp, #8]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	f107 030b 	add.w	r3, r7, #11
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2301      	movs	r3, #1
 8001d18:	2200      	movs	r2, #0
 8001d1a:	21d0      	movs	r1, #208	; 0xd0
 8001d1c:	486a      	ldr	r0, [pc, #424]	; (8001ec8 <StartOLED_RTC+0x3b4>)
 8001d1e:	f004 fbb3 	bl	8006488 <HAL_I2C_Mem_Read>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							while(status != HAL_OK)							// If ERROR
 8001d28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1b4      	bne.n	8001c9a <StartOLED_RTC+0x186>
							}
							clear();
 8001d30:	f001 fbda 	bl	80034e8 <clear>
 8001d34:	e26b      	b.n	800220e <StartOLED_RTC+0x6fa>
						}

						else	// If all DS3231 detected, read time and date
						{
							ds3231_read(DS3231_REGISTER_SECONDS_DEFAULT, &seconds);
 8001d36:	f107 0317 	add.w	r3, r7, #23
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7fe fcbb 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_MINUTES_DEFAULT, &minutes);
 8001d42:	f107 0316 	add.w	r3, r7, #22
 8001d46:	4619      	mov	r1, r3
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f7fe fcb5 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_HOURS_DEFAULT, &hours);
 8001d4e:	f107 0315 	add.w	r3, r7, #21
 8001d52:	4619      	mov	r1, r3
 8001d54:	2002      	movs	r0, #2
 8001d56:	f7fe fcaf 	bl	80006b8 <ds3231_read>

							ds3231_read(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &day);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	2003      	movs	r0, #3
 8001d62:	f7fe fca9 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_DATE_DEFAULT, &date_day);
 8001d66:	f107 0313 	add.w	r3, r7, #19
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	2004      	movs	r0, #4
 8001d6e:	f7fe fca3 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_MONTH_DEFAULT, &mounth);
 8001d72:	f107 0312 	add.w	r3, r7, #18
 8001d76:	4619      	mov	r1, r3
 8001d78:	2005      	movs	r0, #5
 8001d7a:	f7fe fc9d 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_YEAR_DEFAULT, &year);
 8001d7e:	f107 0311 	add.w	r3, r7, #17
 8001d82:	4619      	mov	r1, r3
 8001d84:	2006      	movs	r0, #6
 8001d86:	f7fe fc97 	bl	80006b8 <ds3231_read>

							// Convert in string
							// Print minutes on OLED
							if(hours < 10)
 8001d8a:	7d7b      	ldrb	r3, [r7, #21]
 8001d8c:	2b09      	cmp	r3, #9
 8001d8e:	d835      	bhi.n	8001dfc <StartOLED_RTC+0x2e8>
							{
								memset(time_buf, 0, sizeof(time_buf));
 8001d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d94:	220a      	movs	r2, #10
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f00f f89b 	bl	8010ed4 <memset>
								sprintf(time_buf, "%c", '0');
 8001d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da2:	2230      	movs	r2, #48	; 0x30
 8001da4:	494a      	ldr	r1, [pc, #296]	; (8001ed0 <StartOLED_RTC+0x3bc>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f00f f9c0 	bl	801112c <siprintf>
								sprintf(time_buf_2, "%d", hours);
 8001dac:	7d7b      	ldrb	r3, [r7, #21]
 8001dae:	461a      	mov	r2, r3
 8001db0:	f107 0318 	add.w	r3, r7, #24
 8001db4:	4947      	ldr	r1, [pc, #284]	; (8001ed4 <StartOLED_RTC+0x3c0>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00f f9b8 	bl	801112c <siprintf>
								strcat(time_buf, time_buf_2);
 8001dbc:	f107 0218 	add.w	r2, r7, #24
 8001dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00f f9d0 	bl	801116c <strcat>
								strcat(time, time_buf);
 8001dcc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001dd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f00f f9c8 	bl	801116c <strcat>
								strcat(time, ":");
 8001ddc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe f9ff 	bl	80001e4 <strlen>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001dee:	4413      	add	r3, r2
 8001df0:	4939      	ldr	r1, [pc, #228]	; (8001ed8 <StartOLED_RTC+0x3c4>)
 8001df2:	461a      	mov	r2, r3
 8001df4:	460b      	mov	r3, r1
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	8013      	strh	r3, [r2, #0]
 8001dfa:	e025      	b.n	8001e48 <StartOLED_RTC+0x334>
							}
							else
							{
								sprintf(time_buf, "%d", hours);
 8001dfc:	7d7b      	ldrb	r3, [r7, #21]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e04:	4933      	ldr	r1, [pc, #204]	; (8001ed4 <StartOLED_RTC+0x3c0>)
 8001e06:	4618      	mov	r0, r3
 8001e08:	f00f f990 	bl	801112c <siprintf>
								strcat(time, time_buf);
 8001e0c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f00f f9a8 	bl	801116c <strcat>
								strcat(time, ":");
 8001e1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe f9df 	bl	80001e4 <strlen>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e2e:	4413      	add	r3, r2
 8001e30:	4929      	ldr	r1, [pc, #164]	; (8001ed8 <StartOLED_RTC+0x3c4>)
 8001e32:	461a      	mov	r2, r3
 8001e34:	460b      	mov	r3, r1
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	8013      	strh	r3, [r2, #0]
								memset(time_buf, 0, sizeof(time_buf));
 8001e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3e:	220a      	movs	r2, #10
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f00f f846 	bl	8010ed4 <memset>
							}

							// Print minutes on OLED
							if(minutes < 10)
 8001e48:	7dbb      	ldrb	r3, [r7, #22]
 8001e4a:	2b09      	cmp	r3, #9
 8001e4c:	d846      	bhi.n	8001edc <StartOLED_RTC+0x3c8>
							{
								memset(time_buf, 0, sizeof(time_buf));
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	220a      	movs	r2, #10
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f00f f83c 	bl	8010ed4 <memset>
								sprintf(time_buf, "%c", '0');
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	2230      	movs	r2, #48	; 0x30
 8001e62:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <StartOLED_RTC+0x3bc>)
 8001e64:	4618      	mov	r0, r3
 8001e66:	f00f f961 	bl	801112c <siprintf>
								sprintf(time_buf_2, "%d", minutes);
 8001e6a:	7dbb      	ldrb	r3, [r7, #22]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f107 0318 	add.w	r3, r7, #24
 8001e72:	4918      	ldr	r1, [pc, #96]	; (8001ed4 <StartOLED_RTC+0x3c0>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f00f f959 	bl	801112c <siprintf>
								strcat(time_buf, time_buf_2);
 8001e7a:	f107 0218 	add.w	r2, r7, #24
 8001e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00f f971 	bl	801116c <strcat>
								strcat(time, time_buf);
 8001e8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00f f969 	bl	801116c <strcat>
								strcat(time, ":");
 8001e9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe f9a0 	bl	80001e4 <strlen>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001eac:	4413      	add	r3, r2
 8001eae:	490a      	ldr	r1, [pc, #40]	; (8001ed8 <StartOLED_RTC+0x3c4>)
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	8013      	strh	r3, [r2, #0]
 8001eb8:	e036      	b.n	8001f28 <StartOLED_RTC+0x414>
 8001eba:	bf00      	nop
 8001ebc:	20004bb8 	.word	0x20004bb8
 8001ec0:	200000d4 	.word	0x200000d4
 8001ec4:	08011a5c 	.word	0x08011a5c
 8001ec8:	20004ac8 	.word	0x20004ac8
 8001ecc:	08011a64 	.word	0x08011a64
 8001ed0:	08011a70 	.word	0x08011a70
 8001ed4:	08011a74 	.word	0x08011a74
 8001ed8:	08011a78 	.word	0x08011a78
							}
							else
							{
								sprintf(time_buf, "%d", minutes);
 8001edc:	7dbb      	ldrb	r3, [r7, #22]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	49d7      	ldr	r1, [pc, #860]	; (8002244 <StartOLED_RTC+0x730>)
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f00f f920 	bl	801112c <siprintf>
								strcat(time, time_buf);
 8001eec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ef0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f00f f938 	bl	801116c <strcat>
								strcat(time, ":");
 8001efc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe f96f 	bl	80001e4 <strlen>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f0e:	4413      	add	r3, r2
 8001f10:	49cd      	ldr	r1, [pc, #820]	; (8002248 <StartOLED_RTC+0x734>)
 8001f12:	461a      	mov	r2, r3
 8001f14:	460b      	mov	r3, r1
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	8013      	strh	r3, [r2, #0]
								memset(time_buf, 0, sizeof(time_buf));
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	220a      	movs	r2, #10
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f00e ffd6 	bl	8010ed4 <memset>
							}

							// Print seconds on OLED
							if(seconds == 0)
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d103      	bne.n	8001f36 <StartOLED_RTC+0x422>
							{
								clear();
 8001f2e:	f001 fadb 	bl	80034e8 <clear>
								oled_update();
 8001f32:	f001 fd41 	bl	80039b8 <oled_update>
							}
							if(seconds < 10)
 8001f36:	7dfb      	ldrb	r3, [r7, #23]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d826      	bhi.n	8001f8a <StartOLED_RTC+0x476>
							{
								memset(time_buf, 0, sizeof(time_buf));
 8001f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f40:	220a      	movs	r2, #10
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f00e ffc5 	bl	8010ed4 <memset>
								sprintf(time_buf, "%c", '0');
 8001f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4e:	2230      	movs	r2, #48	; 0x30
 8001f50:	49be      	ldr	r1, [pc, #760]	; (800224c <StartOLED_RTC+0x738>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	f00f f8ea 	bl	801112c <siprintf>
								sprintf(time_buf_2, "%d", seconds);
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	49b8      	ldr	r1, [pc, #736]	; (8002244 <StartOLED_RTC+0x730>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f00f f8e2 	bl	801112c <siprintf>
								strcat(time_buf, time_buf_2);
 8001f68:	f107 0218 	add.w	r2, r7, #24
 8001f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f00f f8fa 	bl	801116c <strcat>
								strcat(time, time_buf);
 8001f78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f00f f8f2 	bl	801116c <strcat>
 8001f88:	e016      	b.n	8001fb8 <StartOLED_RTC+0x4a4>
							}
							else
							{
								sprintf(time_buf, "%d", seconds);
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f92:	49ac      	ldr	r1, [pc, #688]	; (8002244 <StartOLED_RTC+0x730>)
 8001f94:	4618      	mov	r0, r3
 8001f96:	f00f f8c9 	bl	801112c <siprintf>
								strcat(time, time_buf);
 8001f9a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f00f f8e1 	bl	801116c <strcat>
								memset(time_buf, 0, sizeof(time_buf));
 8001faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fae:	220a      	movs	r2, #10
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00e ff8e 	bl	8010ed4 <memset>
							}

							uint8_t second_line = seconds*2;
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
							line_h(5, second_line, 19, 2, add);
 8001fc0:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2302      	movs	r3, #2
 8001fca:	2213      	movs	r2, #19
 8001fcc:	2005      	movs	r0, #5
 8001fce:	f001 fab3 	bl	8003538 <line_h>
	//						line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode);
							//invert_rectangle(5, 15, second_line, 5);

							// Print date
							sprintf(time_buf, "%d", date_day);
 8001fd2:	7cfb      	ldrb	r3, [r7, #19]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fda:	499a      	ldr	r1, [pc, #616]	; (8002244 <StartOLED_RTC+0x730>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00f f8a5 	bl	801112c <siprintf>
							strcat(date, time_buf);
 8001fe2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00f f8bd 	bl	801116c <strcat>
							strcat(date, ".");
 8001ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe f8f4 	bl	80001e4 <strlen>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002004:	4413      	add	r3, r2
 8002006:	4992      	ldr	r1, [pc, #584]	; (8002250 <StartOLED_RTC+0x73c>)
 8002008:	461a      	mov	r2, r3
 800200a:	460b      	mov	r3, r1
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 8002010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002014:	220a      	movs	r2, #10
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f00e ff5b 	bl	8010ed4 <memset>

							sprintf(time_buf, "%d", mounth);
 800201e:	7cbb      	ldrb	r3, [r7, #18]
 8002020:	461a      	mov	r2, r3
 8002022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002026:	4987      	ldr	r1, [pc, #540]	; (8002244 <StartOLED_RTC+0x730>)
 8002028:	4618      	mov	r0, r3
 800202a:	f00f f87f 	bl	801112c <siprintf>
							strcat(date, time_buf);
 800202e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002032:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f00f f897 	bl	801116c <strcat>
							strcat(date, ".");
 800203e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe f8ce 	bl	80001e4 <strlen>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002050:	4413      	add	r3, r2
 8002052:	497f      	ldr	r1, [pc, #508]	; (8002250 <StartOLED_RTC+0x73c>)
 8002054:	461a      	mov	r2, r3
 8002056:	460b      	mov	r3, r1
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 800205c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002060:	220a      	movs	r2, #10
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f00e ff35 	bl	8010ed4 <memset>

							sprintf(time_buf, "%d", year);
 800206a:	7c7b      	ldrb	r3, [r7, #17]
 800206c:	461a      	mov	r2, r3
 800206e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002072:	4974      	ldr	r1, [pc, #464]	; (8002244 <StartOLED_RTC+0x730>)
 8002074:	4618      	mov	r0, r3
 8002076:	f00f f859 	bl	801112c <siprintf>
							strcat(date, "20");
 800207a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe f8b0 	bl	80001e4 <strlen>
 8002084:	4603      	mov	r3, r0
 8002086:	461a      	mov	r2, r3
 8002088:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800208c:	4413      	add	r3, r2
 800208e:	4a71      	ldr	r2, [pc, #452]	; (8002254 <StartOLED_RTC+0x740>)
 8002090:	8811      	ldrh	r1, [r2, #0]
 8002092:	7892      	ldrb	r2, [r2, #2]
 8002094:	8019      	strh	r1, [r3, #0]
 8002096:	709a      	strb	r2, [r3, #2]
							strcat(date, time_buf);
 8002098:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800209c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f00f f862 	bl	801116c <strcat>
							memset(time_buf, 0, sizeof(time_buf));
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	220a      	movs	r2, #10
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f00e ff0f 	bl	8010ed4 <memset>

							// day
							switch (day)
 80020b6:	7d3b      	ldrb	r3, [r7, #20]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	f200 8093 	bhi.w	80021e6 <StartOLED_RTC+0x6d2>
 80020c0:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <StartOLED_RTC+0x5b4>)
 80020c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	080020e5 	.word	0x080020e5
 80020cc:	08002107 	.word	0x08002107
 80020d0:	0800212d 	.word	0x0800212d
 80020d4:	08002157 	.word	0x08002157
 80020d8:	0800217d 	.word	0x0800217d
 80020dc:	0800219f 	.word	0x0800219f
 80020e0:	080021c5 	.word	0x080021c5
							{
								case 1:
									strcat(date, " Monday");
 80020e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe f87b 	bl	80001e4 <strlen>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461a      	mov	r2, r3
 80020f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f6:	4413      	add	r3, r2
 80020f8:	4957      	ldr	r1, [pc, #348]	; (8002258 <StartOLED_RTC+0x744>)
 80020fa:	461a      	mov	r2, r3
 80020fc:	460b      	mov	r3, r1
 80020fe:	cb03      	ldmia	r3!, {r0, r1}
 8002100:	6010      	str	r0, [r2, #0]
 8002102:	6051      	str	r1, [r2, #4]
									break;
 8002104:	e06f      	b.n	80021e6 <StartOLED_RTC+0x6d2>
								case 2:
									strcat(date, " Tuesday");
 8002106:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe f86a 	bl	80001e4 <strlen>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002118:	4413      	add	r3, r2
 800211a:	4950      	ldr	r1, [pc, #320]	; (800225c <StartOLED_RTC+0x748>)
 800211c:	461a      	mov	r2, r3
 800211e:	460b      	mov	r3, r1
 8002120:	cb03      	ldmia	r3!, {r0, r1}
 8002122:	6010      	str	r0, [r2, #0]
 8002124:	6051      	str	r1, [r2, #4]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	7213      	strb	r3, [r2, #8]
									break;
 800212a:	e05c      	b.n	80021e6 <StartOLED_RTC+0x6d2>
								case 3:
									strcat(date, " Wednesday");
 800212c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe f857 	bl	80001e4 <strlen>
 8002136:	4603      	mov	r3, r0
 8002138:	461a      	mov	r2, r3
 800213a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800213e:	4413      	add	r3, r2
 8002140:	4947      	ldr	r1, [pc, #284]	; (8002260 <StartOLED_RTC+0x74c>)
 8002142:	461a      	mov	r2, r3
 8002144:	460b      	mov	r3, r1
 8002146:	cb03      	ldmia	r3!, {r0, r1}
 8002148:	6010      	str	r0, [r2, #0]
 800214a:	6051      	str	r1, [r2, #4]
 800214c:	8819      	ldrh	r1, [r3, #0]
 800214e:	789b      	ldrb	r3, [r3, #2]
 8002150:	8111      	strh	r1, [r2, #8]
 8002152:	7293      	strb	r3, [r2, #10]
									break;
 8002154:	e047      	b.n	80021e6 <StartOLED_RTC+0x6d2>
								case 4:
									strcat(date, " Thursday");
 8002156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f842 	bl	80001e4 <strlen>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002168:	4413      	add	r3, r2
 800216a:	493e      	ldr	r1, [pc, #248]	; (8002264 <StartOLED_RTC+0x750>)
 800216c:	461a      	mov	r2, r3
 800216e:	460b      	mov	r3, r1
 8002170:	cb03      	ldmia	r3!, {r0, r1}
 8002172:	6010      	str	r0, [r2, #0]
 8002174:	6051      	str	r1, [r2, #4]
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	8113      	strh	r3, [r2, #8]
									break;
 800217a:	e034      	b.n	80021e6 <StartOLED_RTC+0x6d2>
								case 5:
									strcat(date, " Friday");
 800217c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f82f 	bl	80001e4 <strlen>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800218e:	4413      	add	r3, r2
 8002190:	4935      	ldr	r1, [pc, #212]	; (8002268 <StartOLED_RTC+0x754>)
 8002192:	461a      	mov	r2, r3
 8002194:	460b      	mov	r3, r1
 8002196:	cb03      	ldmia	r3!, {r0, r1}
 8002198:	6010      	str	r0, [r2, #0]
 800219a:	6051      	str	r1, [r2, #4]
									break;
 800219c:	e023      	b.n	80021e6 <StartOLED_RTC+0x6d2>
								case 6:
									strcat(date, " Saturday");
 800219e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f81e 	bl	80001e4 <strlen>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021b0:	4413      	add	r3, r2
 80021b2:	492e      	ldr	r1, [pc, #184]	; (800226c <StartOLED_RTC+0x758>)
 80021b4:	461a      	mov	r2, r3
 80021b6:	460b      	mov	r3, r1
 80021b8:	cb03      	ldmia	r3!, {r0, r1}
 80021ba:	6010      	str	r0, [r2, #0]
 80021bc:	6051      	str	r1, [r2, #4]
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	8113      	strh	r3, [r2, #8]
									break;
 80021c2:	e010      	b.n	80021e6 <StartOLED_RTC+0x6d2>
								case 7:
									strcat(date, " Sunday");
 80021c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe f80b 	bl	80001e4 <strlen>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021d6:	4413      	add	r3, r2
 80021d8:	4925      	ldr	r1, [pc, #148]	; (8002270 <StartOLED_RTC+0x75c>)
 80021da:	461a      	mov	r2, r3
 80021dc:	460b      	mov	r3, r1
 80021de:	cb03      	ldmia	r3!, {r0, r1}
 80021e0:	6010      	str	r0, [r2, #0]
 80021e2:	6051      	str	r1, [r2, #4]
									break;
 80021e4:	bf00      	nop
							}

							graphics_text(40, 0, 3, time);
 80021e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021ea:	2203      	movs	r2, #3
 80021ec:	2100      	movs	r1, #0
 80021ee:	2028      	movs	r0, #40	; 0x28
 80021f0:	f001 fb2e 	bl	8003850 <graphics_text>
							graphics_text(0, 24, 2, date);
 80021f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021f8:	2202      	movs	r2, #2
 80021fa:	2118      	movs	r1, #24
 80021fc:	2000      	movs	r0, #0
 80021fe:	f001 fb27 	bl	8003850 <graphics_text>
							oled_update();
 8002202:	f001 fbd9 	bl	80039b8 <oled_update>

							osDelay(1000);
 8002206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800220a:	f00b f9cd 	bl	800d5a8 <osDelay>
					while(klick == 0)
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <StartOLED_RTC+0x760>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	f43f ad0b 	beq.w	8001c2e <StartOLED_RTC+0x11a>
						}
					}
			  		break;
 8002218:	f000 bccd 	b.w	8002bb6 <StartOLED_RTC+0x10a2>


				case 1:
					// Set yer
					graphics_text(0, 0, 1, "   SET:");
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <StartOLED_RTC+0x764>)
 800221e:	2201      	movs	r2, #1
 8002220:	2100      	movs	r1, #0
 8002222:	2000      	movs	r0, #0
 8002224:	f001 fb14 	bl	8003850 <graphics_text>
					graphics_text(0, 8, 1, "YEAR   ");
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <StartOLED_RTC+0x768>)
 800222a:	2201      	movs	r2, #1
 800222c:	2108      	movs	r1, #8
 800222e:	2000      	movs	r0, #0
 8002230:	f001 fb0e 	bl	8003850 <graphics_text>
					oled_update();
 8002234:	f001 fbc0 	bl	80039b8 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);								// Start count encoder from 0
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <StartOLED_RTC+0x76c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2200      	movs	r2, #0
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 1)
 8002240:	e071      	b.n	8002326 <StartOLED_RTC+0x812>
 8002242:	bf00      	nop
 8002244:	08011a74 	.word	0x08011a74
 8002248:	08011a78 	.word	0x08011a78
 800224c:	08011a70 	.word	0x08011a70
 8002250:	08011a7c 	.word	0x08011a7c
 8002254:	08011a80 	.word	0x08011a80
 8002258:	08011a84 	.word	0x08011a84
 800225c:	08011a8c 	.word	0x08011a8c
 8002260:	08011a98 	.word	0x08011a98
 8002264:	08011aa4 	.word	0x08011aa4
 8002268:	08011ab0 	.word	0x08011ab0
 800226c:	08011ab8 	.word	0x08011ab8
 8002270:	08011ac4 	.word	0x08011ac4
 8002274:	200000d4 	.word	0x200000d4
 8002278:	08011acc 	.word	0x08011acc
 800227c:	08011ad4 	.word	0x08011ad4
 8002280:	20004bb8 	.word	0x20004bb8
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002284:	4b99      	ldr	r3, [pc, #612]	; (80024ec <StartOLED_RTC+0x9d8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	461a      	mov	r2, r3
 800228c:	4b98      	ldr	r3, [pc, #608]	; (80024f0 <StartOLED_RTC+0x9dc>)
 800228e:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002290:	4b97      	ldr	r3, [pc, #604]	; (80024f0 <StartOLED_RTC+0x9dc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3b01      	subs	r3, #1
 8002296:	b29b      	uxth	r3, r3
 8002298:	0fda      	lsrs	r2, r3, #31
 800229a:	4413      	add	r3, r2
 800229c:	105b      	asrs	r3, r3, #1
 800229e:	425b      	negs	r3, r3
 80022a0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80022a4:	337f      	adds	r3, #127	; 0x7f
 80022a6:	4a92      	ldr	r2, [pc, #584]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80022a8:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 80022aa:	4b91      	ldr	r3, [pc, #580]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d038      	beq.n	8002326 <StartOLED_RTC+0x812>
						{
							prevCounter = currCounter;
 80022b4:	4b8e      	ldr	r3, [pc, #568]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]
							if(currCounter > 100)									// Encoder count from 0 to 100
 80022ba:	4b8d      	ldr	r3, [pc, #564]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	dd06      	ble.n	80022d0 <StartOLED_RTC+0x7bc>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 80022c2:	4b8a      	ldr	r3, [pc, #552]	; (80024ec <StartOLED_RTC+0x9d8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 80022ca:	4b89      	ldr	r3, [pc, #548]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 80022d0:	4b87      	ldr	r3, [pc, #540]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da06      	bge.n	80022e6 <StartOLED_RTC+0x7d2>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 80022d8:	4b84      	ldr	r3, [pc, #528]	; (80024ec <StartOLED_RTC+0x9d8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 80022e0:	4b83      	ldr	r3, [pc, #524]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 80022e6:	4b83      	ldr	r3, [pc, #524]	; (80024f4 <StartOLED_RTC+0x9e0>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	2110      	movs	r1, #16
 80022ec:	2000      	movs	r0, #0
 80022ee:	f001 faaf 	bl	8003850 <graphics_text>
							oled_update();
 80022f2:	f001 fb61 	bl	80039b8 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 80022f6:	4b7e      	ldr	r3, [pc, #504]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fe:	497e      	ldr	r1, [pc, #504]	; (80024f8 <StartOLED_RTC+0x9e4>)
 8002300:	4618      	mov	r0, r3
 8002302:	f00e ff13 	bl	801112c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230a:	2201      	movs	r2, #1
 800230c:	2110      	movs	r1, #16
 800230e:	2000      	movs	r0, #0
 8002310:	f001 fa9e 	bl	8003850 <graphics_text>
							oled_update();
 8002314:	f001 fb50 	bl	80039b8 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231c:	220a      	movs	r2, #10
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f00e fdd7 	bl	8010ed4 <memset>
					while(klick == 1)
 8002326:	4b75      	ldr	r3, [pc, #468]	; (80024fc <StartOLED_RTC+0x9e8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d0aa      	beq.n	8002284 <StartOLED_RTC+0x770>
						}
					}
					if(klick == 2)
 800232e:	4b73      	ldr	r3, [pc, #460]	; (80024fc <StartOLED_RTC+0x9e8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b02      	cmp	r3, #2
 8002334:	f040 842f 	bne.w	8002b96 <StartOLED_RTC+0x1082>
					{
						// write data
						ds3231_set(DS3231_REGISTER_YEAR_DEFAULT, &prevCounter);
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	4619      	mov	r1, r3
 800233e:	2006      	movs	r0, #6
 8002340:	f7fe fa7a 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002344:	4b6e      	ldr	r3, [pc, #440]	; (8002500 <StartOLED_RTC+0x9ec>)
 8002346:	2201      	movs	r2, #1
 8002348:	2110      	movs	r1, #16
 800234a:	2000      	movs	r0, #0
 800234c:	f001 fa80 	bl	8003850 <graphics_text>
						oled_update();
 8002350:	f001 fb32 	bl	80039b8 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002354:	4b6b      	ldr	r3, [pc, #428]	; (8002504 <StartOLED_RTC+0x9f0>)
 8002356:	2201      	movs	r2, #1
 8002358:	2110      	movs	r1, #16
 800235a:	2000      	movs	r0, #0
 800235c:	f001 fa78 	bl	8003850 <graphics_text>
						oled_update();
 8002360:	f001 fb2a 	bl	80039b8 <oled_update>

						osDelay(800);
 8002364:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002368:	f00b f91e 	bl	800d5a8 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 800236c:	4b64      	ldr	r3, [pc, #400]	; (8002500 <StartOLED_RTC+0x9ec>)
 800236e:	2201      	movs	r2, #1
 8002370:	2110      	movs	r1, #16
 8002372:	2000      	movs	r0, #0
 8002374:	f001 fa6c 	bl	8003850 <graphics_text>
						oled_update();
 8002378:	f001 fb1e 	bl	80039b8 <oled_update>

						klick = 3;
 800237c:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <StartOLED_RTC+0x9e8>)
 800237e:	2203      	movs	r2, #3
 8002380:	601a      	str	r2, [r3, #0]
					}
					break;
 8002382:	f000 bc08 	b.w	8002b96 <StartOLED_RTC+0x1082>

				case 3:
					// set month
					graphics_text(0, 8, 1, "MONTH");
 8002386:	4b60      	ldr	r3, [pc, #384]	; (8002508 <StartOLED_RTC+0x9f4>)
 8002388:	2201      	movs	r2, #1
 800238a:	2108      	movs	r1, #8
 800238c:	2000      	movs	r0, #0
 800238e:	f001 fa5f 	bl	8003850 <graphics_text>
					oled_update();
 8002392:	f001 fb11 	bl	80039b8 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 8002396:	4b55      	ldr	r3, [pc, #340]	; (80024ec <StartOLED_RTC+0x9d8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2201      	movs	r2, #1
 800239c:	625a      	str	r2, [r3, #36]	; 0x24
					currCounter = 1;
 800239e:	4b54      	ldr	r3, [pc, #336]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

					while(klick == 3)
 80023a4:	e050      	b.n	8002448 <StartOLED_RTC+0x934>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 80023a6:	4b51      	ldr	r3, [pc, #324]	; (80024ec <StartOLED_RTC+0x9d8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80023b0:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80023b2:	4b4f      	ldr	r3, [pc, #316]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	0fda      	lsrs	r2, r3, #31
 80023bc:	4413      	add	r3, r2
 80023be:	105b      	asrs	r3, r3, #1
 80023c0:	425b      	negs	r3, r3
 80023c2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80023c6:	337f      	adds	r3, #127	; 0x7f
 80023c8:	4a49      	ldr	r2, [pc, #292]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80023ca:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 80023cc:	4b48      	ldr	r3, [pc, #288]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d038      	beq.n	8002448 <StartOLED_RTC+0x934>
						{
							prevCounter = currCounter;
 80023d6:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60fb      	str	r3, [r7, #12]

							if(currCounter > 12)
 80023dc:	4b44      	ldr	r3, [pc, #272]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b0c      	cmp	r3, #12
 80023e2:	dd06      	ble.n	80023f2 <StartOLED_RTC+0x8de>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 80023e4:	4b41      	ldr	r3, [pc, #260]	; (80024ec <StartOLED_RTC+0x9d8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 80023ec:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
							}

							if(currCounter < 1)
 80023f2:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <StartOLED_RTC+0x9dc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	dc06      	bgt.n	8002408 <StartOLED_RTC+0x8f4>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 80023fa:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <StartOLED_RTC+0x9d8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <StartOLED_RTC+0x9dc>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]
							}


							graphics_text(0, 16, 1, "           ");
 8002408:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <StartOLED_RTC+0x9e0>)
 800240a:	2201      	movs	r2, #1
 800240c:	2110      	movs	r1, #16
 800240e:	2000      	movs	r0, #0
 8002410:	f001 fa1e 	bl	8003850 <graphics_text>
							oled_update();
 8002414:	f001 fad0 	bl	80039b8 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002418:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <StartOLED_RTC+0x9dc>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002420:	4935      	ldr	r1, [pc, #212]	; (80024f8 <StartOLED_RTC+0x9e4>)
 8002422:	4618      	mov	r0, r3
 8002424:	f00e fe82 	bl	801112c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242c:	2201      	movs	r2, #1
 800242e:	2110      	movs	r1, #16
 8002430:	2000      	movs	r0, #0
 8002432:	f001 fa0d 	bl	8003850 <graphics_text>
							oled_update();
 8002436:	f001 fabf 	bl	80039b8 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 800243a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243e:	220a      	movs	r2, #10
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f00e fd46 	bl	8010ed4 <memset>
					while(klick == 3)
 8002448:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <StartOLED_RTC+0x9e8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d0aa      	beq.n	80023a6 <StartOLED_RTC+0x892>

						}
					}
					if(klick == 4)
 8002450:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <StartOLED_RTC+0x9e8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b04      	cmp	r3, #4
 8002456:	f040 83a1 	bne.w	8002b9c <StartOLED_RTC+0x1088>
					{
						if((currCounter < 1) || (currCounter > 12))
 800245a:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <StartOLED_RTC+0x9dc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	dd03      	ble.n	800246a <StartOLED_RTC+0x956>
 8002462:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <StartOLED_RTC+0x9dc>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b0c      	cmp	r3, #12
 8002468:	dd05      	ble.n	8002476 <StartOLED_RTC+0x962>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <StartOLED_RTC+0x9d8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 8002472:	2301      	movs	r3, #1
 8002474:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 8002476:	f107 030c 	add.w	r3, r7, #12
 800247a:	4619      	mov	r1, r3
 800247c:	2005      	movs	r0, #5
 800247e:	f7fe f9db 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <StartOLED_RTC+0x9ec>)
 8002484:	2201      	movs	r2, #1
 8002486:	2110      	movs	r1, #16
 8002488:	2000      	movs	r0, #0
 800248a:	f001 f9e1 	bl	8003850 <graphics_text>
						oled_update();
 800248e:	f001 fa93 	bl	80039b8 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <StartOLED_RTC+0x9f0>)
 8002494:	2201      	movs	r2, #1
 8002496:	2110      	movs	r1, #16
 8002498:	2000      	movs	r0, #0
 800249a:	f001 f9d9 	bl	8003850 <graphics_text>
						oled_update();
 800249e:	f001 fa8b 	bl	80039b8 <oled_update>

						osDelay(800);
 80024a2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80024a6:	f00b f87f 	bl	800d5a8 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <StartOLED_RTC+0x9ec>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	2110      	movs	r1, #16
 80024b0:	2000      	movs	r0, #0
 80024b2:	f001 f9cd 	bl	8003850 <graphics_text>
						oled_update();
 80024b6:	f001 fa7f 	bl	80039b8 <oled_update>

						klick = 5;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <StartOLED_RTC+0x9e8>)
 80024bc:	2205      	movs	r2, #5
 80024be:	601a      	str	r2, [r3, #0]
					}

					break;
 80024c0:	e36c      	b.n	8002b9c <StartOLED_RTC+0x1088>

				case 5:
					// Set date

					graphics_text(0, 8, 1, "              ");
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <StartOLED_RTC+0x9f8>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	2108      	movs	r1, #8
 80024c8:	2000      	movs	r0, #0
 80024ca:	f001 f9c1 	bl	8003850 <graphics_text>
					oled_update();
 80024ce:	f001 fa73 	bl	80039b8 <oled_update>
					graphics_text(0, 8, 1, "DATE");
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <StartOLED_RTC+0x9fc>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	2108      	movs	r1, #8
 80024d8:	2000      	movs	r0, #0
 80024da:	f001 f9b9 	bl	8003850 <graphics_text>
					oled_update();
 80024de:	f001 fa6b 	bl	80039b8 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 80024e2:	4b02      	ldr	r3, [pc, #8]	; (80024ec <StartOLED_RTC+0x9d8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2201      	movs	r2, #1
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 5)
 80024ea:	e064      	b.n	80025b6 <StartOLED_RTC+0xaa2>
 80024ec:	20004bb8 	.word	0x20004bb8
 80024f0:	200000d0 	.word	0x200000d0
 80024f4:	08011adc 	.word	0x08011adc
 80024f8:	08011a74 	.word	0x08011a74
 80024fc:	200000d4 	.word	0x200000d4
 8002500:	08011ae8 	.word	0x08011ae8
 8002504:	08011afc 	.word	0x08011afc
 8002508:	08011b08 	.word	0x08011b08
 800250c:	08011b10 	.word	0x08011b10
 8002510:	08011b20 	.word	0x08011b20
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002514:	4ba2      	ldr	r3, [pc, #648]	; (80027a0 <StartOLED_RTC+0xc8c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	461a      	mov	r2, r3
 800251c:	4ba1      	ldr	r3, [pc, #644]	; (80027a4 <StartOLED_RTC+0xc90>)
 800251e:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002520:	4ba0      	ldr	r3, [pc, #640]	; (80027a4 <StartOLED_RTC+0xc90>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3b01      	subs	r3, #1
 8002526:	b29b      	uxth	r3, r3
 8002528:	0fda      	lsrs	r2, r3, #31
 800252a:	4413      	add	r3, r2
 800252c:	105b      	asrs	r3, r3, #1
 800252e:	425b      	negs	r3, r3
 8002530:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002534:	337f      	adds	r3, #127	; 0x7f
 8002536:	4a9b      	ldr	r2, [pc, #620]	; (80027a4 <StartOLED_RTC+0xc90>)
 8002538:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 800253a:	4b9a      	ldr	r3, [pc, #616]	; (80027a4 <StartOLED_RTC+0xc90>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d038      	beq.n	80025b6 <StartOLED_RTC+0xaa2>
						{
							prevCounter = currCounter;
 8002544:	4b97      	ldr	r3, [pc, #604]	; (80027a4 <StartOLED_RTC+0xc90>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]

							if(currCounter > 31)
 800254a:	4b96      	ldr	r3, [pc, #600]	; (80027a4 <StartOLED_RTC+0xc90>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b1f      	cmp	r3, #31
 8002550:	dd06      	ble.n	8002560 <StartOLED_RTC+0xa4c>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8002552:	4b93      	ldr	r3, [pc, #588]	; (80027a0 <StartOLED_RTC+0xc8c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2201      	movs	r2, #1
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 800255a:	4b92      	ldr	r3, [pc, #584]	; (80027a4 <StartOLED_RTC+0xc90>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 1)
 8002560:	4b90      	ldr	r3, [pc, #576]	; (80027a4 <StartOLED_RTC+0xc90>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	dc06      	bgt.n	8002576 <StartOLED_RTC+0xa62>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8002568:	4b8d      	ldr	r3, [pc, #564]	; (80027a0 <StartOLED_RTC+0xc8c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2201      	movs	r2, #1
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002570:	4b8c      	ldr	r3, [pc, #560]	; (80027a4 <StartOLED_RTC+0xc90>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8002576:	4b8c      	ldr	r3, [pc, #560]	; (80027a8 <StartOLED_RTC+0xc94>)
 8002578:	2201      	movs	r2, #1
 800257a:	2110      	movs	r1, #16
 800257c:	2000      	movs	r0, #0
 800257e:	f001 f967 	bl	8003850 <graphics_text>
							oled_update();
 8002582:	f001 fa19 	bl	80039b8 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002586:	4b87      	ldr	r3, [pc, #540]	; (80027a4 <StartOLED_RTC+0xc90>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258e:	4987      	ldr	r1, [pc, #540]	; (80027ac <StartOLED_RTC+0xc98>)
 8002590:	4618      	mov	r0, r3
 8002592:	f00e fdcb 	bl	801112c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259a:	2201      	movs	r2, #1
 800259c:	2110      	movs	r1, #16
 800259e:	2000      	movs	r0, #0
 80025a0:	f001 f956 	bl	8003850 <graphics_text>
							oled_update();
 80025a4:	f001 fa08 	bl	80039b8 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 80025a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ac:	220a      	movs	r2, #10
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f00e fc8f 	bl	8010ed4 <memset>
					while(klick == 5)
 80025b6:	4b7e      	ldr	r3, [pc, #504]	; (80027b0 <StartOLED_RTC+0xc9c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d0aa      	beq.n	8002514 <StartOLED_RTC+0xa00>

						}
					}
					if(klick == 6)
 80025be:	4b7c      	ldr	r3, [pc, #496]	; (80027b0 <StartOLED_RTC+0xc9c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	f040 82ed 	bne.w	8002ba2 <StartOLED_RTC+0x108e>
					{
						if((currCounter < 1) || (currCounter > 32))
 80025c8:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <StartOLED_RTC+0xc90>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	dd03      	ble.n	80025d8 <StartOLED_RTC+0xac4>
 80025d0:	4b74      	ldr	r3, [pc, #464]	; (80027a4 <StartOLED_RTC+0xc90>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	dd05      	ble.n	80025e4 <StartOLED_RTC+0xad0>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 80025d8:	4b71      	ldr	r3, [pc, #452]	; (80027a0 <StartOLED_RTC+0xc8c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_DATE_DEFAULT, &prevCounter);
 80025e4:	f107 030c 	add.w	r3, r7, #12
 80025e8:	4619      	mov	r1, r3
 80025ea:	2004      	movs	r0, #4
 80025ec:	f7fe f924 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 80025f0:	4b70      	ldr	r3, [pc, #448]	; (80027b4 <StartOLED_RTC+0xca0>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	2110      	movs	r1, #16
 80025f6:	2000      	movs	r0, #0
 80025f8:	f001 f92a 	bl	8003850 <graphics_text>
						oled_update();
 80025fc:	f001 f9dc 	bl	80039b8 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002600:	4b6d      	ldr	r3, [pc, #436]	; (80027b8 <StartOLED_RTC+0xca4>)
 8002602:	2201      	movs	r2, #1
 8002604:	2110      	movs	r1, #16
 8002606:	2000      	movs	r0, #0
 8002608:	f001 f922 	bl	8003850 <graphics_text>
						oled_update();
 800260c:	f001 f9d4 	bl	80039b8 <oled_update>

						osDelay(800);
 8002610:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002614:	f00a ffc8 	bl	800d5a8 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002618:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <StartOLED_RTC+0xca0>)
 800261a:	2201      	movs	r2, #1
 800261c:	2110      	movs	r1, #16
 800261e:	2000      	movs	r0, #0
 8002620:	f001 f916 	bl	8003850 <graphics_text>
						oled_update();
 8002624:	f001 f9c8 	bl	80039b8 <oled_update>

						klick = 7;
 8002628:	4b61      	ldr	r3, [pc, #388]	; (80027b0 <StartOLED_RTC+0xc9c>)
 800262a:	2207      	movs	r2, #7
 800262c:	601a      	str	r2, [r3, #0]
					}

					break;
 800262e:	e2b8      	b.n	8002ba2 <StartOLED_RTC+0x108e>

				case 7:
					// Set day of week

					graphics_text(0, 8, 1, "              ");
 8002630:	4b62      	ldr	r3, [pc, #392]	; (80027bc <StartOLED_RTC+0xca8>)
 8002632:	2201      	movs	r2, #1
 8002634:	2108      	movs	r1, #8
 8002636:	2000      	movs	r0, #0
 8002638:	f001 f90a 	bl	8003850 <graphics_text>
					oled_update();
 800263c:	f001 f9bc 	bl	80039b8 <oled_update>
					graphics_text(0, 8, 1, "DAY");
 8002640:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <StartOLED_RTC+0xcac>)
 8002642:	2201      	movs	r2, #1
 8002644:	2108      	movs	r1, #8
 8002646:	2000      	movs	r0, #0
 8002648:	f001 f902 	bl	8003850 <graphics_text>
					oled_update();
 800264c:	f001 f9b4 	bl	80039b8 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002650:	4b53      	ldr	r3, [pc, #332]	; (80027a0 <StartOLED_RTC+0xc8c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2201      	movs	r2, #1
 8002656:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 7)
 8002658:	e050      	b.n	80026fc <StartOLED_RTC+0xbe8>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 800265a:	4b51      	ldr	r3, [pc, #324]	; (80027a0 <StartOLED_RTC+0xc8c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	461a      	mov	r2, r3
 8002662:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <StartOLED_RTC+0xc90>)
 8002664:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002666:	4b4f      	ldr	r3, [pc, #316]	; (80027a4 <StartOLED_RTC+0xc90>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3b01      	subs	r3, #1
 800266c:	b29b      	uxth	r3, r3
 800266e:	0fda      	lsrs	r2, r3, #31
 8002670:	4413      	add	r3, r2
 8002672:	105b      	asrs	r3, r3, #1
 8002674:	425b      	negs	r3, r3
 8002676:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800267a:	337f      	adds	r3, #127	; 0x7f
 800267c:	4a49      	ldr	r2, [pc, #292]	; (80027a4 <StartOLED_RTC+0xc90>)
 800267e:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002680:	4b48      	ldr	r3, [pc, #288]	; (80027a4 <StartOLED_RTC+0xc90>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	429a      	cmp	r2, r3
 8002688:	d038      	beq.n	80026fc <StartOLED_RTC+0xbe8>
						{
							prevCounter = currCounter;
 800268a:	4b46      	ldr	r3, [pc, #280]	; (80027a4 <StartOLED_RTC+0xc90>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]
							if(currCounter > 7)
 8002690:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <StartOLED_RTC+0xc90>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b07      	cmp	r3, #7
 8002696:	dd06      	ble.n	80026a6 <StartOLED_RTC+0xb92>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002698:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <StartOLED_RTC+0xc8c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2201      	movs	r2, #1
 800269e:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 80026a0:	4b40      	ldr	r3, [pc, #256]	; (80027a4 <StartOLED_RTC+0xc90>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 1)
 80026a6:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <StartOLED_RTC+0xc90>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	dc06      	bgt.n	80026bc <StartOLED_RTC+0xba8>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 80026ae:	4b3c      	ldr	r3, [pc, #240]	; (80027a0 <StartOLED_RTC+0xc8c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 80026b6:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <StartOLED_RTC+0xc90>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 80026bc:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <StartOLED_RTC+0xc94>)
 80026be:	2201      	movs	r2, #1
 80026c0:	2110      	movs	r1, #16
 80026c2:	2000      	movs	r0, #0
 80026c4:	f001 f8c4 	bl	8003850 <graphics_text>
							oled_update();
 80026c8:	f001 f976 	bl	80039b8 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 80026cc:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <StartOLED_RTC+0xc90>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d4:	4935      	ldr	r1, [pc, #212]	; (80027ac <StartOLED_RTC+0xc98>)
 80026d6:	4618      	mov	r0, r3
 80026d8:	f00e fd28 	bl	801112c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 80026dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e0:	2201      	movs	r2, #1
 80026e2:	2110      	movs	r1, #16
 80026e4:	2000      	movs	r0, #0
 80026e6:	f001 f8b3 	bl	8003850 <graphics_text>
							oled_update();
 80026ea:	f001 f965 	bl	80039b8 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 80026ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f2:	220a      	movs	r2, #10
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f00e fbec 	bl	8010ed4 <memset>
					while(klick == 7)
 80026fc:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <StartOLED_RTC+0xc9c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b07      	cmp	r3, #7
 8002702:	d0aa      	beq.n	800265a <StartOLED_RTC+0xb46>

						}
					}
					if(klick == 8)
 8002704:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <StartOLED_RTC+0xc9c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b08      	cmp	r3, #8
 800270a:	f040 824d 	bne.w	8002ba8 <StartOLED_RTC+0x1094>
					{
						if((currCounter < 1) || (currCounter > 7))
 800270e:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <StartOLED_RTC+0xc90>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	dd03      	ble.n	800271e <StartOLED_RTC+0xc0a>
 8002716:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <StartOLED_RTC+0xc90>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b07      	cmp	r3, #7
 800271c:	dd05      	ble.n	800272a <StartOLED_RTC+0xc16>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <StartOLED_RTC+0xc8c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 8002726:	2301      	movs	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &prevCounter);
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	4619      	mov	r1, r3
 8002730:	2003      	movs	r0, #3
 8002732:	f7fe f881 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002736:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <StartOLED_RTC+0xca0>)
 8002738:	2201      	movs	r2, #1
 800273a:	2110      	movs	r1, #16
 800273c:	2000      	movs	r0, #0
 800273e:	f001 f887 	bl	8003850 <graphics_text>
						oled_update();
 8002742:	f001 f939 	bl	80039b8 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <StartOLED_RTC+0xca4>)
 8002748:	2201      	movs	r2, #1
 800274a:	2110      	movs	r1, #16
 800274c:	2000      	movs	r0, #0
 800274e:	f001 f87f 	bl	8003850 <graphics_text>
						oled_update();
 8002752:	f001 f931 	bl	80039b8 <oled_update>

						osDelay(800);
 8002756:	f44f 7048 	mov.w	r0, #800	; 0x320
 800275a:	f00a ff25 	bl	800d5a8 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <StartOLED_RTC+0xca0>)
 8002760:	2201      	movs	r2, #1
 8002762:	2110      	movs	r1, #16
 8002764:	2000      	movs	r0, #0
 8002766:	f001 f873 	bl	8003850 <graphics_text>
						oled_update();
 800276a:	f001 f925 	bl	80039b8 <oled_update>

						klick = 9;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <StartOLED_RTC+0xc9c>)
 8002770:	2209      	movs	r2, #9
 8002772:	601a      	str	r2, [r3, #0]
					}
					break;
 8002774:	e218      	b.n	8002ba8 <StartOLED_RTC+0x1094>

				case 9:
					// Set hour

					graphics_text(0, 8, 1, "              ");
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <StartOLED_RTC+0xca8>)
 8002778:	2201      	movs	r2, #1
 800277a:	2108      	movs	r1, #8
 800277c:	2000      	movs	r0, #0
 800277e:	f001 f867 	bl	8003850 <graphics_text>
					oled_update();
 8002782:	f001 f919 	bl	80039b8 <oled_update>
					graphics_text(0, 8, 1, "HOUR");
 8002786:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <StartOLED_RTC+0xcb0>)
 8002788:	2201      	movs	r2, #1
 800278a:	2108      	movs	r1, #8
 800278c:	2000      	movs	r0, #0
 800278e:	f001 f85f 	bl	8003850 <graphics_text>
					oled_update();
 8002792:	f001 f911 	bl	80039b8 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002796:	4b02      	ldr	r3, [pc, #8]	; (80027a0 <StartOLED_RTC+0xc8c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2200      	movs	r2, #0
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 9)
 800279e:	e08d      	b.n	80028bc <StartOLED_RTC+0xda8>
 80027a0:	20004bb8 	.word	0x20004bb8
 80027a4:	200000d0 	.word	0x200000d0
 80027a8:	08011adc 	.word	0x08011adc
 80027ac:	08011a74 	.word	0x08011a74
 80027b0:	200000d4 	.word	0x200000d4
 80027b4:	08011ae8 	.word	0x08011ae8
 80027b8:	08011afc 	.word	0x08011afc
 80027bc:	08011b10 	.word	0x08011b10
 80027c0:	08011b28 	.word	0x08011b28
 80027c4:	08011b2c 	.word	0x08011b2c
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 80027c8:	4b93      	ldr	r3, [pc, #588]	; (8002a18 <StartOLED_RTC+0xf04>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b92      	ldr	r3, [pc, #584]	; (8002a1c <StartOLED_RTC+0xf08>)
 80027d2:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80027d4:	4b91      	ldr	r3, [pc, #580]	; (8002a1c <StartOLED_RTC+0xf08>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29b      	uxth	r3, r3
 80027dc:	0fda      	lsrs	r2, r3, #31
 80027de:	4413      	add	r3, r2
 80027e0:	105b      	asrs	r3, r3, #1
 80027e2:	425b      	negs	r3, r3
 80027e4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80027e8:	337f      	adds	r3, #127	; 0x7f
 80027ea:	4a8c      	ldr	r2, [pc, #560]	; (8002a1c <StartOLED_RTC+0xf08>)
 80027ec:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 80027ee:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <StartOLED_RTC+0xf08>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d038      	beq.n	800286a <StartOLED_RTC+0xd56>
						{
							prevCounter = currCounter;
 80027f8:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <StartOLED_RTC+0xf08>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
							if(currCounter > 23)
 80027fe:	4b87      	ldr	r3, [pc, #540]	; (8002a1c <StartOLED_RTC+0xf08>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b17      	cmp	r3, #23
 8002804:	dd06      	ble.n	8002814 <StartOLED_RTC+0xd00>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002806:	4b84      	ldr	r3, [pc, #528]	; (8002a18 <StartOLED_RTC+0xf04>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2200      	movs	r2, #0
 800280c:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 800280e:	4b83      	ldr	r3, [pc, #524]	; (8002a1c <StartOLED_RTC+0xf08>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 8002814:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <StartOLED_RTC+0xf08>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	da06      	bge.n	800282a <StartOLED_RTC+0xd16>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 800281c:	4b7e      	ldr	r3, [pc, #504]	; (8002a18 <StartOLED_RTC+0xf04>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8002824:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <StartOLED_RTC+0xf08>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 800282a:	4b7d      	ldr	r3, [pc, #500]	; (8002a20 <StartOLED_RTC+0xf0c>)
 800282c:	2201      	movs	r2, #1
 800282e:	2110      	movs	r1, #16
 8002830:	2000      	movs	r0, #0
 8002832:	f001 f80d 	bl	8003850 <graphics_text>
							oled_update();
 8002836:	f001 f8bf 	bl	80039b8 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 800283a:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <StartOLED_RTC+0xf08>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002842:	4978      	ldr	r1, [pc, #480]	; (8002a24 <StartOLED_RTC+0xf10>)
 8002844:	4618      	mov	r0, r3
 8002846:	f00e fc71 	bl	801112c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 800284a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284e:	2201      	movs	r2, #1
 8002850:	2110      	movs	r1, #16
 8002852:	2000      	movs	r0, #0
 8002854:	f000 fffc 	bl	8003850 <graphics_text>
							oled_update();
 8002858:	f001 f8ae 	bl	80039b8 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 800285c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002860:	220a      	movs	r2, #10
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f00e fb35 	bl	8010ed4 <memset>
						}

						if(klick == 10)
 800286a:	4b6f      	ldr	r3, [pc, #444]	; (8002a28 <StartOLED_RTC+0xf14>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b0a      	cmp	r3, #10
 8002870:	d124      	bne.n	80028bc <StartOLED_RTC+0xda8>
						{
							// write data
							ds3231_set(DS3231_REGISTER_HOURS_DEFAULT, &prevCounter);
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	4619      	mov	r1, r3
 8002878:	2002      	movs	r0, #2
 800287a:	f7fd ffdd 	bl	8000838 <ds3231_set>

							graphics_text(0, 16, 1, "                 ");
 800287e:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <StartOLED_RTC+0xf18>)
 8002880:	2201      	movs	r2, #1
 8002882:	2110      	movs	r1, #16
 8002884:	2000      	movs	r0, #0
 8002886:	f000 ffe3 	bl	8003850 <graphics_text>
							oled_update();
 800288a:	f001 f895 	bl	80039b8 <oled_update>

							graphics_text(0, 16, 1, "installed");
 800288e:	4b68      	ldr	r3, [pc, #416]	; (8002a30 <StartOLED_RTC+0xf1c>)
 8002890:	2201      	movs	r2, #1
 8002892:	2110      	movs	r1, #16
 8002894:	2000      	movs	r0, #0
 8002896:	f000 ffdb 	bl	8003850 <graphics_text>
							oled_update();
 800289a:	f001 f88d 	bl	80039b8 <oled_update>

							osDelay(800);
 800289e:	f44f 7048 	mov.w	r0, #800	; 0x320
 80028a2:	f00a fe81 	bl	800d5a8 <osDelay>

							graphics_text(0, 16, 1, "                 ");
 80028a6:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <StartOLED_RTC+0xf18>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	2110      	movs	r1, #16
 80028ac:	2000      	movs	r0, #0
 80028ae:	f000 ffcf 	bl	8003850 <graphics_text>
							oled_update();
 80028b2:	f001 f881 	bl	80039b8 <oled_update>

							klick = 11;
 80028b6:	4b5c      	ldr	r3, [pc, #368]	; (8002a28 <StartOLED_RTC+0xf14>)
 80028b8:	220b      	movs	r2, #11
 80028ba:	601a      	str	r2, [r3, #0]
					while(klick == 9)
 80028bc:	4b5a      	ldr	r3, [pc, #360]	; (8002a28 <StartOLED_RTC+0xf14>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b09      	cmp	r3, #9
 80028c2:	d081      	beq.n	80027c8 <StartOLED_RTC+0xcb4>
						}
					}
					break;
 80028c4:	e177      	b.n	8002bb6 <StartOLED_RTC+0x10a2>

				case 11:
					// Set minutes

					graphics_text(0, 8, 1, "              ");
 80028c6:	4b5b      	ldr	r3, [pc, #364]	; (8002a34 <StartOLED_RTC+0xf20>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	2108      	movs	r1, #8
 80028cc:	2000      	movs	r0, #0
 80028ce:	f000 ffbf 	bl	8003850 <graphics_text>
					oled_update();
 80028d2:	f001 f871 	bl	80039b8 <oled_update>
					graphics_text(0, 8, 1, "MINUTES");
 80028d6:	4b58      	ldr	r3, [pc, #352]	; (8002a38 <StartOLED_RTC+0xf24>)
 80028d8:	2201      	movs	r2, #1
 80028da:	2108      	movs	r1, #8
 80028dc:	2000      	movs	r0, #0
 80028de:	f000 ffb7 	bl	8003850 <graphics_text>
					oled_update();
 80028e2:	f001 f869 	bl	80039b8 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 80028e6:	4b4c      	ldr	r3, [pc, #304]	; (8002a18 <StartOLED_RTC+0xf04>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 11)
 80028ee:	e04e      	b.n	800298e <StartOLED_RTC+0xe7a>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 80028f0:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <StartOLED_RTC+0xf04>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b48      	ldr	r3, [pc, #288]	; (8002a1c <StartOLED_RTC+0xf08>)
 80028fa:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 80028fc:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <StartOLED_RTC+0xf08>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	3b01      	subs	r3, #1
 8002902:	b29b      	uxth	r3, r3
 8002904:	0fda      	lsrs	r2, r3, #31
 8002906:	4413      	add	r3, r2
 8002908:	105b      	asrs	r3, r3, #1
 800290a:	425b      	negs	r3, r3
 800290c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002910:	337f      	adds	r3, #127	; 0x7f
 8002912:	4a42      	ldr	r2, [pc, #264]	; (8002a1c <StartOLED_RTC+0xf08>)
 8002914:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <StartOLED_RTC+0xf08>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	429a      	cmp	r2, r3
 800291e:	d036      	beq.n	800298e <StartOLED_RTC+0xe7a>
						{
							prevCounter = currCounter;
 8002920:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <StartOLED_RTC+0xf08>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
							if(currCounter > 59)
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <StartOLED_RTC+0xf08>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b3b      	cmp	r3, #59	; 0x3b
 800292c:	dd05      	ble.n	800293a <StartOLED_RTC+0xe26>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 800292e:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <StartOLED_RTC+0xf04>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	625a      	str	r2, [r3, #36]	; 0x24
								prevCounter = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
							}
							if(currCounter < 0)
 800293a:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <StartOLED_RTC+0xf08>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	da05      	bge.n	800294e <StartOLED_RTC+0xe3a>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002942:	4b35      	ldr	r3, [pc, #212]	; (8002a18 <StartOLED_RTC+0xf04>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
								prevCounter = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
							}

							graphics_text(0, 16, 1, "           ");
 800294e:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <StartOLED_RTC+0xf0c>)
 8002950:	2201      	movs	r2, #1
 8002952:	2110      	movs	r1, #16
 8002954:	2000      	movs	r0, #0
 8002956:	f000 ff7b 	bl	8003850 <graphics_text>
							oled_update();
 800295a:	f001 f82d 	bl	80039b8 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 800295e:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <StartOLED_RTC+0xf08>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002966:	492f      	ldr	r1, [pc, #188]	; (8002a24 <StartOLED_RTC+0xf10>)
 8002968:	4618      	mov	r0, r3
 800296a:	f00e fbdf 	bl	801112c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 800296e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002972:	2201      	movs	r2, #1
 8002974:	2110      	movs	r1, #16
 8002976:	2000      	movs	r0, #0
 8002978:	f000 ff6a 	bl	8003850 <graphics_text>
							oled_update();
 800297c:	f001 f81c 	bl	80039b8 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002984:	220a      	movs	r2, #10
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f00e faa3 	bl	8010ed4 <memset>
					while(klick == 11)
 800298e:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <StartOLED_RTC+0xf14>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b0b      	cmp	r3, #11
 8002994:	d0ac      	beq.n	80028f0 <StartOLED_RTC+0xddc>
						}
					}
					if(klick == 12)
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <StartOLED_RTC+0xf14>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	f040 8107 	bne.w	8002bae <StartOLED_RTC+0x109a>
					{
						// write data
						ds3231_set(DS3231_REGISTER_MINUTES_DEFAULT, &prevCounter);
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	4619      	mov	r1, r3
 80029a6:	2001      	movs	r0, #1
 80029a8:	f7fd ff46 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 80029ac:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <StartOLED_RTC+0xf18>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	2110      	movs	r1, #16
 80029b2:	2000      	movs	r0, #0
 80029b4:	f000 ff4c 	bl	8003850 <graphics_text>
						oled_update();
 80029b8:	f000 fffe 	bl	80039b8 <oled_update>

						graphics_text(0, 16, 1, "installed");
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <StartOLED_RTC+0xf1c>)
 80029be:	2201      	movs	r2, #1
 80029c0:	2110      	movs	r1, #16
 80029c2:	2000      	movs	r0, #0
 80029c4:	f000 ff44 	bl	8003850 <graphics_text>
						oled_update();
 80029c8:	f000 fff6 	bl	80039b8 <oled_update>

						osDelay(800);
 80029cc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80029d0:	f00a fdea 	bl	800d5a8 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 80029d4:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <StartOLED_RTC+0xf18>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	2110      	movs	r1, #16
 80029da:	2000      	movs	r0, #0
 80029dc:	f000 ff38 	bl	8003850 <graphics_text>
						oled_update();
 80029e0:	f000 ffea 	bl	80039b8 <oled_update>

						klick = 13;
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <StartOLED_RTC+0xf14>)
 80029e6:	220d      	movs	r2, #13
 80029e8:	601a      	str	r2, [r3, #0]
					}
					break;
 80029ea:	e0e0      	b.n	8002bae <StartOLED_RTC+0x109a>

				case 13:
					// Set minutes

					graphics_text(0, 8, 1, "              ");
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <StartOLED_RTC+0xf20>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	2108      	movs	r1, #8
 80029f2:	2000      	movs	r0, #0
 80029f4:	f000 ff2c 	bl	8003850 <graphics_text>
					oled_update();
 80029f8:	f000 ffde 	bl	80039b8 <oled_update>
					graphics_text(0, 8, 1, "SECONDS");
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <StartOLED_RTC+0xf28>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	2108      	movs	r1, #8
 8002a02:	2000      	movs	r0, #0
 8002a04:	f000 ff24 	bl	8003850 <graphics_text>
					oled_update();
 8002a08:	f000 ffd6 	bl	80039b8 <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002a0c:	4b02      	ldr	r3, [pc, #8]	; (8002a18 <StartOLED_RTC+0xf04>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2200      	movs	r2, #0
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 13)
 8002a14:	e065      	b.n	8002ae2 <StartOLED_RTC+0xfce>
 8002a16:	bf00      	nop
 8002a18:	20004bb8 	.word	0x20004bb8
 8002a1c:	200000d0 	.word	0x200000d0
 8002a20:	08011adc 	.word	0x08011adc
 8002a24:	08011a74 	.word	0x08011a74
 8002a28:	200000d4 	.word	0x200000d4
 8002a2c:	08011ae8 	.word	0x08011ae8
 8002a30:	08011afc 	.word	0x08011afc
 8002a34:	08011b10 	.word	0x08011b10
 8002a38:	08011b34 	.word	0x08011b34
 8002a3c:	08011b3c 	.word	0x08011b3c
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002a40:	4b5e      	ldr	r3, [pc, #376]	; (8002bbc <StartOLED_RTC+0x10a8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b5d      	ldr	r3, [pc, #372]	; (8002bc0 <StartOLED_RTC+0x10ac>)
 8002a4a:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002a4c:	4b5c      	ldr	r3, [pc, #368]	; (8002bc0 <StartOLED_RTC+0x10ac>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	0fda      	lsrs	r2, r3, #31
 8002a56:	4413      	add	r3, r2
 8002a58:	105b      	asrs	r3, r3, #1
 8002a5a:	425b      	negs	r3, r3
 8002a5c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002a60:	337f      	adds	r3, #127	; 0x7f
 8002a62:	4a57      	ldr	r2, [pc, #348]	; (8002bc0 <StartOLED_RTC+0x10ac>)
 8002a64:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002a66:	4b56      	ldr	r3, [pc, #344]	; (8002bc0 <StartOLED_RTC+0x10ac>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d038      	beq.n	8002ae2 <StartOLED_RTC+0xfce>
						{
							prevCounter = currCounter;
 8002a70:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <StartOLED_RTC+0x10ac>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
							if(currCounter > 59)
 8002a76:	4b52      	ldr	r3, [pc, #328]	; (8002bc0 <StartOLED_RTC+0x10ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b3b      	cmp	r3, #59	; 0x3b
 8002a7c:	dd06      	ble.n	8002a8c <StartOLED_RTC+0xf78>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002a7e:	4b4f      	ldr	r3, [pc, #316]	; (8002bbc <StartOLED_RTC+0x10a8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2200      	movs	r2, #0
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8002a86:	4b4e      	ldr	r3, [pc, #312]	; (8002bc0 <StartOLED_RTC+0x10ac>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 8002a8c:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <StartOLED_RTC+0x10ac>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	da06      	bge.n	8002aa2 <StartOLED_RTC+0xf8e>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002a94:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <StartOLED_RTC+0x10a8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8002a9c:	4b48      	ldr	r3, [pc, #288]	; (8002bc0 <StartOLED_RTC+0x10ac>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
							}
							graphics_text(0, 16, 1, "           ");
 8002aa2:	4b48      	ldr	r3, [pc, #288]	; (8002bc4 <StartOLED_RTC+0x10b0>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	2110      	movs	r1, #16
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f000 fed1 	bl	8003850 <graphics_text>
							oled_update();
 8002aae:	f000 ff83 	bl	80039b8 <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002ab2:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <StartOLED_RTC+0x10ac>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aba:	4943      	ldr	r1, [pc, #268]	; (8002bc8 <StartOLED_RTC+0x10b4>)
 8002abc:	4618      	mov	r0, r3
 8002abe:	f00e fb35 	bl	801112c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2110      	movs	r1, #16
 8002aca:	2000      	movs	r0, #0
 8002acc:	f000 fec0 	bl	8003850 <graphics_text>
							oled_update();
 8002ad0:	f000 ff72 	bl	80039b8 <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad8:	220a      	movs	r2, #10
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00e f9f9 	bl	8010ed4 <memset>
					while(klick == 13)
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <StartOLED_RTC+0x10b8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b0d      	cmp	r3, #13
 8002ae8:	d0aa      	beq.n	8002a40 <StartOLED_RTC+0xf2c>
						}
					}
					if(klick == 14)
 8002aea:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <StartOLED_RTC+0x10b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b0e      	cmp	r3, #14
 8002af0:	d160      	bne.n	8002bb4 <StartOLED_RTC+0x10a0>
					{
						// write data
						ds3231_set(DS3231_REGISTER_SECONDS_DEFAULT, &prevCounter);
 8002af2:	f107 030c 	add.w	r3, r7, #12
 8002af6:	4619      	mov	r1, r3
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7fd fe9d 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002afe:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <StartOLED_RTC+0x10bc>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	2110      	movs	r1, #16
 8002b04:	2000      	movs	r0, #0
 8002b06:	f000 fea3 	bl	8003850 <graphics_text>
						oled_update();
 8002b0a:	f000 ff55 	bl	80039b8 <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002b0e:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <StartOLED_RTC+0x10c0>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	2110      	movs	r1, #16
 8002b14:	2000      	movs	r0, #0
 8002b16:	f000 fe9b 	bl	8003850 <graphics_text>
						oled_update();
 8002b1a:	f000 ff4d 	bl	80039b8 <oled_update>

						osDelay(800);
 8002b1e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002b22:	f00a fd41 	bl	800d5a8 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <StartOLED_RTC+0x10bc>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	2110      	movs	r1, #16
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f000 fe8f 	bl	8003850 <graphics_text>
						oled_update();
 8002b32:	f000 ff41 	bl	80039b8 <oled_update>

						klick = 15;
 8002b36:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <StartOLED_RTC+0x10b8>)
 8002b38:	220f      	movs	r2, #15
 8002b3a:	601a      	str	r2, [r3, #0]
					}
					break;
 8002b3c:	e03a      	b.n	8002bb4 <StartOLED_RTC+0x10a0>

				case 15:		// EXIT

					osDelay(500);
 8002b3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b42:	f00a fd31 	bl	800d5a8 <osDelay>
					clear();
 8002b46:	f000 fccf 	bl	80034e8 <clear>
					oled_update();
 8002b4a:	f000 ff35 	bl	80039b8 <oled_update>

					for(uint8_t q = 0; q < 3; q ++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002b54:	e017      	b.n	8002b86 <StartOLED_RTC+0x1072>
					{
						graphics_text(20, 16, 2, "THE TIME IS SET");
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <StartOLED_RTC+0x10c4>)
 8002b58:	2202      	movs	r2, #2
 8002b5a:	2110      	movs	r1, #16
 8002b5c:	2014      	movs	r0, #20
 8002b5e:	f000 fe77 	bl	8003850 <graphics_text>
						oled_update();
 8002b62:	f000 ff29 	bl	80039b8 <oled_update>
						osDelay(400);
 8002b66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002b6a:	f00a fd1d 	bl	800d5a8 <osDelay>

						clear();
 8002b6e:	f000 fcbb 	bl	80034e8 <clear>
						oled_update();
 8002b72:	f000 ff21 	bl	80039b8 <oled_update>
						osDelay(200);
 8002b76:	20c8      	movs	r0, #200	; 0xc8
 8002b78:	f00a fd16 	bl	800d5a8 <osDelay>
					for(uint8_t q = 0; q < 3; q ++)
 8002b7c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b80:	3301      	adds	r3, #1
 8002b82:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002b86:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d9e3      	bls.n	8002b56 <StartOLED_RTC+0x1042>
					}
					klick = 0;					// Return to show time
 8002b8e:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <StartOLED_RTC+0x10b8>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

					break;
 8002b94:	e00f      	b.n	8002bb6 <StartOLED_RTC+0x10a2>
					break;
 8002b96:	bf00      	nop
 8002b98:	f7ff b801 	b.w	8001b9e <StartOLED_RTC+0x8a>
					break;
 8002b9c:	bf00      	nop
 8002b9e:	f7fe bffe 	b.w	8001b9e <StartOLED_RTC+0x8a>
					break;
 8002ba2:	bf00      	nop
 8002ba4:	f7fe bffb 	b.w	8001b9e <StartOLED_RTC+0x8a>
					break;
 8002ba8:	bf00      	nop
 8002baa:	f7fe bff8 	b.w	8001b9e <StartOLED_RTC+0x8a>
					break;
 8002bae:	bf00      	nop
 8002bb0:	f7fe bff5 	b.w	8001b9e <StartOLED_RTC+0x8a>
					break;
 8002bb4:	bf00      	nop
			switch (klick)
 8002bb6:	f7fe bff2 	b.w	8001b9e <StartOLED_RTC+0x8a>
 8002bba:	bf00      	nop
 8002bbc:	20004bb8 	.word	0x20004bb8
 8002bc0:	200000d0 	.word	0x200000d0
 8002bc4:	08011adc 	.word	0x08011adc
 8002bc8:	08011a74 	.word	0x08011a74
 8002bcc:	200000d4 	.word	0x200000d4
 8002bd0:	08011ae8 	.word	0x08011ae8
 8002bd4:	08011afc 	.word	0x08011afc
 8002bd8:	08011b44 	.word	0x08011b44

08002bdc <Start_test_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_test_task */
void Start_test_task(void *argument)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]


  for(;;)
  {

	  osDelay(1000);
 8002be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002be8:	f00a fcde 	bl	800d5a8 <osDelay>
 8002bec:	e7fa      	b.n	8002be4 <Start_test_task+0x8>
	...

08002bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c02:	f000 ffeb 	bl	8003bdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40001000 	.word	0x40001000

08002c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c18:	b672      	cpsid	i
}
 8002c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <Error_Handler+0x8>
	...

08002c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_MspInit+0x54>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	4a11      	ldr	r2, [pc, #68]	; (8002c74 <HAL_MspInit+0x54>)
 8002c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c34:	6453      	str	r3, [r2, #68]	; 0x44
 8002c36:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_MspInit+0x54>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_MspInit+0x54>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <HAL_MspInit+0x54>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c50:	6413      	str	r3, [r2, #64]	; 0x40
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_MspInit+0x54>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	210f      	movs	r1, #15
 8002c62:	f06f 0001 	mvn.w	r0, #1
 8002c66:	f001 f8b5 	bl	8003dd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800

08002c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	; 0x30
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 031c 	add.w	r3, r7, #28
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a42      	ldr	r2, [pc, #264]	; (8002da0 <HAL_I2C_MspInit+0x128>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d12d      	bne.n	8002cf6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a40      	ldr	r2, [pc, #256]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002cb6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cbc:	2312      	movs	r3, #18
 8002cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cc8:	2304      	movs	r3, #4
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4835      	ldr	r0, [pc, #212]	; (8002da8 <HAL_I2C_MspInit+0x130>)
 8002cd4:	f001 f93a 	bl	8003f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	4a30      	ldr	r2, [pc, #192]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002ce2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002cf4:	e050      	b.n	8002d98 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a2c      	ldr	r2, [pc, #176]	; (8002dac <HAL_I2C_MspInit+0x134>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d14b      	bne.n	8002d98 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d10:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d3e:	2312      	movs	r3, #18
 8002d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d46:	2303      	movs	r3, #3
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d4e:	f107 031c 	add.w	r3, r7, #28
 8002d52:	4619      	mov	r1, r3
 8002d54:	4816      	ldr	r0, [pc, #88]	; (8002db0 <HAL_I2C_MspInit+0x138>)
 8002d56:	f001 f8f9 	bl	8003f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d60:	2312      	movs	r3, #18
 8002d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d70:	f107 031c 	add.w	r3, r7, #28
 8002d74:	4619      	mov	r1, r3
 8002d76:	480f      	ldr	r0, [pc, #60]	; (8002db4 <HAL_I2C_MspInit+0x13c>)
 8002d78:	f001 f8e8 	bl	8003f4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002d86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_I2C_MspInit+0x12c>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	3730      	adds	r7, #48	; 0x30
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40005400 	.word	0x40005400
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40020400 	.word	0x40020400
 8002dac:	40005c00 	.word	0x40005c00
 8002db0:	40020800 	.word	0x40020800
 8002db4:	40020000 	.word	0x40020000

08002db8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08e      	sub	sp, #56	; 0x38
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <HAL_I2S_MspInit+0xf0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d15a      	bne.n	8002e9e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002de8:	2301      	movs	r3, #1
 8002dea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002dec:	23c0      	movs	r3, #192	; 0xc0
 8002dee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002df0:	2302      	movs	r3, #2
 8002df2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f005 fa8f 	bl	800831c <HAL_RCCEx_PeriphCLKConfig>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002e04:	f7ff ff06 	bl	8002c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	4b27      	ldr	r3, [pc, #156]	; (8002eac <HAL_I2S_MspInit+0xf4>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	4a26      	ldr	r2, [pc, #152]	; (8002eac <HAL_I2S_MspInit+0xf4>)
 8002e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e16:	6413      	str	r3, [r2, #64]	; 0x40
 8002e18:	4b24      	ldr	r3, [pc, #144]	; (8002eac <HAL_I2S_MspInit+0xf4>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_I2S_MspInit+0xf4>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <HAL_I2S_MspInit+0xf4>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6313      	str	r3, [r2, #48]	; 0x30
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_I2S_MspInit+0xf4>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_I2S_MspInit+0xf4>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	4a18      	ldr	r2, [pc, #96]	; (8002eac <HAL_I2S_MspInit+0xf4>)
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_I2S_MspInit+0xf4>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e6c:	2306      	movs	r3, #6
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e74:	4619      	mov	r1, r3
 8002e76:	480e      	ldr	r0, [pc, #56]	; (8002eb0 <HAL_I2S_MspInit+0xf8>)
 8002e78:	f001 f868 	bl	8003f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002e7c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e8e:	2306      	movs	r3, #6
 8002e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e96:	4619      	mov	r1, r3
 8002e98:	4806      	ldr	r0, [pc, #24]	; (8002eb4 <HAL_I2S_MspInit+0xfc>)
 8002e9a:	f001 f857 	bl	8003f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e9e:	bf00      	nop
 8002ea0:	3738      	adds	r7, #56	; 0x38
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40003c00 	.word	0x40003c00
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40020000 	.word	0x40020000
 8002eb4:	40020800 	.word	0x40020800

08002eb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ec0:	f107 0308 	add.w	r3, r7, #8
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a0c      	ldr	r2, [pc, #48]	; (8002f04 <HAL_RTC_MspInit+0x4c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d111      	bne.n	8002efc <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ee2:	f107 0308 	add.w	r3, r7, #8
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f005 fa18 	bl	800831c <HAL_RCCEx_PeriphCLKConfig>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002ef2:	f7ff fe8f 	bl	8002c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <HAL_RTC_MspInit+0x50>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002efc:	bf00      	nop
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40002800 	.word	0x40002800
 8002f08:	42470e3c 	.word	0x42470e3c

08002f0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <HAL_SPI_MspInit+0x84>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d12b      	bne.n	8002f86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_SPI_MspInit+0x88>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_SPI_MspInit+0x88>)
 8002f38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_SPI_MspInit+0x88>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_SPI_MspInit+0x88>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a10      	ldr	r2, [pc, #64]	; (8002f94 <HAL_SPI_MspInit+0x88>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_SPI_MspInit+0x88>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002f66:	23e0      	movs	r3, #224	; 0xe0
 8002f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f72:	2300      	movs	r3, #0
 8002f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f76:	2305      	movs	r3, #5
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4805      	ldr	r0, [pc, #20]	; (8002f98 <HAL_SPI_MspInit+0x8c>)
 8002f82:	f000 ffe3 	bl	8003f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f86:	bf00      	nop
 8002f88:	3728      	adds	r7, #40	; 0x28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40013000 	.word	0x40013000
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020000 	.word	0x40020000

08002f9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <HAL_TIM_Encoder_MspInit+0x94>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d134      	bne.n	8003028 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <HAL_TIM_Encoder_MspInit+0x98>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <HAL_TIM_Encoder_MspInit+0x98>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fce:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_TIM_Encoder_MspInit+0x98>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <HAL_TIM_Encoder_MspInit+0x98>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a14      	ldr	r2, [pc, #80]	; (8003034 <HAL_TIM_Encoder_MspInit+0x98>)
 8002fe4:	f043 0310 	orr.w	r3, r3, #16
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_TIM_Encoder_MspInit+0x98>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002ff6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003004:	2300      	movs	r3, #0
 8003006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003008:	2301      	movs	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	4619      	mov	r1, r3
 8003012:	4809      	ldr	r0, [pc, #36]	; (8003038 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003014:	f000 ff9a 	bl	8003f4c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003018:	2200      	movs	r2, #0
 800301a:	2105      	movs	r1, #5
 800301c:	2019      	movs	r0, #25
 800301e:	f000 fed9 	bl	8003dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003022:	2019      	movs	r0, #25
 8003024:	f000 fef2 	bl	8003e0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003028:	bf00      	nop
 800302a:	3728      	adds	r7, #40	; 0x28
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40010000 	.word	0x40010000
 8003034:	40023800 	.word	0x40023800
 8003038:	40021000 	.word	0x40021000

0800303c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <HAL_TIM_Base_MspInit+0x48>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d115      	bne.n	800307a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <HAL_TIM_Base_MspInit+0x4c>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <HAL_TIM_Base_MspInit+0x4c>)
 8003058:	f043 0320 	orr.w	r3, r3, #32
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <HAL_TIM_Base_MspInit+0x4c>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2105      	movs	r1, #5
 800306e:	2037      	movs	r0, #55	; 0x37
 8003070:	f000 feb0 	bl	8003dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003074:	2037      	movs	r0, #55	; 0x37
 8003076:	f000 fec9 	bl	8003e0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40001400 	.word	0x40001400
 8003088:	40023800 	.word	0x40023800

0800308c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <HAL_UART_MspInit+0x94>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d133      	bne.n	8003116 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_UART_MspInit+0x98>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <HAL_UART_MspInit+0x98>)
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030bc:	6413      	str	r3, [r2, #64]	; 0x40
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_UART_MspInit+0x98>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_UART_MspInit+0x98>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a14      	ldr	r2, [pc, #80]	; (8003124 <HAL_UART_MspInit+0x98>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_UART_MspInit+0x98>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030e6:	230c      	movs	r3, #12
 80030e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ea:	2302      	movs	r3, #2
 80030ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f2:	2303      	movs	r3, #3
 80030f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030f6:	2307      	movs	r3, #7
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fa:	f107 0314 	add.w	r3, r7, #20
 80030fe:	4619      	mov	r1, r3
 8003100:	4809      	ldr	r0, [pc, #36]	; (8003128 <HAL_UART_MspInit+0x9c>)
 8003102:	f000 ff23 	bl	8003f4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2106      	movs	r1, #6
 800310a:	2026      	movs	r0, #38	; 0x26
 800310c:	f000 fe62 	bl	8003dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003110:	2026      	movs	r0, #38	; 0x26
 8003112:	f000 fe7b 	bl	8003e0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003116:	bf00      	nop
 8003118:	3728      	adds	r7, #40	; 0x28
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40004400 	.word	0x40004400
 8003124:	40023800 	.word	0x40023800
 8003128:	40020000 	.word	0x40020000

0800312c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08c      	sub	sp, #48	; 0x30
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800313c:	2200      	movs	r2, #0
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	2036      	movs	r0, #54	; 0x36
 8003142:	f000 fe47 	bl	8003dd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003146:	2036      	movs	r0, #54	; 0x36
 8003148:	f000 fe60 	bl	8003e0c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <HAL_InitTick+0xa4>)
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_InitTick+0xa4>)
 8003156:	f043 0310 	orr.w	r3, r3, #16
 800315a:	6413      	str	r3, [r2, #64]	; 0x40
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <HAL_InitTick+0xa4>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003168:	f107 0210 	add.w	r2, r7, #16
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f005 f8a0 	bl	80082b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003178:	f005 f876 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800317c:	4603      	mov	r3, r0
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <HAL_InitTick+0xa8>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0c9b      	lsrs	r3, r3, #18
 800318c:	3b01      	subs	r3, #1
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_InitTick+0xac>)
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <HAL_InitTick+0xb0>)
 8003194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_InitTick+0xac>)
 8003198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800319c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800319e:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <HAL_InitTick+0xac>)
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_InitTick+0xac>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_InitTick+0xac>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80031b0:	4809      	ldr	r0, [pc, #36]	; (80031d8 <HAL_InitTick+0xac>)
 80031b2:	f005 fb61 	bl	8008878 <HAL_TIM_Base_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80031bc:	4806      	ldr	r0, [pc, #24]	; (80031d8 <HAL_InitTick+0xac>)
 80031be:	f005 fbab 	bl	8008918 <HAL_TIM_Base_Start_IT>
 80031c2:	4603      	mov	r3, r0
 80031c4:	e000      	b.n	80031c8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3730      	adds	r7, #48	; 0x30
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	431bde83 	.word	0x431bde83
 80031d8:	20004d3c 	.word	0x20004d3c
 80031dc:	40001000 	.word	0x40001000

080031e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031e4:	e7fe      	b.n	80031e4 <NMI_Handler+0x4>

080031e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ea:	e7fe      	b.n	80031ea <HardFault_Handler+0x4>

080031ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <MemManage_Handler+0x4>

080031f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031f6:	e7fe      	b.n	80031f6 <BusFault_Handler+0x4>

080031f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031fc:	e7fe      	b.n	80031fc <UsageFault_Handler+0x4>

080031fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003210:	4802      	ldr	r0, [pc, #8]	; (800321c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003212:	f005 fd54 	bl	8008cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20004bb8 	.word	0x20004bb8

08003220 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003224:	4802      	ldr	r0, [pc, #8]	; (8003230 <USART2_IRQHandler+0x10>)
 8003226:	f006 f8e1 	bl	80093ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data , 1);
  /* USER CODE END USART2_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20004c64 	.word	0x20004c64

08003234 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  HAL_TIM_Base_Start_IT(&htim7);								//	Turn on Timer with 100Hz period = 0,01 sec
 8003238:	4804      	ldr	r0, [pc, #16]	; (800324c <EXTI15_10_IRQHandler+0x18>)
 800323a:	f005 fb6d 	bl	8008918 <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC15_OSC32_OUT_Pin);
 800323e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003242:	f001 f851 	bl	80042e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20004cac 	.word	0x20004cac

08003250 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <TIM6_DAC_IRQHandler+0x10>)
 8003256:	f005 fd32 	bl	8008cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20004d3c 	.word	0x20004d3c

08003264 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(tim_val == 4)											// Waiting 3 period of timer7: (0,01 *3 = 0,03 second)
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <TIM7_IRQHandler+0x5c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d11d      	bne.n	80032ac <TIM7_IRQHandler+0x48>
		{
			tim_val = 0;
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <TIM7_IRQHandler+0x5c>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)	// If button steel pressed
 8003276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800327a:	4812      	ldr	r0, [pc, #72]	; (80032c4 <TIM7_IRQHandler+0x60>)
 800327c:	f001 f802 	bl	8004284 <HAL_GPIO_ReadPin>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10e      	bne.n	80032a4 <TIM7_IRQHandler+0x40>
			{
				klick++;
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <TIM7_IRQHandler+0x64>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3301      	adds	r3, #1
 800328c:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <TIM7_IRQHandler+0x64>)
 800328e:	6013      	str	r3, [r2, #0]
				if(klick >= 15)										// it mean we have only 4 LEDs
 8003290:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <TIM7_IRQHandler+0x64>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b0e      	cmp	r3, #14
 8003296:	dd02      	ble.n	800329e <TIM7_IRQHandler+0x3a>
				{
					klick = 0;
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <TIM7_IRQHandler+0x64>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
				}
				HAL_TIM_Base_Stop_IT(&htim7);						// Stop timer (becouse counter can turn on only encoder key)
 800329e:	480b      	ldr	r0, [pc, #44]	; (80032cc <TIM7_IRQHandler+0x68>)
 80032a0:	f005 fbaa 	bl	80089f8 <HAL_TIM_Base_Stop_IT>
			}
			HAL_TIM_Base_Stop_IT(&htim7);
 80032a4:	4809      	ldr	r0, [pc, #36]	; (80032cc <TIM7_IRQHandler+0x68>)
 80032a6:	f005 fba7 	bl	80089f8 <HAL_TIM_Base_Stop_IT>
 80032aa:	e004      	b.n	80032b6 <TIM7_IRQHandler+0x52>
		}
		else
		{
			tim_val++;
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <TIM7_IRQHandler+0x5c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	4a03      	ldr	r2, [pc, #12]	; (80032c0 <TIM7_IRQHandler+0x5c>)
 80032b4:	6013      	str	r3, [r2, #0]
		}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80032b6:	4805      	ldr	r0, [pc, #20]	; (80032cc <TIM7_IRQHandler+0x68>)
 80032b8:	f005 fd01 	bl	8008cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80032bc:	bf00      	nop
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	200000e0 	.word	0x200000e0
 80032c4:	40021000 	.word	0x40021000
 80032c8:	200000d4 	.word	0x200000d4
 80032cc:	20004cac 	.word	0x20004cac

080032d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <OTG_FS_IRQHandler+0x10>)
 80032d6:	f001 fa95 	bl	8004804 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	200053d0 	.word	0x200053d0

080032e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032ec:	4a14      	ldr	r2, [pc, #80]	; (8003340 <_sbrk+0x5c>)
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <_sbrk+0x60>)
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <_sbrk+0x64>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <_sbrk+0x64>)
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <_sbrk+0x68>)
 8003304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <_sbrk+0x64>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	429a      	cmp	r2, r3
 8003312:	d207      	bcs.n	8003324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003314:	f00d fd94 	bl	8010e40 <__errno>
 8003318:	4603      	mov	r3, r0
 800331a:	220c      	movs	r2, #12
 800331c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800331e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003322:	e009      	b.n	8003338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <_sbrk+0x64>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <_sbrk+0x64>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	4a05      	ldr	r2, [pc, #20]	; (8003348 <_sbrk+0x64>)
 8003334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20020000 	.word	0x20020000
 8003344:	00000400 	.word	0x00000400
 8003348:	200000e4 	.word	0x200000e4
 800334c:	200056e8 	.word	0x200056e8

08003350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <SystemInit+0x20>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	4a05      	ldr	r2, [pc, #20]	; (8003370 <SystemInit+0x20>)
 800335c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
 800337e:	460b      	mov	r3, r1
 8003380:	71bb      	strb	r3, [r7, #6]
 8003382:	4613      	mov	r3, r2
 8003384:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	2b00      	cmp	r3, #0
 800338c:	db3b      	blt.n	8003406 <draw_pixel+0x92>
 800338e:	79bb      	ldrb	r3, [r7, #6]
 8003390:	2b1f      	cmp	r3, #31
 8003392:	d838      	bhi.n	8003406 <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 8003398:	79bb      	ldrb	r3, [r7, #6]
 800339a:	08db      	lsrs	r3, r3, #3
 800339c:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 800339e:	7bfa      	ldrb	r2, [r7, #15]
 80033a0:	79bb      	ldrb	r3, [r7, #6]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	737b      	strb	r3, [r7, #13]
		if(color)
 80033ac:	797b      	ldrb	r3, [r7, #5]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d012      	beq.n	80033d8 <draw_pixel+0x64>
			gddram[line][x] |= byte;
 80033b2:	7bba      	ldrb	r2, [r7, #14]
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	4917      	ldr	r1, [pc, #92]	; (8003414 <draw_pixel+0xa0>)
 80033b8:	01d2      	lsls	r2, r2, #7
 80033ba:	440a      	add	r2, r1
 80033bc:	4413      	add	r3, r2
 80033be:	7818      	ldrb	r0, [r3, #0]
 80033c0:	7bba      	ldrb	r2, [r7, #14]
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	7b79      	ldrb	r1, [r7, #13]
 80033c6:	4301      	orrs	r1, r0
 80033c8:	b2c8      	uxtb	r0, r1
 80033ca:	4912      	ldr	r1, [pc, #72]	; (8003414 <draw_pixel+0xa0>)
 80033cc:	01d2      	lsls	r2, r2, #7
 80033ce:	440a      	add	r2, r1
 80033d0:	4413      	add	r3, r2
 80033d2:	4602      	mov	r2, r0
 80033d4:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 80033d6:	e016      	b.n	8003406 <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 80033d8:	7bba      	ldrb	r2, [r7, #14]
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	490d      	ldr	r1, [pc, #52]	; (8003414 <draw_pixel+0xa0>)
 80033de:	01d2      	lsls	r2, r2, #7
 80033e0:	440a      	add	r2, r1
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	b25a      	sxtb	r2, r3
 80033e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	b25b      	sxtb	r3, r3
 80033f0:	4013      	ands	r3, r2
 80033f2:	b259      	sxtb	r1, r3
 80033f4:	7bba      	ldrb	r2, [r7, #14]
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	b2c8      	uxtb	r0, r1
 80033fa:	4906      	ldr	r1, [pc, #24]	; (8003414 <draw_pixel+0xa0>)
 80033fc:	01d2      	lsls	r2, r2, #7
 80033fe:	440a      	add	r2, r1
 8003400:	4413      	add	r3, r2
 8003402:	4602      	mov	r2, r0
 8003404:	701a      	strb	r2, [r3, #0]
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20004d84 	.word	0x20004d84

08003418 <invert_pixel>:
				draw_pixel(x*3+i,y*3+j,color);
	}
}

void invert_pixel(uint8_t x, uint8_t y)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	460a      	mov	r2, r1
 8003422:	71fb      	strb	r3, [r7, #7]
 8003424:	4613      	mov	r3, r2
 8003426:	71bb      	strb	r3, [r7, #6]
	if(x<128 && y<32)
 8003428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342c:	2b00      	cmp	r3, #0
 800342e:	db24      	blt.n	800347a <invert_pixel+0x62>
 8003430:	79bb      	ldrb	r3, [r7, #6]
 8003432:	2b1f      	cmp	r3, #31
 8003434:	d821      	bhi.n	800347a <invert_pixel+0x62>
	{
		uint8_t pixel = 0x01;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
		gddram[y>>3][x] ^= pixel<<(y%8);
 800343a:	79bb      	ldrb	r3, [r7, #6]
 800343c:	08db      	lsrs	r3, r3, #3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	4910      	ldr	r1, [pc, #64]	; (8003488 <invert_pixel+0x70>)
 8003446:	01d2      	lsls	r2, r2, #7
 8003448:	440a      	add	r2, r1
 800344a:	4413      	add	r3, r2
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	b25a      	sxtb	r2, r3
 8003450:	7bf9      	ldrb	r1, [r7, #15]
 8003452:	79bb      	ldrb	r3, [r7, #6]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	b25b      	sxtb	r3, r3
 800345e:	4053      	eors	r3, r2
 8003460:	b259      	sxtb	r1, r3
 8003462:	79bb      	ldrb	r3, [r7, #6]
 8003464:	08db      	lsrs	r3, r3, #3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	b2c8      	uxtb	r0, r1
 800346e:	4906      	ldr	r1, [pc, #24]	; (8003488 <invert_pixel+0x70>)
 8003470:	01d2      	lsls	r2, r2, #7
 8003472:	440a      	add	r2, r1
 8003474:	4413      	add	r3, r2
 8003476:	4602      	mov	r2, r0
 8003478:	701a      	strb	r2, [r3, #0]
	}
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20004d84 	.word	0x20004d84

0800348c <invert_rectangle>:

void invert_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	4604      	mov	r4, r0
 8003494:	4608      	mov	r0, r1
 8003496:	4611      	mov	r1, r2
 8003498:	461a      	mov	r2, r3
 800349a:	4623      	mov	r3, r4
 800349c:	71fb      	strb	r3, [r7, #7]
 800349e:	4603      	mov	r3, r0
 80034a0:	71bb      	strb	r3, [r7, #6]
 80034a2:	460b      	mov	r3, r1
 80034a4:	717b      	strb	r3, [r7, #5]
 80034a6:	4613      	mov	r3, r2
 80034a8:	713b      	strb	r3, [r7, #4]
	uint8_t i,j;
	for(i=x0;i<x1;i++)
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	e012      	b.n	80034d6 <invert_rectangle+0x4a>
		for(j=y0;j<y1;j++)
 80034b0:	79bb      	ldrb	r3, [r7, #6]
 80034b2:	73bb      	strb	r3, [r7, #14]
 80034b4:	e008      	b.n	80034c8 <invert_rectangle+0x3c>
			invert_pixel(i,j);
 80034b6:	7bba      	ldrb	r2, [r7, #14]
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ffab 	bl	8003418 <invert_pixel>
		for(j=y0;j<y1;j++)
 80034c2:	7bbb      	ldrb	r3, [r7, #14]
 80034c4:	3301      	adds	r3, #1
 80034c6:	73bb      	strb	r3, [r7, #14]
 80034c8:	7bba      	ldrb	r2, [r7, #14]
 80034ca:	793b      	ldrb	r3, [r7, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d3f2      	bcc.n	80034b6 <invert_rectangle+0x2a>
	for(i=x0;i<x1;i++)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	3301      	adds	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
 80034d6:	7bfa      	ldrb	r2, [r7, #15]
 80034d8:	797b      	ldrb	r3, [r7, #5]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d3e8      	bcc.n	80034b0 <invert_rectangle+0x24>
}
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd90      	pop	{r4, r7, pc}

080034e8 <clear>:

void clear(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(i=0;i<4;i++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	71fb      	strb	r3, [r7, #7]
 80034f2:	e014      	b.n	800351e <clear+0x36>
		for(j=0;j<128;j++)
 80034f4:	2300      	movs	r3, #0
 80034f6:	71bb      	strb	r3, [r7, #6]
 80034f8:	e00a      	b.n	8003510 <clear+0x28>
			gddram[i][j]=0x00;
 80034fa:	79fa      	ldrb	r2, [r7, #7]
 80034fc:	79bb      	ldrb	r3, [r7, #6]
 80034fe:	490d      	ldr	r1, [pc, #52]	; (8003534 <clear+0x4c>)
 8003500:	01d2      	lsls	r2, r2, #7
 8003502:	440a      	add	r2, r1
 8003504:	4413      	add	r3, r2
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
		for(j=0;j<128;j++)
 800350a:	79bb      	ldrb	r3, [r7, #6]
 800350c:	3301      	adds	r3, #1
 800350e:	71bb      	strb	r3, [r7, #6]
 8003510:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	daf0      	bge.n	80034fa <clear+0x12>
	for(i=0;i<4;i++)
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	3301      	adds	r3, #1
 800351c:	71fb      	strb	r3, [r7, #7]
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d9e7      	bls.n	80034f4 <clear+0xc>
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20004d84 	.word	0x20004d84

08003538 <line_h>:
			break;
	}
}

void line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	4604      	mov	r4, r0
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	461a      	mov	r2, r3
 8003546:	4623      	mov	r3, r4
 8003548:	71fb      	strb	r3, [r7, #7]
 800354a:	4603      	mov	r3, r0
 800354c:	71bb      	strb	r3, [r7, #6]
 800354e:	460b      	mov	r3, r1
 8003550:	717b      	strb	r3, [r7, #5]
 8003552:	4613      	mov	r3, r2
 8003554:	713b      	strb	r3, [r7, #4]
	if(x0>x1)
 8003556:	79fa      	ldrb	r2, [r7, #7]
 8003558:	79bb      	ldrb	r3, [r7, #6]
 800355a:	429a      	cmp	r2, r3
 800355c:	d905      	bls.n	800356a <line_h+0x32>
	{
		uint8_t temp = x0;
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	757b      	strb	r3, [r7, #21]
		x0 = x1;
 8003562:	79bb      	ldrb	r3, [r7, #6]
 8003564:	71fb      	strb	r3, [r7, #7]
		x1 = temp;
 8003566:	7d7b      	ldrb	r3, [r7, #21]
 8003568:	71bb      	strb	r3, [r7, #6]
	}
	uint8_t i,j;
	switch(mode)
 800356a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800356e:	2b02      	cmp	r3, #2
 8003570:	f000 80ac 	beq.w	80036cc <line_h+0x194>
 8003574:	2b02      	cmp	r3, #2
 8003576:	f300 80fb 	bgt.w	8003770 <line_h+0x238>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d054      	beq.n	8003628 <line_h+0xf0>
 800357e:	2b01      	cmp	r3, #1
 8003580:	f040 80f6 	bne.w	8003770 <line_h+0x238>
	{
		case add :
			if(width%2)
 8003584:	793b      	ldrb	r3, [r7, #4]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d027      	beq.n	80035e0 <line_h+0xa8>
			{
				uint8_t start = y0-(width-1)/2;
 8003590:	793b      	ldrb	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	0fda      	lsrs	r2, r3, #31
 8003596:	4413      	add	r3, r2
 8003598:	105b      	asrs	r3, r3, #1
 800359a:	425b      	negs	r3, r3
 800359c:	b2da      	uxtb	r2, r3
 800359e:	797b      	ldrb	r3, [r7, #5]
 80035a0:	4413      	add	r3, r2
 80035a2:	747b      	strb	r3, [r7, #17]
				for(i=0;i<width;i++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	75fb      	strb	r3, [r7, #23]
 80035a8:	e015      	b.n	80035d6 <line_h+0x9e>
					for(j=x0;j<=x1;j++)
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	75bb      	strb	r3, [r7, #22]
 80035ae:	e00b      	b.n	80035c8 <line_h+0x90>
						draw_pixel(j,start+i,1);
 80035b0:	7c7a      	ldrb	r2, [r7, #17]
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	4413      	add	r3, r2
 80035b6:	b2d9      	uxtb	r1, r3
 80035b8:	7dbb      	ldrb	r3, [r7, #22]
 80035ba:	2201      	movs	r2, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fed9 	bl	8003374 <draw_pixel>
					for(j=x0;j<=x1;j++)
 80035c2:	7dbb      	ldrb	r3, [r7, #22]
 80035c4:	3301      	adds	r3, #1
 80035c6:	75bb      	strb	r3, [r7, #22]
 80035c8:	7dba      	ldrb	r2, [r7, #22]
 80035ca:	79bb      	ldrb	r3, [r7, #6]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d9ef      	bls.n	80035b0 <line_h+0x78>
				for(i=0;i<width;i++)
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	3301      	adds	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
 80035d6:	7dfa      	ldrb	r2, [r7, #23]
 80035d8:	793b      	ldrb	r3, [r7, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d3e5      	bcc.n	80035aa <line_h+0x72>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,1);
			}
			break;
 80035de:	e0c7      	b.n	8003770 <line_h+0x238>
				uint8_t start = y0-width/2;
 80035e0:	793b      	ldrb	r3, [r7, #4]
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	797a      	ldrb	r2, [r7, #5]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	74bb      	strb	r3, [r7, #18]
				for(i=0;i<width;i++)
 80035ec:	2300      	movs	r3, #0
 80035ee:	75fb      	strb	r3, [r7, #23]
 80035f0:	e015      	b.n	800361e <line_h+0xe6>
					for(j=x0;j<=x1;j++)
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	75bb      	strb	r3, [r7, #22]
 80035f6:	e00b      	b.n	8003610 <line_h+0xd8>
						draw_pixel(j,start+i,1);
 80035f8:	7cba      	ldrb	r2, [r7, #18]
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	4413      	add	r3, r2
 80035fe:	b2d9      	uxtb	r1, r3
 8003600:	7dbb      	ldrb	r3, [r7, #22]
 8003602:	2201      	movs	r2, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff feb5 	bl	8003374 <draw_pixel>
					for(j=x0;j<=x1;j++)
 800360a:	7dbb      	ldrb	r3, [r7, #22]
 800360c:	3301      	adds	r3, #1
 800360e:	75bb      	strb	r3, [r7, #22]
 8003610:	7dba      	ldrb	r2, [r7, #22]
 8003612:	79bb      	ldrb	r3, [r7, #6]
 8003614:	429a      	cmp	r2, r3
 8003616:	d9ef      	bls.n	80035f8 <line_h+0xc0>
				for(i=0;i<width;i++)
 8003618:	7dfb      	ldrb	r3, [r7, #23]
 800361a:	3301      	adds	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
 800361e:	7dfa      	ldrb	r2, [r7, #23]
 8003620:	793b      	ldrb	r3, [r7, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	d3e5      	bcc.n	80035f2 <line_h+0xba>
			break;
 8003626:	e0a3      	b.n	8003770 <line_h+0x238>

		case erase :
			if(width%2)
 8003628:	793b      	ldrb	r3, [r7, #4]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d027      	beq.n	8003684 <line_h+0x14c>
			{
				uint8_t start = y0-(width-1)/2;
 8003634:	793b      	ldrb	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	0fda      	lsrs	r2, r3, #31
 800363a:	4413      	add	r3, r2
 800363c:	105b      	asrs	r3, r3, #1
 800363e:	425b      	negs	r3, r3
 8003640:	b2da      	uxtb	r2, r3
 8003642:	797b      	ldrb	r3, [r7, #5]
 8003644:	4413      	add	r3, r2
 8003646:	73fb      	strb	r3, [r7, #15]
				for(i=0;i<width;i++)
 8003648:	2300      	movs	r3, #0
 800364a:	75fb      	strb	r3, [r7, #23]
 800364c:	e015      	b.n	800367a <line_h+0x142>
					for(j=x0;j<=x1;j++)
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	75bb      	strb	r3, [r7, #22]
 8003652:	e00b      	b.n	800366c <line_h+0x134>
						draw_pixel(j,start+i,0);
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	7dfb      	ldrb	r3, [r7, #23]
 8003658:	4413      	add	r3, r2
 800365a:	b2d9      	uxtb	r1, r3
 800365c:	7dbb      	ldrb	r3, [r7, #22]
 800365e:	2200      	movs	r2, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fe87 	bl	8003374 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003666:	7dbb      	ldrb	r3, [r7, #22]
 8003668:	3301      	adds	r3, #1
 800366a:	75bb      	strb	r3, [r7, #22]
 800366c:	7dba      	ldrb	r2, [r7, #22]
 800366e:	79bb      	ldrb	r3, [r7, #6]
 8003670:	429a      	cmp	r2, r3
 8003672:	d9ef      	bls.n	8003654 <line_h+0x11c>
				for(i=0;i<width;i++)
 8003674:	7dfb      	ldrb	r3, [r7, #23]
 8003676:	3301      	adds	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
 800367a:	7dfa      	ldrb	r2, [r7, #23]
 800367c:	793b      	ldrb	r3, [r7, #4]
 800367e:	429a      	cmp	r2, r3
 8003680:	d3e5      	bcc.n	800364e <line_h+0x116>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,0);
			}
			break;
 8003682:	e075      	b.n	8003770 <line_h+0x238>
				uint8_t start = y0-width/2;
 8003684:	793b      	ldrb	r3, [r7, #4]
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	797a      	ldrb	r2, [r7, #5]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	743b      	strb	r3, [r7, #16]
				for(i=0;i<width;i++)
 8003690:	2300      	movs	r3, #0
 8003692:	75fb      	strb	r3, [r7, #23]
 8003694:	e015      	b.n	80036c2 <line_h+0x18a>
					for(j=x0;j<=x1;j++)
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	75bb      	strb	r3, [r7, #22]
 800369a:	e00b      	b.n	80036b4 <line_h+0x17c>
						draw_pixel(j,start+i,0);
 800369c:	7c3a      	ldrb	r2, [r7, #16]
 800369e:	7dfb      	ldrb	r3, [r7, #23]
 80036a0:	4413      	add	r3, r2
 80036a2:	b2d9      	uxtb	r1, r3
 80036a4:	7dbb      	ldrb	r3, [r7, #22]
 80036a6:	2200      	movs	r2, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fe63 	bl	8003374 <draw_pixel>
					for(j=x0;j<=x1;j++)
 80036ae:	7dbb      	ldrb	r3, [r7, #22]
 80036b0:	3301      	adds	r3, #1
 80036b2:	75bb      	strb	r3, [r7, #22]
 80036b4:	7dba      	ldrb	r2, [r7, #22]
 80036b6:	79bb      	ldrb	r3, [r7, #6]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d9ef      	bls.n	800369c <line_h+0x164>
				for(i=0;i<width;i++)
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
 80036be:	3301      	adds	r3, #1
 80036c0:	75fb      	strb	r3, [r7, #23]
 80036c2:	7dfa      	ldrb	r2, [r7, #23]
 80036c4:	793b      	ldrb	r3, [r7, #4]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3e5      	bcc.n	8003696 <line_h+0x15e>
			break;
 80036ca:	e051      	b.n	8003770 <line_h+0x238>

		case invert :
			if(width%2)
 80036cc:	793b      	ldrb	r3, [r7, #4]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d027      	beq.n	8003728 <line_h+0x1f0>
			{
				uint8_t start = y0-(width-1)/2;
 80036d8:	793b      	ldrb	r3, [r7, #4]
 80036da:	3b01      	subs	r3, #1
 80036dc:	0fda      	lsrs	r2, r3, #31
 80036de:	4413      	add	r3, r2
 80036e0:	105b      	asrs	r3, r3, #1
 80036e2:	425b      	negs	r3, r3
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	797b      	ldrb	r3, [r7, #5]
 80036e8:	4413      	add	r3, r2
 80036ea:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<width;i++)
 80036ec:	2300      	movs	r3, #0
 80036ee:	75fb      	strb	r3, [r7, #23]
 80036f0:	e015      	b.n	800371e <line_h+0x1e6>
					for(j=x0;j<=x1;j++)
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	75bb      	strb	r3, [r7, #22]
 80036f6:	e00b      	b.n	8003710 <line_h+0x1d8>
						invert_pixel(j,start+i);
 80036f8:	7cfa      	ldrb	r2, [r7, #19]
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	4413      	add	r3, r2
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	7dbb      	ldrb	r3, [r7, #22]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fe87 	bl	8003418 <invert_pixel>
					for(j=x0;j<=x1;j++)
 800370a:	7dbb      	ldrb	r3, [r7, #22]
 800370c:	3301      	adds	r3, #1
 800370e:	75bb      	strb	r3, [r7, #22]
 8003710:	7dba      	ldrb	r2, [r7, #22]
 8003712:	79bb      	ldrb	r3, [r7, #6]
 8003714:	429a      	cmp	r2, r3
 8003716:	d9ef      	bls.n	80036f8 <line_h+0x1c0>
				for(i=0;i<width;i++)
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	3301      	adds	r3, #1
 800371c:	75fb      	strb	r3, [r7, #23]
 800371e:	7dfa      	ldrb	r2, [r7, #23]
 8003720:	793b      	ldrb	r3, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d3e5      	bcc.n	80036f2 <line_h+0x1ba>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						invert_pixel(j,start+i);
			}
			break;
 8003726:	e022      	b.n	800376e <line_h+0x236>
				uint8_t start = y0-width/2;
 8003728:	793b      	ldrb	r3, [r7, #4]
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	797a      	ldrb	r2, [r7, #5]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	753b      	strb	r3, [r7, #20]
				for(i=0;i<width;i++)
 8003734:	2300      	movs	r3, #0
 8003736:	75fb      	strb	r3, [r7, #23]
 8003738:	e015      	b.n	8003766 <line_h+0x22e>
					for(j=x0;j<=x1;j++)
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	75bb      	strb	r3, [r7, #22]
 800373e:	e00b      	b.n	8003758 <line_h+0x220>
						invert_pixel(j,start+i);
 8003740:	7d3a      	ldrb	r2, [r7, #20]
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	4413      	add	r3, r2
 8003746:	b2da      	uxtb	r2, r3
 8003748:	7dbb      	ldrb	r3, [r7, #22]
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff fe63 	bl	8003418 <invert_pixel>
					for(j=x0;j<=x1;j++)
 8003752:	7dbb      	ldrb	r3, [r7, #22]
 8003754:	3301      	adds	r3, #1
 8003756:	75bb      	strb	r3, [r7, #22]
 8003758:	7dba      	ldrb	r2, [r7, #22]
 800375a:	79bb      	ldrb	r3, [r7, #6]
 800375c:	429a      	cmp	r2, r3
 800375e:	d9ef      	bls.n	8003740 <line_h+0x208>
				for(i=0;i<width;i++)
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	3301      	adds	r3, #1
 8003764:	75fb      	strb	r3, [r7, #23]
 8003766:	7dfa      	ldrb	r2, [r7, #23]
 8003768:	793b      	ldrb	r3, [r7, #4]
 800376a:	429a      	cmp	r2, r3
 800376c:	d3e5      	bcc.n	800373a <line_h+0x202>
			break;
 800376e:	bf00      	nop

	}
}
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	bd90      	pop	{r4, r7, pc}

08003778 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	4604      	mov	r4, r0
 8003780:	4608      	mov	r0, r1
 8003782:	4611      	mov	r1, r2
 8003784:	461a      	mov	r2, r3
 8003786:	4623      	mov	r3, r4
 8003788:	71fb      	strb	r3, [r7, #7]
 800378a:	4603      	mov	r3, r0
 800378c:	71bb      	strb	r3, [r7, #6]
 800378e:	460b      	mov	r3, r1
 8003790:	717b      	strb	r3, [r7, #5]
 8003792:	4613      	mov	r3, r2
 8003794:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 800379a:	2300      	movs	r3, #0
 800379c:	75fb      	strb	r3, [r7, #23]
 800379e:	e04d      	b.n	800383c <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	75bb      	strb	r3, [r7, #22]
 80037a4:	e042      	b.n	800382c <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	08db      	lsrs	r3, r3, #3
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	7dbb      	ldrb	r3, [r7, #22]
 80037ae:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80037b2:	fb11 f303 	smulbb	r3, r1, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4413      	add	r3, r2
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	43db      	mvns	r3, r3
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	2201      	movs	r2, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 80037d6:	7bba      	ldrb	r2, [r7, #14]
 80037d8:	7b7b      	ldrb	r3, [r7, #13]
 80037da:	4013      	ands	r3, r2
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00f      	beq.n	8003802 <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 80037e2:	79fa      	ldrb	r2, [r7, #7]
 80037e4:	797b      	ldrb	r3, [r7, #5]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	4413      	add	r3, r2
 80037ee:	b2d8      	uxtb	r0, r3
 80037f0:	7dba      	ldrb	r2, [r7, #22]
 80037f2:	79bb      	ldrb	r3, [r7, #6]
 80037f4:	4413      	add	r3, r2
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2201      	movs	r2, #1
 80037fa:	4619      	mov	r1, r3
 80037fc:	f7ff fdba 	bl	8003374 <draw_pixel>
 8003800:	e00e      	b.n	8003820 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 8003802:	79fa      	ldrb	r2, [r7, #7]
 8003804:	797b      	ldrb	r3, [r7, #5]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	b2da      	uxtb	r2, r3
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	4413      	add	r3, r2
 800380e:	b2d8      	uxtb	r0, r3
 8003810:	7dba      	ldrb	r2, [r7, #22]
 8003812:	79bb      	ldrb	r3, [r7, #6]
 8003814:	4413      	add	r3, r2
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2200      	movs	r2, #0
 800381a:	4619      	mov	r1, r3
 800381c:	f7ff fdaa 	bl	8003374 <draw_pixel>
		for (y=0; y<height; y++)
 8003820:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	3301      	adds	r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	75bb      	strb	r3, [r7, #22]
 800382c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8003830:	793b      	ldrb	r3, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	dbb7      	blt.n	80037a6 <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	3301      	adds	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
 800383c:	7dfa      	ldrb	r2, [r7, #23]
 800383e:	797b      	ldrb	r3, [r7, #5]
 8003840:	429a      	cmp	r2, r3
 8003842:	d3ad      	bcc.n	80037a0 <graphics_Glyph+0x28>
		}
	}
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	bd90      	pop	{r4, r7, pc}
	...

08003850 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af02      	add	r7, sp, #8
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	4603      	mov	r3, r0
 800385a:	71fb      	strb	r3, [r7, #7]
 800385c:	460b      	mov	r3, r1
 800385e:	71bb      	strb	r3, [r7, #6]
 8003860:	4613      	mov	r3, r2
 8003862:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 8003868:	e081      	b.n	800396e <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 8003870:	797a      	ldrb	r2, [r7, #5]
 8003872:	4944      	ldr	r1, [pc, #272]	; (8003984 <graphics_text+0x134>)
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	3310      	adds	r3, #16
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	7dba      	ldrb	r2, [r7, #22]
 8003884:	429a      	cmp	r2, r3
 8003886:	d30b      	bcc.n	80038a0 <graphics_text+0x50>
 8003888:	797a      	ldrb	r2, [r7, #5]
 800388a:	493e      	ldr	r1, [pc, #248]	; (8003984 <graphics_text+0x134>)
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	3311      	adds	r3, #17
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	7dba      	ldrb	r2, [r7, #22]
 800389c:	429a      	cmp	r2, r3
 800389e:	d909      	bls.n	80038b4 <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 80038a0:	797a      	ldrb	r2, [r7, #5]
 80038a2:	4938      	ldr	r1, [pc, #224]	; (8003984 <graphics_text+0x134>)
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	3312      	adds	r3, #18
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 80038b4:	797a      	ldrb	r2, [r7, #5]
 80038b6:	4933      	ldr	r1, [pc, #204]	; (8003984 <graphics_text+0x134>)
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	3310      	adds	r3, #16
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	7dba      	ldrb	r2, [r7, #22]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 80038cc:	797a      	ldrb	r2, [r7, #5]
 80038ce:	492d      	ldr	r1, [pc, #180]	; (8003984 <graphics_text+0x134>)
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3308      	adds	r3, #8
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 80038e0:	7d7b      	ldrb	r3, [r7, #21]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 80038e6:	797a      	ldrb	r2, [r7, #5]
 80038e8:	4926      	ldr	r1, [pc, #152]	; (8003984 <graphics_text+0x134>)
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	330c      	adds	r3, #12
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	7dbb      	ldrb	r3, [r7, #22]
 80038fa:	4413      	add	r3, r2
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8003900:	797a      	ldrb	r2, [r7, #5]
 8003902:	4920      	ldr	r1, [pc, #128]	; (8003984 <graphics_text+0x134>)
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3301      	adds	r3, #1
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 8003914:	797a      	ldrb	r2, [r7, #5]
 8003916:	491b      	ldr	r1, [pc, #108]	; (8003984 <graphics_text+0x134>)
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 8003926:	797a      	ldrb	r2, [r7, #5]
 8003928:	4916      	ldr	r1, [pc, #88]	; (8003984 <graphics_text+0x134>)
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3304      	adds	r3, #4
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	7dbb      	ldrb	r3, [r7, #22]
 800393a:	7cf9      	ldrb	r1, [r7, #19]
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	7d39      	ldrb	r1, [r7, #20]
 8003942:	fb01 f303 	mul.w	r3, r1, r3
 8003946:	4413      	add	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]


		x+=width;
 800394a:	7dfa      	ldrb	r2, [r7, #23]
 800394c:	7d7b      	ldrb	r3, [r7, #21]
 800394e:	4413      	add	r3, r2
 8003950:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 8003952:	7d3c      	ldrb	r4, [r7, #20]
 8003954:	7d7a      	ldrb	r2, [r7, #21]
 8003956:	79b9      	ldrb	r1, [r7, #6]
 8003958:	7df8      	ldrb	r0, [r7, #23]
 800395a:	7cfb      	ldrb	r3, [r7, #19]
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	4623      	mov	r3, r4
 8003964:	f7ff ff08 	bl	8003778 <graphics_Glyph>
		str++;								/* point to next character in string */
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	3301      	adds	r3, #1
 800396c:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f47f af79 	bne.w	800386a <graphics_text+0x1a>
	}

}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	bd90      	pop	{r4, r7, pc}
 8003982:	bf00      	nop
 8003984:	08011ce4 	.word	0x08011ce4

08003988 <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af02      	add	r7, sp, #8
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 8003992:	2300      	movs	r3, #0
 8003994:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 800399a:	f107 020c 	add.w	r2, r7, #12
 800399e:	2332      	movs	r3, #50	; 0x32
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	2302      	movs	r3, #2
 80039a4:	2178      	movs	r1, #120	; 0x78
 80039a6:	4803      	ldr	r0, [pc, #12]	; (80039b4 <ssd1306_command+0x2c>)
 80039a8:	f002 fb76 	bl	8006098 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20004ac8 	.word	0x20004ac8

080039b8 <oled_update>:

void oled_update(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 80039be:	2021      	movs	r0, #33	; 0x21
 80039c0:	f7ff ffe2 	bl	8003988 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 80039c4:	2000      	movs	r0, #0
 80039c6:	f7ff ffdf 	bl	8003988 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 80039ca:	207f      	movs	r0, #127	; 0x7f
 80039cc:	f7ff ffdc 	bl	8003988 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 80039d0:	2022      	movs	r0, #34	; 0x22
 80039d2:	f7ff ffd9 	bl	8003988 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 80039d6:	2000      	movs	r0, #0
 80039d8:	f7ff ffd6 	bl	8003988 <ssd1306_command>
  ssd1306_command(3); // Page end address
 80039dc:	2003      	movs	r0, #3
 80039de:	f7ff ffd3 	bl	8003988 <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 80039e2:	2340      	movs	r3, #64	; 0x40
 80039e4:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	82fb      	strh	r3, [r7, #22]
 80039ea:	e02d      	b.n	8003a48 <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 80039ec:	2300      	movs	r3, #0
 80039ee:	757b      	strb	r3, [r7, #21]
 80039f0:	e024      	b.n	8003a3c <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 80039f2:	2301      	movs	r3, #1
 80039f4:	753b      	strb	r3, [r7, #20]
 80039f6:	e012      	b.n	8003a1e <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 80039f8:	8af9      	ldrh	r1, [r7, #22]
 80039fa:	7d7a      	ldrb	r2, [r7, #21]
 80039fc:	7d3b      	ldrb	r3, [r7, #20]
 80039fe:	4413      	add	r3, r2
 8003a00:	1e5a      	subs	r2, r3, #1
 8003a02:	7d3b      	ldrb	r3, [r7, #20]
 8003a04:	4814      	ldr	r0, [pc, #80]	; (8003a58 <oled_update+0xa0>)
 8003a06:	01c9      	lsls	r1, r1, #7
 8003a08:	4401      	add	r1, r0
 8003a0a:	440a      	add	r2, r1
 8003a0c:	7812      	ldrb	r2, [r2, #0]
 8003a0e:	f107 0118 	add.w	r1, r7, #24
 8003a12:	440b      	add	r3, r1
 8003a14:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8003a18:	7d3b      	ldrb	r3, [r7, #20]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	753b      	strb	r3, [r7, #20]
 8003a1e:	7d3b      	ldrb	r3, [r7, #20]
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d9e9      	bls.n	80039f8 <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 8003a24:	463a      	mov	r2, r7
 8003a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2311      	movs	r3, #17
 8003a2e:	2178      	movs	r1, #120	; 0x78
 8003a30:	480a      	ldr	r0, [pc, #40]	; (8003a5c <oled_update+0xa4>)
 8003a32:	f002 fb31 	bl	8006098 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 8003a36:	7d7b      	ldrb	r3, [r7, #21]
 8003a38:	3310      	adds	r3, #16
 8003a3a:	757b      	strb	r3, [r7, #21]
 8003a3c:	7d7b      	ldrb	r3, [r7, #21]
 8003a3e:	2b7e      	cmp	r3, #126	; 0x7e
 8003a40:	d9d7      	bls.n	80039f2 <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 8003a42:	8afb      	ldrh	r3, [r7, #22]
 8003a44:	3301      	adds	r3, #1
 8003a46:	82fb      	strh	r3, [r7, #22]
 8003a48:	8afb      	ldrh	r3, [r7, #22]
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d9ce      	bls.n	80039ec <oled_update+0x34>
		}
	}

}
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20004d84 	.word	0x20004d84
 8003a5c:	20004ac8 	.word	0x20004ac8

08003a60 <oled_init>:

void oled_init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8003a66:	20ae      	movs	r0, #174	; 0xae
 8003a68:	f7ff ff8e 	bl	8003988 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8003a6c:	20d5      	movs	r0, #213	; 0xd5
 8003a6e:	f7ff ff8b 	bl	8003988 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 8003a72:	2080      	movs	r0, #128	; 0x80
 8003a74:	f7ff ff88 	bl	8003988 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8003a78:	20a8      	movs	r0, #168	; 0xa8
 8003a7a:	f7ff ff85 	bl	8003988 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 8003a7e:	201f      	movs	r0, #31
 8003a80:	f7ff ff82 	bl	8003988 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8003a84:	20d3      	movs	r0, #211	; 0xd3
 8003a86:	f7ff ff7f 	bl	8003988 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f7ff ff7c 	bl	8003988 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8003a90:	2040      	movs	r0, #64	; 0x40
 8003a92:	f7ff ff79 	bl	8003988 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 8003a96:	208d      	movs	r0, #141	; 0x8d
 8003a98:	f7ff ff76 	bl	8003988 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 8003a9c:	2014      	movs	r0, #20
 8003a9e:	f7ff ff73 	bl	8003988 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8003aa2:	2020      	movs	r0, #32
 8003aa4:	f7ff ff70 	bl	8003988 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f7ff ff6d 	bl	8003988 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 8003aae:	20a1      	movs	r0, #161	; 0xa1
 8003ab0:	f7ff ff6a 	bl	8003988 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 8003ab4:	20c8      	movs	r0, #200	; 0xc8
 8003ab6:	f7ff ff67 	bl	8003988 <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 8003aba:	20da      	movs	r0, #218	; 0xda
 8003abc:	f7ff ff64 	bl	8003988 <ssd1306_command>
  ssd1306_command(0x02);
 8003ac0:	2002      	movs	r0, #2
 8003ac2:	f7ff ff61 	bl	8003988 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 8003ac6:	2081      	movs	r0, #129	; 0x81
 8003ac8:	f7ff ff5e 	bl	8003988 <ssd1306_command>
  ssd1306_command(0x8F);
 8003acc:	208f      	movs	r0, #143	; 0x8f
 8003ace:	f7ff ff5b 	bl	8003988 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8003ad2:	20d9      	movs	r0, #217	; 0xd9
 8003ad4:	f7ff ff58 	bl	8003988 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 8003ad8:	20f1      	movs	r0, #241	; 0xf1
 8003ada:	f7ff ff55 	bl	8003988 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 8003ade:	20db      	movs	r0, #219	; 0xdb
 8003ae0:	f7ff ff52 	bl	8003988 <ssd1306_command>
  ssd1306_command(0x40);
 8003ae4:	2040      	movs	r0, #64	; 0x40
 8003ae6:	f7ff ff4f 	bl	8003988 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 8003aea:	20a4      	movs	r0, #164	; 0xa4
 8003aec:	f7ff ff4c 	bl	8003988 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8003af0:	20a6      	movs	r0, #166	; 0xa6
 8003af2:	f7ff ff49 	bl	8003988 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 8003af6:	202e      	movs	r0, #46	; 0x2e
 8003af8:	f7ff ff46 	bl	8003988 <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8003afc:	20af      	movs	r0, #175	; 0xaf
 8003afe:	f7ff ff43 	bl	8003988 <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 8003b02:	2300      	movs	r3, #0
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	e013      	b.n	8003b30 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	e00a      	b.n	8003b24 <oled_init+0xc4>
			gddram[i][j] = 0x00;
 8003b0e:	4a0c      	ldr	r2, [pc, #48]	; (8003b40 <oled_init+0xe0>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	01db      	lsls	r3, r3, #7
 8003b14:	441a      	add	r2, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	4413      	add	r3, r2
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	3301      	adds	r3, #1
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b7f      	cmp	r3, #127	; 0x7f
 8003b28:	ddf1      	ble.n	8003b0e <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	dde8      	ble.n	8003b08 <oled_init+0xa8>
}
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20004d84 	.word	0x20004d84

08003b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b48:	480d      	ldr	r0, [pc, #52]	; (8003b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b4a:	490e      	ldr	r1, [pc, #56]	; (8003b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b4c:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b50:	e002      	b.n	8003b58 <LoopCopyDataInit>

08003b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b56:	3304      	adds	r3, #4

08003b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b5c:	d3f9      	bcc.n	8003b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b5e:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b60:	4c0b      	ldr	r4, [pc, #44]	; (8003b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b64:	e001      	b.n	8003b6a <LoopFillZerobss>

08003b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b68:	3204      	adds	r2, #4

08003b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b6c:	d3fb      	bcc.n	8003b66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b6e:	f7ff fbef 	bl	8003350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b72:	f00d f96b 	bl	8010e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b76:	f7fd f82b 	bl	8000bd0 <main>
  bx  lr    
 8003b7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b84:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003b88:	080141f0 	.word	0x080141f0
  ldr r2, =_sbss
 8003b8c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003b90:	200056e4 	.word	0x200056e4

08003b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b94:	e7fe      	b.n	8003b94 <ADC_IRQHandler>
	...

08003b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <HAL_Init+0x40>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0d      	ldr	r2, [pc, #52]	; (8003bd8 <HAL_Init+0x40>)
 8003ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_Init+0x40>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <HAL_Init+0x40>)
 8003bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <HAL_Init+0x40>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <HAL_Init+0x40>)
 8003bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	f000 f8fc 	bl	8003dbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bc6:	200f      	movs	r0, #15
 8003bc8:	f7ff fab0 	bl	800312c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bcc:	f7ff f828 	bl	8002c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023c00 	.word	0x40023c00

08003bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_IncTick+0x20>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_IncTick+0x24>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4413      	add	r3, r2
 8003bec:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <HAL_IncTick+0x24>)
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000014 	.word	0x20000014
 8003c00:	20004f84 	.word	0x20004f84

08003c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return uwTick;
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_GetTick+0x14>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20004f84 	.word	0x20004f84

08003c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7ff ffee 	bl	8003c04 <HAL_GetTick>
 8003c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c34:	d005      	beq.n	8003c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <HAL_Delay+0x44>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c42:	bf00      	nop
 8003c44:	f7ff ffde 	bl	8003c04 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d8f7      	bhi.n	8003c44 <HAL_Delay+0x28>
  {
  }
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000014 	.word	0x20000014

08003c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c74:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c80:	4013      	ands	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c96:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	60d3      	str	r3, [r2, #12]
}
 8003c9c:	bf00      	nop
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	f003 0307 	and.w	r3, r3, #7
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	db0b      	blt.n	8003cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	4907      	ldr	r1, [pc, #28]	; (8003d00 <__NVIC_EnableIRQ+0x38>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2001      	movs	r0, #1
 8003cea:	fa00 f202 	lsl.w	r2, r0, r2
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000e100 	.word	0xe000e100

08003d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	6039      	str	r1, [r7, #0]
 8003d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	db0a      	blt.n	8003d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	490c      	ldr	r1, [pc, #48]	; (8003d50 <__NVIC_SetPriority+0x4c>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	0112      	lsls	r2, r2, #4
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	440b      	add	r3, r1
 8003d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d2c:	e00a      	b.n	8003d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	4908      	ldr	r1, [pc, #32]	; (8003d54 <__NVIC_SetPriority+0x50>)
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	3b04      	subs	r3, #4
 8003d3c:	0112      	lsls	r2, r2, #4
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	440b      	add	r3, r1
 8003d42:	761a      	strb	r2, [r3, #24]
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	e000e100 	.word	0xe000e100
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b089      	sub	sp, #36	; 0x24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f1c3 0307 	rsb	r3, r3, #7
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	bf28      	it	cs
 8003d76:	2304      	movcs	r3, #4
 8003d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d902      	bls.n	8003d88 <NVIC_EncodePriority+0x30>
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3b03      	subs	r3, #3
 8003d86:	e000      	b.n	8003d8a <NVIC_EncodePriority+0x32>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43da      	mvns	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	43d9      	mvns	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	4313      	orrs	r3, r2
         );
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff ff4c 	bl	8003c64 <__NVIC_SetPriorityGrouping>
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003de6:	f7ff ff61 	bl	8003cac <__NVIC_GetPriorityGrouping>
 8003dea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	6978      	ldr	r0, [r7, #20]
 8003df2:	f7ff ffb1 	bl	8003d58 <NVIC_EncodePriority>
 8003df6:	4602      	mov	r2, r0
 8003df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff ff80 	bl	8003d04 <__NVIC_SetPriority>
}
 8003e04:	bf00      	nop
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff ff54 	bl	8003cc8 <__NVIC_EnableIRQ>
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e36:	f7ff fee5 	bl	8003c04 <HAL_GetTick>
 8003e3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d008      	beq.n	8003e5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2280      	movs	r2, #128	; 0x80
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e052      	b.n	8003f00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0216 	bic.w	r2, r2, #22
 8003e68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <HAL_DMA_Abort+0x62>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0208 	bic.w	r2, r2, #8
 8003e98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eaa:	e013      	b.n	8003ed4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eac:	f7ff feaa 	bl	8003c04 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d90c      	bls.n	8003ed4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e015      	b.n	8003f00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e4      	bne.n	8003eac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	223f      	movs	r2, #63	; 0x3f
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d004      	beq.n	8003f26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2280      	movs	r2, #128	; 0x80
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e00c      	b.n	8003f40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2205      	movs	r2, #5
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	; 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	e16b      	b.n	8004240 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f68:	2201      	movs	r2, #1
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	f040 815a 	bne.w	800423a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d005      	beq.n	8003f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d130      	bne.n	8004000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	2203      	movs	r2, #3
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 0201 	and.w	r2, r3, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b03      	cmp	r3, #3
 800400a:	d017      	beq.n	800403c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	2203      	movs	r2, #3
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d123      	bne.n	8004090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	08da      	lsrs	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3208      	adds	r2, #8
 8004050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	220f      	movs	r2, #15
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	08da      	lsrs	r2, r3, #3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3208      	adds	r2, #8
 800408a:	69b9      	ldr	r1, [r7, #24]
 800408c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2203      	movs	r2, #3
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0203 	and.w	r2, r3, #3
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80b4 	beq.w	800423a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	4b60      	ldr	r3, [pc, #384]	; (8004258 <HAL_GPIO_Init+0x30c>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	4a5f      	ldr	r2, [pc, #380]	; (8004258 <HAL_GPIO_Init+0x30c>)
 80040dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e0:	6453      	str	r3, [r2, #68]	; 0x44
 80040e2:	4b5d      	ldr	r3, [pc, #372]	; (8004258 <HAL_GPIO_Init+0x30c>)
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ee:	4a5b      	ldr	r2, [pc, #364]	; (800425c <HAL_GPIO_Init+0x310>)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	089b      	lsrs	r3, r3, #2
 80040f4:	3302      	adds	r3, #2
 80040f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	220f      	movs	r2, #15
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a52      	ldr	r2, [pc, #328]	; (8004260 <HAL_GPIO_Init+0x314>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d02b      	beq.n	8004172 <HAL_GPIO_Init+0x226>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a51      	ldr	r2, [pc, #324]	; (8004264 <HAL_GPIO_Init+0x318>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d025      	beq.n	800416e <HAL_GPIO_Init+0x222>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a50      	ldr	r2, [pc, #320]	; (8004268 <HAL_GPIO_Init+0x31c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01f      	beq.n	800416a <HAL_GPIO_Init+0x21e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a4f      	ldr	r2, [pc, #316]	; (800426c <HAL_GPIO_Init+0x320>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d019      	beq.n	8004166 <HAL_GPIO_Init+0x21a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4e      	ldr	r2, [pc, #312]	; (8004270 <HAL_GPIO_Init+0x324>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_GPIO_Init+0x216>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4d      	ldr	r2, [pc, #308]	; (8004274 <HAL_GPIO_Init+0x328>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00d      	beq.n	800415e <HAL_GPIO_Init+0x212>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4c      	ldr	r2, [pc, #304]	; (8004278 <HAL_GPIO_Init+0x32c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <HAL_GPIO_Init+0x20e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a4b      	ldr	r2, [pc, #300]	; (800427c <HAL_GPIO_Init+0x330>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <HAL_GPIO_Init+0x20a>
 8004152:	2307      	movs	r3, #7
 8004154:	e00e      	b.n	8004174 <HAL_GPIO_Init+0x228>
 8004156:	2308      	movs	r3, #8
 8004158:	e00c      	b.n	8004174 <HAL_GPIO_Init+0x228>
 800415a:	2306      	movs	r3, #6
 800415c:	e00a      	b.n	8004174 <HAL_GPIO_Init+0x228>
 800415e:	2305      	movs	r3, #5
 8004160:	e008      	b.n	8004174 <HAL_GPIO_Init+0x228>
 8004162:	2304      	movs	r3, #4
 8004164:	e006      	b.n	8004174 <HAL_GPIO_Init+0x228>
 8004166:	2303      	movs	r3, #3
 8004168:	e004      	b.n	8004174 <HAL_GPIO_Init+0x228>
 800416a:	2302      	movs	r3, #2
 800416c:	e002      	b.n	8004174 <HAL_GPIO_Init+0x228>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_GPIO_Init+0x228>
 8004172:	2300      	movs	r3, #0
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	f002 0203 	and.w	r2, r2, #3
 800417a:	0092      	lsls	r2, r2, #2
 800417c:	4093      	lsls	r3, r2
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004184:	4935      	ldr	r1, [pc, #212]	; (800425c <HAL_GPIO_Init+0x310>)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	089b      	lsrs	r3, r3, #2
 800418a:	3302      	adds	r3, #2
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004192:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <HAL_GPIO_Init+0x334>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	43db      	mvns	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4013      	ands	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041b6:	4a32      	ldr	r2, [pc, #200]	; (8004280 <HAL_GPIO_Init+0x334>)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041bc:	4b30      	ldr	r3, [pc, #192]	; (8004280 <HAL_GPIO_Init+0x334>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4013      	ands	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041e0:	4a27      	ldr	r2, [pc, #156]	; (8004280 <HAL_GPIO_Init+0x334>)
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041e6:	4b26      	ldr	r3, [pc, #152]	; (8004280 <HAL_GPIO_Init+0x334>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800420a:	4a1d      	ldr	r2, [pc, #116]	; (8004280 <HAL_GPIO_Init+0x334>)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_GPIO_Init+0x334>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004234:	4a12      	ldr	r2, [pc, #72]	; (8004280 <HAL_GPIO_Init+0x334>)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3301      	adds	r3, #1
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b0f      	cmp	r3, #15
 8004244:	f67f ae90 	bls.w	8003f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	3724      	adds	r7, #36	; 0x24
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800
 800425c:	40013800 	.word	0x40013800
 8004260:	40020000 	.word	0x40020000
 8004264:	40020400 	.word	0x40020400
 8004268:	40020800 	.word	0x40020800
 800426c:	40020c00 	.word	0x40020c00
 8004270:	40021000 	.word	0x40021000
 8004274:	40021400 	.word	0x40021400
 8004278:	40021800 	.word	0x40021800
 800427c:	40021c00 	.word	0x40021c00
 8004280:	40013c00 	.word	0x40013c00

08004284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	887b      	ldrh	r3, [r7, #2]
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
 80042a0:	e001      	b.n	80042a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	807b      	strh	r3, [r7, #2]
 80042c0:	4613      	mov	r3, r2
 80042c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042c4:	787b      	ldrb	r3, [r7, #1]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ca:	887a      	ldrh	r2, [r7, #2]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042d0:	e003      	b.n	80042da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042d2:	887b      	ldrh	r3, [r7, #2]
 80042d4:	041a      	lsls	r2, r3, #16
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	619a      	str	r2, [r3, #24]
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d006      	beq.n	800430c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042fe:	4a05      	ldr	r2, [pc, #20]	; (8004314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f806 	bl	8004318 <HAL_GPIO_EXTI_Callback>
  }
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40013c00 	.word	0x40013c00

08004318 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800432e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004330:	b08f      	sub	sp, #60	; 0x3c
 8004332:	af0a      	add	r7, sp, #40	; 0x28
 8004334:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e054      	b.n	80043ea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f00c fac2 	bl	80108e4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2203      	movs	r2, #3
 8004364:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f005 ff5e 	bl	800a240 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	687e      	ldr	r6, [r7, #4]
 800438c:	466d      	mov	r5, sp
 800438e:	f106 0410 	add.w	r4, r6, #16
 8004392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800439e:	e885 0003 	stmia.w	r5, {r0, r1}
 80043a2:	1d33      	adds	r3, r6, #4
 80043a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043a6:	6838      	ldr	r0, [r7, #0]
 80043a8:	f005 fed8 	bl	800a15c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2101      	movs	r1, #1
 80043b2:	4618      	mov	r0, r3
 80043b4:	f005 ff55 	bl	800a262 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	603b      	str	r3, [r7, #0]
 80043be:	687e      	ldr	r6, [r7, #4]
 80043c0:	466d      	mov	r5, sp
 80043c2:	f106 0410 	add.w	r4, r6, #16
 80043c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80043d6:	1d33      	adds	r3, r6, #4
 80043d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043da:	6838      	ldr	r0, [r7, #0]
 80043dc:	f006 f8bc 	bl	800a558 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043f2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80043f2:	b590      	push	{r4, r7, lr}
 80043f4:	b089      	sub	sp, #36	; 0x24
 80043f6:	af04      	add	r7, sp, #16
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	4608      	mov	r0, r1
 80043fc:	4611      	mov	r1, r2
 80043fe:	461a      	mov	r2, r3
 8004400:	4603      	mov	r3, r0
 8004402:	70fb      	strb	r3, [r7, #3]
 8004404:	460b      	mov	r3, r1
 8004406:	70bb      	strb	r3, [r7, #2]
 8004408:	4613      	mov	r3, r2
 800440a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_HCD_HC_Init+0x28>
 8004416:	2302      	movs	r3, #2
 8004418:	e076      	b.n	8004508 <HAL_HCD_HC_Init+0x116>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	4413      	add	r3, r2
 800442e:	333d      	adds	r3, #61	; 0x3d
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	3338      	adds	r3, #56	; 0x38
 8004442:	787a      	ldrb	r2, [r7, #1]
 8004444:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	3340      	adds	r3, #64	; 0x40
 8004454:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004456:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	212c      	movs	r1, #44	; 0x2c
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	4413      	add	r3, r2
 8004464:	3339      	adds	r3, #57	; 0x39
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	212c      	movs	r1, #44	; 0x2c
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	4413      	add	r3, r2
 8004476:	333f      	adds	r3, #63	; 0x3f
 8004478:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800447c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	78ba      	ldrb	r2, [r7, #2]
 8004482:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004486:	b2d0      	uxtb	r0, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	212c      	movs	r1, #44	; 0x2c
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	4413      	add	r3, r2
 8004492:	333a      	adds	r3, #58	; 0x3a
 8004494:	4602      	mov	r2, r0
 8004496:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004498:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800449c:	2b00      	cmp	r3, #0
 800449e:	da09      	bge.n	80044b4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	212c      	movs	r1, #44	; 0x2c
 80044a6:	fb01 f303 	mul.w	r3, r1, r3
 80044aa:	4413      	add	r3, r2
 80044ac:	333b      	adds	r3, #59	; 0x3b
 80044ae:	2201      	movs	r2, #1
 80044b0:	701a      	strb	r2, [r3, #0]
 80044b2:	e008      	b.n	80044c6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	212c      	movs	r1, #44	; 0x2c
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	4413      	add	r3, r2
 80044c0:	333b      	adds	r3, #59	; 0x3b
 80044c2:	2200      	movs	r2, #0
 80044c4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80044c6:	78fb      	ldrb	r3, [r7, #3]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	212c      	movs	r1, #44	; 0x2c
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	333c      	adds	r3, #60	; 0x3c
 80044d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80044d8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	787c      	ldrb	r4, [r7, #1]
 80044e0:	78ba      	ldrb	r2, [r7, #2]
 80044e2:	78f9      	ldrb	r1, [r7, #3]
 80044e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80044e6:	9302      	str	r3, [sp, #8]
 80044e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	4623      	mov	r3, r4
 80044f6:	f006 f9a9 	bl	800a84c <USB_HC_Init>
 80044fa:	4603      	mov	r3, r0
 80044fc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	bd90      	pop	{r4, r7, pc}

08004510 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_HCD_HC_Halt+0x1e>
 800452a:	2302      	movs	r3, #2
 800452c:	e00f      	b.n	800454e <HAL_HCD_HC_Halt+0x3e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f006 fbe5 	bl	800ad0e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	4608      	mov	r0, r1
 8004562:	4611      	mov	r1, r2
 8004564:	461a      	mov	r2, r3
 8004566:	4603      	mov	r3, r0
 8004568:	70fb      	strb	r3, [r7, #3]
 800456a:	460b      	mov	r3, r1
 800456c:	70bb      	strb	r3, [r7, #2]
 800456e:	4613      	mov	r3, r2
 8004570:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	212c      	movs	r1, #44	; 0x2c
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	333b      	adds	r3, #59	; 0x3b
 8004580:	78ba      	ldrb	r2, [r7, #2]
 8004582:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	212c      	movs	r1, #44	; 0x2c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	333f      	adds	r3, #63	; 0x3f
 8004592:	787a      	ldrb	r2, [r7, #1]
 8004594:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004596:	7c3b      	ldrb	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d112      	bne.n	80045c2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3342      	adds	r3, #66	; 0x42
 80045aa:	2203      	movs	r2, #3
 80045ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	212c      	movs	r1, #44	; 0x2c
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	4413      	add	r3, r2
 80045ba:	333d      	adds	r3, #61	; 0x3d
 80045bc:	7f3a      	ldrb	r2, [r7, #28]
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	e008      	b.n	80045d4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	212c      	movs	r1, #44	; 0x2c
 80045c8:	fb01 f303 	mul.w	r3, r1, r3
 80045cc:	4413      	add	r3, r2
 80045ce:	3342      	adds	r3, #66	; 0x42
 80045d0:	2202      	movs	r2, #2
 80045d2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80045d4:	787b      	ldrb	r3, [r7, #1]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	f200 80c6 	bhi.w	8004768 <HAL_HCD_HC_SubmitRequest+0x210>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	080045f5 	.word	0x080045f5
 80045e8:	08004755 	.word	0x08004755
 80045ec:	08004659 	.word	0x08004659
 80045f0:	080046d7 	.word	0x080046d7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80045f4:	7c3b      	ldrb	r3, [r7, #16]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	f040 80b8 	bne.w	800476c <HAL_HCD_HC_SubmitRequest+0x214>
 80045fc:	78bb      	ldrb	r3, [r7, #2]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 80b4 	bne.w	800476c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004604:	8b3b      	ldrh	r3, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d108      	bne.n	800461c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800460a:	78fb      	ldrb	r3, [r7, #3]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	212c      	movs	r1, #44	; 0x2c
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	4413      	add	r3, r2
 8004616:	3355      	adds	r3, #85	; 0x55
 8004618:	2201      	movs	r2, #1
 800461a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	3355      	adds	r3, #85	; 0x55
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	212c      	movs	r1, #44	; 0x2c
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	4413      	add	r3, r2
 800463c:	3342      	adds	r3, #66	; 0x42
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004642:	e093      	b.n	800476c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	212c      	movs	r1, #44	; 0x2c
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	4413      	add	r3, r2
 8004650:	3342      	adds	r3, #66	; 0x42
 8004652:	2202      	movs	r2, #2
 8004654:	701a      	strb	r2, [r3, #0]
      break;
 8004656:	e089      	b.n	800476c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004658:	78bb      	ldrb	r3, [r7, #2]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d11d      	bne.n	800469a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	212c      	movs	r1, #44	; 0x2c
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	4413      	add	r3, r2
 800466a:	3355      	adds	r3, #85	; 0x55
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	212c      	movs	r1, #44	; 0x2c
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3342      	adds	r3, #66	; 0x42
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004684:	e073      	b.n	800476e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	212c      	movs	r1, #44	; 0x2c
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	3342      	adds	r3, #66	; 0x42
 8004694:	2202      	movs	r2, #2
 8004696:	701a      	strb	r2, [r3, #0]
      break;
 8004698:	e069      	b.n	800476e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	212c      	movs	r1, #44	; 0x2c
 80046a0:	fb01 f303 	mul.w	r3, r1, r3
 80046a4:	4413      	add	r3, r2
 80046a6:	3354      	adds	r3, #84	; 0x54
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	212c      	movs	r1, #44	; 0x2c
 80046b4:	fb01 f303 	mul.w	r3, r1, r3
 80046b8:	4413      	add	r3, r2
 80046ba:	3342      	adds	r3, #66	; 0x42
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
      break;
 80046c0:	e055      	b.n	800476e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	212c      	movs	r1, #44	; 0x2c
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	3342      	adds	r3, #66	; 0x42
 80046d0:	2202      	movs	r2, #2
 80046d2:	701a      	strb	r2, [r3, #0]
      break;
 80046d4:	e04b      	b.n	800476e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80046d6:	78bb      	ldrb	r3, [r7, #2]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d11d      	bne.n	8004718 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	212c      	movs	r1, #44	; 0x2c
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	3355      	adds	r3, #85	; 0x55
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d109      	bne.n	8004704 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	212c      	movs	r1, #44	; 0x2c
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	4413      	add	r3, r2
 80046fc:	3342      	adds	r3, #66	; 0x42
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004702:	e034      	b.n	800476e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	212c      	movs	r1, #44	; 0x2c
 800470a:	fb01 f303 	mul.w	r3, r1, r3
 800470e:	4413      	add	r3, r2
 8004710:	3342      	adds	r3, #66	; 0x42
 8004712:	2202      	movs	r2, #2
 8004714:	701a      	strb	r2, [r3, #0]
      break;
 8004716:	e02a      	b.n	800476e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	212c      	movs	r1, #44	; 0x2c
 800471e:	fb01 f303 	mul.w	r3, r1, r3
 8004722:	4413      	add	r3, r2
 8004724:	3354      	adds	r3, #84	; 0x54
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	212c      	movs	r1, #44	; 0x2c
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	3342      	adds	r3, #66	; 0x42
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
      break;
 800473e:	e016      	b.n	800476e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	212c      	movs	r1, #44	; 0x2c
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	3342      	adds	r3, #66	; 0x42
 800474e:	2202      	movs	r2, #2
 8004750:	701a      	strb	r2, [r3, #0]
      break;
 8004752:	e00c      	b.n	800476e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	212c      	movs	r1, #44	; 0x2c
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	4413      	add	r3, r2
 8004760:	3342      	adds	r3, #66	; 0x42
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]
      break;
 8004766:	e002      	b.n	800476e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004768:	bf00      	nop
 800476a:	e000      	b.n	800476e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800476c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	212c      	movs	r1, #44	; 0x2c
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	4413      	add	r3, r2
 800477a:	3344      	adds	r3, #68	; 0x44
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	8b3a      	ldrh	r2, [r7, #24]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	202c      	movs	r0, #44	; 0x2c
 8004788:	fb00 f303 	mul.w	r3, r0, r3
 800478c:	440b      	add	r3, r1
 800478e:	334c      	adds	r3, #76	; 0x4c
 8004790:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	212c      	movs	r1, #44	; 0x2c
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	4413      	add	r3, r2
 800479e:	3360      	adds	r3, #96	; 0x60
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	212c      	movs	r1, #44	; 0x2c
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	4413      	add	r3, r2
 80047b0:	3350      	adds	r3, #80	; 0x50
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	212c      	movs	r1, #44	; 0x2c
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	4413      	add	r3, r2
 80047c2:	3339      	adds	r3, #57	; 0x39
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	212c      	movs	r1, #44	; 0x2c
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	3361      	adds	r3, #97	; 0x61
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	222c      	movs	r2, #44	; 0x2c
 80047e2:	fb02 f303 	mul.w	r3, r2, r3
 80047e6:	3338      	adds	r3, #56	; 0x38
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	18d1      	adds	r1, r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	f006 f938 	bl	800aa68 <USB_HC_StartXfer>
 80047f8:	4603      	mov	r3, r0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop

08004804 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f005 fe5b 	bl	800a4d6 <USB_GetMode>
 8004820:	4603      	mov	r3, r0
 8004822:	2b01      	cmp	r3, #1
 8004824:	f040 80f6 	bne.w	8004a14 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f005 fe3f 	bl	800a4b0 <USB_ReadInterrupts>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80ec 	beq.w	8004a12 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f005 fe36 	bl	800a4b0 <USB_ReadInterrupts>
 8004844:	4603      	mov	r3, r0
 8004846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800484a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800484e:	d104      	bne.n	800485a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004858:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f005 fe26 	bl	800a4b0 <USB_ReadInterrupts>
 8004864:	4603      	mov	r3, r0
 8004866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800486a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800486e:	d104      	bne.n	800487a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004878:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f005 fe16 	bl	800a4b0 <USB_ReadInterrupts>
 8004884:	4603      	mov	r3, r0
 8004886:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800488a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800488e:	d104      	bne.n	800489a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004898:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f005 fe06 	bl	800a4b0 <USB_ReadInterrupts>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d103      	bne.n	80048b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2202      	movs	r2, #2
 80048b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f005 fdf8 	bl	800a4b0 <USB_ReadInterrupts>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ca:	d11c      	bne.n	8004906 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80048d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10f      	bne.n	8004906 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80048e6:	2110      	movs	r1, #16
 80048e8:	6938      	ldr	r0, [r7, #16]
 80048ea:	f005 fd07 	bl	800a2fc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80048ee:	6938      	ldr	r0, [r7, #16]
 80048f0:	f005 fd28 	bl	800a344 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2101      	movs	r1, #1
 80048fa:	4618      	mov	r0, r3
 80048fc:	f005 fee0 	bl	800a6c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f00c f86d 	bl	80109e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f005 fdd0 	bl	800a4b0 <USB_ReadInterrupts>
 8004910:	4603      	mov	r3, r0
 8004912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004916:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800491a:	d102      	bne.n	8004922 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f001 fa03 	bl	8005d28 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f005 fdc2 	bl	800a4b0 <USB_ReadInterrupts>
 800492c:	4603      	mov	r3, r0
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b08      	cmp	r3, #8
 8004934:	d106      	bne.n	8004944 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f00c f836 	bl	80109a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2208      	movs	r2, #8
 8004942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f005 fdb1 	bl	800a4b0 <USB_ReadInterrupts>
 800494e:	4603      	mov	r3, r0
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b10      	cmp	r3, #16
 8004956:	d101      	bne.n	800495c <HAL_HCD_IRQHandler+0x158>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_HCD_IRQHandler+0x15a>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d012      	beq.n	8004988 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699a      	ldr	r2, [r3, #24]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0210 	bic.w	r2, r2, #16
 8004970:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f001 f906 	bl	8005b84 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699a      	ldr	r2, [r3, #24]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0210 	orr.w	r2, r2, #16
 8004986:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f005 fd8f 	bl	800a4b0 <USB_ReadInterrupts>
 8004992:	4603      	mov	r3, r0
 8004994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800499c:	d13a      	bne.n	8004a14 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f006 f9a2 	bl	800acec <USB_HC_ReadInterrupt>
 80049a8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e025      	b.n	80049fc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	fa22 f303 	lsr.w	r3, r2, r3
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d018      	beq.n	80049f6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049da:	d106      	bne.n	80049ea <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f8ab 	bl	8004b3e <HCD_HC_IN_IRQHandler>
 80049e8:	e005      	b.n	80049f6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	4619      	mov	r1, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fcc6 	bl	8005382 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	3301      	adds	r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d3d4      	bcc.n	80049b0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a0e:	615a      	str	r2, [r3, #20]
 8004a10:	e000      	b.n	8004a14 <HAL_HCD_IRQHandler+0x210>
      return;
 8004a12:	bf00      	nop
    }
  }
}
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_HCD_Start+0x16>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e013      	b.n	8004a58 <HAL_HCD_Start+0x3e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f005 fea2 	bl	800a788 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f005 fbe8 	bl	800a21e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_HCD_Stop+0x16>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e00d      	b.n	8004a92 <HAL_HCD_Stop+0x32>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f006 fa9c 	bl	800afc0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f005 fe44 	bl	800a734 <USB_ResetPort>
 8004aac:	4603      	mov	r3, r0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	212c      	movs	r1, #44	; 0x2c
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	3360      	adds	r3, #96	; 0x60
 8004ad0:	781b      	ldrb	r3, [r3, #0]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	212c      	movs	r1, #44	; 0x2c
 8004af0:	fb01 f303 	mul.w	r3, r1, r3
 8004af4:	4413      	add	r3, r2
 8004af6:	3350      	adds	r3, #80	; 0x50
 8004af8:	681b      	ldr	r3, [r3, #0]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f005 fe88 	bl	800a828 <USB_GetCurrentFrame>
 8004b18:	4603      	mov	r3, r0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b082      	sub	sp, #8
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f005 fe63 	bl	800a7fa <USB_GetHostSpeed>
 8004b34:	4603      	mov	r3, r0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b086      	sub	sp, #24
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d119      	bne.n	8004ba2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b9a:	f043 0302 	orr.w	r3, r3, #2
 8004b9e:	60d3      	str	r3, [r2, #12]
 8004ba0:	e101      	b.n	8004da6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb8:	d12b      	bne.n	8004c12 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	3361      	adds	r3, #97	; 0x61
 8004bdc:	2207      	movs	r2, #7
 8004bde:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	0151      	lsls	r1, r2, #5
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	440a      	add	r2, r1
 8004bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bfa:	f043 0302 	orr.w	r3, r3, #2
 8004bfe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f006 f87f 	bl	800ad0e <USB_HC_Halt>
 8004c10:	e0c9      	b.n	8004da6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d109      	bne.n	8004c3c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c34:	461a      	mov	r2, r3
 8004c36:	2320      	movs	r3, #32
 8004c38:	6093      	str	r3, [r2, #8]
 8004c3a:	e0b4      	b.n	8004da6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d133      	bne.n	8004cba <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c6c:	f043 0302 	orr.w	r3, r3, #2
 8004c70:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	212c      	movs	r1, #44	; 0x2c
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3361      	adds	r3, #97	; 0x61
 8004c80:	2205      	movs	r2, #5
 8004c82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c90:	461a      	mov	r2, r3
 8004c92:	2310      	movs	r3, #16
 8004c94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2308      	movs	r3, #8
 8004ca6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f006 f82b 	bl	800ad0e <USB_HC_Halt>
 8004cb8:	e075      	b.n	8004da6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd0:	d134      	bne.n	8004d3c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cec:	f043 0302 	orr.w	r3, r3, #2
 8004cf0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	212c      	movs	r1, #44	; 0x2c
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3361      	adds	r3, #97	; 0x61
 8004d00:	2208      	movs	r2, #8
 8004d02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d10:	461a      	mov	r2, r3
 8004d12:	2310      	movs	r3, #16
 8004d14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d22:	461a      	mov	r2, r3
 8004d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d28:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	4611      	mov	r1, r2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f005 ffea 	bl	800ad0e <USB_HC_Halt>
 8004d3a:	e034      	b.n	8004da6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b80      	cmp	r3, #128	; 0x80
 8004d50:	d129      	bne.n	8004da6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	0151      	lsls	r1, r2, #5
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	440a      	add	r2, r1
 8004d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d6c:	f043 0302 	orr.w	r3, r3, #2
 8004d70:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	212c      	movs	r1, #44	; 0x2c
 8004d78:	fb01 f303 	mul.w	r3, r1, r3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3361      	adds	r3, #97	; 0x61
 8004d80:	2206      	movs	r2, #6
 8004d82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f005 ffbd 	bl	800ad0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da0:	461a      	mov	r2, r3
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dbc:	d122      	bne.n	8004e04 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd8:	f043 0302 	orr.w	r3, r3, #2
 8004ddc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f005 ff90 	bl	800ad0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e00:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004e02:	e2ba      	b.n	800537a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	f040 811b 	bne.w	8005052 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d019      	beq.n	8004e58 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	212c      	movs	r1, #44	; 0x2c
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	4413      	add	r3, r2
 8004e30:	3348      	adds	r3, #72	; 0x48
 8004e32:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	0159      	lsls	r1, r3, #5
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	440b      	add	r3, r1
 8004e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004e46:	1ad2      	subs	r2, r2, r3
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	202c      	movs	r0, #44	; 0x2c
 8004e4e:	fb00 f303 	mul.w	r3, r0, r3
 8004e52:	440b      	add	r3, r1
 8004e54:	3350      	adds	r3, #80	; 0x50
 8004e56:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	212c      	movs	r1, #44	; 0x2c
 8004e5e:	fb01 f303 	mul.w	r3, r1, r3
 8004e62:	4413      	add	r3, r2
 8004e64:	3361      	adds	r3, #97	; 0x61
 8004e66:	2201      	movs	r2, #1
 8004e68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	212c      	movs	r1, #44	; 0x2c
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	4413      	add	r3, r2
 8004e76:	335c      	adds	r3, #92	; 0x5c
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e88:	461a      	mov	r2, r3
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	212c      	movs	r1, #44	; 0x2c
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	4413      	add	r3, r2
 8004e9a:	333f      	adds	r3, #63	; 0x3f
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	212c      	movs	r1, #44	; 0x2c
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	333f      	adds	r3, #63	; 0x3f
 8004eb0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d121      	bne.n	8004efa <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f005 ff14 	bl	800ad0e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	6093      	str	r3, [r2, #8]
 8004ef8:	e066      	b.n	8004fc8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	212c      	movs	r1, #44	; 0x2c
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	4413      	add	r3, r2
 8004f06:	333f      	adds	r3, #63	; 0x3f
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d127      	bne.n	8004f5e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	0151      	lsls	r1, r2, #5
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	440a      	add	r2, r1
 8004f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f2c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	212c      	movs	r1, #44	; 0x2c
 8004f34:	fb01 f303 	mul.w	r3, r1, r3
 8004f38:	4413      	add	r3, r2
 8004f3a:	3360      	adds	r3, #96	; 0x60
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	b2d9      	uxtb	r1, r3
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	202c      	movs	r0, #44	; 0x2c
 8004f4a:	fb00 f303 	mul.w	r3, r0, r3
 8004f4e:	4413      	add	r3, r2
 8004f50:	3360      	adds	r3, #96	; 0x60
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f00b fd50 	bl	80109fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f5c:	e034      	b.n	8004fc8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	212c      	movs	r1, #44	; 0x2c
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	4413      	add	r3, r2
 8004f6a:	333f      	adds	r3, #63	; 0x3f
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d12a      	bne.n	8004fc8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	212c      	movs	r1, #44	; 0x2c
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3360      	adds	r3, #96	; 0x60
 8004f80:	2201      	movs	r2, #1
 8004f82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	212c      	movs	r1, #44	; 0x2c
 8004f8a:	fb01 f303 	mul.w	r3, r1, r3
 8004f8e:	4413      	add	r3, r2
 8004f90:	3354      	adds	r3, #84	; 0x54
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	f083 0301 	eor.w	r3, r3, #1
 8004f98:	b2d8      	uxtb	r0, r3
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	212c      	movs	r1, #44	; 0x2c
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	3354      	adds	r3, #84	; 0x54
 8004fa8:	4602      	mov	r2, r0
 8004faa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	b2d9      	uxtb	r1, r3
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	202c      	movs	r0, #44	; 0x2c
 8004fb6:	fb00 f303 	mul.w	r3, r0, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	3360      	adds	r3, #96	; 0x60
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f00b fd1a 	bl	80109fc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d12b      	bne.n	8005028 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	212c      	movs	r1, #44	; 0x2c
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	4413      	add	r3, r2
 8004fdc:	3348      	adds	r3, #72	; 0x48
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	202c      	movs	r0, #44	; 0x2c
 8004fe6:	fb00 f202 	mul.w	r2, r0, r2
 8004fea:	440a      	add	r2, r1
 8004fec:	3240      	adds	r2, #64	; 0x40
 8004fee:	8812      	ldrh	r2, [r2, #0]
 8004ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 81be 	beq.w	800537a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	212c      	movs	r1, #44	; 0x2c
 8005004:	fb01 f303 	mul.w	r3, r1, r3
 8005008:	4413      	add	r3, r2
 800500a:	3354      	adds	r3, #84	; 0x54
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	f083 0301 	eor.w	r3, r3, #1
 8005012:	b2d8      	uxtb	r0, r3
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	212c      	movs	r1, #44	; 0x2c
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	4413      	add	r3, r2
 8005020:	3354      	adds	r3, #84	; 0x54
 8005022:	4602      	mov	r2, r0
 8005024:	701a      	strb	r2, [r3, #0]
}
 8005026:	e1a8      	b.n	800537a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	212c      	movs	r1, #44	; 0x2c
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	3354      	adds	r3, #84	; 0x54
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	f083 0301 	eor.w	r3, r3, #1
 800503c:	b2d8      	uxtb	r0, r3
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	212c      	movs	r1, #44	; 0x2c
 8005044:	fb01 f303 	mul.w	r3, r1, r3
 8005048:	4413      	add	r3, r2
 800504a:	3354      	adds	r3, #84	; 0x54
 800504c:	4602      	mov	r2, r0
 800504e:	701a      	strb	r2, [r3, #0]
}
 8005050:	e193      	b.n	800537a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4413      	add	r3, r2
 800505a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b02      	cmp	r3, #2
 8005066:	f040 8106 	bne.w	8005276 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4413      	add	r3, r2
 8005072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	440a      	add	r2, r1
 8005080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005084:	f023 0302 	bic.w	r3, r3, #2
 8005088:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	212c      	movs	r1, #44	; 0x2c
 8005090:	fb01 f303 	mul.w	r3, r1, r3
 8005094:	4413      	add	r3, r2
 8005096:	3361      	adds	r3, #97	; 0x61
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d109      	bne.n	80050b2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	212c      	movs	r1, #44	; 0x2c
 80050a4:	fb01 f303 	mul.w	r3, r1, r3
 80050a8:	4413      	add	r3, r2
 80050aa:	3360      	adds	r3, #96	; 0x60
 80050ac:	2201      	movs	r2, #1
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	e0c9      	b.n	8005246 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	212c      	movs	r1, #44	; 0x2c
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	4413      	add	r3, r2
 80050be:	3361      	adds	r3, #97	; 0x61
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b05      	cmp	r3, #5
 80050c4:	d109      	bne.n	80050da <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	212c      	movs	r1, #44	; 0x2c
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	4413      	add	r3, r2
 80050d2:	3360      	adds	r3, #96	; 0x60
 80050d4:	2205      	movs	r2, #5
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	e0b5      	b.n	8005246 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	212c      	movs	r1, #44	; 0x2c
 80050e0:	fb01 f303 	mul.w	r3, r1, r3
 80050e4:	4413      	add	r3, r2
 80050e6:	3361      	adds	r3, #97	; 0x61
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b06      	cmp	r3, #6
 80050ec:	d009      	beq.n	8005102 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	212c      	movs	r1, #44	; 0x2c
 80050f4:	fb01 f303 	mul.w	r3, r1, r3
 80050f8:	4413      	add	r3, r2
 80050fa:	3361      	adds	r3, #97	; 0x61
 80050fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d150      	bne.n	80051a4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	212c      	movs	r1, #44	; 0x2c
 8005108:	fb01 f303 	mul.w	r3, r1, r3
 800510c:	4413      	add	r3, r2
 800510e:	335c      	adds	r3, #92	; 0x5c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	202c      	movs	r0, #44	; 0x2c
 800511a:	fb00 f303 	mul.w	r3, r0, r3
 800511e:	440b      	add	r3, r1
 8005120:	335c      	adds	r3, #92	; 0x5c
 8005122:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	212c      	movs	r1, #44	; 0x2c
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	335c      	adds	r3, #92	; 0x5c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d912      	bls.n	800515e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	212c      	movs	r1, #44	; 0x2c
 800513e:	fb01 f303 	mul.w	r3, r1, r3
 8005142:	4413      	add	r3, r2
 8005144:	335c      	adds	r3, #92	; 0x5c
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	212c      	movs	r1, #44	; 0x2c
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	4413      	add	r3, r2
 8005156:	3360      	adds	r3, #96	; 0x60
 8005158:	2204      	movs	r2, #4
 800515a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800515c:	e073      	b.n	8005246 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	212c      	movs	r1, #44	; 0x2c
 8005164:	fb01 f303 	mul.w	r3, r1, r3
 8005168:	4413      	add	r3, r2
 800516a:	3360      	adds	r3, #96	; 0x60
 800516c:	2202      	movs	r2, #2
 800516e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005186:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800518e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4413      	add	r3, r2
 8005198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519c:	461a      	mov	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80051a2:	e050      	b.n	8005246 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	212c      	movs	r1, #44	; 0x2c
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	4413      	add	r3, r2
 80051b0:	3361      	adds	r3, #97	; 0x61
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d122      	bne.n	80051fe <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	212c      	movs	r1, #44	; 0x2c
 80051be:	fb01 f303 	mul.w	r3, r1, r3
 80051c2:	4413      	add	r3, r2
 80051c4:	3360      	adds	r3, #96	; 0x60
 80051c6:	2202      	movs	r2, #2
 80051c8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051e0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051e8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f6:	461a      	mov	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	e023      	b.n	8005246 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	212c      	movs	r1, #44	; 0x2c
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	4413      	add	r3, r2
 800520a:	3361      	adds	r3, #97	; 0x61
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b07      	cmp	r3, #7
 8005210:	d119      	bne.n	8005246 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	212c      	movs	r1, #44	; 0x2c
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	4413      	add	r3, r2
 800521e:	335c      	adds	r3, #92	; 0x5c
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	202c      	movs	r0, #44	; 0x2c
 800522a:	fb00 f303 	mul.w	r3, r0, r3
 800522e:	440b      	add	r3, r1
 8005230:	335c      	adds	r3, #92	; 0x5c
 8005232:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	212c      	movs	r1, #44	; 0x2c
 800523a:	fb01 f303 	mul.w	r3, r1, r3
 800523e:	4413      	add	r3, r2
 8005240:	3360      	adds	r3, #96	; 0x60
 8005242:	2204      	movs	r2, #4
 8005244:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	461a      	mov	r2, r3
 8005254:	2302      	movs	r3, #2
 8005256:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	b2d9      	uxtb	r1, r3
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	202c      	movs	r0, #44	; 0x2c
 8005262:	fb00 f303 	mul.w	r3, r0, r3
 8005266:	4413      	add	r3, r2
 8005268:	3360      	adds	r3, #96	; 0x60
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f00b fbc4 	bl	80109fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005274:	e081      	b.n	800537a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4413      	add	r3, r2
 800527e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	2b10      	cmp	r3, #16
 800528a:	d176      	bne.n	800537a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	212c      	movs	r1, #44	; 0x2c
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	333f      	adds	r3, #63	; 0x3f
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d121      	bne.n	80052e4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	212c      	movs	r1, #44	; 0x2c
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	4413      	add	r3, r2
 80052ac:	335c      	adds	r3, #92	; 0x5c
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052cc:	f043 0302 	orr.w	r3, r3, #2
 80052d0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f005 fd16 	bl	800ad0e <USB_HC_Halt>
 80052e2:	e041      	b.n	8005368 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	212c      	movs	r1, #44	; 0x2c
 80052ea:	fb01 f303 	mul.w	r3, r1, r3
 80052ee:	4413      	add	r3, r2
 80052f0:	333f      	adds	r3, #63	; 0x3f
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d009      	beq.n	800530c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	212c      	movs	r1, #44	; 0x2c
 80052fe:	fb01 f303 	mul.w	r3, r1, r3
 8005302:	4413      	add	r3, r2
 8005304:	333f      	adds	r3, #63	; 0x3f
 8005306:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005308:	2b02      	cmp	r3, #2
 800530a:	d12d      	bne.n	8005368 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	212c      	movs	r1, #44	; 0x2c
 8005312:	fb01 f303 	mul.w	r3, r1, r3
 8005316:	4413      	add	r3, r2
 8005318:	335c      	adds	r3, #92	; 0x5c
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d120      	bne.n	8005368 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	212c      	movs	r1, #44	; 0x2c
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	4413      	add	r3, r2
 8005332:	3361      	adds	r3, #97	; 0x61
 8005334:	2203      	movs	r2, #3
 8005336:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4413      	add	r3, r2
 8005340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	440a      	add	r2, r1
 800534e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005352:	f043 0302 	orr.w	r3, r3, #2
 8005356:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	4611      	mov	r1, r2
 8005362:	4618      	mov	r0, r3
 8005364:	f005 fcd3 	bl	800ad0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4413      	add	r3, r2
 8005370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005374:	461a      	mov	r2, r3
 8005376:	2310      	movs	r3, #16
 8005378:	6093      	str	r3, [r2, #8]
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b088      	sub	sp, #32
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	460b      	mov	r3, r1
 800538c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005398:	78fb      	ldrb	r3, [r7, #3]
 800539a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d119      	bne.n	80053e6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	461a      	mov	r2, r3
 80053c0:	2304      	movs	r3, #4
 80053c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053de:	f043 0302 	orr.w	r3, r3, #2
 80053e2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80053e4:	e3ca      	b.n	8005b7c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d13e      	bne.n	800547a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	4413      	add	r3, r2
 8005404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005408:	461a      	mov	r2, r3
 800540a:	2320      	movs	r3, #32
 800540c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	212c      	movs	r1, #44	; 0x2c
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	4413      	add	r3, r2
 800541a:	333d      	adds	r3, #61	; 0x3d
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b01      	cmp	r3, #1
 8005420:	f040 83ac 	bne.w	8005b7c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	212c      	movs	r1, #44	; 0x2c
 800542a:	fb01 f303 	mul.w	r3, r1, r3
 800542e:	4413      	add	r3, r2
 8005430:	333d      	adds	r3, #61	; 0x3d
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	212c      	movs	r1, #44	; 0x2c
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	4413      	add	r3, r2
 8005442:	3360      	adds	r3, #96	; 0x60
 8005444:	2202      	movs	r2, #2
 8005446:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	4413      	add	r3, r2
 8005450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	440a      	add	r2, r1
 800545e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005462:	f043 0302 	orr.w	r3, r3, #2
 8005466:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f005 fc4b 	bl	800ad0e <USB_HC_Halt>
}
 8005478:	e380      	b.n	8005b7c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800548c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005490:	d122      	bne.n	80054d8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	4413      	add	r3, r2
 800549a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ac:	f043 0302 	orr.w	r3, r3, #2
 80054b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	4611      	mov	r1, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	f005 fc26 	bl	800ad0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ce:	461a      	mov	r2, r3
 80054d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054d4:	6093      	str	r3, [r2, #8]
}
 80054d6:	e351      	b.n	8005b7c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d150      	bne.n	8005590 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	212c      	movs	r1, #44	; 0x2c
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	4413      	add	r3, r2
 80054fa:	335c      	adds	r3, #92	; 0x5c
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	4413      	add	r3, r2
 8005508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005512:	2b40      	cmp	r3, #64	; 0x40
 8005514:	d111      	bne.n	800553a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	212c      	movs	r1, #44	; 0x2c
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	4413      	add	r3, r2
 8005522:	333d      	adds	r3, #61	; 0x3d
 8005524:	2201      	movs	r2, #1
 8005526:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	4413      	add	r3, r2
 8005530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005534:	461a      	mov	r2, r3
 8005536:	2340      	movs	r3, #64	; 0x40
 8005538:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	4413      	add	r3, r2
 8005542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	440a      	add	r2, r1
 8005550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005554:	f043 0302 	orr.w	r3, r3, #2
 8005558:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	4611      	mov	r1, r2
 8005564:	4618      	mov	r0, r3
 8005566:	f005 fbd2 	bl	800ad0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	4413      	add	r3, r2
 8005572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005576:	461a      	mov	r2, r3
 8005578:	2301      	movs	r3, #1
 800557a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	212c      	movs	r1, #44	; 0x2c
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	4413      	add	r3, r2
 8005588:	3361      	adds	r3, #97	; 0x61
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
}
 800558e:	e2f5      	b.n	8005b7c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d13c      	bne.n	8005620 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	212c      	movs	r1, #44	; 0x2c
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	3361      	adds	r3, #97	; 0x61
 80055b4:	2204      	movs	r2, #4
 80055b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	212c      	movs	r1, #44	; 0x2c
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	333d      	adds	r3, #61	; 0x3d
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	212c      	movs	r1, #44	; 0x2c
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	4413      	add	r3, r2
 80055d6:	335c      	adds	r3, #92	; 0x5c
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055f6:	f043 0302 	orr.w	r3, r3, #2
 80055fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f005 fb81 	bl	800ad0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	4413      	add	r3, r2
 8005614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005618:	461a      	mov	r2, r3
 800561a:	2340      	movs	r3, #64	; 0x40
 800561c:	6093      	str	r3, [r2, #8]
}
 800561e:	e2ad      	b.n	8005b7c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	4413      	add	r3, r2
 8005628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b08      	cmp	r3, #8
 8005634:	d12a      	bne.n	800568c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	4413      	add	r3, r2
 800563e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005642:	461a      	mov	r2, r3
 8005644:	2308      	movs	r3, #8
 8005646:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	4413      	add	r3, r2
 8005650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	440a      	add	r2, r1
 800565e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005662:	f043 0302 	orr.w	r3, r3, #2
 8005666:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f005 fb4b 	bl	800ad0e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	212c      	movs	r1, #44	; 0x2c
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	3361      	adds	r3, #97	; 0x61
 8005686:	2205      	movs	r2, #5
 8005688:	701a      	strb	r2, [r3, #0]
}
 800568a:	e277      	b.n	8005b7c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	4413      	add	r3, r2
 8005694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d150      	bne.n	8005744 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	212c      	movs	r1, #44	; 0x2c
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	335c      	adds	r3, #92	; 0x5c
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	212c      	movs	r1, #44	; 0x2c
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	4413      	add	r3, r2
 80056c0:	3361      	adds	r3, #97	; 0x61
 80056c2:	2203      	movs	r2, #3
 80056c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	212c      	movs	r1, #44	; 0x2c
 80056cc:	fb01 f303 	mul.w	r3, r1, r3
 80056d0:	4413      	add	r3, r2
 80056d2:	333d      	adds	r3, #61	; 0x3d
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d112      	bne.n	8005700 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	212c      	movs	r1, #44	; 0x2c
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	4413      	add	r3, r2
 80056e6:	333c      	adds	r3, #60	; 0x3c
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d108      	bne.n	8005700 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	212c      	movs	r1, #44	; 0x2c
 80056f4:	fb01 f303 	mul.w	r3, r1, r3
 80056f8:	4413      	add	r3, r2
 80056fa:	333d      	adds	r3, #61	; 0x3d
 80056fc:	2201      	movs	r2, #1
 80056fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	4413      	add	r3, r2
 8005708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	0151      	lsls	r1, r2, #5
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	440a      	add	r2, r1
 8005716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800571a:	f043 0302 	orr.w	r3, r3, #2
 800571e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	4611      	mov	r1, r2
 800572a:	4618      	mov	r0, r3
 800572c:	f005 faef 	bl	800ad0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	4413      	add	r3, r2
 8005738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573c:	461a      	mov	r2, r3
 800573e:	2310      	movs	r3, #16
 8005740:	6093      	str	r3, [r2, #8]
}
 8005742:	e21b      	b.n	8005b7c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	4413      	add	r3, r2
 800574c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d174      	bne.n	8005844 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d121      	bne.n	80057a6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	212c      	movs	r1, #44	; 0x2c
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	4413      	add	r3, r2
 800576e:	3361      	adds	r3, #97	; 0x61
 8005770:	2206      	movs	r2, #6
 8005772:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	4413      	add	r3, r2
 800577c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	440a      	add	r2, r1
 800578a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800578e:	f043 0302 	orr.w	r3, r3, #2
 8005792:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f005 fab5 	bl	800ad0e <USB_HC_Halt>
 80057a4:	e044      	b.n	8005830 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	212c      	movs	r1, #44	; 0x2c
 80057ac:	fb01 f303 	mul.w	r3, r1, r3
 80057b0:	4413      	add	r3, r2
 80057b2:	335c      	adds	r3, #92	; 0x5c
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	202c      	movs	r0, #44	; 0x2c
 80057be:	fb00 f303 	mul.w	r3, r0, r3
 80057c2:	440b      	add	r3, r1
 80057c4:	335c      	adds	r3, #92	; 0x5c
 80057c6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	212c      	movs	r1, #44	; 0x2c
 80057ce:	fb01 f303 	mul.w	r3, r1, r3
 80057d2:	4413      	add	r3, r2
 80057d4:	335c      	adds	r3, #92	; 0x5c
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d920      	bls.n	800581e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	212c      	movs	r1, #44	; 0x2c
 80057e2:	fb01 f303 	mul.w	r3, r1, r3
 80057e6:	4413      	add	r3, r2
 80057e8:	335c      	adds	r3, #92	; 0x5c
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	212c      	movs	r1, #44	; 0x2c
 80057f4:	fb01 f303 	mul.w	r3, r1, r3
 80057f8:	4413      	add	r3, r2
 80057fa:	3360      	adds	r3, #96	; 0x60
 80057fc:	2204      	movs	r2, #4
 80057fe:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	b2d9      	uxtb	r1, r3
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	202c      	movs	r0, #44	; 0x2c
 800580a:	fb00 f303 	mul.w	r3, r0, r3
 800580e:	4413      	add	r3, r2
 8005810:	3360      	adds	r3, #96	; 0x60
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f00b f8f0 	bl	80109fc <HAL_HCD_HC_NotifyURBChange_Callback>
 800581c:	e008      	b.n	8005830 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	212c      	movs	r1, #44	; 0x2c
 8005824:	fb01 f303 	mul.w	r3, r1, r3
 8005828:	4413      	add	r3, r2
 800582a:	3360      	adds	r3, #96	; 0x60
 800582c:	2202      	movs	r2, #2
 800582e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	4413      	add	r3, r2
 8005838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583c:	461a      	mov	r2, r3
 800583e:	2380      	movs	r3, #128	; 0x80
 8005840:	6093      	str	r3, [r2, #8]
}
 8005842:	e19b      	b.n	8005b7c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585a:	d134      	bne.n	80058c6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	4413      	add	r3, r2
 8005864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	440a      	add	r2, r1
 8005872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005876:	f043 0302 	orr.w	r3, r3, #2
 800587a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	4611      	mov	r1, r2
 8005886:	4618      	mov	r0, r3
 8005888:	f005 fa41 	bl	800ad0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	4413      	add	r3, r2
 8005894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005898:	461a      	mov	r2, r3
 800589a:	2310      	movs	r3, #16
 800589c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058aa:	461a      	mov	r2, r3
 80058ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	212c      	movs	r1, #44	; 0x2c
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	4413      	add	r3, r2
 80058be:	3361      	adds	r3, #97	; 0x61
 80058c0:	2208      	movs	r2, #8
 80058c2:	701a      	strb	r2, [r3, #0]
}
 80058c4:	e15a      	b.n	8005b7c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b02      	cmp	r3, #2
 80058da:	f040 814f 	bne.w	8005b7c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058f8:	f023 0302 	bic.w	r3, r3, #2
 80058fc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	212c      	movs	r1, #44	; 0x2c
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	4413      	add	r3, r2
 800590a:	3361      	adds	r3, #97	; 0x61
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d17d      	bne.n	8005a0e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	212c      	movs	r1, #44	; 0x2c
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	4413      	add	r3, r2
 800591e:	3360      	adds	r3, #96	; 0x60
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	212c      	movs	r1, #44	; 0x2c
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	4413      	add	r3, r2
 8005930:	333f      	adds	r3, #63	; 0x3f
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d00a      	beq.n	800594e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	212c      	movs	r1, #44	; 0x2c
 800593e:	fb01 f303 	mul.w	r3, r1, r3
 8005942:	4413      	add	r3, r2
 8005944:	333f      	adds	r3, #63	; 0x3f
 8005946:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005948:	2b03      	cmp	r3, #3
 800594a:	f040 8100 	bne.w	8005b4e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d113      	bne.n	800597e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	212c      	movs	r1, #44	; 0x2c
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	4413      	add	r3, r2
 8005962:	3355      	adds	r3, #85	; 0x55
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f083 0301 	eor.w	r3, r3, #1
 800596a:	b2d8      	uxtb	r0, r3
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	212c      	movs	r1, #44	; 0x2c
 8005972:	fb01 f303 	mul.w	r3, r1, r3
 8005976:	4413      	add	r3, r2
 8005978:	3355      	adds	r3, #85	; 0x55
 800597a:	4602      	mov	r2, r0
 800597c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b01      	cmp	r3, #1
 8005984:	f040 80e3 	bne.w	8005b4e <HCD_HC_OUT_IRQHandler+0x7cc>
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	212c      	movs	r1, #44	; 0x2c
 800598e:	fb01 f303 	mul.w	r3, r1, r3
 8005992:	4413      	add	r3, r2
 8005994:	334c      	adds	r3, #76	; 0x4c
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80d8 	beq.w	8005b4e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	212c      	movs	r1, #44	; 0x2c
 80059a4:	fb01 f303 	mul.w	r3, r1, r3
 80059a8:	4413      	add	r3, r2
 80059aa:	334c      	adds	r3, #76	; 0x4c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	202c      	movs	r0, #44	; 0x2c
 80059b4:	fb00 f202 	mul.w	r2, r0, r2
 80059b8:	440a      	add	r2, r1
 80059ba:	3240      	adds	r2, #64	; 0x40
 80059bc:	8812      	ldrh	r2, [r2, #0]
 80059be:	4413      	add	r3, r2
 80059c0:	3b01      	subs	r3, #1
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	202c      	movs	r0, #44	; 0x2c
 80059c8:	fb00 f202 	mul.w	r2, r0, r2
 80059cc:	440a      	add	r2, r1
 80059ce:	3240      	adds	r2, #64	; 0x40
 80059d0:	8812      	ldrh	r2, [r2, #0]
 80059d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 80b5 	beq.w	8005b4e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	212c      	movs	r1, #44	; 0x2c
 80059ea:	fb01 f303 	mul.w	r3, r1, r3
 80059ee:	4413      	add	r3, r2
 80059f0:	3355      	adds	r3, #85	; 0x55
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	f083 0301 	eor.w	r3, r3, #1
 80059f8:	b2d8      	uxtb	r0, r3
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	212c      	movs	r1, #44	; 0x2c
 8005a00:	fb01 f303 	mul.w	r3, r1, r3
 8005a04:	4413      	add	r3, r2
 8005a06:	3355      	adds	r3, #85	; 0x55
 8005a08:	4602      	mov	r2, r0
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	e09f      	b.n	8005b4e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	212c      	movs	r1, #44	; 0x2c
 8005a14:	fb01 f303 	mul.w	r3, r1, r3
 8005a18:	4413      	add	r3, r2
 8005a1a:	3361      	adds	r3, #97	; 0x61
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d109      	bne.n	8005a36 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	212c      	movs	r1, #44	; 0x2c
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3360      	adds	r3, #96	; 0x60
 8005a30:	2202      	movs	r2, #2
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	e08b      	b.n	8005b4e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	212c      	movs	r1, #44	; 0x2c
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	4413      	add	r3, r2
 8005a42:	3361      	adds	r3, #97	; 0x61
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d109      	bne.n	8005a5e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	212c      	movs	r1, #44	; 0x2c
 8005a50:	fb01 f303 	mul.w	r3, r1, r3
 8005a54:	4413      	add	r3, r2
 8005a56:	3360      	adds	r3, #96	; 0x60
 8005a58:	2202      	movs	r2, #2
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	e077      	b.n	8005b4e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	212c      	movs	r1, #44	; 0x2c
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	4413      	add	r3, r2
 8005a6a:	3361      	adds	r3, #97	; 0x61
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d109      	bne.n	8005a86 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	212c      	movs	r1, #44	; 0x2c
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	3360      	adds	r3, #96	; 0x60
 8005a80:	2205      	movs	r2, #5
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	e063      	b.n	8005b4e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	212c      	movs	r1, #44	; 0x2c
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	4413      	add	r3, r2
 8005a92:	3361      	adds	r3, #97	; 0x61
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b06      	cmp	r3, #6
 8005a98:	d009      	beq.n	8005aae <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	212c      	movs	r1, #44	; 0x2c
 8005aa0:	fb01 f303 	mul.w	r3, r1, r3
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3361      	adds	r3, #97	; 0x61
 8005aa8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d14f      	bne.n	8005b4e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	212c      	movs	r1, #44	; 0x2c
 8005ab4:	fb01 f303 	mul.w	r3, r1, r3
 8005ab8:	4413      	add	r3, r2
 8005aba:	335c      	adds	r3, #92	; 0x5c
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	202c      	movs	r0, #44	; 0x2c
 8005ac6:	fb00 f303 	mul.w	r3, r0, r3
 8005aca:	440b      	add	r3, r1
 8005acc:	335c      	adds	r3, #92	; 0x5c
 8005ace:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	212c      	movs	r1, #44	; 0x2c
 8005ad6:	fb01 f303 	mul.w	r3, r1, r3
 8005ada:	4413      	add	r3, r2
 8005adc:	335c      	adds	r3, #92	; 0x5c
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d912      	bls.n	8005b0a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	212c      	movs	r1, #44	; 0x2c
 8005aea:	fb01 f303 	mul.w	r3, r1, r3
 8005aee:	4413      	add	r3, r2
 8005af0:	335c      	adds	r3, #92	; 0x5c
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	212c      	movs	r1, #44	; 0x2c
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	4413      	add	r3, r2
 8005b02:	3360      	adds	r3, #96	; 0x60
 8005b04:	2204      	movs	r2, #4
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e021      	b.n	8005b4e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	212c      	movs	r1, #44	; 0x2c
 8005b10:	fb01 f303 	mul.w	r3, r1, r3
 8005b14:	4413      	add	r3, r2
 8005b16:	3360      	adds	r3, #96	; 0x60
 8005b18:	2202      	movs	r2, #2
 8005b1a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b32:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b3a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b48:	461a      	mov	r2, r3
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	b2d9      	uxtb	r1, r3
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	202c      	movs	r0, #44	; 0x2c
 8005b6a:	fb00 f303 	mul.w	r3, r0, r3
 8005b6e:	4413      	add	r3, r2
 8005b70:	3360      	adds	r3, #96	; 0x60
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	461a      	mov	r2, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f00a ff40 	bl	80109fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005b7c:	bf00      	nop
 8005b7e:	3720      	adds	r7, #32
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	; 0x28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	0c5b      	lsrs	r3, r3, #17
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bb8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d004      	beq.n	8005bca <HCD_RXQLVL_IRQHandler+0x46>
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	f000 80a9 	beq.w	8005d1a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005bc8:	e0aa      	b.n	8005d20 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80a6 	beq.w	8005d1e <HCD_RXQLVL_IRQHandler+0x19a>
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	212c      	movs	r1, #44	; 0x2c
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	4413      	add	r3, r2
 8005bde:	3344      	adds	r3, #68	; 0x44
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 809b 	beq.w	8005d1e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	212c      	movs	r1, #44	; 0x2c
 8005bee:	fb01 f303 	mul.w	r3, r1, r3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3350      	adds	r3, #80	; 0x50
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	441a      	add	r2, r3
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	202c      	movs	r0, #44	; 0x2c
 8005c02:	fb00 f303 	mul.w	r3, r0, r3
 8005c06:	440b      	add	r3, r1
 8005c08:	334c      	adds	r3, #76	; 0x4c
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d87a      	bhi.n	8005d06 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	212c      	movs	r1, #44	; 0x2c
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	3344      	adds	r3, #68	; 0x44
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	b292      	uxth	r2, r2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	f004 fbe9 	bl	800a400 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	212c      	movs	r1, #44	; 0x2c
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
 8005c38:	4413      	add	r3, r2
 8005c3a:	3344      	adds	r3, #68	; 0x44
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	441a      	add	r2, r3
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	202c      	movs	r0, #44	; 0x2c
 8005c48:	fb00 f303 	mul.w	r3, r0, r3
 8005c4c:	440b      	add	r3, r1
 8005c4e:	3344      	adds	r3, #68	; 0x44
 8005c50:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	212c      	movs	r1, #44	; 0x2c
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	3350      	adds	r3, #80	; 0x50
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	441a      	add	r2, r3
 8005c66:	6879      	ldr	r1, [r7, #4]
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	202c      	movs	r0, #44	; 0x2c
 8005c6c:	fb00 f303 	mul.w	r3, r0, r3
 8005c70:	440b      	add	r3, r1
 8005c72:	3350      	adds	r3, #80	; 0x50
 8005c74:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	0cdb      	lsrs	r3, r3, #19
 8005c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c8a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	212c      	movs	r1, #44	; 0x2c
 8005c92:	fb01 f303 	mul.w	r3, r1, r3
 8005c96:	4413      	add	r3, r2
 8005c98:	3340      	adds	r3, #64	; 0x40
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d13c      	bne.n	8005d1e <HCD_RXQLVL_IRQHandler+0x19a>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d039      	beq.n	8005d1e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cc0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cc8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	212c      	movs	r1, #44	; 0x2c
 8005ce2:	fb01 f303 	mul.w	r3, r1, r3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	3354      	adds	r3, #84	; 0x54
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f083 0301 	eor.w	r3, r3, #1
 8005cf0:	b2d8      	uxtb	r0, r3
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	212c      	movs	r1, #44	; 0x2c
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	3354      	adds	r3, #84	; 0x54
 8005d00:	4602      	mov	r2, r0
 8005d02:	701a      	strb	r2, [r3, #0]
      break;
 8005d04:	e00b      	b.n	8005d1e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	212c      	movs	r1, #44	; 0x2c
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	4413      	add	r3, r2
 8005d12:	3360      	adds	r3, #96	; 0x60
 8005d14:	2204      	movs	r2, #4
 8005d16:	701a      	strb	r2, [r3, #0]
      break;
 8005d18:	e001      	b.n	8005d1e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005d1a:	bf00      	nop
 8005d1c:	e000      	b.n	8005d20 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005d1e:	bf00      	nop
  }
}
 8005d20:	bf00      	nop
 8005d22:	3728      	adds	r7, #40	; 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d54:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d10b      	bne.n	8005d78 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d102      	bne.n	8005d70 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f00a fe2a 	bl	80109c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f043 0302 	orr.w	r3, r3, #2
 8005d76:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d132      	bne.n	8005de8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f043 0308 	orr.w	r3, r3, #8
 8005d88:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d126      	bne.n	8005de2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d113      	bne.n	8005dc4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005da2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005da6:	d106      	bne.n	8005db6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2102      	movs	r1, #2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f004 fc86 	bl	800a6c0 <USB_InitFSLSPClkSel>
 8005db4:	e011      	b.n	8005dda <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2101      	movs	r1, #1
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f004 fc7f 	bl	800a6c0 <USB_InitFSLSPClkSel>
 8005dc2:	e00a      	b.n	8005dda <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d106      	bne.n	8005dda <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005dd8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f00a fe20 	bl	8010a20 <HAL_HCD_PortEnabled_Callback>
 8005de0:	e002      	b.n	8005de8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f00a fe2a 	bl	8010a3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d103      	bne.n	8005dfa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f043 0320 	orr.w	r3, r3, #32
 8005df8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e00:	461a      	mov	r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6013      	str	r3, [r2, #0]
}
 8005e06:	bf00      	nop
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e12b      	b.n	800607a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fc ff1e 	bl	8002c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2224      	movs	r2, #36	; 0x24
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0201 	bic.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e74:	f002 f9f8 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 8005e78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	4a81      	ldr	r2, [pc, #516]	; (8006084 <HAL_I2C_Init+0x274>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d807      	bhi.n	8005e94 <HAL_I2C_Init+0x84>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a80      	ldr	r2, [pc, #512]	; (8006088 <HAL_I2C_Init+0x278>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bf94      	ite	ls
 8005e8c:	2301      	movls	r3, #1
 8005e8e:	2300      	movhi	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e006      	b.n	8005ea2 <HAL_I2C_Init+0x92>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4a7d      	ldr	r2, [pc, #500]	; (800608c <HAL_I2C_Init+0x27c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	bf94      	ite	ls
 8005e9c:	2301      	movls	r3, #1
 8005e9e:	2300      	movhi	r3, #0
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e0e7      	b.n	800607a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4a78      	ldr	r2, [pc, #480]	; (8006090 <HAL_I2C_Init+0x280>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	0c9b      	lsrs	r3, r3, #18
 8005eb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4a6a      	ldr	r2, [pc, #424]	; (8006084 <HAL_I2C_Init+0x274>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d802      	bhi.n	8005ee4 <HAL_I2C_Init+0xd4>
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	e009      	b.n	8005ef8 <HAL_I2C_Init+0xe8>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	4a69      	ldr	r2, [pc, #420]	; (8006094 <HAL_I2C_Init+0x284>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	099b      	lsrs	r3, r3, #6
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	495c      	ldr	r1, [pc, #368]	; (8006084 <HAL_I2C_Init+0x274>)
 8005f14:	428b      	cmp	r3, r1
 8005f16:	d819      	bhi.n	8005f4c <HAL_I2C_Init+0x13c>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	1e59      	subs	r1, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f2c:	400b      	ands	r3, r1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <HAL_I2C_Init+0x138>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	1e59      	subs	r1, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f40:	3301      	adds	r3, #1
 8005f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f46:	e051      	b.n	8005fec <HAL_I2C_Init+0x1dc>
 8005f48:	2304      	movs	r3, #4
 8005f4a:	e04f      	b.n	8005fec <HAL_I2C_Init+0x1dc>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d111      	bne.n	8005f78 <HAL_I2C_Init+0x168>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	1e58      	subs	r0, r3, #1
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	440b      	add	r3, r1
 8005f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f66:	3301      	adds	r3, #1
 8005f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf0c      	ite	eq
 8005f70:	2301      	moveq	r3, #1
 8005f72:	2300      	movne	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	e012      	b.n	8005f9e <HAL_I2C_Init+0x18e>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	1e58      	subs	r0, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	0099      	lsls	r1, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f8e:	3301      	adds	r3, #1
 8005f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	bf0c      	ite	eq
 8005f98:	2301      	moveq	r3, #1
 8005f9a:	2300      	movne	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <HAL_I2C_Init+0x196>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e022      	b.n	8005fec <HAL_I2C_Init+0x1dc>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10e      	bne.n	8005fcc <HAL_I2C_Init+0x1bc>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1e58      	subs	r0, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6859      	ldr	r1, [r3, #4]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	440b      	add	r3, r1
 8005fbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fca:	e00f      	b.n	8005fec <HAL_I2C_Init+0x1dc>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	1e58      	subs	r0, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6859      	ldr	r1, [r3, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	0099      	lsls	r1, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	6809      	ldr	r1, [r1, #0]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69da      	ldr	r2, [r3, #28]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800601a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6911      	ldr	r1, [r2, #16]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	68d2      	ldr	r2, [r2, #12]
 8006026:	4311      	orrs	r1, r2
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6812      	ldr	r2, [r2, #0]
 800602c:	430b      	orrs	r3, r1
 800602e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	000186a0 	.word	0x000186a0
 8006088:	001e847f 	.word	0x001e847f
 800608c:	003d08ff 	.word	0x003d08ff
 8006090:	431bde83 	.word	0x431bde83
 8006094:	10624dd3 	.word	0x10624dd3

08006098 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af02      	add	r7, sp, #8
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	461a      	mov	r2, r3
 80060a4:	460b      	mov	r3, r1
 80060a6:	817b      	strh	r3, [r7, #10]
 80060a8:	4613      	mov	r3, r2
 80060aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060ac:	f7fd fdaa 	bl	8003c04 <HAL_GetTick>
 80060b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	f040 80e0 	bne.w	8006280 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	2319      	movs	r3, #25
 80060c6:	2201      	movs	r2, #1
 80060c8:	4970      	ldr	r1, [pc, #448]	; (800628c <HAL_I2C_Master_Transmit+0x1f4>)
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 fe02 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80060d6:	2302      	movs	r3, #2
 80060d8:	e0d3      	b.n	8006282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_I2C_Master_Transmit+0x50>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e0cc      	b.n	8006282 <HAL_I2C_Master_Transmit+0x1ea>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d007      	beq.n	800610e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800611c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2221      	movs	r2, #33	; 0x21
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2210      	movs	r2, #16
 800612a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	893a      	ldrh	r2, [r7, #8]
 800613e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4a50      	ldr	r2, [pc, #320]	; (8006290 <HAL_I2C_Master_Transmit+0x1f8>)
 800614e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006150:	8979      	ldrh	r1, [r7, #10]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	6a3a      	ldr	r2, [r7, #32]
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 fbbc 	bl	80068d4 <I2C_MasterRequestWrite>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e08d      	b.n	8006282 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006166:	2300      	movs	r3, #0
 8006168:	613b      	str	r3, [r7, #16]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800617c:	e066      	b.n	800624c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	6a39      	ldr	r1, [r7, #32]
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 fe7c 	bl	8006e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00d      	beq.n	80061aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	2b04      	cmp	r3, #4
 8006194:	d107      	bne.n	80061a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e06b      	b.n	8006282 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	781a      	ldrb	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d11b      	bne.n	8006220 <HAL_I2C_Master_Transmit+0x188>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d017      	beq.n	8006220 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	781a      	ldrb	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	6a39      	ldr	r1, [r7, #32]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fe6c 	bl	8006f02 <I2C_WaitOnBTFFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00d      	beq.n	800624c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	2b04      	cmp	r3, #4
 8006236:	d107      	bne.n	8006248 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006246:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e01a      	b.n	8006282 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006250:	2b00      	cmp	r3, #0
 8006252:	d194      	bne.n	800617e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2220      	movs	r2, #32
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	e000      	b.n	8006282 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006280:	2302      	movs	r3, #2
  }
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	00100002 	.word	0x00100002
 8006290:	ffff0000 	.word	0xffff0000

08006294 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	4608      	mov	r0, r1
 800629e:	4611      	mov	r1, r2
 80062a0:	461a      	mov	r2, r3
 80062a2:	4603      	mov	r3, r0
 80062a4:	817b      	strh	r3, [r7, #10]
 80062a6:	460b      	mov	r3, r1
 80062a8:	813b      	strh	r3, [r7, #8]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062ae:	f7fd fca9 	bl	8003c04 <HAL_GetTick>
 80062b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b20      	cmp	r3, #32
 80062be:	f040 80d9 	bne.w	8006474 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	2319      	movs	r3, #25
 80062c8:	2201      	movs	r2, #1
 80062ca:	496d      	ldr	r1, [pc, #436]	; (8006480 <HAL_I2C_Mem_Write+0x1ec>)
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 fd01 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062d8:	2302      	movs	r3, #2
 80062da:	e0cc      	b.n	8006476 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_I2C_Mem_Write+0x56>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e0c5      	b.n	8006476 <HAL_I2C_Mem_Write+0x1e2>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d007      	beq.n	8006310 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800631e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2221      	movs	r2, #33	; 0x21
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2240      	movs	r2, #64	; 0x40
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a3a      	ldr	r2, [r7, #32]
 800633a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006340:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4a4d      	ldr	r2, [pc, #308]	; (8006484 <HAL_I2C_Mem_Write+0x1f0>)
 8006350:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006352:	88f8      	ldrh	r0, [r7, #6]
 8006354:	893a      	ldrh	r2, [r7, #8]
 8006356:	8979      	ldrh	r1, [r7, #10]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	4603      	mov	r3, r0
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 fb38 	bl	80069d8 <I2C_RequestMemoryWrite>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d052      	beq.n	8006414 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e081      	b.n	8006476 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fd82 	bl	8006e80 <I2C_WaitOnTXEFlagUntilTimeout>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00d      	beq.n	800639e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	2b04      	cmp	r3, #4
 8006388:	d107      	bne.n	800639a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006398:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e06b      	b.n	8006476 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	781a      	ldrb	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d11b      	bne.n	8006414 <HAL_I2C_Mem_Write+0x180>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d017      	beq.n	8006414 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	781a      	ldrb	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1aa      	bne.n	8006372 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fd6e 	bl	8006f02 <I2C_WaitOnBTFFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00d      	beq.n	8006448 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006430:	2b04      	cmp	r3, #4
 8006432:	d107      	bne.n	8006444 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006442:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e016      	b.n	8006476 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	e000      	b.n	8006476 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006474:	2302      	movs	r3, #2
  }
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	00100002 	.word	0x00100002
 8006484:	ffff0000 	.word	0xffff0000

08006488 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08c      	sub	sp, #48	; 0x30
 800648c:	af02      	add	r7, sp, #8
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	4608      	mov	r0, r1
 8006492:	4611      	mov	r1, r2
 8006494:	461a      	mov	r2, r3
 8006496:	4603      	mov	r3, r0
 8006498:	817b      	strh	r3, [r7, #10]
 800649a:	460b      	mov	r3, r1
 800649c:	813b      	strh	r3, [r7, #8]
 800649e:	4613      	mov	r3, r2
 80064a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064a2:	f7fd fbaf 	bl	8003c04 <HAL_GetTick>
 80064a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	f040 8208 	bne.w	80068c6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	2319      	movs	r3, #25
 80064bc:	2201      	movs	r2, #1
 80064be:	497b      	ldr	r1, [pc, #492]	; (80066ac <HAL_I2C_Mem_Read+0x224>)
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 fc07 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80064cc:	2302      	movs	r3, #2
 80064ce:	e1fb      	b.n	80068c8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d101      	bne.n	80064de <HAL_I2C_Mem_Read+0x56>
 80064da:	2302      	movs	r3, #2
 80064dc:	e1f4      	b.n	80068c8 <HAL_I2C_Mem_Read+0x440>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d007      	beq.n	8006504 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0201 	orr.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006512:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2222      	movs	r2, #34	; 0x22
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2240      	movs	r2, #64	; 0x40
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4a5b      	ldr	r2, [pc, #364]	; (80066b0 <HAL_I2C_Mem_Read+0x228>)
 8006544:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006546:	88f8      	ldrh	r0, [r7, #6]
 8006548:	893a      	ldrh	r2, [r7, #8]
 800654a:	8979      	ldrh	r1, [r7, #10]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	4603      	mov	r3, r0
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fad4 	bl	8006b04 <I2C_RequestMemoryRead>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e1b0      	b.n	80068c8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	2b00      	cmp	r3, #0
 800656c:	d113      	bne.n	8006596 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800656e:	2300      	movs	r3, #0
 8006570:	623b      	str	r3, [r7, #32]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	623b      	str	r3, [r7, #32]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	623b      	str	r3, [r7, #32]
 8006582:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	e184      	b.n	80068a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659a:	2b01      	cmp	r3, #1
 800659c:	d11b      	bne.n	80065d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	61fb      	str	r3, [r7, #28]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	e164      	b.n	80068a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d11b      	bne.n	8006616 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065fe:	2300      	movs	r3, #0
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	e144      	b.n	80068a0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006616:	2300      	movs	r3, #0
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	617b      	str	r3, [r7, #20]
 800662a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800662c:	e138      	b.n	80068a0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006632:	2b03      	cmp	r3, #3
 8006634:	f200 80f1 	bhi.w	800681a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663c:	2b01      	cmp	r3, #1
 800663e:	d123      	bne.n	8006688 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006642:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 fc9d 	bl	8006f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e139      	b.n	80068c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691a      	ldr	r2, [r3, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006686:	e10b      	b.n	80068a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668c:	2b02      	cmp	r3, #2
 800668e:	d14e      	bne.n	800672e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006696:	2200      	movs	r2, #0
 8006698:	4906      	ldr	r1, [pc, #24]	; (80066b4 <HAL_I2C_Mem_Read+0x22c>)
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fb1a 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d008      	beq.n	80066b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e10e      	b.n	80068c8 <HAL_I2C_Mem_Read+0x440>
 80066aa:	bf00      	nop
 80066ac:	00100002 	.word	0x00100002
 80066b0:	ffff0000 	.word	0xffff0000
 80066b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800672c:	e0b8      	b.n	80068a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	2200      	movs	r2, #0
 8006736:	4966      	ldr	r1, [pc, #408]	; (80068d0 <HAL_I2C_Mem_Read+0x448>)
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 facb 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e0bf      	b.n	80068c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006780:	b29b      	uxth	r3, r3
 8006782:	3b01      	subs	r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006790:	2200      	movs	r2, #0
 8006792:	494f      	ldr	r1, [pc, #316]	; (80068d0 <HAL_I2C_Mem_Read+0x448>)
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fa9d 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e091      	b.n	80068c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691a      	ldr	r2, [r3, #16]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006818:	e042      	b.n	80068a0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800681a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fbb0 	bl	8006f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e04c      	b.n	80068c8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	691a      	ldr	r2, [r3, #16]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b04      	cmp	r3, #4
 800686c:	d118      	bne.n	80068a0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f47f aec2 	bne.w	800662e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e000      	b.n	80068c8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068c6:	2302      	movs	r3, #2
  }
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3728      	adds	r7, #40	; 0x28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	00010004 	.word	0x00010004

080068d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	607a      	str	r2, [r7, #4]
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	460b      	mov	r3, r1
 80068e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d006      	beq.n	80068fe <I2C_MasterRequestWrite+0x2a>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d003      	beq.n	80068fe <I2C_MasterRequestWrite+0x2a>
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068fc:	d108      	bne.n	8006910 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e00b      	b.n	8006928 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	2b12      	cmp	r3, #18
 8006916:	d107      	bne.n	8006928 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006926:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 f9cd 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00d      	beq.n	800695c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694e:	d103      	bne.n	8006958 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006956:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e035      	b.n	80069c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006964:	d108      	bne.n	8006978 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006966:	897b      	ldrh	r3, [r7, #10]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006974:	611a      	str	r2, [r3, #16]
 8006976:	e01b      	b.n	80069b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006978:	897b      	ldrh	r3, [r7, #10]
 800697a:	11db      	asrs	r3, r3, #7
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 0306 	and.w	r3, r3, #6
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f063 030f 	orn	r3, r3, #15
 8006988:	b2da      	uxtb	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	490e      	ldr	r1, [pc, #56]	; (80069d0 <I2C_MasterRequestWrite+0xfc>)
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 f9f3 	bl	8006d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e010      	b.n	80069c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069a6:	897b      	ldrh	r3, [r7, #10]
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	4907      	ldr	r1, [pc, #28]	; (80069d4 <I2C_MasterRequestWrite+0x100>)
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 f9e3 	bl	8006d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e000      	b.n	80069c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	00010008 	.word	0x00010008
 80069d4:	00010002 	.word	0x00010002

080069d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	461a      	mov	r2, r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	817b      	strh	r3, [r7, #10]
 80069ea:	460b      	mov	r3, r1
 80069ec:	813b      	strh	r3, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 f960 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00d      	beq.n	8006a36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a28:	d103      	bne.n	8006a32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e05f      	b.n	8006af6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a36:	897b      	ldrh	r3, [r7, #10]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	6a3a      	ldr	r2, [r7, #32]
 8006a4a:	492d      	ldr	r1, [pc, #180]	; (8006b00 <I2C_RequestMemoryWrite+0x128>)
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f998 	bl	8006d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e04c      	b.n	8006af6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a74:	6a39      	ldr	r1, [r7, #32]
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fa02 	bl	8006e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00d      	beq.n	8006a9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d107      	bne.n	8006a9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e02b      	b.n	8006af6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d105      	bne.n	8006ab0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006aa4:	893b      	ldrh	r3, [r7, #8]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	611a      	str	r2, [r3, #16]
 8006aae:	e021      	b.n	8006af4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ab0:	893b      	ldrh	r3, [r7, #8]
 8006ab2:	0a1b      	lsrs	r3, r3, #8
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac0:	6a39      	ldr	r1, [r7, #32]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f9dc 	bl	8006e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00d      	beq.n	8006aea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d107      	bne.n	8006ae6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e005      	b.n	8006af6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006aea:	893b      	ldrh	r3, [r7, #8]
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	00010002 	.word	0x00010002

08006b04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	817b      	strh	r3, [r7, #10]
 8006b16:	460b      	mov	r3, r1
 8006b18:	813b      	strh	r3, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 f8c2 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00d      	beq.n	8006b72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b64:	d103      	bne.n	8006b6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e0aa      	b.n	8006cc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b72:	897b      	ldrh	r3, [r7, #10]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	461a      	mov	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	6a3a      	ldr	r2, [r7, #32]
 8006b86:	4952      	ldr	r1, [pc, #328]	; (8006cd0 <I2C_RequestMemoryRead+0x1cc>)
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 f8fa 	bl	8006d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e097      	b.n	8006cc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b98:	2300      	movs	r3, #0
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb0:	6a39      	ldr	r1, [r7, #32]
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f964 	bl	8006e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00d      	beq.n	8006bda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d107      	bne.n	8006bd6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e076      	b.n	8006cc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bda:	88fb      	ldrh	r3, [r7, #6]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d105      	bne.n	8006bec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006be0:	893b      	ldrh	r3, [r7, #8]
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	611a      	str	r2, [r3, #16]
 8006bea:	e021      	b.n	8006c30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006bec:	893b      	ldrh	r3, [r7, #8]
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bfc:	6a39      	ldr	r1, [r7, #32]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 f93e 	bl	8006e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00d      	beq.n	8006c26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d107      	bne.n	8006c22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e050      	b.n	8006cc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c26:	893b      	ldrh	r3, [r7, #8]
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c32:	6a39      	ldr	r1, [r7, #32]
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f923 	bl	8006e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00d      	beq.n	8006c5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d107      	bne.n	8006c58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e035      	b.n	8006cc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 f82b 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00d      	beq.n	8006ca0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c92:	d103      	bne.n	8006c9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e013      	b.n	8006cc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ca0:	897b      	ldrh	r3, [r7, #10]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f043 0301 	orr.w	r3, r3, #1
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	6a3a      	ldr	r2, [r7, #32]
 8006cb4:	4906      	ldr	r1, [pc, #24]	; (8006cd0 <I2C_RequestMemoryRead+0x1cc>)
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 f863 	bl	8006d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e000      	b.n	8006cc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	00010002 	.word	0x00010002

08006cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ce4:	e025      	b.n	8006d32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cec:	d021      	beq.n	8006d32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cee:	f7fc ff89 	bl	8003c04 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d302      	bcc.n	8006d04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d116      	bne.n	8006d32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f043 0220 	orr.w	r2, r3, #32
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e023      	b.n	8006d7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	0c1b      	lsrs	r3, r3, #16
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d10d      	bne.n	8006d58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	43da      	mvns	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4013      	ands	r3, r2
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	2300      	movne	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	e00c      	b.n	8006d72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	43da      	mvns	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	4013      	ands	r3, r2
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bf0c      	ite	eq
 8006d6a:	2301      	moveq	r3, #1
 8006d6c:	2300      	movne	r3, #0
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d0b6      	beq.n	8006ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
 8006d8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d90:	e051      	b.n	8006e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da0:	d123      	bne.n	8006dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006db0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	f043 0204 	orr.w	r2, r3, #4
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e046      	b.n	8006e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df0:	d021      	beq.n	8006e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df2:	f7fc ff07 	bl	8003c04 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d302      	bcc.n	8006e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d116      	bne.n	8006e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	f043 0220 	orr.w	r2, r3, #32
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e020      	b.n	8006e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	0c1b      	lsrs	r3, r3, #16
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d10c      	bne.n	8006e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	43da      	mvns	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	bf14      	ite	ne
 8006e52:	2301      	movne	r3, #1
 8006e54:	2300      	moveq	r3, #0
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	e00b      	b.n	8006e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	43da      	mvns	r2, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	4013      	ands	r3, r2
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bf14      	ite	ne
 8006e6c:	2301      	movne	r3, #1
 8006e6e:	2300      	moveq	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d18d      	bne.n	8006d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e8c:	e02d      	b.n	8006eea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 f8ce 	bl	8007030 <I2C_IsAcknowledgeFailed>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e02d      	b.n	8006efa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea4:	d021      	beq.n	8006eea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea6:	f7fc fead 	bl	8003c04 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d116      	bne.n	8006eea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	f043 0220 	orr.w	r2, r3, #32
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e007      	b.n	8006efa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef4:	2b80      	cmp	r3, #128	; 0x80
 8006ef6:	d1ca      	bne.n	8006e8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f0e:	e02d      	b.n	8006f6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 f88d 	bl	8007030 <I2C_IsAcknowledgeFailed>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e02d      	b.n	8006f7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f26:	d021      	beq.n	8006f6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f28:	f7fc fe6c 	bl	8003c04 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d302      	bcc.n	8006f3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d116      	bne.n	8006f6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	f043 0220 	orr.w	r2, r3, #32
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e007      	b.n	8006f7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	f003 0304 	and.w	r3, r3, #4
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d1ca      	bne.n	8006f10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f90:	e042      	b.n	8007018 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b10      	cmp	r3, #16
 8006f9e:	d119      	bne.n	8006fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0210 	mvn.w	r2, #16
 8006fa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e029      	b.n	8007028 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd4:	f7fc fe16 	bl	8003c04 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d302      	bcc.n	8006fea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d116      	bne.n	8007018 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007004:	f043 0220 	orr.w	r2, r3, #32
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e007      	b.n	8007028 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007022:	2b40      	cmp	r3, #64	; 0x40
 8007024:	d1b5      	bne.n	8006f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007046:	d11b      	bne.n	8007080 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007050:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	f043 0204 	orr.w	r2, r3, #4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
	...

08007090 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e128      	b.n	80072f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d109      	bne.n	80070c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a90      	ldr	r2, [pc, #576]	; (80072fc <HAL_I2S_Init+0x26c>)
 80070ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7fb fe7b 	bl	8002db8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2202      	movs	r2, #2
 80070c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80070d8:	f023 030f 	bic.w	r3, r3, #15
 80070dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2202      	movs	r2, #2
 80070e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d060      	beq.n	80071b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d102      	bne.n	80070fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80070f6:	2310      	movs	r3, #16
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	e001      	b.n	8007100 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80070fc:	2320      	movs	r3, #32
 80070fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	2b20      	cmp	r3, #32
 8007106:	d802      	bhi.n	800710e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	005b      	lsls	r3, r3, #1
 800710c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800710e:	2001      	movs	r0, #1
 8007110:	f001 f9e6 	bl	80084e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007114:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800711e:	d125      	bne.n	800716c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d010      	beq.n	800714a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	461a      	mov	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	fbb2 f3f3 	udiv	r3, r2, r3
 8007144:	3305      	adds	r3, #5
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	e01f      	b.n	800718a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	fbb2 f2f3 	udiv	r2, r2, r3
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	461a      	mov	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	fbb2 f3f3 	udiv	r3, r2, r3
 8007166:	3305      	adds	r3, #5
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	e00e      	b.n	800718a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	fbb2 f2f3 	udiv	r2, r2, r3
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	461a      	mov	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	fbb2 f3f3 	udiv	r3, r2, r3
 8007186:	3305      	adds	r3, #5
 8007188:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	4a5c      	ldr	r2, [pc, #368]	; (8007300 <HAL_I2S_Init+0x270>)
 800718e:	fba2 2303 	umull	r2, r3, r2, r3
 8007192:	08db      	lsrs	r3, r3, #3
 8007194:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	085b      	lsrs	r3, r3, #1
 80071a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	e003      	b.n	80071b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80071b0:	2302      	movs	r3, #2
 80071b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d902      	bls.n	80071c4 <HAL_I2S_Init+0x134>
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	2bff      	cmp	r3, #255	; 0xff
 80071c2:	d907      	bls.n	80071d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c8:	f043 0210 	orr.w	r2, r3, #16
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e08f      	b.n	80072f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	ea42 0103 	orr.w	r1, r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80071f2:	f023 030f 	bic.w	r3, r3, #15
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6851      	ldr	r1, [r2, #4]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6892      	ldr	r2, [r2, #8]
 80071fe:	4311      	orrs	r1, r2
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	68d2      	ldr	r2, [r2, #12]
 8007204:	4311      	orrs	r1, r2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6992      	ldr	r2, [r2, #24]
 800720a:	430a      	orrs	r2, r1
 800720c:	431a      	orrs	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007216:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d161      	bne.n	80072e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a38      	ldr	r2, [pc, #224]	; (8007304 <HAL_I2S_Init+0x274>)
 8007224:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a37      	ldr	r2, [pc, #220]	; (8007308 <HAL_I2S_Init+0x278>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d101      	bne.n	8007234 <HAL_I2S_Init+0x1a4>
 8007230:	4b36      	ldr	r3, [pc, #216]	; (800730c <HAL_I2S_Init+0x27c>)
 8007232:	e001      	b.n	8007238 <HAL_I2S_Init+0x1a8>
 8007234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6812      	ldr	r2, [r2, #0]
 800723e:	4932      	ldr	r1, [pc, #200]	; (8007308 <HAL_I2S_Init+0x278>)
 8007240:	428a      	cmp	r2, r1
 8007242:	d101      	bne.n	8007248 <HAL_I2S_Init+0x1b8>
 8007244:	4a31      	ldr	r2, [pc, #196]	; (800730c <HAL_I2S_Init+0x27c>)
 8007246:	e001      	b.n	800724c <HAL_I2S_Init+0x1bc>
 8007248:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800724c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007250:	f023 030f 	bic.w	r3, r3, #15
 8007254:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a2b      	ldr	r2, [pc, #172]	; (8007308 <HAL_I2S_Init+0x278>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d101      	bne.n	8007264 <HAL_I2S_Init+0x1d4>
 8007260:	4b2a      	ldr	r3, [pc, #168]	; (800730c <HAL_I2S_Init+0x27c>)
 8007262:	e001      	b.n	8007268 <HAL_I2S_Init+0x1d8>
 8007264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007268:	2202      	movs	r2, #2
 800726a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a25      	ldr	r2, [pc, #148]	; (8007308 <HAL_I2S_Init+0x278>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d101      	bne.n	800727a <HAL_I2S_Init+0x1ea>
 8007276:	4b25      	ldr	r3, [pc, #148]	; (800730c <HAL_I2S_Init+0x27c>)
 8007278:	e001      	b.n	800727e <HAL_I2S_Init+0x1ee>
 800727a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800728a:	d003      	beq.n	8007294 <HAL_I2S_Init+0x204>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d103      	bne.n	800729c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8007294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007298:	613b      	str	r3, [r7, #16]
 800729a:	e001      	b.n	80072a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800729c:	2300      	movs	r3, #0
 800729e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80072aa:	4313      	orrs	r3, r2
 80072ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80072b4:	4313      	orrs	r3, r2
 80072b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80072be:	4313      	orrs	r3, r2
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	897b      	ldrh	r3, [r7, #10]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a0d      	ldr	r2, [pc, #52]	; (8007308 <HAL_I2S_Init+0x278>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d101      	bne.n	80072dc <HAL_I2S_Init+0x24c>
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <HAL_I2S_Init+0x27c>)
 80072da:	e001      	b.n	80072e0 <HAL_I2S_Init+0x250>
 80072dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072e0:	897a      	ldrh	r2, [r7, #10]
 80072e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3720      	adds	r7, #32
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	08007407 	.word	0x08007407
 8007300:	cccccccd 	.word	0xcccccccd
 8007304:	0800751d 	.word	0x0800751d
 8007308:	40003800 	.word	0x40003800
 800730c:	40003400 	.word	0x40003400

08007310 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	881a      	ldrh	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	1c9a      	adds	r2, r3, #2
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737c:	b29b      	uxth	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10e      	bne.n	80073a0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007390:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff ffb8 	bl	8007310 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	b292      	uxth	r2, r2
 80073bc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	1c9a      	adds	r2, r3, #2
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073da:	b29b      	uxth	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10e      	bne.n	80073fe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80073ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff ff93 	bl	8007324 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b04      	cmp	r3, #4
 8007420:	d13a      	bne.n	8007498 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b01      	cmp	r3, #1
 800742a:	d109      	bne.n	8007440 <I2S_IRQHandler+0x3a>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007436:	2b40      	cmp	r3, #64	; 0x40
 8007438:	d102      	bne.n	8007440 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff ffb4 	bl	80073a8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	d126      	bne.n	8007498 <I2S_IRQHandler+0x92>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f003 0320 	and.w	r3, r3, #32
 8007454:	2b20      	cmp	r3, #32
 8007456:	d11f      	bne.n	8007498 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007466:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	613b      	str	r3, [r7, #16]
 800747c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748a:	f043 0202 	orr.w	r2, r3, #2
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff ff50 	bl	8007338 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d136      	bne.n	8007512 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d109      	bne.n	80074c2 <I2S_IRQHandler+0xbc>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b8:	2b80      	cmp	r3, #128	; 0x80
 80074ba:	d102      	bne.n	80074c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7ff ff45 	bl	800734c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d122      	bne.n	8007512 <I2S_IRQHandler+0x10c>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d11b      	bne.n	8007512 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80074e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007504:	f043 0204 	orr.w	r2, r3, #4
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff ff13 	bl	8007338 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007512:	bf00      	nop
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4aa2      	ldr	r2, [pc, #648]	; (80077bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d101      	bne.n	800753a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007536:	4ba2      	ldr	r3, [pc, #648]	; (80077c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007538:	e001      	b.n	800753e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800753a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a9b      	ldr	r2, [pc, #620]	; (80077bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d101      	bne.n	8007558 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007554:	4b9a      	ldr	r3, [pc, #616]	; (80077c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007556:	e001      	b.n	800755c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007558:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007568:	d004      	beq.n	8007574 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	f040 8099 	bne.w	80076a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b02      	cmp	r3, #2
 800757c:	d107      	bne.n	800758e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f925 	bl	80077d8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b01      	cmp	r3, #1
 8007596:	d107      	bne.n	80075a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f9c8 	bl	8007938 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ae:	2b40      	cmp	r3, #64	; 0x40
 80075b0:	d13a      	bne.n	8007628 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f003 0320 	and.w	r3, r3, #32
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d035      	beq.n	8007628 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a7e      	ldr	r2, [pc, #504]	; (80077bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d101      	bne.n	80075ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80075c6:	4b7e      	ldr	r3, [pc, #504]	; (80077c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80075c8:	e001      	b.n	80075ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80075ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4979      	ldr	r1, [pc, #484]	; (80077bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80075d6:	428b      	cmp	r3, r1
 80075d8:	d101      	bne.n	80075de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80075da:	4b79      	ldr	r3, [pc, #484]	; (80077c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80075dc:	e001      	b.n	80075e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80075de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80075e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80075f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80075f8:	2300      	movs	r3, #0
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	f043 0202 	orr.w	r2, r3, #2
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff fe88 	bl	8007338 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	2b08      	cmp	r3, #8
 8007630:	f040 80be 	bne.w	80077b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 80b8 	beq.w	80077b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800764e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a59      	ldr	r2, [pc, #356]	; (80077bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d101      	bne.n	800765e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800765a:	4b59      	ldr	r3, [pc, #356]	; (80077c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800765c:	e001      	b.n	8007662 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800765e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4954      	ldr	r1, [pc, #336]	; (80077bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800766a:	428b      	cmp	r3, r1
 800766c:	d101      	bne.n	8007672 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800766e:	4b54      	ldr	r3, [pc, #336]	; (80077c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007670:	e001      	b.n	8007676 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007676:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800767a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800767c:	2300      	movs	r3, #0
 800767e:	60bb      	str	r3, [r7, #8]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	60bb      	str	r3, [r7, #8]
 8007688:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	f043 0204 	orr.w	r2, r3, #4
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff fe4a 	bl	8007338 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80076a4:	e084      	b.n	80077b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d107      	bne.n	80076c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f8be 	bl	800783c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d107      	bne.n	80076da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f8fd 	bl	80078d4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e0:	2b40      	cmp	r3, #64	; 0x40
 80076e2:	d12f      	bne.n	8007744 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d02a      	beq.n	8007744 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80076fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a2e      	ldr	r2, [pc, #184]	; (80077bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d101      	bne.n	800770c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007708:	4b2d      	ldr	r3, [pc, #180]	; (80077c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800770a:	e001      	b.n	8007710 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800770c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4929      	ldr	r1, [pc, #164]	; (80077bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007718:	428b      	cmp	r3, r1
 800771a:	d101      	bne.n	8007720 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800771c:	4b28      	ldr	r3, [pc, #160]	; (80077c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800771e:	e001      	b.n	8007724 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007724:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007728:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007736:	f043 0202 	orr.w	r2, r3, #2
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff fdfa 	bl	8007338 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b08      	cmp	r3, #8
 800774c:	d131      	bne.n	80077b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d02c      	beq.n	80077b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a17      	ldr	r2, [pc, #92]	; (80077bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d101      	bne.n	8007766 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007762:	4b17      	ldr	r3, [pc, #92]	; (80077c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007764:	e001      	b.n	800776a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007766:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4912      	ldr	r1, [pc, #72]	; (80077bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007772:	428b      	cmp	r3, r1
 8007774:	d101      	bne.n	800777a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007776:	4b12      	ldr	r3, [pc, #72]	; (80077c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007778:	e001      	b.n	800777e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800777a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800777e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007782:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007792:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a0:	f043 0204 	orr.w	r2, r3, #4
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7ff fdc5 	bl	8007338 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077ae:	e000      	b.n	80077b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80077b0:	bf00      	nop
}
 80077b2:	bf00      	nop
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	40003800 	.word	0x40003800
 80077c0:	40003400 	.word	0x40003400

080077c4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e4:	1c99      	adds	r1, r3, #2
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	6251      	str	r1, [r2, #36]	; 0x24
 80077ea:	881a      	ldrh	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007804:	b29b      	uxth	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d113      	bne.n	8007832 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007818:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800781e:	b29b      	uxth	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	d106      	bne.n	8007832 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff ffc9 	bl	80077c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	1c99      	adds	r1, r3, #2
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6251      	str	r1, [r2, #36]	; 0x24
 800784e:	8819      	ldrh	r1, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1d      	ldr	r2, [pc, #116]	; (80078cc <I2SEx_TxISR_I2SExt+0x90>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d101      	bne.n	800785e <I2SEx_TxISR_I2SExt+0x22>
 800785a:	4b1d      	ldr	r3, [pc, #116]	; (80078d0 <I2SEx_TxISR_I2SExt+0x94>)
 800785c:	e001      	b.n	8007862 <I2SEx_TxISR_I2SExt+0x26>
 800785e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007862:	460a      	mov	r2, r1
 8007864:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d121      	bne.n	80078c2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a12      	ldr	r2, [pc, #72]	; (80078cc <I2SEx_TxISR_I2SExt+0x90>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d101      	bne.n	800788c <I2SEx_TxISR_I2SExt+0x50>
 8007888:	4b11      	ldr	r3, [pc, #68]	; (80078d0 <I2SEx_TxISR_I2SExt+0x94>)
 800788a:	e001      	b.n	8007890 <I2SEx_TxISR_I2SExt+0x54>
 800788c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	490d      	ldr	r1, [pc, #52]	; (80078cc <I2SEx_TxISR_I2SExt+0x90>)
 8007898:	428b      	cmp	r3, r1
 800789a:	d101      	bne.n	80078a0 <I2SEx_TxISR_I2SExt+0x64>
 800789c:	4b0c      	ldr	r3, [pc, #48]	; (80078d0 <I2SEx_TxISR_I2SExt+0x94>)
 800789e:	e001      	b.n	80078a4 <I2SEx_TxISR_I2SExt+0x68>
 80078a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff ff81 	bl	80077c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40003800 	.word	0x40003800
 80078d0:	40003400 	.word	0x40003400

080078d4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68d8      	ldr	r0, [r3, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	1c99      	adds	r1, r3, #2
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	62d1      	str	r1, [r2, #44]	; 0x2c
 80078ec:	b282      	uxth	r2, r0
 80078ee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	3b01      	subs	r3, #1
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007902:	b29b      	uxth	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d113      	bne.n	8007930 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007916:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff ff4a 	bl	80077c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a20      	ldr	r2, [pc, #128]	; (80079c8 <I2SEx_RxISR_I2SExt+0x90>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d101      	bne.n	800794e <I2SEx_RxISR_I2SExt+0x16>
 800794a:	4b20      	ldr	r3, [pc, #128]	; (80079cc <I2SEx_RxISR_I2SExt+0x94>)
 800794c:	e001      	b.n	8007952 <I2SEx_RxISR_I2SExt+0x1a>
 800794e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007952:	68d8      	ldr	r0, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	1c99      	adds	r1, r3, #2
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800795e:	b282      	uxth	r2, r0
 8007960:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007966:	b29b      	uxth	r3, r3
 8007968:	3b01      	subs	r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d121      	bne.n	80079be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a12      	ldr	r2, [pc, #72]	; (80079c8 <I2SEx_RxISR_I2SExt+0x90>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d101      	bne.n	8007988 <I2SEx_RxISR_I2SExt+0x50>
 8007984:	4b11      	ldr	r3, [pc, #68]	; (80079cc <I2SEx_RxISR_I2SExt+0x94>)
 8007986:	e001      	b.n	800798c <I2SEx_RxISR_I2SExt+0x54>
 8007988:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	490d      	ldr	r1, [pc, #52]	; (80079c8 <I2SEx_RxISR_I2SExt+0x90>)
 8007994:	428b      	cmp	r3, r1
 8007996:	d101      	bne.n	800799c <I2SEx_RxISR_I2SExt+0x64>
 8007998:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <I2SEx_RxISR_I2SExt+0x94>)
 800799a:	e001      	b.n	80079a0 <I2SEx_RxISR_I2SExt+0x68>
 800799c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80079a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff ff03 	bl	80077c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	40003800 	.word	0x40003800
 80079cc:	40003400 	.word	0x40003400

080079d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e264      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d075      	beq.n	8007ada <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079ee:	4ba3      	ldr	r3, [pc, #652]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 030c 	and.w	r3, r3, #12
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d00c      	beq.n	8007a14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079fa:	4ba0      	ldr	r3, [pc, #640]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d112      	bne.n	8007a2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a06:	4b9d      	ldr	r3, [pc, #628]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a12:	d10b      	bne.n	8007a2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a14:	4b99      	ldr	r3, [pc, #612]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d05b      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x108>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d157      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e23f      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a34:	d106      	bne.n	8007a44 <HAL_RCC_OscConfig+0x74>
 8007a36:	4b91      	ldr	r3, [pc, #580]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a90      	ldr	r2, [pc, #576]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	e01d      	b.n	8007a80 <HAL_RCC_OscConfig+0xb0>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a4c:	d10c      	bne.n	8007a68 <HAL_RCC_OscConfig+0x98>
 8007a4e:	4b8b      	ldr	r3, [pc, #556]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a8a      	ldr	r2, [pc, #552]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	4b88      	ldr	r3, [pc, #544]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a87      	ldr	r2, [pc, #540]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	e00b      	b.n	8007a80 <HAL_RCC_OscConfig+0xb0>
 8007a68:	4b84      	ldr	r3, [pc, #528]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a83      	ldr	r2, [pc, #524]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	4b81      	ldr	r3, [pc, #516]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a80      	ldr	r2, [pc, #512]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d013      	beq.n	8007ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a88:	f7fc f8bc 	bl	8003c04 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a90:	f7fc f8b8 	bl	8003c04 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b64      	cmp	r3, #100	; 0x64
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e204      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aa2:	4b76      	ldr	r3, [pc, #472]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0f0      	beq.n	8007a90 <HAL_RCC_OscConfig+0xc0>
 8007aae:	e014      	b.n	8007ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab0:	f7fc f8a8 	bl	8003c04 <HAL_GetTick>
 8007ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ab6:	e008      	b.n	8007aca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ab8:	f7fc f8a4 	bl	8003c04 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b64      	cmp	r3, #100	; 0x64
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e1f0      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aca:	4b6c      	ldr	r3, [pc, #432]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1f0      	bne.n	8007ab8 <HAL_RCC_OscConfig+0xe8>
 8007ad6:	e000      	b.n	8007ada <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d063      	beq.n	8007bae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ae6:	4b65      	ldr	r3, [pc, #404]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 030c 	and.w	r3, r3, #12
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00b      	beq.n	8007b0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007af2:	4b62      	ldr	r3, [pc, #392]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007afa:	2b08      	cmp	r3, #8
 8007afc:	d11c      	bne.n	8007b38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007afe:	4b5f      	ldr	r3, [pc, #380]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d116      	bne.n	8007b38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b0a:	4b5c      	ldr	r3, [pc, #368]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <HAL_RCC_OscConfig+0x152>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d001      	beq.n	8007b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e1c4      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b22:	4b56      	ldr	r3, [pc, #344]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	4952      	ldr	r1, [pc, #328]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b36:	e03a      	b.n	8007bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d020      	beq.n	8007b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b40:	4b4f      	ldr	r3, [pc, #316]	; (8007c80 <HAL_RCC_OscConfig+0x2b0>)
 8007b42:	2201      	movs	r2, #1
 8007b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b46:	f7fc f85d 	bl	8003c04 <HAL_GetTick>
 8007b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b4c:	e008      	b.n	8007b60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b4e:	f7fc f859 	bl	8003c04 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e1a5      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b60:	4b46      	ldr	r3, [pc, #280]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0f0      	beq.n	8007b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b6c:	4b43      	ldr	r3, [pc, #268]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	4940      	ldr	r1, [pc, #256]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	600b      	str	r3, [r1, #0]
 8007b80:	e015      	b.n	8007bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b82:	4b3f      	ldr	r3, [pc, #252]	; (8007c80 <HAL_RCC_OscConfig+0x2b0>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b88:	f7fc f83c 	bl	8003c04 <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b90:	f7fc f838 	bl	8003c04 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e184      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ba2:	4b36      	ldr	r3, [pc, #216]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f0      	bne.n	8007b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d030      	beq.n	8007c1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d016      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bc2:	4b30      	ldr	r3, [pc, #192]	; (8007c84 <HAL_RCC_OscConfig+0x2b4>)
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bc8:	f7fc f81c 	bl	8003c04 <HAL_GetTick>
 8007bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bce:	e008      	b.n	8007be2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bd0:	f7fc f818 	bl	8003c04 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e164      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007be2:	4b26      	ldr	r3, [pc, #152]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0f0      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x200>
 8007bee:	e015      	b.n	8007c1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bf0:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <HAL_RCC_OscConfig+0x2b4>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bf6:	f7fc f805 	bl	8003c04 <HAL_GetTick>
 8007bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bfc:	e008      	b.n	8007c10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bfe:	f7fc f801 	bl	8003c04 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d901      	bls.n	8007c10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e14d      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c10:	4b1a      	ldr	r3, [pc, #104]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1f0      	bne.n	8007bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 80a0 	beq.w	8007d6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c2e:	4b13      	ldr	r3, [pc, #76]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10f      	bne.n	8007c5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60bb      	str	r3, [r7, #8]
 8007c3e:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	4a0e      	ldr	r2, [pc, #56]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c48:	6413      	str	r3, [r2, #64]	; 0x40
 8007c4a:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <HAL_RCC_OscConfig+0x2ac>)
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c52:	60bb      	str	r3, [r7, #8]
 8007c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c56:	2301      	movs	r3, #1
 8007c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c5a:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <HAL_RCC_OscConfig+0x2b8>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d121      	bne.n	8007caa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c66:	4b08      	ldr	r3, [pc, #32]	; (8007c88 <HAL_RCC_OscConfig+0x2b8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a07      	ldr	r2, [pc, #28]	; (8007c88 <HAL_RCC_OscConfig+0x2b8>)
 8007c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c72:	f7fb ffc7 	bl	8003c04 <HAL_GetTick>
 8007c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c78:	e011      	b.n	8007c9e <HAL_RCC_OscConfig+0x2ce>
 8007c7a:	bf00      	nop
 8007c7c:	40023800 	.word	0x40023800
 8007c80:	42470000 	.word	0x42470000
 8007c84:	42470e80 	.word	0x42470e80
 8007c88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c8c:	f7fb ffba 	bl	8003c04 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d901      	bls.n	8007c9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e106      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c9e:	4b85      	ldr	r3, [pc, #532]	; (8007eb4 <HAL_RCC_OscConfig+0x4e4>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0f0      	beq.n	8007c8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d106      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x2f0>
 8007cb2:	4b81      	ldr	r3, [pc, #516]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb6:	4a80      	ldr	r2, [pc, #512]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007cb8:	f043 0301 	orr.w	r3, r3, #1
 8007cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8007cbe:	e01c      	b.n	8007cfa <HAL_RCC_OscConfig+0x32a>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	2b05      	cmp	r3, #5
 8007cc6:	d10c      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x312>
 8007cc8:	4b7b      	ldr	r3, [pc, #492]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ccc:	4a7a      	ldr	r2, [pc, #488]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007cce:	f043 0304 	orr.w	r3, r3, #4
 8007cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd4:	4b78      	ldr	r3, [pc, #480]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd8:	4a77      	ldr	r2, [pc, #476]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	6713      	str	r3, [r2, #112]	; 0x70
 8007ce0:	e00b      	b.n	8007cfa <HAL_RCC_OscConfig+0x32a>
 8007ce2:	4b75      	ldr	r3, [pc, #468]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce6:	4a74      	ldr	r2, [pc, #464]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	6713      	str	r3, [r2, #112]	; 0x70
 8007cee:	4b72      	ldr	r3, [pc, #456]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf2:	4a71      	ldr	r2, [pc, #452]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007cf4:	f023 0304 	bic.w	r3, r3, #4
 8007cf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d015      	beq.n	8007d2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d02:	f7fb ff7f 	bl	8003c04 <HAL_GetTick>
 8007d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d08:	e00a      	b.n	8007d20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d0a:	f7fb ff7b 	bl	8003c04 <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d901      	bls.n	8007d20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e0c5      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d20:	4b65      	ldr	r3, [pc, #404]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0ee      	beq.n	8007d0a <HAL_RCC_OscConfig+0x33a>
 8007d2c:	e014      	b.n	8007d58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d2e:	f7fb ff69 	bl	8003c04 <HAL_GetTick>
 8007d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d34:	e00a      	b.n	8007d4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d36:	f7fb ff65 	bl	8003c04 <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d901      	bls.n	8007d4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e0af      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d4c:	4b5a      	ldr	r3, [pc, #360]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1ee      	bne.n	8007d36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d105      	bne.n	8007d6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d5e:	4b56      	ldr	r3, [pc, #344]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	4a55      	ldr	r2, [pc, #340]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 809b 	beq.w	8007eaa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d74:	4b50      	ldr	r3, [pc, #320]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 030c 	and.w	r3, r3, #12
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	d05c      	beq.n	8007e3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d141      	bne.n	8007e0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d88:	4b4c      	ldr	r3, [pc, #304]	; (8007ebc <HAL_RCC_OscConfig+0x4ec>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d8e:	f7fb ff39 	bl	8003c04 <HAL_GetTick>
 8007d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d94:	e008      	b.n	8007da8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d96:	f7fb ff35 	bl	8003c04 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d901      	bls.n	8007da8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e081      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007da8:	4b43      	ldr	r3, [pc, #268]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1f0      	bne.n	8007d96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	69da      	ldr	r2, [r3, #28]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	019b      	lsls	r3, r3, #6
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dca:	085b      	lsrs	r3, r3, #1
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	041b      	lsls	r3, r3, #16
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd6:	061b      	lsls	r3, r3, #24
 8007dd8:	4937      	ldr	r1, [pc, #220]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dde:	4b37      	ldr	r3, [pc, #220]	; (8007ebc <HAL_RCC_OscConfig+0x4ec>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007de4:	f7fb ff0e 	bl	8003c04 <HAL_GetTick>
 8007de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dea:	e008      	b.n	8007dfe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dec:	f7fb ff0a 	bl	8003c04 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e056      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dfe:	4b2e      	ldr	r3, [pc, #184]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0f0      	beq.n	8007dec <HAL_RCC_OscConfig+0x41c>
 8007e0a:	e04e      	b.n	8007eaa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e0c:	4b2b      	ldr	r3, [pc, #172]	; (8007ebc <HAL_RCC_OscConfig+0x4ec>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e12:	f7fb fef7 	bl	8003c04 <HAL_GetTick>
 8007e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e18:	e008      	b.n	8007e2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e1a:	f7fb fef3 	bl	8003c04 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d901      	bls.n	8007e2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e03f      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e2c:	4b22      	ldr	r3, [pc, #136]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1f0      	bne.n	8007e1a <HAL_RCC_OscConfig+0x44a>
 8007e38:	e037      	b.n	8007eaa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d101      	bne.n	8007e46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e032      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e46:	4b1c      	ldr	r3, [pc, #112]	; (8007eb8 <HAL_RCC_OscConfig+0x4e8>)
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d028      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d121      	bne.n	8007ea6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d11a      	bne.n	8007ea6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e76:	4013      	ands	r3, r2
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d111      	bne.n	8007ea6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8c:	085b      	lsrs	r3, r3, #1
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d107      	bne.n	8007ea6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d001      	beq.n	8007eaa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	40007000 	.word	0x40007000
 8007eb8:	40023800 	.word	0x40023800
 8007ebc:	42470060 	.word	0x42470060

08007ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e0cc      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ed4:	4b68      	ldr	r3, [pc, #416]	; (8008078 <HAL_RCC_ClockConfig+0x1b8>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d90c      	bls.n	8007efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ee2:	4b65      	ldr	r3, [pc, #404]	; (8008078 <HAL_RCC_ClockConfig+0x1b8>)
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eea:	4b63      	ldr	r3, [pc, #396]	; (8008078 <HAL_RCC_ClockConfig+0x1b8>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d001      	beq.n	8007efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e0b8      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d020      	beq.n	8007f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f14:	4b59      	ldr	r3, [pc, #356]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	4a58      	ldr	r2, [pc, #352]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f2c:	4b53      	ldr	r3, [pc, #332]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	4a52      	ldr	r2, [pc, #328]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f38:	4b50      	ldr	r3, [pc, #320]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	494d      	ldr	r1, [pc, #308]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d044      	beq.n	8007fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d107      	bne.n	8007f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f5e:	4b47      	ldr	r3, [pc, #284]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d119      	bne.n	8007f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e07f      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d003      	beq.n	8007f7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d107      	bne.n	8007f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f7e:	4b3f      	ldr	r3, [pc, #252]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d109      	bne.n	8007f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e06f      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f8e:	4b3b      	ldr	r3, [pc, #236]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e067      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f9e:	4b37      	ldr	r3, [pc, #220]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f023 0203 	bic.w	r2, r3, #3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	4934      	ldr	r1, [pc, #208]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fb0:	f7fb fe28 	bl	8003c04 <HAL_GetTick>
 8007fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fb6:	e00a      	b.n	8007fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fb8:	f7fb fe24 	bl	8003c04 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e04f      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fce:	4b2b      	ldr	r3, [pc, #172]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f003 020c 	and.w	r2, r3, #12
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d1eb      	bne.n	8007fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fe0:	4b25      	ldr	r3, [pc, #148]	; (8008078 <HAL_RCC_ClockConfig+0x1b8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0307 	and.w	r3, r3, #7
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d20c      	bcs.n	8008008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fee:	4b22      	ldr	r3, [pc, #136]	; (8008078 <HAL_RCC_ClockConfig+0x1b8>)
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	b2d2      	uxtb	r2, r2
 8007ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ff6:	4b20      	ldr	r3, [pc, #128]	; (8008078 <HAL_RCC_ClockConfig+0x1b8>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0307 	and.w	r3, r3, #7
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d001      	beq.n	8008008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e032      	b.n	800806e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008014:	4b19      	ldr	r3, [pc, #100]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	4916      	ldr	r1, [pc, #88]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8008022:	4313      	orrs	r3, r2
 8008024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0308 	and.w	r3, r3, #8
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008032:	4b12      	ldr	r3, [pc, #72]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	490e      	ldr	r1, [pc, #56]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 8008042:	4313      	orrs	r3, r2
 8008044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008046:	f000 f821 	bl	800808c <HAL_RCC_GetSysClockFreq>
 800804a:	4602      	mov	r2, r0
 800804c:	4b0b      	ldr	r3, [pc, #44]	; (800807c <HAL_RCC_ClockConfig+0x1bc>)
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	091b      	lsrs	r3, r3, #4
 8008052:	f003 030f 	and.w	r3, r3, #15
 8008056:	490a      	ldr	r1, [pc, #40]	; (8008080 <HAL_RCC_ClockConfig+0x1c0>)
 8008058:	5ccb      	ldrb	r3, [r1, r3]
 800805a:	fa22 f303 	lsr.w	r3, r2, r3
 800805e:	4a09      	ldr	r2, [pc, #36]	; (8008084 <HAL_RCC_ClockConfig+0x1c4>)
 8008060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008062:	4b09      	ldr	r3, [pc, #36]	; (8008088 <HAL_RCC_ClockConfig+0x1c8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f7fb f860 	bl	800312c <HAL_InitTick>

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	40023c00 	.word	0x40023c00
 800807c:	40023800 	.word	0x40023800
 8008080:	08011ccc 	.word	0x08011ccc
 8008084:	2000000c 	.word	0x2000000c
 8008088:	20000010 	.word	0x20000010

0800808c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800808c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	607b      	str	r3, [r7, #4]
 8008098:	2300      	movs	r3, #0
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	2300      	movs	r3, #0
 800809e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080a4:	4b67      	ldr	r3, [pc, #412]	; (8008244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f003 030c 	and.w	r3, r3, #12
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d00d      	beq.n	80080cc <HAL_RCC_GetSysClockFreq+0x40>
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	f200 80bd 	bhi.w	8008230 <HAL_RCC_GetSysClockFreq+0x1a4>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <HAL_RCC_GetSysClockFreq+0x34>
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d003      	beq.n	80080c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80080be:	e0b7      	b.n	8008230 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080c0:	4b61      	ldr	r3, [pc, #388]	; (8008248 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80080c2:	60bb      	str	r3, [r7, #8]
       break;
 80080c4:	e0b7      	b.n	8008236 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080c6:	4b61      	ldr	r3, [pc, #388]	; (800824c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80080c8:	60bb      	str	r3, [r7, #8]
      break;
 80080ca:	e0b4      	b.n	8008236 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080cc:	4b5d      	ldr	r3, [pc, #372]	; (8008244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080d6:	4b5b      	ldr	r3, [pc, #364]	; (8008244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d04d      	beq.n	800817e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080e2:	4b58      	ldr	r3, [pc, #352]	; (8008244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	099b      	lsrs	r3, r3, #6
 80080e8:	461a      	mov	r2, r3
 80080ea:	f04f 0300 	mov.w	r3, #0
 80080ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80080f2:	f04f 0100 	mov.w	r1, #0
 80080f6:	ea02 0800 	and.w	r8, r2, r0
 80080fa:	ea03 0901 	and.w	r9, r3, r1
 80080fe:	4640      	mov	r0, r8
 8008100:	4649      	mov	r1, r9
 8008102:	f04f 0200 	mov.w	r2, #0
 8008106:	f04f 0300 	mov.w	r3, #0
 800810a:	014b      	lsls	r3, r1, #5
 800810c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008110:	0142      	lsls	r2, r0, #5
 8008112:	4610      	mov	r0, r2
 8008114:	4619      	mov	r1, r3
 8008116:	ebb0 0008 	subs.w	r0, r0, r8
 800811a:	eb61 0109 	sbc.w	r1, r1, r9
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	018b      	lsls	r3, r1, #6
 8008128:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800812c:	0182      	lsls	r2, r0, #6
 800812e:	1a12      	subs	r2, r2, r0
 8008130:	eb63 0301 	sbc.w	r3, r3, r1
 8008134:	f04f 0000 	mov.w	r0, #0
 8008138:	f04f 0100 	mov.w	r1, #0
 800813c:	00d9      	lsls	r1, r3, #3
 800813e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008142:	00d0      	lsls	r0, r2, #3
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	eb12 0208 	adds.w	r2, r2, r8
 800814c:	eb43 0309 	adc.w	r3, r3, r9
 8008150:	f04f 0000 	mov.w	r0, #0
 8008154:	f04f 0100 	mov.w	r1, #0
 8008158:	0259      	lsls	r1, r3, #9
 800815a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800815e:	0250      	lsls	r0, r2, #9
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4610      	mov	r0, r2
 8008166:	4619      	mov	r1, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	461a      	mov	r2, r3
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	f7f8 f896 	bl	80002a0 <__aeabi_uldivmod>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4613      	mov	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	e04a      	b.n	8008214 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800817e:	4b31      	ldr	r3, [pc, #196]	; (8008244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	099b      	lsrs	r3, r3, #6
 8008184:	461a      	mov	r2, r3
 8008186:	f04f 0300 	mov.w	r3, #0
 800818a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800818e:	f04f 0100 	mov.w	r1, #0
 8008192:	ea02 0400 	and.w	r4, r2, r0
 8008196:	ea03 0501 	and.w	r5, r3, r1
 800819a:	4620      	mov	r0, r4
 800819c:	4629      	mov	r1, r5
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	014b      	lsls	r3, r1, #5
 80081a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80081ac:	0142      	lsls	r2, r0, #5
 80081ae:	4610      	mov	r0, r2
 80081b0:	4619      	mov	r1, r3
 80081b2:	1b00      	subs	r0, r0, r4
 80081b4:	eb61 0105 	sbc.w	r1, r1, r5
 80081b8:	f04f 0200 	mov.w	r2, #0
 80081bc:	f04f 0300 	mov.w	r3, #0
 80081c0:	018b      	lsls	r3, r1, #6
 80081c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80081c6:	0182      	lsls	r2, r0, #6
 80081c8:	1a12      	subs	r2, r2, r0
 80081ca:	eb63 0301 	sbc.w	r3, r3, r1
 80081ce:	f04f 0000 	mov.w	r0, #0
 80081d2:	f04f 0100 	mov.w	r1, #0
 80081d6:	00d9      	lsls	r1, r3, #3
 80081d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081dc:	00d0      	lsls	r0, r2, #3
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	1912      	adds	r2, r2, r4
 80081e4:	eb45 0303 	adc.w	r3, r5, r3
 80081e8:	f04f 0000 	mov.w	r0, #0
 80081ec:	f04f 0100 	mov.w	r1, #0
 80081f0:	0299      	lsls	r1, r3, #10
 80081f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80081f6:	0290      	lsls	r0, r2, #10
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4610      	mov	r0, r2
 80081fe:	4619      	mov	r1, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	461a      	mov	r2, r3
 8008204:	f04f 0300 	mov.w	r3, #0
 8008208:	f7f8 f84a 	bl	80002a0 <__aeabi_uldivmod>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4613      	mov	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008214:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	0c1b      	lsrs	r3, r3, #16
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	3301      	adds	r3, #1
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	fbb2 f3f3 	udiv	r3, r2, r3
 800822c:	60bb      	str	r3, [r7, #8]
      break;
 800822e:	e002      	b.n	8008236 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008230:	4b05      	ldr	r3, [pc, #20]	; (8008248 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008232:	60bb      	str	r3, [r7, #8]
      break;
 8008234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008236:	68bb      	ldr	r3, [r7, #8]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008242:	bf00      	nop
 8008244:	40023800 	.word	0x40023800
 8008248:	00f42400 	.word	0x00f42400
 800824c:	007a1200 	.word	0x007a1200

08008250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008250:	b480      	push	{r7}
 8008252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008254:	4b03      	ldr	r3, [pc, #12]	; (8008264 <HAL_RCC_GetHCLKFreq+0x14>)
 8008256:	681b      	ldr	r3, [r3, #0]
}
 8008258:	4618      	mov	r0, r3
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	2000000c 	.word	0x2000000c

08008268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800826c:	f7ff fff0 	bl	8008250 <HAL_RCC_GetHCLKFreq>
 8008270:	4602      	mov	r2, r0
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	0a9b      	lsrs	r3, r3, #10
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	4903      	ldr	r1, [pc, #12]	; (800828c <HAL_RCC_GetPCLK1Freq+0x24>)
 800827e:	5ccb      	ldrb	r3, [r1, r3]
 8008280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008284:	4618      	mov	r0, r3
 8008286:	bd80      	pop	{r7, pc}
 8008288:	40023800 	.word	0x40023800
 800828c:	08011cdc 	.word	0x08011cdc

08008290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008294:	f7ff ffdc 	bl	8008250 <HAL_RCC_GetHCLKFreq>
 8008298:	4602      	mov	r2, r0
 800829a:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	0b5b      	lsrs	r3, r3, #13
 80082a0:	f003 0307 	and.w	r3, r3, #7
 80082a4:	4903      	ldr	r1, [pc, #12]	; (80082b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082a6:	5ccb      	ldrb	r3, [r1, r3]
 80082a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	40023800 	.word	0x40023800
 80082b4:	08011cdc 	.word	0x08011cdc

080082b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	220f      	movs	r2, #15
 80082c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80082c8:	4b12      	ldr	r3, [pc, #72]	; (8008314 <HAL_RCC_GetClockConfig+0x5c>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f003 0203 	and.w	r2, r3, #3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80082d4:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <HAL_RCC_GetClockConfig+0x5c>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80082e0:	4b0c      	ldr	r3, [pc, #48]	; (8008314 <HAL_RCC_GetClockConfig+0x5c>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80082ec:	4b09      	ldr	r3, [pc, #36]	; (8008314 <HAL_RCC_GetClockConfig+0x5c>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	08db      	lsrs	r3, r3, #3
 80082f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80082fa:	4b07      	ldr	r3, [pc, #28]	; (8008318 <HAL_RCC_GetClockConfig+0x60>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0207 	and.w	r2, r3, #7
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	601a      	str	r2, [r3, #0]
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	40023800 	.word	0x40023800
 8008318:	40023c00 	.word	0x40023c00

0800831c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008328:	2300      	movs	r3, #0
 800832a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008340:	2b00      	cmp	r3, #0
 8008342:	d035      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008344:	4b62      	ldr	r3, [pc, #392]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800834a:	f7fb fc5b 	bl	8003c04 <HAL_GetTick>
 800834e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008350:	e008      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008352:	f7fb fc57 	bl	8003c04 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d901      	bls.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e0b0      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008364:	4b5b      	ldr	r3, [pc, #364]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1f0      	bne.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	019a      	lsls	r2, r3, #6
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	071b      	lsls	r3, r3, #28
 800837c:	4955      	ldr	r1, [pc, #340]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800837e:	4313      	orrs	r3, r2
 8008380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008384:	4b52      	ldr	r3, [pc, #328]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008386:	2201      	movs	r2, #1
 8008388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800838a:	f7fb fc3b 	bl	8003c04 <HAL_GetTick>
 800838e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008390:	e008      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008392:	f7fb fc37 	bl	8003c04 <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	2b02      	cmp	r3, #2
 800839e:	d901      	bls.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e090      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083a4:	4b4b      	ldr	r3, [pc, #300]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0f0      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 8083 	beq.w	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083be:	2300      	movs	r3, #0
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	4b44      	ldr	r3, [pc, #272]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c6:	4a43      	ldr	r2, [pc, #268]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083cc:	6413      	str	r3, [r2, #64]	; 0x40
 80083ce:	4b41      	ldr	r3, [pc, #260]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80083da:	4b3f      	ldr	r3, [pc, #252]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a3e      	ldr	r2, [pc, #248]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80083e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083e6:	f7fb fc0d 	bl	8003c04 <HAL_GetTick>
 80083ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80083ec:	e008      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80083ee:	f7fb fc09 	bl	8003c04 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d901      	bls.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e062      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008400:	4b35      	ldr	r3, [pc, #212]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008408:	2b00      	cmp	r3, #0
 800840a:	d0f0      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800840c:	4b31      	ldr	r3, [pc, #196]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800840e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008414:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d02f      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	429a      	cmp	r2, r3
 8008428:	d028      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800842a:	4b2a      	ldr	r3, [pc, #168]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800842c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008432:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008434:	4b29      	ldr	r3, [pc, #164]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008436:	2201      	movs	r2, #1
 8008438:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800843a:	4b28      	ldr	r3, [pc, #160]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800843c:	2200      	movs	r2, #0
 800843e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008440:	4a24      	ldr	r2, [pc, #144]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008446:	4b23      	ldr	r3, [pc, #140]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b01      	cmp	r3, #1
 8008450:	d114      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008452:	f7fb fbd7 	bl	8003c04 <HAL_GetTick>
 8008456:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008458:	e00a      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800845a:	f7fb fbd3 	bl	8003c04 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	f241 3288 	movw	r2, #5000	; 0x1388
 8008468:	4293      	cmp	r3, r2
 800846a:	d901      	bls.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e02a      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008470:	4b18      	ldr	r3, [pc, #96]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b00      	cmp	r3, #0
 800847a:	d0ee      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008488:	d10d      	bne.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800848a:	4b12      	ldr	r3, [pc, #72]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800849a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800849e:	490d      	ldr	r1, [pc, #52]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	608b      	str	r3, [r1, #8]
 80084a4:	e005      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80084a6:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	4a0a      	ldr	r2, [pc, #40]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084b0:	6093      	str	r3, [r2, #8]
 80084b2:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084be:	4905      	ldr	r1, [pc, #20]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	42470068 	.word	0x42470068
 80084d4:	40023800 	.word	0x40023800
 80084d8:	40007000 	.word	0x40007000
 80084dc:	42470e40 	.word	0x42470e40

080084e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d13e      	bne.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80084fe:	4b23      	ldr	r3, [pc, #140]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d005      	beq.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d12f      	bne.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008514:	4b1e      	ldr	r3, [pc, #120]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008516:	617b      	str	r3, [r7, #20]
          break;
 8008518:	e02f      	b.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800851a:	4b1c      	ldr	r3, [pc, #112]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008526:	d108      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008528:	4b18      	ldr	r3, [pc, #96]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008530:	4a18      	ldr	r2, [pc, #96]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008532:	fbb2 f3f3 	udiv	r3, r2, r3
 8008536:	613b      	str	r3, [r7, #16]
 8008538:	e007      	b.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800853a:	4b14      	ldr	r3, [pc, #80]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008542:	4a15      	ldr	r2, [pc, #84]	; (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008544:	fbb2 f3f3 	udiv	r3, r2, r3
 8008548:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800854a:	4b10      	ldr	r3, [pc, #64]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800854c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008550:	099b      	lsrs	r3, r3, #6
 8008552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	fb02 f303 	mul.w	r3, r2, r3
 800855c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800855e:	4b0b      	ldr	r3, [pc, #44]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008564:	0f1b      	lsrs	r3, r3, #28
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008570:	617b      	str	r3, [r7, #20]
          break;
 8008572:	e002      	b.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	617b      	str	r3, [r7, #20]
          break;
 8008578:	bf00      	nop
        }
      }
      break;
 800857a:	bf00      	nop
    }
  }
  return frequency;
 800857c:	697b      	ldr	r3, [r7, #20]
}
 800857e:	4618      	mov	r0, r3
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	40023800 	.word	0x40023800
 8008590:	00bb8000 	.word	0x00bb8000
 8008594:	007a1200 	.word	0x007a1200
 8008598:	00f42400 	.word	0x00f42400

0800859c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e083      	b.n	80086b6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	7f5b      	ldrb	r3, [r3, #29]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d105      	bne.n	80085c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7fa fc7a 	bl	8002eb8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	22ca      	movs	r2, #202	; 0xca
 80085d0:	625a      	str	r2, [r3, #36]	; 0x24
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2253      	movs	r2, #83	; 0x53
 80085d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f897 	bl	800870e <RTC_EnterInitMode>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d008      	beq.n	80085f8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	22ff      	movs	r2, #255	; 0xff
 80085ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2204      	movs	r2, #4
 80085f2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e05e      	b.n	80086b6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	6812      	ldr	r2, [r2, #0]
 8008602:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800860a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6899      	ldr	r1, [r3, #8]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	431a      	orrs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	431a      	orrs	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	68d2      	ldr	r2, [r2, #12]
 8008632:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6919      	ldr	r1, [r3, #16]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	041a      	lsls	r2, r3, #16
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008656:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f003 0320 	and.w	r3, r3, #32
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10e      	bne.n	8008684 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f829 	bl	80086be <HAL_RTC_WaitForSynchro>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d008      	beq.n	8008684 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	22ff      	movs	r2, #255	; 0xff
 8008678:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2204      	movs	r2, #4
 800867e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e018      	b.n	80086b6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008692:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	699a      	ldr	r2, [r3, #24]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	22ff      	movs	r2, #255	; 0xff
 80086ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80086b4:	2300      	movs	r3, #0
  }
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80086d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086da:	f7fb fa93 	bl	8003c04 <HAL_GetTick>
 80086de:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80086e0:	e009      	b.n	80086f6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80086e2:	f7fb fa8f 	bl	8003c04 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086f0:	d901      	bls.n	80086f6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e007      	b.n	8008706 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0ee      	beq.n	80086e2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008724:	2b00      	cmp	r3, #0
 8008726:	d119      	bne.n	800875c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008730:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008732:	f7fb fa67 	bl	8003c04 <HAL_GetTick>
 8008736:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008738:	e009      	b.n	800874e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800873a:	f7fb fa63 	bl	8003c04 <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008748:	d901      	bls.n	800874e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e007      	b.n	800875e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008758:	2b00      	cmp	r3, #0
 800875a:	d0ee      	beq.n	800873a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d101      	bne.n	8008778 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e07b      	b.n	8008870 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	2b00      	cmp	r3, #0
 800877e:	d108      	bne.n	8008792 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008788:	d009      	beq.n	800879e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	61da      	str	r2, [r3, #28]
 8008790:	e005      	b.n	800879e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d106      	bne.n	80087be <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7fa fba7 	bl	8002f0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2202      	movs	r2, #2
 80087c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80087e6:	431a      	orrs	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087f0:	431a      	orrs	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	431a      	orrs	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	431a      	orrs	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800880e:	431a      	orrs	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008818:	431a      	orrs	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008822:	ea42 0103 	orr.w	r1, r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	0c1b      	lsrs	r3, r3, #16
 800883c:	f003 0104 	and.w	r1, r3, #4
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	f003 0210 	and.w	r2, r3, #16
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	69da      	ldr	r2, [r3, #28]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800885e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e041      	b.n	800890e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7fa fbcc 	bl	800303c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f000 fb32 	bl	8008f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b01      	cmp	r3, #1
 800892a:	d001      	beq.n	8008930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e04e      	b.n	80089ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68da      	ldr	r2, [r3, #12]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0201 	orr.w	r2, r2, #1
 8008946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a23      	ldr	r2, [pc, #140]	; (80089dc <HAL_TIM_Base_Start_IT+0xc4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d022      	beq.n	8008998 <HAL_TIM_Base_Start_IT+0x80>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800895a:	d01d      	beq.n	8008998 <HAL_TIM_Base_Start_IT+0x80>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a1f      	ldr	r2, [pc, #124]	; (80089e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d018      	beq.n	8008998 <HAL_TIM_Base_Start_IT+0x80>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a1e      	ldr	r2, [pc, #120]	; (80089e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d013      	beq.n	8008998 <HAL_TIM_Base_Start_IT+0x80>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a1c      	ldr	r2, [pc, #112]	; (80089e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d00e      	beq.n	8008998 <HAL_TIM_Base_Start_IT+0x80>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a1b      	ldr	r2, [pc, #108]	; (80089ec <HAL_TIM_Base_Start_IT+0xd4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d009      	beq.n	8008998 <HAL_TIM_Base_Start_IT+0x80>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a19      	ldr	r2, [pc, #100]	; (80089f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d004      	beq.n	8008998 <HAL_TIM_Base_Start_IT+0x80>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a18      	ldr	r2, [pc, #96]	; (80089f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d111      	bne.n	80089bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b06      	cmp	r3, #6
 80089a8:	d010      	beq.n	80089cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f042 0201 	orr.w	r2, r2, #1
 80089b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ba:	e007      	b.n	80089cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0201 	orr.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	40010000 	.word	0x40010000
 80089e0:	40000400 	.word	0x40000400
 80089e4:	40000800 	.word	0x40000800
 80089e8:	40000c00 	.word	0x40000c00
 80089ec:	40010400 	.word	0x40010400
 80089f0:	40014000 	.word	0x40014000
 80089f4:	40001800 	.word	0x40001800

080089f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68da      	ldr	r2, [r3, #12]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0201 	bic.w	r2, r2, #1
 8008a0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6a1a      	ldr	r2, [r3, #32]
 8008a16:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10f      	bne.n	8008a40 <HAL_TIM_Base_Stop_IT+0x48>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6a1a      	ldr	r2, [r3, #32]
 8008a26:	f240 4344 	movw	r3, #1092	; 0x444
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d107      	bne.n	8008a40 <HAL_TIM_Base_Stop_IT+0x48>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 0201 	bic.w	r2, r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b086      	sub	sp, #24
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e097      	b.n	8008b9a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d106      	bne.n	8008a84 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7fa fa8c 	bl	8002f9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6812      	ldr	r2, [r2, #0]
 8008a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a9a:	f023 0307 	bic.w	r3, r3, #7
 8008a9e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4610      	mov	r0, r2
 8008aac:	f000 fa38 	bl	8008f20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ad8:	f023 0303 	bic.w	r3, r3, #3
 8008adc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	021b      	lsls	r3, r3, #8
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008af6:	f023 030c 	bic.w	r3, r3, #12
 8008afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	68da      	ldr	r2, [r3, #12]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	69db      	ldr	r3, [r3, #28]
 8008b10:	021b      	lsls	r3, r3, #8
 8008b12:	4313      	orrs	r3, r2
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	011a      	lsls	r2, r3, #4
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	031b      	lsls	r3, r3, #12
 8008b26:	4313      	orrs	r3, r2
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b34:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b3c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	011b      	lsls	r3, r3, #4
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bb2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bc2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bca:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d110      	bne.n	8008bf4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d102      	bne.n	8008bde <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bd8:	7b7b      	ldrb	r3, [r7, #13]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d001      	beq.n	8008be2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e069      	b.n	8008cb6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2202      	movs	r2, #2
 8008be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2202      	movs	r2, #2
 8008bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bf2:	e031      	b.n	8008c58 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	2b04      	cmp	r3, #4
 8008bf8:	d110      	bne.n	8008c1c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d102      	bne.n	8008c06 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c00:	7b3b      	ldrb	r3, [r7, #12]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d001      	beq.n	8008c0a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e055      	b.n	8008cb6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2202      	movs	r2, #2
 8008c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c1a:	e01d      	b.n	8008c58 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d108      	bne.n	8008c34 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d105      	bne.n	8008c34 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c28:	7b7b      	ldrb	r3, [r7, #13]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d102      	bne.n	8008c34 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c2e:	7b3b      	ldrb	r3, [r7, #12]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d001      	beq.n	8008c38 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e03e      	b.n	8008cb6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <HAL_TIM_Encoder_Start+0xc4>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d008      	beq.n	8008c76 <HAL_TIM_Encoder_Start+0xd4>
 8008c64:	e00f      	b.n	8008c86 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f9f6 	bl	8009060 <TIM_CCxChannelCmd>
      break;
 8008c74:	e016      	b.n	8008ca4 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	2104      	movs	r1, #4
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 f9ee 	bl	8009060 <TIM_CCxChannelCmd>
      break;
 8008c84:	e00e      	b.n	8008ca4 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f9e6 	bl	8009060 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	2104      	movs	r1, #4
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 f9df 	bl	8009060 <TIM_CCxChannelCmd>
      break;
 8008ca2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f042 0201 	orr.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d122      	bne.n	8008d1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d11b      	bne.n	8008d1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f06f 0202 	mvn.w	r2, #2
 8008cea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	f003 0303 	and.w	r3, r3, #3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f8ee 	bl	8008ee2 <HAL_TIM_IC_CaptureCallback>
 8008d06:	e005      	b.n	8008d14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f8e0 	bl	8008ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f8f1 	bl	8008ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	d122      	bne.n	8008d6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f003 0304 	and.w	r3, r3, #4
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	d11b      	bne.n	8008d6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f06f 0204 	mvn.w	r2, #4
 8008d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d003      	beq.n	8008d5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f8c4 	bl	8008ee2 <HAL_TIM_IC_CaptureCallback>
 8008d5a:	e005      	b.n	8008d68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f8b6 	bl	8008ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f8c7 	bl	8008ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	f003 0308 	and.w	r3, r3, #8
 8008d78:	2b08      	cmp	r3, #8
 8008d7a:	d122      	bne.n	8008dc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f003 0308 	and.w	r3, r3, #8
 8008d86:	2b08      	cmp	r3, #8
 8008d88:	d11b      	bne.n	8008dc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f06f 0208 	mvn.w	r2, #8
 8008d92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2204      	movs	r2, #4
 8008d98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	69db      	ldr	r3, [r3, #28]
 8008da0:	f003 0303 	and.w	r3, r3, #3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d003      	beq.n	8008db0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f89a 	bl	8008ee2 <HAL_TIM_IC_CaptureCallback>
 8008dae:	e005      	b.n	8008dbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f88c 	bl	8008ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f89d 	bl	8008ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	f003 0310 	and.w	r3, r3, #16
 8008dcc:	2b10      	cmp	r3, #16
 8008dce:	d122      	bne.n	8008e16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f003 0310 	and.w	r3, r3, #16
 8008dda:	2b10      	cmp	r3, #16
 8008ddc:	d11b      	bne.n	8008e16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f06f 0210 	mvn.w	r2, #16
 8008de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2208      	movs	r2, #8
 8008dec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	69db      	ldr	r3, [r3, #28]
 8008df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f870 	bl	8008ee2 <HAL_TIM_IC_CaptureCallback>
 8008e02:	e005      	b.n	8008e10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f862 	bl	8008ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f873 	bl	8008ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d10e      	bne.n	8008e42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d107      	bne.n	8008e42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f06f 0201 	mvn.w	r2, #1
 8008e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7f9 fed7 	bl	8002bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e4c:	2b80      	cmp	r3, #128	; 0x80
 8008e4e:	d10e      	bne.n	8008e6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5a:	2b80      	cmp	r3, #128	; 0x80
 8008e5c:	d107      	bne.n	8008e6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f9a5 	bl	80091b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e78:	2b40      	cmp	r3, #64	; 0x40
 8008e7a:	d10e      	bne.n	8008e9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e86:	2b40      	cmp	r3, #64	; 0x40
 8008e88:	d107      	bne.n	8008e9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f838 	bl	8008f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	d10e      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f003 0320 	and.w	r3, r3, #32
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	d107      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f06f 0220 	mvn.w	r2, #32
 8008ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f96f 	bl	80091a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ec6:	bf00      	nop
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ed6:	bf00      	nop
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008efe:	bf00      	nop
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f12:	bf00      	nop
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
	...

08008f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a40      	ldr	r2, [pc, #256]	; (8009034 <TIM_Base_SetConfig+0x114>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d013      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f3e:	d00f      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a3d      	ldr	r2, [pc, #244]	; (8009038 <TIM_Base_SetConfig+0x118>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d00b      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a3c      	ldr	r2, [pc, #240]	; (800903c <TIM_Base_SetConfig+0x11c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d007      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a3b      	ldr	r2, [pc, #236]	; (8009040 <TIM_Base_SetConfig+0x120>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d003      	beq.n	8008f60 <TIM_Base_SetConfig+0x40>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a3a      	ldr	r2, [pc, #232]	; (8009044 <TIM_Base_SetConfig+0x124>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d108      	bne.n	8008f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a2f      	ldr	r2, [pc, #188]	; (8009034 <TIM_Base_SetConfig+0x114>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d02b      	beq.n	8008fd2 <TIM_Base_SetConfig+0xb2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f80:	d027      	beq.n	8008fd2 <TIM_Base_SetConfig+0xb2>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a2c      	ldr	r2, [pc, #176]	; (8009038 <TIM_Base_SetConfig+0x118>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d023      	beq.n	8008fd2 <TIM_Base_SetConfig+0xb2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a2b      	ldr	r2, [pc, #172]	; (800903c <TIM_Base_SetConfig+0x11c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d01f      	beq.n	8008fd2 <TIM_Base_SetConfig+0xb2>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a2a      	ldr	r2, [pc, #168]	; (8009040 <TIM_Base_SetConfig+0x120>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d01b      	beq.n	8008fd2 <TIM_Base_SetConfig+0xb2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a29      	ldr	r2, [pc, #164]	; (8009044 <TIM_Base_SetConfig+0x124>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d017      	beq.n	8008fd2 <TIM_Base_SetConfig+0xb2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a28      	ldr	r2, [pc, #160]	; (8009048 <TIM_Base_SetConfig+0x128>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d013      	beq.n	8008fd2 <TIM_Base_SetConfig+0xb2>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a27      	ldr	r2, [pc, #156]	; (800904c <TIM_Base_SetConfig+0x12c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d00f      	beq.n	8008fd2 <TIM_Base_SetConfig+0xb2>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a26      	ldr	r2, [pc, #152]	; (8009050 <TIM_Base_SetConfig+0x130>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d00b      	beq.n	8008fd2 <TIM_Base_SetConfig+0xb2>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a25      	ldr	r2, [pc, #148]	; (8009054 <TIM_Base_SetConfig+0x134>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d007      	beq.n	8008fd2 <TIM_Base_SetConfig+0xb2>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a24      	ldr	r2, [pc, #144]	; (8009058 <TIM_Base_SetConfig+0x138>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d003      	beq.n	8008fd2 <TIM_Base_SetConfig+0xb2>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a23      	ldr	r2, [pc, #140]	; (800905c <TIM_Base_SetConfig+0x13c>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d108      	bne.n	8008fe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	689a      	ldr	r2, [r3, #8]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a0a      	ldr	r2, [pc, #40]	; (8009034 <TIM_Base_SetConfig+0x114>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d003      	beq.n	8009018 <TIM_Base_SetConfig+0xf8>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a0c      	ldr	r2, [pc, #48]	; (8009044 <TIM_Base_SetConfig+0x124>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d103      	bne.n	8009020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	691a      	ldr	r2, [r3, #16]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	615a      	str	r2, [r3, #20]
}
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	40010000 	.word	0x40010000
 8009038:	40000400 	.word	0x40000400
 800903c:	40000800 	.word	0x40000800
 8009040:	40000c00 	.word	0x40000c00
 8009044:	40010400 	.word	0x40010400
 8009048:	40014000 	.word	0x40014000
 800904c:	40014400 	.word	0x40014400
 8009050:	40014800 	.word	0x40014800
 8009054:	40001800 	.word	0x40001800
 8009058:	40001c00 	.word	0x40001c00
 800905c:	40002000 	.word	0x40002000

08009060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f003 031f 	and.w	r3, r3, #31
 8009072:	2201      	movs	r2, #1
 8009074:	fa02 f303 	lsl.w	r3, r2, r3
 8009078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6a1a      	ldr	r2, [r3, #32]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	43db      	mvns	r3, r3
 8009082:	401a      	ands	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a1a      	ldr	r2, [r3, #32]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	f003 031f 	and.w	r3, r3, #31
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	fa01 f303 	lsl.w	r3, r1, r3
 8009098:	431a      	orrs	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	621a      	str	r2, [r3, #32]
}
 800909e:	bf00      	nop
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
	...

080090ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090c0:	2302      	movs	r3, #2
 80090c2:	e05a      	b.n	800917a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2202      	movs	r2, #2
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a21      	ldr	r2, [pc, #132]	; (8009188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d022      	beq.n	800914e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009110:	d01d      	beq.n	800914e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a1d      	ldr	r2, [pc, #116]	; (800918c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d018      	beq.n	800914e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a1b      	ldr	r2, [pc, #108]	; (8009190 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d013      	beq.n	800914e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a1a      	ldr	r2, [pc, #104]	; (8009194 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d00e      	beq.n	800914e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a18      	ldr	r2, [pc, #96]	; (8009198 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d009      	beq.n	800914e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a17      	ldr	r2, [pc, #92]	; (800919c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d004      	beq.n	800914e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a15      	ldr	r2, [pc, #84]	; (80091a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d10c      	bne.n	8009168 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	4313      	orrs	r3, r2
 800915e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	40010000 	.word	0x40010000
 800918c:	40000400 	.word	0x40000400
 8009190:	40000800 	.word	0x40000800
 8009194:	40000c00 	.word	0x40000c00
 8009198:	40010400 	.word	0x40010400
 800919c:	40014000 	.word	0x40014000
 80091a0:	40001800 	.word	0x40001800

080091a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e03f      	b.n	800925e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d106      	bne.n	80091f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7f9 ff4a 	bl	800308c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2224      	movs	r2, #36	; 0x24
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68da      	ldr	r2, [r3, #12]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800920e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fddb 	bl	8009dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	691a      	ldr	r2, [r3, #16]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	695a      	ldr	r2, [r3, #20]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68da      	ldr	r2, [r3, #12]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2220      	movs	r2, #32
 8009250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2220      	movs	r2, #32
 8009258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b08a      	sub	sp, #40	; 0x28
 800926a:	af02      	add	r7, sp, #8
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	603b      	str	r3, [r7, #0]
 8009272:	4613      	mov	r3, r2
 8009274:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b20      	cmp	r3, #32
 8009284:	d17c      	bne.n	8009380 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <HAL_UART_Transmit+0x2c>
 800928c:	88fb      	ldrh	r3, [r7, #6]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e075      	b.n	8009382 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800929c:	2b01      	cmp	r3, #1
 800929e:	d101      	bne.n	80092a4 <HAL_UART_Transmit+0x3e>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e06e      	b.n	8009382 <HAL_UART_Transmit+0x11c>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2221      	movs	r2, #33	; 0x21
 80092b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092ba:	f7fa fca3 	bl	8003c04 <HAL_GetTick>
 80092be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	88fa      	ldrh	r2, [r7, #6]
 80092c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	88fa      	ldrh	r2, [r7, #6]
 80092ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d4:	d108      	bne.n	80092e8 <HAL_UART_Transmit+0x82>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d104      	bne.n	80092e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	61bb      	str	r3, [r7, #24]
 80092e6:	e003      	b.n	80092f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092ec:	2300      	movs	r3, #0
 80092ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80092f8:	e02a      	b.n	8009350 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2200      	movs	r2, #0
 8009302:	2180      	movs	r1, #128	; 0x80
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 fb1f 	bl	8009948 <UART_WaitOnFlagUntilTimeout>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e036      	b.n	8009382 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10b      	bne.n	8009332 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009328:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	3302      	adds	r3, #2
 800932e:	61bb      	str	r3, [r7, #24]
 8009330:	e007      	b.n	8009342 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	781a      	ldrb	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	3301      	adds	r3, #1
 8009340:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009346:	b29b      	uxth	r3, r3
 8009348:	3b01      	subs	r3, #1
 800934a:	b29a      	uxth	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009354:	b29b      	uxth	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1cf      	bne.n	80092fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2200      	movs	r2, #0
 8009362:	2140      	movs	r1, #64	; 0x40
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f000 faef 	bl	8009948 <UART_WaitOnFlagUntilTimeout>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e006      	b.n	8009382 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2220      	movs	r2, #32
 8009378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	e000      	b.n	8009382 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009380:	2302      	movs	r3, #2
  }
}
 8009382:	4618      	mov	r0, r3
 8009384:	3720      	adds	r7, #32
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	60f8      	str	r0, [r7, #12]
 8009392:	60b9      	str	r1, [r7, #8]
 8009394:	4613      	mov	r3, r2
 8009396:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b20      	cmp	r3, #32
 80093a2:	d11d      	bne.n	80093e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d002      	beq.n	80093b0 <HAL_UART_Receive_IT+0x26>
 80093aa:	88fb      	ldrh	r3, [r7, #6]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e016      	b.n	80093e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_UART_Receive_IT+0x38>
 80093be:	2302      	movs	r3, #2
 80093c0:	e00f      	b.n	80093e2 <HAL_UART_Receive_IT+0x58>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80093d0:	88fb      	ldrh	r3, [r7, #6]
 80093d2:	461a      	mov	r2, r3
 80093d4:	68b9      	ldr	r1, [r7, #8]
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f000 fb24 	bl	8009a24 <UART_Start_Receive_IT>
 80093dc:	4603      	mov	r3, r0
 80093de:	e000      	b.n	80093e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80093e0:	2302      	movs	r3, #2
  }
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b0ba      	sub	sp, #232	; 0xe8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009412:	2300      	movs	r3, #0
 8009414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009418:	2300      	movs	r3, #0
 800941a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800941e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009422:	f003 030f 	and.w	r3, r3, #15
 8009426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800942a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10f      	bne.n	8009452 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b00      	cmp	r3, #0
 800943c:	d009      	beq.n	8009452 <HAL_UART_IRQHandler+0x66>
 800943e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009442:	f003 0320 	and.w	r3, r3, #32
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fc03 	bl	8009c56 <UART_Receive_IT>
      return;
 8009450:	e256      	b.n	8009900 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 80de 	beq.w	8009618 <HAL_UART_IRQHandler+0x22c>
 800945c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b00      	cmp	r3, #0
 8009466:	d106      	bne.n	8009476 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800946c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 80d1 	beq.w	8009618 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00b      	beq.n	800949a <HAL_UART_IRQHandler+0xae>
 8009482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800948a:	2b00      	cmp	r3, #0
 800948c:	d005      	beq.n	800949a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009492:	f043 0201 	orr.w	r2, r3, #1
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800949a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800949e:	f003 0304 	and.w	r3, r3, #4
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00b      	beq.n	80094be <HAL_UART_IRQHandler+0xd2>
 80094a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	f043 0202 	orr.w	r2, r3, #2
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00b      	beq.n	80094e2 <HAL_UART_IRQHandler+0xf6>
 80094ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d005      	beq.n	80094e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	f043 0204 	orr.w	r2, r3, #4
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80094e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e6:	f003 0308 	and.w	r3, r3, #8
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d011      	beq.n	8009512 <HAL_UART_IRQHandler+0x126>
 80094ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f2:	f003 0320 	and.w	r3, r3, #32
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d105      	bne.n	8009506 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80094fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d005      	beq.n	8009512 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	f043 0208 	orr.w	r2, r3, #8
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 81ed 	beq.w	80098f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800951c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009520:	f003 0320 	and.w	r3, r3, #32
 8009524:	2b00      	cmp	r3, #0
 8009526:	d008      	beq.n	800953a <HAL_UART_IRQHandler+0x14e>
 8009528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800952c:	f003 0320 	and.w	r3, r3, #32
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fb8e 	bl	8009c56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009544:	2b40      	cmp	r3, #64	; 0x40
 8009546:	bf0c      	ite	eq
 8009548:	2301      	moveq	r3, #1
 800954a:	2300      	movne	r3, #0
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009556:	f003 0308 	and.w	r3, r3, #8
 800955a:	2b00      	cmp	r3, #0
 800955c:	d103      	bne.n	8009566 <HAL_UART_IRQHandler+0x17a>
 800955e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009562:	2b00      	cmp	r3, #0
 8009564:	d04f      	beq.n	8009606 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fa96 	bl	8009a98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009576:	2b40      	cmp	r3, #64	; 0x40
 8009578:	d141      	bne.n	80095fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3314      	adds	r3, #20
 8009580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009588:	e853 3f00 	ldrex	r3, [r3]
 800958c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009590:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3314      	adds	r3, #20
 80095a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80095a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80095aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80095b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80095be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1d9      	bne.n	800957a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d013      	beq.n	80095f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d2:	4a7d      	ldr	r2, [pc, #500]	; (80097c8 <HAL_UART_IRQHandler+0x3dc>)
 80095d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fa fc94 	bl	8003f08 <HAL_DMA_Abort_IT>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d016      	beq.n	8009614 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80095f0:	4610      	mov	r0, r2
 80095f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095f4:	e00e      	b.n	8009614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f990 	bl	800991c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095fc:	e00a      	b.n	8009614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f98c 	bl	800991c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009604:	e006      	b.n	8009614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f988 	bl	800991c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009612:	e170      	b.n	80098f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009614:	bf00      	nop
    return;
 8009616:	e16e      	b.n	80098f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961c:	2b01      	cmp	r3, #1
 800961e:	f040 814a 	bne.w	80098b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009626:	f003 0310 	and.w	r3, r3, #16
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 8143 	beq.w	80098b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009634:	f003 0310 	and.w	r3, r3, #16
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 813c 	beq.w	80098b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800963e:	2300      	movs	r3, #0
 8009640:	60bb      	str	r3, [r7, #8]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	60bb      	str	r3, [r7, #8]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	60bb      	str	r3, [r7, #8]
 8009652:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965e:	2b40      	cmp	r3, #64	; 0x40
 8009660:	f040 80b4 	bne.w	80097cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009670:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 8140 	beq.w	80098fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800967e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009682:	429a      	cmp	r2, r3
 8009684:	f080 8139 	bcs.w	80098fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800968e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800969a:	f000 8088 	beq.w	80097ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	330c      	adds	r3, #12
 80096a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80096b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	330c      	adds	r3, #12
 80096c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80096ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80096ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80096d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096da:	e841 2300 	strex	r3, r2, [r1]
 80096de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80096e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1d9      	bne.n	800969e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3314      	adds	r3, #20
 80096f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80096fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096fc:	f023 0301 	bic.w	r3, r3, #1
 8009700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3314      	adds	r3, #20
 800970a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800970e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009712:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009714:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009716:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e1      	bne.n	80096ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3314      	adds	r3, #20
 800972c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800973c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3314      	adds	r3, #20
 8009746:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800974a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800974c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009750:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e3      	bne.n	8009726 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2220      	movs	r2, #32
 8009762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	330c      	adds	r3, #12
 8009772:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009776:	e853 3f00 	ldrex	r3, [r3]
 800977a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800977c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800977e:	f023 0310 	bic.w	r3, r3, #16
 8009782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	330c      	adds	r3, #12
 800978c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009790:	65ba      	str	r2, [r7, #88]	; 0x58
 8009792:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009796:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800979e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e3      	bne.n	800976c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fa fb3d 	bl	8003e28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f8b6 	bl	8009930 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097c4:	e099      	b.n	80098fa <HAL_UART_IRQHandler+0x50e>
 80097c6:	bf00      	nop
 80097c8:	08009b5f 	.word	0x08009b5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 808b 	beq.w	80098fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80097e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 8086 	beq.w	80098fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	330c      	adds	r3, #12
 80097f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	330c      	adds	r3, #12
 8009812:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009816:	647a      	str	r2, [r7, #68]	; 0x44
 8009818:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800981c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800981e:	e841 2300 	strex	r3, r2, [r1]
 8009822:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e3      	bne.n	80097f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3314      	adds	r3, #20
 8009830:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	e853 3f00 	ldrex	r3, [r3]
 8009838:	623b      	str	r3, [r7, #32]
   return(result);
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	f023 0301 	bic.w	r3, r3, #1
 8009840:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3314      	adds	r3, #20
 800984a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800984e:	633a      	str	r2, [r7, #48]	; 0x30
 8009850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009856:	e841 2300 	strex	r3, r2, [r1]
 800985a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1e3      	bne.n	800982a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2220      	movs	r2, #32
 8009866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	330c      	adds	r3, #12
 8009876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f023 0310 	bic.w	r3, r3, #16
 8009886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	330c      	adds	r3, #12
 8009890:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009894:	61fa      	str	r2, [r7, #28]
 8009896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009898:	69b9      	ldr	r1, [r7, #24]
 800989a:	69fa      	ldr	r2, [r7, #28]
 800989c:	e841 2300 	strex	r3, r2, [r1]
 80098a0:	617b      	str	r3, [r7, #20]
   return(result);
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e3      	bne.n	8009870 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f83e 	bl	8009930 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098b4:	e023      	b.n	80098fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80098b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d009      	beq.n	80098d6 <HAL_UART_IRQHandler+0x4ea>
 80098c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f959 	bl	8009b86 <UART_Transmit_IT>
    return;
 80098d4:	e014      	b.n	8009900 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80098d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00e      	beq.n	8009900 <HAL_UART_IRQHandler+0x514>
 80098e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d008      	beq.n	8009900 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f999 	bl	8009c26 <UART_EndTransmit_IT>
    return;
 80098f4:	e004      	b.n	8009900 <HAL_UART_IRQHandler+0x514>
    return;
 80098f6:	bf00      	nop
 80098f8:	e002      	b.n	8009900 <HAL_UART_IRQHandler+0x514>
      return;
 80098fa:	bf00      	nop
 80098fc:	e000      	b.n	8009900 <HAL_UART_IRQHandler+0x514>
      return;
 80098fe:	bf00      	nop
  }
}
 8009900:	37e8      	adds	r7, #232	; 0xe8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop

08009908 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b090      	sub	sp, #64	; 0x40
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	603b      	str	r3, [r7, #0]
 8009954:	4613      	mov	r3, r2
 8009956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009958:	e050      	b.n	80099fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800995a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800995c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009960:	d04c      	beq.n	80099fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009964:	2b00      	cmp	r3, #0
 8009966:	d007      	beq.n	8009978 <UART_WaitOnFlagUntilTimeout+0x30>
 8009968:	f7fa f94c 	bl	8003c04 <HAL_GetTick>
 800996c:	4602      	mov	r2, r0
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009974:	429a      	cmp	r2, r3
 8009976:	d241      	bcs.n	80099fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	330c      	adds	r3, #12
 800997e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800998e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	330c      	adds	r3, #12
 8009996:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009998:	637a      	str	r2, [r7, #52]	; 0x34
 800999a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800999e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80099a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e5      	bne.n	8009978 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3314      	adds	r3, #20
 80099b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	e853 3f00 	ldrex	r3, [r3]
 80099ba:	613b      	str	r3, [r7, #16]
   return(result);
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f023 0301 	bic.w	r3, r3, #1
 80099c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3314      	adds	r3, #20
 80099ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099cc:	623a      	str	r2, [r7, #32]
 80099ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d0:	69f9      	ldr	r1, [r7, #28]
 80099d2:	6a3a      	ldr	r2, [r7, #32]
 80099d4:	e841 2300 	strex	r3, r2, [r1]
 80099d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1e5      	bne.n	80099ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2220      	movs	r2, #32
 80099e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2220      	movs	r2, #32
 80099ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e00f      	b.n	8009a1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	4013      	ands	r3, r2
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	bf0c      	ite	eq
 8009a0c:	2301      	moveq	r3, #1
 8009a0e:	2300      	movne	r3, #0
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	461a      	mov	r2, r3
 8009a14:	79fb      	ldrb	r3, [r7, #7]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d09f      	beq.n	800995a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3740      	adds	r7, #64	; 0x40
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	88fa      	ldrh	r2, [r7, #6]
 8009a3c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	88fa      	ldrh	r2, [r7, #6]
 8009a42:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2222      	movs	r2, #34	; 0x22
 8009a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a68:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	695a      	ldr	r2, [r3, #20]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f042 0201 	orr.w	r2, r2, #1
 8009a78:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f042 0220 	orr.w	r2, r2, #32
 8009a88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b095      	sub	sp, #84	; 0x54
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	330c      	adds	r3, #12
 8009aa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aaa:	e853 3f00 	ldrex	r3, [r3]
 8009aae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	330c      	adds	r3, #12
 8009abe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ac0:	643a      	str	r2, [r7, #64]	; 0x40
 8009ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ac8:	e841 2300 	strex	r3, r2, [r1]
 8009acc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1e5      	bne.n	8009aa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3314      	adds	r3, #20
 8009ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	e853 3f00 	ldrex	r3, [r3]
 8009ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	f023 0301 	bic.w	r3, r3, #1
 8009aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3314      	adds	r3, #20
 8009af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009afc:	e841 2300 	strex	r3, r2, [r1]
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e5      	bne.n	8009ad4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d119      	bne.n	8009b44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	330c      	adds	r3, #12
 8009b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	e853 3f00 	ldrex	r3, [r3]
 8009b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	f023 0310 	bic.w	r3, r3, #16
 8009b26:	647b      	str	r3, [r7, #68]	; 0x44
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	330c      	adds	r3, #12
 8009b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b30:	61ba      	str	r2, [r7, #24]
 8009b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b34:	6979      	ldr	r1, [r7, #20]
 8009b36:	69ba      	ldr	r2, [r7, #24]
 8009b38:	e841 2300 	strex	r3, r2, [r1]
 8009b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1e5      	bne.n	8009b10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2220      	movs	r2, #32
 8009b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009b52:	bf00      	nop
 8009b54:	3754      	adds	r7, #84	; 0x54
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b084      	sub	sp, #16
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f7ff fecf 	bl	800991c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b86:	b480      	push	{r7}
 8009b88:	b085      	sub	sp, #20
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b21      	cmp	r3, #33	; 0x21
 8009b98:	d13e      	bne.n	8009c18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba2:	d114      	bne.n	8009bce <UART_Transmit_IT+0x48>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d110      	bne.n	8009bce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	881b      	ldrh	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	1c9a      	adds	r2, r3, #2
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	621a      	str	r2, [r3, #32]
 8009bcc:	e008      	b.n	8009be0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	1c59      	adds	r1, r3, #1
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	6211      	str	r1, [r2, #32]
 8009bd8:	781a      	ldrb	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	3b01      	subs	r3, #1
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	4619      	mov	r1, r3
 8009bee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10f      	bne.n	8009c14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68da      	ldr	r2, [r3, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68da      	ldr	r2, [r3, #12]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	e000      	b.n	8009c1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c18:	2302      	movs	r3, #2
  }
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68da      	ldr	r2, [r3, #12]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2220      	movs	r2, #32
 8009c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff fe5e 	bl	8009908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b08c      	sub	sp, #48	; 0x30
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b22      	cmp	r3, #34	; 0x22
 8009c68:	f040 80ab 	bne.w	8009dc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c74:	d117      	bne.n	8009ca6 <UART_Receive_IT+0x50>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d113      	bne.n	8009ca6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9e:	1c9a      	adds	r2, r3, #2
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8009ca4:	e026      	b.n	8009cf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009cac:	2300      	movs	r3, #0
 8009cae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb8:	d007      	beq.n	8009cca <UART_Receive_IT+0x74>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <UART_Receive_IT+0x82>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d106      	bne.n	8009cd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd4:	701a      	strb	r2, [r3, #0]
 8009cd6:	e008      	b.n	8009cea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	4619      	mov	r1, r3
 8009d02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d15a      	bne.n	8009dbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68da      	ldr	r2, [r3, #12]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f022 0220 	bic.w	r2, r2, #32
 8009d16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695a      	ldr	r2, [r3, #20]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f022 0201 	bic.w	r2, r2, #1
 8009d36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d135      	bne.n	8009db4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	330c      	adds	r3, #12
 8009d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f023 0310 	bic.w	r3, r3, #16
 8009d64:	627b      	str	r3, [r7, #36]	; 0x24
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	330c      	adds	r3, #12
 8009d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6e:	623a      	str	r2, [r7, #32]
 8009d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d72:	69f9      	ldr	r1, [r7, #28]
 8009d74:	6a3a      	ldr	r2, [r7, #32]
 8009d76:	e841 2300 	strex	r3, r2, [r1]
 8009d7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1e5      	bne.n	8009d4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0310 	and.w	r3, r3, #16
 8009d8c:	2b10      	cmp	r3, #16
 8009d8e:	d10a      	bne.n	8009da6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d90:	2300      	movs	r3, #0
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7ff fdbf 	bl	8009930 <HAL_UARTEx_RxEventCallback>
 8009db2:	e002      	b.n	8009dba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7f7 fb13 	bl	80013e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	e002      	b.n	8009dc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e000      	b.n	8009dc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009dc2:	2302      	movs	r3, #2
  }
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3730      	adds	r7, #48	; 0x30
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	b09f      	sub	sp, #124	; 0x7c
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009de2:	68d9      	ldr	r1, [r3, #12]
 8009de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	ea40 0301 	orr.w	r3, r0, r1
 8009dec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009df0:	689a      	ldr	r2, [r3, #8]
 8009df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	431a      	orrs	r2, r3
 8009df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e00:	69db      	ldr	r3, [r3, #28]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009e10:	f021 010c 	bic.w	r1, r1, #12
 8009e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e1a:	430b      	orrs	r3, r1
 8009e1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e2a:	6999      	ldr	r1, [r3, #24]
 8009e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	ea40 0301 	orr.w	r3, r0, r1
 8009e34:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	4bc5      	ldr	r3, [pc, #788]	; (800a150 <UART_SetConfig+0x384>)
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d004      	beq.n	8009e4a <UART_SetConfig+0x7e>
 8009e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	4bc3      	ldr	r3, [pc, #780]	; (800a154 <UART_SetConfig+0x388>)
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d103      	bne.n	8009e52 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e4a:	f7fe fa21 	bl	8008290 <HAL_RCC_GetPCLK2Freq>
 8009e4e:	6778      	str	r0, [r7, #116]	; 0x74
 8009e50:	e002      	b.n	8009e58 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e52:	f7fe fa09 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 8009e56:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e5a:	69db      	ldr	r3, [r3, #28]
 8009e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e60:	f040 80b6 	bne.w	8009fd0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e66:	461c      	mov	r4, r3
 8009e68:	f04f 0500 	mov.w	r5, #0
 8009e6c:	4622      	mov	r2, r4
 8009e6e:	462b      	mov	r3, r5
 8009e70:	1891      	adds	r1, r2, r2
 8009e72:	6439      	str	r1, [r7, #64]	; 0x40
 8009e74:	415b      	adcs	r3, r3
 8009e76:	647b      	str	r3, [r7, #68]	; 0x44
 8009e78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e7c:	1912      	adds	r2, r2, r4
 8009e7e:	eb45 0303 	adc.w	r3, r5, r3
 8009e82:	f04f 0000 	mov.w	r0, #0
 8009e86:	f04f 0100 	mov.w	r1, #0
 8009e8a:	00d9      	lsls	r1, r3, #3
 8009e8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e90:	00d0      	lsls	r0, r2, #3
 8009e92:	4602      	mov	r2, r0
 8009e94:	460b      	mov	r3, r1
 8009e96:	1911      	adds	r1, r2, r4
 8009e98:	6639      	str	r1, [r7, #96]	; 0x60
 8009e9a:	416b      	adcs	r3, r5
 8009e9c:	667b      	str	r3, [r7, #100]	; 0x64
 8009e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f04f 0300 	mov.w	r3, #0
 8009ea8:	1891      	adds	r1, r2, r2
 8009eaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8009eac:	415b      	adcs	r3, r3
 8009eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009eb4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009eb8:	f7f6 f9f2 	bl	80002a0 <__aeabi_uldivmod>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4ba5      	ldr	r3, [pc, #660]	; (800a158 <UART_SetConfig+0x38c>)
 8009ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ec6:	095b      	lsrs	r3, r3, #5
 8009ec8:	011e      	lsls	r6, r3, #4
 8009eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ecc:	461c      	mov	r4, r3
 8009ece:	f04f 0500 	mov.w	r5, #0
 8009ed2:	4622      	mov	r2, r4
 8009ed4:	462b      	mov	r3, r5
 8009ed6:	1891      	adds	r1, r2, r2
 8009ed8:	6339      	str	r1, [r7, #48]	; 0x30
 8009eda:	415b      	adcs	r3, r3
 8009edc:	637b      	str	r3, [r7, #52]	; 0x34
 8009ede:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009ee2:	1912      	adds	r2, r2, r4
 8009ee4:	eb45 0303 	adc.w	r3, r5, r3
 8009ee8:	f04f 0000 	mov.w	r0, #0
 8009eec:	f04f 0100 	mov.w	r1, #0
 8009ef0:	00d9      	lsls	r1, r3, #3
 8009ef2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ef6:	00d0      	lsls	r0, r2, #3
 8009ef8:	4602      	mov	r2, r0
 8009efa:	460b      	mov	r3, r1
 8009efc:	1911      	adds	r1, r2, r4
 8009efe:	65b9      	str	r1, [r7, #88]	; 0x58
 8009f00:	416b      	adcs	r3, r5
 8009f02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	f04f 0300 	mov.w	r3, #0
 8009f0e:	1891      	adds	r1, r2, r2
 8009f10:	62b9      	str	r1, [r7, #40]	; 0x28
 8009f12:	415b      	adcs	r3, r3
 8009f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009f1a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009f1e:	f7f6 f9bf 	bl	80002a0 <__aeabi_uldivmod>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4b8c      	ldr	r3, [pc, #560]	; (800a158 <UART_SetConfig+0x38c>)
 8009f28:	fba3 1302 	umull	r1, r3, r3, r2
 8009f2c:	095b      	lsrs	r3, r3, #5
 8009f2e:	2164      	movs	r1, #100	; 0x64
 8009f30:	fb01 f303 	mul.w	r3, r1, r3
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	00db      	lsls	r3, r3, #3
 8009f38:	3332      	adds	r3, #50	; 0x32
 8009f3a:	4a87      	ldr	r2, [pc, #540]	; (800a158 <UART_SetConfig+0x38c>)
 8009f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f40:	095b      	lsrs	r3, r3, #5
 8009f42:	005b      	lsls	r3, r3, #1
 8009f44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f48:	441e      	add	r6, r3
 8009f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f04f 0100 	mov.w	r1, #0
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	1894      	adds	r4, r2, r2
 8009f58:	623c      	str	r4, [r7, #32]
 8009f5a:	415b      	adcs	r3, r3
 8009f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f62:	1812      	adds	r2, r2, r0
 8009f64:	eb41 0303 	adc.w	r3, r1, r3
 8009f68:	f04f 0400 	mov.w	r4, #0
 8009f6c:	f04f 0500 	mov.w	r5, #0
 8009f70:	00dd      	lsls	r5, r3, #3
 8009f72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f76:	00d4      	lsls	r4, r2, #3
 8009f78:	4622      	mov	r2, r4
 8009f7a:	462b      	mov	r3, r5
 8009f7c:	1814      	adds	r4, r2, r0
 8009f7e:	653c      	str	r4, [r7, #80]	; 0x50
 8009f80:	414b      	adcs	r3, r1
 8009f82:	657b      	str	r3, [r7, #84]	; 0x54
 8009f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	f04f 0300 	mov.w	r3, #0
 8009f8e:	1891      	adds	r1, r2, r2
 8009f90:	61b9      	str	r1, [r7, #24]
 8009f92:	415b      	adcs	r3, r3
 8009f94:	61fb      	str	r3, [r7, #28]
 8009f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f9a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009f9e:	f7f6 f97f 	bl	80002a0 <__aeabi_uldivmod>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4b6c      	ldr	r3, [pc, #432]	; (800a158 <UART_SetConfig+0x38c>)
 8009fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8009fac:	095b      	lsrs	r3, r3, #5
 8009fae:	2164      	movs	r1, #100	; 0x64
 8009fb0:	fb01 f303 	mul.w	r3, r1, r3
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	3332      	adds	r3, #50	; 0x32
 8009fba:	4a67      	ldr	r2, [pc, #412]	; (800a158 <UART_SetConfig+0x38c>)
 8009fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc0:	095b      	lsrs	r3, r3, #5
 8009fc2:	f003 0207 	and.w	r2, r3, #7
 8009fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4432      	add	r2, r6
 8009fcc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009fce:	e0b9      	b.n	800a144 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fd2:	461c      	mov	r4, r3
 8009fd4:	f04f 0500 	mov.w	r5, #0
 8009fd8:	4622      	mov	r2, r4
 8009fda:	462b      	mov	r3, r5
 8009fdc:	1891      	adds	r1, r2, r2
 8009fde:	6139      	str	r1, [r7, #16]
 8009fe0:	415b      	adcs	r3, r3
 8009fe2:	617b      	str	r3, [r7, #20]
 8009fe4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009fe8:	1912      	adds	r2, r2, r4
 8009fea:	eb45 0303 	adc.w	r3, r5, r3
 8009fee:	f04f 0000 	mov.w	r0, #0
 8009ff2:	f04f 0100 	mov.w	r1, #0
 8009ff6:	00d9      	lsls	r1, r3, #3
 8009ff8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ffc:	00d0      	lsls	r0, r2, #3
 8009ffe:	4602      	mov	r2, r0
 800a000:	460b      	mov	r3, r1
 800a002:	eb12 0804 	adds.w	r8, r2, r4
 800a006:	eb43 0905 	adc.w	r9, r3, r5
 800a00a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	4618      	mov	r0, r3
 800a010:	f04f 0100 	mov.w	r1, #0
 800a014:	f04f 0200 	mov.w	r2, #0
 800a018:	f04f 0300 	mov.w	r3, #0
 800a01c:	008b      	lsls	r3, r1, #2
 800a01e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a022:	0082      	lsls	r2, r0, #2
 800a024:	4640      	mov	r0, r8
 800a026:	4649      	mov	r1, r9
 800a028:	f7f6 f93a 	bl	80002a0 <__aeabi_uldivmod>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4b49      	ldr	r3, [pc, #292]	; (800a158 <UART_SetConfig+0x38c>)
 800a032:	fba3 2302 	umull	r2, r3, r3, r2
 800a036:	095b      	lsrs	r3, r3, #5
 800a038:	011e      	lsls	r6, r3, #4
 800a03a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a03c:	4618      	mov	r0, r3
 800a03e:	f04f 0100 	mov.w	r1, #0
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	1894      	adds	r4, r2, r2
 800a048:	60bc      	str	r4, [r7, #8]
 800a04a:	415b      	adcs	r3, r3
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a052:	1812      	adds	r2, r2, r0
 800a054:	eb41 0303 	adc.w	r3, r1, r3
 800a058:	f04f 0400 	mov.w	r4, #0
 800a05c:	f04f 0500 	mov.w	r5, #0
 800a060:	00dd      	lsls	r5, r3, #3
 800a062:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a066:	00d4      	lsls	r4, r2, #3
 800a068:	4622      	mov	r2, r4
 800a06a:	462b      	mov	r3, r5
 800a06c:	1814      	adds	r4, r2, r0
 800a06e:	64bc      	str	r4, [r7, #72]	; 0x48
 800a070:	414b      	adcs	r3, r1
 800a072:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	4618      	mov	r0, r3
 800a07a:	f04f 0100 	mov.w	r1, #0
 800a07e:	f04f 0200 	mov.w	r2, #0
 800a082:	f04f 0300 	mov.w	r3, #0
 800a086:	008b      	lsls	r3, r1, #2
 800a088:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a08c:	0082      	lsls	r2, r0, #2
 800a08e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a092:	f7f6 f905 	bl	80002a0 <__aeabi_uldivmod>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	4b2f      	ldr	r3, [pc, #188]	; (800a158 <UART_SetConfig+0x38c>)
 800a09c:	fba3 1302 	umull	r1, r3, r3, r2
 800a0a0:	095b      	lsrs	r3, r3, #5
 800a0a2:	2164      	movs	r1, #100	; 0x64
 800a0a4:	fb01 f303 	mul.w	r3, r1, r3
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	011b      	lsls	r3, r3, #4
 800a0ac:	3332      	adds	r3, #50	; 0x32
 800a0ae:	4a2a      	ldr	r2, [pc, #168]	; (800a158 <UART_SetConfig+0x38c>)
 800a0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b4:	095b      	lsrs	r3, r3, #5
 800a0b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0ba:	441e      	add	r6, r3
 800a0bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f04f 0100 	mov.w	r1, #0
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	1894      	adds	r4, r2, r2
 800a0ca:	603c      	str	r4, [r7, #0]
 800a0cc:	415b      	adcs	r3, r3
 800a0ce:	607b      	str	r3, [r7, #4]
 800a0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0d4:	1812      	adds	r2, r2, r0
 800a0d6:	eb41 0303 	adc.w	r3, r1, r3
 800a0da:	f04f 0400 	mov.w	r4, #0
 800a0de:	f04f 0500 	mov.w	r5, #0
 800a0e2:	00dd      	lsls	r5, r3, #3
 800a0e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a0e8:	00d4      	lsls	r4, r2, #3
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	462b      	mov	r3, r5
 800a0ee:	eb12 0a00 	adds.w	sl, r2, r0
 800a0f2:	eb43 0b01 	adc.w	fp, r3, r1
 800a0f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f04f 0100 	mov.w	r1, #0
 800a100:	f04f 0200 	mov.w	r2, #0
 800a104:	f04f 0300 	mov.w	r3, #0
 800a108:	008b      	lsls	r3, r1, #2
 800a10a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a10e:	0082      	lsls	r2, r0, #2
 800a110:	4650      	mov	r0, sl
 800a112:	4659      	mov	r1, fp
 800a114:	f7f6 f8c4 	bl	80002a0 <__aeabi_uldivmod>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4b0e      	ldr	r3, [pc, #56]	; (800a158 <UART_SetConfig+0x38c>)
 800a11e:	fba3 1302 	umull	r1, r3, r3, r2
 800a122:	095b      	lsrs	r3, r3, #5
 800a124:	2164      	movs	r1, #100	; 0x64
 800a126:	fb01 f303 	mul.w	r3, r1, r3
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	011b      	lsls	r3, r3, #4
 800a12e:	3332      	adds	r3, #50	; 0x32
 800a130:	4a09      	ldr	r2, [pc, #36]	; (800a158 <UART_SetConfig+0x38c>)
 800a132:	fba2 2303 	umull	r2, r3, r2, r3
 800a136:	095b      	lsrs	r3, r3, #5
 800a138:	f003 020f 	and.w	r2, r3, #15
 800a13c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4432      	add	r2, r6
 800a142:	609a      	str	r2, [r3, #8]
}
 800a144:	bf00      	nop
 800a146:	377c      	adds	r7, #124	; 0x7c
 800a148:	46bd      	mov	sp, r7
 800a14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14e:	bf00      	nop
 800a150:	40011000 	.word	0x40011000
 800a154:	40011400 	.word	0x40011400
 800a158:	51eb851f 	.word	0x51eb851f

0800a15c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a15c:	b084      	sub	sp, #16
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	f107 001c 	add.w	r0, r7, #28
 800a16a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	2b01      	cmp	r3, #1
 800a172:	d122      	bne.n	800a1ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a178:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d105      	bne.n	800a1ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f9a0 	bl	800a4f4 <USB_CoreReset>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	73fb      	strb	r3, [r7, #15]
 800a1b8:	e01a      	b.n	800a1f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f994 	bl	800a4f4 <USB_CoreReset>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d106      	bne.n	800a1e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	639a      	str	r2, [r3, #56]	; 0x38
 800a1e2:	e005      	b.n	800a1f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d10b      	bne.n	800a20e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f043 0206 	orr.w	r2, r3, #6
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f043 0220 	orr.w	r2, r3, #32
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a21a:	b004      	add	sp, #16
 800a21c:	4770      	bx	lr

0800a21e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a21e:	b480      	push	{r7}
 800a220:	b083      	sub	sp, #12
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	f043 0201 	orr.w	r2, r3, #1
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f023 0201 	bic.w	r2, r3, #1
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b084      	sub	sp, #16
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	460b      	mov	r3, r1
 800a26c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a27e:	78fb      	ldrb	r3, [r7, #3]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d115      	bne.n	800a2b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a290:	2001      	movs	r0, #1
 800a292:	f7f9 fcc3 	bl	8003c1c <HAL_Delay>
      ms++;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3301      	adds	r3, #1
 800a29a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f91a 	bl	800a4d6 <USB_GetMode>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d01e      	beq.n	800a2e6 <USB_SetCurrentMode+0x84>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b31      	cmp	r3, #49	; 0x31
 800a2ac:	d9f0      	bls.n	800a290 <USB_SetCurrentMode+0x2e>
 800a2ae:	e01a      	b.n	800a2e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d115      	bne.n	800a2e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a2c2:	2001      	movs	r0, #1
 800a2c4:	f7f9 fcaa 	bl	8003c1c <HAL_Delay>
      ms++;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f901 	bl	800a4d6 <USB_GetMode>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d005      	beq.n	800a2e6 <USB_SetCurrentMode+0x84>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2b31      	cmp	r3, #49	; 0x31
 800a2de:	d9f0      	bls.n	800a2c2 <USB_SetCurrentMode+0x60>
 800a2e0:	e001      	b.n	800a2e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e005      	b.n	800a2f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b32      	cmp	r3, #50	; 0x32
 800a2ea:	d101      	bne.n	800a2f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e000      	b.n	800a2f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
	...

0800a2fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a306:	2300      	movs	r3, #0
 800a308:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	019b      	lsls	r3, r3, #6
 800a30e:	f043 0220 	orr.w	r2, r3, #32
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3301      	adds	r3, #1
 800a31a:	60fb      	str	r3, [r7, #12]
 800a31c:	4a08      	ldr	r2, [pc, #32]	; (800a340 <USB_FlushTxFifo+0x44>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d901      	bls.n	800a326 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e006      	b.n	800a334 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	f003 0320 	and.w	r3, r3, #32
 800a32e:	2b20      	cmp	r3, #32
 800a330:	d0f1      	beq.n	800a316 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	00030d40 	.word	0x00030d40

0800a344 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a34c:	2300      	movs	r3, #0
 800a34e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2210      	movs	r2, #16
 800a354:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	3301      	adds	r3, #1
 800a35a:	60fb      	str	r3, [r7, #12]
 800a35c:	4a08      	ldr	r2, [pc, #32]	; (800a380 <USB_FlushRxFifo+0x3c>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d901      	bls.n	800a366 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e006      	b.n	800a374 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	f003 0310 	and.w	r3, r3, #16
 800a36e:	2b10      	cmp	r3, #16
 800a370:	d0f1      	beq.n	800a356 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	00030d40 	.word	0x00030d40

0800a384 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a384:	b480      	push	{r7}
 800a386:	b089      	sub	sp, #36	; 0x24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	4611      	mov	r1, r2
 800a390:	461a      	mov	r2, r3
 800a392:	460b      	mov	r3, r1
 800a394:	71fb      	strb	r3, [r7, #7]
 800a396:	4613      	mov	r3, r2
 800a398:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a3a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d123      	bne.n	800a3f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a3aa:	88bb      	ldrh	r3, [r7, #4]
 800a3ac:	3303      	adds	r3, #3
 800a3ae:	089b      	lsrs	r3, r3, #2
 800a3b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	61bb      	str	r3, [r7, #24]
 800a3b6:	e018      	b.n	800a3ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	031a      	lsls	r2, r3, #12
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	4413      	add	r3, r2
 800a3c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	61bb      	str	r3, [r7, #24]
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d3e2      	bcc.n	800a3b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3724      	adds	r7, #36	; 0x24
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a400:	b480      	push	{r7}
 800a402:	b08b      	sub	sp, #44	; 0x2c
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	4613      	mov	r3, r2
 800a40c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a416:	88fb      	ldrh	r3, [r7, #6]
 800a418:	089b      	lsrs	r3, r3, #2
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a41e:	88fb      	ldrh	r3, [r7, #6]
 800a420:	f003 0303 	and.w	r3, r3, #3
 800a424:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a426:	2300      	movs	r3, #0
 800a428:	623b      	str	r3, [r7, #32]
 800a42a:	e014      	b.n	800a456 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	601a      	str	r2, [r3, #0]
    pDest++;
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	3301      	adds	r3, #1
 800a43c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	3301      	adds	r3, #1
 800a442:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	3301      	adds	r3, #1
 800a448:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	3301      	adds	r3, #1
 800a44e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	3301      	adds	r3, #1
 800a454:	623b      	str	r3, [r7, #32]
 800a456:	6a3a      	ldr	r2, [r7, #32]
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d3e6      	bcc.n	800a42c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a45e:	8bfb      	ldrh	r3, [r7, #30]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d01e      	beq.n	800a4a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a464:	2300      	movs	r3, #0
 800a466:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a46e:	461a      	mov	r2, r3
 800a470:	f107 0310 	add.w	r3, r7, #16
 800a474:	6812      	ldr	r2, [r2, #0]
 800a476:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	6a3b      	ldr	r3, [r7, #32]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	00db      	lsls	r3, r3, #3
 800a480:	fa22 f303 	lsr.w	r3, r2, r3
 800a484:	b2da      	uxtb	r2, r3
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	701a      	strb	r2, [r3, #0]
      i++;
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	3301      	adds	r3, #1
 800a48e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	3301      	adds	r3, #1
 800a494:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a496:	8bfb      	ldrh	r3, [r7, #30]
 800a498:	3b01      	subs	r3, #1
 800a49a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a49c:	8bfb      	ldrh	r3, [r7, #30]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1ea      	bne.n	800a478 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	372c      	adds	r7, #44	; 0x2c
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3714      	adds	r7, #20
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	695b      	ldr	r3, [r3, #20]
 800a4e2:	f003 0301 	and.w	r3, r3, #1
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
	...

0800a4f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	3301      	adds	r3, #1
 800a504:	60fb      	str	r3, [r7, #12]
 800a506:	4a13      	ldr	r2, [pc, #76]	; (800a554 <USB_CoreReset+0x60>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d901      	bls.n	800a510 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e01a      	b.n	800a546 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	2b00      	cmp	r3, #0
 800a516:	daf3      	bge.n	800a500 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	f043 0201 	orr.w	r2, r3, #1
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	3301      	adds	r3, #1
 800a52c:	60fb      	str	r3, [r7, #12]
 800a52e:	4a09      	ldr	r2, [pc, #36]	; (800a554 <USB_CoreReset+0x60>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d901      	bls.n	800a538 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	e006      	b.n	800a546 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	2b01      	cmp	r3, #1
 800a542:	d0f1      	beq.n	800a528 <USB_CoreReset+0x34>

  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3714      	adds	r7, #20
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	00030d40 	.word	0x00030d40

0800a558 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a558:	b084      	sub	sp, #16
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	f107 001c 	add.w	r0, r7, #28
 800a566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a574:	461a      	mov	r2, r3
 800a576:	2300      	movs	r3, #0
 800a578:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a596:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d018      	beq.n	800a5dc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d10a      	bne.n	800a5c6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5be:	f043 0304 	orr.w	r3, r3, #4
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	e014      	b.n	800a5f0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5d4:	f023 0304 	bic.w	r3, r3, #4
 800a5d8:	6013      	str	r3, [r2, #0]
 800a5da:	e009      	b.n	800a5f0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5ea:	f023 0304 	bic.w	r3, r3, #4
 800a5ee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a5f0:	2110      	movs	r1, #16
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7ff fe82 	bl	800a2fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff fea3 	bl	800a344 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a5fe:	2300      	movs	r3, #0
 800a600:	60fb      	str	r3, [r7, #12]
 800a602:	e015      	b.n	800a630 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a610:	461a      	mov	r2, r3
 800a612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a616:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a624:	461a      	mov	r2, r3
 800a626:	2300      	movs	r3, #0
 800a628:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3301      	adds	r3, #1
 800a62e:	60fb      	str	r3, [r7, #12]
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	429a      	cmp	r2, r3
 800a636:	d3e5      	bcc.n	800a604 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a644:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a64a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00b      	beq.n	800a66a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a658:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a13      	ldr	r2, [pc, #76]	; (800a6ac <USB_HostInit+0x154>)
 800a65e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a13      	ldr	r2, [pc, #76]	; (800a6b0 <USB_HostInit+0x158>)
 800a664:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a668:	e009      	b.n	800a67e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2280      	movs	r2, #128	; 0x80
 800a66e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4a10      	ldr	r2, [pc, #64]	; (800a6b4 <USB_HostInit+0x15c>)
 800a674:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a0f      	ldr	r2, [pc, #60]	; (800a6b8 <USB_HostInit+0x160>)
 800a67a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a680:	2b00      	cmp	r3, #0
 800a682:	d105      	bne.n	800a690 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	f043 0210 	orr.w	r2, r3, #16
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	699a      	ldr	r2, [r3, #24]
 800a694:	4b09      	ldr	r3, [pc, #36]	; (800a6bc <USB_HostInit+0x164>)
 800a696:	4313      	orrs	r3, r2
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6a8:	b004      	add	sp, #16
 800a6aa:	4770      	bx	lr
 800a6ac:	01000200 	.word	0x01000200
 800a6b0:	00e00300 	.word	0x00e00300
 800a6b4:	00600080 	.word	0x00600080
 800a6b8:	004000e0 	.word	0x004000e0
 800a6bc:	a3200008 	.word	0xa3200008

0800a6c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6de:	f023 0303 	bic.w	r3, r3, #3
 800a6e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	78fb      	ldrb	r3, [r7, #3]
 800a6ee:	f003 0303 	and.w	r3, r3, #3
 800a6f2:	68f9      	ldr	r1, [r7, #12]
 800a6f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d107      	bne.n	800a712 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a708:	461a      	mov	r2, r3
 800a70a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a70e:	6053      	str	r3, [r2, #4]
 800a710:	e009      	b.n	800a726 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a712:	78fb      	ldrb	r3, [r7, #3]
 800a714:	2b02      	cmp	r3, #2
 800a716:	d106      	bne.n	800a726 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a71e:	461a      	mov	r2, r3
 800a720:	f241 7370 	movw	r3, #6000	; 0x1770
 800a724:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a740:	2300      	movs	r3, #0
 800a742:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a754:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a75e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a762:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a764:	2064      	movs	r0, #100	; 0x64
 800a766:	f7f9 fa59 	bl	8003c1c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a776:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a778:	200a      	movs	r0, #10
 800a77a:	f7f9 fa4f 	bl	8003c1c <HAL_Delay>

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a798:	2300      	movs	r3, #0
 800a79a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a7ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d109      	bne.n	800a7cc <USB_DriveVbus+0x44>
 800a7b8:	78fb      	ldrb	r3, [r7, #3]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d106      	bne.n	800a7cc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a7c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a7ca:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a7d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7d6:	d109      	bne.n	800a7ec <USB_DriveVbus+0x64>
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d106      	bne.n	800a7ec <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a7e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7ea:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	0c5b      	lsrs	r3, r3, #17
 800a818:	f003 0303 	and.w	r3, r3, #3
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3714      	adds	r7, #20
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	b29b      	uxth	r3, r3
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
	...

0800a84c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b088      	sub	sp, #32
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	4608      	mov	r0, r1
 800a856:	4611      	mov	r1, r2
 800a858:	461a      	mov	r2, r3
 800a85a:	4603      	mov	r3, r0
 800a85c:	70fb      	strb	r3, [r7, #3]
 800a85e:	460b      	mov	r3, r1
 800a860:	70bb      	strb	r3, [r7, #2]
 800a862:	4613      	mov	r3, r2
 800a864:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	015a      	lsls	r2, r3, #5
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	4413      	add	r3, r2
 800a876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a87a:	461a      	mov	r2, r3
 800a87c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a880:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a882:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a886:	2b03      	cmp	r3, #3
 800a888:	d87e      	bhi.n	800a988 <USB_HC_Init+0x13c>
 800a88a:	a201      	add	r2, pc, #4	; (adr r2, 800a890 <USB_HC_Init+0x44>)
 800a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a890:	0800a8a1 	.word	0x0800a8a1
 800a894:	0800a94b 	.word	0x0800a94b
 800a898:	0800a8a1 	.word	0x0800a8a1
 800a89c:	0800a90d 	.word	0x0800a90d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a8a0:	78fb      	ldrb	r3, [r7, #3]
 800a8a2:	015a      	lsls	r2, r3, #5
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	f240 439d 	movw	r3, #1181	; 0x49d
 800a8b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a8b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	da10      	bge.n	800a8de <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a8bc:	78fb      	ldrb	r3, [r7, #3]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	78fa      	ldrb	r2, [r7, #3]
 800a8cc:	0151      	lsls	r1, r2, #5
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	440a      	add	r2, r1
 800a8d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8da:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a8dc:	e057      	b.n	800a98e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d051      	beq.n	800a98e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a8ea:	78fb      	ldrb	r3, [r7, #3]
 800a8ec:	015a      	lsls	r2, r3, #5
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	78fa      	ldrb	r2, [r7, #3]
 800a8fa:	0151      	lsls	r1, r2, #5
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	440a      	add	r2, r1
 800a900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a904:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a908:	60d3      	str	r3, [r2, #12]
      break;
 800a90a:	e040      	b.n	800a98e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a90c:	78fb      	ldrb	r3, [r7, #3]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	4413      	add	r3, r2
 800a914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a918:	461a      	mov	r2, r3
 800a91a:	f240 639d 	movw	r3, #1693	; 0x69d
 800a91e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a920:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a924:	2b00      	cmp	r3, #0
 800a926:	da34      	bge.n	800a992 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	78fa      	ldrb	r2, [r7, #3]
 800a938:	0151      	lsls	r1, r2, #5
 800a93a:	693a      	ldr	r2, [r7, #16]
 800a93c:	440a      	add	r2, r1
 800a93e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a946:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a948:	e023      	b.n	800a992 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a94a:	78fb      	ldrb	r3, [r7, #3]
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	4413      	add	r3, r2
 800a952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a956:	461a      	mov	r2, r3
 800a958:	f240 2325 	movw	r3, #549	; 0x225
 800a95c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a95e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a962:	2b00      	cmp	r3, #0
 800a964:	da17      	bge.n	800a996 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a966:	78fb      	ldrb	r3, [r7, #3]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	78fa      	ldrb	r2, [r7, #3]
 800a976:	0151      	lsls	r1, r2, #5
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	440a      	add	r2, r1
 800a97c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a980:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a984:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a986:	e006      	b.n	800a996 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	77fb      	strb	r3, [r7, #31]
      break;
 800a98c:	e004      	b.n	800a998 <USB_HC_Init+0x14c>
      break;
 800a98e:	bf00      	nop
 800a990:	e002      	b.n	800a998 <USB_HC_Init+0x14c>
      break;
 800a992:	bf00      	nop
 800a994:	e000      	b.n	800a998 <USB_HC_Init+0x14c>
      break;
 800a996:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a99e:	699a      	ldr	r2, [r3, #24]
 800a9a0:	78fb      	ldrb	r3, [r7, #3]
 800a9a2:	f003 030f 	and.w	r3, r3, #15
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ac:	6939      	ldr	r1, [r7, #16]
 800a9ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a9c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	da03      	bge.n	800a9d2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a9ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9ce:	61bb      	str	r3, [r7, #24]
 800a9d0:	e001      	b.n	800a9d6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff ff0f 	bl	800a7fa <USB_GetHostSpeed>
 800a9dc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a9de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d106      	bne.n	800a9f4 <USB_HC_Init+0x1a8>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d003      	beq.n	800a9f4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a9ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a9f0:	617b      	str	r3, [r7, #20]
 800a9f2:	e001      	b.n	800a9f8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9f8:	787b      	ldrb	r3, [r7, #1]
 800a9fa:	059b      	lsls	r3, r3, #22
 800a9fc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800aa00:	78bb      	ldrb	r3, [r7, #2]
 800aa02:	02db      	lsls	r3, r3, #11
 800aa04:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aa08:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800aa0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa0e:	049b      	lsls	r3, r3, #18
 800aa10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800aa14:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800aa16:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800aa18:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800aa1c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aa22:	78fb      	ldrb	r3, [r7, #3]
 800aa24:	0159      	lsls	r1, r3, #5
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	440b      	add	r3, r1
 800aa2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa2e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aa34:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800aa36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d10f      	bne.n	800aa5e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	78fa      	ldrb	r2, [r7, #3]
 800aa4e:	0151      	lsls	r1, r2, #5
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	440a      	add	r2, r1
 800aa54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa5c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800aa5e:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3720      	adds	r7, #32
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08c      	sub	sp, #48	; 0x30
 800aa6c:	af02      	add	r7, sp, #8
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	4613      	mov	r3, r2
 800aa74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	785b      	ldrb	r3, [r3, #1]
 800aa7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800aa80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa84:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d02d      	beq.n	800aaee <USB_HC_StartXfer+0x86>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	791b      	ldrb	r3, [r3, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d129      	bne.n	800aaee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800aa9a:	79fb      	ldrb	r3, [r7, #7]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d117      	bne.n	800aad0 <USB_HC_StartXfer+0x68>
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	79db      	ldrb	r3, [r3, #7]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d003      	beq.n	800aab0 <USB_HC_StartXfer+0x48>
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	79db      	ldrb	r3, [r3, #7]
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d10f      	bne.n	800aad0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	69fa      	ldr	r2, [r7, #28]
 800aac0:	0151      	lsls	r1, r2, #5
 800aac2:	6a3a      	ldr	r2, [r7, #32]
 800aac4:	440a      	add	r2, r1
 800aac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aaca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aace:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800aad0:	79fb      	ldrb	r3, [r7, #7]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10b      	bne.n	800aaee <USB_HC_StartXfer+0x86>
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	795b      	ldrb	r3, [r3, #5]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d107      	bne.n	800aaee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	785b      	ldrb	r3, [r3, #1]
 800aae2:	4619      	mov	r1, r3
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f000 fa2f 	bl	800af48 <USB_DoPing>
      return HAL_OK;
 800aaea:	2300      	movs	r3, #0
 800aaec:	e0f8      	b.n	800ace0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d018      	beq.n	800ab28 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	695b      	ldr	r3, [r3, #20]
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	8912      	ldrh	r2, [r2, #8]
 800aafe:	4413      	add	r3, r2
 800ab00:	3b01      	subs	r3, #1
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	8912      	ldrh	r2, [r2, #8]
 800ab06:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab0a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ab0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ab0e:	8b7b      	ldrh	r3, [r7, #26]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d90b      	bls.n	800ab2c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800ab14:	8b7b      	ldrh	r3, [r7, #26]
 800ab16:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ab18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	8912      	ldrh	r2, [r2, #8]
 800ab1e:	fb02 f203 	mul.w	r2, r2, r3
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	611a      	str	r2, [r3, #16]
 800ab26:	e001      	b.n	800ab2c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	78db      	ldrb	r3, [r3, #3]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d007      	beq.n	800ab44 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ab34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	8912      	ldrh	r2, [r2, #8]
 800ab3a:	fb02 f203 	mul.w	r2, r2, r3
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	611a      	str	r2, [r3, #16]
 800ab42:	e003      	b.n	800ab4c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	695a      	ldr	r2, [r3, #20]
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ab54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab56:	04d9      	lsls	r1, r3, #19
 800ab58:	4b63      	ldr	r3, [pc, #396]	; (800ace8 <USB_HC_StartXfer+0x280>)
 800ab5a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab5c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	7a9b      	ldrb	r3, [r3, #10]
 800ab62:	075b      	lsls	r3, r3, #29
 800ab64:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab68:	69f9      	ldr	r1, [r7, #28]
 800ab6a:	0148      	lsls	r0, r1, #5
 800ab6c:	6a39      	ldr	r1, [r7, #32]
 800ab6e:	4401      	add	r1, r0
 800ab70:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ab74:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab76:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d009      	beq.n	800ab92 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	68d9      	ldr	r1, [r3, #12]
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	015a      	lsls	r2, r3, #5
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab8e:	460a      	mov	r2, r1
 800ab90:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	bf0c      	ite	eq
 800aba2:	2301      	moveq	r3, #1
 800aba4:	2300      	movne	r3, #0
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	015a      	lsls	r2, r3, #5
 800abae:	6a3b      	ldr	r3, [r7, #32]
 800abb0:	4413      	add	r3, r2
 800abb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	69fa      	ldr	r2, [r7, #28]
 800abba:	0151      	lsls	r1, r2, #5
 800abbc:	6a3a      	ldr	r2, [r7, #32]
 800abbe:	440a      	add	r2, r1
 800abc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800abc8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	015a      	lsls	r2, r3, #5
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	4413      	add	r3, r2
 800abd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	7e7b      	ldrb	r3, [r7, #25]
 800abda:	075b      	lsls	r3, r3, #29
 800abdc:	69f9      	ldr	r1, [r7, #28]
 800abde:	0148      	lsls	r0, r1, #5
 800abe0:	6a39      	ldr	r1, [r7, #32]
 800abe2:	4401      	add	r1, r0
 800abe4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800abe8:	4313      	orrs	r3, r2
 800abea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	015a      	lsls	r2, r3, #5
 800abf0:	6a3b      	ldr	r3, [r7, #32]
 800abf2:	4413      	add	r3, r2
 800abf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac02:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	78db      	ldrb	r3, [r3, #3]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d004      	beq.n	800ac16 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac12:	613b      	str	r3, [r7, #16]
 800ac14:	e003      	b.n	800ac1e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac1c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac24:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac32:	461a      	mov	r2, r3
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e04e      	b.n	800ace0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	78db      	ldrb	r3, [r3, #3]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d149      	bne.n	800acde <USB_HC_StartXfer+0x276>
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d045      	beq.n	800acde <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	79db      	ldrb	r3, [r3, #7]
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d830      	bhi.n	800acbc <USB_HC_StartXfer+0x254>
 800ac5a:	a201      	add	r2, pc, #4	; (adr r2, 800ac60 <USB_HC_StartXfer+0x1f8>)
 800ac5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac60:	0800ac71 	.word	0x0800ac71
 800ac64:	0800ac95 	.word	0x0800ac95
 800ac68:	0800ac71 	.word	0x0800ac71
 800ac6c:	0800ac95 	.word	0x0800ac95
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	695b      	ldr	r3, [r3, #20]
 800ac74:	3303      	adds	r3, #3
 800ac76:	089b      	lsrs	r3, r3, #2
 800ac78:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ac7a:	8afa      	ldrh	r2, [r7, #22]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d91c      	bls.n	800acc0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	f043 0220 	orr.w	r2, r3, #32
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac92:	e015      	b.n	800acc0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	695b      	ldr	r3, [r3, #20]
 800ac98:	3303      	adds	r3, #3
 800ac9a:	089b      	lsrs	r3, r3, #2
 800ac9c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ac9e:	8afa      	ldrh	r2, [r7, #22]
 800aca0:	6a3b      	ldr	r3, [r7, #32]
 800aca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	429a      	cmp	r2, r3
 800acac:	d90a      	bls.n	800acc4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	699b      	ldr	r3, [r3, #24]
 800acb2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	619a      	str	r2, [r3, #24]
        }
        break;
 800acba:	e003      	b.n	800acc4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800acbc:	bf00      	nop
 800acbe:	e002      	b.n	800acc6 <USB_HC_StartXfer+0x25e>
        break;
 800acc0:	bf00      	nop
 800acc2:	e000      	b.n	800acc6 <USB_HC_StartXfer+0x25e>
        break;
 800acc4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	68d9      	ldr	r1, [r3, #12]
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	785a      	ldrb	r2, [r3, #1]
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	695b      	ldr	r3, [r3, #20]
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	2000      	movs	r0, #0
 800acd6:	9000      	str	r0, [sp, #0]
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f7ff fb53 	bl	800a384 <USB_WritePacket>
  }

  return HAL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3728      	adds	r7, #40	; 0x28
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	1ff80000 	.word	0x1ff80000

0800acec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	b29b      	uxth	r3, r3
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b089      	sub	sp, #36	; 0x24
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	460b      	mov	r3, r1
 800ad18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800ad1e:	78fb      	ldrb	r3, [r7, #3]
 800ad20:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800ad22:	2300      	movs	r3, #0
 800ad24:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	015a      	lsls	r2, r3, #5
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	0c9b      	lsrs	r3, r3, #18
 800ad36:	f003 0303 	and.w	r3, r3, #3
 800ad3a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	015a      	lsls	r2, r3, #5
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	4413      	add	r3, r2
 800ad44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	0fdb      	lsrs	r3, r3, #31
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f003 0320 	and.w	r3, r3, #32
 800ad5a:	2b20      	cmp	r3, #32
 800ad5c:	d104      	bne.n	800ad68 <USB_HC_Halt+0x5a>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	e0e8      	b.n	800af3a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <USB_HC_Halt+0x66>
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	d173      	bne.n	800ae5c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	0151      	lsls	r1, r2, #5
 800ad86:	69ba      	ldr	r2, [r7, #24]
 800ad88:	440a      	add	r2, r1
 800ad8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad92:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	f003 0320 	and.w	r3, r3, #32
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f040 80cb 	bne.w	800af38 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d143      	bne.n	800ae36 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	0151      	lsls	r1, r2, #5
 800adc0:	69ba      	ldr	r2, [r7, #24]
 800adc2:	440a      	add	r2, r1
 800adc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adcc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	4413      	add	r3, r2
 800add6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	697a      	ldr	r2, [r7, #20]
 800adde:	0151      	lsls	r1, r2, #5
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	440a      	add	r2, r1
 800ade4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ade8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	697a      	ldr	r2, [r7, #20]
 800adfe:	0151      	lsls	r1, r2, #5
 800ae00:	69ba      	ldr	r2, [r7, #24]
 800ae02:	440a      	add	r2, r1
 800ae04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae0c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	3301      	adds	r3, #1
 800ae12:	61fb      	str	r3, [r7, #28]
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae1a:	d81d      	bhi.n	800ae58 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae32:	d0ec      	beq.n	800ae0e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae34:	e080      	b.n	800af38 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	015a      	lsls	r2, r3, #5
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	0151      	lsls	r1, r2, #5
 800ae48:	69ba      	ldr	r2, [r7, #24]
 800ae4a:	440a      	add	r2, r1
 800ae4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae54:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae56:	e06f      	b.n	800af38 <USB_HC_Halt+0x22a>
            break;
 800ae58:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae5a:	e06d      	b.n	800af38 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	0151      	lsls	r1, r2, #5
 800ae6e:	69ba      	ldr	r2, [r7, #24]
 800ae70:	440a      	add	r2, r1
 800ae72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae7a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d143      	bne.n	800af14 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	0151      	lsls	r1, r2, #5
 800ae9e:	69ba      	ldr	r2, [r7, #24]
 800aea0:	440a      	add	r2, r1
 800aea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aeaa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	0151      	lsls	r1, r2, #5
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	440a      	add	r2, r1
 800aec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aec6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aeca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	697a      	ldr	r2, [r7, #20]
 800aedc:	0151      	lsls	r1, r2, #5
 800aede:	69ba      	ldr	r2, [r7, #24]
 800aee0:	440a      	add	r2, r1
 800aee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aee6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aeea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	3301      	adds	r3, #1
 800aef0:	61fb      	str	r3, [r7, #28]
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aef8:	d81d      	bhi.n	800af36 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	015a      	lsls	r2, r3, #5
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	4413      	add	r3, r2
 800af02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af10:	d0ec      	beq.n	800aeec <USB_HC_Halt+0x1de>
 800af12:	e011      	b.n	800af38 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	0151      	lsls	r1, r2, #5
 800af26:	69ba      	ldr	r2, [r7, #24]
 800af28:	440a      	add	r2, r1
 800af2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af32:	6013      	str	r3, [r2, #0]
 800af34:	e000      	b.n	800af38 <USB_HC_Halt+0x22a>
          break;
 800af36:	bf00      	nop
    }
  }

  return HAL_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3724      	adds	r7, #36	; 0x24
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
	...

0800af48 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800af58:	78fb      	ldrb	r3, [r7, #3]
 800af5a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800af5c:	2301      	movs	r3, #1
 800af5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	04da      	lsls	r2, r3, #19
 800af64:	4b15      	ldr	r3, [pc, #84]	; (800afbc <USB_DoPing+0x74>)
 800af66:	4013      	ands	r3, r2
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	0151      	lsls	r1, r2, #5
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	440a      	add	r2, r1
 800af70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af78:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	015a      	lsls	r2, r3, #5
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	4413      	add	r3, r2
 800af82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af90:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af98:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	015a      	lsls	r2, r3, #5
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afa6:	461a      	mov	r2, r3
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	371c      	adds	r7, #28
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	1ff80000 	.word	0x1ff80000

0800afc0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800afcc:	2300      	movs	r3, #0
 800afce:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f7ff f935 	bl	800a240 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800afd6:	2110      	movs	r1, #16
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7ff f98f 	bl	800a2fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f7ff f9b0 	bl	800a344 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800afe4:	2300      	movs	r3, #0
 800afe6:	613b      	str	r3, [r7, #16]
 800afe8:	e01f      	b.n	800b02a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	015a      	lsls	r2, r3, #5
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	4413      	add	r3, r2
 800aff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b000:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b008:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b010:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	015a      	lsls	r2, r3, #5
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	4413      	add	r3, r2
 800b01a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b01e:	461a      	mov	r2, r3
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	3301      	adds	r3, #1
 800b028:	613b      	str	r3, [r7, #16]
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	2b0f      	cmp	r3, #15
 800b02e:	d9dc      	bls.n	800afea <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b030:	2300      	movs	r3, #0
 800b032:	613b      	str	r3, [r7, #16]
 800b034:	e034      	b.n	800b0a0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	015a      	lsls	r2, r3, #5
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	4413      	add	r3, r2
 800b03e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b04c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b054:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b05c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	015a      	lsls	r2, r3, #5
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	4413      	add	r3, r2
 800b066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b06a:	461a      	mov	r2, r3
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	3301      	adds	r3, #1
 800b074:	617b      	str	r3, [r7, #20]
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b07c:	d80c      	bhi.n	800b098 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	015a      	lsls	r2, r3, #5
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	4413      	add	r3, r2
 800b086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b094:	d0ec      	beq.n	800b070 <USB_StopHost+0xb0>
 800b096:	e000      	b.n	800b09a <USB_StopHost+0xda>
        break;
 800b098:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	3301      	adds	r3, #1
 800b09e:	613b      	str	r3, [r7, #16]
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	2b0f      	cmp	r3, #15
 800b0a4:	d9c7      	bls.n	800b036 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f7ff f8ae 	bl	800a21e <USB_EnableGlobalInt>

  return HAL_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3718      	adds	r7, #24
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b0cc:	b590      	push	{r4, r7, lr}
 800b0ce:	b089      	sub	sp, #36	; 0x24
 800b0d0:	af04      	add	r7, sp, #16
 800b0d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	2202      	movs	r2, #2
 800b0d8:	2102      	movs	r1, #2
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fcb2 	bl	800ba44 <USBH_FindInterface>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
 800b0e6:	2bff      	cmp	r3, #255	; 0xff
 800b0e8:	d002      	beq.n	800b0f0 <USBH_CDC_InterfaceInit+0x24>
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d901      	bls.n	800b0f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	e13d      	b.n	800b370 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fc87 	bl	800ba0c <USBH_SelectInterface>
 800b0fe:	4603      	mov	r3, r0
 800b100:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b102:	7bbb      	ldrb	r3, [r7, #14]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b108:	2302      	movs	r3, #2
 800b10a:	e131      	b.n	800b370 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b112:	2050      	movs	r0, #80	; 0x50
 800b114:	f005 fec0 	bl	8010e98 <malloc>
 800b118:	4603      	mov	r3, r0
 800b11a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b122:	69db      	ldr	r3, [r3, #28]
 800b124:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b12c:	2302      	movs	r3, #2
 800b12e:	e11f      	b.n	800b370 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b130:	2250      	movs	r2, #80	; 0x50
 800b132:	2100      	movs	r1, #0
 800b134:	68b8      	ldr	r0, [r7, #8]
 800b136:	f005 fecd 	bl	8010ed4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b13a:	7bfb      	ldrb	r3, [r7, #15]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	211a      	movs	r1, #26
 800b140:	fb01 f303 	mul.w	r3, r1, r3
 800b144:	4413      	add	r3, r2
 800b146:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	b25b      	sxtb	r3, r3
 800b14e:	2b00      	cmp	r3, #0
 800b150:	da15      	bge.n	800b17e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	211a      	movs	r1, #26
 800b158:	fb01 f303 	mul.w	r3, r1, r3
 800b15c:	4413      	add	r3, r2
 800b15e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b162:	781a      	ldrb	r2, [r3, #0]
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b168:	7bfb      	ldrb	r3, [r7, #15]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	211a      	movs	r1, #26
 800b16e:	fb01 f303 	mul.w	r3, r1, r3
 800b172:	4413      	add	r3, r2
 800b174:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b178:	881a      	ldrh	r2, [r3, #0]
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	785b      	ldrb	r3, [r3, #1]
 800b182:	4619      	mov	r1, r3
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f002 f88c 	bl	800d2a2 <USBH_AllocPipe>
 800b18a:	4603      	mov	r3, r0
 800b18c:	461a      	mov	r2, r3
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	7819      	ldrb	r1, [r3, #0]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	7858      	ldrb	r0, [r3, #1]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	8952      	ldrh	r2, [r2, #10]
 800b1aa:	9202      	str	r2, [sp, #8]
 800b1ac:	2203      	movs	r2, #3
 800b1ae:	9201      	str	r2, [sp, #4]
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	4623      	mov	r3, r4
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f002 f844 	bl	800d244 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f005 fdb7 	bl	8010d38 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	210a      	movs	r1, #10
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fc37 	bl	800ba44 <USBH_FindInterface>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
 800b1dc:	2bff      	cmp	r3, #255	; 0xff
 800b1de:	d002      	beq.n	800b1e6 <USBH_CDC_InterfaceInit+0x11a>
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d901      	bls.n	800b1ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	e0c2      	b.n	800b370 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b1ea:	7bfb      	ldrb	r3, [r7, #15]
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	211a      	movs	r1, #26
 800b1f0:	fb01 f303 	mul.w	r3, r1, r3
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	b25b      	sxtb	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	da16      	bge.n	800b230 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b202:	7bfb      	ldrb	r3, [r7, #15]
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	211a      	movs	r1, #26
 800b208:	fb01 f303 	mul.w	r3, r1, r3
 800b20c:	4413      	add	r3, r2
 800b20e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b212:	781a      	ldrb	r2, [r3, #0]
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	211a      	movs	r1, #26
 800b21e:	fb01 f303 	mul.w	r3, r1, r3
 800b222:	4413      	add	r3, r2
 800b224:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b228:	881a      	ldrh	r2, [r3, #0]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	835a      	strh	r2, [r3, #26]
 800b22e:	e015      	b.n	800b25c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b230:	7bfb      	ldrb	r3, [r7, #15]
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	211a      	movs	r1, #26
 800b236:	fb01 f303 	mul.w	r3, r1, r3
 800b23a:	4413      	add	r3, r2
 800b23c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b240:	781a      	ldrb	r2, [r3, #0]
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b246:	7bfb      	ldrb	r3, [r7, #15]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	211a      	movs	r1, #26
 800b24c:	fb01 f303 	mul.w	r3, r1, r3
 800b250:	4413      	add	r3, r2
 800b252:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b256:	881a      	ldrh	r2, [r3, #0]
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	211a      	movs	r1, #26
 800b262:	fb01 f303 	mul.w	r3, r1, r3
 800b266:	4413      	add	r3, r2
 800b268:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	b25b      	sxtb	r3, r3
 800b270:	2b00      	cmp	r3, #0
 800b272:	da16      	bge.n	800b2a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b274:	7bfb      	ldrb	r3, [r7, #15]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	211a      	movs	r1, #26
 800b27a:	fb01 f303 	mul.w	r3, r1, r3
 800b27e:	4413      	add	r3, r2
 800b280:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b284:	781a      	ldrb	r2, [r3, #0]
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	211a      	movs	r1, #26
 800b290:	fb01 f303 	mul.w	r3, r1, r3
 800b294:	4413      	add	r3, r2
 800b296:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b29a:	881a      	ldrh	r2, [r3, #0]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	835a      	strh	r2, [r3, #26]
 800b2a0:	e015      	b.n	800b2ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b2a2:	7bfb      	ldrb	r3, [r7, #15]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	211a      	movs	r1, #26
 800b2a8:	fb01 f303 	mul.w	r3, r1, r3
 800b2ac:	4413      	add	r3, r2
 800b2ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b2b2:	781a      	ldrb	r2, [r3, #0]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	211a      	movs	r1, #26
 800b2be:	fb01 f303 	mul.w	r3, r1, r3
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b2c8:	881a      	ldrh	r2, [r3, #0]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	7b9b      	ldrb	r3, [r3, #14]
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f001 ffe4 	bl	800d2a2 <USBH_AllocPipe>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	461a      	mov	r2, r3
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	7bdb      	ldrb	r3, [r3, #15]
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f001 ffda 	bl	800d2a2 <USBH_AllocPipe>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	7b59      	ldrb	r1, [r3, #13]
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	7b98      	ldrb	r0, [r3, #14]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	8b12      	ldrh	r2, [r2, #24]
 800b30e:	9202      	str	r2, [sp, #8]
 800b310:	2202      	movs	r2, #2
 800b312:	9201      	str	r2, [sp, #4]
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	4623      	mov	r3, r4
 800b318:	4602      	mov	r2, r0
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f001 ff92 	bl	800d244 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	7b19      	ldrb	r1, [r3, #12]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	7bd8      	ldrb	r0, [r3, #15]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	8b52      	ldrh	r2, [r2, #26]
 800b338:	9202      	str	r2, [sp, #8]
 800b33a:	2202      	movs	r2, #2
 800b33c:	9201      	str	r2, [sp, #4]
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	4623      	mov	r3, r4
 800b342:	4602      	mov	r2, r0
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f001 ff7d 	bl	800d244 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	7b5b      	ldrb	r3, [r3, #13]
 800b356:	2200      	movs	r2, #0
 800b358:	4619      	mov	r1, r3
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f005 fcec 	bl	8010d38 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	7b1b      	ldrb	r3, [r3, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	4619      	mov	r1, r3
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f005 fce5 	bl	8010d38 <USBH_LL_SetToggle>

  return USBH_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3714      	adds	r7, #20
 800b374:	46bd      	mov	sp, r7
 800b376:	bd90      	pop	{r4, r7, pc}

0800b378 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b386:	69db      	ldr	r3, [r3, #28]
 800b388:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00e      	beq.n	800b3b0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f001 ff72 	bl	800d282 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f001 ff9d 	bl	800d2e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	7b1b      	ldrb	r3, [r3, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00e      	beq.n	800b3d6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	7b1b      	ldrb	r3, [r3, #12]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f001 ff5f 	bl	800d282 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	7b1b      	ldrb	r3, [r3, #12]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f001 ff8a 	bl	800d2e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	7b5b      	ldrb	r3, [r3, #13]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00e      	beq.n	800b3fc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	7b5b      	ldrb	r3, [r3, #13]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f001 ff4c 	bl	800d282 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	7b5b      	ldrb	r3, [r3, #13]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f001 ff77 	bl	800d2e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b402:	69db      	ldr	r3, [r3, #28]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b40e:	69db      	ldr	r3, [r3, #28]
 800b410:	4618      	mov	r0, r3
 800b412:	f005 fd49 	bl	8010ea8 <free>
    phost->pActiveClass->pData = 0U;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b41c:	2200      	movs	r2, #0
 800b41e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b438:	69db      	ldr	r3, [r3, #28]
 800b43a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	3340      	adds	r3, #64	; 0x40
 800b440:	4619      	mov	r1, r3
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 f8b1 	bl	800b5aa <GetLineCoding>
 800b448:	4603      	mov	r3, r0
 800b44a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b44c:	7afb      	ldrb	r3, [r7, #11]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d105      	bne.n	800b45e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b458:	2102      	movs	r1, #2
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b45e:	7afb      	ldrb	r3, [r7, #11]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b470:	2301      	movs	r3, #1
 800b472:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b47e:	69db      	ldr	r3, [r3, #28]
 800b480:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b488:	2b04      	cmp	r3, #4
 800b48a:	d877      	bhi.n	800b57c <USBH_CDC_Process+0x114>
 800b48c:	a201      	add	r2, pc, #4	; (adr r2, 800b494 <USBH_CDC_Process+0x2c>)
 800b48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b492:	bf00      	nop
 800b494:	0800b4a9 	.word	0x0800b4a9
 800b498:	0800b4af 	.word	0x0800b4af
 800b49c:	0800b4df 	.word	0x0800b4df
 800b4a0:	0800b553 	.word	0x0800b553
 800b4a4:	0800b561 	.word	0x0800b561
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ac:	e06d      	b.n	800b58a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f897 	bl	800b5e8 <SetLineCoding>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b4be:	7bbb      	ldrb	r3, [r7, #14]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d104      	bne.n	800b4ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b4cc:	e058      	b.n	800b580 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b4ce:	7bbb      	ldrb	r3, [r7, #14]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d055      	beq.n	800b580 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	2204      	movs	r2, #4
 800b4d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b4dc:	e050      	b.n	800b580 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	3340      	adds	r3, #64	; 0x40
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f860 	bl	800b5aa <GetLineCoding>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b4ee:	7bbb      	ldrb	r3, [r7, #14]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d126      	bne.n	800b542 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b506:	791b      	ldrb	r3, [r3, #4]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d13b      	bne.n	800b584 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b516:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b518:	429a      	cmp	r2, r3
 800b51a:	d133      	bne.n	800b584 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b526:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b528:	429a      	cmp	r2, r3
 800b52a:	d12b      	bne.n	800b584 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b534:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b536:	429a      	cmp	r2, r3
 800b538:	d124      	bne.n	800b584 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f982 	bl	800b844 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b540:	e020      	b.n	800b584 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b542:	7bbb      	ldrb	r3, [r7, #14]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d01d      	beq.n	800b584 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2204      	movs	r2, #4
 800b54c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b550:	e018      	b.n	800b584 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f867 	bl	800b626 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f8f6 	bl	800b74a <CDC_ProcessReception>
      break;
 800b55e:	e014      	b.n	800b58a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b560:	2100      	movs	r1, #0
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f001 f94d 	bl	800c802 <USBH_ClrFeature>
 800b568:	4603      	mov	r3, r0
 800b56a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b56c:	7bbb      	ldrb	r3, [r7, #14]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d10a      	bne.n	800b588 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	2200      	movs	r2, #0
 800b576:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b57a:	e005      	b.n	800b588 <USBH_CDC_Process+0x120>

    default:
      break;
 800b57c:	bf00      	nop
 800b57e:	e004      	b.n	800b58a <USBH_CDC_Process+0x122>
      break;
 800b580:	bf00      	nop
 800b582:	e002      	b.n	800b58a <USBH_CDC_Process+0x122>
      break;
 800b584:	bf00      	nop
 800b586:	e000      	b.n	800b58a <USBH_CDC_Process+0x122>
      break;
 800b588:	bf00      	nop

  }

  return status;
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	22a1      	movs	r2, #161	; 0xa1
 800b5b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2221      	movs	r2, #33	; 0x21
 800b5be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2207      	movs	r2, #7
 800b5d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	2207      	movs	r2, #7
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f001 faf2 	bl	800cbc2 <USBH_CtlReq>
 800b5de:	4603      	mov	r3, r0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2221      	movs	r2, #33	; 0x21
 800b5f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2220      	movs	r2, #32
 800b5fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2207      	movs	r2, #7
 800b60e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	2207      	movs	r2, #7
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f001 fad3 	bl	800cbc2 <USBH_CtlReq>
 800b61c:	4603      	mov	r3, r0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3708      	adds	r7, #8
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b086      	sub	sp, #24
 800b62a:	af02      	add	r7, sp, #8
 800b62c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b638:	2300      	movs	r3, #0
 800b63a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b642:	2b01      	cmp	r3, #1
 800b644:	d002      	beq.n	800b64c <CDC_ProcessTransmission+0x26>
 800b646:	2b02      	cmp	r3, #2
 800b648:	d023      	beq.n	800b692 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b64a:	e07a      	b.n	800b742 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	8b12      	ldrh	r2, [r2, #24]
 800b654:	4293      	cmp	r3, r2
 800b656:	d90b      	bls.n	800b670 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	69d9      	ldr	r1, [r3, #28]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	8b1a      	ldrh	r2, [r3, #24]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	7b5b      	ldrb	r3, [r3, #13]
 800b664:	2001      	movs	r0, #1
 800b666:	9000      	str	r0, [sp, #0]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f001 fda8 	bl	800d1be <USBH_BulkSendData>
 800b66e:	e00b      	b.n	800b688 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800b678:	b29a      	uxth	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	7b5b      	ldrb	r3, [r3, #13]
 800b67e:	2001      	movs	r0, #1
 800b680:	9000      	str	r0, [sp, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f001 fd9b 	bl	800d1be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2202      	movs	r2, #2
 800b68c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b690:	e057      	b.n	800b742 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	7b5b      	ldrb	r3, [r3, #13]
 800b696:	4619      	mov	r1, r3
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f005 fb23 	bl	8010ce4 <USBH_LL_GetURBState>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b6a2:	7afb      	ldrb	r3, [r7, #11]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d136      	bne.n	800b716 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	8b12      	ldrh	r2, [r2, #24]
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d90e      	bls.n	800b6d2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	8b12      	ldrh	r2, [r2, #24]
 800b6bc:	1a9a      	subs	r2, r3, r2
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	69db      	ldr	r3, [r3, #28]
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	8b12      	ldrh	r2, [r2, #24]
 800b6ca:	441a      	add	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	61da      	str	r2, [r3, #28]
 800b6d0:	e002      	b.n	800b6d8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d004      	beq.n	800b6ea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b6e8:	e006      	b.n	800b6f8 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f892 	bl	800b81c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2204      	movs	r2, #4
 800b6fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b70c:	2300      	movs	r3, #0
 800b70e:	2200      	movs	r2, #0
 800b710:	f001 ffd8 	bl	800d6c4 <osMessageQueuePut>
      break;
 800b714:	e014      	b.n	800b740 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800b716:	7afb      	ldrb	r3, [r7, #11]
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d111      	bne.n	800b740 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2204      	movs	r2, #4
 800b728:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b738:	2300      	movs	r3, #0
 800b73a:	2200      	movs	r2, #0
 800b73c:	f001 ffc2 	bl	800d6c4 <osMessageQueuePut>
      break;
 800b740:	bf00      	nop
  }
}
 800b742:	bf00      	nop
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b086      	sub	sp, #24
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b758:	69db      	ldr	r3, [r3, #28]
 800b75a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b75c:	2300      	movs	r3, #0
 800b75e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b766:	2b03      	cmp	r3, #3
 800b768:	d002      	beq.n	800b770 <CDC_ProcessReception+0x26>
 800b76a:	2b04      	cmp	r3, #4
 800b76c:	d00e      	beq.n	800b78c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b76e:	e051      	b.n	800b814 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	6a19      	ldr	r1, [r3, #32]
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	8b5a      	ldrh	r2, [r3, #26]
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	7b1b      	ldrb	r3, [r3, #12]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f001 fd43 	bl	800d208 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	2204      	movs	r2, #4
 800b786:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b78a:	e043      	b.n	800b814 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	7b1b      	ldrb	r3, [r3, #12]
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f005 faa6 	bl	8010ce4 <USBH_LL_GetURBState>
 800b798:	4603      	mov	r3, r0
 800b79a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b79c:	7cfb      	ldrb	r3, [r7, #19]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d137      	bne.n	800b812 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	7b1b      	ldrb	r3, [r3, #12]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f005 fa09 	bl	8010bc0 <USBH_LL_GetLastXferSize>
 800b7ae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d016      	beq.n	800b7e8 <CDC_ProcessReception+0x9e>
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	8b5b      	ldrh	r3, [r3, #26]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d910      	bls.n	800b7e8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	1ad2      	subs	r2, r2, r3
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	6a1a      	ldr	r2, [r3, #32]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	441a      	add	r2, r3
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	2203      	movs	r2, #3
 800b7e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800b7e6:	e006      	b.n	800b7f6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f81d 	bl	800b830 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2204      	movs	r2, #4
 800b7fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b80a:	2300      	movs	r3, #0
 800b80c:	2200      	movs	r2, #0
 800b80e:	f001 ff59 	bl	800d6c4 <osMessageQueuePut>
      break;
 800b812:	bf00      	nop
  }
}
 800b814:	bf00      	nop
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	4613      	mov	r3, r2
 800b864:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d101      	bne.n	800b870 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b86c:	2302      	movs	r3, #2
 800b86e:	e044      	b.n	800b8fa <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	79fa      	ldrb	r2, [r7, #7]
 800b874:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f000 f841 	bl	800b910 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d003      	beq.n	800b8bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800b8bc:	2200      	movs	r2, #0
 800b8be:	2104      	movs	r1, #4
 800b8c0:	2010      	movs	r0, #16
 800b8c2:	f001 fe8c 	bl	800d5de <osMessageQueueNew>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800b8ce:	4b0d      	ldr	r3, [pc, #52]	; (800b904 <USBH_Init+0xac>)
 800b8d0:	4a0d      	ldr	r2, [pc, #52]	; (800b908 <USBH_Init+0xb0>)
 800b8d2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800b8d4:	4b0b      	ldr	r3, [pc, #44]	; (800b904 <USBH_Init+0xac>)
 800b8d6:	2280      	movs	r2, #128	; 0x80
 800b8d8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800b8da:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <USBH_Init+0xac>)
 800b8dc:	2218      	movs	r2, #24
 800b8de:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800b8e0:	4a08      	ldr	r2, [pc, #32]	; (800b904 <USBH_Init+0xac>)
 800b8e2:	68f9      	ldr	r1, [r7, #12]
 800b8e4:	4809      	ldr	r0, [pc, #36]	; (800b90c <USBH_Init+0xb4>)
 800b8e6:	f001 fdcd 	bl	800d484 <osThreadNew>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f005 f8b0 	bl	8010a58 <USBH_LL_Init>

  return USBH_OK;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20004f88 	.word	0x20004f88
 800b908:	08011b58 	.word	0x08011b58
 800b90c:	0800c579 	.word	0x0800c579

0800b910 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b918:	2300      	movs	r3, #0
 800b91a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b91c:	2300      	movs	r3, #0
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	e009      	b.n	800b936 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	33e0      	adds	r3, #224	; 0xe0
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4413      	add	r3, r2
 800b92c:	2200      	movs	r2, #0
 800b92e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	3301      	adds	r3, #1
 800b934:	60fb      	str	r3, [r7, #12]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b0e      	cmp	r3, #14
 800b93a:	d9f2      	bls.n	800b922 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b93c:	2300      	movs	r3, #0
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	e009      	b.n	800b956 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	4413      	add	r3, r2
 800b948:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b94c:	2200      	movs	r2, #0
 800b94e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	3301      	adds	r3, #1
 800b954:	60fb      	str	r3, [r7, #12]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b95c:	d3f1      	bcc.n	800b942 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2240      	movs	r2, #64	; 0x40
 800b982:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2201      	movs	r2, #1
 800b996:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3714      	adds	r7, #20
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d016      	beq.n	800b9fa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10e      	bne.n	800b9f4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b9dc:	1c59      	adds	r1, r3, #1
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	33de      	adds	r3, #222	; 0xde
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	73fb      	strb	r3, [r7, #15]
 800b9f2:	e004      	b.n	800b9fe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	73fb      	strb	r3, [r7, #15]
 800b9f8:	e001      	b.n	800b9fe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b9fa:	2302      	movs	r3, #2
 800b9fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	460b      	mov	r3, r1
 800ba16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ba22:	78fa      	ldrb	r2, [r7, #3]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d204      	bcs.n	800ba32 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	78fa      	ldrb	r2, [r7, #3]
 800ba2c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ba30:	e001      	b.n	800ba36 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ba32:	2302      	movs	r3, #2
 800ba34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3714      	adds	r7, #20
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b087      	sub	sp, #28
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	4608      	mov	r0, r1
 800ba4e:	4611      	mov	r1, r2
 800ba50:	461a      	mov	r2, r3
 800ba52:	4603      	mov	r3, r0
 800ba54:	70fb      	strb	r3, [r7, #3]
 800ba56:	460b      	mov	r3, r1
 800ba58:	70bb      	strb	r3, [r7, #2]
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ba6c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ba6e:	e025      	b.n	800babc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
 800ba72:	221a      	movs	r2, #26
 800ba74:	fb02 f303 	mul.w	r3, r2, r3
 800ba78:	3308      	adds	r3, #8
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	3302      	adds	r3, #2
 800ba80:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	795b      	ldrb	r3, [r3, #5]
 800ba86:	78fa      	ldrb	r2, [r7, #3]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d002      	beq.n	800ba92 <USBH_FindInterface+0x4e>
 800ba8c:	78fb      	ldrb	r3, [r7, #3]
 800ba8e:	2bff      	cmp	r3, #255	; 0xff
 800ba90:	d111      	bne.n	800bab6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ba96:	78ba      	ldrb	r2, [r7, #2]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d002      	beq.n	800baa2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ba9c:	78bb      	ldrb	r3, [r7, #2]
 800ba9e:	2bff      	cmp	r3, #255	; 0xff
 800baa0:	d109      	bne.n	800bab6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800baa6:	787a      	ldrb	r2, [r7, #1]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d002      	beq.n	800bab2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800baac:	787b      	ldrb	r3, [r7, #1]
 800baae:	2bff      	cmp	r3, #255	; 0xff
 800bab0:	d101      	bne.n	800bab6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	e006      	b.n	800bac4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bab6:	7dfb      	ldrb	r3, [r7, #23]
 800bab8:	3301      	adds	r3, #1
 800baba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800babc:	7dfb      	ldrb	r3, [r7, #23]
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d9d6      	bls.n	800ba70 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bac2:	23ff      	movs	r3, #255	; 0xff
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	371c      	adds	r7, #28
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f004 fff9 	bl	8010ad0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800bade:	2101      	movs	r1, #1
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f005 f912 	bl	8010d0a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af04      	add	r7, sp, #16
 800baf6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800baf8:	2302      	movs	r3, #2
 800bafa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bafc:	2300      	movs	r3, #0
 800bafe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d102      	bne.n	800bb12 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2203      	movs	r2, #3
 800bb10:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	2b0b      	cmp	r3, #11
 800bb1a:	f200 823c 	bhi.w	800bf96 <USBH_Process+0x4a6>
 800bb1e:	a201      	add	r2, pc, #4	; (adr r2, 800bb24 <USBH_Process+0x34>)
 800bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb24:	0800bb55 	.word	0x0800bb55
 800bb28:	0800bba3 	.word	0x0800bba3
 800bb2c:	0800bc27 	.word	0x0800bc27
 800bb30:	0800bf15 	.word	0x0800bf15
 800bb34:	0800bf97 	.word	0x0800bf97
 800bb38:	0800bce7 	.word	0x0800bce7
 800bb3c:	0800be9f 	.word	0x0800be9f
 800bb40:	0800bd39 	.word	0x0800bd39
 800bb44:	0800bd75 	.word	0x0800bd75
 800bb48:	0800bdaf 	.word	0x0800bdaf
 800bb4c:	0800bdf7 	.word	0x0800bdf7
 800bb50:	0800befd 	.word	0x0800befd
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f000 821c 	beq.w	800bf9a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2201      	movs	r2, #1
 800bb66:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bb68:	20c8      	movs	r0, #200	; 0xc8
 800bb6a:	f005 f915 	bl	8010d98 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f005 f80b 	bl	8010b8a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb98:	2300      	movs	r3, #0
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f001 fd92 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800bba0:	e1fb      	b.n	800bf9a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d107      	bne.n	800bbbc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2202      	movs	r2, #2
 800bbb8:	701a      	strb	r2, [r3, #0]
 800bbba:	e025      	b.n	800bc08 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bbc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbc6:	d914      	bls.n	800bbf2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bbce:	3301      	adds	r3, #1
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d903      	bls.n	800bbea <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	220d      	movs	r2, #13
 800bbe6:	701a      	strb	r2, [r3, #0]
 800bbe8:	e00e      	b.n	800bc08 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	701a      	strb	r2, [r3, #0]
 800bbf0:	e00a      	b.n	800bc08 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bbf8:	f103 020a 	add.w	r2, r3, #10
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bc02:	200a      	movs	r0, #10
 800bc04:	f005 f8c8 	bl	8010d98 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f001 fd50 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif
      break;
 800bc24:	e1c0      	b.n	800bfa8 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d005      	beq.n	800bc3c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc36:	2104      	movs	r1, #4
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bc3c:	2064      	movs	r0, #100	; 0x64
 800bc3e:	f005 f8ab 	bl	8010d98 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f004 ff7a 	bl	8010b3c <USBH_LL_GetSpeed>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2205      	movs	r2, #5
 800bc56:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bc58:	2100      	movs	r1, #0
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f001 fb21 	bl	800d2a2 <USBH_AllocPipe>
 800bc60:	4603      	mov	r3, r0
 800bc62:	461a      	mov	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bc68:	2180      	movs	r1, #128	; 0x80
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f001 fb19 	bl	800d2a2 <USBH_AllocPipe>
 800bc70:	4603      	mov	r3, r0
 800bc72:	461a      	mov	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	7919      	ldrb	r1, [r3, #4]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bc8c:	b292      	uxth	r2, r2
 800bc8e:	9202      	str	r2, [sp, #8]
 800bc90:	2200      	movs	r2, #0
 800bc92:	9201      	str	r2, [sp, #4]
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	4603      	mov	r3, r0
 800bc98:	2280      	movs	r2, #128	; 0x80
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f001 fad2 	bl	800d244 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	7959      	ldrb	r1, [r3, #5]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bcb4:	b292      	uxth	r2, r2
 800bcb6:	9202      	str	r2, [sp, #8]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	9201      	str	r2, [sp, #4]
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f001 fabe 	bl	800d244 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bcdc:	2300      	movs	r3, #0
 800bcde:	2200      	movs	r2, #0
 800bce0:	f001 fcf0 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif
      break;
 800bce4:	e160      	b.n	800bfa8 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f964 	bl	800bfb4 <USBH_HandleEnum>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f040 8152 	bne.w	800bf9e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d103      	bne.n	800bd14 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2208      	movs	r2, #8
 800bd10:	701a      	strb	r2, [r3, #0]
 800bd12:	e002      	b.n	800bd1a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2207      	movs	r2, #7
 800bd18:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2205      	movs	r2, #5
 800bd1e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bd2e:	2300      	movs	r3, #0
 800bd30:	2200      	movs	r2, #0
 800bd32:	f001 fcc7 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800bd36:	e132      	b.n	800bf9e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f000 812f 	beq.w	800bfa2 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd4a:	2101      	movs	r1, #1
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2208      	movs	r2, #8
 800bd54:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2205      	movs	r2, #5
 800bd5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f001 fca9 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800bd72:	e116      	b.n	800bfa2 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fcf8 	bl	800c774 <USBH_SetCfg>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d102      	bne.n	800bd90 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2209      	movs	r2, #9
 800bd8e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bda4:	2300      	movs	r3, #0
 800bda6:	2200      	movs	r2, #0
 800bda8:	f001 fc8c 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif
      break;
 800bdac:	e0fc      	b.n	800bfa8 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800bdb4:	f003 0320 	and.w	r3, r3, #32
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00a      	beq.n	800bdd2 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 fcfb 	bl	800c7ba <USBH_SetFeature>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d106      	bne.n	800bdd8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	220a      	movs	r2, #10
 800bdce:	701a      	strb	r2, [r3, #0]
 800bdd0:	e002      	b.n	800bdd8 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	220a      	movs	r2, #10
 800bdd6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bdec:	2300      	movs	r3, #0
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f001 fc68 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif
      break;
 800bdf4:	e0d8      	b.n	800bfa8 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d03f      	beq.n	800be80 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800be08:	2300      	movs	r3, #0
 800be0a:	73fb      	strb	r3, [r7, #15]
 800be0c:	e016      	b.n	800be3c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800be0e:	7bfa      	ldrb	r2, [r7, #15]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	32de      	adds	r2, #222	; 0xde
 800be14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be18:	791a      	ldrb	r2, [r3, #4]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800be20:	429a      	cmp	r2, r3
 800be22:	d108      	bne.n	800be36 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800be24:	7bfa      	ldrb	r2, [r7, #15]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	32de      	adds	r2, #222	; 0xde
 800be2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800be34:	e005      	b.n	800be42 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800be36:	7bfb      	ldrb	r3, [r7, #15]
 800be38:	3301      	adds	r3, #1
 800be3a:	73fb      	strb	r3, [r7, #15]
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d0e5      	beq.n	800be0e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d016      	beq.n	800be7a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	4798      	blx	r3
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d109      	bne.n	800be72 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2206      	movs	r2, #6
 800be62:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be6a:	2103      	movs	r1, #3
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	4798      	blx	r3
 800be70:	e006      	b.n	800be80 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	220d      	movs	r2, #13
 800be76:	701a      	strb	r2, [r3, #0]
 800be78:	e002      	b.n	800be80 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	220d      	movs	r2, #13
 800be7e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2205      	movs	r2, #5
 800be84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800be94:	2300      	movs	r3, #0
 800be96:	2200      	movs	r2, #0
 800be98:	f001 fc14 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif
      break;
 800be9c:	e084      	b.n	800bfa8 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d017      	beq.n	800bed8 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	4798      	blx	r3
 800beb4:	4603      	mov	r3, r0
 800beb6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800beb8:	7bbb      	ldrb	r3, [r7, #14]
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d103      	bne.n	800bec8 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	220b      	movs	r2, #11
 800bec4:	701a      	strb	r2, [r3, #0]
 800bec6:	e00a      	b.n	800bede <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800bec8:	7bbb      	ldrb	r3, [r7, #14]
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b02      	cmp	r3, #2
 800bece:	d106      	bne.n	800bede <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	220d      	movs	r2, #13
 800bed4:	701a      	strb	r2, [r3, #0]
 800bed6:	e002      	b.n	800bede <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	220d      	movs	r2, #13
 800bedc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2205      	movs	r2, #5
 800bee2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bef2:	2300      	movs	r3, #0
 800bef4:	2200      	movs	r2, #0
 800bef6:	f001 fbe5 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif
      break;
 800befa:	e055      	b.n	800bfa8 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d04f      	beq.n	800bfa6 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf0c:	695b      	ldr	r3, [r3, #20]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	4798      	blx	r3
      }
      break;
 800bf12:	e048      	b.n	800bfa6 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7ff fcf7 	bl	800b910 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d009      	beq.n	800bf40 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d005      	beq.n	800bf56 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf50:	2105      	movs	r1, #5
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d107      	bne.n	800bf72 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7ff fdb0 	bl	800bad0 <USBH_Start>
 800bf70:	e002      	b.n	800bf78 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f004 fdac 	bl	8010ad0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f001 fb98 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif
      break;
 800bf94:	e008      	b.n	800bfa8 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800bf96:	bf00      	nop
 800bf98:	e006      	b.n	800bfa8 <USBH_Process+0x4b8>
      break;
 800bf9a:	bf00      	nop
 800bf9c:	e004      	b.n	800bfa8 <USBH_Process+0x4b8>
      break;
 800bf9e:	bf00      	nop
 800bfa0:	e002      	b.n	800bfa8 <USBH_Process+0x4b8>
    break;
 800bfa2:	bf00      	nop
 800bfa4:	e000      	b.n	800bfa8 <USBH_Process+0x4b8>
      break;
 800bfa6:	bf00      	nop
  }
  return USBH_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop

0800bfb4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b088      	sub	sp, #32
 800bfb8:	af04      	add	r7, sp, #16
 800bfba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	785b      	ldrb	r3, [r3, #1]
 800bfc8:	2b07      	cmp	r3, #7
 800bfca:	f200 8208 	bhi.w	800c3de <USBH_HandleEnum+0x42a>
 800bfce:	a201      	add	r2, pc, #4	; (adr r2, 800bfd4 <USBH_HandleEnum+0x20>)
 800bfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd4:	0800bff5 	.word	0x0800bff5
 800bfd8:	0800c0b3 	.word	0x0800c0b3
 800bfdc:	0800c11d 	.word	0x0800c11d
 800bfe0:	0800c1ab 	.word	0x0800c1ab
 800bfe4:	0800c215 	.word	0x0800c215
 800bfe8:	0800c285 	.word	0x0800c285
 800bfec:	0800c321 	.word	0x0800c321
 800bff0:	0800c39f 	.word	0x0800c39f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bff4:	2108      	movs	r1, #8
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 faec 	bl	800c5d4 <USBH_Get_DevDesc>
 800bffc:	4603      	mov	r3, r0
 800bffe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c000:	7bbb      	ldrb	r3, [r7, #14]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d130      	bne.n	800c068 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	7919      	ldrb	r1, [r3, #4]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c02a:	b292      	uxth	r2, r2
 800c02c:	9202      	str	r2, [sp, #8]
 800c02e:	2200      	movs	r2, #0
 800c030:	9201      	str	r2, [sp, #4]
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	4603      	mov	r3, r0
 800c036:	2280      	movs	r2, #128	; 0x80
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f001 f903 	bl	800d244 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	7959      	ldrb	r1, [r3, #5]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c052:	b292      	uxth	r2, r2
 800c054:	9202      	str	r2, [sp, #8]
 800c056:	2200      	movs	r2, #0
 800c058:	9201      	str	r2, [sp, #4]
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	4603      	mov	r3, r0
 800c05e:	2200      	movs	r2, #0
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f001 f8ef 	bl	800d244 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c066:	e1bc      	b.n	800c3e2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	2b03      	cmp	r3, #3
 800c06c:	f040 81b9 	bne.w	800c3e2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c076:	3301      	adds	r3, #1
 800c078:	b2da      	uxtb	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c086:	2b03      	cmp	r3, #3
 800c088:	d903      	bls.n	800c092 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	220d      	movs	r2, #13
 800c08e:	701a      	strb	r2, [r3, #0]
      break;
 800c090:	e1a7      	b.n	800c3e2 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	795b      	ldrb	r3, [r3, #5]
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f001 f923 	bl	800d2e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	791b      	ldrb	r3, [r3, #4]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f001 f91d 	bl	800d2e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	701a      	strb	r2, [r3, #0]
      break;
 800c0b0:	e197      	b.n	800c3e2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c0b2:	2112      	movs	r1, #18
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 fa8d 	bl	800c5d4 <USBH_Get_DevDesc>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d103      	bne.n	800c0cc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c0ca:	e18c      	b.n	800c3e6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	f040 8189 	bne.w	800c3e6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0da:	3301      	adds	r3, #1
 800c0dc:	b2da      	uxtb	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0ea:	2b03      	cmp	r3, #3
 800c0ec:	d903      	bls.n	800c0f6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	220d      	movs	r2, #13
 800c0f2:	701a      	strb	r2, [r3, #0]
      break;
 800c0f4:	e177      	b.n	800c3e6 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	795b      	ldrb	r3, [r3, #5]
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f001 f8f1 	bl	800d2e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	791b      	ldrb	r3, [r3, #4]
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f001 f8eb 	bl	800d2e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	701a      	strb	r2, [r3, #0]
      break;
 800c11a:	e164      	b.n	800c3e6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c11c:	2101      	movs	r1, #1
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fb04 	bl	800c72c <USBH_SetAddress>
 800c124:	4603      	mov	r3, r0
 800c126:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d132      	bne.n	800c194 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c12e:	2002      	movs	r0, #2
 800c130:	f004 fe32 	bl	8010d98 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2201      	movs	r2, #1
 800c138:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2203      	movs	r2, #3
 800c140:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	7919      	ldrb	r1, [r3, #4]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c156:	b292      	uxth	r2, r2
 800c158:	9202      	str	r2, [sp, #8]
 800c15a:	2200      	movs	r2, #0
 800c15c:	9201      	str	r2, [sp, #4]
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	4603      	mov	r3, r0
 800c162:	2280      	movs	r2, #128	; 0x80
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f001 f86d 	bl	800d244 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	7959      	ldrb	r1, [r3, #5]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c17e:	b292      	uxth	r2, r2
 800c180:	9202      	str	r2, [sp, #8]
 800c182:	2200      	movs	r2, #0
 800c184:	9201      	str	r2, [sp, #4]
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	4603      	mov	r3, r0
 800c18a:	2200      	movs	r2, #0
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f001 f859 	bl	800d244 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c192:	e12a      	b.n	800c3ea <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c194:	7bbb      	ldrb	r3, [r7, #14]
 800c196:	2b03      	cmp	r3, #3
 800c198:	f040 8127 	bne.w	800c3ea <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	220d      	movs	r2, #13
 800c1a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	705a      	strb	r2, [r3, #1]
      break;
 800c1a8:	e11f      	b.n	800c3ea <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c1aa:	2109      	movs	r1, #9
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fa39 	bl	800c624 <USBH_Get_CfgDesc>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c1b6:	7bbb      	ldrb	r3, [r7, #14]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d103      	bne.n	800c1c4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2204      	movs	r2, #4
 800c1c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c1c2:	e114      	b.n	800c3ee <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1c4:	7bbb      	ldrb	r3, [r7, #14]
 800c1c6:	2b03      	cmp	r3, #3
 800c1c8:	f040 8111 	bne.w	800c3ee <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	d903      	bls.n	800c1ee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	220d      	movs	r2, #13
 800c1ea:	701a      	strb	r2, [r3, #0]
      break;
 800c1ec:	e0ff      	b.n	800c3ee <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	795b      	ldrb	r3, [r3, #5]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f001 f875 	bl	800d2e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	791b      	ldrb	r3, [r3, #4]
 800c1fe:	4619      	mov	r1, r3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f001 f86f 	bl	800d2e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	701a      	strb	r2, [r3, #0]
      break;
 800c212:	e0ec      	b.n	800c3ee <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c21a:	4619      	mov	r1, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fa01 	bl	800c624 <USBH_Get_CfgDesc>
 800c222:	4603      	mov	r3, r0
 800c224:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c226:	7bbb      	ldrb	r3, [r7, #14]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d103      	bne.n	800c234 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2205      	movs	r2, #5
 800c230:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c232:	e0de      	b.n	800c3f2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c234:	7bbb      	ldrb	r3, [r7, #14]
 800c236:	2b03      	cmp	r3, #3
 800c238:	f040 80db 	bne.w	800c3f2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c242:	3301      	adds	r3, #1
 800c244:	b2da      	uxtb	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c252:	2b03      	cmp	r3, #3
 800c254:	d903      	bls.n	800c25e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	220d      	movs	r2, #13
 800c25a:	701a      	strb	r2, [r3, #0]
      break;
 800c25c:	e0c9      	b.n	800c3f2 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	795b      	ldrb	r3, [r3, #5]
 800c262:	4619      	mov	r1, r3
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f001 f83d 	bl	800d2e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	791b      	ldrb	r3, [r3, #4]
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f001 f837 	bl	800d2e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	701a      	strb	r2, [r3, #0]
      break;
 800c282:	e0b6      	b.n	800c3f2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d036      	beq.n	800c2fc <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c29a:	23ff      	movs	r3, #255	; 0xff
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 f9e5 	bl	800c66c <USBH_Get_StringDesc>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c2a6:	7bbb      	ldrb	r3, [r7, #14]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d111      	bne.n	800c2d0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2206      	movs	r2, #6
 800c2b0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2205      	movs	r2, #5
 800c2b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f001 f9fb 	bl	800d6c4 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c2ce:	e092      	b.n	800c3f6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2d0:	7bbb      	ldrb	r3, [r7, #14]
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	f040 808f 	bne.w	800c3f6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2206      	movs	r2, #6
 800c2dc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2205      	movs	r2, #5
 800c2e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f001 f9e5 	bl	800d6c4 <osMessageQueuePut>
      break;
 800c2fa:	e07c      	b.n	800c3f6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2206      	movs	r2, #6
 800c300:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2205      	movs	r2, #5
 800c306:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c316:	2300      	movs	r3, #0
 800c318:	2200      	movs	r2, #0
 800c31a:	f001 f9d3 	bl	800d6c4 <osMessageQueuePut>
      break;
 800c31e:	e06a      	b.n	800c3f6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c326:	2b00      	cmp	r3, #0
 800c328:	d027      	beq.n	800c37a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c336:	23ff      	movs	r3, #255	; 0xff
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f997 	bl	800c66c <USBH_Get_StringDesc>
 800c33e:	4603      	mov	r3, r0
 800c340:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d103      	bne.n	800c350 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2207      	movs	r2, #7
 800c34c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c34e:	e054      	b.n	800c3fa <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c350:	7bbb      	ldrb	r3, [r7, #14]
 800c352:	2b03      	cmp	r3, #3
 800c354:	d151      	bne.n	800c3fa <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2207      	movs	r2, #7
 800c35a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2205      	movs	r2, #5
 800c360:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c370:	2300      	movs	r3, #0
 800c372:	2200      	movs	r2, #0
 800c374:	f001 f9a6 	bl	800d6c4 <osMessageQueuePut>
      break;
 800c378:	e03f      	b.n	800c3fa <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2207      	movs	r2, #7
 800c37e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2205      	movs	r2, #5
 800c384:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c394:	2300      	movs	r3, #0
 800c396:	2200      	movs	r2, #0
 800c398:	f001 f994 	bl	800d6c4 <osMessageQueuePut>
      break;
 800c39c:	e02d      	b.n	800c3fa <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d017      	beq.n	800c3d8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c3b4:	23ff      	movs	r3, #255	; 0xff
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f958 	bl	800c66c <USBH_Get_StringDesc>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c3c0:	7bbb      	ldrb	r3, [r7, #14]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d102      	bne.n	800c3cc <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c3ca:	e018      	b.n	800c3fe <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3cc:	7bbb      	ldrb	r3, [r7, #14]
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	d115      	bne.n	800c3fe <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	73fb      	strb	r3, [r7, #15]
      break;
 800c3d6:	e012      	b.n	800c3fe <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	73fb      	strb	r3, [r7, #15]
      break;
 800c3dc:	e00f      	b.n	800c3fe <USBH_HandleEnum+0x44a>

    default:
      break;
 800c3de:	bf00      	nop
 800c3e0:	e00e      	b.n	800c400 <USBH_HandleEnum+0x44c>
      break;
 800c3e2:	bf00      	nop
 800c3e4:	e00c      	b.n	800c400 <USBH_HandleEnum+0x44c>
      break;
 800c3e6:	bf00      	nop
 800c3e8:	e00a      	b.n	800c400 <USBH_HandleEnum+0x44c>
      break;
 800c3ea:	bf00      	nop
 800c3ec:	e008      	b.n	800c400 <USBH_HandleEnum+0x44c>
      break;
 800c3ee:	bf00      	nop
 800c3f0:	e006      	b.n	800c400 <USBH_HandleEnum+0x44c>
      break;
 800c3f2:	bf00      	nop
 800c3f4:	e004      	b.n	800c400 <USBH_HandleEnum+0x44c>
      break;
 800c3f6:	bf00      	nop
 800c3f8:	e002      	b.n	800c400 <USBH_HandleEnum+0x44c>
      break;
 800c3fa:	bf00      	nop
 800c3fc:	e000      	b.n	800c400 <USBH_HandleEnum+0x44c>
      break;
 800c3fe:	bf00      	nop
  }
  return Status;
 800c400:	7bfb      	ldrb	r3, [r7, #15]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop

0800c40c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	683a      	ldr	r2, [r7, #0]
 800c41a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c41e:	bf00      	nop
 800c420:	370c      	adds	r7, #12
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr

0800c42a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b082      	sub	sp, #8
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 f804 	bl	800c44e <USBH_HandleSof>
}
 800c446:	bf00      	nop
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b082      	sub	sp, #8
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	2b0b      	cmp	r3, #11
 800c45e:	d10a      	bne.n	800c476 <USBH_HandleSof+0x28>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d005      	beq.n	800c476 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	4798      	blx	r3
  }
}
 800c476:	bf00      	nop
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b082      	sub	sp, #8
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2201      	movs	r2, #1
 800c48a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2201      	movs	r2, #1
 800c492:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f001 f90d 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif

  return;
 800c4aa:	bf00      	nop
}
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c4b2:	b480      	push	{r7}
 800c4b4:	b083      	sub	sp, #12
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c4c2:	bf00      	nop
}
 800c4c4:	370c      	adds	r7, #12
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b082      	sub	sp, #8
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c502:	2300      	movs	r3, #0
 800c504:	2200      	movs	r2, #0
 800c506:	f001 f8dd 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f004 fae6 	bl	8010b06 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	791b      	ldrb	r3, [r3, #4]
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 fecf 	bl	800d2e4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	795b      	ldrb	r3, [r3, #5]
 800c54a:	4619      	mov	r1, r3
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fec9 	bl	800d2e4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2201      	movs	r2, #1
 800c556:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c566:	2300      	movs	r3, #0
 800c568:	2200      	movs	r2, #0
 800c56a:	f001 f8ab 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c58c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c590:	2200      	movs	r2, #0
 800c592:	f001 f8f7 	bl	800d784 <osMessageQueueGet>
 800c596:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1f0      	bne.n	800c580 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f7ff faa6 	bl	800baf0 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c5a4:	e7ec      	b.n	800c580 <USBH_Process_OS+0x8>

0800c5a6 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b082      	sub	sp, #8
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f001 f87d 	bl	800d6c4 <osMessageQueuePut>
#endif

  return USBH_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af02      	add	r7, sp, #8
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c5e6:	78fb      	ldrb	r3, [r7, #3]
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	9300      	str	r3, [sp, #0]
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f864 	bl	800c6c2 <USBH_GetDescriptor>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	73fb      	strb	r3, [r7, #15]
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10a      	bne.n	800c61a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c610:	78fa      	ldrb	r2, [r7, #3]
 800c612:	b292      	uxth	r2, r2
 800c614:	4619      	mov	r1, r3
 800c616:	f000 f918 	bl	800c84a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af02      	add	r7, sp, #8
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	460b      	mov	r3, r1
 800c62e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	331c      	adds	r3, #28
 800c634:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c636:	887b      	ldrh	r3, [r7, #2]
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c640:	2100      	movs	r1, #0
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 f83d 	bl	800c6c2 <USBH_GetDescriptor>
 800c648:	4603      	mov	r3, r0
 800c64a:	72fb      	strb	r3, [r7, #11]
 800c64c:	7afb      	ldrb	r3, [r7, #11]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d107      	bne.n	800c662 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c658:	887a      	ldrh	r2, [r7, #2]
 800c65a:	68f9      	ldr	r1, [r7, #12]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f000 f964 	bl	800c92a <USBH_ParseCfgDesc>
  }

  return status;
 800c662:	7afb      	ldrb	r3, [r7, #11]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b088      	sub	sp, #32
 800c670:	af02      	add	r7, sp, #8
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	607a      	str	r2, [r7, #4]
 800c676:	461a      	mov	r2, r3
 800c678:	460b      	mov	r3, r1
 800c67a:	72fb      	strb	r3, [r7, #11]
 800c67c:	4613      	mov	r3, r2
 800c67e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c680:	7afb      	ldrb	r3, [r7, #11]
 800c682:	b29b      	uxth	r3, r3
 800c684:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c688:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c690:	893b      	ldrh	r3, [r7, #8]
 800c692:	9300      	str	r3, [sp, #0]
 800c694:	460b      	mov	r3, r1
 800c696:	2100      	movs	r1, #0
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f000 f812 	bl	800c6c2 <USBH_GetDescriptor>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	75fb      	strb	r3, [r7, #23]
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d107      	bne.n	800c6b8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c6ae:	893a      	ldrh	r2, [r7, #8]
 800c6b0:	6879      	ldr	r1, [r7, #4]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 fa37 	bl	800cb26 <USBH_ParseStringDesc>
  }

  return status;
 800c6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b084      	sub	sp, #16
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	60f8      	str	r0, [r7, #12]
 800c6ca:	607b      	str	r3, [r7, #4]
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	72fb      	strb	r3, [r7, #11]
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	789b      	ldrb	r3, [r3, #2]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d11c      	bne.n	800c716 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c6dc:	7afb      	ldrb	r3, [r7, #11]
 800c6de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2206      	movs	r2, #6
 800c6ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	893a      	ldrh	r2, [r7, #8]
 800c6f2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c6f4:	893b      	ldrh	r3, [r7, #8]
 800c6f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c6fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6fe:	d104      	bne.n	800c70a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f240 4209 	movw	r2, #1033	; 0x409
 800c706:	829a      	strh	r2, [r3, #20]
 800c708:	e002      	b.n	800c710 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2200      	movs	r2, #0
 800c70e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	8b3a      	ldrh	r2, [r7, #24]
 800c714:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c716:	8b3b      	ldrh	r3, [r7, #24]
 800c718:	461a      	mov	r2, r3
 800c71a:	6879      	ldr	r1, [r7, #4]
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f000 fa50 	bl	800cbc2 <USBH_CtlReq>
 800c722:	4603      	mov	r3, r0
}
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	460b      	mov	r3, r1
 800c736:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	789b      	ldrb	r3, [r3, #2]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d10f      	bne.n	800c760 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2205      	movs	r2, #5
 800c74a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c74c:	78fb      	ldrb	r3, [r7, #3]
 800c74e:	b29a      	uxth	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c760:	2200      	movs	r2, #0
 800c762:	2100      	movs	r1, #0
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 fa2c 	bl	800cbc2 <USBH_CtlReq>
 800c76a:	4603      	mov	r3, r0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	460b      	mov	r3, r1
 800c77e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	789b      	ldrb	r3, [r3, #2]
 800c784:	2b01      	cmp	r3, #1
 800c786:	d10e      	bne.n	800c7a6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2209      	movs	r2, #9
 800c792:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	887a      	ldrh	r2, [r7, #2]
 800c798:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fa09 	bl	800cbc2 <USBH_CtlReq>
 800c7b0:	4603      	mov	r3, r0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b082      	sub	sp, #8
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	789b      	ldrb	r3, [r3, #2]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d10f      	bne.n	800c7ee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2203      	movs	r2, #3
 800c7d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c7da:	78fb      	ldrb	r3, [r7, #3]
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f9e5 	bl	800cbc2 <USBH_CtlReq>
 800c7f8:	4603      	mov	r3, r0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b082      	sub	sp, #8
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	460b      	mov	r3, r1
 800c80c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	789b      	ldrb	r3, [r3, #2]
 800c812:	2b01      	cmp	r3, #1
 800c814:	d10f      	bne.n	800c836 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2202      	movs	r2, #2
 800c81a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2201      	movs	r2, #1
 800c820:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c828:	78fb      	ldrb	r3, [r7, #3]
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c836:	2200      	movs	r2, #0
 800c838:	2100      	movs	r1, #0
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 f9c1 	bl	800cbc2 <USBH_CtlReq>
 800c840:	4603      	mov	r3, r0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3708      	adds	r7, #8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c84a:	b480      	push	{r7}
 800c84c:	b085      	sub	sp, #20
 800c84e:	af00      	add	r7, sp, #0
 800c850:	60f8      	str	r0, [r7, #12]
 800c852:	60b9      	str	r1, [r7, #8]
 800c854:	4613      	mov	r3, r2
 800c856:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	781a      	ldrb	r2, [r3, #0]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	785a      	ldrb	r2, [r3, #1]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	3302      	adds	r3, #2
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	b29a      	uxth	r2, r3
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	3303      	adds	r3, #3
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	b29b      	uxth	r3, r3
 800c878:	021b      	lsls	r3, r3, #8
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	4313      	orrs	r3, r2
 800c87e:	b29a      	uxth	r2, r3
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	791a      	ldrb	r2, [r3, #4]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	795a      	ldrb	r2, [r3, #5]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	799a      	ldrb	r2, [r3, #6]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	79da      	ldrb	r2, [r3, #7]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c8a4:	88fb      	ldrh	r3, [r7, #6]
 800c8a6:	2b08      	cmp	r3, #8
 800c8a8:	d939      	bls.n	800c91e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	3308      	adds	r3, #8
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	3309      	adds	r3, #9
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	021b      	lsls	r3, r3, #8
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	330a      	adds	r3, #10
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	330b      	adds	r3, #11
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	021b      	lsls	r3, r3, #8
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	330c      	adds	r3, #12
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	330d      	adds	r3, #13
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	021b      	lsls	r3, r3, #8
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	7b9a      	ldrb	r2, [r3, #14]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	7bda      	ldrb	r2, [r3, #15]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	7c1a      	ldrb	r2, [r3, #16]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	7c5a      	ldrb	r2, [r3, #17]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	745a      	strb	r2, [r3, #17]
  }
}
 800c91e:	bf00      	nop
 800c920:	3714      	adds	r7, #20
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr

0800c92a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b08a      	sub	sp, #40	; 0x28
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	60b9      	str	r1, [r7, #8]
 800c934:	4613      	mov	r3, r2
 800c936:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c93c:	2300      	movs	r3, #0
 800c93e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c942:	2300      	movs	r3, #0
 800c944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	781a      	ldrb	r2, [r3, #0]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	785a      	ldrb	r2, [r3, #1]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	3302      	adds	r3, #2
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	b29a      	uxth	r2, r3
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	3303      	adds	r3, #3
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	021b      	lsls	r3, r3, #8
 800c96e:	b29b      	uxth	r3, r3
 800c970:	4313      	orrs	r3, r2
 800c972:	b29a      	uxth	r2, r3
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	791a      	ldrb	r2, [r3, #4]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	795a      	ldrb	r2, [r3, #5]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	799a      	ldrb	r2, [r3, #6]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	79da      	ldrb	r2, [r3, #7]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	7a1a      	ldrb	r2, [r3, #8]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c9a0:	88fb      	ldrh	r3, [r7, #6]
 800c9a2:	2b09      	cmp	r3, #9
 800c9a4:	d95f      	bls.n	800ca66 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c9a6:	2309      	movs	r3, #9
 800c9a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c9ae:	e051      	b.n	800ca54 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c9b0:	f107 0316 	add.w	r3, r7, #22
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9b8:	f000 f8e8 	bl	800cb8c <USBH_GetNextDesc>
 800c9bc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c0:	785b      	ldrb	r3, [r3, #1]
 800c9c2:	2b04      	cmp	r3, #4
 800c9c4:	d146      	bne.n	800ca54 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c9c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c9ca:	221a      	movs	r2, #26
 800c9cc:	fb02 f303 	mul.w	r3, r2, r3
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	3302      	adds	r3, #2
 800c9d8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c9da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9dc:	69f8      	ldr	r0, [r7, #28]
 800c9de:	f000 f846 	bl	800ca6e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c9ec:	e022      	b.n	800ca34 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c9ee:	f107 0316 	add.w	r3, r7, #22
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9f6:	f000 f8c9 	bl	800cb8c <USBH_GetNextDesc>
 800c9fa:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fe:	785b      	ldrb	r3, [r3, #1]
 800ca00:	2b05      	cmp	r3, #5
 800ca02:	d117      	bne.n	800ca34 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ca04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca08:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ca0c:	3201      	adds	r2, #1
 800ca0e:	00d2      	lsls	r2, r2, #3
 800ca10:	211a      	movs	r1, #26
 800ca12:	fb01 f303 	mul.w	r3, r1, r3
 800ca16:	4413      	add	r3, r2
 800ca18:	3308      	adds	r3, #8
 800ca1a:	68fa      	ldr	r2, [r7, #12]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	3304      	adds	r3, #4
 800ca20:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ca22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca24:	69b8      	ldr	r0, [r7, #24]
 800ca26:	f000 f851 	bl	800cacc <USBH_ParseEPDesc>
            ep_ix++;
 800ca2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ca2e:	3301      	adds	r3, #1
 800ca30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	791b      	ldrb	r3, [r3, #4]
 800ca38:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d204      	bcs.n	800ca4a <USBH_ParseCfgDesc+0x120>
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	885a      	ldrh	r2, [r3, #2]
 800ca44:	8afb      	ldrh	r3, [r7, #22]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d8d1      	bhi.n	800c9ee <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ca4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca4e:	3301      	adds	r3, #1
 800ca50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d804      	bhi.n	800ca66 <USBH_ParseCfgDesc+0x13c>
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	885a      	ldrh	r2, [r3, #2]
 800ca60:	8afb      	ldrh	r3, [r7, #22]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d8a4      	bhi.n	800c9b0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ca66:	bf00      	nop
 800ca68:	3728      	adds	r7, #40	; 0x28
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	781a      	ldrb	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	785a      	ldrb	r2, [r3, #1]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	789a      	ldrb	r2, [r3, #2]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	78da      	ldrb	r2, [r3, #3]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	791a      	ldrb	r2, [r3, #4]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	795a      	ldrb	r2, [r3, #5]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	799a      	ldrb	r2, [r3, #6]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	79da      	ldrb	r2, [r3, #7]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	7a1a      	ldrb	r2, [r3, #8]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	721a      	strb	r2, [r3, #8]
}
 800cac0:	bf00      	nop
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	781a      	ldrb	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	785a      	ldrb	r2, [r3, #1]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	789a      	ldrb	r2, [r3, #2]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	78da      	ldrb	r2, [r3, #3]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	3304      	adds	r3, #4
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	3305      	adds	r3, #5
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	021b      	lsls	r3, r3, #8
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	799a      	ldrb	r2, [r3, #6]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	719a      	strb	r2, [r3, #6]
}
 800cb1a:	bf00      	nop
 800cb1c:	370c      	adds	r7, #12
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr

0800cb26 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cb26:	b480      	push	{r7}
 800cb28:	b087      	sub	sp, #28
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	60f8      	str	r0, [r7, #12]
 800cb2e:	60b9      	str	r1, [r7, #8]
 800cb30:	4613      	mov	r3, r2
 800cb32:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	3301      	adds	r3, #1
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d120      	bne.n	800cb80 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	1e9a      	subs	r2, r3, #2
 800cb44:	88fb      	ldrh	r3, [r7, #6]
 800cb46:	4293      	cmp	r3, r2
 800cb48:	bf28      	it	cs
 800cb4a:	4613      	movcs	r3, r2
 800cb4c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	3302      	adds	r3, #2
 800cb52:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cb54:	2300      	movs	r3, #0
 800cb56:	82fb      	strh	r3, [r7, #22]
 800cb58:	e00b      	b.n	800cb72 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cb5a:	8afb      	ldrh	r3, [r7, #22]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	4413      	add	r3, r2
 800cb60:	781a      	ldrb	r2, [r3, #0]
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cb6c:	8afb      	ldrh	r3, [r7, #22]
 800cb6e:	3302      	adds	r3, #2
 800cb70:	82fb      	strh	r3, [r7, #22]
 800cb72:	8afa      	ldrh	r2, [r7, #22]
 800cb74:	8abb      	ldrh	r3, [r7, #20]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d3ef      	bcc.n	800cb5a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	701a      	strb	r2, [r3, #0]
  }
}
 800cb80:	bf00      	nop
 800cb82:	371c      	adds	r7, #28
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	881a      	ldrh	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	4413      	add	r3, r2
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3714      	adds	r7, #20
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b086      	sub	sp, #24
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	60f8      	str	r0, [r7, #12]
 800cbca:	60b9      	str	r1, [r7, #8]
 800cbcc:	4613      	mov	r3, r2
 800cbce:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	789b      	ldrb	r3, [r3, #2]
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d002      	beq.n	800cbe2 <USBH_CtlReq+0x20>
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d01d      	beq.n	800cc1c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800cbe0:	e043      	b.n	800cc6a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	88fa      	ldrh	r2, [r7, #6]
 800cbec:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2202      	movs	r2, #2
 800cbf8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2203      	movs	r2, #3
 800cc02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc12:	2300      	movs	r3, #0
 800cc14:	2200      	movs	r2, #0
 800cc16:	f000 fd55 	bl	800d6c4 <osMessageQueuePut>
      break;
 800cc1a:	e026      	b.n	800cc6a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f000 f829 	bl	800cc74 <USBH_HandleControl>
 800cc22:	4603      	mov	r3, r0
 800cc24:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cc26:	7dfb      	ldrb	r3, [r7, #23]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <USBH_CtlReq+0x70>
 800cc2c:	7dfb      	ldrb	r3, [r7, #23]
 800cc2e:	2b03      	cmp	r3, #3
 800cc30:	d106      	bne.n	800cc40 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2201      	movs	r2, #1
 800cc36:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	761a      	strb	r2, [r3, #24]
 800cc3e:	e005      	b.n	800cc4c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800cc40:	7dfb      	ldrb	r3, [r7, #23]
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d102      	bne.n	800cc4c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2203      	movs	r2, #3
 800cc50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc60:	2300      	movs	r3, #0
 800cc62:	2200      	movs	r2, #0
 800cc64:	f000 fd2e 	bl	800d6c4 <osMessageQueuePut>
      break;
 800cc68:	bf00      	nop
  }
  return status;
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af02      	add	r7, sp, #8
 800cc7a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cc80:	2300      	movs	r3, #0
 800cc82:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	7e1b      	ldrb	r3, [r3, #24]
 800cc88:	3b01      	subs	r3, #1
 800cc8a:	2b0a      	cmp	r3, #10
 800cc8c:	f200 8229 	bhi.w	800d0e2 <USBH_HandleControl+0x46e>
 800cc90:	a201      	add	r2, pc, #4	; (adr r2, 800cc98 <USBH_HandleControl+0x24>)
 800cc92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc96:	bf00      	nop
 800cc98:	0800ccc5 	.word	0x0800ccc5
 800cc9c:	0800ccdf 	.word	0x0800ccdf
 800cca0:	0800cd81 	.word	0x0800cd81
 800cca4:	0800cda7 	.word	0x0800cda7
 800cca8:	0800ce33 	.word	0x0800ce33
 800ccac:	0800ce5d 	.word	0x0800ce5d
 800ccb0:	0800cf1f 	.word	0x0800cf1f
 800ccb4:	0800cf41 	.word	0x0800cf41
 800ccb8:	0800cfd3 	.word	0x0800cfd3
 800ccbc:	0800cff9 	.word	0x0800cff9
 800ccc0:	0800d08b 	.word	0x0800d08b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f103 0110 	add.w	r1, r3, #16
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	795b      	ldrb	r3, [r3, #5]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 fa17 	bl	800d104 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2202      	movs	r2, #2
 800ccda:	761a      	strb	r2, [r3, #24]
      break;
 800ccdc:	e20c      	b.n	800d0f8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	795b      	ldrb	r3, [r3, #5]
 800cce2:	4619      	mov	r1, r3
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f003 fffd 	bl	8010ce4 <USBH_LL_GetURBState>
 800ccea:	4603      	mov	r3, r0
 800ccec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ccee:	7bbb      	ldrb	r3, [r7, #14]
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d12c      	bne.n	800cd4e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	7c1b      	ldrb	r3, [r3, #16]
 800ccf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ccfc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	8adb      	ldrh	r3, [r3, #22]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d00a      	beq.n	800cd1c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cd06:	7b7b      	ldrb	r3, [r7, #13]
 800cd08:	2b80      	cmp	r3, #128	; 0x80
 800cd0a:	d103      	bne.n	800cd14 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2203      	movs	r2, #3
 800cd10:	761a      	strb	r2, [r3, #24]
 800cd12:	e00d      	b.n	800cd30 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2205      	movs	r2, #5
 800cd18:	761a      	strb	r2, [r3, #24]
 800cd1a:	e009      	b.n	800cd30 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800cd1c:	7b7b      	ldrb	r3, [r7, #13]
 800cd1e:	2b80      	cmp	r3, #128	; 0x80
 800cd20:	d103      	bne.n	800cd2a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2209      	movs	r2, #9
 800cd26:	761a      	strb	r2, [r3, #24]
 800cd28:	e002      	b.n	800cd30 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2207      	movs	r2, #7
 800cd2e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2203      	movs	r2, #3
 800cd34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd44:	2300      	movs	r3, #0
 800cd46:	2200      	movs	r2, #0
 800cd48:	f000 fcbc 	bl	800d6c4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cd4c:	e1cb      	b.n	800d0e6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cd4e:	7bbb      	ldrb	r3, [r7, #14]
 800cd50:	2b04      	cmp	r3, #4
 800cd52:	d003      	beq.n	800cd5c <USBH_HandleControl+0xe8>
 800cd54:	7bbb      	ldrb	r3, [r7, #14]
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	f040 81c5 	bne.w	800d0e6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	220b      	movs	r2, #11
 800cd60:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2203      	movs	r2, #3
 800cd66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd76:	2300      	movs	r3, #0
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f000 fca3 	bl	800d6c4 <osMessageQueuePut>
      break;
 800cd7e:	e1b2      	b.n	800d0e6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6899      	ldr	r1, [r3, #8]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	899a      	ldrh	r2, [r3, #12]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	791b      	ldrb	r3, [r3, #4]
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 f9f2 	bl	800d182 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2204      	movs	r2, #4
 800cda2:	761a      	strb	r2, [r3, #24]
      break;
 800cda4:	e1a8      	b.n	800d0f8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	791b      	ldrb	r3, [r3, #4]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f003 ff99 	bl	8010ce4 <USBH_LL_GetURBState>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cdb6:	7bbb      	ldrb	r3, [r7, #14]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d110      	bne.n	800cdde <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2209      	movs	r2, #9
 800cdc0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2203      	movs	r2, #3
 800cdc6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f000 fc73 	bl	800d6c4 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cdde:	7bbb      	ldrb	r3, [r7, #14]
 800cde0:	2b05      	cmp	r3, #5
 800cde2:	d110      	bne.n	800ce06 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cde4:	2303      	movs	r3, #3
 800cde6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2203      	movs	r2, #3
 800cdec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f000 fc60 	bl	800d6c4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ce04:	e171      	b.n	800d0ea <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800ce06:	7bbb      	ldrb	r3, [r7, #14]
 800ce08:	2b04      	cmp	r3, #4
 800ce0a:	f040 816e 	bne.w	800d0ea <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	220b      	movs	r2, #11
 800ce12:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2203      	movs	r2, #3
 800ce18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce28:	2300      	movs	r3, #0
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f000 fc4a 	bl	800d6c4 <osMessageQueuePut>
      break;
 800ce30:	e15b      	b.n	800d0ea <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6899      	ldr	r1, [r3, #8]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	899a      	ldrh	r2, [r3, #12]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	795b      	ldrb	r3, [r3, #5]
 800ce3e:	2001      	movs	r0, #1
 800ce40:	9000      	str	r0, [sp, #0]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 f978 	bl	800d138 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2206      	movs	r2, #6
 800ce58:	761a      	strb	r2, [r3, #24]
      break;
 800ce5a:	e14d      	b.n	800d0f8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	795b      	ldrb	r3, [r3, #5]
 800ce60:	4619      	mov	r1, r3
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f003 ff3e 	bl	8010ce4 <USBH_LL_GetURBState>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ce6c:	7bbb      	ldrb	r3, [r7, #14]
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d111      	bne.n	800ce96 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2207      	movs	r2, #7
 800ce76:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2203      	movs	r2, #3
 800ce7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f000 fc18 	bl	800d6c4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ce94:	e12b      	b.n	800d0ee <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800ce96:	7bbb      	ldrb	r3, [r7, #14]
 800ce98:	2b05      	cmp	r3, #5
 800ce9a:	d113      	bne.n	800cec4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	220c      	movs	r2, #12
 800cea0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cea2:	2303      	movs	r3, #3
 800cea4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2203      	movs	r2, #3
 800ceaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ceba:	2300      	movs	r3, #0
 800cebc:	2200      	movs	r2, #0
 800cebe:	f000 fc01 	bl	800d6c4 <osMessageQueuePut>
      break;
 800cec2:	e114      	b.n	800d0ee <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cec4:	7bbb      	ldrb	r3, [r7, #14]
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	d111      	bne.n	800ceee <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2205      	movs	r2, #5
 800cece:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2203      	movs	r2, #3
 800ced4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cee4:	2300      	movs	r3, #0
 800cee6:	2200      	movs	r2, #0
 800cee8:	f000 fbec 	bl	800d6c4 <osMessageQueuePut>
      break;
 800ceec:	e0ff      	b.n	800d0ee <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ceee:	7bbb      	ldrb	r3, [r7, #14]
 800cef0:	2b04      	cmp	r3, #4
 800cef2:	f040 80fc 	bne.w	800d0ee <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	220b      	movs	r2, #11
 800cefa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cefc:	2302      	movs	r3, #2
 800cefe:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2203      	movs	r2, #3
 800cf04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf14:	2300      	movs	r3, #0
 800cf16:	2200      	movs	r2, #0
 800cf18:	f000 fbd4 	bl	800d6c4 <osMessageQueuePut>
      break;
 800cf1c:	e0e7      	b.n	800d0ee <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	791b      	ldrb	r3, [r3, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	2100      	movs	r1, #0
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f92b 	bl	800d182 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2208      	movs	r2, #8
 800cf3c:	761a      	strb	r2, [r3, #24]

      break;
 800cf3e:	e0db      	b.n	800d0f8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	791b      	ldrb	r3, [r3, #4]
 800cf44:	4619      	mov	r1, r3
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f003 fecc 	bl	8010ce4 <USBH_LL_GetURBState>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cf50:	7bbb      	ldrb	r3, [r7, #14]
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d113      	bne.n	800cf7e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	220d      	movs	r2, #13
 800cf5a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2203      	movs	r2, #3
 800cf64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf74:	2300      	movs	r3, #0
 800cf76:	2200      	movs	r2, #0
 800cf78:	f000 fba4 	bl	800d6c4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cf7c:	e0b9      	b.n	800d0f2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800cf7e:	7bbb      	ldrb	r3, [r7, #14]
 800cf80:	2b04      	cmp	r3, #4
 800cf82:	d111      	bne.n	800cfa8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	220b      	movs	r2, #11
 800cf88:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2203      	movs	r2, #3
 800cf8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f000 fb8f 	bl	800d6c4 <osMessageQueuePut>
      break;
 800cfa6:	e0a4      	b.n	800d0f2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800cfa8:	7bbb      	ldrb	r3, [r7, #14]
 800cfaa:	2b05      	cmp	r3, #5
 800cfac:	f040 80a1 	bne.w	800d0f2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800cfb0:	2303      	movs	r3, #3
 800cfb2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2203      	movs	r2, #3
 800cfb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfc8:	2300      	movs	r3, #0
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f000 fb7a 	bl	800d6c4 <osMessageQueuePut>
      break;
 800cfd0:	e08f      	b.n	800d0f2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	795b      	ldrb	r3, [r3, #5]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	9200      	str	r2, [sp, #0]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2100      	movs	r1, #0
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 f8aa 	bl	800d138 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	220a      	movs	r2, #10
 800cff4:	761a      	strb	r2, [r3, #24]
      break;
 800cff6:	e07f      	b.n	800d0f8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	795b      	ldrb	r3, [r3, #5]
 800cffc:	4619      	mov	r1, r3
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f003 fe70 	bl	8010ce4 <USBH_LL_GetURBState>
 800d004:	4603      	mov	r3, r0
 800d006:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d008:	7bbb      	ldrb	r3, [r7, #14]
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d113      	bne.n	800d036 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800d00e:	2300      	movs	r3, #0
 800d010:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	220d      	movs	r2, #13
 800d016:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2203      	movs	r2, #3
 800d01c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d02c:	2300      	movs	r3, #0
 800d02e:	2200      	movs	r2, #0
 800d030:	f000 fb48 	bl	800d6c4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d034:	e05f      	b.n	800d0f6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d036:	7bbb      	ldrb	r3, [r7, #14]
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d111      	bne.n	800d060 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2209      	movs	r2, #9
 800d040:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2203      	movs	r2, #3
 800d046:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d056:	2300      	movs	r3, #0
 800d058:	2200      	movs	r2, #0
 800d05a:	f000 fb33 	bl	800d6c4 <osMessageQueuePut>
      break;
 800d05e:	e04a      	b.n	800d0f6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800d060:	7bbb      	ldrb	r3, [r7, #14]
 800d062:	2b04      	cmp	r3, #4
 800d064:	d147      	bne.n	800d0f6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	220b      	movs	r2, #11
 800d06a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2203      	movs	r2, #3
 800d070:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d080:	2300      	movs	r3, #0
 800d082:	2200      	movs	r2, #0
 800d084:	f000 fb1e 	bl	800d6c4 <osMessageQueuePut>
      break;
 800d088:	e035      	b.n	800d0f6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	7e5b      	ldrb	r3, [r3, #25]
 800d08e:	3301      	adds	r3, #1
 800d090:	b2da      	uxtb	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	765a      	strb	r2, [r3, #25]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	7e5b      	ldrb	r3, [r3, #25]
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d806      	bhi.n	800d0ac <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d0aa:	e025      	b.n	800d0f8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0b2:	2106      	movs	r1, #6
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	795b      	ldrb	r3, [r3, #5]
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f90d 	bl	800d2e4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	791b      	ldrb	r3, [r3, #4]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f907 	bl	800d2e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d0dc:	2302      	movs	r3, #2
 800d0de:	73fb      	strb	r3, [r7, #15]
      break;
 800d0e0:	e00a      	b.n	800d0f8 <USBH_HandleControl+0x484>

    default:
      break;
 800d0e2:	bf00      	nop
 800d0e4:	e008      	b.n	800d0f8 <USBH_HandleControl+0x484>
      break;
 800d0e6:	bf00      	nop
 800d0e8:	e006      	b.n	800d0f8 <USBH_HandleControl+0x484>
      break;
 800d0ea:	bf00      	nop
 800d0ec:	e004      	b.n	800d0f8 <USBH_HandleControl+0x484>
      break;
 800d0ee:	bf00      	nop
 800d0f0:	e002      	b.n	800d0f8 <USBH_HandleControl+0x484>
      break;
 800d0f2:	bf00      	nop
 800d0f4:	e000      	b.n	800d0f8 <USBH_HandleControl+0x484>
      break;
 800d0f6:	bf00      	nop
  }

  return status;
 800d0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop

0800d104 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b088      	sub	sp, #32
 800d108:	af04      	add	r7, sp, #16
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	4613      	mov	r3, r2
 800d110:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d112:	79f9      	ldrb	r1, [r7, #7]
 800d114:	2300      	movs	r3, #0
 800d116:	9303      	str	r3, [sp, #12]
 800d118:	2308      	movs	r3, #8
 800d11a:	9302      	str	r3, [sp, #8]
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	9301      	str	r3, [sp, #4]
 800d120:	2300      	movs	r3, #0
 800d122:	9300      	str	r3, [sp, #0]
 800d124:	2300      	movs	r3, #0
 800d126:	2200      	movs	r2, #0
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f003 fdaa 	bl	8010c82 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b088      	sub	sp, #32
 800d13c:	af04      	add	r7, sp, #16
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	4611      	mov	r1, r2
 800d144:	461a      	mov	r2, r3
 800d146:	460b      	mov	r3, r1
 800d148:	80fb      	strh	r3, [r7, #6]
 800d14a:	4613      	mov	r3, r2
 800d14c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d158:	2300      	movs	r3, #0
 800d15a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d15c:	7979      	ldrb	r1, [r7, #5]
 800d15e:	7e3b      	ldrb	r3, [r7, #24]
 800d160:	9303      	str	r3, [sp, #12]
 800d162:	88fb      	ldrh	r3, [r7, #6]
 800d164:	9302      	str	r3, [sp, #8]
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	9301      	str	r3, [sp, #4]
 800d16a:	2301      	movs	r3, #1
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	2300      	movs	r3, #0
 800d170:	2200      	movs	r2, #0
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f003 fd85 	bl	8010c82 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b088      	sub	sp, #32
 800d186:	af04      	add	r7, sp, #16
 800d188:	60f8      	str	r0, [r7, #12]
 800d18a:	60b9      	str	r1, [r7, #8]
 800d18c:	4611      	mov	r1, r2
 800d18e:	461a      	mov	r2, r3
 800d190:	460b      	mov	r3, r1
 800d192:	80fb      	strh	r3, [r7, #6]
 800d194:	4613      	mov	r3, r2
 800d196:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d198:	7979      	ldrb	r1, [r7, #5]
 800d19a:	2300      	movs	r3, #0
 800d19c:	9303      	str	r3, [sp, #12]
 800d19e:	88fb      	ldrh	r3, [r7, #6]
 800d1a0:	9302      	str	r3, [sp, #8]
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	9301      	str	r3, [sp, #4]
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f003 fd67 	bl	8010c82 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d1b4:	2300      	movs	r3, #0

}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b088      	sub	sp, #32
 800d1c2:	af04      	add	r7, sp, #16
 800d1c4:	60f8      	str	r0, [r7, #12]
 800d1c6:	60b9      	str	r1, [r7, #8]
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	80fb      	strh	r3, [r7, #6]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d001      	beq.n	800d1e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d1e2:	7979      	ldrb	r1, [r7, #5]
 800d1e4:	7e3b      	ldrb	r3, [r7, #24]
 800d1e6:	9303      	str	r3, [sp, #12]
 800d1e8:	88fb      	ldrh	r3, [r7, #6]
 800d1ea:	9302      	str	r3, [sp, #8]
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	9301      	str	r3, [sp, #4]
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	9300      	str	r3, [sp, #0]
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f003 fd42 	bl	8010c82 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b088      	sub	sp, #32
 800d20c:	af04      	add	r7, sp, #16
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	4611      	mov	r1, r2
 800d214:	461a      	mov	r2, r3
 800d216:	460b      	mov	r3, r1
 800d218:	80fb      	strh	r3, [r7, #6]
 800d21a:	4613      	mov	r3, r2
 800d21c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d21e:	7979      	ldrb	r1, [r7, #5]
 800d220:	2300      	movs	r3, #0
 800d222:	9303      	str	r3, [sp, #12]
 800d224:	88fb      	ldrh	r3, [r7, #6]
 800d226:	9302      	str	r3, [sp, #8]
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	9301      	str	r3, [sp, #4]
 800d22c:	2301      	movs	r3, #1
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	2302      	movs	r3, #2
 800d232:	2201      	movs	r2, #1
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f003 fd24 	bl	8010c82 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b086      	sub	sp, #24
 800d248:	af04      	add	r7, sp, #16
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	4608      	mov	r0, r1
 800d24e:	4611      	mov	r1, r2
 800d250:	461a      	mov	r2, r3
 800d252:	4603      	mov	r3, r0
 800d254:	70fb      	strb	r3, [r7, #3]
 800d256:	460b      	mov	r3, r1
 800d258:	70bb      	strb	r3, [r7, #2]
 800d25a:	4613      	mov	r3, r2
 800d25c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d25e:	7878      	ldrb	r0, [r7, #1]
 800d260:	78ba      	ldrb	r2, [r7, #2]
 800d262:	78f9      	ldrb	r1, [r7, #3]
 800d264:	8b3b      	ldrh	r3, [r7, #24]
 800d266:	9302      	str	r3, [sp, #8]
 800d268:	7d3b      	ldrb	r3, [r7, #20]
 800d26a:	9301      	str	r3, [sp, #4]
 800d26c:	7c3b      	ldrb	r3, [r7, #16]
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	4603      	mov	r3, r0
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f003 fcb7 	bl	8010be6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3708      	adds	r7, #8
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b082      	sub	sp, #8
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	460b      	mov	r3, r1
 800d28c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d28e:	78fb      	ldrb	r3, [r7, #3]
 800d290:	4619      	mov	r1, r3
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f003 fcd6 	bl	8010c44 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d298:	2300      	movs	r3, #0
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3708      	adds	r7, #8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 f836 	bl	800d320 <USBH_GetFreePipe>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d2b8:	89fb      	ldrh	r3, [r7, #14]
 800d2ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d00a      	beq.n	800d2d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d2c2:	78fa      	ldrb	r2, [r7, #3]
 800d2c4:	89fb      	ldrh	r3, [r7, #14]
 800d2c6:	f003 030f 	and.w	r3, r3, #15
 800d2ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2ce:	6879      	ldr	r1, [r7, #4]
 800d2d0:	33e0      	adds	r3, #224	; 0xe0
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	440b      	add	r3, r1
 800d2d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d2d8:	89fb      	ldrh	r3, [r7, #14]
 800d2da:	b2db      	uxtb	r3, r3
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3710      	adds	r7, #16
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d2f0:	78fb      	ldrb	r3, [r7, #3]
 800d2f2:	2b0a      	cmp	r3, #10
 800d2f4:	d80d      	bhi.n	800d312 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d2f6:	78fb      	ldrb	r3, [r7, #3]
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	33e0      	adds	r3, #224	; 0xe0
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	4413      	add	r3, r2
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	78fb      	ldrb	r3, [r7, #3]
 800d304:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d308:	6879      	ldr	r1, [r7, #4]
 800d30a:	33e0      	adds	r3, #224	; 0xe0
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	440b      	add	r3, r1
 800d310:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d328:	2300      	movs	r3, #0
 800d32a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d32c:	2300      	movs	r3, #0
 800d32e:	73fb      	strb	r3, [r7, #15]
 800d330:	e00f      	b.n	800d352 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d332:	7bfb      	ldrb	r3, [r7, #15]
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	33e0      	adds	r3, #224	; 0xe0
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d342:	2b00      	cmp	r3, #0
 800d344:	d102      	bne.n	800d34c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d346:	7bfb      	ldrb	r3, [r7, #15]
 800d348:	b29b      	uxth	r3, r3
 800d34a:	e007      	b.n	800d35c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d34c:	7bfb      	ldrb	r3, [r7, #15]
 800d34e:	3301      	adds	r3, #1
 800d350:	73fb      	strb	r3, [r7, #15]
 800d352:	7bfb      	ldrb	r3, [r7, #15]
 800d354:	2b0a      	cmp	r3, #10
 800d356:	d9ec      	bls.n	800d332 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d358:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <__NVIC_SetPriority>:
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	4603      	mov	r3, r0
 800d370:	6039      	str	r1, [r7, #0]
 800d372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	db0a      	blt.n	800d392 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	490c      	ldr	r1, [pc, #48]	; (800d3b4 <__NVIC_SetPriority+0x4c>)
 800d382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d386:	0112      	lsls	r2, r2, #4
 800d388:	b2d2      	uxtb	r2, r2
 800d38a:	440b      	add	r3, r1
 800d38c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d390:	e00a      	b.n	800d3a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	b2da      	uxtb	r2, r3
 800d396:	4908      	ldr	r1, [pc, #32]	; (800d3b8 <__NVIC_SetPriority+0x50>)
 800d398:	79fb      	ldrb	r3, [r7, #7]
 800d39a:	f003 030f 	and.w	r3, r3, #15
 800d39e:	3b04      	subs	r3, #4
 800d3a0:	0112      	lsls	r2, r2, #4
 800d3a2:	b2d2      	uxtb	r2, r2
 800d3a4:	440b      	add	r3, r1
 800d3a6:	761a      	strb	r2, [r3, #24]
}
 800d3a8:	bf00      	nop
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr
 800d3b4:	e000e100 	.word	0xe000e100
 800d3b8:	e000ed00 	.word	0xe000ed00

0800d3bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d3c0:	4b05      	ldr	r3, [pc, #20]	; (800d3d8 <SysTick_Handler+0x1c>)
 800d3c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d3c4:	f001 ff56 	bl	800f274 <xTaskGetSchedulerState>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d001      	beq.n	800d3d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d3ce:	f002 ffbb 	bl	8010348 <xPortSysTickHandler>
  }
}
 800d3d2:	bf00      	nop
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	e000e010 	.word	0xe000e010

0800d3dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	f06f 0004 	mvn.w	r0, #4
 800d3e6:	f7ff ffbf 	bl	800d368 <__NVIC_SetPriority>
#endif
}
 800d3ea:	bf00      	nop
 800d3ec:	bd80      	pop	{r7, pc}
	...

0800d3f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3f6:	f3ef 8305 	mrs	r3, IPSR
 800d3fa:	603b      	str	r3, [r7, #0]
  return(result);
 800d3fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d003      	beq.n	800d40a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d402:	f06f 0305 	mvn.w	r3, #5
 800d406:	607b      	str	r3, [r7, #4]
 800d408:	e00c      	b.n	800d424 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d40a:	4b0a      	ldr	r3, [pc, #40]	; (800d434 <osKernelInitialize+0x44>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d105      	bne.n	800d41e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d412:	4b08      	ldr	r3, [pc, #32]	; (800d434 <osKernelInitialize+0x44>)
 800d414:	2201      	movs	r2, #1
 800d416:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d418:	2300      	movs	r3, #0
 800d41a:	607b      	str	r3, [r7, #4]
 800d41c:	e002      	b.n	800d424 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d41e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d422:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d424:	687b      	ldr	r3, [r7, #4]
}
 800d426:	4618      	mov	r0, r3
 800d428:	370c      	adds	r7, #12
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr
 800d432:	bf00      	nop
 800d434:	200000e8 	.word	0x200000e8

0800d438 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d43e:	f3ef 8305 	mrs	r3, IPSR
 800d442:	603b      	str	r3, [r7, #0]
  return(result);
 800d444:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d446:	2b00      	cmp	r3, #0
 800d448:	d003      	beq.n	800d452 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d44a:	f06f 0305 	mvn.w	r3, #5
 800d44e:	607b      	str	r3, [r7, #4]
 800d450:	e010      	b.n	800d474 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d452:	4b0b      	ldr	r3, [pc, #44]	; (800d480 <osKernelStart+0x48>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b01      	cmp	r3, #1
 800d458:	d109      	bne.n	800d46e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d45a:	f7ff ffbf 	bl	800d3dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d45e:	4b08      	ldr	r3, [pc, #32]	; (800d480 <osKernelStart+0x48>)
 800d460:	2202      	movs	r2, #2
 800d462:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d464:	f001 faaa 	bl	800e9bc <vTaskStartScheduler>
      stat = osOK;
 800d468:	2300      	movs	r3, #0
 800d46a:	607b      	str	r3, [r7, #4]
 800d46c:	e002      	b.n	800d474 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d46e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d472:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d474:	687b      	ldr	r3, [r7, #4]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	200000e8 	.word	0x200000e8

0800d484 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d484:	b580      	push	{r7, lr}
 800d486:	b08e      	sub	sp, #56	; 0x38
 800d488:	af04      	add	r7, sp, #16
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d490:	2300      	movs	r3, #0
 800d492:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d494:	f3ef 8305 	mrs	r3, IPSR
 800d498:	617b      	str	r3, [r7, #20]
  return(result);
 800d49a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d17e      	bne.n	800d59e <osThreadNew+0x11a>
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d07b      	beq.n	800d59e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d4a6:	2380      	movs	r3, #128	; 0x80
 800d4a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d4aa:	2318      	movs	r3, #24
 800d4ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d4b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d045      	beq.n	800d54a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d002      	beq.n	800d4cc <osThreadNew+0x48>
        name = attr->name;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	699b      	ldr	r3, [r3, #24]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d002      	beq.n	800d4da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	699b      	ldr	r3, [r3, #24]
 800d4d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d008      	beq.n	800d4f2 <osThreadNew+0x6e>
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	2b38      	cmp	r3, #56	; 0x38
 800d4e4:	d805      	bhi.n	800d4f2 <osThreadNew+0x6e>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	f003 0301 	and.w	r3, r3, #1
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d001      	beq.n	800d4f6 <osThreadNew+0x72>
        return (NULL);
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	e054      	b.n	800d5a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	695b      	ldr	r3, [r3, #20]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d003      	beq.n	800d506 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	695b      	ldr	r3, [r3, #20]
 800d502:	089b      	lsrs	r3, r3, #2
 800d504:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	689b      	ldr	r3, [r3, #8]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d00e      	beq.n	800d52c <osThreadNew+0xa8>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	2bbb      	cmp	r3, #187	; 0xbb
 800d514:	d90a      	bls.n	800d52c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d006      	beq.n	800d52c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	695b      	ldr	r3, [r3, #20]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <osThreadNew+0xa8>
        mem = 1;
 800d526:	2301      	movs	r3, #1
 800d528:	61bb      	str	r3, [r7, #24]
 800d52a:	e010      	b.n	800d54e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d10c      	bne.n	800d54e <osThreadNew+0xca>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d108      	bne.n	800d54e <osThreadNew+0xca>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	691b      	ldr	r3, [r3, #16]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d104      	bne.n	800d54e <osThreadNew+0xca>
          mem = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	61bb      	str	r3, [r7, #24]
 800d548:	e001      	b.n	800d54e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d54a:	2300      	movs	r3, #0
 800d54c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d110      	bne.n	800d576 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d55c:	9202      	str	r2, [sp, #8]
 800d55e:	9301      	str	r3, [sp, #4]
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	9300      	str	r3, [sp, #0]
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	6a3a      	ldr	r2, [r7, #32]
 800d568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d56a:	68f8      	ldr	r0, [r7, #12]
 800d56c:	f001 f83a 	bl	800e5e4 <xTaskCreateStatic>
 800d570:	4603      	mov	r3, r0
 800d572:	613b      	str	r3, [r7, #16]
 800d574:	e013      	b.n	800d59e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d110      	bne.n	800d59e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d57c:	6a3b      	ldr	r3, [r7, #32]
 800d57e:	b29a      	uxth	r2, r3
 800d580:	f107 0310 	add.w	r3, r7, #16
 800d584:	9301      	str	r3, [sp, #4]
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	9300      	str	r3, [sp, #0]
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f001 f885 	bl	800e69e <xTaskCreate>
 800d594:	4603      	mov	r3, r0
 800d596:	2b01      	cmp	r3, #1
 800d598:	d001      	beq.n	800d59e <osThreadNew+0x11a>
            hTask = NULL;
 800d59a:	2300      	movs	r3, #0
 800d59c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d59e:	693b      	ldr	r3, [r7, #16]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3728      	adds	r7, #40	; 0x28
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5b0:	f3ef 8305 	mrs	r3, IPSR
 800d5b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800d5b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d003      	beq.n	800d5c4 <osDelay+0x1c>
    stat = osErrorISR;
 800d5bc:	f06f 0305 	mvn.w	r3, #5
 800d5c0:	60fb      	str	r3, [r7, #12]
 800d5c2:	e007      	b.n	800d5d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d002      	beq.n	800d5d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f001 f9c0 	bl	800e954 <vTaskDelay>
    }
  }

  return (stat);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b08a      	sub	sp, #40	; 0x28
 800d5e2:	af02      	add	r7, sp, #8
 800d5e4:	60f8      	str	r0, [r7, #12]
 800d5e6:	60b9      	str	r1, [r7, #8]
 800d5e8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5ee:	f3ef 8305 	mrs	r3, IPSR
 800d5f2:	613b      	str	r3, [r7, #16]
  return(result);
 800d5f4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d15f      	bne.n	800d6ba <osMessageQueueNew+0xdc>
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d05c      	beq.n	800d6ba <osMessageQueueNew+0xdc>
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d059      	beq.n	800d6ba <osMessageQueueNew+0xdc>
    mem = -1;
 800d606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d60a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d029      	beq.n	800d666 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d012      	beq.n	800d640 <osMessageQueueNew+0x62>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	2b4f      	cmp	r3, #79	; 0x4f
 800d620:	d90e      	bls.n	800d640 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00a      	beq.n	800d640 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	695a      	ldr	r2, [r3, #20]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	68b9      	ldr	r1, [r7, #8]
 800d632:	fb01 f303 	mul.w	r3, r1, r3
 800d636:	429a      	cmp	r2, r3
 800d638:	d302      	bcc.n	800d640 <osMessageQueueNew+0x62>
        mem = 1;
 800d63a:	2301      	movs	r3, #1
 800d63c:	61bb      	str	r3, [r7, #24]
 800d63e:	e014      	b.n	800d66a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	689b      	ldr	r3, [r3, #8]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d110      	bne.n	800d66a <osMessageQueueNew+0x8c>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d10c      	bne.n	800d66a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d654:	2b00      	cmp	r3, #0
 800d656:	d108      	bne.n	800d66a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	695b      	ldr	r3, [r3, #20]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d104      	bne.n	800d66a <osMessageQueueNew+0x8c>
          mem = 0;
 800d660:	2300      	movs	r3, #0
 800d662:	61bb      	str	r3, [r7, #24]
 800d664:	e001      	b.n	800d66a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d666:	2300      	movs	r3, #0
 800d668:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d10b      	bne.n	800d688 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	691a      	ldr	r2, [r3, #16]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	2100      	movs	r1, #0
 800d67a:	9100      	str	r1, [sp, #0]
 800d67c:	68b9      	ldr	r1, [r7, #8]
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f000 fa2e 	bl	800dae0 <xQueueGenericCreateStatic>
 800d684:	61f8      	str	r0, [r7, #28]
 800d686:	e008      	b.n	800d69a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d105      	bne.n	800d69a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d68e:	2200      	movs	r2, #0
 800d690:	68b9      	ldr	r1, [r7, #8]
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f000 fa9c 	bl	800dbd0 <xQueueGenericCreate>
 800d698:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00c      	beq.n	800d6ba <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d003      	beq.n	800d6ae <osMessageQueueNew+0xd0>
        name = attr->name;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	617b      	str	r3, [r7, #20]
 800d6ac:	e001      	b.n	800d6b2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d6b2:	6979      	ldr	r1, [r7, #20]
 800d6b4:	69f8      	ldr	r0, [r7, #28]
 800d6b6:	f000 ff37 	bl	800e528 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d6ba:	69fb      	ldr	r3, [r7, #28]
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3720      	adds	r7, #32
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b088      	sub	sp, #32
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	603b      	str	r3, [r7, #0]
 800d6d0:	4613      	mov	r3, r2
 800d6d2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6dc:	f3ef 8305 	mrs	r3, IPSR
 800d6e0:	617b      	str	r3, [r7, #20]
  return(result);
 800d6e2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d028      	beq.n	800d73a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d005      	beq.n	800d6fa <osMessageQueuePut+0x36>
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d002      	beq.n	800d6fa <osMessageQueuePut+0x36>
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d003      	beq.n	800d702 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d6fa:	f06f 0303 	mvn.w	r3, #3
 800d6fe:	61fb      	str	r3, [r7, #28]
 800d700:	e038      	b.n	800d774 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d702:	2300      	movs	r3, #0
 800d704:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d706:	f107 0210 	add.w	r2, r7, #16
 800d70a:	2300      	movs	r3, #0
 800d70c:	68b9      	ldr	r1, [r7, #8]
 800d70e:	69b8      	ldr	r0, [r7, #24]
 800d710:	f000 fbba 	bl	800de88 <xQueueGenericSendFromISR>
 800d714:	4603      	mov	r3, r0
 800d716:	2b01      	cmp	r3, #1
 800d718:	d003      	beq.n	800d722 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d71a:	f06f 0302 	mvn.w	r3, #2
 800d71e:	61fb      	str	r3, [r7, #28]
 800d720:	e028      	b.n	800d774 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d025      	beq.n	800d774 <osMessageQueuePut+0xb0>
 800d728:	4b15      	ldr	r3, [pc, #84]	; (800d780 <osMessageQueuePut+0xbc>)
 800d72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d72e:	601a      	str	r2, [r3, #0]
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	e01c      	b.n	800d774 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d002      	beq.n	800d746 <osMessageQueuePut+0x82>
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d103      	bne.n	800d74e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d746:	f06f 0303 	mvn.w	r3, #3
 800d74a:	61fb      	str	r3, [r7, #28]
 800d74c:	e012      	b.n	800d774 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d74e:	2300      	movs	r3, #0
 800d750:	683a      	ldr	r2, [r7, #0]
 800d752:	68b9      	ldr	r1, [r7, #8]
 800d754:	69b8      	ldr	r0, [r7, #24]
 800d756:	f000 fa99 	bl	800dc8c <xQueueGenericSend>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d009      	beq.n	800d774 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d003      	beq.n	800d76e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d766:	f06f 0301 	mvn.w	r3, #1
 800d76a:	61fb      	str	r3, [r7, #28]
 800d76c:	e002      	b.n	800d774 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d76e:	f06f 0302 	mvn.w	r3, #2
 800d772:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d774:	69fb      	ldr	r3, [r7, #28]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3720      	adds	r7, #32
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	e000ed04 	.word	0xe000ed04

0800d784 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d784:	b580      	push	{r7, lr}
 800d786:	b088      	sub	sp, #32
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
 800d790:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d796:	2300      	movs	r3, #0
 800d798:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d79a:	f3ef 8305 	mrs	r3, IPSR
 800d79e:	617b      	str	r3, [r7, #20]
  return(result);
 800d7a0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d028      	beq.n	800d7f8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d005      	beq.n	800d7b8 <osMessageQueueGet+0x34>
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d002      	beq.n	800d7b8 <osMessageQueueGet+0x34>
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d003      	beq.n	800d7c0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d7b8:	f06f 0303 	mvn.w	r3, #3
 800d7bc:	61fb      	str	r3, [r7, #28]
 800d7be:	e037      	b.n	800d830 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d7c4:	f107 0310 	add.w	r3, r7, #16
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	68b9      	ldr	r1, [r7, #8]
 800d7cc:	69b8      	ldr	r0, [r7, #24]
 800d7ce:	f000 fcd7 	bl	800e180 <xQueueReceiveFromISR>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d003      	beq.n	800d7e0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d7d8:	f06f 0302 	mvn.w	r3, #2
 800d7dc:	61fb      	str	r3, [r7, #28]
 800d7de:	e027      	b.n	800d830 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d024      	beq.n	800d830 <osMessageQueueGet+0xac>
 800d7e6:	4b15      	ldr	r3, [pc, #84]	; (800d83c <osMessageQueueGet+0xb8>)
 800d7e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7ec:	601a      	str	r2, [r3, #0]
 800d7ee:	f3bf 8f4f 	dsb	sy
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	e01b      	b.n	800d830 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d002      	beq.n	800d804 <osMessageQueueGet+0x80>
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d103      	bne.n	800d80c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d804:	f06f 0303 	mvn.w	r3, #3
 800d808:	61fb      	str	r3, [r7, #28]
 800d80a:	e011      	b.n	800d830 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d80c:	683a      	ldr	r2, [r7, #0]
 800d80e:	68b9      	ldr	r1, [r7, #8]
 800d810:	69b8      	ldr	r0, [r7, #24]
 800d812:	f000 fbd5 	bl	800dfc0 <xQueueReceive>
 800d816:	4603      	mov	r3, r0
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d009      	beq.n	800d830 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d003      	beq.n	800d82a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d822:	f06f 0301 	mvn.w	r3, #1
 800d826:	61fb      	str	r3, [r7, #28]
 800d828:	e002      	b.n	800d830 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d82a:	f06f 0302 	mvn.w	r3, #2
 800d82e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d830:	69fb      	ldr	r3, [r7, #28]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3720      	adds	r7, #32
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	e000ed04 	.word	0xe000ed04

0800d840 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	4a07      	ldr	r2, [pc, #28]	; (800d86c <vApplicationGetIdleTaskMemory+0x2c>)
 800d850:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	4a06      	ldr	r2, [pc, #24]	; (800d870 <vApplicationGetIdleTaskMemory+0x30>)
 800d856:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2280      	movs	r2, #128	; 0x80
 800d85c:	601a      	str	r2, [r3, #0]
}
 800d85e:	bf00      	nop
 800d860:	3714      	adds	r7, #20
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	200000ec 	.word	0x200000ec
 800d870:	200001a8 	.word	0x200001a8

0800d874 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d874:	b480      	push	{r7}
 800d876:	b085      	sub	sp, #20
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	4a07      	ldr	r2, [pc, #28]	; (800d8a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800d884:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	4a06      	ldr	r2, [pc, #24]	; (800d8a4 <vApplicationGetTimerTaskMemory+0x30>)
 800d88a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d892:	601a      	str	r2, [r3, #0]
}
 800d894:	bf00      	nop
 800d896:	3714      	adds	r7, #20
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr
 800d8a0:	200003a8 	.word	0x200003a8
 800d8a4:	20000464 	.word	0x20000464

0800d8a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f103 0208 	add.w	r2, r3, #8
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f103 0208 	add.w	r2, r3, #8
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f103 0208 	add.w	r2, r3, #8
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d8dc:	bf00      	nop
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d8f6:	bf00      	nop
 800d8f8:	370c      	adds	r7, #12
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr

0800d902 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d902:	b480      	push	{r7}
 800d904:	b085      	sub	sp, #20
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
 800d90a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	689a      	ldr	r2, [r3, #8]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	683a      	ldr	r2, [r7, #0]
 800d92c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	1c5a      	adds	r2, r3, #1
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	601a      	str	r2, [r3, #0]
}
 800d93e:	bf00      	nop
 800d940:	3714      	adds	r7, #20
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d94a:	b480      	push	{r7}
 800d94c:	b085      	sub	sp, #20
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d960:	d103      	bne.n	800d96a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	691b      	ldr	r3, [r3, #16]
 800d966:	60fb      	str	r3, [r7, #12]
 800d968:	e00c      	b.n	800d984 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	3308      	adds	r3, #8
 800d96e:	60fb      	str	r3, [r7, #12]
 800d970:	e002      	b.n	800d978 <vListInsert+0x2e>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	60fb      	str	r3, [r7, #12]
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68ba      	ldr	r2, [r7, #8]
 800d980:	429a      	cmp	r2, r3
 800d982:	d2f6      	bcs.n	800d972 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	685a      	ldr	r2, [r3, #4]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	683a      	ldr	r2, [r7, #0]
 800d992:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	683a      	ldr	r2, [r7, #0]
 800d99e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	1c5a      	adds	r2, r3, #1
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	601a      	str	r2, [r3, #0]
}
 800d9b0:	bf00      	nop
 800d9b2:	3714      	adds	r7, #20
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr

0800d9bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b085      	sub	sp, #20
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	691b      	ldr	r3, [r3, #16]
 800d9c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	6892      	ldr	r2, [r2, #8]
 800d9d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	6852      	ldr	r2, [r2, #4]
 800d9dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d103      	bne.n	800d9f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	689a      	ldr	r2, [r3, #8]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	1e5a      	subs	r2, r3, #1
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
}
 800da04:	4618      	mov	r0, r3
 800da06:	3714      	adds	r7, #20
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10a      	bne.n	800da3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800da36:	bf00      	nop
 800da38:	e7fe      	b.n	800da38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800da3a:	f002 fbf3 	bl	8010224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da46:	68f9      	ldr	r1, [r7, #12]
 800da48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800da4a:	fb01 f303 	mul.w	r3, r1, r3
 800da4e:	441a      	add	r2, r3
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2200      	movs	r2, #0
 800da58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da6a:	3b01      	subs	r3, #1
 800da6c:	68f9      	ldr	r1, [r7, #12]
 800da6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800da70:	fb01 f303 	mul.w	r3, r1, r3
 800da74:	441a      	add	r2, r3
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	22ff      	movs	r2, #255	; 0xff
 800da7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	22ff      	movs	r2, #255	; 0xff
 800da86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d114      	bne.n	800daba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	691b      	ldr	r3, [r3, #16]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d01a      	beq.n	800dace <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	3310      	adds	r3, #16
 800da9c:	4618      	mov	r0, r3
 800da9e:	f001 fa27 	bl	800eef0 <xTaskRemoveFromEventList>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d012      	beq.n	800dace <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800daa8:	4b0c      	ldr	r3, [pc, #48]	; (800dadc <xQueueGenericReset+0xcc>)
 800daaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daae:	601a      	str	r2, [r3, #0]
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	e009      	b.n	800dace <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	3310      	adds	r3, #16
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7ff fef2 	bl	800d8a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	3324      	adds	r3, #36	; 0x24
 800dac8:	4618      	mov	r0, r3
 800daca:	f7ff feed 	bl	800d8a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dace:	f002 fbd9 	bl	8010284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dad2:	2301      	movs	r3, #1
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	e000ed04 	.word	0xe000ed04

0800dae0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b08e      	sub	sp, #56	; 0x38
 800dae4:	af02      	add	r7, sp, #8
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
 800daec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d10a      	bne.n	800db0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800daf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db06:	bf00      	nop
 800db08:	e7fe      	b.n	800db08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10a      	bne.n	800db26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800db10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db22:	bf00      	nop
 800db24:	e7fe      	b.n	800db24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d002      	beq.n	800db32 <xQueueGenericCreateStatic+0x52>
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <xQueueGenericCreateStatic+0x56>
 800db32:	2301      	movs	r3, #1
 800db34:	e000      	b.n	800db38 <xQueueGenericCreateStatic+0x58>
 800db36:	2300      	movs	r3, #0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d10a      	bne.n	800db52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800db3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db40:	f383 8811 	msr	BASEPRI, r3
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	623b      	str	r3, [r7, #32]
}
 800db4e:	bf00      	nop
 800db50:	e7fe      	b.n	800db50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d102      	bne.n	800db5e <xQueueGenericCreateStatic+0x7e>
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d101      	bne.n	800db62 <xQueueGenericCreateStatic+0x82>
 800db5e:	2301      	movs	r3, #1
 800db60:	e000      	b.n	800db64 <xQueueGenericCreateStatic+0x84>
 800db62:	2300      	movs	r3, #0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d10a      	bne.n	800db7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800db68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6c:	f383 8811 	msr	BASEPRI, r3
 800db70:	f3bf 8f6f 	isb	sy
 800db74:	f3bf 8f4f 	dsb	sy
 800db78:	61fb      	str	r3, [r7, #28]
}
 800db7a:	bf00      	nop
 800db7c:	e7fe      	b.n	800db7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800db7e:	2350      	movs	r3, #80	; 0x50
 800db80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	2b50      	cmp	r3, #80	; 0x50
 800db86:	d00a      	beq.n	800db9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800db88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8c:	f383 8811 	msr	BASEPRI, r3
 800db90:	f3bf 8f6f 	isb	sy
 800db94:	f3bf 8f4f 	dsb	sy
 800db98:	61bb      	str	r3, [r7, #24]
}
 800db9a:	bf00      	nop
 800db9c:	e7fe      	b.n	800db9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800db9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00d      	beq.n	800dbc6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbac:	2201      	movs	r2, #1
 800dbae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dbb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb8:	9300      	str	r3, [sp, #0]
 800dbba:	4613      	mov	r3, r2
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	68b9      	ldr	r1, [r7, #8]
 800dbc0:	68f8      	ldr	r0, [r7, #12]
 800dbc2:	f000 f83f 	bl	800dc44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3730      	adds	r7, #48	; 0x30
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b08a      	sub	sp, #40	; 0x28
 800dbd4:	af02      	add	r7, sp, #8
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	4613      	mov	r3, r2
 800dbdc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d10a      	bne.n	800dbfa <xQueueGenericCreate+0x2a>
	__asm volatile
 800dbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe8:	f383 8811 	msr	BASEPRI, r3
 800dbec:	f3bf 8f6f 	isb	sy
 800dbf0:	f3bf 8f4f 	dsb	sy
 800dbf4:	613b      	str	r3, [r7, #16]
}
 800dbf6:	bf00      	nop
 800dbf8:	e7fe      	b.n	800dbf8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	68ba      	ldr	r2, [r7, #8]
 800dbfe:	fb02 f303 	mul.w	r3, r2, r3
 800dc02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	3350      	adds	r3, #80	; 0x50
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f002 fc2d 	bl	8010468 <pvPortMalloc>
 800dc0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dc10:	69bb      	ldr	r3, [r7, #24]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d011      	beq.n	800dc3a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dc16:	69bb      	ldr	r3, [r7, #24]
 800dc18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	3350      	adds	r3, #80	; 0x50
 800dc1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	2200      	movs	r2, #0
 800dc24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dc28:	79fa      	ldrb	r2, [r7, #7]
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	9300      	str	r3, [sp, #0]
 800dc2e:	4613      	mov	r3, r2
 800dc30:	697a      	ldr	r2, [r7, #20]
 800dc32:	68b9      	ldr	r1, [r7, #8]
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	f000 f805 	bl	800dc44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dc3a:	69bb      	ldr	r3, [r7, #24]
	}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3720      	adds	r7, #32
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	607a      	str	r2, [r7, #4]
 800dc50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d103      	bne.n	800dc60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	69ba      	ldr	r2, [r7, #24]
 800dc5c:	601a      	str	r2, [r3, #0]
 800dc5e:	e002      	b.n	800dc66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	68ba      	ldr	r2, [r7, #8]
 800dc70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dc72:	2101      	movs	r1, #1
 800dc74:	69b8      	ldr	r0, [r7, #24]
 800dc76:	f7ff fecb 	bl	800da10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	78fa      	ldrb	r2, [r7, #3]
 800dc7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dc82:	bf00      	nop
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
	...

0800dc8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b08e      	sub	sp, #56	; 0x38
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
 800dc98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10a      	bne.n	800dcbe <xQueueGenericSend+0x32>
	__asm volatile
 800dca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcac:	f383 8811 	msr	BASEPRI, r3
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dcba:	bf00      	nop
 800dcbc:	e7fe      	b.n	800dcbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d103      	bne.n	800dccc <xQueueGenericSend+0x40>
 800dcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d101      	bne.n	800dcd0 <xQueueGenericSend+0x44>
 800dccc:	2301      	movs	r3, #1
 800dcce:	e000      	b.n	800dcd2 <xQueueGenericSend+0x46>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d10a      	bne.n	800dcec <xQueueGenericSend+0x60>
	__asm volatile
 800dcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcda:	f383 8811 	msr	BASEPRI, r3
 800dcde:	f3bf 8f6f 	isb	sy
 800dce2:	f3bf 8f4f 	dsb	sy
 800dce6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dce8:	bf00      	nop
 800dcea:	e7fe      	b.n	800dcea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	d103      	bne.n	800dcfa <xQueueGenericSend+0x6e>
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d101      	bne.n	800dcfe <xQueueGenericSend+0x72>
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e000      	b.n	800dd00 <xQueueGenericSend+0x74>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10a      	bne.n	800dd1a <xQueueGenericSend+0x8e>
	__asm volatile
 800dd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	623b      	str	r3, [r7, #32]
}
 800dd16:	bf00      	nop
 800dd18:	e7fe      	b.n	800dd18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd1a:	f001 faab 	bl	800f274 <xTaskGetSchedulerState>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d102      	bne.n	800dd2a <xQueueGenericSend+0x9e>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d101      	bne.n	800dd2e <xQueueGenericSend+0xa2>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e000      	b.n	800dd30 <xQueueGenericSend+0xa4>
 800dd2e:	2300      	movs	r3, #0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d10a      	bne.n	800dd4a <xQueueGenericSend+0xbe>
	__asm volatile
 800dd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd38:	f383 8811 	msr	BASEPRI, r3
 800dd3c:	f3bf 8f6f 	isb	sy
 800dd40:	f3bf 8f4f 	dsb	sy
 800dd44:	61fb      	str	r3, [r7, #28]
}
 800dd46:	bf00      	nop
 800dd48:	e7fe      	b.n	800dd48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd4a:	f002 fa6b 	bl	8010224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d302      	bcc.n	800dd60 <xQueueGenericSend+0xd4>
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d129      	bne.n	800ddb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd60:	683a      	ldr	r2, [r7, #0]
 800dd62:	68b9      	ldr	r1, [r7, #8]
 800dd64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd66:	f000 faa9 	bl	800e2bc <prvCopyDataToQueue>
 800dd6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d010      	beq.n	800dd96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd76:	3324      	adds	r3, #36	; 0x24
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f001 f8b9 	bl	800eef0 <xTaskRemoveFromEventList>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d013      	beq.n	800ddac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dd84:	4b3f      	ldr	r3, [pc, #252]	; (800de84 <xQueueGenericSend+0x1f8>)
 800dd86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	f3bf 8f6f 	isb	sy
 800dd94:	e00a      	b.n	800ddac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d007      	beq.n	800ddac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dd9c:	4b39      	ldr	r3, [pc, #228]	; (800de84 <xQueueGenericSend+0x1f8>)
 800dd9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dda2:	601a      	str	r2, [r3, #0]
 800dda4:	f3bf 8f4f 	dsb	sy
 800dda8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ddac:	f002 fa6a 	bl	8010284 <vPortExitCritical>
				return pdPASS;
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	e063      	b.n	800de7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d103      	bne.n	800ddc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ddba:	f002 fa63 	bl	8010284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	e05c      	b.n	800de7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d106      	bne.n	800ddd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddc8:	f107 0314 	add.w	r3, r7, #20
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f001 f8f3 	bl	800efb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ddd6:	f002 fa55 	bl	8010284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ddda:	f000 fe5f 	bl	800ea9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddde:	f002 fa21 	bl	8010224 <vPortEnterCritical>
 800dde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dde8:	b25b      	sxtb	r3, r3
 800ddea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddee:	d103      	bne.n	800ddf8 <xQueueGenericSend+0x16c>
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddfe:	b25b      	sxtb	r3, r3
 800de00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de04:	d103      	bne.n	800de0e <xQueueGenericSend+0x182>
 800de06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de08:	2200      	movs	r2, #0
 800de0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de0e:	f002 fa39 	bl	8010284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de12:	1d3a      	adds	r2, r7, #4
 800de14:	f107 0314 	add.w	r3, r7, #20
 800de18:	4611      	mov	r1, r2
 800de1a:	4618      	mov	r0, r3
 800de1c:	f001 f8e2 	bl	800efe4 <xTaskCheckForTimeOut>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d124      	bne.n	800de70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800de26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de28:	f000 fb40 	bl	800e4ac <prvIsQueueFull>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d018      	beq.n	800de64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800de32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de34:	3310      	adds	r3, #16
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	4611      	mov	r1, r2
 800de3a:	4618      	mov	r0, r3
 800de3c:	f001 f808 	bl	800ee50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800de40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de42:	f000 facb 	bl	800e3dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800de46:	f000 fe37 	bl	800eab8 <xTaskResumeAll>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f47f af7c 	bne.w	800dd4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800de52:	4b0c      	ldr	r3, [pc, #48]	; (800de84 <xQueueGenericSend+0x1f8>)
 800de54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de58:	601a      	str	r2, [r3, #0]
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	e772      	b.n	800dd4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800de64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de66:	f000 fab9 	bl	800e3dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de6a:	f000 fe25 	bl	800eab8 <xTaskResumeAll>
 800de6e:	e76c      	b.n	800dd4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800de70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de72:	f000 fab3 	bl	800e3dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de76:	f000 fe1f 	bl	800eab8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800de7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3738      	adds	r7, #56	; 0x38
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	e000ed04 	.word	0xe000ed04

0800de88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b090      	sub	sp, #64	; 0x40
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
 800de94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800de9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10a      	bne.n	800deb6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea4:	f383 8811 	msr	BASEPRI, r3
 800dea8:	f3bf 8f6f 	isb	sy
 800deac:	f3bf 8f4f 	dsb	sy
 800deb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800deb2:	bf00      	nop
 800deb4:	e7fe      	b.n	800deb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d103      	bne.n	800dec4 <xQueueGenericSendFromISR+0x3c>
 800debc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800debe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d101      	bne.n	800dec8 <xQueueGenericSendFromISR+0x40>
 800dec4:	2301      	movs	r3, #1
 800dec6:	e000      	b.n	800deca <xQueueGenericSendFromISR+0x42>
 800dec8:	2300      	movs	r3, #0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d10a      	bne.n	800dee4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dee0:	bf00      	nop
 800dee2:	e7fe      	b.n	800dee2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	2b02      	cmp	r3, #2
 800dee8:	d103      	bne.n	800def2 <xQueueGenericSendFromISR+0x6a>
 800deea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deee:	2b01      	cmp	r3, #1
 800def0:	d101      	bne.n	800def6 <xQueueGenericSendFromISR+0x6e>
 800def2:	2301      	movs	r3, #1
 800def4:	e000      	b.n	800def8 <xQueueGenericSendFromISR+0x70>
 800def6:	2300      	movs	r3, #0
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10a      	bne.n	800df12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800defc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df00:	f383 8811 	msr	BASEPRI, r3
 800df04:	f3bf 8f6f 	isb	sy
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	623b      	str	r3, [r7, #32]
}
 800df0e:	bf00      	nop
 800df10:	e7fe      	b.n	800df10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df12:	f002 fa69 	bl	80103e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800df16:	f3ef 8211 	mrs	r2, BASEPRI
 800df1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	61fa      	str	r2, [r7, #28]
 800df2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800df2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d302      	bcc.n	800df44 <xQueueGenericSendFromISR+0xbc>
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	2b02      	cmp	r3, #2
 800df42:	d12f      	bne.n	800dfa4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800df44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df54:	683a      	ldr	r2, [r7, #0]
 800df56:	68b9      	ldr	r1, [r7, #8]
 800df58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df5a:	f000 f9af 	bl	800e2bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800df5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800df62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df66:	d112      	bne.n	800df8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d016      	beq.n	800df9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df72:	3324      	adds	r3, #36	; 0x24
 800df74:	4618      	mov	r0, r3
 800df76:	f000 ffbb 	bl	800eef0 <xTaskRemoveFromEventList>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00e      	beq.n	800df9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d00b      	beq.n	800df9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2201      	movs	r2, #1
 800df8a:	601a      	str	r2, [r3, #0]
 800df8c:	e007      	b.n	800df9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800df8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800df92:	3301      	adds	r3, #1
 800df94:	b2db      	uxtb	r3, r3
 800df96:	b25a      	sxtb	r2, r3
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dfa2:	e001      	b.n	800dfa8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfaa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dfb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3740      	adds	r7, #64	; 0x40
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
	...

0800dfc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b08c      	sub	sp, #48	; 0x30
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d10a      	bne.n	800dff0 <xQueueReceive+0x30>
	__asm volatile
 800dfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfde:	f383 8811 	msr	BASEPRI, r3
 800dfe2:	f3bf 8f6f 	isb	sy
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	623b      	str	r3, [r7, #32]
}
 800dfec:	bf00      	nop
 800dfee:	e7fe      	b.n	800dfee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d103      	bne.n	800dffe <xQueueReceive+0x3e>
 800dff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d101      	bne.n	800e002 <xQueueReceive+0x42>
 800dffe:	2301      	movs	r3, #1
 800e000:	e000      	b.n	800e004 <xQueueReceive+0x44>
 800e002:	2300      	movs	r3, #0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10a      	bne.n	800e01e <xQueueReceive+0x5e>
	__asm volatile
 800e008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00c:	f383 8811 	msr	BASEPRI, r3
 800e010:	f3bf 8f6f 	isb	sy
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	61fb      	str	r3, [r7, #28]
}
 800e01a:	bf00      	nop
 800e01c:	e7fe      	b.n	800e01c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e01e:	f001 f929 	bl	800f274 <xTaskGetSchedulerState>
 800e022:	4603      	mov	r3, r0
 800e024:	2b00      	cmp	r3, #0
 800e026:	d102      	bne.n	800e02e <xQueueReceive+0x6e>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d101      	bne.n	800e032 <xQueueReceive+0x72>
 800e02e:	2301      	movs	r3, #1
 800e030:	e000      	b.n	800e034 <xQueueReceive+0x74>
 800e032:	2300      	movs	r3, #0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d10a      	bne.n	800e04e <xQueueReceive+0x8e>
	__asm volatile
 800e038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03c:	f383 8811 	msr	BASEPRI, r3
 800e040:	f3bf 8f6f 	isb	sy
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	61bb      	str	r3, [r7, #24]
}
 800e04a:	bf00      	nop
 800e04c:	e7fe      	b.n	800e04c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e04e:	f002 f8e9 	bl	8010224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e056:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d01f      	beq.n	800e09e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e05e:	68b9      	ldr	r1, [r7, #8]
 800e060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e062:	f000 f995 	bl	800e390 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e068:	1e5a      	subs	r2, r3, #1
 800e06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e070:	691b      	ldr	r3, [r3, #16]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00f      	beq.n	800e096 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e078:	3310      	adds	r3, #16
 800e07a:	4618      	mov	r0, r3
 800e07c:	f000 ff38 	bl	800eef0 <xTaskRemoveFromEventList>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	d007      	beq.n	800e096 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e086:	4b3d      	ldr	r3, [pc, #244]	; (800e17c <xQueueReceive+0x1bc>)
 800e088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e08c:	601a      	str	r2, [r3, #0]
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e096:	f002 f8f5 	bl	8010284 <vPortExitCritical>
				return pdPASS;
 800e09a:	2301      	movs	r3, #1
 800e09c:	e069      	b.n	800e172 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d103      	bne.n	800e0ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e0a4:	f002 f8ee 	bl	8010284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	e062      	b.n	800e172 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d106      	bne.n	800e0c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0b2:	f107 0310 	add.w	r3, r7, #16
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f000 ff7e 	bl	800efb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e0c0:	f002 f8e0 	bl	8010284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e0c4:	f000 fcea 	bl	800ea9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e0c8:	f002 f8ac 	bl	8010224 <vPortEnterCritical>
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0d2:	b25b      	sxtb	r3, r3
 800e0d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0d8:	d103      	bne.n	800e0e2 <xQueueReceive+0x122>
 800e0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0e8:	b25b      	sxtb	r3, r3
 800e0ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0ee:	d103      	bne.n	800e0f8 <xQueueReceive+0x138>
 800e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0f8:	f002 f8c4 	bl	8010284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e0fc:	1d3a      	adds	r2, r7, #4
 800e0fe:	f107 0310 	add.w	r3, r7, #16
 800e102:	4611      	mov	r1, r2
 800e104:	4618      	mov	r0, r3
 800e106:	f000 ff6d 	bl	800efe4 <xTaskCheckForTimeOut>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d123      	bne.n	800e158 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e112:	f000 f9b5 	bl	800e480 <prvIsQueueEmpty>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d017      	beq.n	800e14c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11e:	3324      	adds	r3, #36	; 0x24
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	4611      	mov	r1, r2
 800e124:	4618      	mov	r0, r3
 800e126:	f000 fe93 	bl	800ee50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e12a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e12c:	f000 f956 	bl	800e3dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e130:	f000 fcc2 	bl	800eab8 <xTaskResumeAll>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d189      	bne.n	800e04e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e13a:	4b10      	ldr	r3, [pc, #64]	; (800e17c <xQueueReceive+0x1bc>)
 800e13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e140:	601a      	str	r2, [r3, #0]
 800e142:	f3bf 8f4f 	dsb	sy
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	e780      	b.n	800e04e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e14c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e14e:	f000 f945 	bl	800e3dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e152:	f000 fcb1 	bl	800eab8 <xTaskResumeAll>
 800e156:	e77a      	b.n	800e04e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e15a:	f000 f93f 	bl	800e3dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e15e:	f000 fcab 	bl	800eab8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e164:	f000 f98c 	bl	800e480 <prvIsQueueEmpty>
 800e168:	4603      	mov	r3, r0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f43f af6f 	beq.w	800e04e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e170:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e172:	4618      	mov	r0, r3
 800e174:	3730      	adds	r7, #48	; 0x30
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	e000ed04 	.word	0xe000ed04

0800e180 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b08e      	sub	sp, #56	; 0x38
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	60b9      	str	r1, [r7, #8]
 800e18a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e192:	2b00      	cmp	r3, #0
 800e194:	d10a      	bne.n	800e1ac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19a:	f383 8811 	msr	BASEPRI, r3
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	623b      	str	r3, [r7, #32]
}
 800e1a8:	bf00      	nop
 800e1aa:	e7fe      	b.n	800e1aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d103      	bne.n	800e1ba <xQueueReceiveFromISR+0x3a>
 800e1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d101      	bne.n	800e1be <xQueueReceiveFromISR+0x3e>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e000      	b.n	800e1c0 <xQueueReceiveFromISR+0x40>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d10a      	bne.n	800e1da <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c8:	f383 8811 	msr	BASEPRI, r3
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	61fb      	str	r3, [r7, #28]
}
 800e1d6:	bf00      	nop
 800e1d8:	e7fe      	b.n	800e1d8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1da:	f002 f905 	bl	80103e8 <vPortValidateInterruptPriority>
	__asm volatile
 800e1de:	f3ef 8211 	mrs	r2, BASEPRI
 800e1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e6:	f383 8811 	msr	BASEPRI, r3
 800e1ea:	f3bf 8f6f 	isb	sy
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	61ba      	str	r2, [r7, #24]
 800e1f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e1f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e202:	2b00      	cmp	r3, #0
 800e204:	d02f      	beq.n	800e266 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e20c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e210:	68b9      	ldr	r1, [r7, #8]
 800e212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e214:	f000 f8bc 	bl	800e390 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21a:	1e5a      	subs	r2, r3, #1
 800e21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e220:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e228:	d112      	bne.n	800e250 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22c:	691b      	ldr	r3, [r3, #16]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d016      	beq.n	800e260 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e234:	3310      	adds	r3, #16
 800e236:	4618      	mov	r0, r3
 800e238:	f000 fe5a 	bl	800eef0 <xTaskRemoveFromEventList>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00e      	beq.n	800e260 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00b      	beq.n	800e260 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2201      	movs	r2, #1
 800e24c:	601a      	str	r2, [r3, #0]
 800e24e:	e007      	b.n	800e260 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e254:	3301      	adds	r3, #1
 800e256:	b2db      	uxtb	r3, r3
 800e258:	b25a      	sxtb	r2, r3
 800e25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e260:	2301      	movs	r3, #1
 800e262:	637b      	str	r3, [r7, #52]	; 0x34
 800e264:	e001      	b.n	800e26a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e266:	2300      	movs	r3, #0
 800e268:	637b      	str	r3, [r7, #52]	; 0x34
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	f383 8811 	msr	BASEPRI, r3
}
 800e274:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3738      	adds	r7, #56	; 0x38
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d10a      	bne.n	800e2a4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800e28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e292:	f383 8811 	msr	BASEPRI, r3
 800e296:	f3bf 8f6f 	isb	sy
 800e29a:	f3bf 8f4f 	dsb	sy
 800e29e:	60bb      	str	r3, [r7, #8]
}
 800e2a0:	bf00      	nop
 800e2a2:	e7fe      	b.n	800e2a2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800e2a4:	f001 ffbe 	bl	8010224 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ac:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e2ae:	f001 ffe9 	bl	8010284 <vPortExitCritical>

	return uxReturn;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3710      	adds	r7, #16
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b086      	sub	sp, #24
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d10d      	bne.n	800e2f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d14d      	bne.n	800e37e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f000 ffe2 	bl	800f2b0 <xTaskPriorityDisinherit>
 800e2ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	609a      	str	r2, [r3, #8]
 800e2f4:	e043      	b.n	800e37e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d119      	bne.n	800e330 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6858      	ldr	r0, [r3, #4]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e304:	461a      	mov	r2, r3
 800e306:	68b9      	ldr	r1, [r7, #8]
 800e308:	f002 fdd6 	bl	8010eb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	685a      	ldr	r2, [r3, #4]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e314:	441a      	add	r2, r3
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	685a      	ldr	r2, [r3, #4]
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	429a      	cmp	r2, r3
 800e324:	d32b      	bcc.n	800e37e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	605a      	str	r2, [r3, #4]
 800e32e:	e026      	b.n	800e37e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	68d8      	ldr	r0, [r3, #12]
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e338:	461a      	mov	r2, r3
 800e33a:	68b9      	ldr	r1, [r7, #8]
 800e33c:	f002 fdbc 	bl	8010eb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	68da      	ldr	r2, [r3, #12]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e348:	425b      	negs	r3, r3
 800e34a:	441a      	add	r2, r3
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	68da      	ldr	r2, [r3, #12]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d207      	bcs.n	800e36c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	689a      	ldr	r2, [r3, #8]
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e364:	425b      	negs	r3, r3
 800e366:	441a      	add	r2, r3
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2b02      	cmp	r3, #2
 800e370:	d105      	bne.n	800e37e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d002      	beq.n	800e37e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	3b01      	subs	r3, #1
 800e37c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	1c5a      	adds	r2, r3, #1
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e386:	697b      	ldr	r3, [r7, #20]
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3718      	adds	r7, #24
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d018      	beq.n	800e3d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	68da      	ldr	r2, [r3, #12]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3aa:	441a      	add	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	68da      	ldr	r2, [r3, #12]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	689b      	ldr	r3, [r3, #8]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d303      	bcc.n	800e3c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	68d9      	ldr	r1, [r3, #12]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	6838      	ldr	r0, [r7, #0]
 800e3d0:	f002 fd72 	bl	8010eb8 <memcpy>
	}
}
 800e3d4:	bf00      	nop
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e3e4:	f001 ff1e 	bl	8010224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3f0:	e011      	b.n	800e416 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d012      	beq.n	800e420 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	3324      	adds	r3, #36	; 0x24
 800e3fe:	4618      	mov	r0, r3
 800e400:	f000 fd76 	bl	800eef0 <xTaskRemoveFromEventList>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d001      	beq.n	800e40e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e40a:	f000 fe4d 	bl	800f0a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e40e:	7bfb      	ldrb	r3, [r7, #15]
 800e410:	3b01      	subs	r3, #1
 800e412:	b2db      	uxtb	r3, r3
 800e414:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	dce9      	bgt.n	800e3f2 <prvUnlockQueue+0x16>
 800e41e:	e000      	b.n	800e422 <prvUnlockQueue+0x46>
					break;
 800e420:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	22ff      	movs	r2, #255	; 0xff
 800e426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e42a:	f001 ff2b 	bl	8010284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e42e:	f001 fef9 	bl	8010224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e438:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e43a:	e011      	b.n	800e460 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	691b      	ldr	r3, [r3, #16]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d012      	beq.n	800e46a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	3310      	adds	r3, #16
 800e448:	4618      	mov	r0, r3
 800e44a:	f000 fd51 	bl	800eef0 <xTaskRemoveFromEventList>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d001      	beq.n	800e458 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e454:	f000 fe28 	bl	800f0a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e458:	7bbb      	ldrb	r3, [r7, #14]
 800e45a:	3b01      	subs	r3, #1
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e464:	2b00      	cmp	r3, #0
 800e466:	dce9      	bgt.n	800e43c <prvUnlockQueue+0x60>
 800e468:	e000      	b.n	800e46c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e46a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	22ff      	movs	r2, #255	; 0xff
 800e470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e474:	f001 ff06 	bl	8010284 <vPortExitCritical>
}
 800e478:	bf00      	nop
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e488:	f001 fecc 	bl	8010224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e490:	2b00      	cmp	r3, #0
 800e492:	d102      	bne.n	800e49a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e494:	2301      	movs	r3, #1
 800e496:	60fb      	str	r3, [r7, #12]
 800e498:	e001      	b.n	800e49e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e49a:	2300      	movs	r3, #0
 800e49c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e49e:	f001 fef1 	bl	8010284 <vPortExitCritical>

	return xReturn;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3710      	adds	r7, #16
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e4b4:	f001 feb6 	bl	8010224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d102      	bne.n	800e4ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	60fb      	str	r3, [r7, #12]
 800e4c8:	e001      	b.n	800e4ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e4ce:	f001 fed9 	bl	8010284 <vPortExitCritical>

	return xReturn;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3710      	adds	r7, #16
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b087      	sub	sp, #28
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d10a      	bne.n	800e504 <xQueueIsQueueFullFromISR+0x28>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	60fb      	str	r3, [r7, #12]
}
 800e500:	bf00      	nop
 800e502:	e7fe      	b.n	800e502 <xQueueIsQueueFullFromISR+0x26>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d102      	bne.n	800e516 <xQueueIsQueueFullFromISR+0x3a>
	{
		xReturn = pdTRUE;
 800e510:	2301      	movs	r3, #1
 800e512:	617b      	str	r3, [r7, #20]
 800e514:	e001      	b.n	800e51a <xQueueIsQueueFullFromISR+0x3e>
	}
	else
	{
		xReturn = pdFALSE;
 800e516:	2300      	movs	r3, #0
 800e518:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e51a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e51c:	4618      	mov	r0, r3
 800e51e:	371c      	adds	r7, #28
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e532:	2300      	movs	r3, #0
 800e534:	60fb      	str	r3, [r7, #12]
 800e536:	e014      	b.n	800e562 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e538:	4a0f      	ldr	r2, [pc, #60]	; (800e578 <vQueueAddToRegistry+0x50>)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d10b      	bne.n	800e55c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e544:	490c      	ldr	r1, [pc, #48]	; (800e578 <vQueueAddToRegistry+0x50>)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	683a      	ldr	r2, [r7, #0]
 800e54a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e54e:	4a0a      	ldr	r2, [pc, #40]	; (800e578 <vQueueAddToRegistry+0x50>)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	00db      	lsls	r3, r3, #3
 800e554:	4413      	add	r3, r2
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e55a:	e006      	b.n	800e56a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	3301      	adds	r3, #1
 800e560:	60fb      	str	r3, [r7, #12]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2b07      	cmp	r3, #7
 800e566:	d9e7      	bls.n	800e538 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e568:	bf00      	nop
 800e56a:	bf00      	nop
 800e56c:	3714      	adds	r7, #20
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr
 800e576:	bf00      	nop
 800e578:	20004fac 	.word	0x20004fac

0800e57c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b086      	sub	sp, #24
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e58c:	f001 fe4a 	bl	8010224 <vPortEnterCritical>
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e596:	b25b      	sxtb	r3, r3
 800e598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e59c:	d103      	bne.n	800e5a6 <vQueueWaitForMessageRestricted+0x2a>
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5ac:	b25b      	sxtb	r3, r3
 800e5ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5b2:	d103      	bne.n	800e5bc <vQueueWaitForMessageRestricted+0x40>
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5bc:	f001 fe62 	bl	8010284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d106      	bne.n	800e5d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	3324      	adds	r3, #36	; 0x24
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	68b9      	ldr	r1, [r7, #8]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f000 fc61 	bl	800ee98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e5d6:	6978      	ldr	r0, [r7, #20]
 800e5d8:	f7ff ff00 	bl	800e3dc <prvUnlockQueue>
	}
 800e5dc:	bf00      	nop
 800e5de:	3718      	adds	r7, #24
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b08e      	sub	sp, #56	; 0x38
 800e5e8:	af04      	add	r7, sp, #16
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	607a      	str	r2, [r7, #4]
 800e5f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d10a      	bne.n	800e60e <xTaskCreateStatic+0x2a>
	__asm volatile
 800e5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fc:	f383 8811 	msr	BASEPRI, r3
 800e600:	f3bf 8f6f 	isb	sy
 800e604:	f3bf 8f4f 	dsb	sy
 800e608:	623b      	str	r3, [r7, #32]
}
 800e60a:	bf00      	nop
 800e60c:	e7fe      	b.n	800e60c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10a      	bne.n	800e62a <xTaskCreateStatic+0x46>
	__asm volatile
 800e614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e618:	f383 8811 	msr	BASEPRI, r3
 800e61c:	f3bf 8f6f 	isb	sy
 800e620:	f3bf 8f4f 	dsb	sy
 800e624:	61fb      	str	r3, [r7, #28]
}
 800e626:	bf00      	nop
 800e628:	e7fe      	b.n	800e628 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e62a:	23bc      	movs	r3, #188	; 0xbc
 800e62c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	2bbc      	cmp	r3, #188	; 0xbc
 800e632:	d00a      	beq.n	800e64a <xTaskCreateStatic+0x66>
	__asm volatile
 800e634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	61bb      	str	r3, [r7, #24]
}
 800e646:	bf00      	nop
 800e648:	e7fe      	b.n	800e648 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e64a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d01e      	beq.n	800e690 <xTaskCreateStatic+0xac>
 800e652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e654:	2b00      	cmp	r3, #0
 800e656:	d01b      	beq.n	800e690 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e660:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e664:	2202      	movs	r2, #2
 800e666:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e66a:	2300      	movs	r3, #0
 800e66c:	9303      	str	r3, [sp, #12]
 800e66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e670:	9302      	str	r3, [sp, #8]
 800e672:	f107 0314 	add.w	r3, r7, #20
 800e676:	9301      	str	r3, [sp, #4]
 800e678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	68b9      	ldr	r1, [r7, #8]
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f000 f850 	bl	800e728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e68a:	f000 f8f3 	bl	800e874 <prvAddNewTaskToReadyList>
 800e68e:	e001      	b.n	800e694 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e690:	2300      	movs	r3, #0
 800e692:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e694:	697b      	ldr	r3, [r7, #20]
	}
 800e696:	4618      	mov	r0, r3
 800e698:	3728      	adds	r7, #40	; 0x28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b08c      	sub	sp, #48	; 0x30
 800e6a2:	af04      	add	r7, sp, #16
 800e6a4:	60f8      	str	r0, [r7, #12]
 800e6a6:	60b9      	str	r1, [r7, #8]
 800e6a8:	603b      	str	r3, [r7, #0]
 800e6aa:	4613      	mov	r3, r2
 800e6ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e6ae:	88fb      	ldrh	r3, [r7, #6]
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f001 fed8 	bl	8010468 <pvPortMalloc>
 800e6b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00e      	beq.n	800e6de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e6c0:	20bc      	movs	r0, #188	; 0xbc
 800e6c2:	f001 fed1 	bl	8010468 <pvPortMalloc>
 800e6c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d003      	beq.n	800e6d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	697a      	ldr	r2, [r7, #20]
 800e6d2:	631a      	str	r2, [r3, #48]	; 0x30
 800e6d4:	e005      	b.n	800e6e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e6d6:	6978      	ldr	r0, [r7, #20]
 800e6d8:	f001 ff92 	bl	8010600 <vPortFree>
 800e6dc:	e001      	b.n	800e6e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d017      	beq.n	800e718 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e6f0:	88fa      	ldrh	r2, [r7, #6]
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	9303      	str	r3, [sp, #12]
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	9302      	str	r3, [sp, #8]
 800e6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fc:	9301      	str	r3, [sp, #4]
 800e6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e700:	9300      	str	r3, [sp, #0]
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	68b9      	ldr	r1, [r7, #8]
 800e706:	68f8      	ldr	r0, [r7, #12]
 800e708:	f000 f80e 	bl	800e728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e70c:	69f8      	ldr	r0, [r7, #28]
 800e70e:	f000 f8b1 	bl	800e874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e712:	2301      	movs	r3, #1
 800e714:	61bb      	str	r3, [r7, #24]
 800e716:	e002      	b.n	800e71e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e71c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e71e:	69bb      	ldr	r3, [r7, #24]
	}
 800e720:	4618      	mov	r0, r3
 800e722:	3720      	adds	r7, #32
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b088      	sub	sp, #32
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
 800e734:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e738:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	461a      	mov	r2, r3
 800e740:	21a5      	movs	r1, #165	; 0xa5
 800e742:	f002 fbc7 	bl	8010ed4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e750:	3b01      	subs	r3, #1
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4413      	add	r3, r2
 800e756:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	f023 0307 	bic.w	r3, r3, #7
 800e75e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	f003 0307 	and.w	r3, r3, #7
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00a      	beq.n	800e780 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76e:	f383 8811 	msr	BASEPRI, r3
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	f3bf 8f4f 	dsb	sy
 800e77a:	617b      	str	r3, [r7, #20]
}
 800e77c:	bf00      	nop
 800e77e:	e7fe      	b.n	800e77e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d01f      	beq.n	800e7c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e786:	2300      	movs	r3, #0
 800e788:	61fb      	str	r3, [r7, #28]
 800e78a:	e012      	b.n	800e7b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e78c:	68ba      	ldr	r2, [r7, #8]
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	4413      	add	r3, r2
 800e792:	7819      	ldrb	r1, [r3, #0]
 800e794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e796:	69fb      	ldr	r3, [r7, #28]
 800e798:	4413      	add	r3, r2
 800e79a:	3334      	adds	r3, #52	; 0x34
 800e79c:	460a      	mov	r2, r1
 800e79e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e7a0:	68ba      	ldr	r2, [r7, #8]
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d006      	beq.n	800e7ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	61fb      	str	r3, [r7, #28]
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	2b0f      	cmp	r3, #15
 800e7b6:	d9e9      	bls.n	800e78c <prvInitialiseNewTask+0x64>
 800e7b8:	e000      	b.n	800e7bc <prvInitialiseNewTask+0x94>
			{
				break;
 800e7ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e7c4:	e003      	b.n	800e7ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d0:	2b37      	cmp	r3, #55	; 0x37
 800e7d2:	d901      	bls.n	800e7d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e7d4:	2337      	movs	r3, #55	; 0x37
 800e7d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ec:	3304      	adds	r3, #4
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7ff f87a 	bl	800d8e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f6:	3318      	adds	r3, #24
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7ff f875 	bl	800d8e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e802:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e806:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e812:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e816:	2200      	movs	r2, #0
 800e818:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81e:	2200      	movs	r2, #0
 800e820:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e826:	3354      	adds	r3, #84	; 0x54
 800e828:	2260      	movs	r2, #96	; 0x60
 800e82a:	2100      	movs	r1, #0
 800e82c:	4618      	mov	r0, r3
 800e82e:	f002 fb51 	bl	8010ed4 <memset>
 800e832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e834:	4a0c      	ldr	r2, [pc, #48]	; (800e868 <prvInitialiseNewTask+0x140>)
 800e836:	659a      	str	r2, [r3, #88]	; 0x58
 800e838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83a:	4a0c      	ldr	r2, [pc, #48]	; (800e86c <prvInitialiseNewTask+0x144>)
 800e83c:	65da      	str	r2, [r3, #92]	; 0x5c
 800e83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e840:	4a0b      	ldr	r2, [pc, #44]	; (800e870 <prvInitialiseNewTask+0x148>)
 800e842:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e844:	683a      	ldr	r2, [r7, #0]
 800e846:	68f9      	ldr	r1, [r7, #12]
 800e848:	69b8      	ldr	r0, [r7, #24]
 800e84a:	f001 fbbf 	bl	800ffcc <pxPortInitialiseStack>
 800e84e:	4602      	mov	r2, r0
 800e850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e852:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	2b00      	cmp	r3, #0
 800e858:	d002      	beq.n	800e860 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e85e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e860:	bf00      	nop
 800e862:	3720      	adds	r7, #32
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}
 800e868:	0801416c 	.word	0x0801416c
 800e86c:	0801418c 	.word	0x0801418c
 800e870:	0801414c 	.word	0x0801414c

0800e874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e87c:	f001 fcd2 	bl	8010224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e880:	4b2d      	ldr	r3, [pc, #180]	; (800e938 <prvAddNewTaskToReadyList+0xc4>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	3301      	adds	r3, #1
 800e886:	4a2c      	ldr	r2, [pc, #176]	; (800e938 <prvAddNewTaskToReadyList+0xc4>)
 800e888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e88a:	4b2c      	ldr	r3, [pc, #176]	; (800e93c <prvAddNewTaskToReadyList+0xc8>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d109      	bne.n	800e8a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e892:	4a2a      	ldr	r2, [pc, #168]	; (800e93c <prvAddNewTaskToReadyList+0xc8>)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e898:	4b27      	ldr	r3, [pc, #156]	; (800e938 <prvAddNewTaskToReadyList+0xc4>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d110      	bne.n	800e8c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e8a0:	f000 fc26 	bl	800f0f0 <prvInitialiseTaskLists>
 800e8a4:	e00d      	b.n	800e8c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e8a6:	4b26      	ldr	r3, [pc, #152]	; (800e940 <prvAddNewTaskToReadyList+0xcc>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d109      	bne.n	800e8c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e8ae:	4b23      	ldr	r3, [pc, #140]	; (800e93c <prvAddNewTaskToReadyList+0xc8>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d802      	bhi.n	800e8c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e8bc:	4a1f      	ldr	r2, [pc, #124]	; (800e93c <prvAddNewTaskToReadyList+0xc8>)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e8c2:	4b20      	ldr	r3, [pc, #128]	; (800e944 <prvAddNewTaskToReadyList+0xd0>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	4a1e      	ldr	r2, [pc, #120]	; (800e944 <prvAddNewTaskToReadyList+0xd0>)
 800e8ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e8cc:	4b1d      	ldr	r3, [pc, #116]	; (800e944 <prvAddNewTaskToReadyList+0xd0>)
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d8:	4b1b      	ldr	r3, [pc, #108]	; (800e948 <prvAddNewTaskToReadyList+0xd4>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d903      	bls.n	800e8e8 <prvAddNewTaskToReadyList+0x74>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e4:	4a18      	ldr	r2, [pc, #96]	; (800e948 <prvAddNewTaskToReadyList+0xd4>)
 800e8e6:	6013      	str	r3, [r2, #0]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ec:	4613      	mov	r3, r2
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	4413      	add	r3, r2
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	4a15      	ldr	r2, [pc, #84]	; (800e94c <prvAddNewTaskToReadyList+0xd8>)
 800e8f6:	441a      	add	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	3304      	adds	r3, #4
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	4610      	mov	r0, r2
 800e900:	f7fe ffff 	bl	800d902 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e904:	f001 fcbe 	bl	8010284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e908:	4b0d      	ldr	r3, [pc, #52]	; (800e940 <prvAddNewTaskToReadyList+0xcc>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00e      	beq.n	800e92e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e910:	4b0a      	ldr	r3, [pc, #40]	; (800e93c <prvAddNewTaskToReadyList+0xc8>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d207      	bcs.n	800e92e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e91e:	4b0c      	ldr	r3, [pc, #48]	; (800e950 <prvAddNewTaskToReadyList+0xdc>)
 800e920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e924:	601a      	str	r2, [r3, #0]
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e92e:	bf00      	nop
 800e930:	3708      	adds	r7, #8
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	20000d38 	.word	0x20000d38
 800e93c:	20000864 	.word	0x20000864
 800e940:	20000d44 	.word	0x20000d44
 800e944:	20000d54 	.word	0x20000d54
 800e948:	20000d40 	.word	0x20000d40
 800e94c:	20000868 	.word	0x20000868
 800e950:	e000ed04 	.word	0xe000ed04

0800e954 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e95c:	2300      	movs	r3, #0
 800e95e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d017      	beq.n	800e996 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e966:	4b13      	ldr	r3, [pc, #76]	; (800e9b4 <vTaskDelay+0x60>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d00a      	beq.n	800e984 <vTaskDelay+0x30>
	__asm volatile
 800e96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e972:	f383 8811 	msr	BASEPRI, r3
 800e976:	f3bf 8f6f 	isb	sy
 800e97a:	f3bf 8f4f 	dsb	sy
 800e97e:	60bb      	str	r3, [r7, #8]
}
 800e980:	bf00      	nop
 800e982:	e7fe      	b.n	800e982 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e984:	f000 f88a 	bl	800ea9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e988:	2100      	movs	r1, #0
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 ff00 	bl	800f790 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e990:	f000 f892 	bl	800eab8 <xTaskResumeAll>
 800e994:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d107      	bne.n	800e9ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e99c:	4b06      	ldr	r3, [pc, #24]	; (800e9b8 <vTaskDelay+0x64>)
 800e99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9a2:	601a      	str	r2, [r3, #0]
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e9ac:	bf00      	nop
 800e9ae:	3710      	adds	r7, #16
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	20000d60 	.word	0x20000d60
 800e9b8:	e000ed04 	.word	0xe000ed04

0800e9bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08a      	sub	sp, #40	; 0x28
 800e9c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e9ca:	463a      	mov	r2, r7
 800e9cc:	1d39      	adds	r1, r7, #4
 800e9ce:	f107 0308 	add.w	r3, r7, #8
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7fe ff34 	bl	800d840 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e9d8:	6839      	ldr	r1, [r7, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	9202      	str	r2, [sp, #8]
 800e9e0:	9301      	str	r3, [sp, #4]
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	460a      	mov	r2, r1
 800e9ea:	4924      	ldr	r1, [pc, #144]	; (800ea7c <vTaskStartScheduler+0xc0>)
 800e9ec:	4824      	ldr	r0, [pc, #144]	; (800ea80 <vTaskStartScheduler+0xc4>)
 800e9ee:	f7ff fdf9 	bl	800e5e4 <xTaskCreateStatic>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	4a23      	ldr	r2, [pc, #140]	; (800ea84 <vTaskStartScheduler+0xc8>)
 800e9f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e9f8:	4b22      	ldr	r3, [pc, #136]	; (800ea84 <vTaskStartScheduler+0xc8>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d002      	beq.n	800ea06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ea00:	2301      	movs	r3, #1
 800ea02:	617b      	str	r3, [r7, #20]
 800ea04:	e001      	b.n	800ea0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ea06:	2300      	movs	r3, #0
 800ea08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d102      	bne.n	800ea16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ea10:	f000 ff12 	bl	800f838 <xTimerCreateTimerTask>
 800ea14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d11b      	bne.n	800ea54 <vTaskStartScheduler+0x98>
	__asm volatile
 800ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea20:	f383 8811 	msr	BASEPRI, r3
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	613b      	str	r3, [r7, #16]
}
 800ea2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ea30:	4b15      	ldr	r3, [pc, #84]	; (800ea88 <vTaskStartScheduler+0xcc>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	3354      	adds	r3, #84	; 0x54
 800ea36:	4a15      	ldr	r2, [pc, #84]	; (800ea8c <vTaskStartScheduler+0xd0>)
 800ea38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ea3a:	4b15      	ldr	r3, [pc, #84]	; (800ea90 <vTaskStartScheduler+0xd4>)
 800ea3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ea42:	4b14      	ldr	r3, [pc, #80]	; (800ea94 <vTaskStartScheduler+0xd8>)
 800ea44:	2201      	movs	r2, #1
 800ea46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ea48:	4b13      	ldr	r3, [pc, #76]	; (800ea98 <vTaskStartScheduler+0xdc>)
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ea4e:	f001 fb47 	bl	80100e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ea52:	e00e      	b.n	800ea72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea5a:	d10a      	bne.n	800ea72 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ea5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea60:	f383 8811 	msr	BASEPRI, r3
 800ea64:	f3bf 8f6f 	isb	sy
 800ea68:	f3bf 8f4f 	dsb	sy
 800ea6c:	60fb      	str	r3, [r7, #12]
}
 800ea6e:	bf00      	nop
 800ea70:	e7fe      	b.n	800ea70 <vTaskStartScheduler+0xb4>
}
 800ea72:	bf00      	nop
 800ea74:	3718      	adds	r7, #24
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	08011b64 	.word	0x08011b64
 800ea80:	0800f0c1 	.word	0x0800f0c1
 800ea84:	20000d5c 	.word	0x20000d5c
 800ea88:	20000864 	.word	0x20000864
 800ea8c:	2000003c 	.word	0x2000003c
 800ea90:	20000d58 	.word	0x20000d58
 800ea94:	20000d44 	.word	0x20000d44
 800ea98:	20000d3c 	.word	0x20000d3c

0800ea9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eaa0:	4b04      	ldr	r3, [pc, #16]	; (800eab4 <vTaskSuspendAll+0x18>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	4a03      	ldr	r2, [pc, #12]	; (800eab4 <vTaskSuspendAll+0x18>)
 800eaa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800eaaa:	bf00      	nop
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr
 800eab4:	20000d60 	.word	0x20000d60

0800eab8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eabe:	2300      	movs	r3, #0
 800eac0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eac2:	2300      	movs	r3, #0
 800eac4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eac6:	4b42      	ldr	r3, [pc, #264]	; (800ebd0 <xTaskResumeAll+0x118>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d10a      	bne.n	800eae4 <xTaskResumeAll+0x2c>
	__asm volatile
 800eace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead2:	f383 8811 	msr	BASEPRI, r3
 800ead6:	f3bf 8f6f 	isb	sy
 800eada:	f3bf 8f4f 	dsb	sy
 800eade:	603b      	str	r3, [r7, #0]
}
 800eae0:	bf00      	nop
 800eae2:	e7fe      	b.n	800eae2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eae4:	f001 fb9e 	bl	8010224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eae8:	4b39      	ldr	r3, [pc, #228]	; (800ebd0 <xTaskResumeAll+0x118>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	3b01      	subs	r3, #1
 800eaee:	4a38      	ldr	r2, [pc, #224]	; (800ebd0 <xTaskResumeAll+0x118>)
 800eaf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eaf2:	4b37      	ldr	r3, [pc, #220]	; (800ebd0 <xTaskResumeAll+0x118>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d162      	bne.n	800ebc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eafa:	4b36      	ldr	r3, [pc, #216]	; (800ebd4 <xTaskResumeAll+0x11c>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d05e      	beq.n	800ebc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb02:	e02f      	b.n	800eb64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb04:	4b34      	ldr	r3, [pc, #208]	; (800ebd8 <xTaskResumeAll+0x120>)
 800eb06:	68db      	ldr	r3, [r3, #12]
 800eb08:	68db      	ldr	r3, [r3, #12]
 800eb0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	3318      	adds	r3, #24
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fe ff53 	bl	800d9bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	3304      	adds	r3, #4
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fe ff4e 	bl	800d9bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb24:	4b2d      	ldr	r3, [pc, #180]	; (800ebdc <xTaskResumeAll+0x124>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d903      	bls.n	800eb34 <xTaskResumeAll+0x7c>
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb30:	4a2a      	ldr	r2, [pc, #168]	; (800ebdc <xTaskResumeAll+0x124>)
 800eb32:	6013      	str	r3, [r2, #0]
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb38:	4613      	mov	r3, r2
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	4413      	add	r3, r2
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4a27      	ldr	r2, [pc, #156]	; (800ebe0 <xTaskResumeAll+0x128>)
 800eb42:	441a      	add	r2, r3
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	3304      	adds	r3, #4
 800eb48:	4619      	mov	r1, r3
 800eb4a:	4610      	mov	r0, r2
 800eb4c:	f7fe fed9 	bl	800d902 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb54:	4b23      	ldr	r3, [pc, #140]	; (800ebe4 <xTaskResumeAll+0x12c>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d302      	bcc.n	800eb64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800eb5e:	4b22      	ldr	r3, [pc, #136]	; (800ebe8 <xTaskResumeAll+0x130>)
 800eb60:	2201      	movs	r2, #1
 800eb62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb64:	4b1c      	ldr	r3, [pc, #112]	; (800ebd8 <xTaskResumeAll+0x120>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d1cb      	bne.n	800eb04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d001      	beq.n	800eb76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eb72:	f000 fb5f 	bl	800f234 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eb76:	4b1d      	ldr	r3, [pc, #116]	; (800ebec <xTaskResumeAll+0x134>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d010      	beq.n	800eba4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eb82:	f000 f847 	bl	800ec14 <xTaskIncrementTick>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d002      	beq.n	800eb92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800eb8c:	4b16      	ldr	r3, [pc, #88]	; (800ebe8 <xTaskResumeAll+0x130>)
 800eb8e:	2201      	movs	r2, #1
 800eb90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	3b01      	subs	r3, #1
 800eb96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1f1      	bne.n	800eb82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800eb9e:	4b13      	ldr	r3, [pc, #76]	; (800ebec <xTaskResumeAll+0x134>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eba4:	4b10      	ldr	r3, [pc, #64]	; (800ebe8 <xTaskResumeAll+0x130>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d009      	beq.n	800ebc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ebac:	2301      	movs	r3, #1
 800ebae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ebb0:	4b0f      	ldr	r3, [pc, #60]	; (800ebf0 <xTaskResumeAll+0x138>)
 800ebb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebb6:	601a      	str	r2, [r3, #0]
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ebc0:	f001 fb60 	bl	8010284 <vPortExitCritical>

	return xAlreadyYielded;
 800ebc4:	68bb      	ldr	r3, [r7, #8]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3710      	adds	r7, #16
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	20000d60 	.word	0x20000d60
 800ebd4:	20000d38 	.word	0x20000d38
 800ebd8:	20000cf8 	.word	0x20000cf8
 800ebdc:	20000d40 	.word	0x20000d40
 800ebe0:	20000868 	.word	0x20000868
 800ebe4:	20000864 	.word	0x20000864
 800ebe8:	20000d4c 	.word	0x20000d4c
 800ebec:	20000d48 	.word	0x20000d48
 800ebf0:	e000ed04 	.word	0xe000ed04

0800ebf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ebfa:	4b05      	ldr	r3, [pc, #20]	; (800ec10 <xTaskGetTickCount+0x1c>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ec00:	687b      	ldr	r3, [r7, #4]
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	370c      	adds	r7, #12
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr
 800ec0e:	bf00      	nop
 800ec10:	20000d3c 	.word	0x20000d3c

0800ec14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec1e:	4b4f      	ldr	r3, [pc, #316]	; (800ed5c <xTaskIncrementTick+0x148>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	f040 808f 	bne.w	800ed46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ec28:	4b4d      	ldr	r3, [pc, #308]	; (800ed60 <xTaskIncrementTick+0x14c>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ec30:	4a4b      	ldr	r2, [pc, #300]	; (800ed60 <xTaskIncrementTick+0x14c>)
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d120      	bne.n	800ec7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ec3c:	4b49      	ldr	r3, [pc, #292]	; (800ed64 <xTaskIncrementTick+0x150>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d00a      	beq.n	800ec5c <xTaskIncrementTick+0x48>
	__asm volatile
 800ec46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4a:	f383 8811 	msr	BASEPRI, r3
 800ec4e:	f3bf 8f6f 	isb	sy
 800ec52:	f3bf 8f4f 	dsb	sy
 800ec56:	603b      	str	r3, [r7, #0]
}
 800ec58:	bf00      	nop
 800ec5a:	e7fe      	b.n	800ec5a <xTaskIncrementTick+0x46>
 800ec5c:	4b41      	ldr	r3, [pc, #260]	; (800ed64 <xTaskIncrementTick+0x150>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	60fb      	str	r3, [r7, #12]
 800ec62:	4b41      	ldr	r3, [pc, #260]	; (800ed68 <xTaskIncrementTick+0x154>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4a3f      	ldr	r2, [pc, #252]	; (800ed64 <xTaskIncrementTick+0x150>)
 800ec68:	6013      	str	r3, [r2, #0]
 800ec6a:	4a3f      	ldr	r2, [pc, #252]	; (800ed68 <xTaskIncrementTick+0x154>)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6013      	str	r3, [r2, #0]
 800ec70:	4b3e      	ldr	r3, [pc, #248]	; (800ed6c <xTaskIncrementTick+0x158>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	3301      	adds	r3, #1
 800ec76:	4a3d      	ldr	r2, [pc, #244]	; (800ed6c <xTaskIncrementTick+0x158>)
 800ec78:	6013      	str	r3, [r2, #0]
 800ec7a:	f000 fadb 	bl	800f234 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ec7e:	4b3c      	ldr	r3, [pc, #240]	; (800ed70 <xTaskIncrementTick+0x15c>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	693a      	ldr	r2, [r7, #16]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d349      	bcc.n	800ed1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec88:	4b36      	ldr	r3, [pc, #216]	; (800ed64 <xTaskIncrementTick+0x150>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d104      	bne.n	800ec9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec92:	4b37      	ldr	r3, [pc, #220]	; (800ed70 <xTaskIncrementTick+0x15c>)
 800ec94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec98:	601a      	str	r2, [r3, #0]
					break;
 800ec9a:	e03f      	b.n	800ed1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec9c:	4b31      	ldr	r3, [pc, #196]	; (800ed64 <xTaskIncrementTick+0x150>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ecac:	693a      	ldr	r2, [r7, #16]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d203      	bcs.n	800ecbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ecb4:	4a2e      	ldr	r2, [pc, #184]	; (800ed70 <xTaskIncrementTick+0x15c>)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ecba:	e02f      	b.n	800ed1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7fe fe7b 	bl	800d9bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d004      	beq.n	800ecd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	3318      	adds	r3, #24
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fe fe72 	bl	800d9bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecdc:	4b25      	ldr	r3, [pc, #148]	; (800ed74 <xTaskIncrementTick+0x160>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d903      	bls.n	800ecec <xTaskIncrementTick+0xd8>
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece8:	4a22      	ldr	r2, [pc, #136]	; (800ed74 <xTaskIncrementTick+0x160>)
 800ecea:	6013      	str	r3, [r2, #0]
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	009b      	lsls	r3, r3, #2
 800ecf4:	4413      	add	r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	4a1f      	ldr	r2, [pc, #124]	; (800ed78 <xTaskIncrementTick+0x164>)
 800ecfa:	441a      	add	r2, r3
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	3304      	adds	r3, #4
 800ed00:	4619      	mov	r1, r3
 800ed02:	4610      	mov	r0, r2
 800ed04:	f7fe fdfd 	bl	800d902 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed0c:	4b1b      	ldr	r3, [pc, #108]	; (800ed7c <xTaskIncrementTick+0x168>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d3b8      	bcc.n	800ec88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ed16:	2301      	movs	r3, #1
 800ed18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed1a:	e7b5      	b.n	800ec88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ed1c:	4b17      	ldr	r3, [pc, #92]	; (800ed7c <xTaskIncrementTick+0x168>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed22:	4915      	ldr	r1, [pc, #84]	; (800ed78 <xTaskIncrementTick+0x164>)
 800ed24:	4613      	mov	r3, r2
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	4413      	add	r3, r2
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	440b      	add	r3, r1
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d901      	bls.n	800ed38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ed34:	2301      	movs	r3, #1
 800ed36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ed38:	4b11      	ldr	r3, [pc, #68]	; (800ed80 <xTaskIncrementTick+0x16c>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d007      	beq.n	800ed50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ed40:	2301      	movs	r3, #1
 800ed42:	617b      	str	r3, [r7, #20]
 800ed44:	e004      	b.n	800ed50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ed46:	4b0f      	ldr	r3, [pc, #60]	; (800ed84 <xTaskIncrementTick+0x170>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	4a0d      	ldr	r2, [pc, #52]	; (800ed84 <xTaskIncrementTick+0x170>)
 800ed4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ed50:	697b      	ldr	r3, [r7, #20]
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3718      	adds	r7, #24
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	20000d60 	.word	0x20000d60
 800ed60:	20000d3c 	.word	0x20000d3c
 800ed64:	20000cf0 	.word	0x20000cf0
 800ed68:	20000cf4 	.word	0x20000cf4
 800ed6c:	20000d50 	.word	0x20000d50
 800ed70:	20000d58 	.word	0x20000d58
 800ed74:	20000d40 	.word	0x20000d40
 800ed78:	20000868 	.word	0x20000868
 800ed7c:	20000864 	.word	0x20000864
 800ed80:	20000d4c 	.word	0x20000d4c
 800ed84:	20000d48 	.word	0x20000d48

0800ed88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b085      	sub	sp, #20
 800ed8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ed8e:	4b2a      	ldr	r3, [pc, #168]	; (800ee38 <vTaskSwitchContext+0xb0>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d003      	beq.n	800ed9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ed96:	4b29      	ldr	r3, [pc, #164]	; (800ee3c <vTaskSwitchContext+0xb4>)
 800ed98:	2201      	movs	r2, #1
 800ed9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ed9c:	e046      	b.n	800ee2c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ed9e:	4b27      	ldr	r3, [pc, #156]	; (800ee3c <vTaskSwitchContext+0xb4>)
 800eda0:	2200      	movs	r2, #0
 800eda2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eda4:	4b26      	ldr	r3, [pc, #152]	; (800ee40 <vTaskSwitchContext+0xb8>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	60fb      	str	r3, [r7, #12]
 800edaa:	e010      	b.n	800edce <vTaskSwitchContext+0x46>
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d10a      	bne.n	800edc8 <vTaskSwitchContext+0x40>
	__asm volatile
 800edb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	607b      	str	r3, [r7, #4]
}
 800edc4:	bf00      	nop
 800edc6:	e7fe      	b.n	800edc6 <vTaskSwitchContext+0x3e>
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	3b01      	subs	r3, #1
 800edcc:	60fb      	str	r3, [r7, #12]
 800edce:	491d      	ldr	r1, [pc, #116]	; (800ee44 <vTaskSwitchContext+0xbc>)
 800edd0:	68fa      	ldr	r2, [r7, #12]
 800edd2:	4613      	mov	r3, r2
 800edd4:	009b      	lsls	r3, r3, #2
 800edd6:	4413      	add	r3, r2
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	440b      	add	r3, r1
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d0e4      	beq.n	800edac <vTaskSwitchContext+0x24>
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	4613      	mov	r3, r2
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	4413      	add	r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	4a15      	ldr	r2, [pc, #84]	; (800ee44 <vTaskSwitchContext+0xbc>)
 800edee:	4413      	add	r3, r2
 800edf0:	60bb      	str	r3, [r7, #8]
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	685a      	ldr	r2, [r3, #4]
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	605a      	str	r2, [r3, #4]
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	685a      	ldr	r2, [r3, #4]
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	3308      	adds	r3, #8
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d104      	bne.n	800ee12 <vTaskSwitchContext+0x8a>
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	685b      	ldr	r3, [r3, #4]
 800ee0c:	685a      	ldr	r2, [r3, #4]
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	605a      	str	r2, [r3, #4]
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	4a0b      	ldr	r2, [pc, #44]	; (800ee48 <vTaskSwitchContext+0xc0>)
 800ee1a:	6013      	str	r3, [r2, #0]
 800ee1c:	4a08      	ldr	r2, [pc, #32]	; (800ee40 <vTaskSwitchContext+0xb8>)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ee22:	4b09      	ldr	r3, [pc, #36]	; (800ee48 <vTaskSwitchContext+0xc0>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	3354      	adds	r3, #84	; 0x54
 800ee28:	4a08      	ldr	r2, [pc, #32]	; (800ee4c <vTaskSwitchContext+0xc4>)
 800ee2a:	6013      	str	r3, [r2, #0]
}
 800ee2c:	bf00      	nop
 800ee2e:	3714      	adds	r7, #20
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr
 800ee38:	20000d60 	.word	0x20000d60
 800ee3c:	20000d4c 	.word	0x20000d4c
 800ee40:	20000d40 	.word	0x20000d40
 800ee44:	20000868 	.word	0x20000868
 800ee48:	20000864 	.word	0x20000864
 800ee4c:	2000003c 	.word	0x2000003c

0800ee50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d10a      	bne.n	800ee76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ee60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee64:	f383 8811 	msr	BASEPRI, r3
 800ee68:	f3bf 8f6f 	isb	sy
 800ee6c:	f3bf 8f4f 	dsb	sy
 800ee70:	60fb      	str	r3, [r7, #12]
}
 800ee72:	bf00      	nop
 800ee74:	e7fe      	b.n	800ee74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee76:	4b07      	ldr	r3, [pc, #28]	; (800ee94 <vTaskPlaceOnEventList+0x44>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	3318      	adds	r3, #24
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f7fe fd63 	bl	800d94a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee84:	2101      	movs	r1, #1
 800ee86:	6838      	ldr	r0, [r7, #0]
 800ee88:	f000 fc82 	bl	800f790 <prvAddCurrentTaskToDelayedList>
}
 800ee8c:	bf00      	nop
 800ee8e:	3710      	adds	r7, #16
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	20000864 	.word	0x20000864

0800ee98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d10a      	bne.n	800eec0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800eeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeae:	f383 8811 	msr	BASEPRI, r3
 800eeb2:	f3bf 8f6f 	isb	sy
 800eeb6:	f3bf 8f4f 	dsb	sy
 800eeba:	617b      	str	r3, [r7, #20]
}
 800eebc:	bf00      	nop
 800eebe:	e7fe      	b.n	800eebe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eec0:	4b0a      	ldr	r3, [pc, #40]	; (800eeec <vTaskPlaceOnEventListRestricted+0x54>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	3318      	adds	r3, #24
 800eec6:	4619      	mov	r1, r3
 800eec8:	68f8      	ldr	r0, [r7, #12]
 800eeca:	f7fe fd1a 	bl	800d902 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d002      	beq.n	800eeda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800eed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eed8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eeda:	6879      	ldr	r1, [r7, #4]
 800eedc:	68b8      	ldr	r0, [r7, #8]
 800eede:	f000 fc57 	bl	800f790 <prvAddCurrentTaskToDelayedList>
	}
 800eee2:	bf00      	nop
 800eee4:	3718      	adds	r7, #24
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	20000864 	.word	0x20000864

0800eef0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b086      	sub	sp, #24
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d10a      	bne.n	800ef1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ef06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0a:	f383 8811 	msr	BASEPRI, r3
 800ef0e:	f3bf 8f6f 	isb	sy
 800ef12:	f3bf 8f4f 	dsb	sy
 800ef16:	60fb      	str	r3, [r7, #12]
}
 800ef18:	bf00      	nop
 800ef1a:	e7fe      	b.n	800ef1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	3318      	adds	r3, #24
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fe fd4b 	bl	800d9bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef26:	4b1e      	ldr	r3, [pc, #120]	; (800efa0 <xTaskRemoveFromEventList+0xb0>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d11d      	bne.n	800ef6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	3304      	adds	r3, #4
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fe fd42 	bl	800d9bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef3c:	4b19      	ldr	r3, [pc, #100]	; (800efa4 <xTaskRemoveFromEventList+0xb4>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d903      	bls.n	800ef4c <xTaskRemoveFromEventList+0x5c>
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef48:	4a16      	ldr	r2, [pc, #88]	; (800efa4 <xTaskRemoveFromEventList+0xb4>)
 800ef4a:	6013      	str	r3, [r2, #0]
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef50:	4613      	mov	r3, r2
 800ef52:	009b      	lsls	r3, r3, #2
 800ef54:	4413      	add	r3, r2
 800ef56:	009b      	lsls	r3, r3, #2
 800ef58:	4a13      	ldr	r2, [pc, #76]	; (800efa8 <xTaskRemoveFromEventList+0xb8>)
 800ef5a:	441a      	add	r2, r3
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	3304      	adds	r3, #4
 800ef60:	4619      	mov	r1, r3
 800ef62:	4610      	mov	r0, r2
 800ef64:	f7fe fccd 	bl	800d902 <vListInsertEnd>
 800ef68:	e005      	b.n	800ef76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	3318      	adds	r3, #24
 800ef6e:	4619      	mov	r1, r3
 800ef70:	480e      	ldr	r0, [pc, #56]	; (800efac <xTaskRemoveFromEventList+0xbc>)
 800ef72:	f7fe fcc6 	bl	800d902 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef7a:	4b0d      	ldr	r3, [pc, #52]	; (800efb0 <xTaskRemoveFromEventList+0xc0>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d905      	bls.n	800ef90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ef84:	2301      	movs	r3, #1
 800ef86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ef88:	4b0a      	ldr	r3, [pc, #40]	; (800efb4 <xTaskRemoveFromEventList+0xc4>)
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	601a      	str	r2, [r3, #0]
 800ef8e:	e001      	b.n	800ef94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ef90:	2300      	movs	r3, #0
 800ef92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ef94:	697b      	ldr	r3, [r7, #20]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3718      	adds	r7, #24
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	20000d60 	.word	0x20000d60
 800efa4:	20000d40 	.word	0x20000d40
 800efa8:	20000868 	.word	0x20000868
 800efac:	20000cf8 	.word	0x20000cf8
 800efb0:	20000864 	.word	0x20000864
 800efb4:	20000d4c 	.word	0x20000d4c

0800efb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800efc0:	4b06      	ldr	r3, [pc, #24]	; (800efdc <vTaskInternalSetTimeOutState+0x24>)
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800efc8:	4b05      	ldr	r3, [pc, #20]	; (800efe0 <vTaskInternalSetTimeOutState+0x28>)
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	605a      	str	r2, [r3, #4]
}
 800efd0:	bf00      	nop
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr
 800efdc:	20000d50 	.word	0x20000d50
 800efe0:	20000d3c 	.word	0x20000d3c

0800efe4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b088      	sub	sp, #32
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d10a      	bne.n	800f00a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800eff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	613b      	str	r3, [r7, #16]
}
 800f006:	bf00      	nop
 800f008:	e7fe      	b.n	800f008 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d10a      	bne.n	800f026 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f014:	f383 8811 	msr	BASEPRI, r3
 800f018:	f3bf 8f6f 	isb	sy
 800f01c:	f3bf 8f4f 	dsb	sy
 800f020:	60fb      	str	r3, [r7, #12]
}
 800f022:	bf00      	nop
 800f024:	e7fe      	b.n	800f024 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f026:	f001 f8fd 	bl	8010224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f02a:	4b1d      	ldr	r3, [pc, #116]	; (800f0a0 <xTaskCheckForTimeOut+0xbc>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	69ba      	ldr	r2, [r7, #24]
 800f036:	1ad3      	subs	r3, r2, r3
 800f038:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f042:	d102      	bne.n	800f04a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f044:	2300      	movs	r3, #0
 800f046:	61fb      	str	r3, [r7, #28]
 800f048:	e023      	b.n	800f092 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681a      	ldr	r2, [r3, #0]
 800f04e:	4b15      	ldr	r3, [pc, #84]	; (800f0a4 <xTaskCheckForTimeOut+0xc0>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	429a      	cmp	r2, r3
 800f054:	d007      	beq.n	800f066 <xTaskCheckForTimeOut+0x82>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	685b      	ldr	r3, [r3, #4]
 800f05a:	69ba      	ldr	r2, [r7, #24]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d302      	bcc.n	800f066 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f060:	2301      	movs	r3, #1
 800f062:	61fb      	str	r3, [r7, #28]
 800f064:	e015      	b.n	800f092 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	697a      	ldr	r2, [r7, #20]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d20b      	bcs.n	800f088 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	1ad2      	subs	r2, r2, r3
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f7ff ff9b 	bl	800efb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f082:	2300      	movs	r3, #0
 800f084:	61fb      	str	r3, [r7, #28]
 800f086:	e004      	b.n	800f092 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	2200      	movs	r2, #0
 800f08c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f08e:	2301      	movs	r3, #1
 800f090:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f092:	f001 f8f7 	bl	8010284 <vPortExitCritical>

	return xReturn;
 800f096:	69fb      	ldr	r3, [r7, #28]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3720      	adds	r7, #32
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	20000d3c 	.word	0x20000d3c
 800f0a4:	20000d50 	.word	0x20000d50

0800f0a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f0ac:	4b03      	ldr	r3, [pc, #12]	; (800f0bc <vTaskMissedYield+0x14>)
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	601a      	str	r2, [r3, #0]
}
 800f0b2:	bf00      	nop
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr
 800f0bc:	20000d4c 	.word	0x20000d4c

0800f0c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f0c8:	f000 f852 	bl	800f170 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f0cc:	4b06      	ldr	r3, [pc, #24]	; (800f0e8 <prvIdleTask+0x28>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d9f9      	bls.n	800f0c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f0d4:	4b05      	ldr	r3, [pc, #20]	; (800f0ec <prvIdleTask+0x2c>)
 800f0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0da:	601a      	str	r2, [r3, #0]
 800f0dc:	f3bf 8f4f 	dsb	sy
 800f0e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f0e4:	e7f0      	b.n	800f0c8 <prvIdleTask+0x8>
 800f0e6:	bf00      	nop
 800f0e8:	20000868 	.word	0x20000868
 800f0ec:	e000ed04 	.word	0xe000ed04

0800f0f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	607b      	str	r3, [r7, #4]
 800f0fa:	e00c      	b.n	800f116 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	4613      	mov	r3, r2
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	4413      	add	r3, r2
 800f104:	009b      	lsls	r3, r3, #2
 800f106:	4a12      	ldr	r2, [pc, #72]	; (800f150 <prvInitialiseTaskLists+0x60>)
 800f108:	4413      	add	r3, r2
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fe fbcc 	bl	800d8a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	3301      	adds	r3, #1
 800f114:	607b      	str	r3, [r7, #4]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2b37      	cmp	r3, #55	; 0x37
 800f11a:	d9ef      	bls.n	800f0fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f11c:	480d      	ldr	r0, [pc, #52]	; (800f154 <prvInitialiseTaskLists+0x64>)
 800f11e:	f7fe fbc3 	bl	800d8a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f122:	480d      	ldr	r0, [pc, #52]	; (800f158 <prvInitialiseTaskLists+0x68>)
 800f124:	f7fe fbc0 	bl	800d8a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f128:	480c      	ldr	r0, [pc, #48]	; (800f15c <prvInitialiseTaskLists+0x6c>)
 800f12a:	f7fe fbbd 	bl	800d8a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f12e:	480c      	ldr	r0, [pc, #48]	; (800f160 <prvInitialiseTaskLists+0x70>)
 800f130:	f7fe fbba 	bl	800d8a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f134:	480b      	ldr	r0, [pc, #44]	; (800f164 <prvInitialiseTaskLists+0x74>)
 800f136:	f7fe fbb7 	bl	800d8a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f13a:	4b0b      	ldr	r3, [pc, #44]	; (800f168 <prvInitialiseTaskLists+0x78>)
 800f13c:	4a05      	ldr	r2, [pc, #20]	; (800f154 <prvInitialiseTaskLists+0x64>)
 800f13e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f140:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <prvInitialiseTaskLists+0x7c>)
 800f142:	4a05      	ldr	r2, [pc, #20]	; (800f158 <prvInitialiseTaskLists+0x68>)
 800f144:	601a      	str	r2, [r3, #0]
}
 800f146:	bf00      	nop
 800f148:	3708      	adds	r7, #8
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	20000868 	.word	0x20000868
 800f154:	20000cc8 	.word	0x20000cc8
 800f158:	20000cdc 	.word	0x20000cdc
 800f15c:	20000cf8 	.word	0x20000cf8
 800f160:	20000d0c 	.word	0x20000d0c
 800f164:	20000d24 	.word	0x20000d24
 800f168:	20000cf0 	.word	0x20000cf0
 800f16c:	20000cf4 	.word	0x20000cf4

0800f170 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f176:	e019      	b.n	800f1ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f178:	f001 f854 	bl	8010224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f17c:	4b10      	ldr	r3, [pc, #64]	; (800f1c0 <prvCheckTasksWaitingTermination+0x50>)
 800f17e:	68db      	ldr	r3, [r3, #12]
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	3304      	adds	r3, #4
 800f188:	4618      	mov	r0, r3
 800f18a:	f7fe fc17 	bl	800d9bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f18e:	4b0d      	ldr	r3, [pc, #52]	; (800f1c4 <prvCheckTasksWaitingTermination+0x54>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	3b01      	subs	r3, #1
 800f194:	4a0b      	ldr	r2, [pc, #44]	; (800f1c4 <prvCheckTasksWaitingTermination+0x54>)
 800f196:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f198:	4b0b      	ldr	r3, [pc, #44]	; (800f1c8 <prvCheckTasksWaitingTermination+0x58>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	3b01      	subs	r3, #1
 800f19e:	4a0a      	ldr	r2, [pc, #40]	; (800f1c8 <prvCheckTasksWaitingTermination+0x58>)
 800f1a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f1a2:	f001 f86f 	bl	8010284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 f810 	bl	800f1cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f1ac:	4b06      	ldr	r3, [pc, #24]	; (800f1c8 <prvCheckTasksWaitingTermination+0x58>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d1e1      	bne.n	800f178 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f1b4:	bf00      	nop
 800f1b6:	bf00      	nop
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	20000d0c 	.word	0x20000d0c
 800f1c4:	20000d38 	.word	0x20000d38
 800f1c8:	20000d20 	.word	0x20000d20

0800f1cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	3354      	adds	r3, #84	; 0x54
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f001 ff3b 	bl	8011054 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d108      	bne.n	800f1fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f001 fa07 	bl	8010600 <vPortFree>
				vPortFree( pxTCB );
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f001 fa04 	bl	8010600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f1f8:	e018      	b.n	800f22c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f200:	2b01      	cmp	r3, #1
 800f202:	d103      	bne.n	800f20c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f001 f9fb 	bl	8010600 <vPortFree>
	}
 800f20a:	e00f      	b.n	800f22c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f212:	2b02      	cmp	r3, #2
 800f214:	d00a      	beq.n	800f22c <prvDeleteTCB+0x60>
	__asm volatile
 800f216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21a:	f383 8811 	msr	BASEPRI, r3
 800f21e:	f3bf 8f6f 	isb	sy
 800f222:	f3bf 8f4f 	dsb	sy
 800f226:	60fb      	str	r3, [r7, #12]
}
 800f228:	bf00      	nop
 800f22a:	e7fe      	b.n	800f22a <prvDeleteTCB+0x5e>
	}
 800f22c:	bf00      	nop
 800f22e:	3710      	adds	r7, #16
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f23a:	4b0c      	ldr	r3, [pc, #48]	; (800f26c <prvResetNextTaskUnblockTime+0x38>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d104      	bne.n	800f24e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f244:	4b0a      	ldr	r3, [pc, #40]	; (800f270 <prvResetNextTaskUnblockTime+0x3c>)
 800f246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f24a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f24c:	e008      	b.n	800f260 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f24e:	4b07      	ldr	r3, [pc, #28]	; (800f26c <prvResetNextTaskUnblockTime+0x38>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	68db      	ldr	r3, [r3, #12]
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	4a04      	ldr	r2, [pc, #16]	; (800f270 <prvResetNextTaskUnblockTime+0x3c>)
 800f25e:	6013      	str	r3, [r2, #0]
}
 800f260:	bf00      	nop
 800f262:	370c      	adds	r7, #12
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr
 800f26c:	20000cf0 	.word	0x20000cf0
 800f270:	20000d58 	.word	0x20000d58

0800f274 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f27a:	4b0b      	ldr	r3, [pc, #44]	; (800f2a8 <xTaskGetSchedulerState+0x34>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d102      	bne.n	800f288 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f282:	2301      	movs	r3, #1
 800f284:	607b      	str	r3, [r7, #4]
 800f286:	e008      	b.n	800f29a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f288:	4b08      	ldr	r3, [pc, #32]	; (800f2ac <xTaskGetSchedulerState+0x38>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d102      	bne.n	800f296 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f290:	2302      	movs	r3, #2
 800f292:	607b      	str	r3, [r7, #4]
 800f294:	e001      	b.n	800f29a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f296:	2300      	movs	r3, #0
 800f298:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f29a:	687b      	ldr	r3, [r7, #4]
	}
 800f29c:	4618      	mov	r0, r3
 800f29e:	370c      	adds	r7, #12
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr
 800f2a8:	20000d44 	.word	0x20000d44
 800f2ac:	20000d60 	.word	0x20000d60

0800f2b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b086      	sub	sp, #24
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d056      	beq.n	800f374 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f2c6:	4b2e      	ldr	r3, [pc, #184]	; (800f380 <xTaskPriorityDisinherit+0xd0>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	693a      	ldr	r2, [r7, #16]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d00a      	beq.n	800f2e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d4:	f383 8811 	msr	BASEPRI, r3
 800f2d8:	f3bf 8f6f 	isb	sy
 800f2dc:	f3bf 8f4f 	dsb	sy
 800f2e0:	60fb      	str	r3, [r7, #12]
}
 800f2e2:	bf00      	nop
 800f2e4:	e7fe      	b.n	800f2e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d10a      	bne.n	800f304 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f2:	f383 8811 	msr	BASEPRI, r3
 800f2f6:	f3bf 8f6f 	isb	sy
 800f2fa:	f3bf 8f4f 	dsb	sy
 800f2fe:	60bb      	str	r3, [r7, #8]
}
 800f300:	bf00      	nop
 800f302:	e7fe      	b.n	800f302 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f308:	1e5a      	subs	r2, r3, #1
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f316:	429a      	cmp	r2, r3
 800f318:	d02c      	beq.n	800f374 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d128      	bne.n	800f374 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	3304      	adds	r3, #4
 800f326:	4618      	mov	r0, r3
 800f328:	f7fe fb48 	bl	800d9bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f338:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f344:	4b0f      	ldr	r3, [pc, #60]	; (800f384 <xTaskPriorityDisinherit+0xd4>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d903      	bls.n	800f354 <xTaskPriorityDisinherit+0xa4>
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f350:	4a0c      	ldr	r2, [pc, #48]	; (800f384 <xTaskPriorityDisinherit+0xd4>)
 800f352:	6013      	str	r3, [r2, #0]
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f358:	4613      	mov	r3, r2
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	4413      	add	r3, r2
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	4a09      	ldr	r2, [pc, #36]	; (800f388 <xTaskPriorityDisinherit+0xd8>)
 800f362:	441a      	add	r2, r3
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	3304      	adds	r3, #4
 800f368:	4619      	mov	r1, r3
 800f36a:	4610      	mov	r0, r2
 800f36c:	f7fe fac9 	bl	800d902 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f370:	2301      	movs	r3, #1
 800f372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f374:	697b      	ldr	r3, [r7, #20]
	}
 800f376:	4618      	mov	r0, r3
 800f378:	3718      	adds	r7, #24
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	20000864 	.word	0x20000864
 800f384:	20000d40 	.word	0x20000d40
 800f388:	20000868 	.word	0x20000868

0800f38c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b086      	sub	sp, #24
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
 800f398:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f39a:	f000 ff43 	bl	8010224 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f39e:	4b29      	ldr	r3, [pc, #164]	; (800f444 <xTaskNotifyWait+0xb8>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	2b02      	cmp	r3, #2
 800f3aa:	d01c      	beq.n	800f3e6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f3ac:	4b25      	ldr	r3, [pc, #148]	; (800f444 <xTaskNotifyWait+0xb8>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	43d2      	mvns	r2, r2
 800f3b8:	400a      	ands	r2, r1
 800f3ba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f3be:	4b21      	ldr	r3, [pc, #132]	; (800f444 <xTaskNotifyWait+0xb8>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00b      	beq.n	800f3e6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3ce:	2101      	movs	r1, #1
 800f3d0:	6838      	ldr	r0, [r7, #0]
 800f3d2:	f000 f9dd 	bl	800f790 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f3d6:	4b1c      	ldr	r3, [pc, #112]	; (800f448 <xTaskNotifyWait+0xbc>)
 800f3d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3dc:	601a      	str	r2, [r3, #0]
 800f3de:	f3bf 8f4f 	dsb	sy
 800f3e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f3e6:	f000 ff4d 	bl	8010284 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f3ea:	f000 ff1b 	bl	8010224 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d005      	beq.n	800f400 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f3f4:	4b13      	ldr	r3, [pc, #76]	; (800f444 <xTaskNotifyWait+0xb8>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f400:	4b10      	ldr	r3, [pc, #64]	; (800f444 <xTaskNotifyWait+0xb8>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b02      	cmp	r3, #2
 800f40c:	d002      	beq.n	800f414 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f40e:	2300      	movs	r3, #0
 800f410:	617b      	str	r3, [r7, #20]
 800f412:	e00a      	b.n	800f42a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f414:	4b0b      	ldr	r3, [pc, #44]	; (800f444 <xTaskNotifyWait+0xb8>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800f41c:	68ba      	ldr	r2, [r7, #8]
 800f41e:	43d2      	mvns	r2, r2
 800f420:	400a      	ands	r2, r1
 800f422:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800f426:	2301      	movs	r3, #1
 800f428:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f42a:	4b06      	ldr	r3, [pc, #24]	; (800f444 <xTaskNotifyWait+0xb8>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	2200      	movs	r2, #0
 800f430:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800f434:	f000 ff26 	bl	8010284 <vPortExitCritical>

		return xReturn;
 800f438:	697b      	ldr	r3, [r7, #20]
	}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3718      	adds	r7, #24
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	20000864 	.word	0x20000864
 800f448:	e000ed04 	.word	0xe000ed04

0800f44c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b08a      	sub	sp, #40	; 0x28
 800f450:	af00      	add	r7, sp, #0
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	60b9      	str	r1, [r7, #8]
 800f456:	603b      	str	r3, [r7, #0]
 800f458:	4613      	mov	r3, r2
 800f45a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f45c:	2301      	movs	r3, #1
 800f45e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d10a      	bne.n	800f47c <xTaskGenericNotify+0x30>
	__asm volatile
 800f466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46a:	f383 8811 	msr	BASEPRI, r3
 800f46e:	f3bf 8f6f 	isb	sy
 800f472:	f3bf 8f4f 	dsb	sy
 800f476:	61bb      	str	r3, [r7, #24]
}
 800f478:	bf00      	nop
 800f47a:	e7fe      	b.n	800f47a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f480:	f000 fed0 	bl	8010224 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d004      	beq.n	800f494 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f48a:	6a3b      	ldr	r3, [r7, #32]
 800f48c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f494:	6a3b      	ldr	r3, [r7, #32]
 800f496:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800f49a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f49c:	6a3b      	ldr	r3, [r7, #32]
 800f49e:	2202      	movs	r2, #2
 800f4a0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800f4a4:	79fb      	ldrb	r3, [r7, #7]
 800f4a6:	2b04      	cmp	r3, #4
 800f4a8:	d82d      	bhi.n	800f506 <xTaskGenericNotify+0xba>
 800f4aa:	a201      	add	r2, pc, #4	; (adr r2, 800f4b0 <xTaskGenericNotify+0x64>)
 800f4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4b0:	0800f529 	.word	0x0800f529
 800f4b4:	0800f4c5 	.word	0x0800f4c5
 800f4b8:	0800f4d7 	.word	0x0800f4d7
 800f4bc:	0800f4e7 	.word	0x0800f4e7
 800f4c0:	0800f4f1 	.word	0x0800f4f1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f4c4:	6a3b      	ldr	r3, [r7, #32]
 800f4c6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	431a      	orrs	r2, r3
 800f4ce:	6a3b      	ldr	r3, [r7, #32]
 800f4d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800f4d4:	e02b      	b.n	800f52e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f4d6:	6a3b      	ldr	r3, [r7, #32]
 800f4d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f4dc:	1c5a      	adds	r2, r3, #1
 800f4de:	6a3b      	ldr	r3, [r7, #32]
 800f4e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800f4e4:	e023      	b.n	800f52e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f4e6:	6a3b      	ldr	r3, [r7, #32]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800f4ee:	e01e      	b.n	800f52e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f4f0:	7ffb      	ldrb	r3, [r7, #31]
 800f4f2:	2b02      	cmp	r3, #2
 800f4f4:	d004      	beq.n	800f500 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f4f6:	6a3b      	ldr	r3, [r7, #32]
 800f4f8:	68ba      	ldr	r2, [r7, #8]
 800f4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f4fe:	e016      	b.n	800f52e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800f500:	2300      	movs	r3, #0
 800f502:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800f504:	e013      	b.n	800f52e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f506:	6a3b      	ldr	r3, [r7, #32]
 800f508:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f50c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f510:	d00c      	beq.n	800f52c <xTaskGenericNotify+0xe0>
	__asm volatile
 800f512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f516:	f383 8811 	msr	BASEPRI, r3
 800f51a:	f3bf 8f6f 	isb	sy
 800f51e:	f3bf 8f4f 	dsb	sy
 800f522:	617b      	str	r3, [r7, #20]
}
 800f524:	bf00      	nop
 800f526:	e7fe      	b.n	800f526 <xTaskGenericNotify+0xda>
					break;
 800f528:	bf00      	nop
 800f52a:	e000      	b.n	800f52e <xTaskGenericNotify+0xe2>

					break;
 800f52c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f52e:	7ffb      	ldrb	r3, [r7, #31]
 800f530:	2b01      	cmp	r3, #1
 800f532:	d13a      	bne.n	800f5aa <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f534:	6a3b      	ldr	r3, [r7, #32]
 800f536:	3304      	adds	r3, #4
 800f538:	4618      	mov	r0, r3
 800f53a:	f7fe fa3f 	bl	800d9bc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f53e:	6a3b      	ldr	r3, [r7, #32]
 800f540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f542:	4b1d      	ldr	r3, [pc, #116]	; (800f5b8 <xTaskGenericNotify+0x16c>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	429a      	cmp	r2, r3
 800f548:	d903      	bls.n	800f552 <xTaskGenericNotify+0x106>
 800f54a:	6a3b      	ldr	r3, [r7, #32]
 800f54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f54e:	4a1a      	ldr	r2, [pc, #104]	; (800f5b8 <xTaskGenericNotify+0x16c>)
 800f550:	6013      	str	r3, [r2, #0]
 800f552:	6a3b      	ldr	r3, [r7, #32]
 800f554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f556:	4613      	mov	r3, r2
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	4413      	add	r3, r2
 800f55c:	009b      	lsls	r3, r3, #2
 800f55e:	4a17      	ldr	r2, [pc, #92]	; (800f5bc <xTaskGenericNotify+0x170>)
 800f560:	441a      	add	r2, r3
 800f562:	6a3b      	ldr	r3, [r7, #32]
 800f564:	3304      	adds	r3, #4
 800f566:	4619      	mov	r1, r3
 800f568:	4610      	mov	r0, r2
 800f56a:	f7fe f9ca 	bl	800d902 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f56e:	6a3b      	ldr	r3, [r7, #32]
 800f570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f572:	2b00      	cmp	r3, #0
 800f574:	d00a      	beq.n	800f58c <xTaskGenericNotify+0x140>
	__asm volatile
 800f576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f57a:	f383 8811 	msr	BASEPRI, r3
 800f57e:	f3bf 8f6f 	isb	sy
 800f582:	f3bf 8f4f 	dsb	sy
 800f586:	613b      	str	r3, [r7, #16]
}
 800f588:	bf00      	nop
 800f58a:	e7fe      	b.n	800f58a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f58c:	6a3b      	ldr	r3, [r7, #32]
 800f58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f590:	4b0b      	ldr	r3, [pc, #44]	; (800f5c0 <xTaskGenericNotify+0x174>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f596:	429a      	cmp	r2, r3
 800f598:	d907      	bls.n	800f5aa <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f59a:	4b0a      	ldr	r3, [pc, #40]	; (800f5c4 <xTaskGenericNotify+0x178>)
 800f59c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5a0:	601a      	str	r2, [r3, #0]
 800f5a2:	f3bf 8f4f 	dsb	sy
 800f5a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f5aa:	f000 fe6b 	bl	8010284 <vPortExitCritical>

		return xReturn;
 800f5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3728      	adds	r7, #40	; 0x28
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	20000d40 	.word	0x20000d40
 800f5bc:	20000868 	.word	0x20000868
 800f5c0:	20000864 	.word	0x20000864
 800f5c4:	e000ed04 	.word	0xe000ed04

0800f5c8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b08e      	sub	sp, #56	; 0x38
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	603b      	str	r3, [r7, #0]
 800f5d4:	4613      	mov	r3, r2
 800f5d6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f5d8:	2301      	movs	r3, #1
 800f5da:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d10a      	bne.n	800f5f8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800f5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e6:	f383 8811 	msr	BASEPRI, r3
 800f5ea:	f3bf 8f6f 	isb	sy
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f5f4:	bf00      	nop
 800f5f6:	e7fe      	b.n	800f5f6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f5f8:	f000 fef6 	bl	80103e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800f600:	f3ef 8211 	mrs	r2, BASEPRI
 800f604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f608:	f383 8811 	msr	BASEPRI, r3
 800f60c:	f3bf 8f6f 	isb	sy
 800f610:	f3bf 8f4f 	dsb	sy
 800f614:	623a      	str	r2, [r7, #32]
 800f616:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f618:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f61a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d004      	beq.n	800f62c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f624:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800f632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f638:	2202      	movs	r2, #2
 800f63a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800f63e:	79fb      	ldrb	r3, [r7, #7]
 800f640:	2b04      	cmp	r3, #4
 800f642:	d82f      	bhi.n	800f6a4 <xTaskGenericNotifyFromISR+0xdc>
 800f644:	a201      	add	r2, pc, #4	; (adr r2, 800f64c <xTaskGenericNotifyFromISR+0x84>)
 800f646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f64a:	bf00      	nop
 800f64c:	0800f6c7 	.word	0x0800f6c7
 800f650:	0800f661 	.word	0x0800f661
 800f654:	0800f673 	.word	0x0800f673
 800f658:	0800f683 	.word	0x0800f683
 800f65c:	0800f68d 	.word	0x0800f68d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f662:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	431a      	orrs	r2, r3
 800f66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800f670:	e02c      	b.n	800f6cc <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f674:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800f680:	e024      	b.n	800f6cc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f684:	68ba      	ldr	r2, [r7, #8]
 800f686:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800f68a:	e01f      	b.n	800f6cc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f68c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f690:	2b02      	cmp	r3, #2
 800f692:	d004      	beq.n	800f69e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f696:	68ba      	ldr	r2, [r7, #8]
 800f698:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f69c:	e016      	b.n	800f6cc <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800f6a2:	e013      	b.n	800f6cc <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f6aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6ae:	d00c      	beq.n	800f6ca <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800f6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b4:	f383 8811 	msr	BASEPRI, r3
 800f6b8:	f3bf 8f6f 	isb	sy
 800f6bc:	f3bf 8f4f 	dsb	sy
 800f6c0:	61bb      	str	r3, [r7, #24]
}
 800f6c2:	bf00      	nop
 800f6c4:	e7fe      	b.n	800f6c4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f6c6:	bf00      	nop
 800f6c8:	e000      	b.n	800f6cc <xTaskGenericNotifyFromISR+0x104>
					break;
 800f6ca:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f6cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d146      	bne.n	800f762 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d00a      	beq.n	800f6f2 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800f6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e0:	f383 8811 	msr	BASEPRI, r3
 800f6e4:	f3bf 8f6f 	isb	sy
 800f6e8:	f3bf 8f4f 	dsb	sy
 800f6ec:	617b      	str	r3, [r7, #20]
}
 800f6ee:	bf00      	nop
 800f6f0:	e7fe      	b.n	800f6f0 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6f2:	4b21      	ldr	r3, [pc, #132]	; (800f778 <xTaskGenericNotifyFromISR+0x1b0>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d11d      	bne.n	800f736 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fc:	3304      	adds	r3, #4
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fe f95c 	bl	800d9bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f708:	4b1c      	ldr	r3, [pc, #112]	; (800f77c <xTaskGenericNotifyFromISR+0x1b4>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d903      	bls.n	800f718 <xTaskGenericNotifyFromISR+0x150>
 800f710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f714:	4a19      	ldr	r2, [pc, #100]	; (800f77c <xTaskGenericNotifyFromISR+0x1b4>)
 800f716:	6013      	str	r3, [r2, #0]
 800f718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f71c:	4613      	mov	r3, r2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	4413      	add	r3, r2
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	4a16      	ldr	r2, [pc, #88]	; (800f780 <xTaskGenericNotifyFromISR+0x1b8>)
 800f726:	441a      	add	r2, r3
 800f728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72a:	3304      	adds	r3, #4
 800f72c:	4619      	mov	r1, r3
 800f72e:	4610      	mov	r0, r2
 800f730:	f7fe f8e7 	bl	800d902 <vListInsertEnd>
 800f734:	e005      	b.n	800f742 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f738:	3318      	adds	r3, #24
 800f73a:	4619      	mov	r1, r3
 800f73c:	4811      	ldr	r0, [pc, #68]	; (800f784 <xTaskGenericNotifyFromISR+0x1bc>)
 800f73e:	f7fe f8e0 	bl	800d902 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f746:	4b10      	ldr	r3, [pc, #64]	; (800f788 <xTaskGenericNotifyFromISR+0x1c0>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d908      	bls.n	800f762 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f752:	2b00      	cmp	r3, #0
 800f754:	d002      	beq.n	800f75c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f758:	2201      	movs	r2, #1
 800f75a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f75c:	4b0b      	ldr	r3, [pc, #44]	; (800f78c <xTaskGenericNotifyFromISR+0x1c4>)
 800f75e:	2201      	movs	r2, #1
 800f760:	601a      	str	r2, [r3, #0]
 800f762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f764:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	f383 8811 	msr	BASEPRI, r3
}
 800f76c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800f770:	4618      	mov	r0, r3
 800f772:	3738      	adds	r7, #56	; 0x38
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	20000d60 	.word	0x20000d60
 800f77c:	20000d40 	.word	0x20000d40
 800f780:	20000868 	.word	0x20000868
 800f784:	20000cf8 	.word	0x20000cf8
 800f788:	20000864 	.word	0x20000864
 800f78c:	20000d4c 	.word	0x20000d4c

0800f790 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f79a:	4b21      	ldr	r3, [pc, #132]	; (800f820 <prvAddCurrentTaskToDelayedList+0x90>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7a0:	4b20      	ldr	r3, [pc, #128]	; (800f824 <prvAddCurrentTaskToDelayedList+0x94>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	3304      	adds	r3, #4
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fe f908 	bl	800d9bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7b2:	d10a      	bne.n	800f7ca <prvAddCurrentTaskToDelayedList+0x3a>
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d007      	beq.n	800f7ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7ba:	4b1a      	ldr	r3, [pc, #104]	; (800f824 <prvAddCurrentTaskToDelayedList+0x94>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	3304      	adds	r3, #4
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	4819      	ldr	r0, [pc, #100]	; (800f828 <prvAddCurrentTaskToDelayedList+0x98>)
 800f7c4:	f7fe f89d 	bl	800d902 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f7c8:	e026      	b.n	800f818 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f7ca:	68fa      	ldr	r2, [r7, #12]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4413      	add	r3, r2
 800f7d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f7d2:	4b14      	ldr	r3, [pc, #80]	; (800f824 <prvAddCurrentTaskToDelayedList+0x94>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	68ba      	ldr	r2, [r7, #8]
 800f7d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f7da:	68ba      	ldr	r2, [r7, #8]
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d209      	bcs.n	800f7f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7e2:	4b12      	ldr	r3, [pc, #72]	; (800f82c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f7e4:	681a      	ldr	r2, [r3, #0]
 800f7e6:	4b0f      	ldr	r3, [pc, #60]	; (800f824 <prvAddCurrentTaskToDelayedList+0x94>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	3304      	adds	r3, #4
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	4610      	mov	r0, r2
 800f7f0:	f7fe f8ab 	bl	800d94a <vListInsert>
}
 800f7f4:	e010      	b.n	800f818 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7f6:	4b0e      	ldr	r3, [pc, #56]	; (800f830 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	4b0a      	ldr	r3, [pc, #40]	; (800f824 <prvAddCurrentTaskToDelayedList+0x94>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	3304      	adds	r3, #4
 800f800:	4619      	mov	r1, r3
 800f802:	4610      	mov	r0, r2
 800f804:	f7fe f8a1 	bl	800d94a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f808:	4b0a      	ldr	r3, [pc, #40]	; (800f834 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	68ba      	ldr	r2, [r7, #8]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d202      	bcs.n	800f818 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f812:	4a08      	ldr	r2, [pc, #32]	; (800f834 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	6013      	str	r3, [r2, #0]
}
 800f818:	bf00      	nop
 800f81a:	3710      	adds	r7, #16
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	20000d3c 	.word	0x20000d3c
 800f824:	20000864 	.word	0x20000864
 800f828:	20000d24 	.word	0x20000d24
 800f82c:	20000cf4 	.word	0x20000cf4
 800f830:	20000cf0 	.word	0x20000cf0
 800f834:	20000d58 	.word	0x20000d58

0800f838 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b08a      	sub	sp, #40	; 0x28
 800f83c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f83e:	2300      	movs	r3, #0
 800f840:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f842:	f000 fb63 	bl	800ff0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f846:	4b1c      	ldr	r3, [pc, #112]	; (800f8b8 <xTimerCreateTimerTask+0x80>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d021      	beq.n	800f892 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f84e:	2300      	movs	r3, #0
 800f850:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f852:	2300      	movs	r3, #0
 800f854:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f856:	1d3a      	adds	r2, r7, #4
 800f858:	f107 0108 	add.w	r1, r7, #8
 800f85c:	f107 030c 	add.w	r3, r7, #12
 800f860:	4618      	mov	r0, r3
 800f862:	f7fe f807 	bl	800d874 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f866:	6879      	ldr	r1, [r7, #4]
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	68fa      	ldr	r2, [r7, #12]
 800f86c:	9202      	str	r2, [sp, #8]
 800f86e:	9301      	str	r3, [sp, #4]
 800f870:	2302      	movs	r3, #2
 800f872:	9300      	str	r3, [sp, #0]
 800f874:	2300      	movs	r3, #0
 800f876:	460a      	mov	r2, r1
 800f878:	4910      	ldr	r1, [pc, #64]	; (800f8bc <xTimerCreateTimerTask+0x84>)
 800f87a:	4811      	ldr	r0, [pc, #68]	; (800f8c0 <xTimerCreateTimerTask+0x88>)
 800f87c:	f7fe feb2 	bl	800e5e4 <xTaskCreateStatic>
 800f880:	4603      	mov	r3, r0
 800f882:	4a10      	ldr	r2, [pc, #64]	; (800f8c4 <xTimerCreateTimerTask+0x8c>)
 800f884:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f886:	4b0f      	ldr	r3, [pc, #60]	; (800f8c4 <xTimerCreateTimerTask+0x8c>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d001      	beq.n	800f892 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f88e:	2301      	movs	r3, #1
 800f890:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d10a      	bne.n	800f8ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89c:	f383 8811 	msr	BASEPRI, r3
 800f8a0:	f3bf 8f6f 	isb	sy
 800f8a4:	f3bf 8f4f 	dsb	sy
 800f8a8:	613b      	str	r3, [r7, #16]
}
 800f8aa:	bf00      	nop
 800f8ac:	e7fe      	b.n	800f8ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f8ae:	697b      	ldr	r3, [r7, #20]
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3718      	adds	r7, #24
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	20000d94 	.word	0x20000d94
 800f8bc:	08011b6c 	.word	0x08011b6c
 800f8c0:	0800fab5 	.word	0x0800fab5
 800f8c4:	20000d98 	.word	0x20000d98

0800f8c8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b088      	sub	sp, #32
 800f8cc:	af02      	add	r7, sp, #8
 800f8ce:	60f8      	str	r0, [r7, #12]
 800f8d0:	60b9      	str	r1, [r7, #8]
 800f8d2:	607a      	str	r2, [r7, #4]
 800f8d4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f8d6:	202c      	movs	r0, #44	; 0x2c
 800f8d8:	f000 fdc6 	bl	8010468 <pvPortMalloc>
 800f8dc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d00d      	beq.n	800f900 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	9301      	str	r3, [sp, #4]
 800f8f0:	6a3b      	ldr	r3, [r7, #32]
 800f8f2:	9300      	str	r3, [sp, #0]
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	687a      	ldr	r2, [r7, #4]
 800f8f8:	68b9      	ldr	r1, [r7, #8]
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f000 f805 	bl	800f90a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f900:	697b      	ldr	r3, [r7, #20]
	}
 800f902:	4618      	mov	r0, r3
 800f904:	3718      	adds	r7, #24
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}

0800f90a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f90a:	b580      	push	{r7, lr}
 800f90c:	b086      	sub	sp, #24
 800f90e:	af00      	add	r7, sp, #0
 800f910:	60f8      	str	r0, [r7, #12]
 800f912:	60b9      	str	r1, [r7, #8]
 800f914:	607a      	str	r2, [r7, #4]
 800f916:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d10a      	bne.n	800f934 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800f91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f922:	f383 8811 	msr	BASEPRI, r3
 800f926:	f3bf 8f6f 	isb	sy
 800f92a:	f3bf 8f4f 	dsb	sy
 800f92e:	617b      	str	r3, [r7, #20]
}
 800f930:	bf00      	nop
 800f932:	e7fe      	b.n	800f932 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f936:	2b00      	cmp	r3, #0
 800f938:	d01e      	beq.n	800f978 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f93a:	f000 fae7 	bl	800ff0c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f940:	68fa      	ldr	r2, [r7, #12]
 800f942:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f946:	68ba      	ldr	r2, [r7, #8]
 800f948:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94c:	683a      	ldr	r2, [r7, #0]
 800f94e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f952:	6a3a      	ldr	r2, [r7, #32]
 800f954:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f958:	3304      	adds	r3, #4
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7fd ffc4 	bl	800d8e8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d008      	beq.n	800f978 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f968:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f96c:	f043 0304 	orr.w	r3, r3, #4
 800f970:	b2da      	uxtb	r2, r3
 800f972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f974:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f978:	bf00      	nop
 800f97a:	3718      	adds	r7, #24
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b08a      	sub	sp, #40	; 0x28
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	607a      	str	r2, [r7, #4]
 800f98c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f98e:	2300      	movs	r3, #0
 800f990:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d10a      	bne.n	800f9ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800f998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f99c:	f383 8811 	msr	BASEPRI, r3
 800f9a0:	f3bf 8f6f 	isb	sy
 800f9a4:	f3bf 8f4f 	dsb	sy
 800f9a8:	623b      	str	r3, [r7, #32]
}
 800f9aa:	bf00      	nop
 800f9ac:	e7fe      	b.n	800f9ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f9ae:	4b1a      	ldr	r3, [pc, #104]	; (800fa18 <xTimerGenericCommand+0x98>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d02a      	beq.n	800fa0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	2b05      	cmp	r3, #5
 800f9c6:	dc18      	bgt.n	800f9fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f9c8:	f7ff fc54 	bl	800f274 <xTaskGetSchedulerState>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b02      	cmp	r3, #2
 800f9d0:	d109      	bne.n	800f9e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f9d2:	4b11      	ldr	r3, [pc, #68]	; (800fa18 <xTimerGenericCommand+0x98>)
 800f9d4:	6818      	ldr	r0, [r3, #0]
 800f9d6:	f107 0110 	add.w	r1, r7, #16
 800f9da:	2300      	movs	r3, #0
 800f9dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9de:	f7fe f955 	bl	800dc8c <xQueueGenericSend>
 800f9e2:	6278      	str	r0, [r7, #36]	; 0x24
 800f9e4:	e012      	b.n	800fa0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f9e6:	4b0c      	ldr	r3, [pc, #48]	; (800fa18 <xTimerGenericCommand+0x98>)
 800f9e8:	6818      	ldr	r0, [r3, #0]
 800f9ea:	f107 0110 	add.w	r1, r7, #16
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f7fe f94b 	bl	800dc8c <xQueueGenericSend>
 800f9f6:	6278      	str	r0, [r7, #36]	; 0x24
 800f9f8:	e008      	b.n	800fa0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f9fa:	4b07      	ldr	r3, [pc, #28]	; (800fa18 <xTimerGenericCommand+0x98>)
 800f9fc:	6818      	ldr	r0, [r3, #0]
 800f9fe:	f107 0110 	add.w	r1, r7, #16
 800fa02:	2300      	movs	r3, #0
 800fa04:	683a      	ldr	r2, [r7, #0]
 800fa06:	f7fe fa3f 	bl	800de88 <xQueueGenericSendFromISR>
 800fa0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3728      	adds	r7, #40	; 0x28
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	20000d94 	.word	0x20000d94

0800fa1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b088      	sub	sp, #32
 800fa20:	af02      	add	r7, sp, #8
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa26:	4b22      	ldr	r3, [pc, #136]	; (800fab0 <prvProcessExpiredTimer+0x94>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	68db      	ldr	r3, [r3, #12]
 800fa2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	3304      	adds	r3, #4
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fd ffc1 	bl	800d9bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa40:	f003 0304 	and.w	r3, r3, #4
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d022      	beq.n	800fa8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	699a      	ldr	r2, [r3, #24]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	18d1      	adds	r1, r2, r3
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	683a      	ldr	r2, [r7, #0]
 800fa54:	6978      	ldr	r0, [r7, #20]
 800fa56:	f000 f8d1 	bl	800fbfc <prvInsertTimerInActiveList>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d01f      	beq.n	800faa0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa60:	2300      	movs	r3, #0
 800fa62:	9300      	str	r3, [sp, #0]
 800fa64:	2300      	movs	r3, #0
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	2100      	movs	r1, #0
 800fa6a:	6978      	ldr	r0, [r7, #20]
 800fa6c:	f7ff ff88 	bl	800f980 <xTimerGenericCommand>
 800fa70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d113      	bne.n	800faa0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa7c:	f383 8811 	msr	BASEPRI, r3
 800fa80:	f3bf 8f6f 	isb	sy
 800fa84:	f3bf 8f4f 	dsb	sy
 800fa88:	60fb      	str	r3, [r7, #12]
}
 800fa8a:	bf00      	nop
 800fa8c:	e7fe      	b.n	800fa8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa94:	f023 0301 	bic.w	r3, r3, #1
 800fa98:	b2da      	uxtb	r2, r3
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	6a1b      	ldr	r3, [r3, #32]
 800faa4:	6978      	ldr	r0, [r7, #20]
 800faa6:	4798      	blx	r3
}
 800faa8:	bf00      	nop
 800faaa:	3718      	adds	r7, #24
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	20000d8c 	.word	0x20000d8c

0800fab4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fabc:	f107 0308 	add.w	r3, r7, #8
 800fac0:	4618      	mov	r0, r3
 800fac2:	f000 f857 	bl	800fb74 <prvGetNextExpireTime>
 800fac6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	4619      	mov	r1, r3
 800facc:	68f8      	ldr	r0, [r7, #12]
 800face:	f000 f803 	bl	800fad8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fad2:	f000 f8d5 	bl	800fc80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fad6:	e7f1      	b.n	800fabc <prvTimerTask+0x8>

0800fad8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fae2:	f7fe ffdb 	bl	800ea9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fae6:	f107 0308 	add.w	r3, r7, #8
 800faea:	4618      	mov	r0, r3
 800faec:	f000 f866 	bl	800fbbc <prvSampleTimeNow>
 800faf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d130      	bne.n	800fb5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d10a      	bne.n	800fb14 <prvProcessTimerOrBlockTask+0x3c>
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d806      	bhi.n	800fb14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fb06:	f7fe ffd7 	bl	800eab8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fb0a:	68f9      	ldr	r1, [r7, #12]
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f7ff ff85 	bl	800fa1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fb12:	e024      	b.n	800fb5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d008      	beq.n	800fb2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fb1a:	4b13      	ldr	r3, [pc, #76]	; (800fb68 <prvProcessTimerOrBlockTask+0x90>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d101      	bne.n	800fb28 <prvProcessTimerOrBlockTask+0x50>
 800fb24:	2301      	movs	r3, #1
 800fb26:	e000      	b.n	800fb2a <prvProcessTimerOrBlockTask+0x52>
 800fb28:	2300      	movs	r3, #0
 800fb2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fb2c:	4b0f      	ldr	r3, [pc, #60]	; (800fb6c <prvProcessTimerOrBlockTask+0x94>)
 800fb2e:	6818      	ldr	r0, [r3, #0]
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	683a      	ldr	r2, [r7, #0]
 800fb38:	4619      	mov	r1, r3
 800fb3a:	f7fe fd1f 	bl	800e57c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fb3e:	f7fe ffbb 	bl	800eab8 <xTaskResumeAll>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d10a      	bne.n	800fb5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fb48:	4b09      	ldr	r3, [pc, #36]	; (800fb70 <prvProcessTimerOrBlockTask+0x98>)
 800fb4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb4e:	601a      	str	r2, [r3, #0]
 800fb50:	f3bf 8f4f 	dsb	sy
 800fb54:	f3bf 8f6f 	isb	sy
}
 800fb58:	e001      	b.n	800fb5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fb5a:	f7fe ffad 	bl	800eab8 <xTaskResumeAll>
}
 800fb5e:	bf00      	nop
 800fb60:	3710      	adds	r7, #16
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	20000d90 	.word	0x20000d90
 800fb6c:	20000d94 	.word	0x20000d94
 800fb70:	e000ed04 	.word	0xe000ed04

0800fb74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fb74:	b480      	push	{r7}
 800fb76:	b085      	sub	sp, #20
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fb7c:	4b0e      	ldr	r3, [pc, #56]	; (800fbb8 <prvGetNextExpireTime+0x44>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d101      	bne.n	800fb8a <prvGetNextExpireTime+0x16>
 800fb86:	2201      	movs	r2, #1
 800fb88:	e000      	b.n	800fb8c <prvGetNextExpireTime+0x18>
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d105      	bne.n	800fba4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb98:	4b07      	ldr	r3, [pc, #28]	; (800fbb8 <prvGetNextExpireTime+0x44>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	68db      	ldr	r3, [r3, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	60fb      	str	r3, [r7, #12]
 800fba2:	e001      	b.n	800fba8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fba4:	2300      	movs	r3, #0
 800fba6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fba8:	68fb      	ldr	r3, [r7, #12]
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3714      	adds	r7, #20
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop
 800fbb8:	20000d8c 	.word	0x20000d8c

0800fbbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fbc4:	f7ff f816 	bl	800ebf4 <xTaskGetTickCount>
 800fbc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fbca:	4b0b      	ldr	r3, [pc, #44]	; (800fbf8 <prvSampleTimeNow+0x3c>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	68fa      	ldr	r2, [r7, #12]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d205      	bcs.n	800fbe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fbd4:	f000 f936 	bl	800fe44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2201      	movs	r2, #1
 800fbdc:	601a      	str	r2, [r3, #0]
 800fbde:	e002      	b.n	800fbe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fbe6:	4a04      	ldr	r2, [pc, #16]	; (800fbf8 <prvSampleTimeNow+0x3c>)
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fbec:	68fb      	ldr	r3, [r7, #12]
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	20000d9c 	.word	0x20000d9c

0800fbfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b086      	sub	sp, #24
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	60b9      	str	r1, [r7, #8]
 800fc06:	607a      	str	r2, [r7, #4]
 800fc08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	68ba      	ldr	r2, [r7, #8]
 800fc12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	68fa      	ldr	r2, [r7, #12]
 800fc18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fc1a:	68ba      	ldr	r2, [r7, #8]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d812      	bhi.n	800fc48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	1ad2      	subs	r2, r2, r3
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	699b      	ldr	r3, [r3, #24]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d302      	bcc.n	800fc36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fc30:	2301      	movs	r3, #1
 800fc32:	617b      	str	r3, [r7, #20]
 800fc34:	e01b      	b.n	800fc6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fc36:	4b10      	ldr	r3, [pc, #64]	; (800fc78 <prvInsertTimerInActiveList+0x7c>)
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	3304      	adds	r3, #4
 800fc3e:	4619      	mov	r1, r3
 800fc40:	4610      	mov	r0, r2
 800fc42:	f7fd fe82 	bl	800d94a <vListInsert>
 800fc46:	e012      	b.n	800fc6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d206      	bcs.n	800fc5e <prvInsertTimerInActiveList+0x62>
 800fc50:	68ba      	ldr	r2, [r7, #8]
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d302      	bcc.n	800fc5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	617b      	str	r3, [r7, #20]
 800fc5c:	e007      	b.n	800fc6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc5e:	4b07      	ldr	r3, [pc, #28]	; (800fc7c <prvInsertTimerInActiveList+0x80>)
 800fc60:	681a      	ldr	r2, [r3, #0]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	3304      	adds	r3, #4
 800fc66:	4619      	mov	r1, r3
 800fc68:	4610      	mov	r0, r2
 800fc6a:	f7fd fe6e 	bl	800d94a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fc6e:	697b      	ldr	r3, [r7, #20]
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3718      	adds	r7, #24
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	20000d90 	.word	0x20000d90
 800fc7c:	20000d8c 	.word	0x20000d8c

0800fc80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b08e      	sub	sp, #56	; 0x38
 800fc84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fc86:	e0ca      	b.n	800fe1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	da18      	bge.n	800fcc0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fc8e:	1d3b      	adds	r3, r7, #4
 800fc90:	3304      	adds	r3, #4
 800fc92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d10a      	bne.n	800fcb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc9e:	f383 8811 	msr	BASEPRI, r3
 800fca2:	f3bf 8f6f 	isb	sy
 800fca6:	f3bf 8f4f 	dsb	sy
 800fcaa:	61fb      	str	r3, [r7, #28]
}
 800fcac:	bf00      	nop
 800fcae:	e7fe      	b.n	800fcae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcb6:	6850      	ldr	r0, [r2, #4]
 800fcb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcba:	6892      	ldr	r2, [r2, #8]
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	f2c0 80aa 	blt.w	800fe1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcce:	695b      	ldr	r3, [r3, #20]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d004      	beq.n	800fcde <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd6:	3304      	adds	r3, #4
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7fd fe6f 	bl	800d9bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fcde:	463b      	mov	r3, r7
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7ff ff6b 	bl	800fbbc <prvSampleTimeNow>
 800fce6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2b09      	cmp	r3, #9
 800fcec:	f200 8097 	bhi.w	800fe1e <prvProcessReceivedCommands+0x19e>
 800fcf0:	a201      	add	r2, pc, #4	; (adr r2, 800fcf8 <prvProcessReceivedCommands+0x78>)
 800fcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf6:	bf00      	nop
 800fcf8:	0800fd21 	.word	0x0800fd21
 800fcfc:	0800fd21 	.word	0x0800fd21
 800fd00:	0800fd21 	.word	0x0800fd21
 800fd04:	0800fd95 	.word	0x0800fd95
 800fd08:	0800fda9 	.word	0x0800fda9
 800fd0c:	0800fdf3 	.word	0x0800fdf3
 800fd10:	0800fd21 	.word	0x0800fd21
 800fd14:	0800fd21 	.word	0x0800fd21
 800fd18:	0800fd95 	.word	0x0800fd95
 800fd1c:	0800fda9 	.word	0x0800fda9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd26:	f043 0301 	orr.w	r3, r3, #1
 800fd2a:	b2da      	uxtb	r2, r3
 800fd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fd32:	68ba      	ldr	r2, [r7, #8]
 800fd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd36:	699b      	ldr	r3, [r3, #24]
 800fd38:	18d1      	adds	r1, r2, r3
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd40:	f7ff ff5c 	bl	800fbfc <prvInsertTimerInActiveList>
 800fd44:	4603      	mov	r3, r0
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d069      	beq.n	800fe1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd4c:	6a1b      	ldr	r3, [r3, #32]
 800fd4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd58:	f003 0304 	and.w	r3, r3, #4
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d05e      	beq.n	800fe1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fd60:	68ba      	ldr	r2, [r7, #8]
 800fd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd64:	699b      	ldr	r3, [r3, #24]
 800fd66:	441a      	add	r2, r3
 800fd68:	2300      	movs	r3, #0
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	2100      	movs	r1, #0
 800fd70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd72:	f7ff fe05 	bl	800f980 <xTimerGenericCommand>
 800fd76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fd78:	6a3b      	ldr	r3, [r7, #32]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d14f      	bne.n	800fe1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd82:	f383 8811 	msr	BASEPRI, r3
 800fd86:	f3bf 8f6f 	isb	sy
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	61bb      	str	r3, [r7, #24]
}
 800fd90:	bf00      	nop
 800fd92:	e7fe      	b.n	800fd92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd9a:	f023 0301 	bic.w	r3, r3, #1
 800fd9e:	b2da      	uxtb	r2, r3
 800fda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fda6:	e03a      	b.n	800fe1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdae:	f043 0301 	orr.w	r3, r3, #1
 800fdb2:	b2da      	uxtb	r2, r3
 800fdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc2:	699b      	ldr	r3, [r3, #24]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d10a      	bne.n	800fdde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdcc:	f383 8811 	msr	BASEPRI, r3
 800fdd0:	f3bf 8f6f 	isb	sy
 800fdd4:	f3bf 8f4f 	dsb	sy
 800fdd8:	617b      	str	r3, [r7, #20]
}
 800fdda:	bf00      	nop
 800fddc:	e7fe      	b.n	800fddc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde0:	699a      	ldr	r2, [r3, #24]
 800fde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde4:	18d1      	adds	r1, r2, r3
 800fde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdec:	f7ff ff06 	bl	800fbfc <prvInsertTimerInActiveList>
					break;
 800fdf0:	e015      	b.n	800fe1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdf8:	f003 0302 	and.w	r3, r3, #2
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d103      	bne.n	800fe08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fe00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe02:	f000 fbfd 	bl	8010600 <vPortFree>
 800fe06:	e00a      	b.n	800fe1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe0e:	f023 0301 	bic.w	r3, r3, #1
 800fe12:	b2da      	uxtb	r2, r3
 800fe14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fe1a:	e000      	b.n	800fe1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fe1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fe1e:	4b08      	ldr	r3, [pc, #32]	; (800fe40 <prvProcessReceivedCommands+0x1c0>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	1d39      	adds	r1, r7, #4
 800fe24:	2200      	movs	r2, #0
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7fe f8ca 	bl	800dfc0 <xQueueReceive>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	f47f af2a 	bne.w	800fc88 <prvProcessReceivedCommands+0x8>
	}
}
 800fe34:	bf00      	nop
 800fe36:	bf00      	nop
 800fe38:	3730      	adds	r7, #48	; 0x30
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	20000d94 	.word	0x20000d94

0800fe44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b088      	sub	sp, #32
 800fe48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe4a:	e048      	b.n	800fede <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe4c:	4b2d      	ldr	r3, [pc, #180]	; (800ff04 <prvSwitchTimerLists+0xc0>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe56:	4b2b      	ldr	r3, [pc, #172]	; (800ff04 <prvSwitchTimerLists+0xc0>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	3304      	adds	r3, #4
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7fd fda9 	bl	800d9bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	6a1b      	ldr	r3, [r3, #32]
 800fe6e:	68f8      	ldr	r0, [r7, #12]
 800fe70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe78:	f003 0304 	and.w	r3, r3, #4
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d02e      	beq.n	800fede <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	699b      	ldr	r3, [r3, #24]
 800fe84:	693a      	ldr	r2, [r7, #16]
 800fe86:	4413      	add	r3, r2
 800fe88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fe8a:	68ba      	ldr	r2, [r7, #8]
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d90e      	bls.n	800feb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	68ba      	ldr	r2, [r7, #8]
 800fe96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	68fa      	ldr	r2, [r7, #12]
 800fe9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fe9e:	4b19      	ldr	r3, [pc, #100]	; (800ff04 <prvSwitchTimerLists+0xc0>)
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	3304      	adds	r3, #4
 800fea6:	4619      	mov	r1, r3
 800fea8:	4610      	mov	r0, r2
 800feaa:	f7fd fd4e 	bl	800d94a <vListInsert>
 800feae:	e016      	b.n	800fede <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800feb0:	2300      	movs	r3, #0
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	2300      	movs	r3, #0
 800feb6:	693a      	ldr	r2, [r7, #16]
 800feb8:	2100      	movs	r1, #0
 800feba:	68f8      	ldr	r0, [r7, #12]
 800febc:	f7ff fd60 	bl	800f980 <xTimerGenericCommand>
 800fec0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d10a      	bne.n	800fede <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fecc:	f383 8811 	msr	BASEPRI, r3
 800fed0:	f3bf 8f6f 	isb	sy
 800fed4:	f3bf 8f4f 	dsb	sy
 800fed8:	603b      	str	r3, [r7, #0]
}
 800feda:	bf00      	nop
 800fedc:	e7fe      	b.n	800fedc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fede:	4b09      	ldr	r3, [pc, #36]	; (800ff04 <prvSwitchTimerLists+0xc0>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1b1      	bne.n	800fe4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fee8:	4b06      	ldr	r3, [pc, #24]	; (800ff04 <prvSwitchTimerLists+0xc0>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800feee:	4b06      	ldr	r3, [pc, #24]	; (800ff08 <prvSwitchTimerLists+0xc4>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	4a04      	ldr	r2, [pc, #16]	; (800ff04 <prvSwitchTimerLists+0xc0>)
 800fef4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fef6:	4a04      	ldr	r2, [pc, #16]	; (800ff08 <prvSwitchTimerLists+0xc4>)
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	6013      	str	r3, [r2, #0]
}
 800fefc:	bf00      	nop
 800fefe:	3718      	adds	r7, #24
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}
 800ff04:	20000d8c 	.word	0x20000d8c
 800ff08:	20000d90 	.word	0x20000d90

0800ff0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ff12:	f000 f987 	bl	8010224 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ff16:	4b15      	ldr	r3, [pc, #84]	; (800ff6c <prvCheckForValidListAndQueue+0x60>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d120      	bne.n	800ff60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ff1e:	4814      	ldr	r0, [pc, #80]	; (800ff70 <prvCheckForValidListAndQueue+0x64>)
 800ff20:	f7fd fcc2 	bl	800d8a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ff24:	4813      	ldr	r0, [pc, #76]	; (800ff74 <prvCheckForValidListAndQueue+0x68>)
 800ff26:	f7fd fcbf 	bl	800d8a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ff2a:	4b13      	ldr	r3, [pc, #76]	; (800ff78 <prvCheckForValidListAndQueue+0x6c>)
 800ff2c:	4a10      	ldr	r2, [pc, #64]	; (800ff70 <prvCheckForValidListAndQueue+0x64>)
 800ff2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ff30:	4b12      	ldr	r3, [pc, #72]	; (800ff7c <prvCheckForValidListAndQueue+0x70>)
 800ff32:	4a10      	ldr	r2, [pc, #64]	; (800ff74 <prvCheckForValidListAndQueue+0x68>)
 800ff34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ff36:	2300      	movs	r3, #0
 800ff38:	9300      	str	r3, [sp, #0]
 800ff3a:	4b11      	ldr	r3, [pc, #68]	; (800ff80 <prvCheckForValidListAndQueue+0x74>)
 800ff3c:	4a11      	ldr	r2, [pc, #68]	; (800ff84 <prvCheckForValidListAndQueue+0x78>)
 800ff3e:	2110      	movs	r1, #16
 800ff40:	200a      	movs	r0, #10
 800ff42:	f7fd fdcd 	bl	800dae0 <xQueueGenericCreateStatic>
 800ff46:	4603      	mov	r3, r0
 800ff48:	4a08      	ldr	r2, [pc, #32]	; (800ff6c <prvCheckForValidListAndQueue+0x60>)
 800ff4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ff4c:	4b07      	ldr	r3, [pc, #28]	; (800ff6c <prvCheckForValidListAndQueue+0x60>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d005      	beq.n	800ff60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ff54:	4b05      	ldr	r3, [pc, #20]	; (800ff6c <prvCheckForValidListAndQueue+0x60>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	490b      	ldr	r1, [pc, #44]	; (800ff88 <prvCheckForValidListAndQueue+0x7c>)
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fe fae4 	bl	800e528 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff60:	f000 f990 	bl	8010284 <vPortExitCritical>
}
 800ff64:	bf00      	nop
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	20000d94 	.word	0x20000d94
 800ff70:	20000d64 	.word	0x20000d64
 800ff74:	20000d78 	.word	0x20000d78
 800ff78:	20000d8c 	.word	0x20000d8c
 800ff7c:	20000d90 	.word	0x20000d90
 800ff80:	20000e40 	.word	0x20000e40
 800ff84:	20000da0 	.word	0x20000da0
 800ff88:	08011b74 	.word	0x08011b74

0800ff8c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b086      	sub	sp, #24
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d10a      	bne.n	800ffb4 <pvTimerGetTimerID+0x28>
	__asm volatile
 800ff9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa2:	f383 8811 	msr	BASEPRI, r3
 800ffa6:	f3bf 8f6f 	isb	sy
 800ffaa:	f3bf 8f4f 	dsb	sy
 800ffae:	60fb      	str	r3, [r7, #12]
}
 800ffb0:	bf00      	nop
 800ffb2:	e7fe      	b.n	800ffb2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800ffb4:	f000 f936 	bl	8010224 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	69db      	ldr	r3, [r3, #28]
 800ffbc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ffbe:	f000 f961 	bl	8010284 <vPortExitCritical>

	return pvReturn;
 800ffc2:	693b      	ldr	r3, [r7, #16]
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3718      	adds	r7, #24
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b085      	sub	sp, #20
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	3b04      	subs	r3, #4
 800ffdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ffe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	3b04      	subs	r3, #4
 800ffea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	f023 0201 	bic.w	r2, r3, #1
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	3b04      	subs	r3, #4
 800fffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fffc:	4a0c      	ldr	r2, [pc, #48]	; (8010030 <pxPortInitialiseStack+0x64>)
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	3b14      	subs	r3, #20
 8010006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010008:	687a      	ldr	r2, [r7, #4]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	3b04      	subs	r3, #4
 8010012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	f06f 0202 	mvn.w	r2, #2
 801001a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	3b20      	subs	r3, #32
 8010020:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010022:	68fb      	ldr	r3, [r7, #12]
}
 8010024:	4618      	mov	r0, r3
 8010026:	3714      	adds	r7, #20
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr
 8010030:	08010035 	.word	0x08010035

08010034 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010034:	b480      	push	{r7}
 8010036:	b085      	sub	sp, #20
 8010038:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801003a:	2300      	movs	r3, #0
 801003c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801003e:	4b12      	ldr	r3, [pc, #72]	; (8010088 <prvTaskExitError+0x54>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010046:	d00a      	beq.n	801005e <prvTaskExitError+0x2a>
	__asm volatile
 8010048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004c:	f383 8811 	msr	BASEPRI, r3
 8010050:	f3bf 8f6f 	isb	sy
 8010054:	f3bf 8f4f 	dsb	sy
 8010058:	60fb      	str	r3, [r7, #12]
}
 801005a:	bf00      	nop
 801005c:	e7fe      	b.n	801005c <prvTaskExitError+0x28>
	__asm volatile
 801005e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010062:	f383 8811 	msr	BASEPRI, r3
 8010066:	f3bf 8f6f 	isb	sy
 801006a:	f3bf 8f4f 	dsb	sy
 801006e:	60bb      	str	r3, [r7, #8]
}
 8010070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010072:	bf00      	nop
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d0fc      	beq.n	8010074 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801007a:	bf00      	nop
 801007c:	bf00      	nop
 801007e:	3714      	adds	r7, #20
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr
 8010088:	20000038 	.word	0x20000038
 801008c:	00000000 	.word	0x00000000

08010090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010090:	4b07      	ldr	r3, [pc, #28]	; (80100b0 <pxCurrentTCBConst2>)
 8010092:	6819      	ldr	r1, [r3, #0]
 8010094:	6808      	ldr	r0, [r1, #0]
 8010096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801009a:	f380 8809 	msr	PSP, r0
 801009e:	f3bf 8f6f 	isb	sy
 80100a2:	f04f 0000 	mov.w	r0, #0
 80100a6:	f380 8811 	msr	BASEPRI, r0
 80100aa:	4770      	bx	lr
 80100ac:	f3af 8000 	nop.w

080100b0 <pxCurrentTCBConst2>:
 80100b0:	20000864 	.word	0x20000864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80100b4:	bf00      	nop
 80100b6:	bf00      	nop

080100b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80100b8:	4808      	ldr	r0, [pc, #32]	; (80100dc <prvPortStartFirstTask+0x24>)
 80100ba:	6800      	ldr	r0, [r0, #0]
 80100bc:	6800      	ldr	r0, [r0, #0]
 80100be:	f380 8808 	msr	MSP, r0
 80100c2:	f04f 0000 	mov.w	r0, #0
 80100c6:	f380 8814 	msr	CONTROL, r0
 80100ca:	b662      	cpsie	i
 80100cc:	b661      	cpsie	f
 80100ce:	f3bf 8f4f 	dsb	sy
 80100d2:	f3bf 8f6f 	isb	sy
 80100d6:	df00      	svc	0
 80100d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80100da:	bf00      	nop
 80100dc:	e000ed08 	.word	0xe000ed08

080100e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b086      	sub	sp, #24
 80100e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80100e6:	4b46      	ldr	r3, [pc, #280]	; (8010200 <xPortStartScheduler+0x120>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4a46      	ldr	r2, [pc, #280]	; (8010204 <xPortStartScheduler+0x124>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d10a      	bne.n	8010106 <xPortStartScheduler+0x26>
	__asm volatile
 80100f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f4:	f383 8811 	msr	BASEPRI, r3
 80100f8:	f3bf 8f6f 	isb	sy
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	613b      	str	r3, [r7, #16]
}
 8010102:	bf00      	nop
 8010104:	e7fe      	b.n	8010104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010106:	4b3e      	ldr	r3, [pc, #248]	; (8010200 <xPortStartScheduler+0x120>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4a3f      	ldr	r2, [pc, #252]	; (8010208 <xPortStartScheduler+0x128>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d10a      	bne.n	8010126 <xPortStartScheduler+0x46>
	__asm volatile
 8010110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010114:	f383 8811 	msr	BASEPRI, r3
 8010118:	f3bf 8f6f 	isb	sy
 801011c:	f3bf 8f4f 	dsb	sy
 8010120:	60fb      	str	r3, [r7, #12]
}
 8010122:	bf00      	nop
 8010124:	e7fe      	b.n	8010124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010126:	4b39      	ldr	r3, [pc, #228]	; (801020c <xPortStartScheduler+0x12c>)
 8010128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	b2db      	uxtb	r3, r3
 8010130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	22ff      	movs	r2, #255	; 0xff
 8010136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	b2db      	uxtb	r3, r3
 801013e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010140:	78fb      	ldrb	r3, [r7, #3]
 8010142:	b2db      	uxtb	r3, r3
 8010144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010148:	b2da      	uxtb	r2, r3
 801014a:	4b31      	ldr	r3, [pc, #196]	; (8010210 <xPortStartScheduler+0x130>)
 801014c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801014e:	4b31      	ldr	r3, [pc, #196]	; (8010214 <xPortStartScheduler+0x134>)
 8010150:	2207      	movs	r2, #7
 8010152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010154:	e009      	b.n	801016a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010156:	4b2f      	ldr	r3, [pc, #188]	; (8010214 <xPortStartScheduler+0x134>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	3b01      	subs	r3, #1
 801015c:	4a2d      	ldr	r2, [pc, #180]	; (8010214 <xPortStartScheduler+0x134>)
 801015e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010160:	78fb      	ldrb	r3, [r7, #3]
 8010162:	b2db      	uxtb	r3, r3
 8010164:	005b      	lsls	r3, r3, #1
 8010166:	b2db      	uxtb	r3, r3
 8010168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801016a:	78fb      	ldrb	r3, [r7, #3]
 801016c:	b2db      	uxtb	r3, r3
 801016e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010172:	2b80      	cmp	r3, #128	; 0x80
 8010174:	d0ef      	beq.n	8010156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010176:	4b27      	ldr	r3, [pc, #156]	; (8010214 <xPortStartScheduler+0x134>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f1c3 0307 	rsb	r3, r3, #7
 801017e:	2b04      	cmp	r3, #4
 8010180:	d00a      	beq.n	8010198 <xPortStartScheduler+0xb8>
	__asm volatile
 8010182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010186:	f383 8811 	msr	BASEPRI, r3
 801018a:	f3bf 8f6f 	isb	sy
 801018e:	f3bf 8f4f 	dsb	sy
 8010192:	60bb      	str	r3, [r7, #8]
}
 8010194:	bf00      	nop
 8010196:	e7fe      	b.n	8010196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010198:	4b1e      	ldr	r3, [pc, #120]	; (8010214 <xPortStartScheduler+0x134>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	021b      	lsls	r3, r3, #8
 801019e:	4a1d      	ldr	r2, [pc, #116]	; (8010214 <xPortStartScheduler+0x134>)
 80101a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101a2:	4b1c      	ldr	r3, [pc, #112]	; (8010214 <xPortStartScheduler+0x134>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80101aa:	4a1a      	ldr	r2, [pc, #104]	; (8010214 <xPortStartScheduler+0x134>)
 80101ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	b2da      	uxtb	r2, r3
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80101b6:	4b18      	ldr	r3, [pc, #96]	; (8010218 <xPortStartScheduler+0x138>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4a17      	ldr	r2, [pc, #92]	; (8010218 <xPortStartScheduler+0x138>)
 80101bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80101c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80101c2:	4b15      	ldr	r3, [pc, #84]	; (8010218 <xPortStartScheduler+0x138>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	4a14      	ldr	r2, [pc, #80]	; (8010218 <xPortStartScheduler+0x138>)
 80101c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80101cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80101ce:	f000 f8dd 	bl	801038c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80101d2:	4b12      	ldr	r3, [pc, #72]	; (801021c <xPortStartScheduler+0x13c>)
 80101d4:	2200      	movs	r2, #0
 80101d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80101d8:	f000 f8fc 	bl	80103d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80101dc:	4b10      	ldr	r3, [pc, #64]	; (8010220 <xPortStartScheduler+0x140>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4a0f      	ldr	r2, [pc, #60]	; (8010220 <xPortStartScheduler+0x140>)
 80101e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80101e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80101e8:	f7ff ff66 	bl	80100b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80101ec:	f7fe fdcc 	bl	800ed88 <vTaskSwitchContext>
	prvTaskExitError();
 80101f0:	f7ff ff20 	bl	8010034 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80101f4:	2300      	movs	r3, #0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3718      	adds	r7, #24
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	e000ed00 	.word	0xe000ed00
 8010204:	410fc271 	.word	0x410fc271
 8010208:	410fc270 	.word	0x410fc270
 801020c:	e000e400 	.word	0xe000e400
 8010210:	20000e90 	.word	0x20000e90
 8010214:	20000e94 	.word	0x20000e94
 8010218:	e000ed20 	.word	0xe000ed20
 801021c:	20000038 	.word	0x20000038
 8010220:	e000ef34 	.word	0xe000ef34

08010224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010224:	b480      	push	{r7}
 8010226:	b083      	sub	sp, #12
 8010228:	af00      	add	r7, sp, #0
	__asm volatile
 801022a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801022e:	f383 8811 	msr	BASEPRI, r3
 8010232:	f3bf 8f6f 	isb	sy
 8010236:	f3bf 8f4f 	dsb	sy
 801023a:	607b      	str	r3, [r7, #4]
}
 801023c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801023e:	4b0f      	ldr	r3, [pc, #60]	; (801027c <vPortEnterCritical+0x58>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	3301      	adds	r3, #1
 8010244:	4a0d      	ldr	r2, [pc, #52]	; (801027c <vPortEnterCritical+0x58>)
 8010246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010248:	4b0c      	ldr	r3, [pc, #48]	; (801027c <vPortEnterCritical+0x58>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	2b01      	cmp	r3, #1
 801024e:	d10f      	bne.n	8010270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010250:	4b0b      	ldr	r3, [pc, #44]	; (8010280 <vPortEnterCritical+0x5c>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	b2db      	uxtb	r3, r3
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00a      	beq.n	8010270 <vPortEnterCritical+0x4c>
	__asm volatile
 801025a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801025e:	f383 8811 	msr	BASEPRI, r3
 8010262:	f3bf 8f6f 	isb	sy
 8010266:	f3bf 8f4f 	dsb	sy
 801026a:	603b      	str	r3, [r7, #0]
}
 801026c:	bf00      	nop
 801026e:	e7fe      	b.n	801026e <vPortEnterCritical+0x4a>
	}
}
 8010270:	bf00      	nop
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr
 801027c:	20000038 	.word	0x20000038
 8010280:	e000ed04 	.word	0xe000ed04

08010284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801028a:	4b12      	ldr	r3, [pc, #72]	; (80102d4 <vPortExitCritical+0x50>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d10a      	bne.n	80102a8 <vPortExitCritical+0x24>
	__asm volatile
 8010292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010296:	f383 8811 	msr	BASEPRI, r3
 801029a:	f3bf 8f6f 	isb	sy
 801029e:	f3bf 8f4f 	dsb	sy
 80102a2:	607b      	str	r3, [r7, #4]
}
 80102a4:	bf00      	nop
 80102a6:	e7fe      	b.n	80102a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80102a8:	4b0a      	ldr	r3, [pc, #40]	; (80102d4 <vPortExitCritical+0x50>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	3b01      	subs	r3, #1
 80102ae:	4a09      	ldr	r2, [pc, #36]	; (80102d4 <vPortExitCritical+0x50>)
 80102b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102b2:	4b08      	ldr	r3, [pc, #32]	; (80102d4 <vPortExitCritical+0x50>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d105      	bne.n	80102c6 <vPortExitCritical+0x42>
 80102ba:	2300      	movs	r3, #0
 80102bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	f383 8811 	msr	BASEPRI, r3
}
 80102c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80102c6:	bf00      	nop
 80102c8:	370c      	adds	r7, #12
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop
 80102d4:	20000038 	.word	0x20000038
	...

080102e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80102e0:	f3ef 8009 	mrs	r0, PSP
 80102e4:	f3bf 8f6f 	isb	sy
 80102e8:	4b15      	ldr	r3, [pc, #84]	; (8010340 <pxCurrentTCBConst>)
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	f01e 0f10 	tst.w	lr, #16
 80102f0:	bf08      	it	eq
 80102f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80102f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102fa:	6010      	str	r0, [r2, #0]
 80102fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010304:	f380 8811 	msr	BASEPRI, r0
 8010308:	f3bf 8f4f 	dsb	sy
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f7fe fd3a 	bl	800ed88 <vTaskSwitchContext>
 8010314:	f04f 0000 	mov.w	r0, #0
 8010318:	f380 8811 	msr	BASEPRI, r0
 801031c:	bc09      	pop	{r0, r3}
 801031e:	6819      	ldr	r1, [r3, #0]
 8010320:	6808      	ldr	r0, [r1, #0]
 8010322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010326:	f01e 0f10 	tst.w	lr, #16
 801032a:	bf08      	it	eq
 801032c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010330:	f380 8809 	msr	PSP, r0
 8010334:	f3bf 8f6f 	isb	sy
 8010338:	4770      	bx	lr
 801033a:	bf00      	nop
 801033c:	f3af 8000 	nop.w

08010340 <pxCurrentTCBConst>:
 8010340:	20000864 	.word	0x20000864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010344:	bf00      	nop
 8010346:	bf00      	nop

08010348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
	__asm volatile
 801034e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010352:	f383 8811 	msr	BASEPRI, r3
 8010356:	f3bf 8f6f 	isb	sy
 801035a:	f3bf 8f4f 	dsb	sy
 801035e:	607b      	str	r3, [r7, #4]
}
 8010360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010362:	f7fe fc57 	bl	800ec14 <xTaskIncrementTick>
 8010366:	4603      	mov	r3, r0
 8010368:	2b00      	cmp	r3, #0
 801036a:	d003      	beq.n	8010374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801036c:	4b06      	ldr	r3, [pc, #24]	; (8010388 <xPortSysTickHandler+0x40>)
 801036e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010372:	601a      	str	r2, [r3, #0]
 8010374:	2300      	movs	r3, #0
 8010376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	f383 8811 	msr	BASEPRI, r3
}
 801037e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010380:	bf00      	nop
 8010382:	3708      	adds	r7, #8
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	e000ed04 	.word	0xe000ed04

0801038c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801038c:	b480      	push	{r7}
 801038e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010390:	4b0b      	ldr	r3, [pc, #44]	; (80103c0 <vPortSetupTimerInterrupt+0x34>)
 8010392:	2200      	movs	r2, #0
 8010394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010396:	4b0b      	ldr	r3, [pc, #44]	; (80103c4 <vPortSetupTimerInterrupt+0x38>)
 8010398:	2200      	movs	r2, #0
 801039a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801039c:	4b0a      	ldr	r3, [pc, #40]	; (80103c8 <vPortSetupTimerInterrupt+0x3c>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4a0a      	ldr	r2, [pc, #40]	; (80103cc <vPortSetupTimerInterrupt+0x40>)
 80103a2:	fba2 2303 	umull	r2, r3, r2, r3
 80103a6:	099b      	lsrs	r3, r3, #6
 80103a8:	4a09      	ldr	r2, [pc, #36]	; (80103d0 <vPortSetupTimerInterrupt+0x44>)
 80103aa:	3b01      	subs	r3, #1
 80103ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103ae:	4b04      	ldr	r3, [pc, #16]	; (80103c0 <vPortSetupTimerInterrupt+0x34>)
 80103b0:	2207      	movs	r2, #7
 80103b2:	601a      	str	r2, [r3, #0]
}
 80103b4:	bf00      	nop
 80103b6:	46bd      	mov	sp, r7
 80103b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop
 80103c0:	e000e010 	.word	0xe000e010
 80103c4:	e000e018 	.word	0xe000e018
 80103c8:	2000000c 	.word	0x2000000c
 80103cc:	10624dd3 	.word	0x10624dd3
 80103d0:	e000e014 	.word	0xe000e014

080103d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80103d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80103e4 <vPortEnableVFP+0x10>
 80103d8:	6801      	ldr	r1, [r0, #0]
 80103da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80103de:	6001      	str	r1, [r0, #0]
 80103e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80103e2:	bf00      	nop
 80103e4:	e000ed88 	.word	0xe000ed88

080103e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80103e8:	b480      	push	{r7}
 80103ea:	b085      	sub	sp, #20
 80103ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80103ee:	f3ef 8305 	mrs	r3, IPSR
 80103f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	2b0f      	cmp	r3, #15
 80103f8:	d914      	bls.n	8010424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80103fa:	4a17      	ldr	r2, [pc, #92]	; (8010458 <vPortValidateInterruptPriority+0x70>)
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	4413      	add	r3, r2
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010404:	4b15      	ldr	r3, [pc, #84]	; (801045c <vPortValidateInterruptPriority+0x74>)
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	7afa      	ldrb	r2, [r7, #11]
 801040a:	429a      	cmp	r2, r3
 801040c:	d20a      	bcs.n	8010424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801040e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010412:	f383 8811 	msr	BASEPRI, r3
 8010416:	f3bf 8f6f 	isb	sy
 801041a:	f3bf 8f4f 	dsb	sy
 801041e:	607b      	str	r3, [r7, #4]
}
 8010420:	bf00      	nop
 8010422:	e7fe      	b.n	8010422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010424:	4b0e      	ldr	r3, [pc, #56]	; (8010460 <vPortValidateInterruptPriority+0x78>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801042c:	4b0d      	ldr	r3, [pc, #52]	; (8010464 <vPortValidateInterruptPriority+0x7c>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	429a      	cmp	r2, r3
 8010432:	d90a      	bls.n	801044a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010438:	f383 8811 	msr	BASEPRI, r3
 801043c:	f3bf 8f6f 	isb	sy
 8010440:	f3bf 8f4f 	dsb	sy
 8010444:	603b      	str	r3, [r7, #0]
}
 8010446:	bf00      	nop
 8010448:	e7fe      	b.n	8010448 <vPortValidateInterruptPriority+0x60>
	}
 801044a:	bf00      	nop
 801044c:	3714      	adds	r7, #20
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr
 8010456:	bf00      	nop
 8010458:	e000e3f0 	.word	0xe000e3f0
 801045c:	20000e90 	.word	0x20000e90
 8010460:	e000ed0c 	.word	0xe000ed0c
 8010464:	20000e94 	.word	0x20000e94

08010468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b08a      	sub	sp, #40	; 0x28
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010470:	2300      	movs	r3, #0
 8010472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010474:	f7fe fb12 	bl	800ea9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010478:	4b5b      	ldr	r3, [pc, #364]	; (80105e8 <pvPortMalloc+0x180>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d101      	bne.n	8010484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010480:	f000 f920 	bl	80106c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010484:	4b59      	ldr	r3, [pc, #356]	; (80105ec <pvPortMalloc+0x184>)
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	4013      	ands	r3, r2
 801048c:	2b00      	cmp	r3, #0
 801048e:	f040 8093 	bne.w	80105b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d01d      	beq.n	80104d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010498:	2208      	movs	r2, #8
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	4413      	add	r3, r2
 801049e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f003 0307 	and.w	r3, r3, #7
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d014      	beq.n	80104d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f023 0307 	bic.w	r3, r3, #7
 80104b0:	3308      	adds	r3, #8
 80104b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f003 0307 	and.w	r3, r3, #7
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d00a      	beq.n	80104d4 <pvPortMalloc+0x6c>
	__asm volatile
 80104be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c2:	f383 8811 	msr	BASEPRI, r3
 80104c6:	f3bf 8f6f 	isb	sy
 80104ca:	f3bf 8f4f 	dsb	sy
 80104ce:	617b      	str	r3, [r7, #20]
}
 80104d0:	bf00      	nop
 80104d2:	e7fe      	b.n	80104d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d06e      	beq.n	80105b8 <pvPortMalloc+0x150>
 80104da:	4b45      	ldr	r3, [pc, #276]	; (80105f0 <pvPortMalloc+0x188>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d869      	bhi.n	80105b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80104e4:	4b43      	ldr	r3, [pc, #268]	; (80105f4 <pvPortMalloc+0x18c>)
 80104e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80104e8:	4b42      	ldr	r3, [pc, #264]	; (80105f4 <pvPortMalloc+0x18c>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80104ee:	e004      	b.n	80104fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80104f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80104f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80104fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	687a      	ldr	r2, [r7, #4]
 8010500:	429a      	cmp	r2, r3
 8010502:	d903      	bls.n	801050c <pvPortMalloc+0xa4>
 8010504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d1f1      	bne.n	80104f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801050c:	4b36      	ldr	r3, [pc, #216]	; (80105e8 <pvPortMalloc+0x180>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010512:	429a      	cmp	r2, r3
 8010514:	d050      	beq.n	80105b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010516:	6a3b      	ldr	r3, [r7, #32]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2208      	movs	r2, #8
 801051c:	4413      	add	r3, r2
 801051e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	6a3b      	ldr	r3, [r7, #32]
 8010526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052a:	685a      	ldr	r2, [r3, #4]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	1ad2      	subs	r2, r2, r3
 8010530:	2308      	movs	r3, #8
 8010532:	005b      	lsls	r3, r3, #1
 8010534:	429a      	cmp	r2, r3
 8010536:	d91f      	bls.n	8010578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	4413      	add	r3, r2
 801053e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	f003 0307 	and.w	r3, r3, #7
 8010546:	2b00      	cmp	r3, #0
 8010548:	d00a      	beq.n	8010560 <pvPortMalloc+0xf8>
	__asm volatile
 801054a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801054e:	f383 8811 	msr	BASEPRI, r3
 8010552:	f3bf 8f6f 	isb	sy
 8010556:	f3bf 8f4f 	dsb	sy
 801055a:	613b      	str	r3, [r7, #16]
}
 801055c:	bf00      	nop
 801055e:	e7fe      	b.n	801055e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010562:	685a      	ldr	r2, [r3, #4]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	1ad2      	subs	r2, r2, r3
 8010568:	69bb      	ldr	r3, [r7, #24]
 801056a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010572:	69b8      	ldr	r0, [r7, #24]
 8010574:	f000 f908 	bl	8010788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010578:	4b1d      	ldr	r3, [pc, #116]	; (80105f0 <pvPortMalloc+0x188>)
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	1ad3      	subs	r3, r2, r3
 8010582:	4a1b      	ldr	r2, [pc, #108]	; (80105f0 <pvPortMalloc+0x188>)
 8010584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010586:	4b1a      	ldr	r3, [pc, #104]	; (80105f0 <pvPortMalloc+0x188>)
 8010588:	681a      	ldr	r2, [r3, #0]
 801058a:	4b1b      	ldr	r3, [pc, #108]	; (80105f8 <pvPortMalloc+0x190>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	429a      	cmp	r2, r3
 8010590:	d203      	bcs.n	801059a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010592:	4b17      	ldr	r3, [pc, #92]	; (80105f0 <pvPortMalloc+0x188>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	4a18      	ldr	r2, [pc, #96]	; (80105f8 <pvPortMalloc+0x190>)
 8010598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059c:	685a      	ldr	r2, [r3, #4]
 801059e:	4b13      	ldr	r3, [pc, #76]	; (80105ec <pvPortMalloc+0x184>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	431a      	orrs	r2, r3
 80105a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80105a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105aa:	2200      	movs	r2, #0
 80105ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80105ae:	4b13      	ldr	r3, [pc, #76]	; (80105fc <pvPortMalloc+0x194>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	3301      	adds	r3, #1
 80105b4:	4a11      	ldr	r2, [pc, #68]	; (80105fc <pvPortMalloc+0x194>)
 80105b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80105b8:	f7fe fa7e 	bl	800eab8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80105bc:	69fb      	ldr	r3, [r7, #28]
 80105be:	f003 0307 	and.w	r3, r3, #7
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00a      	beq.n	80105dc <pvPortMalloc+0x174>
	__asm volatile
 80105c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ca:	f383 8811 	msr	BASEPRI, r3
 80105ce:	f3bf 8f6f 	isb	sy
 80105d2:	f3bf 8f4f 	dsb	sy
 80105d6:	60fb      	str	r3, [r7, #12]
}
 80105d8:	bf00      	nop
 80105da:	e7fe      	b.n	80105da <pvPortMalloc+0x172>
	return pvReturn;
 80105dc:	69fb      	ldr	r3, [r7, #28]
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3728      	adds	r7, #40	; 0x28
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
 80105e6:	bf00      	nop
 80105e8:	20004aa0 	.word	0x20004aa0
 80105ec:	20004ab4 	.word	0x20004ab4
 80105f0:	20004aa4 	.word	0x20004aa4
 80105f4:	20004a98 	.word	0x20004a98
 80105f8:	20004aa8 	.word	0x20004aa8
 80105fc:	20004aac 	.word	0x20004aac

08010600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b086      	sub	sp, #24
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d04d      	beq.n	80106ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010612:	2308      	movs	r3, #8
 8010614:	425b      	negs	r3, r3
 8010616:	697a      	ldr	r2, [r7, #20]
 8010618:	4413      	add	r3, r2
 801061a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	685a      	ldr	r2, [r3, #4]
 8010624:	4b24      	ldr	r3, [pc, #144]	; (80106b8 <vPortFree+0xb8>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4013      	ands	r3, r2
 801062a:	2b00      	cmp	r3, #0
 801062c:	d10a      	bne.n	8010644 <vPortFree+0x44>
	__asm volatile
 801062e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010632:	f383 8811 	msr	BASEPRI, r3
 8010636:	f3bf 8f6f 	isb	sy
 801063a:	f3bf 8f4f 	dsb	sy
 801063e:	60fb      	str	r3, [r7, #12]
}
 8010640:	bf00      	nop
 8010642:	e7fe      	b.n	8010642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d00a      	beq.n	8010662 <vPortFree+0x62>
	__asm volatile
 801064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010650:	f383 8811 	msr	BASEPRI, r3
 8010654:	f3bf 8f6f 	isb	sy
 8010658:	f3bf 8f4f 	dsb	sy
 801065c:	60bb      	str	r3, [r7, #8]
}
 801065e:	bf00      	nop
 8010660:	e7fe      	b.n	8010660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010662:	693b      	ldr	r3, [r7, #16]
 8010664:	685a      	ldr	r2, [r3, #4]
 8010666:	4b14      	ldr	r3, [pc, #80]	; (80106b8 <vPortFree+0xb8>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4013      	ands	r3, r2
 801066c:	2b00      	cmp	r3, #0
 801066e:	d01e      	beq.n	80106ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d11a      	bne.n	80106ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	685a      	ldr	r2, [r3, #4]
 801067c:	4b0e      	ldr	r3, [pc, #56]	; (80106b8 <vPortFree+0xb8>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	43db      	mvns	r3, r3
 8010682:	401a      	ands	r2, r3
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010688:	f7fe fa08 	bl	800ea9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	685a      	ldr	r2, [r3, #4]
 8010690:	4b0a      	ldr	r3, [pc, #40]	; (80106bc <vPortFree+0xbc>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4413      	add	r3, r2
 8010696:	4a09      	ldr	r2, [pc, #36]	; (80106bc <vPortFree+0xbc>)
 8010698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801069a:	6938      	ldr	r0, [r7, #16]
 801069c:	f000 f874 	bl	8010788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80106a0:	4b07      	ldr	r3, [pc, #28]	; (80106c0 <vPortFree+0xc0>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	3301      	adds	r3, #1
 80106a6:	4a06      	ldr	r2, [pc, #24]	; (80106c0 <vPortFree+0xc0>)
 80106a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80106aa:	f7fe fa05 	bl	800eab8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80106ae:	bf00      	nop
 80106b0:	3718      	adds	r7, #24
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	20004ab4 	.word	0x20004ab4
 80106bc:	20004aa4 	.word	0x20004aa4
 80106c0:	20004ab0 	.word	0x20004ab0

080106c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80106c4:	b480      	push	{r7}
 80106c6:	b085      	sub	sp, #20
 80106c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80106ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80106ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80106d0:	4b27      	ldr	r3, [pc, #156]	; (8010770 <prvHeapInit+0xac>)
 80106d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f003 0307 	and.w	r3, r3, #7
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d00c      	beq.n	80106f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	3307      	adds	r3, #7
 80106e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f023 0307 	bic.w	r3, r3, #7
 80106ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80106ec:	68ba      	ldr	r2, [r7, #8]
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	4a1f      	ldr	r2, [pc, #124]	; (8010770 <prvHeapInit+0xac>)
 80106f4:	4413      	add	r3, r2
 80106f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80106fc:	4a1d      	ldr	r2, [pc, #116]	; (8010774 <prvHeapInit+0xb0>)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010702:	4b1c      	ldr	r3, [pc, #112]	; (8010774 <prvHeapInit+0xb0>)
 8010704:	2200      	movs	r2, #0
 8010706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	68ba      	ldr	r2, [r7, #8]
 801070c:	4413      	add	r3, r2
 801070e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010710:	2208      	movs	r2, #8
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	1a9b      	subs	r3, r3, r2
 8010716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f023 0307 	bic.w	r3, r3, #7
 801071e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	4a15      	ldr	r2, [pc, #84]	; (8010778 <prvHeapInit+0xb4>)
 8010724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010726:	4b14      	ldr	r3, [pc, #80]	; (8010778 <prvHeapInit+0xb4>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	2200      	movs	r2, #0
 801072c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801072e:	4b12      	ldr	r3, [pc, #72]	; (8010778 <prvHeapInit+0xb4>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2200      	movs	r2, #0
 8010734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	1ad2      	subs	r2, r2, r3
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010744:	4b0c      	ldr	r3, [pc, #48]	; (8010778 <prvHeapInit+0xb4>)
 8010746:	681a      	ldr	r2, [r3, #0]
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	4a0a      	ldr	r2, [pc, #40]	; (801077c <prvHeapInit+0xb8>)
 8010752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	4a09      	ldr	r2, [pc, #36]	; (8010780 <prvHeapInit+0xbc>)
 801075a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801075c:	4b09      	ldr	r3, [pc, #36]	; (8010784 <prvHeapInit+0xc0>)
 801075e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010762:	601a      	str	r2, [r3, #0]
}
 8010764:	bf00      	nop
 8010766:	3714      	adds	r7, #20
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr
 8010770:	20000e98 	.word	0x20000e98
 8010774:	20004a98 	.word	0x20004a98
 8010778:	20004aa0 	.word	0x20004aa0
 801077c:	20004aa8 	.word	0x20004aa8
 8010780:	20004aa4 	.word	0x20004aa4
 8010784:	20004ab4 	.word	0x20004ab4

08010788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010788:	b480      	push	{r7}
 801078a:	b085      	sub	sp, #20
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010790:	4b28      	ldr	r3, [pc, #160]	; (8010834 <prvInsertBlockIntoFreeList+0xac>)
 8010792:	60fb      	str	r3, [r7, #12]
 8010794:	e002      	b.n	801079c <prvInsertBlockIntoFreeList+0x14>
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	60fb      	str	r3, [r7, #12]
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d8f7      	bhi.n	8010796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	68ba      	ldr	r2, [r7, #8]
 80107b0:	4413      	add	r3, r2
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d108      	bne.n	80107ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	685a      	ldr	r2, [r3, #4]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	441a      	add	r2, r3
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	68ba      	ldr	r2, [r7, #8]
 80107d4:	441a      	add	r2, r3
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d118      	bne.n	8010810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	681a      	ldr	r2, [r3, #0]
 80107e2:	4b15      	ldr	r3, [pc, #84]	; (8010838 <prvInsertBlockIntoFreeList+0xb0>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d00d      	beq.n	8010806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	685a      	ldr	r2, [r3, #4]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	441a      	add	r2, r3
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	601a      	str	r2, [r3, #0]
 8010804:	e008      	b.n	8010818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010806:	4b0c      	ldr	r3, [pc, #48]	; (8010838 <prvInsertBlockIntoFreeList+0xb0>)
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	601a      	str	r2, [r3, #0]
 801080e:	e003      	b.n	8010818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681a      	ldr	r2, [r3, #0]
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010818:	68fa      	ldr	r2, [r7, #12]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	429a      	cmp	r2, r3
 801081e:	d002      	beq.n	8010826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010826:	bf00      	nop
 8010828:	3714      	adds	r7, #20
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop
 8010834:	20004a98 	.word	0x20004a98
 8010838:	20004aa0 	.word	0x20004aa0

0801083c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010840:	2201      	movs	r2, #1
 8010842:	490e      	ldr	r1, [pc, #56]	; (801087c <MX_USB_HOST_Init+0x40>)
 8010844:	480e      	ldr	r0, [pc, #56]	; (8010880 <MX_USB_HOST_Init+0x44>)
 8010846:	f7fb f807 	bl	800b858 <USBH_Init>
 801084a:	4603      	mov	r3, r0
 801084c:	2b00      	cmp	r3, #0
 801084e:	d001      	beq.n	8010854 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010850:	f7f2 f9e0 	bl	8002c14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010854:	490b      	ldr	r1, [pc, #44]	; (8010884 <MX_USB_HOST_Init+0x48>)
 8010856:	480a      	ldr	r0, [pc, #40]	; (8010880 <MX_USB_HOST_Init+0x44>)
 8010858:	f7fb f8ae 	bl	800b9b8 <USBH_RegisterClass>
 801085c:	4603      	mov	r3, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d001      	beq.n	8010866 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010862:	f7f2 f9d7 	bl	8002c14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010866:	4806      	ldr	r0, [pc, #24]	; (8010880 <MX_USB_HOST_Init+0x44>)
 8010868:	f7fb f932 	bl	800bad0 <USBH_Start>
 801086c:	4603      	mov	r3, r0
 801086e:	2b00      	cmp	r3, #0
 8010870:	d001      	beq.n	8010876 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010872:	f7f2 f9cf 	bl	8002c14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010876:	bf00      	nop
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	08010889 	.word	0x08010889
 8010880:	20004fec 	.word	0x20004fec
 8010884:	20000018 	.word	0x20000018

08010888 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	460b      	mov	r3, r1
 8010892:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010894:	78fb      	ldrb	r3, [r7, #3]
 8010896:	3b01      	subs	r3, #1
 8010898:	2b04      	cmp	r3, #4
 801089a:	d819      	bhi.n	80108d0 <USBH_UserProcess+0x48>
 801089c:	a201      	add	r2, pc, #4	; (adr r2, 80108a4 <USBH_UserProcess+0x1c>)
 801089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a2:	bf00      	nop
 80108a4:	080108d1 	.word	0x080108d1
 80108a8:	080108c1 	.word	0x080108c1
 80108ac:	080108d1 	.word	0x080108d1
 80108b0:	080108c9 	.word	0x080108c9
 80108b4:	080108b9 	.word	0x080108b9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80108b8:	4b09      	ldr	r3, [pc, #36]	; (80108e0 <USBH_UserProcess+0x58>)
 80108ba:	2203      	movs	r2, #3
 80108bc:	701a      	strb	r2, [r3, #0]
  break;
 80108be:	e008      	b.n	80108d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80108c0:	4b07      	ldr	r3, [pc, #28]	; (80108e0 <USBH_UserProcess+0x58>)
 80108c2:	2202      	movs	r2, #2
 80108c4:	701a      	strb	r2, [r3, #0]
  break;
 80108c6:	e004      	b.n	80108d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80108c8:	4b05      	ldr	r3, [pc, #20]	; (80108e0 <USBH_UserProcess+0x58>)
 80108ca:	2201      	movs	r2, #1
 80108cc:	701a      	strb	r2, [r3, #0]
  break;
 80108ce:	e000      	b.n	80108d2 <USBH_UserProcess+0x4a>

  default:
  break;
 80108d0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80108d2:	bf00      	nop
 80108d4:	370c      	adds	r7, #12
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr
 80108de:	bf00      	nop
 80108e0:	20004ab8 	.word	0x20004ab8

080108e4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b08a      	sub	sp, #40	; 0x28
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80108ec:	f107 0314 	add.w	r3, r7, #20
 80108f0:	2200      	movs	r2, #0
 80108f2:	601a      	str	r2, [r3, #0]
 80108f4:	605a      	str	r2, [r3, #4]
 80108f6:	609a      	str	r2, [r3, #8]
 80108f8:	60da      	str	r2, [r3, #12]
 80108fa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010904:	d147      	bne.n	8010996 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010906:	2300      	movs	r3, #0
 8010908:	613b      	str	r3, [r7, #16]
 801090a:	4b25      	ldr	r3, [pc, #148]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 801090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801090e:	4a24      	ldr	r2, [pc, #144]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 8010910:	f043 0301 	orr.w	r3, r3, #1
 8010914:	6313      	str	r3, [r2, #48]	; 0x30
 8010916:	4b22      	ldr	r3, [pc, #136]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 8010918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801091a:	f003 0301 	and.w	r3, r3, #1
 801091e:	613b      	str	r3, [r7, #16]
 8010920:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010928:	2300      	movs	r3, #0
 801092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801092c:	2300      	movs	r3, #0
 801092e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8010930:	f107 0314 	add.w	r3, r7, #20
 8010934:	4619      	mov	r1, r3
 8010936:	481b      	ldr	r0, [pc, #108]	; (80109a4 <HAL_HCD_MspInit+0xc0>)
 8010938:	f7f3 fb08 	bl	8003f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 801093c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010942:	2302      	movs	r3, #2
 8010944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010946:	2300      	movs	r3, #0
 8010948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801094a:	2300      	movs	r3, #0
 801094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801094e:	230a      	movs	r3, #10
 8010950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010952:	f107 0314 	add.w	r3, r7, #20
 8010956:	4619      	mov	r1, r3
 8010958:	4812      	ldr	r0, [pc, #72]	; (80109a4 <HAL_HCD_MspInit+0xc0>)
 801095a:	f7f3 faf7 	bl	8003f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801095e:	4b10      	ldr	r3, [pc, #64]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 8010960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010962:	4a0f      	ldr	r2, [pc, #60]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 8010964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010968:	6353      	str	r3, [r2, #52]	; 0x34
 801096a:	2300      	movs	r3, #0
 801096c:	60fb      	str	r3, [r7, #12]
 801096e:	4b0c      	ldr	r3, [pc, #48]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 8010970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010972:	4a0b      	ldr	r2, [pc, #44]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 8010974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010978:	6453      	str	r3, [r2, #68]	; 0x44
 801097a:	4b09      	ldr	r3, [pc, #36]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 801097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010982:	60fb      	str	r3, [r7, #12]
 8010984:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010986:	2200      	movs	r2, #0
 8010988:	2105      	movs	r1, #5
 801098a:	2043      	movs	r0, #67	; 0x43
 801098c:	f7f3 fa22 	bl	8003dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010990:	2043      	movs	r0, #67	; 0x43
 8010992:	f7f3 fa3b 	bl	8003e0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010996:	bf00      	nop
 8010998:	3728      	adds	r7, #40	; 0x28
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	40023800 	.word	0x40023800
 80109a4:	40020000 	.word	0x40020000

080109a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fb fd37 	bl	800c42a <USBH_LL_IncTimer>
}
 80109bc:	bf00      	nop
 80109be:	3708      	adds	r7, #8
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}

080109c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fb fd7b 	bl	800c4ce <USBH_LL_Connect>
}
 80109d8:	bf00      	nop
 80109da:	3708      	adds	r7, #8
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7fb fd90 	bl	800c514 <USBH_LL_Disconnect>
}
 80109f4:	bf00      	nop
 80109f6:	3708      	adds	r7, #8
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b082      	sub	sp, #8
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	460b      	mov	r3, r1
 8010a06:	70fb      	strb	r3, [r7, #3]
 8010a08:	4613      	mov	r3, r2
 8010a0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fb fdc7 	bl	800c5a6 <USBH_LL_NotifyURBChange>
#endif
}
 8010a18:	bf00      	nop
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7fb fd25 	bl	800c47e <USBH_LL_PortEnabled>
}
 8010a34:	bf00      	nop
 8010a36:	3708      	adds	r7, #8
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7fb fd31 	bl	800c4b2 <USBH_LL_PortDisabled>
}
 8010a50:	bf00      	nop
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d12a      	bne.n	8010ac0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010a6a:	4a18      	ldr	r2, [pc, #96]	; (8010acc <USBH_LL_Init+0x74>)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	4a15      	ldr	r2, [pc, #84]	; (8010acc <USBH_LL_Init+0x74>)
 8010a76:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010a7a:	4b14      	ldr	r3, [pc, #80]	; (8010acc <USBH_LL_Init+0x74>)
 8010a7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010a80:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010a82:	4b12      	ldr	r3, [pc, #72]	; (8010acc <USBH_LL_Init+0x74>)
 8010a84:	2208      	movs	r2, #8
 8010a86:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010a88:	4b10      	ldr	r3, [pc, #64]	; (8010acc <USBH_LL_Init+0x74>)
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010a8e:	4b0f      	ldr	r3, [pc, #60]	; (8010acc <USBH_LL_Init+0x74>)
 8010a90:	2200      	movs	r2, #0
 8010a92:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010a94:	4b0d      	ldr	r3, [pc, #52]	; (8010acc <USBH_LL_Init+0x74>)
 8010a96:	2202      	movs	r2, #2
 8010a98:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010a9a:	4b0c      	ldr	r3, [pc, #48]	; (8010acc <USBH_LL_Init+0x74>)
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010aa0:	480a      	ldr	r0, [pc, #40]	; (8010acc <USBH_LL_Init+0x74>)
 8010aa2:	f7f3 fc44 	bl	800432e <HAL_HCD_Init>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d001      	beq.n	8010ab0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010aac:	f7f2 f8b2 	bl	8002c14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010ab0:	4806      	ldr	r0, [pc, #24]	; (8010acc <USBH_LL_Init+0x74>)
 8010ab2:	f7f4 f828 	bl	8004b06 <HAL_HCD_GetCurrentFrame>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	4619      	mov	r1, r3
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f7fb fca6 	bl	800c40c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010ac0:	2300      	movs	r3, #0
}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3708      	adds	r7, #8
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}
 8010aca:	bf00      	nop
 8010acc:	200053d0 	.word	0x200053d0

08010ad0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b084      	sub	sp, #16
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010adc:	2300      	movs	r3, #0
 8010ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7f3 ff97 	bl	8004a1a <HAL_HCD_Start>
 8010aec:	4603      	mov	r3, r0
 8010aee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010af0:	7bfb      	ldrb	r3, [r7, #15]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f000 f95c 	bl	8010db0 <USBH_Get_USB_Status>
 8010af8:	4603      	mov	r3, r0
 8010afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3710      	adds	r7, #16
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}

08010b06 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010b06:	b580      	push	{r7, lr}
 8010b08:	b084      	sub	sp, #16
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b12:	2300      	movs	r3, #0
 8010b14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7f3 ff9f 	bl	8004a60 <HAL_HCD_Stop>
 8010b22:	4603      	mov	r3, r0
 8010b24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b26:	7bfb      	ldrb	r3, [r7, #15]
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f000 f941 	bl	8010db0 <USBH_Get_USB_Status>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b32:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3710      	adds	r7, #16
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010b44:	2301      	movs	r3, #1
 8010b46:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7f3 ffe7 	bl	8004b22 <HAL_HCD_GetCurrentSpeed>
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b02      	cmp	r3, #2
 8010b58:	d00c      	beq.n	8010b74 <USBH_LL_GetSpeed+0x38>
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	d80d      	bhi.n	8010b7a <USBH_LL_GetSpeed+0x3e>
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d002      	beq.n	8010b68 <USBH_LL_GetSpeed+0x2c>
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d003      	beq.n	8010b6e <USBH_LL_GetSpeed+0x32>
 8010b66:	e008      	b.n	8010b7a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8010b6c:	e008      	b.n	8010b80 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010b6e:	2301      	movs	r3, #1
 8010b70:	73fb      	strb	r3, [r7, #15]
    break;
 8010b72:	e005      	b.n	8010b80 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010b74:	2302      	movs	r3, #2
 8010b76:	73fb      	strb	r3, [r7, #15]
    break;
 8010b78:	e002      	b.n	8010b80 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8010b7e:	bf00      	nop
  }
  return  speed;
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b084      	sub	sp, #16
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b92:	2300      	movs	r3, #0
 8010b94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b96:	2300      	movs	r3, #0
 8010b98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7f3 ff7a 	bl	8004a9a <HAL_HCD_ResetPort>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010baa:	7bfb      	ldrb	r3, [r7, #15]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 f8ff 	bl	8010db0 <USBH_Get_USB_Status>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3710      	adds	r7, #16
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	460b      	mov	r3, r1
 8010bca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010bd2:	78fa      	ldrb	r2, [r7, #3]
 8010bd4:	4611      	mov	r1, r2
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7f3 ff81 	bl	8004ade <HAL_HCD_HC_GetXferCount>
 8010bdc:	4603      	mov	r3, r0
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3708      	adds	r7, #8
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010be6:	b590      	push	{r4, r7, lr}
 8010be8:	b089      	sub	sp, #36	; 0x24
 8010bea:	af04      	add	r7, sp, #16
 8010bec:	6078      	str	r0, [r7, #4]
 8010bee:	4608      	mov	r0, r1
 8010bf0:	4611      	mov	r1, r2
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	70fb      	strb	r3, [r7, #3]
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	70bb      	strb	r3, [r7, #2]
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c00:	2300      	movs	r3, #0
 8010c02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c04:	2300      	movs	r3, #0
 8010c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010c0e:	787c      	ldrb	r4, [r7, #1]
 8010c10:	78ba      	ldrb	r2, [r7, #2]
 8010c12:	78f9      	ldrb	r1, [r7, #3]
 8010c14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010c16:	9302      	str	r3, [sp, #8]
 8010c18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010c1c:	9301      	str	r3, [sp, #4]
 8010c1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c22:	9300      	str	r3, [sp, #0]
 8010c24:	4623      	mov	r3, r4
 8010c26:	f7f3 fbe4 	bl	80043f2 <HAL_HCD_HC_Init>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c2e:	7bfb      	ldrb	r3, [r7, #15]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f000 f8bd 	bl	8010db0 <USBH_Get_USB_Status>
 8010c36:	4603      	mov	r3, r0
 8010c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3714      	adds	r7, #20
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd90      	pop	{r4, r7, pc}

08010c44 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c50:	2300      	movs	r3, #0
 8010c52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c54:	2300      	movs	r3, #0
 8010c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010c5e:	78fa      	ldrb	r2, [r7, #3]
 8010c60:	4611      	mov	r1, r2
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7f3 fc54 	bl	8004510 <HAL_HCD_HC_Halt>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c6c:	7bfb      	ldrb	r3, [r7, #15]
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f000 f89e 	bl	8010db0 <USBH_Get_USB_Status>
 8010c74:	4603      	mov	r3, r0
 8010c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3710      	adds	r7, #16
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010c82:	b590      	push	{r4, r7, lr}
 8010c84:	b089      	sub	sp, #36	; 0x24
 8010c86:	af04      	add	r7, sp, #16
 8010c88:	6078      	str	r0, [r7, #4]
 8010c8a:	4608      	mov	r0, r1
 8010c8c:	4611      	mov	r1, r2
 8010c8e:	461a      	mov	r2, r3
 8010c90:	4603      	mov	r3, r0
 8010c92:	70fb      	strb	r3, [r7, #3]
 8010c94:	460b      	mov	r3, r1
 8010c96:	70bb      	strb	r3, [r7, #2]
 8010c98:	4613      	mov	r3, r2
 8010c9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010caa:	787c      	ldrb	r4, [r7, #1]
 8010cac:	78ba      	ldrb	r2, [r7, #2]
 8010cae:	78f9      	ldrb	r1, [r7, #3]
 8010cb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010cb4:	9303      	str	r3, [sp, #12]
 8010cb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010cb8:	9302      	str	r3, [sp, #8]
 8010cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbc:	9301      	str	r3, [sp, #4]
 8010cbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	4623      	mov	r3, r4
 8010cc6:	f7f3 fc47 	bl	8004558 <HAL_HCD_HC_SubmitRequest>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010cce:	7bfb      	ldrb	r3, [r7, #15]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f000 f86d 	bl	8010db0 <USBH_Get_USB_Status>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cda:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3714      	adds	r7, #20
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd90      	pop	{r4, r7, pc}

08010ce4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	460b      	mov	r3, r1
 8010cee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010cf6:	78fa      	ldrb	r2, [r7, #3]
 8010cf8:	4611      	mov	r1, r2
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7f3 fedb 	bl	8004ab6 <HAL_HCD_HC_GetURBState>
 8010d00:	4603      	mov	r3, r0
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3708      	adds	r7, #8
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b082      	sub	sp, #8
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
 8010d12:	460b      	mov	r3, r1
 8010d14:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d103      	bne.n	8010d28 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010d20:	78fb      	ldrb	r3, [r7, #3]
 8010d22:	4618      	mov	r0, r3
 8010d24:	f000 f870 	bl	8010e08 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010d28:	20c8      	movs	r0, #200	; 0xc8
 8010d2a:	f7f2 ff77 	bl	8003c1c <HAL_Delay>
  return USBH_OK;
 8010d2e:	2300      	movs	r3, #0
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3708      	adds	r7, #8
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b085      	sub	sp, #20
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	460b      	mov	r3, r1
 8010d42:	70fb      	strb	r3, [r7, #3]
 8010d44:	4613      	mov	r3, r2
 8010d46:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d4e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010d50:	78fb      	ldrb	r3, [r7, #3]
 8010d52:	68fa      	ldr	r2, [r7, #12]
 8010d54:	212c      	movs	r1, #44	; 0x2c
 8010d56:	fb01 f303 	mul.w	r3, r1, r3
 8010d5a:	4413      	add	r3, r2
 8010d5c:	333b      	adds	r3, #59	; 0x3b
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d009      	beq.n	8010d78 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010d64:	78fb      	ldrb	r3, [r7, #3]
 8010d66:	68fa      	ldr	r2, [r7, #12]
 8010d68:	212c      	movs	r1, #44	; 0x2c
 8010d6a:	fb01 f303 	mul.w	r3, r1, r3
 8010d6e:	4413      	add	r3, r2
 8010d70:	3354      	adds	r3, #84	; 0x54
 8010d72:	78ba      	ldrb	r2, [r7, #2]
 8010d74:	701a      	strb	r2, [r3, #0]
 8010d76:	e008      	b.n	8010d8a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010d78:	78fb      	ldrb	r3, [r7, #3]
 8010d7a:	68fa      	ldr	r2, [r7, #12]
 8010d7c:	212c      	movs	r1, #44	; 0x2c
 8010d7e:	fb01 f303 	mul.w	r3, r1, r3
 8010d82:	4413      	add	r3, r2
 8010d84:	3355      	adds	r3, #85	; 0x55
 8010d86:	78ba      	ldrb	r2, [r7, #2]
 8010d88:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010d8a:	2300      	movs	r3, #0
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3714      	adds	r7, #20
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr

08010d98 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b082      	sub	sp, #8
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7f2 ff3b 	bl	8003c1c <HAL_Delay>
}
 8010da6:	bf00      	nop
 8010da8:	3708      	adds	r7, #8
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
	...

08010db0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010db0:	b480      	push	{r7}
 8010db2:	b085      	sub	sp, #20
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	4603      	mov	r3, r0
 8010db8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010dbe:	79fb      	ldrb	r3, [r7, #7]
 8010dc0:	2b03      	cmp	r3, #3
 8010dc2:	d817      	bhi.n	8010df4 <USBH_Get_USB_Status+0x44>
 8010dc4:	a201      	add	r2, pc, #4	; (adr r2, 8010dcc <USBH_Get_USB_Status+0x1c>)
 8010dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dca:	bf00      	nop
 8010dcc:	08010ddd 	.word	0x08010ddd
 8010dd0:	08010de3 	.word	0x08010de3
 8010dd4:	08010de9 	.word	0x08010de9
 8010dd8:	08010def 	.word	0x08010def
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	73fb      	strb	r3, [r7, #15]
    break;
 8010de0:	e00b      	b.n	8010dfa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010de2:	2302      	movs	r3, #2
 8010de4:	73fb      	strb	r3, [r7, #15]
    break;
 8010de6:	e008      	b.n	8010dfa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010de8:	2301      	movs	r3, #1
 8010dea:	73fb      	strb	r3, [r7, #15]
    break;
 8010dec:	e005      	b.n	8010dfa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010dee:	2302      	movs	r3, #2
 8010df0:	73fb      	strb	r3, [r7, #15]
    break;
 8010df2:	e002      	b.n	8010dfa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010df4:	2302      	movs	r3, #2
 8010df6:	73fb      	strb	r3, [r7, #15]
    break;
 8010df8:	bf00      	nop
  }
  return usb_status;
 8010dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3714      	adds	r7, #20
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr

08010e08 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	4603      	mov	r3, r0
 8010e10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010e12:	79fb      	ldrb	r3, [r7, #7]
 8010e14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010e16:	79fb      	ldrb	r3, [r7, #7]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d102      	bne.n	8010e22 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	73fb      	strb	r3, [r7, #15]
 8010e20:	e001      	b.n	8010e26 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8010e22:	2301      	movs	r3, #1
 8010e24:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010e26:	7bfb      	ldrb	r3, [r7, #15]
 8010e28:	461a      	mov	r2, r3
 8010e2a:	2101      	movs	r1, #1
 8010e2c:	4803      	ldr	r0, [pc, #12]	; (8010e3c <MX_DriverVbusFS+0x34>)
 8010e2e:	f7f3 fa41 	bl	80042b4 <HAL_GPIO_WritePin>
}
 8010e32:	bf00      	nop
 8010e34:	3710      	adds	r7, #16
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	40020800 	.word	0x40020800

08010e40 <__errno>:
 8010e40:	4b01      	ldr	r3, [pc, #4]	; (8010e48 <__errno+0x8>)
 8010e42:	6818      	ldr	r0, [r3, #0]
 8010e44:	4770      	bx	lr
 8010e46:	bf00      	nop
 8010e48:	2000003c 	.word	0x2000003c

08010e4c <__libc_init_array>:
 8010e4c:	b570      	push	{r4, r5, r6, lr}
 8010e4e:	4d0d      	ldr	r5, [pc, #52]	; (8010e84 <__libc_init_array+0x38>)
 8010e50:	4c0d      	ldr	r4, [pc, #52]	; (8010e88 <__libc_init_array+0x3c>)
 8010e52:	1b64      	subs	r4, r4, r5
 8010e54:	10a4      	asrs	r4, r4, #2
 8010e56:	2600      	movs	r6, #0
 8010e58:	42a6      	cmp	r6, r4
 8010e5a:	d109      	bne.n	8010e70 <__libc_init_array+0x24>
 8010e5c:	4d0b      	ldr	r5, [pc, #44]	; (8010e8c <__libc_init_array+0x40>)
 8010e5e:	4c0c      	ldr	r4, [pc, #48]	; (8010e90 <__libc_init_array+0x44>)
 8010e60:	f000 fcd8 	bl	8011814 <_init>
 8010e64:	1b64      	subs	r4, r4, r5
 8010e66:	10a4      	asrs	r4, r4, #2
 8010e68:	2600      	movs	r6, #0
 8010e6a:	42a6      	cmp	r6, r4
 8010e6c:	d105      	bne.n	8010e7a <__libc_init_array+0x2e>
 8010e6e:	bd70      	pop	{r4, r5, r6, pc}
 8010e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e74:	4798      	blx	r3
 8010e76:	3601      	adds	r6, #1
 8010e78:	e7ee      	b.n	8010e58 <__libc_init_array+0xc>
 8010e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e7e:	4798      	blx	r3
 8010e80:	3601      	adds	r6, #1
 8010e82:	e7f2      	b.n	8010e6a <__libc_init_array+0x1e>
 8010e84:	080141e8 	.word	0x080141e8
 8010e88:	080141e8 	.word	0x080141e8
 8010e8c:	080141e8 	.word	0x080141e8
 8010e90:	080141ec 	.word	0x080141ec

08010e94 <__retarget_lock_acquire_recursive>:
 8010e94:	4770      	bx	lr

08010e96 <__retarget_lock_release_recursive>:
 8010e96:	4770      	bx	lr

08010e98 <malloc>:
 8010e98:	4b02      	ldr	r3, [pc, #8]	; (8010ea4 <malloc+0xc>)
 8010e9a:	4601      	mov	r1, r0
 8010e9c:	6818      	ldr	r0, [r3, #0]
 8010e9e:	f000 b871 	b.w	8010f84 <_malloc_r>
 8010ea2:	bf00      	nop
 8010ea4:	2000003c 	.word	0x2000003c

08010ea8 <free>:
 8010ea8:	4b02      	ldr	r3, [pc, #8]	; (8010eb4 <free+0xc>)
 8010eaa:	4601      	mov	r1, r0
 8010eac:	6818      	ldr	r0, [r3, #0]
 8010eae:	f000 b819 	b.w	8010ee4 <_free_r>
 8010eb2:	bf00      	nop
 8010eb4:	2000003c 	.word	0x2000003c

08010eb8 <memcpy>:
 8010eb8:	440a      	add	r2, r1
 8010eba:	4291      	cmp	r1, r2
 8010ebc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010ec0:	d100      	bne.n	8010ec4 <memcpy+0xc>
 8010ec2:	4770      	bx	lr
 8010ec4:	b510      	push	{r4, lr}
 8010ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ece:	4291      	cmp	r1, r2
 8010ed0:	d1f9      	bne.n	8010ec6 <memcpy+0xe>
 8010ed2:	bd10      	pop	{r4, pc}

08010ed4 <memset>:
 8010ed4:	4402      	add	r2, r0
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d100      	bne.n	8010ede <memset+0xa>
 8010edc:	4770      	bx	lr
 8010ede:	f803 1b01 	strb.w	r1, [r3], #1
 8010ee2:	e7f9      	b.n	8010ed8 <memset+0x4>

08010ee4 <_free_r>:
 8010ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ee6:	2900      	cmp	r1, #0
 8010ee8:	d048      	beq.n	8010f7c <_free_r+0x98>
 8010eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010eee:	9001      	str	r0, [sp, #4]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	f1a1 0404 	sub.w	r4, r1, #4
 8010ef6:	bfb8      	it	lt
 8010ef8:	18e4      	addlt	r4, r4, r3
 8010efa:	f000 f947 	bl	801118c <__malloc_lock>
 8010efe:	4a20      	ldr	r2, [pc, #128]	; (8010f80 <_free_r+0x9c>)
 8010f00:	9801      	ldr	r0, [sp, #4]
 8010f02:	6813      	ldr	r3, [r2, #0]
 8010f04:	4615      	mov	r5, r2
 8010f06:	b933      	cbnz	r3, 8010f16 <_free_r+0x32>
 8010f08:	6063      	str	r3, [r4, #4]
 8010f0a:	6014      	str	r4, [r2, #0]
 8010f0c:	b003      	add	sp, #12
 8010f0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f12:	f000 b941 	b.w	8011198 <__malloc_unlock>
 8010f16:	42a3      	cmp	r3, r4
 8010f18:	d90b      	bls.n	8010f32 <_free_r+0x4e>
 8010f1a:	6821      	ldr	r1, [r4, #0]
 8010f1c:	1862      	adds	r2, r4, r1
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	bf04      	itt	eq
 8010f22:	681a      	ldreq	r2, [r3, #0]
 8010f24:	685b      	ldreq	r3, [r3, #4]
 8010f26:	6063      	str	r3, [r4, #4]
 8010f28:	bf04      	itt	eq
 8010f2a:	1852      	addeq	r2, r2, r1
 8010f2c:	6022      	streq	r2, [r4, #0]
 8010f2e:	602c      	str	r4, [r5, #0]
 8010f30:	e7ec      	b.n	8010f0c <_free_r+0x28>
 8010f32:	461a      	mov	r2, r3
 8010f34:	685b      	ldr	r3, [r3, #4]
 8010f36:	b10b      	cbz	r3, 8010f3c <_free_r+0x58>
 8010f38:	42a3      	cmp	r3, r4
 8010f3a:	d9fa      	bls.n	8010f32 <_free_r+0x4e>
 8010f3c:	6811      	ldr	r1, [r2, #0]
 8010f3e:	1855      	adds	r5, r2, r1
 8010f40:	42a5      	cmp	r5, r4
 8010f42:	d10b      	bne.n	8010f5c <_free_r+0x78>
 8010f44:	6824      	ldr	r4, [r4, #0]
 8010f46:	4421      	add	r1, r4
 8010f48:	1854      	adds	r4, r2, r1
 8010f4a:	42a3      	cmp	r3, r4
 8010f4c:	6011      	str	r1, [r2, #0]
 8010f4e:	d1dd      	bne.n	8010f0c <_free_r+0x28>
 8010f50:	681c      	ldr	r4, [r3, #0]
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	6053      	str	r3, [r2, #4]
 8010f56:	4421      	add	r1, r4
 8010f58:	6011      	str	r1, [r2, #0]
 8010f5a:	e7d7      	b.n	8010f0c <_free_r+0x28>
 8010f5c:	d902      	bls.n	8010f64 <_free_r+0x80>
 8010f5e:	230c      	movs	r3, #12
 8010f60:	6003      	str	r3, [r0, #0]
 8010f62:	e7d3      	b.n	8010f0c <_free_r+0x28>
 8010f64:	6825      	ldr	r5, [r4, #0]
 8010f66:	1961      	adds	r1, r4, r5
 8010f68:	428b      	cmp	r3, r1
 8010f6a:	bf04      	itt	eq
 8010f6c:	6819      	ldreq	r1, [r3, #0]
 8010f6e:	685b      	ldreq	r3, [r3, #4]
 8010f70:	6063      	str	r3, [r4, #4]
 8010f72:	bf04      	itt	eq
 8010f74:	1949      	addeq	r1, r1, r5
 8010f76:	6021      	streq	r1, [r4, #0]
 8010f78:	6054      	str	r4, [r2, #4]
 8010f7a:	e7c7      	b.n	8010f0c <_free_r+0x28>
 8010f7c:	b003      	add	sp, #12
 8010f7e:	bd30      	pop	{r4, r5, pc}
 8010f80:	20004abc 	.word	0x20004abc

08010f84 <_malloc_r>:
 8010f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f86:	1ccd      	adds	r5, r1, #3
 8010f88:	f025 0503 	bic.w	r5, r5, #3
 8010f8c:	3508      	adds	r5, #8
 8010f8e:	2d0c      	cmp	r5, #12
 8010f90:	bf38      	it	cc
 8010f92:	250c      	movcc	r5, #12
 8010f94:	2d00      	cmp	r5, #0
 8010f96:	4606      	mov	r6, r0
 8010f98:	db01      	blt.n	8010f9e <_malloc_r+0x1a>
 8010f9a:	42a9      	cmp	r1, r5
 8010f9c:	d903      	bls.n	8010fa6 <_malloc_r+0x22>
 8010f9e:	230c      	movs	r3, #12
 8010fa0:	6033      	str	r3, [r6, #0]
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fa6:	f000 f8f1 	bl	801118c <__malloc_lock>
 8010faa:	4921      	ldr	r1, [pc, #132]	; (8011030 <_malloc_r+0xac>)
 8010fac:	680a      	ldr	r2, [r1, #0]
 8010fae:	4614      	mov	r4, r2
 8010fb0:	b99c      	cbnz	r4, 8010fda <_malloc_r+0x56>
 8010fb2:	4f20      	ldr	r7, [pc, #128]	; (8011034 <_malloc_r+0xb0>)
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	b923      	cbnz	r3, 8010fc2 <_malloc_r+0x3e>
 8010fb8:	4621      	mov	r1, r4
 8010fba:	4630      	mov	r0, r6
 8010fbc:	f000 f8a6 	bl	801110c <_sbrk_r>
 8010fc0:	6038      	str	r0, [r7, #0]
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	f000 f8a1 	bl	801110c <_sbrk_r>
 8010fca:	1c43      	adds	r3, r0, #1
 8010fcc:	d123      	bne.n	8011016 <_malloc_r+0x92>
 8010fce:	230c      	movs	r3, #12
 8010fd0:	6033      	str	r3, [r6, #0]
 8010fd2:	4630      	mov	r0, r6
 8010fd4:	f000 f8e0 	bl	8011198 <__malloc_unlock>
 8010fd8:	e7e3      	b.n	8010fa2 <_malloc_r+0x1e>
 8010fda:	6823      	ldr	r3, [r4, #0]
 8010fdc:	1b5b      	subs	r3, r3, r5
 8010fde:	d417      	bmi.n	8011010 <_malloc_r+0x8c>
 8010fe0:	2b0b      	cmp	r3, #11
 8010fe2:	d903      	bls.n	8010fec <_malloc_r+0x68>
 8010fe4:	6023      	str	r3, [r4, #0]
 8010fe6:	441c      	add	r4, r3
 8010fe8:	6025      	str	r5, [r4, #0]
 8010fea:	e004      	b.n	8010ff6 <_malloc_r+0x72>
 8010fec:	6863      	ldr	r3, [r4, #4]
 8010fee:	42a2      	cmp	r2, r4
 8010ff0:	bf0c      	ite	eq
 8010ff2:	600b      	streq	r3, [r1, #0]
 8010ff4:	6053      	strne	r3, [r2, #4]
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	f000 f8ce 	bl	8011198 <__malloc_unlock>
 8010ffc:	f104 000b 	add.w	r0, r4, #11
 8011000:	1d23      	adds	r3, r4, #4
 8011002:	f020 0007 	bic.w	r0, r0, #7
 8011006:	1ac2      	subs	r2, r0, r3
 8011008:	d0cc      	beq.n	8010fa4 <_malloc_r+0x20>
 801100a:	1a1b      	subs	r3, r3, r0
 801100c:	50a3      	str	r3, [r4, r2]
 801100e:	e7c9      	b.n	8010fa4 <_malloc_r+0x20>
 8011010:	4622      	mov	r2, r4
 8011012:	6864      	ldr	r4, [r4, #4]
 8011014:	e7cc      	b.n	8010fb0 <_malloc_r+0x2c>
 8011016:	1cc4      	adds	r4, r0, #3
 8011018:	f024 0403 	bic.w	r4, r4, #3
 801101c:	42a0      	cmp	r0, r4
 801101e:	d0e3      	beq.n	8010fe8 <_malloc_r+0x64>
 8011020:	1a21      	subs	r1, r4, r0
 8011022:	4630      	mov	r0, r6
 8011024:	f000 f872 	bl	801110c <_sbrk_r>
 8011028:	3001      	adds	r0, #1
 801102a:	d1dd      	bne.n	8010fe8 <_malloc_r+0x64>
 801102c:	e7cf      	b.n	8010fce <_malloc_r+0x4a>
 801102e:	bf00      	nop
 8011030:	20004abc 	.word	0x20004abc
 8011034:	20004ac0 	.word	0x20004ac0

08011038 <cleanup_glue>:
 8011038:	b538      	push	{r3, r4, r5, lr}
 801103a:	460c      	mov	r4, r1
 801103c:	6809      	ldr	r1, [r1, #0]
 801103e:	4605      	mov	r5, r0
 8011040:	b109      	cbz	r1, 8011046 <cleanup_glue+0xe>
 8011042:	f7ff fff9 	bl	8011038 <cleanup_glue>
 8011046:	4621      	mov	r1, r4
 8011048:	4628      	mov	r0, r5
 801104a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801104e:	f7ff bf49 	b.w	8010ee4 <_free_r>
	...

08011054 <_reclaim_reent>:
 8011054:	4b2c      	ldr	r3, [pc, #176]	; (8011108 <_reclaim_reent+0xb4>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	4283      	cmp	r3, r0
 801105a:	b570      	push	{r4, r5, r6, lr}
 801105c:	4604      	mov	r4, r0
 801105e:	d051      	beq.n	8011104 <_reclaim_reent+0xb0>
 8011060:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011062:	b143      	cbz	r3, 8011076 <_reclaim_reent+0x22>
 8011064:	68db      	ldr	r3, [r3, #12]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d14a      	bne.n	8011100 <_reclaim_reent+0xac>
 801106a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801106c:	6819      	ldr	r1, [r3, #0]
 801106e:	b111      	cbz	r1, 8011076 <_reclaim_reent+0x22>
 8011070:	4620      	mov	r0, r4
 8011072:	f7ff ff37 	bl	8010ee4 <_free_r>
 8011076:	6961      	ldr	r1, [r4, #20]
 8011078:	b111      	cbz	r1, 8011080 <_reclaim_reent+0x2c>
 801107a:	4620      	mov	r0, r4
 801107c:	f7ff ff32 	bl	8010ee4 <_free_r>
 8011080:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011082:	b111      	cbz	r1, 801108a <_reclaim_reent+0x36>
 8011084:	4620      	mov	r0, r4
 8011086:	f7ff ff2d 	bl	8010ee4 <_free_r>
 801108a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801108c:	b111      	cbz	r1, 8011094 <_reclaim_reent+0x40>
 801108e:	4620      	mov	r0, r4
 8011090:	f7ff ff28 	bl	8010ee4 <_free_r>
 8011094:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011096:	b111      	cbz	r1, 801109e <_reclaim_reent+0x4a>
 8011098:	4620      	mov	r0, r4
 801109a:	f7ff ff23 	bl	8010ee4 <_free_r>
 801109e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80110a0:	b111      	cbz	r1, 80110a8 <_reclaim_reent+0x54>
 80110a2:	4620      	mov	r0, r4
 80110a4:	f7ff ff1e 	bl	8010ee4 <_free_r>
 80110a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80110aa:	b111      	cbz	r1, 80110b2 <_reclaim_reent+0x5e>
 80110ac:	4620      	mov	r0, r4
 80110ae:	f7ff ff19 	bl	8010ee4 <_free_r>
 80110b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80110b4:	b111      	cbz	r1, 80110bc <_reclaim_reent+0x68>
 80110b6:	4620      	mov	r0, r4
 80110b8:	f7ff ff14 	bl	8010ee4 <_free_r>
 80110bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110be:	b111      	cbz	r1, 80110c6 <_reclaim_reent+0x72>
 80110c0:	4620      	mov	r0, r4
 80110c2:	f7ff ff0f 	bl	8010ee4 <_free_r>
 80110c6:	69a3      	ldr	r3, [r4, #24]
 80110c8:	b1e3      	cbz	r3, 8011104 <_reclaim_reent+0xb0>
 80110ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80110cc:	4620      	mov	r0, r4
 80110ce:	4798      	blx	r3
 80110d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80110d2:	b1b9      	cbz	r1, 8011104 <_reclaim_reent+0xb0>
 80110d4:	4620      	mov	r0, r4
 80110d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110da:	f7ff bfad 	b.w	8011038 <cleanup_glue>
 80110de:	5949      	ldr	r1, [r1, r5]
 80110e0:	b941      	cbnz	r1, 80110f4 <_reclaim_reent+0xa0>
 80110e2:	3504      	adds	r5, #4
 80110e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110e6:	2d80      	cmp	r5, #128	; 0x80
 80110e8:	68d9      	ldr	r1, [r3, #12]
 80110ea:	d1f8      	bne.n	80110de <_reclaim_reent+0x8a>
 80110ec:	4620      	mov	r0, r4
 80110ee:	f7ff fef9 	bl	8010ee4 <_free_r>
 80110f2:	e7ba      	b.n	801106a <_reclaim_reent+0x16>
 80110f4:	680e      	ldr	r6, [r1, #0]
 80110f6:	4620      	mov	r0, r4
 80110f8:	f7ff fef4 	bl	8010ee4 <_free_r>
 80110fc:	4631      	mov	r1, r6
 80110fe:	e7ef      	b.n	80110e0 <_reclaim_reent+0x8c>
 8011100:	2500      	movs	r5, #0
 8011102:	e7ef      	b.n	80110e4 <_reclaim_reent+0x90>
 8011104:	bd70      	pop	{r4, r5, r6, pc}
 8011106:	bf00      	nop
 8011108:	2000003c 	.word	0x2000003c

0801110c <_sbrk_r>:
 801110c:	b538      	push	{r3, r4, r5, lr}
 801110e:	4d06      	ldr	r5, [pc, #24]	; (8011128 <_sbrk_r+0x1c>)
 8011110:	2300      	movs	r3, #0
 8011112:	4604      	mov	r4, r0
 8011114:	4608      	mov	r0, r1
 8011116:	602b      	str	r3, [r5, #0]
 8011118:	f7f2 f8e4 	bl	80032e4 <_sbrk>
 801111c:	1c43      	adds	r3, r0, #1
 801111e:	d102      	bne.n	8011126 <_sbrk_r+0x1a>
 8011120:	682b      	ldr	r3, [r5, #0]
 8011122:	b103      	cbz	r3, 8011126 <_sbrk_r+0x1a>
 8011124:	6023      	str	r3, [r4, #0]
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	200056e0 	.word	0x200056e0

0801112c <siprintf>:
 801112c:	b40e      	push	{r1, r2, r3}
 801112e:	b500      	push	{lr}
 8011130:	b09c      	sub	sp, #112	; 0x70
 8011132:	ab1d      	add	r3, sp, #116	; 0x74
 8011134:	9002      	str	r0, [sp, #8]
 8011136:	9006      	str	r0, [sp, #24]
 8011138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801113c:	4809      	ldr	r0, [pc, #36]	; (8011164 <siprintf+0x38>)
 801113e:	9107      	str	r1, [sp, #28]
 8011140:	9104      	str	r1, [sp, #16]
 8011142:	4909      	ldr	r1, [pc, #36]	; (8011168 <siprintf+0x3c>)
 8011144:	f853 2b04 	ldr.w	r2, [r3], #4
 8011148:	9105      	str	r1, [sp, #20]
 801114a:	6800      	ldr	r0, [r0, #0]
 801114c:	9301      	str	r3, [sp, #4]
 801114e:	a902      	add	r1, sp, #8
 8011150:	f000 f884 	bl	801125c <_svfiprintf_r>
 8011154:	9b02      	ldr	r3, [sp, #8]
 8011156:	2200      	movs	r2, #0
 8011158:	701a      	strb	r2, [r3, #0]
 801115a:	b01c      	add	sp, #112	; 0x70
 801115c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011160:	b003      	add	sp, #12
 8011162:	4770      	bx	lr
 8011164:	2000003c 	.word	0x2000003c
 8011168:	ffff0208 	.word	0xffff0208

0801116c <strcat>:
 801116c:	b510      	push	{r4, lr}
 801116e:	4602      	mov	r2, r0
 8011170:	7814      	ldrb	r4, [r2, #0]
 8011172:	4613      	mov	r3, r2
 8011174:	3201      	adds	r2, #1
 8011176:	2c00      	cmp	r4, #0
 8011178:	d1fa      	bne.n	8011170 <strcat+0x4>
 801117a:	3b01      	subs	r3, #1
 801117c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011180:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011184:	2a00      	cmp	r2, #0
 8011186:	d1f9      	bne.n	801117c <strcat+0x10>
 8011188:	bd10      	pop	{r4, pc}
	...

0801118c <__malloc_lock>:
 801118c:	4801      	ldr	r0, [pc, #4]	; (8011194 <__malloc_lock+0x8>)
 801118e:	f7ff be81 	b.w	8010e94 <__retarget_lock_acquire_recursive>
 8011192:	bf00      	nop
 8011194:	200056d8 	.word	0x200056d8

08011198 <__malloc_unlock>:
 8011198:	4801      	ldr	r0, [pc, #4]	; (80111a0 <__malloc_unlock+0x8>)
 801119a:	f7ff be7c 	b.w	8010e96 <__retarget_lock_release_recursive>
 801119e:	bf00      	nop
 80111a0:	200056d8 	.word	0x200056d8

080111a4 <__ssputs_r>:
 80111a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111a8:	688e      	ldr	r6, [r1, #8]
 80111aa:	429e      	cmp	r6, r3
 80111ac:	4682      	mov	sl, r0
 80111ae:	460c      	mov	r4, r1
 80111b0:	4690      	mov	r8, r2
 80111b2:	461f      	mov	r7, r3
 80111b4:	d838      	bhi.n	8011228 <__ssputs_r+0x84>
 80111b6:	898a      	ldrh	r2, [r1, #12]
 80111b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80111bc:	d032      	beq.n	8011224 <__ssputs_r+0x80>
 80111be:	6825      	ldr	r5, [r4, #0]
 80111c0:	6909      	ldr	r1, [r1, #16]
 80111c2:	eba5 0901 	sub.w	r9, r5, r1
 80111c6:	6965      	ldr	r5, [r4, #20]
 80111c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80111cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80111d0:	3301      	adds	r3, #1
 80111d2:	444b      	add	r3, r9
 80111d4:	106d      	asrs	r5, r5, #1
 80111d6:	429d      	cmp	r5, r3
 80111d8:	bf38      	it	cc
 80111da:	461d      	movcc	r5, r3
 80111dc:	0553      	lsls	r3, r2, #21
 80111de:	d531      	bpl.n	8011244 <__ssputs_r+0xa0>
 80111e0:	4629      	mov	r1, r5
 80111e2:	f7ff fecf 	bl	8010f84 <_malloc_r>
 80111e6:	4606      	mov	r6, r0
 80111e8:	b950      	cbnz	r0, 8011200 <__ssputs_r+0x5c>
 80111ea:	230c      	movs	r3, #12
 80111ec:	f8ca 3000 	str.w	r3, [sl]
 80111f0:	89a3      	ldrh	r3, [r4, #12]
 80111f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111f6:	81a3      	strh	r3, [r4, #12]
 80111f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011200:	6921      	ldr	r1, [r4, #16]
 8011202:	464a      	mov	r2, r9
 8011204:	f7ff fe58 	bl	8010eb8 <memcpy>
 8011208:	89a3      	ldrh	r3, [r4, #12]
 801120a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801120e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011212:	81a3      	strh	r3, [r4, #12]
 8011214:	6126      	str	r6, [r4, #16]
 8011216:	6165      	str	r5, [r4, #20]
 8011218:	444e      	add	r6, r9
 801121a:	eba5 0509 	sub.w	r5, r5, r9
 801121e:	6026      	str	r6, [r4, #0]
 8011220:	60a5      	str	r5, [r4, #8]
 8011222:	463e      	mov	r6, r7
 8011224:	42be      	cmp	r6, r7
 8011226:	d900      	bls.n	801122a <__ssputs_r+0x86>
 8011228:	463e      	mov	r6, r7
 801122a:	4632      	mov	r2, r6
 801122c:	6820      	ldr	r0, [r4, #0]
 801122e:	4641      	mov	r1, r8
 8011230:	f000 faa8 	bl	8011784 <memmove>
 8011234:	68a3      	ldr	r3, [r4, #8]
 8011236:	6822      	ldr	r2, [r4, #0]
 8011238:	1b9b      	subs	r3, r3, r6
 801123a:	4432      	add	r2, r6
 801123c:	60a3      	str	r3, [r4, #8]
 801123e:	6022      	str	r2, [r4, #0]
 8011240:	2000      	movs	r0, #0
 8011242:	e7db      	b.n	80111fc <__ssputs_r+0x58>
 8011244:	462a      	mov	r2, r5
 8011246:	f000 fab7 	bl	80117b8 <_realloc_r>
 801124a:	4606      	mov	r6, r0
 801124c:	2800      	cmp	r0, #0
 801124e:	d1e1      	bne.n	8011214 <__ssputs_r+0x70>
 8011250:	6921      	ldr	r1, [r4, #16]
 8011252:	4650      	mov	r0, sl
 8011254:	f7ff fe46 	bl	8010ee4 <_free_r>
 8011258:	e7c7      	b.n	80111ea <__ssputs_r+0x46>
	...

0801125c <_svfiprintf_r>:
 801125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011260:	4698      	mov	r8, r3
 8011262:	898b      	ldrh	r3, [r1, #12]
 8011264:	061b      	lsls	r3, r3, #24
 8011266:	b09d      	sub	sp, #116	; 0x74
 8011268:	4607      	mov	r7, r0
 801126a:	460d      	mov	r5, r1
 801126c:	4614      	mov	r4, r2
 801126e:	d50e      	bpl.n	801128e <_svfiprintf_r+0x32>
 8011270:	690b      	ldr	r3, [r1, #16]
 8011272:	b963      	cbnz	r3, 801128e <_svfiprintf_r+0x32>
 8011274:	2140      	movs	r1, #64	; 0x40
 8011276:	f7ff fe85 	bl	8010f84 <_malloc_r>
 801127a:	6028      	str	r0, [r5, #0]
 801127c:	6128      	str	r0, [r5, #16]
 801127e:	b920      	cbnz	r0, 801128a <_svfiprintf_r+0x2e>
 8011280:	230c      	movs	r3, #12
 8011282:	603b      	str	r3, [r7, #0]
 8011284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011288:	e0d1      	b.n	801142e <_svfiprintf_r+0x1d2>
 801128a:	2340      	movs	r3, #64	; 0x40
 801128c:	616b      	str	r3, [r5, #20]
 801128e:	2300      	movs	r3, #0
 8011290:	9309      	str	r3, [sp, #36]	; 0x24
 8011292:	2320      	movs	r3, #32
 8011294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011298:	f8cd 800c 	str.w	r8, [sp, #12]
 801129c:	2330      	movs	r3, #48	; 0x30
 801129e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011448 <_svfiprintf_r+0x1ec>
 80112a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112a6:	f04f 0901 	mov.w	r9, #1
 80112aa:	4623      	mov	r3, r4
 80112ac:	469a      	mov	sl, r3
 80112ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112b2:	b10a      	cbz	r2, 80112b8 <_svfiprintf_r+0x5c>
 80112b4:	2a25      	cmp	r2, #37	; 0x25
 80112b6:	d1f9      	bne.n	80112ac <_svfiprintf_r+0x50>
 80112b8:	ebba 0b04 	subs.w	fp, sl, r4
 80112bc:	d00b      	beq.n	80112d6 <_svfiprintf_r+0x7a>
 80112be:	465b      	mov	r3, fp
 80112c0:	4622      	mov	r2, r4
 80112c2:	4629      	mov	r1, r5
 80112c4:	4638      	mov	r0, r7
 80112c6:	f7ff ff6d 	bl	80111a4 <__ssputs_r>
 80112ca:	3001      	adds	r0, #1
 80112cc:	f000 80aa 	beq.w	8011424 <_svfiprintf_r+0x1c8>
 80112d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112d2:	445a      	add	r2, fp
 80112d4:	9209      	str	r2, [sp, #36]	; 0x24
 80112d6:	f89a 3000 	ldrb.w	r3, [sl]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	f000 80a2 	beq.w	8011424 <_svfiprintf_r+0x1c8>
 80112e0:	2300      	movs	r3, #0
 80112e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112ea:	f10a 0a01 	add.w	sl, sl, #1
 80112ee:	9304      	str	r3, [sp, #16]
 80112f0:	9307      	str	r3, [sp, #28]
 80112f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112f6:	931a      	str	r3, [sp, #104]	; 0x68
 80112f8:	4654      	mov	r4, sl
 80112fa:	2205      	movs	r2, #5
 80112fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011300:	4851      	ldr	r0, [pc, #324]	; (8011448 <_svfiprintf_r+0x1ec>)
 8011302:	f7ee ff7d 	bl	8000200 <memchr>
 8011306:	9a04      	ldr	r2, [sp, #16]
 8011308:	b9d8      	cbnz	r0, 8011342 <_svfiprintf_r+0xe6>
 801130a:	06d0      	lsls	r0, r2, #27
 801130c:	bf44      	itt	mi
 801130e:	2320      	movmi	r3, #32
 8011310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011314:	0711      	lsls	r1, r2, #28
 8011316:	bf44      	itt	mi
 8011318:	232b      	movmi	r3, #43	; 0x2b
 801131a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801131e:	f89a 3000 	ldrb.w	r3, [sl]
 8011322:	2b2a      	cmp	r3, #42	; 0x2a
 8011324:	d015      	beq.n	8011352 <_svfiprintf_r+0xf6>
 8011326:	9a07      	ldr	r2, [sp, #28]
 8011328:	4654      	mov	r4, sl
 801132a:	2000      	movs	r0, #0
 801132c:	f04f 0c0a 	mov.w	ip, #10
 8011330:	4621      	mov	r1, r4
 8011332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011336:	3b30      	subs	r3, #48	; 0x30
 8011338:	2b09      	cmp	r3, #9
 801133a:	d94e      	bls.n	80113da <_svfiprintf_r+0x17e>
 801133c:	b1b0      	cbz	r0, 801136c <_svfiprintf_r+0x110>
 801133e:	9207      	str	r2, [sp, #28]
 8011340:	e014      	b.n	801136c <_svfiprintf_r+0x110>
 8011342:	eba0 0308 	sub.w	r3, r0, r8
 8011346:	fa09 f303 	lsl.w	r3, r9, r3
 801134a:	4313      	orrs	r3, r2
 801134c:	9304      	str	r3, [sp, #16]
 801134e:	46a2      	mov	sl, r4
 8011350:	e7d2      	b.n	80112f8 <_svfiprintf_r+0x9c>
 8011352:	9b03      	ldr	r3, [sp, #12]
 8011354:	1d19      	adds	r1, r3, #4
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	9103      	str	r1, [sp, #12]
 801135a:	2b00      	cmp	r3, #0
 801135c:	bfbb      	ittet	lt
 801135e:	425b      	neglt	r3, r3
 8011360:	f042 0202 	orrlt.w	r2, r2, #2
 8011364:	9307      	strge	r3, [sp, #28]
 8011366:	9307      	strlt	r3, [sp, #28]
 8011368:	bfb8      	it	lt
 801136a:	9204      	strlt	r2, [sp, #16]
 801136c:	7823      	ldrb	r3, [r4, #0]
 801136e:	2b2e      	cmp	r3, #46	; 0x2e
 8011370:	d10c      	bne.n	801138c <_svfiprintf_r+0x130>
 8011372:	7863      	ldrb	r3, [r4, #1]
 8011374:	2b2a      	cmp	r3, #42	; 0x2a
 8011376:	d135      	bne.n	80113e4 <_svfiprintf_r+0x188>
 8011378:	9b03      	ldr	r3, [sp, #12]
 801137a:	1d1a      	adds	r2, r3, #4
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	9203      	str	r2, [sp, #12]
 8011380:	2b00      	cmp	r3, #0
 8011382:	bfb8      	it	lt
 8011384:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011388:	3402      	adds	r4, #2
 801138a:	9305      	str	r3, [sp, #20]
 801138c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011458 <_svfiprintf_r+0x1fc>
 8011390:	7821      	ldrb	r1, [r4, #0]
 8011392:	2203      	movs	r2, #3
 8011394:	4650      	mov	r0, sl
 8011396:	f7ee ff33 	bl	8000200 <memchr>
 801139a:	b140      	cbz	r0, 80113ae <_svfiprintf_r+0x152>
 801139c:	2340      	movs	r3, #64	; 0x40
 801139e:	eba0 000a 	sub.w	r0, r0, sl
 80113a2:	fa03 f000 	lsl.w	r0, r3, r0
 80113a6:	9b04      	ldr	r3, [sp, #16]
 80113a8:	4303      	orrs	r3, r0
 80113aa:	3401      	adds	r4, #1
 80113ac:	9304      	str	r3, [sp, #16]
 80113ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113b2:	4826      	ldr	r0, [pc, #152]	; (801144c <_svfiprintf_r+0x1f0>)
 80113b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113b8:	2206      	movs	r2, #6
 80113ba:	f7ee ff21 	bl	8000200 <memchr>
 80113be:	2800      	cmp	r0, #0
 80113c0:	d038      	beq.n	8011434 <_svfiprintf_r+0x1d8>
 80113c2:	4b23      	ldr	r3, [pc, #140]	; (8011450 <_svfiprintf_r+0x1f4>)
 80113c4:	bb1b      	cbnz	r3, 801140e <_svfiprintf_r+0x1b2>
 80113c6:	9b03      	ldr	r3, [sp, #12]
 80113c8:	3307      	adds	r3, #7
 80113ca:	f023 0307 	bic.w	r3, r3, #7
 80113ce:	3308      	adds	r3, #8
 80113d0:	9303      	str	r3, [sp, #12]
 80113d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113d4:	4433      	add	r3, r6
 80113d6:	9309      	str	r3, [sp, #36]	; 0x24
 80113d8:	e767      	b.n	80112aa <_svfiprintf_r+0x4e>
 80113da:	fb0c 3202 	mla	r2, ip, r2, r3
 80113de:	460c      	mov	r4, r1
 80113e0:	2001      	movs	r0, #1
 80113e2:	e7a5      	b.n	8011330 <_svfiprintf_r+0xd4>
 80113e4:	2300      	movs	r3, #0
 80113e6:	3401      	adds	r4, #1
 80113e8:	9305      	str	r3, [sp, #20]
 80113ea:	4619      	mov	r1, r3
 80113ec:	f04f 0c0a 	mov.w	ip, #10
 80113f0:	4620      	mov	r0, r4
 80113f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113f6:	3a30      	subs	r2, #48	; 0x30
 80113f8:	2a09      	cmp	r2, #9
 80113fa:	d903      	bls.n	8011404 <_svfiprintf_r+0x1a8>
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d0c5      	beq.n	801138c <_svfiprintf_r+0x130>
 8011400:	9105      	str	r1, [sp, #20]
 8011402:	e7c3      	b.n	801138c <_svfiprintf_r+0x130>
 8011404:	fb0c 2101 	mla	r1, ip, r1, r2
 8011408:	4604      	mov	r4, r0
 801140a:	2301      	movs	r3, #1
 801140c:	e7f0      	b.n	80113f0 <_svfiprintf_r+0x194>
 801140e:	ab03      	add	r3, sp, #12
 8011410:	9300      	str	r3, [sp, #0]
 8011412:	462a      	mov	r2, r5
 8011414:	4b0f      	ldr	r3, [pc, #60]	; (8011454 <_svfiprintf_r+0x1f8>)
 8011416:	a904      	add	r1, sp, #16
 8011418:	4638      	mov	r0, r7
 801141a:	f3af 8000 	nop.w
 801141e:	1c42      	adds	r2, r0, #1
 8011420:	4606      	mov	r6, r0
 8011422:	d1d6      	bne.n	80113d2 <_svfiprintf_r+0x176>
 8011424:	89ab      	ldrh	r3, [r5, #12]
 8011426:	065b      	lsls	r3, r3, #25
 8011428:	f53f af2c 	bmi.w	8011284 <_svfiprintf_r+0x28>
 801142c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801142e:	b01d      	add	sp, #116	; 0x74
 8011430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011434:	ab03      	add	r3, sp, #12
 8011436:	9300      	str	r3, [sp, #0]
 8011438:	462a      	mov	r2, r5
 801143a:	4b06      	ldr	r3, [pc, #24]	; (8011454 <_svfiprintf_r+0x1f8>)
 801143c:	a904      	add	r1, sp, #16
 801143e:	4638      	mov	r0, r7
 8011440:	f000 f87a 	bl	8011538 <_printf_i>
 8011444:	e7eb      	b.n	801141e <_svfiprintf_r+0x1c2>
 8011446:	bf00      	nop
 8011448:	080141ac 	.word	0x080141ac
 801144c:	080141b6 	.word	0x080141b6
 8011450:	00000000 	.word	0x00000000
 8011454:	080111a5 	.word	0x080111a5
 8011458:	080141b2 	.word	0x080141b2

0801145c <_printf_common>:
 801145c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011460:	4616      	mov	r6, r2
 8011462:	4699      	mov	r9, r3
 8011464:	688a      	ldr	r2, [r1, #8]
 8011466:	690b      	ldr	r3, [r1, #16]
 8011468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801146c:	4293      	cmp	r3, r2
 801146e:	bfb8      	it	lt
 8011470:	4613      	movlt	r3, r2
 8011472:	6033      	str	r3, [r6, #0]
 8011474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011478:	4607      	mov	r7, r0
 801147a:	460c      	mov	r4, r1
 801147c:	b10a      	cbz	r2, 8011482 <_printf_common+0x26>
 801147e:	3301      	adds	r3, #1
 8011480:	6033      	str	r3, [r6, #0]
 8011482:	6823      	ldr	r3, [r4, #0]
 8011484:	0699      	lsls	r1, r3, #26
 8011486:	bf42      	ittt	mi
 8011488:	6833      	ldrmi	r3, [r6, #0]
 801148a:	3302      	addmi	r3, #2
 801148c:	6033      	strmi	r3, [r6, #0]
 801148e:	6825      	ldr	r5, [r4, #0]
 8011490:	f015 0506 	ands.w	r5, r5, #6
 8011494:	d106      	bne.n	80114a4 <_printf_common+0x48>
 8011496:	f104 0a19 	add.w	sl, r4, #25
 801149a:	68e3      	ldr	r3, [r4, #12]
 801149c:	6832      	ldr	r2, [r6, #0]
 801149e:	1a9b      	subs	r3, r3, r2
 80114a0:	42ab      	cmp	r3, r5
 80114a2:	dc26      	bgt.n	80114f2 <_printf_common+0x96>
 80114a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80114a8:	1e13      	subs	r3, r2, #0
 80114aa:	6822      	ldr	r2, [r4, #0]
 80114ac:	bf18      	it	ne
 80114ae:	2301      	movne	r3, #1
 80114b0:	0692      	lsls	r2, r2, #26
 80114b2:	d42b      	bmi.n	801150c <_printf_common+0xb0>
 80114b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80114b8:	4649      	mov	r1, r9
 80114ba:	4638      	mov	r0, r7
 80114bc:	47c0      	blx	r8
 80114be:	3001      	adds	r0, #1
 80114c0:	d01e      	beq.n	8011500 <_printf_common+0xa4>
 80114c2:	6823      	ldr	r3, [r4, #0]
 80114c4:	68e5      	ldr	r5, [r4, #12]
 80114c6:	6832      	ldr	r2, [r6, #0]
 80114c8:	f003 0306 	and.w	r3, r3, #6
 80114cc:	2b04      	cmp	r3, #4
 80114ce:	bf08      	it	eq
 80114d0:	1aad      	subeq	r5, r5, r2
 80114d2:	68a3      	ldr	r3, [r4, #8]
 80114d4:	6922      	ldr	r2, [r4, #16]
 80114d6:	bf0c      	ite	eq
 80114d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80114dc:	2500      	movne	r5, #0
 80114de:	4293      	cmp	r3, r2
 80114e0:	bfc4      	itt	gt
 80114e2:	1a9b      	subgt	r3, r3, r2
 80114e4:	18ed      	addgt	r5, r5, r3
 80114e6:	2600      	movs	r6, #0
 80114e8:	341a      	adds	r4, #26
 80114ea:	42b5      	cmp	r5, r6
 80114ec:	d11a      	bne.n	8011524 <_printf_common+0xc8>
 80114ee:	2000      	movs	r0, #0
 80114f0:	e008      	b.n	8011504 <_printf_common+0xa8>
 80114f2:	2301      	movs	r3, #1
 80114f4:	4652      	mov	r2, sl
 80114f6:	4649      	mov	r1, r9
 80114f8:	4638      	mov	r0, r7
 80114fa:	47c0      	blx	r8
 80114fc:	3001      	adds	r0, #1
 80114fe:	d103      	bne.n	8011508 <_printf_common+0xac>
 8011500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011508:	3501      	adds	r5, #1
 801150a:	e7c6      	b.n	801149a <_printf_common+0x3e>
 801150c:	18e1      	adds	r1, r4, r3
 801150e:	1c5a      	adds	r2, r3, #1
 8011510:	2030      	movs	r0, #48	; 0x30
 8011512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011516:	4422      	add	r2, r4
 8011518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801151c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011520:	3302      	adds	r3, #2
 8011522:	e7c7      	b.n	80114b4 <_printf_common+0x58>
 8011524:	2301      	movs	r3, #1
 8011526:	4622      	mov	r2, r4
 8011528:	4649      	mov	r1, r9
 801152a:	4638      	mov	r0, r7
 801152c:	47c0      	blx	r8
 801152e:	3001      	adds	r0, #1
 8011530:	d0e6      	beq.n	8011500 <_printf_common+0xa4>
 8011532:	3601      	adds	r6, #1
 8011534:	e7d9      	b.n	80114ea <_printf_common+0x8e>
	...

08011538 <_printf_i>:
 8011538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801153c:	460c      	mov	r4, r1
 801153e:	4691      	mov	r9, r2
 8011540:	7e27      	ldrb	r7, [r4, #24]
 8011542:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011544:	2f78      	cmp	r7, #120	; 0x78
 8011546:	4680      	mov	r8, r0
 8011548:	469a      	mov	sl, r3
 801154a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801154e:	d807      	bhi.n	8011560 <_printf_i+0x28>
 8011550:	2f62      	cmp	r7, #98	; 0x62
 8011552:	d80a      	bhi.n	801156a <_printf_i+0x32>
 8011554:	2f00      	cmp	r7, #0
 8011556:	f000 80d8 	beq.w	801170a <_printf_i+0x1d2>
 801155a:	2f58      	cmp	r7, #88	; 0x58
 801155c:	f000 80a3 	beq.w	80116a6 <_printf_i+0x16e>
 8011560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011568:	e03a      	b.n	80115e0 <_printf_i+0xa8>
 801156a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801156e:	2b15      	cmp	r3, #21
 8011570:	d8f6      	bhi.n	8011560 <_printf_i+0x28>
 8011572:	a001      	add	r0, pc, #4	; (adr r0, 8011578 <_printf_i+0x40>)
 8011574:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011578:	080115d1 	.word	0x080115d1
 801157c:	080115e5 	.word	0x080115e5
 8011580:	08011561 	.word	0x08011561
 8011584:	08011561 	.word	0x08011561
 8011588:	08011561 	.word	0x08011561
 801158c:	08011561 	.word	0x08011561
 8011590:	080115e5 	.word	0x080115e5
 8011594:	08011561 	.word	0x08011561
 8011598:	08011561 	.word	0x08011561
 801159c:	08011561 	.word	0x08011561
 80115a0:	08011561 	.word	0x08011561
 80115a4:	080116f1 	.word	0x080116f1
 80115a8:	08011615 	.word	0x08011615
 80115ac:	080116d3 	.word	0x080116d3
 80115b0:	08011561 	.word	0x08011561
 80115b4:	08011561 	.word	0x08011561
 80115b8:	08011713 	.word	0x08011713
 80115bc:	08011561 	.word	0x08011561
 80115c0:	08011615 	.word	0x08011615
 80115c4:	08011561 	.word	0x08011561
 80115c8:	08011561 	.word	0x08011561
 80115cc:	080116db 	.word	0x080116db
 80115d0:	680b      	ldr	r3, [r1, #0]
 80115d2:	1d1a      	adds	r2, r3, #4
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	600a      	str	r2, [r1, #0]
 80115d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80115dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80115e0:	2301      	movs	r3, #1
 80115e2:	e0a3      	b.n	801172c <_printf_i+0x1f4>
 80115e4:	6825      	ldr	r5, [r4, #0]
 80115e6:	6808      	ldr	r0, [r1, #0]
 80115e8:	062e      	lsls	r6, r5, #24
 80115ea:	f100 0304 	add.w	r3, r0, #4
 80115ee:	d50a      	bpl.n	8011606 <_printf_i+0xce>
 80115f0:	6805      	ldr	r5, [r0, #0]
 80115f2:	600b      	str	r3, [r1, #0]
 80115f4:	2d00      	cmp	r5, #0
 80115f6:	da03      	bge.n	8011600 <_printf_i+0xc8>
 80115f8:	232d      	movs	r3, #45	; 0x2d
 80115fa:	426d      	negs	r5, r5
 80115fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011600:	485e      	ldr	r0, [pc, #376]	; (801177c <_printf_i+0x244>)
 8011602:	230a      	movs	r3, #10
 8011604:	e019      	b.n	801163a <_printf_i+0x102>
 8011606:	f015 0f40 	tst.w	r5, #64	; 0x40
 801160a:	6805      	ldr	r5, [r0, #0]
 801160c:	600b      	str	r3, [r1, #0]
 801160e:	bf18      	it	ne
 8011610:	b22d      	sxthne	r5, r5
 8011612:	e7ef      	b.n	80115f4 <_printf_i+0xbc>
 8011614:	680b      	ldr	r3, [r1, #0]
 8011616:	6825      	ldr	r5, [r4, #0]
 8011618:	1d18      	adds	r0, r3, #4
 801161a:	6008      	str	r0, [r1, #0]
 801161c:	0628      	lsls	r0, r5, #24
 801161e:	d501      	bpl.n	8011624 <_printf_i+0xec>
 8011620:	681d      	ldr	r5, [r3, #0]
 8011622:	e002      	b.n	801162a <_printf_i+0xf2>
 8011624:	0669      	lsls	r1, r5, #25
 8011626:	d5fb      	bpl.n	8011620 <_printf_i+0xe8>
 8011628:	881d      	ldrh	r5, [r3, #0]
 801162a:	4854      	ldr	r0, [pc, #336]	; (801177c <_printf_i+0x244>)
 801162c:	2f6f      	cmp	r7, #111	; 0x6f
 801162e:	bf0c      	ite	eq
 8011630:	2308      	moveq	r3, #8
 8011632:	230a      	movne	r3, #10
 8011634:	2100      	movs	r1, #0
 8011636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801163a:	6866      	ldr	r6, [r4, #4]
 801163c:	60a6      	str	r6, [r4, #8]
 801163e:	2e00      	cmp	r6, #0
 8011640:	bfa2      	ittt	ge
 8011642:	6821      	ldrge	r1, [r4, #0]
 8011644:	f021 0104 	bicge.w	r1, r1, #4
 8011648:	6021      	strge	r1, [r4, #0]
 801164a:	b90d      	cbnz	r5, 8011650 <_printf_i+0x118>
 801164c:	2e00      	cmp	r6, #0
 801164e:	d04d      	beq.n	80116ec <_printf_i+0x1b4>
 8011650:	4616      	mov	r6, r2
 8011652:	fbb5 f1f3 	udiv	r1, r5, r3
 8011656:	fb03 5711 	mls	r7, r3, r1, r5
 801165a:	5dc7      	ldrb	r7, [r0, r7]
 801165c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011660:	462f      	mov	r7, r5
 8011662:	42bb      	cmp	r3, r7
 8011664:	460d      	mov	r5, r1
 8011666:	d9f4      	bls.n	8011652 <_printf_i+0x11a>
 8011668:	2b08      	cmp	r3, #8
 801166a:	d10b      	bne.n	8011684 <_printf_i+0x14c>
 801166c:	6823      	ldr	r3, [r4, #0]
 801166e:	07df      	lsls	r7, r3, #31
 8011670:	d508      	bpl.n	8011684 <_printf_i+0x14c>
 8011672:	6923      	ldr	r3, [r4, #16]
 8011674:	6861      	ldr	r1, [r4, #4]
 8011676:	4299      	cmp	r1, r3
 8011678:	bfde      	ittt	le
 801167a:	2330      	movle	r3, #48	; 0x30
 801167c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011680:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8011684:	1b92      	subs	r2, r2, r6
 8011686:	6122      	str	r2, [r4, #16]
 8011688:	f8cd a000 	str.w	sl, [sp]
 801168c:	464b      	mov	r3, r9
 801168e:	aa03      	add	r2, sp, #12
 8011690:	4621      	mov	r1, r4
 8011692:	4640      	mov	r0, r8
 8011694:	f7ff fee2 	bl	801145c <_printf_common>
 8011698:	3001      	adds	r0, #1
 801169a:	d14c      	bne.n	8011736 <_printf_i+0x1fe>
 801169c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116a0:	b004      	add	sp, #16
 80116a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a6:	4835      	ldr	r0, [pc, #212]	; (801177c <_printf_i+0x244>)
 80116a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80116ac:	6823      	ldr	r3, [r4, #0]
 80116ae:	680e      	ldr	r6, [r1, #0]
 80116b0:	061f      	lsls	r7, r3, #24
 80116b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80116b6:	600e      	str	r6, [r1, #0]
 80116b8:	d514      	bpl.n	80116e4 <_printf_i+0x1ac>
 80116ba:	07d9      	lsls	r1, r3, #31
 80116bc:	bf44      	itt	mi
 80116be:	f043 0320 	orrmi.w	r3, r3, #32
 80116c2:	6023      	strmi	r3, [r4, #0]
 80116c4:	b91d      	cbnz	r5, 80116ce <_printf_i+0x196>
 80116c6:	6823      	ldr	r3, [r4, #0]
 80116c8:	f023 0320 	bic.w	r3, r3, #32
 80116cc:	6023      	str	r3, [r4, #0]
 80116ce:	2310      	movs	r3, #16
 80116d0:	e7b0      	b.n	8011634 <_printf_i+0xfc>
 80116d2:	6823      	ldr	r3, [r4, #0]
 80116d4:	f043 0320 	orr.w	r3, r3, #32
 80116d8:	6023      	str	r3, [r4, #0]
 80116da:	2378      	movs	r3, #120	; 0x78
 80116dc:	4828      	ldr	r0, [pc, #160]	; (8011780 <_printf_i+0x248>)
 80116de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80116e2:	e7e3      	b.n	80116ac <_printf_i+0x174>
 80116e4:	065e      	lsls	r6, r3, #25
 80116e6:	bf48      	it	mi
 80116e8:	b2ad      	uxthmi	r5, r5
 80116ea:	e7e6      	b.n	80116ba <_printf_i+0x182>
 80116ec:	4616      	mov	r6, r2
 80116ee:	e7bb      	b.n	8011668 <_printf_i+0x130>
 80116f0:	680b      	ldr	r3, [r1, #0]
 80116f2:	6826      	ldr	r6, [r4, #0]
 80116f4:	6960      	ldr	r0, [r4, #20]
 80116f6:	1d1d      	adds	r5, r3, #4
 80116f8:	600d      	str	r5, [r1, #0]
 80116fa:	0635      	lsls	r5, r6, #24
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	d501      	bpl.n	8011704 <_printf_i+0x1cc>
 8011700:	6018      	str	r0, [r3, #0]
 8011702:	e002      	b.n	801170a <_printf_i+0x1d2>
 8011704:	0671      	lsls	r1, r6, #25
 8011706:	d5fb      	bpl.n	8011700 <_printf_i+0x1c8>
 8011708:	8018      	strh	r0, [r3, #0]
 801170a:	2300      	movs	r3, #0
 801170c:	6123      	str	r3, [r4, #16]
 801170e:	4616      	mov	r6, r2
 8011710:	e7ba      	b.n	8011688 <_printf_i+0x150>
 8011712:	680b      	ldr	r3, [r1, #0]
 8011714:	1d1a      	adds	r2, r3, #4
 8011716:	600a      	str	r2, [r1, #0]
 8011718:	681e      	ldr	r6, [r3, #0]
 801171a:	6862      	ldr	r2, [r4, #4]
 801171c:	2100      	movs	r1, #0
 801171e:	4630      	mov	r0, r6
 8011720:	f7ee fd6e 	bl	8000200 <memchr>
 8011724:	b108      	cbz	r0, 801172a <_printf_i+0x1f2>
 8011726:	1b80      	subs	r0, r0, r6
 8011728:	6060      	str	r0, [r4, #4]
 801172a:	6863      	ldr	r3, [r4, #4]
 801172c:	6123      	str	r3, [r4, #16]
 801172e:	2300      	movs	r3, #0
 8011730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011734:	e7a8      	b.n	8011688 <_printf_i+0x150>
 8011736:	6923      	ldr	r3, [r4, #16]
 8011738:	4632      	mov	r2, r6
 801173a:	4649      	mov	r1, r9
 801173c:	4640      	mov	r0, r8
 801173e:	47d0      	blx	sl
 8011740:	3001      	adds	r0, #1
 8011742:	d0ab      	beq.n	801169c <_printf_i+0x164>
 8011744:	6823      	ldr	r3, [r4, #0]
 8011746:	079b      	lsls	r3, r3, #30
 8011748:	d413      	bmi.n	8011772 <_printf_i+0x23a>
 801174a:	68e0      	ldr	r0, [r4, #12]
 801174c:	9b03      	ldr	r3, [sp, #12]
 801174e:	4298      	cmp	r0, r3
 8011750:	bfb8      	it	lt
 8011752:	4618      	movlt	r0, r3
 8011754:	e7a4      	b.n	80116a0 <_printf_i+0x168>
 8011756:	2301      	movs	r3, #1
 8011758:	4632      	mov	r2, r6
 801175a:	4649      	mov	r1, r9
 801175c:	4640      	mov	r0, r8
 801175e:	47d0      	blx	sl
 8011760:	3001      	adds	r0, #1
 8011762:	d09b      	beq.n	801169c <_printf_i+0x164>
 8011764:	3501      	adds	r5, #1
 8011766:	68e3      	ldr	r3, [r4, #12]
 8011768:	9903      	ldr	r1, [sp, #12]
 801176a:	1a5b      	subs	r3, r3, r1
 801176c:	42ab      	cmp	r3, r5
 801176e:	dcf2      	bgt.n	8011756 <_printf_i+0x21e>
 8011770:	e7eb      	b.n	801174a <_printf_i+0x212>
 8011772:	2500      	movs	r5, #0
 8011774:	f104 0619 	add.w	r6, r4, #25
 8011778:	e7f5      	b.n	8011766 <_printf_i+0x22e>
 801177a:	bf00      	nop
 801177c:	080141bd 	.word	0x080141bd
 8011780:	080141ce 	.word	0x080141ce

08011784 <memmove>:
 8011784:	4288      	cmp	r0, r1
 8011786:	b510      	push	{r4, lr}
 8011788:	eb01 0402 	add.w	r4, r1, r2
 801178c:	d902      	bls.n	8011794 <memmove+0x10>
 801178e:	4284      	cmp	r4, r0
 8011790:	4623      	mov	r3, r4
 8011792:	d807      	bhi.n	80117a4 <memmove+0x20>
 8011794:	1e43      	subs	r3, r0, #1
 8011796:	42a1      	cmp	r1, r4
 8011798:	d008      	beq.n	80117ac <memmove+0x28>
 801179a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801179e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80117a2:	e7f8      	b.n	8011796 <memmove+0x12>
 80117a4:	4402      	add	r2, r0
 80117a6:	4601      	mov	r1, r0
 80117a8:	428a      	cmp	r2, r1
 80117aa:	d100      	bne.n	80117ae <memmove+0x2a>
 80117ac:	bd10      	pop	{r4, pc}
 80117ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80117b6:	e7f7      	b.n	80117a8 <memmove+0x24>

080117b8 <_realloc_r>:
 80117b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ba:	4607      	mov	r7, r0
 80117bc:	4614      	mov	r4, r2
 80117be:	460e      	mov	r6, r1
 80117c0:	b921      	cbnz	r1, 80117cc <_realloc_r+0x14>
 80117c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80117c6:	4611      	mov	r1, r2
 80117c8:	f7ff bbdc 	b.w	8010f84 <_malloc_r>
 80117cc:	b922      	cbnz	r2, 80117d8 <_realloc_r+0x20>
 80117ce:	f7ff fb89 	bl	8010ee4 <_free_r>
 80117d2:	4625      	mov	r5, r4
 80117d4:	4628      	mov	r0, r5
 80117d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117d8:	f000 f814 	bl	8011804 <_malloc_usable_size_r>
 80117dc:	42a0      	cmp	r0, r4
 80117de:	d20f      	bcs.n	8011800 <_realloc_r+0x48>
 80117e0:	4621      	mov	r1, r4
 80117e2:	4638      	mov	r0, r7
 80117e4:	f7ff fbce 	bl	8010f84 <_malloc_r>
 80117e8:	4605      	mov	r5, r0
 80117ea:	2800      	cmp	r0, #0
 80117ec:	d0f2      	beq.n	80117d4 <_realloc_r+0x1c>
 80117ee:	4631      	mov	r1, r6
 80117f0:	4622      	mov	r2, r4
 80117f2:	f7ff fb61 	bl	8010eb8 <memcpy>
 80117f6:	4631      	mov	r1, r6
 80117f8:	4638      	mov	r0, r7
 80117fa:	f7ff fb73 	bl	8010ee4 <_free_r>
 80117fe:	e7e9      	b.n	80117d4 <_realloc_r+0x1c>
 8011800:	4635      	mov	r5, r6
 8011802:	e7e7      	b.n	80117d4 <_realloc_r+0x1c>

08011804 <_malloc_usable_size_r>:
 8011804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011808:	1f18      	subs	r0, r3, #4
 801180a:	2b00      	cmp	r3, #0
 801180c:	bfbc      	itt	lt
 801180e:	580b      	ldrlt	r3, [r1, r0]
 8011810:	18c0      	addlt	r0, r0, r3
 8011812:	4770      	bx	lr

08011814 <_init>:
 8011814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011816:	bf00      	nop
 8011818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801181a:	bc08      	pop	{r3}
 801181c:	469e      	mov	lr, r3
 801181e:	4770      	bx	lr

08011820 <_fini>:
 8011820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011822:	bf00      	nop
 8011824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011826:	bc08      	pop	{r3}
 8011828:	469e      	mov	lr, r3
 801182a:	4770      	bx	lr
